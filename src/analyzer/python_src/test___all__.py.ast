Module([ImportFrom('__future__', [alias('print_function', None)], 0, lineno=1, col_offset=0), Import([alias('unittest', None)], lineno=3, col_offset=0), ImportFrom('test', [alias('test_support', 'support')], 0, lineno=4, col_offset=0), Import([alias('os', None)], lineno=5, col_offset=0), Import([alias('sys', None)], lineno=6, col_offset=0), TryExcept([Assign([Name('bsddb', Store(), lineno=10, col_offset=4)], Call(Attribute(Name('support', Load(), lineno=10, col_offset=12), 'import_module', Load(), lineno=10, col_offset=12), [Str('bsddb', lineno=10, col_offset=34)], [keyword('deprecated', Name('True', Load(), lineno=10, col_offset=54))], None, None, lineno=10, col_offset=12), lineno=10, col_offset=4)], [ExceptHandler(Attribute(Name('unittest', Load(), lineno=11, col_offset=7), 'SkipTest', Load(), lineno=11, col_offset=7), None, [Pass( lineno=12, col_offset=4)], lineno=11, col_offset=0)], [], lineno=9, col_offset=0), ClassDef('NoAll', [Name('RuntimeError', Load(), lineno=15, col_offset=12)], [Pass( lineno=16, col_offset=4)], [], lineno=15, col_offset=0), ClassDef('FailedImport', [Name('RuntimeError', Load(), lineno=18, col_offset=19)], [Pass( lineno=19, col_offset=4)], [], lineno=18, col_offset=0), ClassDef('AllTest', [Attribute(Name('unittest', Load(), lineno=22, col_offset=14), 'TestCase', Load(), lineno=22, col_offset=14)], [FunctionDef('check_all', arguments([Name('self', Param(), lineno=24, col_offset=18), Name('modname', Param(), lineno=24, col_offset=24)], None, None, []), [Assign([Name('names', Store(), lineno=25, col_offset=8)], Dict([], [], lineno=25, col_offset=16), lineno=25, col_offset=8), With(Call(Attribute(Name('support', Load(), lineno=26, col_offset=13), 'check_warnings', Load(), lineno=26, col_offset=13), [Tuple([Str('.* (module|package)', lineno=26, col_offset=37), Name('DeprecationWarning', Load(), lineno=27, col_offset=37)], Load(), lineno=26, col_offset=37)], [keyword('quiet', Name('True', Load(), lineno=27, col_offset=64))], None, None, lineno=26, col_offset=13), None, [TryExcept([Exec(BinOp(Str('import %s', lineno=29, col_offset=21), Mod(), Name('modname', Load(), lineno=29, col_offset=35), lineno=29, col_offset=21), Name('names', Load(), lineno=29, col_offset=46), None, lineno=29, col_offset=16)], [ExceptHandler(None, None, [Raise(Call(Name('FailedImport', Load(), lineno=34, col_offset=22), [Name('modname', Load(), lineno=34, col_offset=35)], [], None, None, lineno=34, col_offset=22), None, None, lineno=34, col_offset=16)], lineno=30, col_offset=12)], [], lineno=28, col_offset=12)], lineno=26, col_offset=13), If(UnaryOp(Not(), Call(Name('hasattr', Load(), lineno=35, col_offset=15), [Subscript(Attribute(Name('sys', Load(), lineno=35, col_offset=23), 'modules', Load(), lineno=35, col_offset=23), Index(Name('modname', Load(), lineno=35, col_offset=35)), Load(), lineno=35, col_offset=23), Str('__all__', lineno=35, col_offset=45)], [], None, None, lineno=35, col_offset=15), lineno=35, col_offset=11), [Raise(Call(Name('NoAll', Load(), lineno=36, col_offset=18), [Name('modname', Load(), lineno=36, col_offset=24)], [], None, None, lineno=36, col_offset=18), None, None, lineno=36, col_offset=12)], [], lineno=35, col_offset=8), Assign([Name('names', Store(), lineno=37, col_offset=8)], Dict([], [], lineno=37, col_offset=16), lineno=37, col_offset=8), TryExcept([Exec(BinOp(Str('from %s import *', lineno=39, col_offset=17), Mod(), Name('modname', Load(), lineno=39, col_offset=38), lineno=39, col_offset=17), Name('names', Load(), lineno=39, col_offset=49), None, lineno=39, col_offset=12)], [ExceptHandler(Name('Exception', Load(), lineno=40, col_offset=15), Name('e', Store(), lineno=40, col_offset=28), [Expr(Call(Attribute(Name('self', Load(), lineno=42, col_offset=12), 'fail', Load(), lineno=42, col_offset=12), [Call(Attribute(Str('__all__ failure in {}: {}: {}', lineno=42, col_offset=22), 'format', Load(), lineno=42, col_offset=22), [Name('modname', Load(), lineno=43, col_offset=22), Attribute(Attribute(Name('e', Load(), lineno=43, col_offset=31), '__class__', Load(), lineno=43, col_offset=31), '__name__', Load(), lineno=43, col_offset=31), Name('e', Load(), lineno=43, col_offset=53)], [], None, None, lineno=42, col_offset=22)], [], None, None, lineno=42, col_offset=12), lineno=42, col_offset=12)], lineno=40, col_offset=8)], [], lineno=38, col_offset=8), If(Compare(Str('__builtins__', lineno=44, col_offset=11), [In()], [Name('names', Load(), lineno=44, col_offset=29)], lineno=44, col_offset=11), [Delete([Subscript(Name('names', Load(), lineno=45, col_offset=16), Index(Str('__builtins__', lineno=45, col_offset=22)), Del(), lineno=45, col_offset=16)], lineno=45, col_offset=12)], [], lineno=44, col_offset=8), Assign([Name('keys', Store(), lineno=46, col_offset=8)], Call(Name('set', Load(), lineno=46, col_offset=15), [Name('names', Load(), lineno=46, col_offset=19)], [], None, None, lineno=46, col_offset=15), lineno=46, col_offset=8), Assign([Name('all', Store(), lineno=47, col_offset=8)], Call(Name('set', Load(), lineno=47, col_offset=14), [Attribute(Subscript(Attribute(Name('sys', Load(), lineno=47, col_offset=18), 'modules', Load(), lineno=47, col_offset=18), Index(Name('modname', Load(), lineno=47, col_offset=30)), Load(), lineno=47, col_offset=18), '__all__', Load(), lineno=47, col_offset=18)], [], None, None, lineno=47, col_offset=14), lineno=47, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=48, col_offset=8), 'assertEqual', Load(), lineno=48, col_offset=8), [Name('keys', Load(), lineno=48, col_offset=25), Name('all', Load(), lineno=48, col_offset=31)], [], None, None, lineno=48, col_offset=8), lineno=48, col_offset=8)], [], lineno=24, col_offset=4), FunctionDef('walk_modules', arguments([Name('self', Param(), lineno=50, col_offset=21), Name('basedir', Param(), lineno=50, col_offset=27), Name('modpath', Param(), lineno=50, col_offset=36)], None, None, []), [For(Name('fn', Store(), lineno=51, col_offset=12), Call(Name('sorted', Load(), lineno=51, col_offset=18), [Call(Attribute(Name('os', Load(), lineno=51, col_offset=25), 'listdir', Load(), lineno=51, col_offset=25), [Name('basedir', Load(), lineno=51, col_offset=36)], [], None, None, lineno=51, col_offset=25)], [], None, None, lineno=51, col_offset=18), [Assign([Name('path', Store(), lineno=52, col_offset=12)], Call(Attribute(Attribute(Name('os', Load(), lineno=52, col_offset=19), 'path', Load(), lineno=52, col_offset=19), 'join', Load(), lineno=52, col_offset=19), [Name('basedir', Load(), lineno=52, col_offset=32), Name('fn', Load(), lineno=52, col_offset=41)], [], None, None, lineno=52, col_offset=19), lineno=52, col_offset=12), If(Call(Attribute(Attribute(Name('os', Load(), lineno=53, col_offset=15), 'path', Load(), lineno=53, col_offset=15), 'isdir', Load(), lineno=53, col_offset=15), [Name('path', Load(), lineno=53, col_offset=29)], [], None, None, lineno=53, col_offset=15), [Assign([Name('pkg_init', Store(), lineno=54, col_offset=16)], Call(Attribute(Attribute(Name('os', Load(), lineno=54, col_offset=27), 'path', Load(), lineno=54, col_offset=27), 'join', Load(), lineno=54, col_offset=27), [Name('path', Load(), lineno=54, col_offset=40), Str('__init__.py', lineno=54, col_offset=46)], [], None, None, lineno=54, col_offset=27), lineno=54, col_offset=16), If(Call(Attribute(Attribute(Name('os', Load(), lineno=55, col_offset=19), 'path', Load(), lineno=55, col_offset=19), 'exists', Load(), lineno=55, col_offset=19), [Name('pkg_init', Load(), lineno=55, col_offset=34)], [], None, None, lineno=55, col_offset=19), [Expr(Yield(Tuple([Name('pkg_init', Load(), lineno=56, col_offset=26), BinOp(Name('modpath', Load(), lineno=56, col_offset=36), Add(), Name('fn', Load(), lineno=56, col_offset=46), lineno=56, col_offset=36)], Load(), lineno=56, col_offset=26), lineno=56, col_offset=20), lineno=56, col_offset=20), For(Tuple([Name('p', Store(), lineno=57, col_offset=24), Name('m', Store(), lineno=57, col_offset=27)], Store(), lineno=57, col_offset=24), Call(Attribute(Name('self', Load(), lineno=57, col_offset=32), 'walk_modules', Load(), lineno=57, col_offset=32), [Name('path', Load(), lineno=57, col_offset=50), BinOp(BinOp(Name('modpath', Load(), lineno=57, col_offset=56), Add(), Name('fn', Load(), lineno=57, col_offset=66), lineno=57, col_offset=56), Add(), Str('.', lineno=57, col_offset=71), lineno=57, col_offset=69)], [], None, None, lineno=57, col_offset=32), [Expr(Yield(Tuple([Name('p', Load(), lineno=58, col_offset=30), Name('m', Load(), lineno=58, col_offset=33)], Load(), lineno=58, col_offset=30), lineno=58, col_offset=24), lineno=58, col_offset=24)], [], lineno=57, col_offset=20)], [], lineno=55, col_offset=16), Continue( lineno=59, col_offset=16)], [], lineno=53, col_offset=12), If(BoolOp(Or(), [UnaryOp(Not(), Call(Attribute(Name('fn', Load(), lineno=60, col_offset=19), 'endswith', Load(), lineno=60, col_offset=19), [Str('.py', lineno=60, col_offset=31)], [], None, None, lineno=60, col_offset=19), lineno=60, col_offset=15), Compare(Name('fn', Load(), lineno=60, col_offset=41), [Eq()], [Str('__init__.py', lineno=60, col_offset=47)], lineno=60, col_offset=41)], lineno=60, col_offset=15), [Continue( lineno=61, col_offset=16)], [], lineno=60, col_offset=12), Expr(Yield(Tuple([Name('path', Load(), lineno=62, col_offset=18), BinOp(Name('modpath', Load(), lineno=62, col_offset=24), Add(), Subscript(Name('fn', Load(), lineno=62, col_offset=34), Slice(None, Num(-3, lineno=62, col_offset=39), None), Load(), lineno=62, col_offset=34), lineno=62, col_offset=24)], Load(), lineno=62, col_offset=18), lineno=62, col_offset=12), lineno=62, col_offset=12)], [], lineno=51, col_offset=8)], [], lineno=50, col_offset=4), FunctionDef('test_all', arguments([Name('self', Param(), lineno=64, col_offset=17)], None, None, []), [Assign([Name('blacklist', Store(), lineno=66, col_offset=8)], Call(Name('set', Load(), lineno=66, col_offset=20), [List([Str('__future__', lineno=68, col_offset=12)], Load(), lineno=66, col_offset=24)], [], None, None, lineno=66, col_offset=20), lineno=66, col_offset=8), If(UnaryOp(Not(), Call(Attribute(Attribute(Name('sys', Load(), lineno=71, col_offset=15), 'platform', Load(), lineno=71, col_offset=15), 'startswith', Load(), lineno=71, col_offset=15), [Str('java', lineno=71, col_offset=39)], [], None, None, lineno=71, col_offset=15), lineno=71, col_offset=11), [Import([alias('_socket', None)], lineno=74, col_offset=12)], [], lineno=71, col_offset=8), TryExcept([Import([alias('rlcompleter', None)], lineno=79, col_offset=12), Import([alias('locale', None)], lineno=80, col_offset=12)], [ExceptHandler(Name('ImportError', Load(), lineno=81, col_offset=15), None, [Pass( lineno=82, col_offset=12)], lineno=81, col_offset=8)], [Expr(Call(Attribute(Name('locale', Load(), lineno=84, col_offset=12), 'setlocale', Load(), lineno=84, col_offset=12), [Attribute(Name('locale', Load(), lineno=84, col_offset=29), 'LC_CTYPE', Load(), lineno=84, col_offset=29), Str('C', lineno=84, col_offset=46)], [], None, None, lineno=84, col_offset=12), lineno=84, col_offset=12)], lineno=78, col_offset=8), Assign([Name('ignored', Store(), lineno=86, col_offset=8)], List([], Load(), lineno=86, col_offset=18), lineno=86, col_offset=8), Assign([Name('failed_imports', Store(), lineno=87, col_offset=8)], List([], Load(), lineno=87, col_offset=25), lineno=87, col_offset=8), Assign([Name('lib_dir', Store(), lineno=88, col_offset=8)], Call(Attribute(Attribute(Name('os', Load(), lineno=88, col_offset=18), 'path', Load(), lineno=88, col_offset=18), 'dirname', Load(), lineno=88, col_offset=18), [Call(Attribute(Attribute(Name('os', Load(), lineno=88, col_offset=34), 'path', Load(), lineno=88, col_offset=34), 'dirname', Load(), lineno=88, col_offset=34), [Name('__file__', Load(), lineno=88, col_offset=50)], [], None, None, lineno=88, col_offset=34)], [], None, None, lineno=88, col_offset=18), lineno=88, col_offset=8), For(Tuple([Name('path', Store(), lineno=89, col_offset=12), Name('modname', Store(), lineno=89, col_offset=18)], Store(), lineno=89, col_offset=12), Call(Attribute(Name('self', Load(), lineno=89, col_offset=29), 'walk_modules', Load(), lineno=89, col_offset=29), [Name('lib_dir', Load(), lineno=89, col_offset=47), Str('', lineno=89, col_offset=56)], [], None, None, lineno=89, col_offset=29), [Assign([Name('m', Store(), lineno=90, col_offset=12)], Name('modname', Load(), lineno=90, col_offset=16), lineno=90, col_offset=12), Assign([Name('blacklisted', Store(), lineno=91, col_offset=12)], Name('False', Load(), lineno=91, col_offset=26), lineno=91, col_offset=12), While(Name('m', Load(), lineno=92, col_offset=18), [If(Compare(Name('m', Load(), lineno=93, col_offset=19), [In()], [Name('blacklist', Load(), lineno=93, col_offset=24)], lineno=93, col_offset=19), [Assign([Name('blacklisted', Store(), lineno=94, col_offset=20)], Name('True', Load(), lineno=94, col_offset=34), lineno=94, col_offset=20), Break( lineno=95, col_offset=20)], [], lineno=93, col_offset=16), Assign([Name('m', Store(), lineno=96, col_offset=16)], Subscript(Call(Attribute(Name('m', Load(), lineno=96, col_offset=20), 'rpartition', Load(), lineno=96, col_offset=20), [Str('.', lineno=96, col_offset=33)], [], None, None, lineno=96, col_offset=20), Index(Num(0, lineno=96, col_offset=38)), Load(), lineno=96, col_offset=20), lineno=96, col_offset=16)], [], lineno=92, col_offset=12), If(Name('blacklisted', Load(), lineno=97, col_offset=15), [Continue( lineno=98, col_offset=16)], [], lineno=97, col_offset=12), If(Attribute(Name('support', Load(), lineno=99, col_offset=15), 'verbose', Load(), lineno=99, col_offset=15), [Expr(Call(Name('print', Load(), lineno=100, col_offset=16), [Name('modname', Load(), lineno=100, col_offset=22)], [], None, None, lineno=100, col_offset=16), lineno=100, col_offset=16)], [], lineno=99, col_offset=12), TryExcept([With(Call(Name('open', Load(), lineno=104, col_offset=21), [Name('path', Load(), lineno=104, col_offset=26), Str('rb', lineno=104, col_offset=32)], [], None, None, lineno=104, col_offset=21), Name('f', Store(), lineno=104, col_offset=41), [If(Compare(Str('__all__', lineno=105, col_offset=23), [NotIn()], [Call(Attribute(Name('f', Load(), lineno=105, col_offset=40), 'read', Load(), lineno=105, col_offset=40), [], [], None, None, lineno=105, col_offset=40)], lineno=105, col_offset=23), [Raise(Call(Name('NoAll', Load(), lineno=106, col_offset=30), [Name('modname', Load(), lineno=106, col_offset=36)], [], None, None, lineno=106, col_offset=30), None, None, lineno=106, col_offset=24)], [], lineno=105, col_offset=20), Expr(Call(Attribute(Name('self', Load(), lineno=107, col_offset=20), 'check_all', Load(), lineno=107, col_offset=20), [Name('modname', Load(), lineno=107, col_offset=35)], [], None, None, lineno=107, col_offset=20), lineno=107, col_offset=20)], lineno=104, col_offset=21)], [ExceptHandler(Name('NoAll', Load(), lineno=108, col_offset=19), None, [Expr(Call(Attribute(Name('ignored', Load(), lineno=109, col_offset=16), 'append', Load(), lineno=109, col_offset=16), [Name('modname', Load(), lineno=109, col_offset=31)], [], None, None, lineno=109, col_offset=16), lineno=109, col_offset=16)], lineno=108, col_offset=12), ExceptHandler(Name('FailedImport', Load(), lineno=110, col_offset=19), None, [Expr(Call(Attribute(Name('failed_imports', Load(), lineno=111, col_offset=16), 'append', Load(), lineno=111, col_offset=16), [Name('modname', Load(), lineno=111, col_offset=38)], [], None, None, lineno=111, col_offset=16), lineno=111, col_offset=16)], lineno=110, col_offset=12)], [], lineno=101, col_offset=12)], [], lineno=89, col_offset=8), If(Attribute(Name('support', Load(), lineno=113, col_offset=11), 'verbose', Load(), lineno=113, col_offset=11), [Expr(Call(Name('print', Load(), lineno=114, col_offset=12), [Str('Following modules have no __all__ and have been ignored:', lineno=114, col_offset=18), Name('ignored', Load(), lineno=115, col_offset=18)], [], None, None, lineno=114, col_offset=12), lineno=114, col_offset=12), Expr(Call(Name('print', Load(), lineno=116, col_offset=12), [Str('Following modules failed to be imported:', lineno=116, col_offset=18), Name('failed_imports', Load(), lineno=116, col_offset=62)], [], None, None, lineno=116, col_offset=12), lineno=116, col_offset=12)], [], lineno=113, col_offset=8)], [], lineno=64, col_offset=4)], [], lineno=22, col_offset=0), FunctionDef('test_main', arguments([], None, None, []), [Expr(Call(Attribute(Name('support', Load(), lineno=120, col_offset=4), 'run_unittest', Load(), lineno=120, col_offset=4), [Name('AllTest', Load(), lineno=120, col_offset=25)], [], None, None, lineno=120, col_offset=4), lineno=120, col_offset=4)], [], lineno=119, col_offset=0), If(Compare(Name('__name__', Load(), lineno=122, col_offset=3), [Eq()], [Str('__main__', lineno=122, col_offset=15)], lineno=122, col_offset=3), [Expr(Call(Name('test_main', Load(), lineno=123, col_offset=4), [], [], None, None, lineno=123, col_offset=4), lineno=123, col_offset=4)], [], lineno=122, col_offset=0)])
