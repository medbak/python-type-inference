Module([Expr(Str('\nInstead of importing this module directly, import os and refer to this module\nas os.path.\n', lineno=13, col_offset=-1), lineno=13, col_offset=-1), Assign([Name('curdir', Store(), lineno=16, col_offset=0)], Str('@', lineno=16, col_offset=9), lineno=16, col_offset=0), Assign([Name('pardir', Store(), lineno=17, col_offset=0)], Str('^', lineno=17, col_offset=9), lineno=17, col_offset=0), Assign([Name('extsep', Store(), lineno=18, col_offset=0)], Str('/', lineno=18, col_offset=9), lineno=18, col_offset=0), Assign([Name('sep', Store(), lineno=19, col_offset=0)], Str('.', lineno=19, col_offset=6), lineno=19, col_offset=0), Assign([Name('pathsep', Store(), lineno=20, col_offset=0)], Str(',', lineno=20, col_offset=10), lineno=20, col_offset=0), Assign([Name('defpath', Store(), lineno=21, col_offset=0)], Str('<Run$Dir>', lineno=21, col_offset=10), lineno=21, col_offset=0), Assign([Name('altsep', Store(), lineno=22, col_offset=0)], Name('None', Load(), lineno=22, col_offset=9), lineno=22, col_offset=0), Import([alias('os', None), alias('stat', None), alias('string', None)], lineno=27, col_offset=0), TryExcept([Import([alias('swi', None)], lineno=30, col_offset=4)], [ExceptHandler(Name('ImportError', Load(), lineno=31, col_offset=7), None, [ClassDef('_swi', [], [FunctionDef('swi', arguments([], 'a', None, []), [Raise(Name('AttributeError', Load(), lineno=34, col_offset=18), Str('This function only available under RISC OS', lineno=34, col_offset=34), None, lineno=34, col_offset=12)], [], lineno=33, col_offset=8), Assign([Name('block', Store(), lineno=35, col_offset=8)], Name('swi', Load(), lineno=35, col_offset=15), lineno=35, col_offset=8)], [], lineno=32, col_offset=4), Assign([Name('swi', Store(), lineno=36, col_offset=4)], Call(Name('_swi', Load(), lineno=36, col_offset=9), [], [], None, None, lineno=36, col_offset=9), lineno=36, col_offset=4)], lineno=31, col_offset=0)], [], lineno=29, col_offset=0), Assign([List([Name('_false', Store(), lineno=38, col_offset=1), Name('_true', Store(), lineno=38, col_offset=9)], Store(), lineno=38, col_offset=0)], Call(Name('range', Load(), lineno=38, col_offset=17), [Num(2, lineno=38, col_offset=23)], [], None, None, lineno=38, col_offset=17), lineno=38, col_offset=0), Assign([Name('_roots', Store(), lineno=40, col_offset=0)], List([Str('$', lineno=40, col_offset=9), Str('&', lineno=40, col_offset=14), Str('%', lineno=40, col_offset=19), Str('@', lineno=40, col_offset=24), Str('\\', lineno=40, col_offset=29)], Load(), lineno=40, col_offset=8), lineno=40, col_offset=0), Assign([Name('_allowMOSFSNames', Store(), lineno=50, col_offset=0)], Name('_false', Load(), lineno=50, col_offset=18), lineno=50, col_offset=0), FunctionDef('_split', arguments([Name('p', Param(), lineno=55, col_offset=11)], None, None, []), [Expr(Str('\n  split filing system name (including special field) and drive specifier from rest\n  of path. This is needed by many riscospath functions.\n  ', lineno=59, col_offset=-1), lineno=59, col_offset=-1), Assign([Name('dash', Store(), lineno=60, col_offset=4)], BoolOp(And(), [Name('_allowMOSFSNames', Load(), lineno=60, col_offset=10), Compare(Subscript(Name('p', Load(), lineno=60, col_offset=31), Slice(None, Num(1, lineno=60, col_offset=34), None), Load(), lineno=60, col_offset=31), [Eq()], [Str('-', lineno=60, col_offset=38)], lineno=60, col_offset=31)], lineno=60, col_offset=10), lineno=60, col_offset=4), If(Name('dash', Load(), lineno=61, col_offset=7), [Assign([Name('q', Store(), lineno=62, col_offset=8)], BinOp(Call(Attribute(Name('string', Load(), lineno=62, col_offset=11), 'find', Load(), lineno=62, col_offset=11), [Name('p', Load(), lineno=62, col_offset=23), Str('-', lineno=62, col_offset=26), Num(1, lineno=62, col_offset=31)], [], None, None, lineno=62, col_offset=11), Add(), Num(1, lineno=62, col_offset=34), lineno=62, col_offset=11), lineno=62, col_offset=8)], [If(Compare(Subscript(Name('p', Load(), lineno=64, col_offset=11), Slice(None, Num(1, lineno=64, col_offset=14), None), Load(), lineno=64, col_offset=11), [Eq()], [Str(':', lineno=64, col_offset=18)], lineno=64, col_offset=11), [Assign([Name('q', Store(), lineno=65, col_offset=12)], Num(0, lineno=65, col_offset=15), lineno=65, col_offset=12)], [Assign([Name('q', Store(), lineno=67, col_offset=12)], BinOp(Call(Attribute(Name('string', Load(), lineno=67, col_offset=15), 'find', Load(), lineno=67, col_offset=15), [Name('p', Load(), lineno=67, col_offset=27), Str(':', lineno=67, col_offset=30)], [], None, None, lineno=67, col_offset=15), Add(), Num(1, lineno=67, col_offset=35), lineno=67, col_offset=15), lineno=67, col_offset=12)], lineno=64, col_offset=8)], lineno=61, col_offset=4), Assign([Name('s', Store(), lineno=68, col_offset=4)], Call(Attribute(Name('string', Load(), lineno=68, col_offset=7), 'find', Load(), lineno=68, col_offset=7), [Name('p', Load(), lineno=68, col_offset=19), Str('#', lineno=68, col_offset=22)], [], None, None, lineno=68, col_offset=7), lineno=68, col_offset=4), If(BoolOp(Or(), [Compare(Name('s', Load(), lineno=69, col_offset=7), [Eq()], [Num(-1, lineno=69, col_offset=11)], lineno=69, col_offset=7), Compare(Name('s', Load(), lineno=69, col_offset=16), [Gt()], [Name('q', Load(), lineno=69, col_offset=18)], lineno=69, col_offset=16)], lineno=69, col_offset=7), [Assign([Name('s', Store(), lineno=70, col_offset=8)], Name('q', Load(), lineno=70, col_offset=11), lineno=70, col_offset=8)], [For(Name('c', Store(), lineno=72, col_offset=12), Subscript(Name('p', Load(), lineno=72, col_offset=17), Slice(Name('dash', Load(), lineno=72, col_offset=19), Name('s', Load(), lineno=72, col_offset=24), None), Load(), lineno=72, col_offset=17), [If(Compare(Name('c', Load(), lineno=73, col_offset=15), [NotIn()], [Attribute(Name('string', Load(), lineno=73, col_offset=24), 'ascii_letters', Load(), lineno=73, col_offset=24)], lineno=73, col_offset=15), [Assign([Name('q', Store(), lineno=74, col_offset=16)], Num(0, lineno=74, col_offset=19), lineno=74, col_offset=16), Break( lineno=75, col_offset=16)], [], lineno=73, col_offset=12)], [], lineno=72, col_offset=8)], lineno=69, col_offset=4), Assign([Name('r', Store(), lineno=76, col_offset=4)], Name('q', Load(), lineno=76, col_offset=7), lineno=76, col_offset=4), If(Compare(Subscript(Name('p', Load(), lineno=77, col_offset=7), Slice(Name('q', Load(), lineno=77, col_offset=9), BinOp(Name('q', Load(), lineno=77, col_offset=11), Add(), Num(1, lineno=77, col_offset=13), lineno=77, col_offset=11), None), Load(), lineno=77, col_offset=7), [Eq()], [Str(':', lineno=77, col_offset=17)], lineno=77, col_offset=7), [Assign([Name('r', Store(), lineno=78, col_offset=8)], BinOp(Call(Attribute(Name('string', Load(), lineno=78, col_offset=11), 'find', Load(), lineno=78, col_offset=11), [Name('p', Load(), lineno=78, col_offset=23), Str('.', lineno=78, col_offset=26), BinOp(Name('q', Load(), lineno=78, col_offset=31), Add(), Num(1, lineno=78, col_offset=33), lineno=78, col_offset=31)], [], None, None, lineno=78, col_offset=11), Add(), Num(1, lineno=78, col_offset=36), lineno=78, col_offset=11), lineno=78, col_offset=8), If(Compare(Name('r', Load(), lineno=79, col_offset=11), [Eq()], [Num(0, lineno=79, col_offset=14)], lineno=79, col_offset=11), [Assign([Name('r', Store(), lineno=80, col_offset=12)], Call(Name('len', Load(), lineno=80, col_offset=15), [Name('p', Load(), lineno=80, col_offset=19)], [], None, None, lineno=80, col_offset=15), lineno=80, col_offset=12)], [], lineno=79, col_offset=8)], [], lineno=77, col_offset=4), Return(Tuple([Subscript(Name('p', Load(), lineno=81, col_offset=12), Slice(None, Name('q', Load(), lineno=81, col_offset=15), None), Load(), lineno=81, col_offset=12), Subscript(Name('p', Load(), lineno=81, col_offset=19), Slice(Name('q', Load(), lineno=81, col_offset=21), Name('r', Load(), lineno=81, col_offset=23), None), Load(), lineno=81, col_offset=19), Subscript(Name('p', Load(), lineno=81, col_offset=27), Slice(Name('r', Load(), lineno=81, col_offset=29), None, None), Load(), lineno=81, col_offset=27)], Load(), lineno=81, col_offset=12), lineno=81, col_offset=4)], [], lineno=55, col_offset=0), FunctionDef('normcase', arguments([Name('p', Param(), lineno=84, col_offset=13)], None, None, []), [Expr(Str("\n  Normalize the case of a pathname. This converts to lowercase as the native RISC\n  OS filesystems are case-insensitive. However, not all filesystems have to be,\n  and there's no simple way to find out what type an FS is argh.\n  ", lineno=89, col_offset=-1), lineno=89, col_offset=-1), Return(Call(Attribute(Name('string', Load(), lineno=90, col_offset=11), 'lower', Load(), lineno=90, col_offset=11), [Name('p', Load(), lineno=90, col_offset=24)], [], None, None, lineno=90, col_offset=11), lineno=90, col_offset=4)], [], lineno=84, col_offset=0), FunctionDef('isabs', arguments([Name('p', Param(), lineno=93, col_offset=10)], None, None, []), [Expr(Str('\n  Return whether a path is absolute. Under RISC OS, a file system specifier does\n  not make a path absolute, but a drive name or number does, and so does using the\n  symbol for root, URD, library, CSD or PSD. This means it is perfectly possible\n  to have an "absolute" URL dependent on the current working directory, and\n  equally you can have a "relative" URL that\'s on a completely different device to\n  the current one argh.\n  ', lineno=101, col_offset=-1), lineno=101, col_offset=-1), Assign([Tuple([Name('fs', Store(), lineno=102, col_offset=5), Name('drive', Store(), lineno=102, col_offset=9), Name('path', Store(), lineno=102, col_offset=16)], Store(), lineno=102, col_offset=5)], Call(Name('_split', Load(), lineno=102, col_offset=23), [Name('p', Load(), lineno=102, col_offset=30)], [], None, None, lineno=102, col_offset=23), lineno=102, col_offset=4), Return(BoolOp(Or(), [Compare(Name('drive', Load(), lineno=103, col_offset=11), [NotEq()], [Str('', lineno=103, col_offset=18)], lineno=103, col_offset=11), Compare(Subscript(Name('path', Load(), lineno=103, col_offset=24), Slice(None, Num(1, lineno=103, col_offset=30), None), Load(), lineno=103, col_offset=24), [In()], [Name('_roots', Load(), lineno=103, col_offset=36)], lineno=103, col_offset=24)], lineno=103, col_offset=11), lineno=103, col_offset=4)], [], lineno=93, col_offset=0), FunctionDef('join', arguments([Name('a', Param(), lineno=106, col_offset=9)], 'p', None, []), [Expr(Str('\n  Join path elements with the directory separator, replacing the entire path when\n  an absolute or FS-changing path part is found.\n  ', lineno=110, col_offset=-1), lineno=110, col_offset=-1), Assign([Name('j', Store(), lineno=111, col_offset=4)], Name('a', Load(), lineno=111, col_offset=7), lineno=111, col_offset=4), For(Name('b', Store(), lineno=112, col_offset=8), Name('p', Load(), lineno=112, col_offset=13), [Assign([Tuple([Name('fs', Store(), lineno=113, col_offset=9), Name('drive', Store(), lineno=113, col_offset=13), Name('path', Store(), lineno=113, col_offset=20)], Store(), lineno=113, col_offset=9)], Call(Name('_split', Load(), lineno=113, col_offset=27), [Name('b', Load(), lineno=113, col_offset=34)], [], None, None, lineno=113, col_offset=27), lineno=113, col_offset=8), If(BoolOp(Or(), [Compare(Name('j', Load(), lineno=114, col_offset=11), [Eq()], [Str('', lineno=114, col_offset=14)], lineno=114, col_offset=11), Compare(Name('fs', Load(), lineno=114, col_offset=20), [NotEq()], [Str('', lineno=114, col_offset=24)], lineno=114, col_offset=20), Compare(Name('drive', Load(), lineno=114, col_offset=30), [NotEq()], [Str('', lineno=114, col_offset=37)], lineno=114, col_offset=30), Compare(Subscript(Name('path', Load(), lineno=114, col_offset=43), Slice(None, Num(1, lineno=114, col_offset=49), None), Load(), lineno=114, col_offset=43), [In()], [Name('_roots', Load(), lineno=114, col_offset=55)], lineno=114, col_offset=43)], lineno=114, col_offset=11), [Assign([Name('j', Store(), lineno=115, col_offset=12)], Name('b', Load(), lineno=115, col_offset=15), lineno=115, col_offset=12)], [If(Compare(Subscript(Name('j', Load(), lineno=116, col_offset=13), Index(Num(-1, lineno=116, col_offset=16)), Load(), lineno=116, col_offset=13), [Eq()], [Str(':', lineno=116, col_offset=20)], lineno=116, col_offset=13), [Assign([Name('j', Store(), lineno=117, col_offset=12)], BinOp(Name('j', Load(), lineno=117, col_offset=15), Add(), Name('b', Load(), lineno=117, col_offset=17), lineno=117, col_offset=15), lineno=117, col_offset=12)], [Assign([Name('j', Store(), lineno=119, col_offset=12)], BinOp(BinOp(Name('j', Load(), lineno=119, col_offset=15), Add(), Str('.', lineno=119, col_offset=17), lineno=119, col_offset=15), Add(), Name('b', Load(), lineno=119, col_offset=21), lineno=119, col_offset=20), lineno=119, col_offset=12)], lineno=116, col_offset=13)], lineno=114, col_offset=8)], [], lineno=112, col_offset=4), Return(Name('j', Load(), lineno=120, col_offset=11), lineno=120, col_offset=4)], [], lineno=106, col_offset=0), FunctionDef('split', arguments([Name('p', Param(), lineno=123, col_offset=10)], None, None, []), [Expr(Str("\n  Split a path in head (everything up to the last '.') and tail (the rest). FS\n  name must still be dealt with separately since special field may contain '.'.\n  ", lineno=127, col_offset=-1), lineno=127, col_offset=-1), Assign([Tuple([Name('fs', Store(), lineno=128, col_offset=5), Name('drive', Store(), lineno=128, col_offset=9), Name('path', Store(), lineno=128, col_offset=16)], Store(), lineno=128, col_offset=5)], Call(Name('_split', Load(), lineno=128, col_offset=23), [Name('p', Load(), lineno=128, col_offset=30)], [], None, None, lineno=128, col_offset=23), lineno=128, col_offset=4), Assign([Name('q', Store(), lineno=129, col_offset=4)], Call(Attribute(Name('string', Load(), lineno=129, col_offset=7), 'rfind', Load(), lineno=129, col_offset=7), [Name('path', Load(), lineno=129, col_offset=20), Str('.', lineno=129, col_offset=26)], [], None, None, lineno=129, col_offset=7), lineno=129, col_offset=4), If(Compare(Name('q', Load(), lineno=130, col_offset=7), [NotEq()], [Num(-1, lineno=130, col_offset=11)], lineno=130, col_offset=7), [Return(Tuple([BinOp(BinOp(Name('fs', Load(), lineno=131, col_offset=16), Add(), Name('drive', Load(), lineno=131, col_offset=19), lineno=131, col_offset=16), Add(), Subscript(Name('path', Load(), lineno=131, col_offset=25), Slice(None, Name('q', Load(), lineno=131, col_offset=31), None), Load(), lineno=131, col_offset=25), lineno=131, col_offset=24), Subscript(Name('path', Load(), lineno=131, col_offset=35), Slice(BinOp(Name('q', Load(), lineno=131, col_offset=40), Add(), Num(1, lineno=131, col_offset=42), lineno=131, col_offset=40), None, None), Load(), lineno=131, col_offset=35)], Load(), lineno=131, col_offset=16), lineno=131, col_offset=8)], [], lineno=130, col_offset=4), Return(Tuple([Str('', lineno=132, col_offset=12), Name('p', Load(), lineno=132, col_offset=16)], Load(), lineno=132, col_offset=12), lineno=132, col_offset=4)], [], lineno=123, col_offset=0), FunctionDef('splitext', arguments([Name('p', Param(), lineno=135, col_offset=13)], None, None, []), [Expr(Str("\n  Split a path in root and extension. This assumes the 'using slash for dot and\n  dot for slash with foreign files' convention common in RISC OS is in force.\n  ", lineno=139, col_offset=-1), lineno=139, col_offset=-1), Assign([Tuple([Name('tail', Store(), lineno=140, col_offset=5), Name('head', Store(), lineno=140, col_offset=11)], Store(), lineno=140, col_offset=5)], Call(Name('split', Load(), lineno=140, col_offset=18), [Name('p', Load(), lineno=140, col_offset=24)], [], None, None, lineno=140, col_offset=18), lineno=140, col_offset=4), If(Compare(Str('/', lineno=141, col_offset=7), [In()], [Name('head', Load(), lineno=141, col_offset=14)], lineno=141, col_offset=7), [Assign([Name('q', Store(), lineno=142, col_offset=8)], BinOp(Call(Name('len', Load(), lineno=142, col_offset=11), [Name('head', Load(), lineno=142, col_offset=15)], [], None, None, lineno=142, col_offset=11), Sub(), Call(Attribute(Name('string', Load(), lineno=142, col_offset=21), 'rfind', Load(), lineno=142, col_offset=21), [Name('head', Load(), lineno=142, col_offset=34), Str('/', lineno=142, col_offset=40)], [], None, None, lineno=142, col_offset=21), lineno=142, col_offset=11), lineno=142, col_offset=8), Return(Tuple([Subscript(Name('p', Load(), lineno=143, col_offset=16), Slice(None, UnaryOp(USub(), Name('q', Load(), lineno=143, col_offset=20), lineno=143, col_offset=19), None), Load(), lineno=143, col_offset=16), Subscript(Name('p', Load(), lineno=143, col_offset=24), Slice(UnaryOp(USub(), Name('q', Load(), lineno=143, col_offset=27), lineno=143, col_offset=26), None, None), Load(), lineno=143, col_offset=24)], Load(), lineno=143, col_offset=16), lineno=143, col_offset=8)], [], lineno=141, col_offset=4), Return(Tuple([Name('p', Load(), lineno=144, col_offset=12), Str('', lineno=144, col_offset=15)], Load(), lineno=144, col_offset=12), lineno=144, col_offset=4)], [], lineno=135, col_offset=0), FunctionDef('splitdrive', arguments([Name('p', Param(), lineno=147, col_offset=15)], None, None, []), [Expr(Str('\n  Split a pathname into a drive specification (including FS name) and the rest of\n  the path. The terminating dot of the drive name is included in the drive\n  specification.\n  ', lineno=152, col_offset=-1), lineno=152, col_offset=-1), Assign([Tuple([Name('fs', Store(), lineno=153, col_offset=5), Name('drive', Store(), lineno=153, col_offset=9), Name('path', Store(), lineno=153, col_offset=16)], Store(), lineno=153, col_offset=5)], Call(Name('_split', Load(), lineno=153, col_offset=23), [Name('p', Load(), lineno=153, col_offset=30)], [], None, None, lineno=153, col_offset=23), lineno=153, col_offset=4), Return(Tuple([BinOp(Name('fs', Load(), lineno=154, col_offset=12), Add(), Name('drive', Load(), lineno=154, col_offset=15), lineno=154, col_offset=12), Name('p', Load(), lineno=154, col_offset=22)], Load(), lineno=154, col_offset=12), lineno=154, col_offset=4)], [], lineno=147, col_offset=0), FunctionDef('basename', arguments([Name('p', Param(), lineno=157, col_offset=13)], None, None, []), [Expr(Str('\n  Return the tail (basename) part of a path.\n  ', lineno=160, col_offset=-1), lineno=160, col_offset=-1), Return(Subscript(Call(Name('split', Load(), lineno=161, col_offset=11), [Name('p', Load(), lineno=161, col_offset=17)], [], None, None, lineno=161, col_offset=11), Index(Num(1, lineno=161, col_offset=20)), Load(), lineno=161, col_offset=11), lineno=161, col_offset=4)], [], lineno=157, col_offset=0), FunctionDef('dirname', arguments([Name('p', Param(), lineno=164, col_offset=12)], None, None, []), [Expr(Str('\n  Return the head (dirname) part of a path.\n  ', lineno=167, col_offset=-1), lineno=167, col_offset=-1), Return(Subscript(Call(Name('split', Load(), lineno=168, col_offset=11), [Name('p', Load(), lineno=168, col_offset=17)], [], None, None, lineno=168, col_offset=11), Index(Num(0, lineno=168, col_offset=20)), Load(), lineno=168, col_offset=11), lineno=168, col_offset=4)], [], lineno=164, col_offset=0), FunctionDef('commonprefix', arguments([Name('m', Param(), lineno=171, col_offset=17)], None, None, []), [Expr(Str('Given a list of pathnames, returns the longest common leading component', lineno=172, col_offset=4), lineno=172, col_offset=4), If(UnaryOp(Not(), Name('m', Load(), lineno=173, col_offset=11), lineno=173, col_offset=7), [Return(Str('', lineno=173, col_offset=21), lineno=173, col_offset=14)], [], lineno=173, col_offset=4), Assign([Name('s1', Store(), lineno=174, col_offset=4)], Call(Name('min', Load(), lineno=174, col_offset=9), [Name('m', Load(), lineno=174, col_offset=13)], [], None, None, lineno=174, col_offset=9), lineno=174, col_offset=4), Assign([Name('s2', Store(), lineno=175, col_offset=4)], Call(Name('max', Load(), lineno=175, col_offset=9), [Name('m', Load(), lineno=175, col_offset=13)], [], None, None, lineno=175, col_offset=9), lineno=175, col_offset=4), Assign([Name('n', Store(), lineno=176, col_offset=4)], Call(Name('min', Load(), lineno=176, col_offset=8), [Call(Name('len', Load(), lineno=176, col_offset=12), [Name('s1', Load(), lineno=176, col_offset=16)], [], None, None, lineno=176, col_offset=12), Call(Name('len', Load(), lineno=176, col_offset=21), [Name('s2', Load(), lineno=176, col_offset=25)], [], None, None, lineno=176, col_offset=21)], [], None, None, lineno=176, col_offset=8), lineno=176, col_offset=4), For(Name('i', Store(), lineno=177, col_offset=8), Call(Name('xrange', Load(), lineno=177, col_offset=13), [Name('n', Load(), lineno=177, col_offset=20)], [], None, None, lineno=177, col_offset=13), [If(Compare(Subscript(Name('s1', Load(), lineno=178, col_offset=11), Index(Name('i', Load(), lineno=178, col_offset=14)), Load(), lineno=178, col_offset=11), [NotEq()], [Subscript(Name('s2', Load(), lineno=178, col_offset=20), Index(Name('i', Load(), lineno=178, col_offset=23)), Load(), lineno=178, col_offset=20)], lineno=178, col_offset=11), [Return(Subscript(Name('s1', Load(), lineno=179, col_offset=19), Slice(None, Name('i', Load(), lineno=179, col_offset=23), None), Load(), lineno=179, col_offset=19), lineno=179, col_offset=12)], [], lineno=178, col_offset=8)], [], lineno=177, col_offset=4), Return(Subscript(Name('s1', Load(), lineno=180, col_offset=11), Slice(None, Name('n', Load(), lineno=180, col_offset=15), None), Load(), lineno=180, col_offset=11), lineno=180, col_offset=4)], [], lineno=171, col_offset=0), FunctionDef('getsize', arguments([Name('p', Param(), lineno=185, col_offset=12)], None, None, []), [Expr(Str('\n  Return the size of a file, reported by os.stat().\n  ', lineno=188, col_offset=-1), lineno=188, col_offset=-1), Assign([Name('st', Store(), lineno=189, col_offset=4)], Call(Attribute(Name('os', Load(), lineno=189, col_offset=8), 'stat', Load(), lineno=189, col_offset=8), [Name('p', Load(), lineno=189, col_offset=16)], [], None, None, lineno=189, col_offset=8), lineno=189, col_offset=4), Return(Subscript(Name('st', Load(), lineno=190, col_offset=11), Index(Attribute(Name('stat', Load(), lineno=190, col_offset=14), 'ST_SIZE', Load(), lineno=190, col_offset=14)), Load(), lineno=190, col_offset=11), lineno=190, col_offset=4)], [], lineno=185, col_offset=0), FunctionDef('getmtime', arguments([Name('p', Param(), lineno=193, col_offset=13)], None, None, []), [Expr(Str('\n  Return the last modification time of a file, reported by os.stat().\n  ', lineno=196, col_offset=-1), lineno=196, col_offset=-1), Assign([Name('st', Store(), lineno=197, col_offset=4)], Call(Attribute(Name('os', Load(), lineno=197, col_offset=9), 'stat', Load(), lineno=197, col_offset=9), [Name('p', Load(), lineno=197, col_offset=17)], [], None, None, lineno=197, col_offset=9), lineno=197, col_offset=4), Return(Subscript(Name('st', Load(), lineno=198, col_offset=11), Index(Attribute(Name('stat', Load(), lineno=198, col_offset=14), 'ST_MTIME', Load(), lineno=198, col_offset=14)), Load(), lineno=198, col_offset=11), lineno=198, col_offset=4)], [], lineno=193, col_offset=0), Assign([Name('getatime', Store(), lineno=200, col_offset=0)], Name('getmtime', Load(), lineno=200, col_offset=10), lineno=200, col_offset=0), FunctionDef('exists', arguments([Name('p', Param(), lineno=205, col_offset=11)], None, None, []), [Expr(Str('\n  Test whether a path exists.\n  ', lineno=208, col_offset=-1), lineno=208, col_offset=-1), TryExcept([Return(Compare(Call(Attribute(Name('swi', Load(), lineno=210, col_offset=15), 'swi', Load(), lineno=210, col_offset=15), [Str('OS_File', lineno=210, col_offset=23), Str('5s;i', lineno=210, col_offset=34), Name('p', Load(), lineno=210, col_offset=42)], [], None, None, lineno=210, col_offset=15), [NotEq()], [Num(0, lineno=210, col_offset=46)], lineno=210, col_offset=15), lineno=210, col_offset=8)], [ExceptHandler(Attribute(Name('swi', Load(), lineno=211, col_offset=11), 'error', Load(), lineno=211, col_offset=11), None, [Return(Num(0, lineno=212, col_offset=15), lineno=212, col_offset=8)], lineno=211, col_offset=4)], [], lineno=209, col_offset=4)], [], lineno=205, col_offset=0), Assign([Name('lexists', Store(), lineno=214, col_offset=0)], Name('exists', Load(), lineno=214, col_offset=10), lineno=214, col_offset=0), FunctionDef('isdir', arguments([Name('p', Param(), lineno=217, col_offset=10)], None, None, []), [Expr(Str('\n  Is a path a directory? Includes image files.\n  ', lineno=220, col_offset=-1), lineno=220, col_offset=-1), TryExcept([Return(Compare(Call(Attribute(Name('swi', Load(), lineno=222, col_offset=15), 'swi', Load(), lineno=222, col_offset=15), [Str('OS_File', lineno=222, col_offset=23), Str('5s;i', lineno=222, col_offset=34), Name('p', Load(), lineno=222, col_offset=42)], [], None, None, lineno=222, col_offset=15), [In()], [List([Num(2, lineno=222, col_offset=49), Num(3, lineno=222, col_offset=52)], Load(), lineno=222, col_offset=48)], lineno=222, col_offset=15), lineno=222, col_offset=8)], [ExceptHandler(Attribute(Name('swi', Load(), lineno=223, col_offset=11), 'error', Load(), lineno=223, col_offset=11), None, [Return(Num(0, lineno=224, col_offset=15), lineno=224, col_offset=8)], lineno=223, col_offset=4)], [], lineno=221, col_offset=4)], [], lineno=217, col_offset=0), FunctionDef('isfile', arguments([Name('p', Param(), lineno=227, col_offset=11)], None, None, []), [Expr(Str('\n  Test whether a path is a file, including image files.\n  ', lineno=230, col_offset=-1), lineno=230, col_offset=-1), TryExcept([Return(Compare(Call(Attribute(Name('swi', Load(), lineno=232, col_offset=15), 'swi', Load(), lineno=232, col_offset=15), [Str('OS_File', lineno=232, col_offset=23), Str('5s;i', lineno=232, col_offset=34), Name('p', Load(), lineno=232, col_offset=42)], [], None, None, lineno=232, col_offset=15), [In()], [List([Num(1, lineno=232, col_offset=49), Num(3, lineno=232, col_offset=52)], Load(), lineno=232, col_offset=48)], lineno=232, col_offset=15), lineno=232, col_offset=8)], [ExceptHandler(Attribute(Name('swi', Load(), lineno=233, col_offset=11), 'error', Load(), lineno=233, col_offset=11), None, [Return(Num(0, lineno=234, col_offset=15), lineno=234, col_offset=8)], lineno=233, col_offset=4)], [], lineno=231, col_offset=4)], [], lineno=227, col_offset=0), FunctionDef('islink', arguments([Name('p', Param(), lineno=237, col_offset=11)], None, None, []), [Expr(Str('\n  RISC OS has no links or mounts.\n  ', lineno=240, col_offset=-1), lineno=240, col_offset=-1), Return(Name('_false', Load(), lineno=241, col_offset=11), lineno=241, col_offset=4)], [], lineno=237, col_offset=0), Assign([Name('ismount', Store(), lineno=243, col_offset=0)], Name('islink', Load(), lineno=243, col_offset=9), lineno=243, col_offset=0), FunctionDef('samefile', arguments([Name('fa', Param(), lineno=253, col_offset=13), Name('fb', Param(), lineno=253, col_offset=17)], None, None, []), [Expr(Str('\n  Test whether two pathnames reference the same actual file.\n  ', lineno=256, col_offset=-1), lineno=256, col_offset=-1), Assign([Name('l', Store(), lineno=257, col_offset=4)], Num(512, lineno=257, col_offset=7), lineno=257, col_offset=4), Assign([Name('b', Store(), lineno=258, col_offset=4)], Call(Attribute(Name('swi', Load(), lineno=258, col_offset=7), 'block', Load(), lineno=258, col_offset=7), [Name('l', Load(), lineno=258, col_offset=17)], [], None, None, lineno=258, col_offset=7), lineno=258, col_offset=4), Expr(Call(Attribute(Name('swi', Load(), lineno=259, col_offset=4), 'swi', Load(), lineno=259, col_offset=4), [Str('OS_FSControl', lineno=259, col_offset=12), Str('isb..i', lineno=259, col_offset=28), Num(37, lineno=259, col_offset=38), Name('fa', Load(), lineno=259, col_offset=42), Name('b', Load(), lineno=259, col_offset=46), Name('l', Load(), lineno=259, col_offset=49)], [], None, None, lineno=259, col_offset=4), lineno=259, col_offset=4), Assign([Name('fa', Store(), lineno=260, col_offset=4)], Call(Attribute(Name('b', Load(), lineno=260, col_offset=8), 'ctrlstring', Load(), lineno=260, col_offset=8), [], [], None, None, lineno=260, col_offset=8), lineno=260, col_offset=4), Expr(Call(Attribute(Name('swi', Load(), lineno=261, col_offset=4), 'swi', Load(), lineno=261, col_offset=4), [Str('OS_FSControl', lineno=261, col_offset=12), Str('isb..i', lineno=261, col_offset=28), Num(37, lineno=261, col_offset=38), Name('fb', Load(), lineno=261, col_offset=42), Name('b', Load(), lineno=261, col_offset=46), Name('l', Load(), lineno=261, col_offset=49)], [], None, None, lineno=261, col_offset=4), lineno=261, col_offset=4), Assign([Name('fb', Store(), lineno=262, col_offset=4)], Call(Attribute(Name('b', Load(), lineno=262, col_offset=8), 'ctrlstring', Load(), lineno=262, col_offset=8), [], [], None, None, lineno=262, col_offset=8), lineno=262, col_offset=4), Return(Compare(Name('fa', Load(), lineno=263, col_offset=11), [Eq()], [Name('fb', Load(), lineno=263, col_offset=15)], lineno=263, col_offset=11), lineno=263, col_offset=4)], [], lineno=253, col_offset=0), FunctionDef('sameopenfile', arguments([Name('a', Param(), lineno=266, col_offset=17), Name('b', Param(), lineno=266, col_offset=20)], None, None, []), [Expr(Str('\n  Test whether two open file objects reference the same file.\n  ', lineno=269, col_offset=-1), lineno=269, col_offset=-1), Return(Compare(Subscript(Call(Attribute(Name('os', Load(), lineno=270, col_offset=11), 'fstat', Load(), lineno=270, col_offset=11), [Name('a', Load(), lineno=270, col_offset=20)], [], None, None, lineno=270, col_offset=11), Index(Attribute(Name('stat', Load(), lineno=270, col_offset=23), 'ST_INO', Load(), lineno=270, col_offset=23)), Load(), lineno=270, col_offset=11), [Eq()], [Subscript(Call(Attribute(Name('os', Load(), lineno=270, col_offset=37), 'fstat', Load(), lineno=270, col_offset=37), [Name('b', Load(), lineno=270, col_offset=46)], [], None, None, lineno=270, col_offset=37), Index(Attribute(Name('stat', Load(), lineno=270, col_offset=49), 'ST_INO', Load(), lineno=270, col_offset=49)), Load(), lineno=270, col_offset=37)], lineno=270, col_offset=11), lineno=270, col_offset=4)], [], lineno=266, col_offset=0), FunctionDef('expanduser', arguments([Name('p', Param(), lineno=278, col_offset=15)], None, None, []), [Assign([Tuple([Name('fs', Store(), lineno=279, col_offset=5), Name('drive', Store(), lineno=279, col_offset=9), Name('path', Store(), lineno=279, col_offset=16)], Store(), lineno=279, col_offset=5)], Call(Name('_split', Load(), lineno=279, col_offset=23), [Name('p', Load(), lineno=279, col_offset=30)], [], None, None, lineno=279, col_offset=23), lineno=279, col_offset=4), Assign([Name('l', Store(), lineno=280, col_offset=4)], Num(512, lineno=280, col_offset=7), lineno=280, col_offset=4), Assign([Name('b', Store(), lineno=281, col_offset=4)], Call(Attribute(Name('swi', Load(), lineno=281, col_offset=7), 'block', Load(), lineno=281, col_offset=7), [Name('l', Load(), lineno=281, col_offset=17)], [], None, None, lineno=281, col_offset=7), lineno=281, col_offset=4), If(Compare(Subscript(Name('path', Load(), lineno=283, col_offset=7), Slice(None, Num(1, lineno=283, col_offset=13), None), Load(), lineno=283, col_offset=7), [NotEq()], [Str('@', lineno=283, col_offset=17)], lineno=283, col_offset=7), [Return(Name('p', Load(), lineno=284, col_offset=15), lineno=284, col_offset=8)], [], lineno=283, col_offset=4), If(Compare(Name('fs', Load(), lineno=285, col_offset=7), [Eq()], [Str('', lineno=285, col_offset=11)], lineno=285, col_offset=7), [Assign([Name('fsno', Store(), lineno=286, col_offset=8)], Call(Attribute(Name('swi', Load(), lineno=286, col_offset=14), 'swi', Load(), lineno=286, col_offset=14), [Str('OS_Args', lineno=286, col_offset=22), Str('00;i', lineno=286, col_offset=33)], [], None, None, lineno=286, col_offset=14), lineno=286, col_offset=8), Expr(Call(Attribute(Name('swi', Load(), lineno=287, col_offset=8), 'swi', Load(), lineno=287, col_offset=8), [Str('OS_FSControl', lineno=287, col_offset=16), Str('iibi', lineno=287, col_offset=32), Num(33, lineno=287, col_offset=40), Name('fsno', Load(), lineno=287, col_offset=44), Name('b', Load(), lineno=287, col_offset=50), Name('l', Load(), lineno=287, col_offset=53)], [], None, None, lineno=287, col_offset=8), lineno=287, col_offset=8), Assign([Name('fsname', Store(), lineno=288, col_offset=8)], Call(Attribute(Name('b', Load(), lineno=288, col_offset=16), 'ctrlstring', Load(), lineno=288, col_offset=16), [], [], None, None, lineno=288, col_offset=16), lineno=288, col_offset=8)], [If(Compare(Subscript(Name('fs', Load(), lineno=290, col_offset=11), Slice(None, Num(1, lineno=290, col_offset=15), None), Load(), lineno=290, col_offset=11), [Eq()], [Str('-', lineno=290, col_offset=19)], lineno=290, col_offset=11), [Assign([Name('fsname', Store(), lineno=291, col_offset=12)], Subscript(Name('fs', Load(), lineno=291, col_offset=20), Slice(Num(1, lineno=291, col_offset=23), Num(-1, lineno=291, col_offset=26), None), Load(), lineno=291, col_offset=20), lineno=291, col_offset=12)], [Assign([Name('fsname', Store(), lineno=293, col_offset=12)], Subscript(Name('fs', Load(), lineno=293, col_offset=20), Slice(None, Num(-1, lineno=293, col_offset=25), None), Load(), lineno=293, col_offset=20), lineno=293, col_offset=12)], lineno=290, col_offset=8), Assign([Name('fsname', Store(), lineno=294, col_offset=8)], Subscript(Call(Attribute(Name('string', Load(), lineno=294, col_offset=16), 'split', Load(), lineno=294, col_offset=16), [Name('fsname', Load(), lineno=294, col_offset=29), Str('#', lineno=294, col_offset=37), Num(1, lineno=294, col_offset=42)], [], None, None, lineno=294, col_offset=16), Index(Num(0, lineno=294, col_offset=45)), Load(), lineno=294, col_offset=16), lineno=294, col_offset=8)], lineno=285, col_offset=4), Assign([Name('x', Store(), lineno=295, col_offset=4)], Call(Attribute(Name('swi', Load(), lineno=295, col_offset=7), 'swi', Load(), lineno=295, col_offset=7), [Str('OS_FSControl', lineno=295, col_offset=15), Str('ib2s.i;.....i', lineno=295, col_offset=31), Num(54, lineno=295, col_offset=48), Name('b', Load(), lineno=295, col_offset=52), Name('fsname', Load(), lineno=295, col_offset=55), Name('l', Load(), lineno=295, col_offset=63)], [], None, None, lineno=295, col_offset=7), lineno=295, col_offset=4), If(Compare(Name('x', Load(), lineno=296, col_offset=7), [Lt()], [Name('l', Load(), lineno=296, col_offset=9)], lineno=296, col_offset=7), [Assign([Name('urd', Store(), lineno=297, col_offset=8)], Call(Attribute(Name('b', Load(), lineno=297, col_offset=13), 'tostring', Load(), lineno=297, col_offset=13), [Num(0, lineno=297, col_offset=24), BinOp(BinOp(Name('l', Load(), lineno=297, col_offset=27), Sub(), Name('x', Load(), lineno=297, col_offset=29), lineno=297, col_offset=27), Sub(), Num(1, lineno=297, col_offset=31), lineno=297, col_offset=30)], [], None, None, lineno=297, col_offset=13), lineno=297, col_offset=8)], [Assign([Name('x', Store(), lineno=299, col_offset=8)], Call(Attribute(Name('swi', Load(), lineno=299, col_offset=11), 'swi', Load(), lineno=299, col_offset=11), [Str('OS_FSControl', lineno=299, col_offset=19), Str('ib0s.i;.....i', lineno=299, col_offset=35), Num(54, lineno=299, col_offset=52), Name('b', Load(), lineno=299, col_offset=56), Name('fsname', Load(), lineno=299, col_offset=59), Name('l', Load(), lineno=299, col_offset=67)], [], None, None, lineno=299, col_offset=11), lineno=299, col_offset=8), If(Compare(Name('x', Load(), lineno=300, col_offset=11), [Lt()], [Name('l', Load(), lineno=300, col_offset=13)], lineno=300, col_offset=11), [Assign([Name('urd', Store(), lineno=301, col_offset=12)], Call(Attribute(Name('b', Load(), lineno=301, col_offset=17), 'tostring', Load(), lineno=301, col_offset=17), [Num(0, lineno=301, col_offset=28), BinOp(BinOp(Name('l', Load(), lineno=301, col_offset=31), Sub(), Name('x', Load(), lineno=301, col_offset=33), lineno=301, col_offset=31), Sub(), Num(1, lineno=301, col_offset=35), lineno=301, col_offset=34)], [], None, None, lineno=301, col_offset=17), lineno=301, col_offset=12)], [Assign([Name('urd', Store(), lineno=303, col_offset=12)], Str('$', lineno=303, col_offset=17), lineno=303, col_offset=12)], lineno=300, col_offset=8)], lineno=296, col_offset=4), Return(BinOp(BinOp(BinOp(Name('fsname', Load(), lineno=304, col_offset=11), Add(), Str(':', lineno=304, col_offset=18), lineno=304, col_offset=11), Add(), Name('urd', Load(), lineno=304, col_offset=22), lineno=304, col_offset=21), Add(), Subscript(Name('path', Load(), lineno=304, col_offset=26), Slice(Num(1, lineno=304, col_offset=31), None, None), Load(), lineno=304, col_offset=26), lineno=304, col_offset=25), lineno=304, col_offset=4)], [], lineno=278, col_offset=0), FunctionDef('expandvars', arguments([Name('p', Param(), lineno=308, col_offset=15)], None, None, []), [Expr(Str('\n  Expand environment variables using OS_GSTrans.\n  ', lineno=311, col_offset=-1), lineno=311, col_offset=-1), Assign([Name('l', Store(), lineno=312, col_offset=4)], Num(512, lineno=312, col_offset=7), lineno=312, col_offset=4), Assign([Name('b', Store(), lineno=313, col_offset=4)], Call(Attribute(Name('swi', Load(), lineno=313, col_offset=7), 'block', Load(), lineno=313, col_offset=7), [Name('l', Load(), lineno=313, col_offset=17)], [], None, None, lineno=313, col_offset=7), lineno=313, col_offset=4), Return(Call(Attribute(Name('b', Load(), lineno=314, col_offset=11), 'tostring', Load(), lineno=314, col_offset=11), [Num(0, lineno=314, col_offset=22), Call(Attribute(Name('swi', Load(), lineno=314, col_offset=25), 'swi', Load(), lineno=314, col_offset=25), [Str('OS_GSTrans', lineno=314, col_offset=33), Str('sbi;..i', lineno=314, col_offset=47), Name('p', Load(), lineno=314, col_offset=58), Name('b', Load(), lineno=314, col_offset=61), Name('l', Load(), lineno=314, col_offset=64)], [], None, None, lineno=314, col_offset=25)], [], None, None, lineno=314, col_offset=11), lineno=314, col_offset=4)], [], lineno=308, col_offset=0), Assign([Name('abspath', Store(), lineno=318, col_offset=0)], Attribute(Name('os', Load(), lineno=318, col_offset=10), 'expand', Load(), lineno=318, col_offset=10), lineno=318, col_offset=0), Assign([Name('realpath', Store(), lineno=322, col_offset=0)], Name('abspath', Load(), lineno=322, col_offset=11), lineno=322, col_offset=0), FunctionDef('normpath', arguments([Name('p', Param(), lineno=327, col_offset=13)], None, None, []), [Expr(Str('\n  Normalize path, eliminating up-directory ^s.\n  ', lineno=330, col_offset=-1), lineno=330, col_offset=-1), Assign([Tuple([Name('fs', Store(), lineno=331, col_offset=5), Name('drive', Store(), lineno=331, col_offset=9), Name('path', Store(), lineno=331, col_offset=16)], Store(), lineno=331, col_offset=5)], Call(Name('_split', Load(), lineno=331, col_offset=23), [Name('p', Load(), lineno=331, col_offset=30)], [], None, None, lineno=331, col_offset=23), lineno=331, col_offset=4), Assign([Name('rhs', Store(), lineno=332, col_offset=4)], Str('', lineno=332, col_offset=9), lineno=332, col_offset=4), Assign([Name('ups', Store(), lineno=333, col_offset=4)], Num(0, lineno=333, col_offset=9), lineno=333, col_offset=4), While(Compare(Name('path', Load(), lineno=334, col_offset=10), [NotEq()], [Str('', lineno=334, col_offset=16)], lineno=334, col_offset=10), [Assign([Tuple([Name('path', Store(), lineno=335, col_offset=9), Name('el', Store(), lineno=335, col_offset=15)], Store(), lineno=335, col_offset=9)], Call(Name('split', Load(), lineno=335, col_offset=20), [Name('path', Load(), lineno=335, col_offset=26)], [], None, None, lineno=335, col_offset=20), lineno=335, col_offset=8), If(Compare(Name('el', Load(), lineno=336, col_offset=11), [Eq()], [Str('^', lineno=336, col_offset=15)], lineno=336, col_offset=11), [Assign([Name('ups', Store(), lineno=337, col_offset=12)], BinOp(Name('ups', Load(), lineno=337, col_offset=17), Add(), Num(1, lineno=337, col_offset=21), lineno=337, col_offset=17), lineno=337, col_offset=12)], [If(Compare(Name('ups', Load(), lineno=339, col_offset=15), [Gt()], [Num(0, lineno=339, col_offset=19)], lineno=339, col_offset=15), [Assign([Name('ups', Store(), lineno=340, col_offset=16)], BinOp(Name('ups', Load(), lineno=340, col_offset=21), Sub(), Num(1, lineno=340, col_offset=25), lineno=340, col_offset=21), lineno=340, col_offset=16)], [If(Compare(Name('rhs', Load(), lineno=342, col_offset=19), [Eq()], [Str('', lineno=342, col_offset=24)], lineno=342, col_offset=19), [Assign([Name('rhs', Store(), lineno=343, col_offset=20)], Name('el', Load(), lineno=343, col_offset=25), lineno=343, col_offset=20)], [Assign([Name('rhs', Store(), lineno=345, col_offset=20)], BinOp(BinOp(Name('el', Load(), lineno=345, col_offset=25), Add(), Str('.', lineno=345, col_offset=28), lineno=345, col_offset=25), Add(), Name('rhs', Load(), lineno=345, col_offset=32), lineno=345, col_offset=31), lineno=345, col_offset=20)], lineno=342, col_offset=16)], lineno=339, col_offset=12)], lineno=336, col_offset=8)], [], lineno=334, col_offset=4), While(Compare(Name('ups', Load(), lineno=346, col_offset=10), [Gt()], [Num(0, lineno=346, col_offset=14)], lineno=346, col_offset=10), [Assign([Name('ups', Store(), lineno=347, col_offset=8)], BinOp(Name('ups', Load(), lineno=347, col_offset=13), Sub(), Num(1, lineno=347, col_offset=17), lineno=347, col_offset=13), lineno=347, col_offset=8), Assign([Name('rhs', Store(), lineno=348, col_offset=8)], BinOp(Str('^.', lineno=348, col_offset=13), Add(), Name('rhs', Load(), lineno=348, col_offset=18), lineno=348, col_offset=13), lineno=348, col_offset=8)], [], lineno=346, col_offset=4), Return(BinOp(BinOp(Name('fs', Load(), lineno=349, col_offset=11), Add(), Name('drive', Load(), lineno=349, col_offset=14), lineno=349, col_offset=11), Add(), Name('rhs', Load(), lineno=349, col_offset=20), lineno=349, col_offset=19), lineno=349, col_offset=4)], [], lineno=327, col_offset=0), FunctionDef('walk', arguments([Name('top', Param(), lineno=355, col_offset=9), Name('func', Param(), lineno=355, col_offset=14), Name('arg', Param(), lineno=355, col_offset=20)], None, None, []), [Expr(Str("Directory tree walk with callback function.\n\n    For each directory in the directory tree rooted at top (including top\n    itself, but excluding '.' and '..'), call func(arg, dirname, fnames).\n    dirname is the name of the directory, and fnames a list of the names of\n    the files and subdirectories in dirname (excluding '.' and '..').  func\n    may modify the fnames list in-place (e.g. via del or slice assignment),\n    and walk will only recurse into the subdirectories whose names remain in\n    fnames; this can be used to implement a filter, or to impose a specific\n    order of visiting.  No semantics are defined for, or required of, arg,\n    beyond that arg is always passed to func.  It can be used, e.g., to pass\n    a filename pattern, or a mutable object designed to accumulate\n    statistics.  Passing None for arg is common.", lineno=368, col_offset=-1), lineno=368, col_offset=-1), TryExcept([Assign([Name('names', Store(), lineno=371, col_offset=8)], Call(Attribute(Name('os', Load(), lineno=371, col_offset=15), 'listdir', Load(), lineno=371, col_offset=15), [Name('top', Load(), lineno=371, col_offset=26)], [], None, None, lineno=371, col_offset=15), lineno=371, col_offset=8)], [ExceptHandler(Attribute(Name('os', Load(), lineno=372, col_offset=11), 'error', Load(), lineno=372, col_offset=11), None, [Return(None, lineno=373, col_offset=8)], lineno=372, col_offset=4)], [], lineno=370, col_offset=4), Expr(Call(Name('func', Load(), lineno=374, col_offset=4), [Name('arg', Load(), lineno=374, col_offset=9), Name('top', Load(), lineno=374, col_offset=14), Name('names', Load(), lineno=374, col_offset=19)], [], None, None, lineno=374, col_offset=4), lineno=374, col_offset=4), For(Name('name', Store(), lineno=375, col_offset=8), Name('names', Load(), lineno=375, col_offset=16), [Assign([Name('name', Store(), lineno=376, col_offset=8)], Call(Name('join', Load(), lineno=376, col_offset=14), [Name('top', Load(), lineno=376, col_offset=19), Name('name', Load(), lineno=376, col_offset=24)], [], None, None, lineno=376, col_offset=14), lineno=376, col_offset=8), If(BoolOp(And(), [Call(Name('isdir', Load(), lineno=377, col_offset=11), [Name('name', Load(), lineno=377, col_offset=17)], [], None, None, lineno=377, col_offset=11), UnaryOp(Not(), Call(Name('islink', Load(), lineno=377, col_offset=31), [Name('name', Load(), lineno=377, col_offset=38)], [], None, None, lineno=377, col_offset=31), lineno=377, col_offset=27)], lineno=377, col_offset=11), [Expr(Call(Name('walk', Load(), lineno=378, col_offset=12), [Name('name', Load(), lineno=378, col_offset=17), Name('func', Load(), lineno=378, col_offset=23), Name('arg', Load(), lineno=378, col_offset=29)], [], None, None, lineno=378, col_offset=12), lineno=378, col_offset=12)], [], lineno=377, col_offset=8)], [], lineno=375, col_offset=4)], [], lineno=355, col_offset=0)])
