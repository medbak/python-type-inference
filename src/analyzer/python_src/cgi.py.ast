Module([Expr(Str('Support module for CGI (Common Gateway Interface) scripts.\n\nThis module defines a number of utilities for use by CGI scripts\nwritten in Python.\n', lineno=16, col_offset=-1), lineno=16, col_offset=-1), Assign([Name('__version__', Store(), lineno=31, col_offset=0)], Str('2.6', lineno=31, col_offset=14), lineno=31, col_offset=0), ImportFrom('operator', [alias('attrgetter', None)], 0, lineno=37, col_offset=0), Import([alias('sys', None)], lineno=38, col_offset=0), Import([alias('os', None)], lineno=39, col_offset=0), Import([alias('urllib', None)], lineno=40, col_offset=0), Import([alias('UserDict', None)], lineno=41, col_offset=0), Import([alias('urlparse', None)], lineno=42, col_offset=0), ImportFrom('warnings', [alias('filterwarnings', None), alias('catch_warnings', None), alias('warn', None)], 0, lineno=44, col_offset=0), With(Call(Name('catch_warnings', Load(), lineno=45, col_offset=5), [], [], None, None, lineno=45, col_offset=5), None, [If(Attribute(Name('sys', Load(), lineno=46, col_offset=7), 'py3kwarning', Load(), lineno=46, col_offset=7), [Expr(Call(Name('filterwarnings', Load(), lineno=47, col_offset=8), [Str('ignore', lineno=47, col_offset=23), Str('.*mimetools has been removed', lineno=47, col_offset=33), Name('DeprecationWarning', Load(), lineno=48, col_offset=23)], [], None, None, lineno=47, col_offset=8), lineno=47, col_offset=8), Expr(Call(Name('filterwarnings', Load(), lineno=49, col_offset=8), [Str('ignore', lineno=49, col_offset=23), Str('.*rfc822 has been removed', lineno=49, col_offset=33), Name('DeprecationWarning', Load(), lineno=50, col_offset=23)], [], None, None, lineno=49, col_offset=8), lineno=49, col_offset=8)], [], lineno=46, col_offset=4), Import([alias('mimetools', None)], lineno=51, col_offset=4), Import([alias('rfc822', None)], lineno=52, col_offset=4)], lineno=45, col_offset=5), TryExcept([ImportFrom('cStringIO', [alias('StringIO', None)], 0, lineno=55, col_offset=4)], [ExceptHandler(Name('ImportError', Load(), lineno=56, col_offset=7), None, [ImportFrom('StringIO', [alias('StringIO', None)], 0, lineno=57, col_offset=4)], lineno=56, col_offset=0)], [], lineno=54, col_offset=0), Assign([Name('__all__', Store(), lineno=59, col_offset=0)], List([Str('MiniFieldStorage', lineno=59, col_offset=11), Str('FieldStorage', lineno=59, col_offset=31), Str('FormContentDict', lineno=59, col_offset=47), Str('SvFormContentDict', lineno=60, col_offset=11), Str('InterpFormContentDict', lineno=60, col_offset=32), Str('FormContent', lineno=60, col_offset=57), Str('parse', lineno=61, col_offset=11), Str('parse_qs', lineno=61, col_offset=20), Str('parse_qsl', lineno=61, col_offset=32), Str('parse_multipart', lineno=61, col_offset=45), Str('parse_header', lineno=62, col_offset=11), Str('print_exception', lineno=62, col_offset=27), Str('print_environ', lineno=62, col_offset=46), Str('print_form', lineno=63, col_offset=11), Str('print_directory', lineno=63, col_offset=25), Str('print_arguments', lineno=63, col_offset=44), Str('print_environ_usage', lineno=64, col_offset=11), Str('escape', lineno=64, col_offset=34)], Load(), lineno=59, col_offset=10), lineno=59, col_offset=0), Assign([Name('logfile', Store(), lineno=69, col_offset=0)], Str('', lineno=69, col_offset=10), lineno=69, col_offset=0), Assign([Name('logfp', Store(), lineno=70, col_offset=0)], Name('None', Load(), lineno=70, col_offset=8), lineno=70, col_offset=0), FunctionDef('initlog', arguments([], 'allargs', None, []), [Expr(Str('Write a log message, if there is a log file.\n\n    Even though this function is called initlog(), you should always\n    use log(); log is a variable that is set either to initlog\n    (initially), to dolog (once the log file has been opened), or to\n    nolog (when logging is disabled).\n\n    The first argument is a format string; the remaining arguments (if\n    any) are arguments to the % operator, so e.g.\n        log("%s: %s", "a", "b")\n    will write "a: b" to the log file, followed by a newline.\n\n    If the global logfp is not None, it should be a file object to\n    which log data is written.\n\n    If the global logfp is None, the global logfile may be a string\n    giving a filename to open, in append mode.  This file should be\n    world writable!!!  If the file can\'t be opened, logging is\n    silently disabled (since there is no safe place where we could\n    send an error message).\n\n    ', lineno=94, col_offset=-1), lineno=94, col_offset=-1), Global(['logfp', 'log'], lineno=95, col_offset=4), If(BoolOp(And(), [Name('logfile', Load(), lineno=96, col_offset=7), UnaryOp(Not(), Name('logfp', Load(), lineno=96, col_offset=23), lineno=96, col_offset=19)], lineno=96, col_offset=7), [TryExcept([Assign([Name('logfp', Store(), lineno=98, col_offset=12)], Call(Name('open', Load(), lineno=98, col_offset=20), [Name('logfile', Load(), lineno=98, col_offset=25), Str('a', lineno=98, col_offset=34)], [], None, None, lineno=98, col_offset=20), lineno=98, col_offset=12)], [ExceptHandler(Name('IOError', Load(), lineno=99, col_offset=15), None, [Pass( lineno=100, col_offset=12)], lineno=99, col_offset=8)], [], lineno=97, col_offset=8)], [], lineno=96, col_offset=4), If(UnaryOp(Not(), Name('logfp', Load(), lineno=101, col_offset=11), lineno=101, col_offset=7), [Assign([Name('log', Store(), lineno=102, col_offset=8)], Name('nolog', Load(), lineno=102, col_offset=14), lineno=102, col_offset=8)], [Assign([Name('log', Store(), lineno=104, col_offset=8)], Name('dolog', Load(), lineno=104, col_offset=14), lineno=104, col_offset=8)], lineno=101, col_offset=4), Expr(Call(Name('log', Load(), lineno=105, col_offset=4), [], [], Name('allargs', Load(), lineno=105, col_offset=9), None, lineno=105, col_offset=4), lineno=105, col_offset=4)], [], lineno=72, col_offset=0), FunctionDef('dolog', arguments([Name('fmt', Param(), lineno=107, col_offset=10)], 'args', None, []), [Expr(Str('Write a log message to the log file.  See initlog() for docs.', lineno=108, col_offset=4), lineno=108, col_offset=4), Expr(Call(Attribute(Name('logfp', Load(), lineno=109, col_offset=4), 'write', Load(), lineno=109, col_offset=4), [BinOp(BinOp(Name('fmt', Load(), lineno=109, col_offset=16), Mod(), Name('args', Load(), lineno=109, col_offset=20), lineno=109, col_offset=16), Add(), Str('\n', lineno=109, col_offset=27), lineno=109, col_offset=16)], [], None, None, lineno=109, col_offset=4), lineno=109, col_offset=4)], [], lineno=107, col_offset=0), FunctionDef('nolog', arguments([], 'allargs', None, []), [Expr(Str('Dummy function, assigned to log when logging is disabled.', lineno=112, col_offset=4), lineno=112, col_offset=4), Pass( lineno=113, col_offset=4)], [], lineno=111, col_offset=0), Assign([Name('log', Store(), lineno=115, col_offset=0)], Name('initlog', Load(), lineno=115, col_offset=6), lineno=115, col_offset=0), Assign([Name('maxlen', Store(), lineno=123, col_offset=0)], Num(0, lineno=123, col_offset=9), lineno=123, col_offset=0), FunctionDef('parse', arguments([Name('fp', Param(), lineno=125, col_offset=10), Name('environ', Param(), lineno=125, col_offset=19), Name('keep_blank_values', Param(), lineno=125, col_offset=39), Name('strict_parsing', Param(), lineno=125, col_offset=60)], None, None, [Name('None', Load(), lineno=125, col_offset=13), Attribute(Name('os', Load(), lineno=125, col_offset=27), 'environ', Load(), lineno=125, col_offset=27), Num(0, lineno=125, col_offset=57), Num(0, lineno=125, col_offset=75)]), [Expr(Str('Parse a query in the environment or from a file (default stdin)\n\n        Arguments, all optional:\n\n        fp              : file pointer; default: sys.stdin\n\n        environ         : environment dictionary; default: os.environ\n\n        keep_blank_values: flag indicating whether blank values in\n            percent-encoded forms should be treated as blank strings.\n            A true value indicates that blanks should be retained as\n            blank strings.  The default false value indicates that\n            blank values are to be ignored and treated as if they were\n            not included.\n\n        strict_parsing: flag indicating what to do with parsing errors.\n            If false (the default), errors are silently ignored.\n            If true, errors raise a ValueError exception.\n    ', lineno=144, col_offset=-1), lineno=144, col_offset=-1), If(Compare(Name('fp', Load(), lineno=145, col_offset=7), [Is()], [Name('None', Load(), lineno=145, col_offset=13)], lineno=145, col_offset=7), [Assign([Name('fp', Store(), lineno=146, col_offset=8)], Attribute(Name('sys', Load(), lineno=146, col_offset=13), 'stdin', Load(), lineno=146, col_offset=13), lineno=146, col_offset=8)], [], lineno=145, col_offset=4), If(UnaryOp(Not(), Compare(Str('REQUEST_METHOD', lineno=147, col_offset=11), [In()], [Name('environ', Load(), lineno=147, col_offset=31)], lineno=147, col_offset=11), lineno=147, col_offset=7), [Assign([Subscript(Name('environ', Load(), lineno=148, col_offset=8), Index(Str('REQUEST_METHOD', lineno=148, col_offset=16)), Store(), lineno=148, col_offset=8)], Str('GET', lineno=148, col_offset=36), lineno=148, col_offset=8)], [], lineno=147, col_offset=4), If(Compare(Subscript(Name('environ', Load(), lineno=149, col_offset=7), Index(Str('REQUEST_METHOD', lineno=149, col_offset=15)), Load(), lineno=149, col_offset=7), [Eq()], [Str('POST', lineno=149, col_offset=36)], lineno=149, col_offset=7), [Assign([Tuple([Name('ctype', Store(), lineno=150, col_offset=8), Name('pdict', Store(), lineno=150, col_offset=15)], Store(), lineno=150, col_offset=8)], Call(Name('parse_header', Load(), lineno=150, col_offset=23), [Subscript(Name('environ', Load(), lineno=150, col_offset=36), Index(Str('CONTENT_TYPE', lineno=150, col_offset=44)), Load(), lineno=150, col_offset=36)], [], None, None, lineno=150, col_offset=23), lineno=150, col_offset=8), If(Compare(Name('ctype', Load(), lineno=151, col_offset=11), [Eq()], [Str('multipart/form-data', lineno=151, col_offset=20)], lineno=151, col_offset=11), [Return(Call(Name('parse_multipart', Load(), lineno=152, col_offset=19), [Name('fp', Load(), lineno=152, col_offset=35), Name('pdict', Load(), lineno=152, col_offset=39)], [], None, None, lineno=152, col_offset=19), lineno=152, col_offset=12)], [If(Compare(Name('ctype', Load(), lineno=153, col_offset=13), [Eq()], [Str('application/x-www-form-urlencoded', lineno=153, col_offset=22)], lineno=153, col_offset=13), [Assign([Name('clength', Store(), lineno=154, col_offset=12)], Call(Name('int', Load(), lineno=154, col_offset=22), [Subscript(Name('environ', Load(), lineno=154, col_offset=26), Index(Str('CONTENT_LENGTH', lineno=154, col_offset=34)), Load(), lineno=154, col_offset=26)], [], None, None, lineno=154, col_offset=22), lineno=154, col_offset=12), If(BoolOp(And(), [Name('maxlen', Load(), lineno=155, col_offset=15), Compare(Name('clength', Load(), lineno=155, col_offset=26), [Gt()], [Name('maxlen', Load(), lineno=155, col_offset=36)], lineno=155, col_offset=26)], lineno=155, col_offset=15), [Raise(Name('ValueError', Load(), lineno=156, col_offset=22), Str('Maximum content length exceeded', lineno=156, col_offset=34), None, lineno=156, col_offset=16)], [], lineno=155, col_offset=12), Assign([Name('qs', Store(), lineno=157, col_offset=12)], Call(Attribute(Name('fp', Load(), lineno=157, col_offset=17), 'read', Load(), lineno=157, col_offset=17), [Name('clength', Load(), lineno=157, col_offset=25)], [], None, None, lineno=157, col_offset=17), lineno=157, col_offset=12)], [Assign([Name('qs', Store(), lineno=159, col_offset=12)], Str('', lineno=159, col_offset=17), lineno=159, col_offset=12)], lineno=153, col_offset=13)], lineno=151, col_offset=8), If(Compare(Str('QUERY_STRING', lineno=160, col_offset=11), [In()], [Name('environ', Load(), lineno=160, col_offset=29)], lineno=160, col_offset=11), [If(Name('qs', Load(), lineno=161, col_offset=15), [Assign([Name('qs', Store(), lineno=161, col_offset=19)], BinOp(Name('qs', Load(), lineno=161, col_offset=24), Add(), Str('&', lineno=161, col_offset=29), lineno=161, col_offset=24), lineno=161, col_offset=19)], [], lineno=161, col_offset=12), Assign([Name('qs', Store(), lineno=162, col_offset=12)], BinOp(Name('qs', Load(), lineno=162, col_offset=17), Add(), Subscript(Name('environ', Load(), lineno=162, col_offset=22), Index(Str('QUERY_STRING', lineno=162, col_offset=30)), Load(), lineno=162, col_offset=22), lineno=162, col_offset=17), lineno=162, col_offset=12)], [If(Subscript(Attribute(Name('sys', Load(), lineno=163, col_offset=13), 'argv', Load(), lineno=163, col_offset=13), Slice(Num(1, lineno=163, col_offset=22), None, None), Load(), lineno=163, col_offset=13), [If(Name('qs', Load(), lineno=164, col_offset=15), [Assign([Name('qs', Store(), lineno=164, col_offset=19)], BinOp(Name('qs', Load(), lineno=164, col_offset=24), Add(), Str('&', lineno=164, col_offset=29), lineno=164, col_offset=24), lineno=164, col_offset=19)], [], lineno=164, col_offset=12), Assign([Name('qs', Store(), lineno=165, col_offset=12)], BinOp(Name('qs', Load(), lineno=165, col_offset=17), Add(), Subscript(Attribute(Name('sys', Load(), lineno=165, col_offset=22), 'argv', Load(), lineno=165, col_offset=22), Index(Num(1, lineno=165, col_offset=31)), Load(), lineno=165, col_offset=22), lineno=165, col_offset=17), lineno=165, col_offset=12)], [], lineno=163, col_offset=13)], lineno=160, col_offset=8), Assign([Subscript(Name('environ', Load(), lineno=166, col_offset=8), Index(Str('QUERY_STRING', lineno=166, col_offset=16)), Store(), lineno=166, col_offset=8)], Name('qs', Load(), lineno=166, col_offset=34), lineno=166, col_offset=8)], [If(Compare(Str('QUERY_STRING', lineno=167, col_offset=9), [In()], [Name('environ', Load(), lineno=167, col_offset=27)], lineno=167, col_offset=9), [Assign([Name('qs', Store(), lineno=168, col_offset=8)], Subscript(Name('environ', Load(), lineno=168, col_offset=13), Index(Str('QUERY_STRING', lineno=168, col_offset=21)), Load(), lineno=168, col_offset=13), lineno=168, col_offset=8)], [If(Subscript(Attribute(Name('sys', Load(), lineno=170, col_offset=11), 'argv', Load(), lineno=170, col_offset=11), Slice(Num(1, lineno=170, col_offset=20), None, None), Load(), lineno=170, col_offset=11), [Assign([Name('qs', Store(), lineno=171, col_offset=12)], Subscript(Attribute(Name('sys', Load(), lineno=171, col_offset=17), 'argv', Load(), lineno=171, col_offset=17), Index(Num(1, lineno=171, col_offset=26)), Load(), lineno=171, col_offset=17), lineno=171, col_offset=12)], [Assign([Name('qs', Store(), lineno=173, col_offset=12)], Str('', lineno=173, col_offset=17), lineno=173, col_offset=12)], lineno=170, col_offset=8), Assign([Subscript(Name('environ', Load(), lineno=174, col_offset=8), Index(Str('QUERY_STRING', lineno=174, col_offset=16)), Store(), lineno=174, col_offset=8)], Name('qs', Load(), lineno=174, col_offset=34), lineno=174, col_offset=8)], lineno=167, col_offset=9)], lineno=149, col_offset=4), Return(Call(Attribute(Name('urlparse', Load(), lineno=175, col_offset=11), 'parse_qs', Load(), lineno=175, col_offset=11), [Name('qs', Load(), lineno=175, col_offset=29), Name('keep_blank_values', Load(), lineno=175, col_offset=33), Name('strict_parsing', Load(), lineno=175, col_offset=52)], [], None, None, lineno=175, col_offset=11), lineno=175, col_offset=4)], [], lineno=125, col_offset=0), FunctionDef('parse_qs', arguments([Name('qs', Param(), lineno=181, col_offset=13), Name('keep_blank_values', Param(), lineno=181, col_offset=17), Name('strict_parsing', Param(), lineno=181, col_offset=38)], None, None, [Num(0, lineno=181, col_offset=35), Num(0, lineno=181, col_offset=53)]), [Expr(Str('Parse a query given as a string argument.', lineno=182, col_offset=4), lineno=182, col_offset=4), Expr(Call(Name('warn', Load(), lineno=183, col_offset=4), [Str('cgi.parse_qs is deprecated, use urlparse.parse_qs instead', lineno=183, col_offset=9), Name('PendingDeprecationWarning', Load(), lineno=184, col_offset=9), Num(2, lineno=184, col_offset=36)], [], None, None, lineno=183, col_offset=4), lineno=183, col_offset=4), Return(Call(Attribute(Name('urlparse', Load(), lineno=185, col_offset=11), 'parse_qs', Load(), lineno=185, col_offset=11), [Name('qs', Load(), lineno=185, col_offset=29), Name('keep_blank_values', Load(), lineno=185, col_offset=33), Name('strict_parsing', Load(), lineno=185, col_offset=52)], [], None, None, lineno=185, col_offset=11), lineno=185, col_offset=4)], [], lineno=181, col_offset=0), FunctionDef('parse_qsl', arguments([Name('qs', Param(), lineno=188, col_offset=14), Name('keep_blank_values', Param(), lineno=188, col_offset=18), Name('strict_parsing', Param(), lineno=188, col_offset=39)], None, None, [Num(0, lineno=188, col_offset=36), Num(0, lineno=188, col_offset=54)]), [Expr(Str('Parse a query given as a string argument.', lineno=189, col_offset=4), lineno=189, col_offset=4), Expr(Call(Name('warn', Load(), lineno=190, col_offset=4), [Str('cgi.parse_qsl is deprecated, use urlparse.parse_qsl instead', lineno=190, col_offset=9), Name('PendingDeprecationWarning', Load(), lineno=191, col_offset=9), Num(2, lineno=191, col_offset=36)], [], None, None, lineno=190, col_offset=4), lineno=190, col_offset=4), Return(Call(Attribute(Name('urlparse', Load(), lineno=192, col_offset=11), 'parse_qsl', Load(), lineno=192, col_offset=11), [Name('qs', Load(), lineno=192, col_offset=30), Name('keep_blank_values', Load(), lineno=192, col_offset=34), Name('strict_parsing', Load(), lineno=192, col_offset=53)], [], None, None, lineno=192, col_offset=11), lineno=192, col_offset=4)], [], lineno=188, col_offset=0), FunctionDef('parse_multipart', arguments([Name('fp', Param(), lineno=194, col_offset=20), Name('pdict', Param(), lineno=194, col_offset=24)], None, None, []), [Expr(Str('Parse multipart input.\n\n    Arguments:\n    fp   : input file\n    pdict: dictionary containing other parameters of content-type header\n\n    Returns a dictionary just like parse_qs(): keys are the field names, each\n    value is a list of values for that field.  This is easy to use but not\n    much good if you are expecting megabytes to be uploaded -- in that case,\n    use the FieldStorage class instead which is much more flexible.  Note\n    that content-type is the raw, unparsed contents of the content-type\n    header.\n\n    XXX This does not parse nested multipart parts -- use FieldStorage for\n    that.\n\n    XXX This should really be subsumed by FieldStorage altogether -- no\n    point in having two implementations of the same parsing algorithm.\n    Also, FieldStorage protects itself better against certain DoS attacks\n    by limiting the size of the data read in one chunk.  The API here\n    does not support that kind of protection.  This also affects parse()\n    since it can call parse_multipart().\n\n    ', lineno=218, col_offset=-1), lineno=218, col_offset=-1), Assign([Name('boundary', Store(), lineno=219, col_offset=4)], Str('', lineno=219, col_offset=15), lineno=219, col_offset=4), If(Compare(Str('boundary', lineno=220, col_offset=7), [In()], [Name('pdict', Load(), lineno=220, col_offset=21)], lineno=220, col_offset=7), [Assign([Name('boundary', Store(), lineno=221, col_offset=8)], Subscript(Name('pdict', Load(), lineno=221, col_offset=19), Index(Str('boundary', lineno=221, col_offset=25)), Load(), lineno=221, col_offset=19), lineno=221, col_offset=8)], [], lineno=220, col_offset=4), If(UnaryOp(Not(), Call(Name('valid_boundary', Load(), lineno=222, col_offset=11), [Name('boundary', Load(), lineno=222, col_offset=26)], [], None, None, lineno=222, col_offset=11), lineno=222, col_offset=7), [Raise(Name('ValueError', Load(), lineno=223, col_offset=14), BinOp(Str('Invalid boundary in multipart form: %r', lineno=223, col_offset=28), Mod(), Tuple([Name('boundary', Load(), lineno=224, col_offset=31)], Load(), lineno=224, col_offset=31), lineno=223, col_offset=28), None, lineno=223, col_offset=8)], [], lineno=222, col_offset=4), Assign([Name('nextpart', Store(), lineno=226, col_offset=4)], BinOp(Str('--', lineno=226, col_offset=15), Add(), Name('boundary', Load(), lineno=226, col_offset=22), lineno=226, col_offset=15), lineno=226, col_offset=4), Assign([Name('lastpart', Store(), lineno=227, col_offset=4)], BinOp(BinOp(Str('--', lineno=227, col_offset=15), Add(), Name('boundary', Load(), lineno=227, col_offset=22), lineno=227, col_offset=15), Add(), Str('--', lineno=227, col_offset=33), lineno=227, col_offset=31), lineno=227, col_offset=4), Assign([Name('partdict', Store(), lineno=228, col_offset=4)], Dict([], [], lineno=228, col_offset=15), lineno=228, col_offset=4), Assign([Name('terminator', Store(), lineno=229, col_offset=4)], Str('', lineno=229, col_offset=17), lineno=229, col_offset=4), While(Compare(Name('terminator', Load(), lineno=231, col_offset=10), [NotEq()], [Name('lastpart', Load(), lineno=231, col_offset=24)], lineno=231, col_offset=10), [Assign([Name('bytes', Store(), lineno=232, col_offset=8)], Num(-1, lineno=232, col_offset=17), lineno=232, col_offset=8), Assign([Name('data', Store(), lineno=233, col_offset=8)], Name('None', Load(), lineno=233, col_offset=15), lineno=233, col_offset=8), If(Name('terminator', Load(), lineno=234, col_offset=11), [Assign([Name('headers', Store(), lineno=236, col_offset=12)], Call(Attribute(Name('mimetools', Load(), lineno=236, col_offset=22), 'Message', Load(), lineno=236, col_offset=22), [Name('fp', Load(), lineno=236, col_offset=40)], [], None, None, lineno=236, col_offset=22), lineno=236, col_offset=12), Assign([Name('clength', Store(), lineno=237, col_offset=12)], Call(Attribute(Name('headers', Load(), lineno=237, col_offset=22), 'getheader', Load(), lineno=237, col_offset=22), [Str('content-length', lineno=237, col_offset=40)], [], None, None, lineno=237, col_offset=22), lineno=237, col_offset=12), If(Name('clength', Load(), lineno=238, col_offset=15), [TryExcept([Assign([Name('bytes', Store(), lineno=240, col_offset=20)], Call(Name('int', Load(), lineno=240, col_offset=28), [Name('clength', Load(), lineno=240, col_offset=32)], [], None, None, lineno=240, col_offset=28), lineno=240, col_offset=20)], [ExceptHandler(Name('ValueError', Load(), lineno=241, col_offset=23), None, [Pass( lineno=242, col_offset=20)], lineno=241, col_offset=16)], [], lineno=239, col_offset=16)], [], lineno=238, col_offset=12), If(Compare(Name('bytes', Load(), lineno=243, col_offset=15), [Gt()], [Num(0, lineno=243, col_offset=23)], lineno=243, col_offset=15), [If(BoolOp(And(), [Name('maxlen', Load(), lineno=244, col_offset=19), Compare(Name('bytes', Load(), lineno=244, col_offset=30), [Gt()], [Name('maxlen', Load(), lineno=244, col_offset=38)], lineno=244, col_offset=30)], lineno=244, col_offset=19), [Raise(Name('ValueError', Load(), lineno=245, col_offset=26), Str('Maximum content length exceeded', lineno=245, col_offset=38), None, lineno=245, col_offset=20)], [], lineno=244, col_offset=16), Assign([Name('data', Store(), lineno=246, col_offset=16)], Call(Attribute(Name('fp', Load(), lineno=246, col_offset=23), 'read', Load(), lineno=246, col_offset=23), [Name('bytes', Load(), lineno=246, col_offset=31)], [], None, None, lineno=246, col_offset=23), lineno=246, col_offset=16)], [Assign([Name('data', Store(), lineno=248, col_offset=16)], Str('', lineno=248, col_offset=23), lineno=248, col_offset=16)], lineno=243, col_offset=12)], [], lineno=234, col_offset=8), Assign([Name('lines', Store(), lineno=250, col_offset=8)], List([], Load(), lineno=250, col_offset=16), lineno=250, col_offset=8), While(Num(1, lineno=251, col_offset=14), [Assign([Name('line', Store(), lineno=252, col_offset=12)], Call(Attribute(Name('fp', Load(), lineno=252, col_offset=19), 'readline', Load(), lineno=252, col_offset=19), [], [], None, None, lineno=252, col_offset=19), lineno=252, col_offset=12), If(UnaryOp(Not(), Name('line', Load(), lineno=253, col_offset=19), lineno=253, col_offset=15), [Assign([Name('terminator', Store(), lineno=254, col_offset=16)], Name('lastpart', Load(), lineno=254, col_offset=29), lineno=254, col_offset=16), Break( lineno=255, col_offset=16)], [], lineno=253, col_offset=12), If(Compare(Subscript(Name('line', Load(), lineno=256, col_offset=15), Slice(None, Num(2, lineno=256, col_offset=21), None), Load(), lineno=256, col_offset=15), [Eq()], [Str('--', lineno=256, col_offset=27)], lineno=256, col_offset=15), [Assign([Name('terminator', Store(), lineno=257, col_offset=16)], Call(Attribute(Name('line', Load(), lineno=257, col_offset=29), 'strip', Load(), lineno=257, col_offset=29), [], [], None, None, lineno=257, col_offset=29), lineno=257, col_offset=16), If(Compare(Name('terminator', Load(), lineno=258, col_offset=19), [In()], [Tuple([Name('nextpart', Load(), lineno=258, col_offset=34), Name('lastpart', Load(), lineno=258, col_offset=44)], Load(), lineno=258, col_offset=34)], lineno=258, col_offset=19), [Break( lineno=259, col_offset=20)], [], lineno=258, col_offset=16)], [], lineno=256, col_offset=12), Expr(Call(Attribute(Name('lines', Load(), lineno=260, col_offset=12), 'append', Load(), lineno=260, col_offset=12), [Name('line', Load(), lineno=260, col_offset=25)], [], None, None, lineno=260, col_offset=12), lineno=260, col_offset=12)], [], lineno=251, col_offset=8), If(Compare(Name('data', Load(), lineno=262, col_offset=11), [Is()], [Name('None', Load(), lineno=262, col_offset=19)], lineno=262, col_offset=11), [Continue( lineno=263, col_offset=12)], [], lineno=262, col_offset=8), If(Compare(Name('bytes', Load(), lineno=264, col_offset=11), [Lt()], [Num(0, lineno=264, col_offset=19)], lineno=264, col_offset=11), [If(Name('lines', Load(), lineno=265, col_offset=15), [Assign([Name('line', Store(), lineno=267, col_offset=16)], Subscript(Name('lines', Load(), lineno=267, col_offset=23), Index(Num(-1, lineno=267, col_offset=30)), Load(), lineno=267, col_offset=23), lineno=267, col_offset=16), If(Compare(Subscript(Name('line', Load(), lineno=268, col_offset=19), Slice(Num(-2, lineno=268, col_offset=25), None, None), Load(), lineno=268, col_offset=19), [Eq()], [Str('\r\n', lineno=268, col_offset=32)], lineno=268, col_offset=19), [Assign([Name('line', Store(), lineno=269, col_offset=20)], Subscript(Name('line', Load(), lineno=269, col_offset=27), Slice(None, Num(-2, lineno=269, col_offset=34), None), Load(), lineno=269, col_offset=27), lineno=269, col_offset=20)], [If(Compare(Subscript(Name('line', Load(), lineno=270, col_offset=21), Slice(Num(-1, lineno=270, col_offset=27), None, None), Load(), lineno=270, col_offset=21), [Eq()], [Str('\n', lineno=270, col_offset=34)], lineno=270, col_offset=21), [Assign([Name('line', Store(), lineno=271, col_offset=20)], Subscript(Name('line', Load(), lineno=271, col_offset=27), Slice(None, Num(-1, lineno=271, col_offset=34), None), Load(), lineno=271, col_offset=27), lineno=271, col_offset=20)], [], lineno=270, col_offset=21)], lineno=268, col_offset=16), Assign([Subscript(Name('lines', Load(), lineno=272, col_offset=16), Index(Num(-1, lineno=272, col_offset=23)), Store(), lineno=272, col_offset=16)], Name('line', Load(), lineno=272, col_offset=28), lineno=272, col_offset=16), Assign([Name('data', Store(), lineno=273, col_offset=16)], Call(Attribute(Str('', lineno=273, col_offset=23), 'join', Load(), lineno=273, col_offset=23), [Name('lines', Load(), lineno=273, col_offset=31)], [], None, None, lineno=273, col_offset=23), lineno=273, col_offset=16)], [], lineno=265, col_offset=12)], [], lineno=264, col_offset=8), Assign([Name('line', Store(), lineno=274, col_offset=8)], Subscript(Name('headers', Load(), lineno=274, col_offset=15), Index(Str('content-disposition', lineno=274, col_offset=23)), Load(), lineno=274, col_offset=15), lineno=274, col_offset=8), If(UnaryOp(Not(), Name('line', Load(), lineno=275, col_offset=15), lineno=275, col_offset=11), [Continue( lineno=276, col_offset=12)], [], lineno=275, col_offset=8), Assign([Tuple([Name('key', Store(), lineno=277, col_offset=8), Name('params', Store(), lineno=277, col_offset=13)], Store(), lineno=277, col_offset=8)], Call(Name('parse_header', Load(), lineno=277, col_offset=22), [Name('line', Load(), lineno=277, col_offset=35)], [], None, None, lineno=277, col_offset=22), lineno=277, col_offset=8), If(Compare(Name('key', Load(), lineno=278, col_offset=11), [NotEq()], [Str('form-data', lineno=278, col_offset=18)], lineno=278, col_offset=11), [Continue( lineno=279, col_offset=12)], [], lineno=278, col_offset=8), If(Compare(Str('name', lineno=280, col_offset=11), [In()], [Name('params', Load(), lineno=280, col_offset=21)], lineno=280, col_offset=11), [Assign([Name('name', Store(), lineno=281, col_offset=12)], Subscript(Name('params', Load(), lineno=281, col_offset=19), Index(Str('name', lineno=281, col_offset=26)), Load(), lineno=281, col_offset=19), lineno=281, col_offset=12)], [Continue( lineno=283, col_offset=12)], lineno=280, col_offset=8), If(Compare(Name('name', Load(), lineno=284, col_offset=11), [In()], [Name('partdict', Load(), lineno=284, col_offset=19)], lineno=284, col_offset=11), [Expr(Call(Attribute(Subscript(Name('partdict', Load(), lineno=285, col_offset=12), Index(Name('name', Load(), lineno=285, col_offset=21)), Load(), lineno=285, col_offset=12), 'append', Load(), lineno=285, col_offset=12), [Name('data', Load(), lineno=285, col_offset=34)], [], None, None, lineno=285, col_offset=12), lineno=285, col_offset=12)], [Assign([Subscript(Name('partdict', Load(), lineno=287, col_offset=12), Index(Name('name', Load(), lineno=287, col_offset=21)), Store(), lineno=287, col_offset=12)], List([Name('data', Load(), lineno=287, col_offset=30)], Load(), lineno=287, col_offset=29), lineno=287, col_offset=12)], lineno=284, col_offset=8)], [], lineno=231, col_offset=4), Return(Name('partdict', Load(), lineno=289, col_offset=11), lineno=289, col_offset=4)], [], lineno=194, col_offset=0), FunctionDef('_parseparam', arguments([Name('s', Param(), lineno=292, col_offset=16)], None, None, []), [While(Compare(Subscript(Name('s', Load(), lineno=293, col_offset=10), Slice(None, Num(1, lineno=293, col_offset=13), None), Load(), lineno=293, col_offset=10), [Eq()], [Str(';', lineno=293, col_offset=19)], lineno=293, col_offset=10), [Assign([Name('s', Store(), lineno=294, col_offset=8)], Subscript(Name('s', Load(), lineno=294, col_offset=12), Slice(Num(1, lineno=294, col_offset=14), None, None), Load(), lineno=294, col_offset=12), lineno=294, col_offset=8), Assign([Name('end', Store(), lineno=295, col_offset=8)], Call(Attribute(Name('s', Load(), lineno=295, col_offset=14), 'find', Load(), lineno=295, col_offset=14), [Str(';', lineno=295, col_offset=21)], [], None, None, lineno=295, col_offset=14), lineno=295, col_offset=8), While(BoolOp(And(), [Compare(Name('end', Load(), lineno=296, col_offset=14), [Gt()], [Num(0, lineno=296, col_offset=20)], lineno=296, col_offset=14), BinOp(Call(Attribute(Name('s', Load(), lineno=296, col_offset=26), 'count', Load(), lineno=296, col_offset=26), [Str('"', lineno=296, col_offset=34), Num(0, lineno=296, col_offset=39), Name('end', Load(), lineno=296, col_offset=42)], [], None, None, lineno=296, col_offset=26), Mod(), Num(2, lineno=296, col_offset=49), lineno=296, col_offset=26)], lineno=296, col_offset=14), [Assign([Name('end', Store(), lineno=297, col_offset=12)], Call(Attribute(Name('s', Load(), lineno=297, col_offset=18), 'find', Load(), lineno=297, col_offset=18), [Str(';', lineno=297, col_offset=25), BinOp(Name('end', Load(), lineno=297, col_offset=30), Add(), Num(1, lineno=297, col_offset=36), lineno=297, col_offset=30)], [], None, None, lineno=297, col_offset=18), lineno=297, col_offset=12)], [], lineno=296, col_offset=8), If(Compare(Name('end', Load(), lineno=298, col_offset=11), [Lt()], [Num(0, lineno=298, col_offset=17)], lineno=298, col_offset=11), [Assign([Name('end', Store(), lineno=299, col_offset=12)], Call(Name('len', Load(), lineno=299, col_offset=18), [Name('s', Load(), lineno=299, col_offset=22)], [], None, None, lineno=299, col_offset=18), lineno=299, col_offset=12)], [], lineno=298, col_offset=8), Assign([Name('f', Store(), lineno=300, col_offset=8)], Subscript(Name('s', Load(), lineno=300, col_offset=12), Slice(None, Name('end', Load(), lineno=300, col_offset=15), None), Load(), lineno=300, col_offset=12), lineno=300, col_offset=8), Expr(Yield(Call(Attribute(Name('f', Load(), lineno=301, col_offset=14), 'strip', Load(), lineno=301, col_offset=14), [], [], None, None, lineno=301, col_offset=14), lineno=301, col_offset=8), lineno=301, col_offset=8), Assign([Name('s', Store(), lineno=302, col_offset=8)], Subscript(Name('s', Load(), lineno=302, col_offset=12), Slice(Name('end', Load(), lineno=302, col_offset=14), None, None), Load(), lineno=302, col_offset=12), lineno=302, col_offset=8)], [], lineno=293, col_offset=4)], [], lineno=292, col_offset=0), FunctionDef('parse_header', arguments([Name('line', Param(), lineno=304, col_offset=17)], None, None, []), [Expr(Str('Parse a Content-type like header.\n\n    Return the main content-type and a dictionary of options.\n\n    ', lineno=309, col_offset=-1), lineno=309, col_offset=-1), Assign([Name('parts', Store(), lineno=310, col_offset=4)], Call(Name('_parseparam', Load(), lineno=310, col_offset=12), [BinOp(Str(';', lineno=310, col_offset=24), Add(), Name('line', Load(), lineno=310, col_offset=30), lineno=310, col_offset=24)], [], None, None, lineno=310, col_offset=12), lineno=310, col_offset=4), Assign([Name('key', Store(), lineno=311, col_offset=4)], Call(Attribute(Name('parts', Load(), lineno=311, col_offset=10), 'next', Load(), lineno=311, col_offset=10), [], [], None, None, lineno=311, col_offset=10), lineno=311, col_offset=4), Assign([Name('pdict', Store(), lineno=312, col_offset=4)], Dict([], [], lineno=312, col_offset=12), lineno=312, col_offset=4), For(Name('p', Store(), lineno=313, col_offset=8), Name('parts', Load(), lineno=313, col_offset=13), [Assign([Name('i', Store(), lineno=314, col_offset=8)], Call(Attribute(Name('p', Load(), lineno=314, col_offset=12), 'find', Load(), lineno=314, col_offset=12), [Str('=', lineno=314, col_offset=19)], [], None, None, lineno=314, col_offset=12), lineno=314, col_offset=8), If(Compare(Name('i', Load(), lineno=315, col_offset=11), [GtE()], [Num(0, lineno=315, col_offset=16)], lineno=315, col_offset=11), [Assign([Name('name', Store(), lineno=316, col_offset=12)], Call(Attribute(Call(Attribute(Subscript(Name('p', Load(), lineno=316, col_offset=19), Slice(None, Name('i', Load(), lineno=316, col_offset=22), None), Load(), lineno=316, col_offset=19), 'strip', Load(), lineno=316, col_offset=19), [], [], None, None, lineno=316, col_offset=19), 'lower', Load(), lineno=316, col_offset=19), [], [], None, None, lineno=316, col_offset=19), lineno=316, col_offset=12), Assign([Name('value', Store(), lineno=317, col_offset=12)], Call(Attribute(Subscript(Name('p', Load(), lineno=317, col_offset=20), Slice(BinOp(Name('i', Load(), lineno=317, col_offset=22), Add(), Num(1, lineno=317, col_offset=24), lineno=317, col_offset=22), None, None), Load(), lineno=317, col_offset=20), 'strip', Load(), lineno=317, col_offset=20), [], [], None, None, lineno=317, col_offset=20), lineno=317, col_offset=12), If(BoolOp(And(), [Compare(Call(Name('len', Load(), lineno=318, col_offset=15), [Name('value', Load(), lineno=318, col_offset=19)], [], None, None, lineno=318, col_offset=15), [GtE()], [Num(2, lineno=318, col_offset=29)], lineno=318, col_offset=15), Compare(Subscript(Name('value', Load(), lineno=318, col_offset=35), Index(Num(0, lineno=318, col_offset=41)), Load(), lineno=318, col_offset=35), [Eq(), Eq()], [Subscript(Name('value', Load(), lineno=318, col_offset=47), Index(Num(-1, lineno=318, col_offset=54)), Load(), lineno=318, col_offset=47), Str('"', lineno=318, col_offset=60)], lineno=318, col_offset=35)], lineno=318, col_offset=15), [Assign([Name('value', Store(), lineno=319, col_offset=16)], Subscript(Name('value', Load(), lineno=319, col_offset=24), Slice(Num(1, lineno=319, col_offset=30), Num(-1, lineno=319, col_offset=33), None), Load(), lineno=319, col_offset=24), lineno=319, col_offset=16), Assign([Name('value', Store(), lineno=320, col_offset=16)], Call(Attribute(Call(Attribute(Name('value', Load(), lineno=320, col_offset=24), 'replace', Load(), lineno=320, col_offset=24), [Str('\\\\', lineno=320, col_offset=38), Str('\\', lineno=320, col_offset=46)], [], None, None, lineno=320, col_offset=24), 'replace', Load(), lineno=320, col_offset=24), [Str('\\"', lineno=320, col_offset=60), Str('"', lineno=320, col_offset=67)], [], None, None, lineno=320, col_offset=24), lineno=320, col_offset=16)], [], lineno=318, col_offset=12), Assign([Subscript(Name('pdict', Load(), lineno=321, col_offset=12), Index(Name('name', Load(), lineno=321, col_offset=18)), Store(), lineno=321, col_offset=12)], Name('value', Load(), lineno=321, col_offset=26), lineno=321, col_offset=12)], [], lineno=315, col_offset=8)], [], lineno=313, col_offset=4), Return(Tuple([Name('key', Load(), lineno=322, col_offset=11), Name('pdict', Load(), lineno=322, col_offset=16)], Load(), lineno=322, col_offset=11), lineno=322, col_offset=4)], [], lineno=304, col_offset=0), ClassDef('MiniFieldStorage', [], [Expr(Str('Like FieldStorage, for use when no file uploads are possible.', lineno=330, col_offset=4), lineno=330, col_offset=4), Assign([Name('filename', Store(), lineno=333, col_offset=4)], Name('None', Load(), lineno=333, col_offset=15), lineno=333, col_offset=4), Assign([Name('list', Store(), lineno=334, col_offset=4)], Name('None', Load(), lineno=334, col_offset=11), lineno=334, col_offset=4), Assign([Name('type', Store(), lineno=335, col_offset=4)], Name('None', Load(), lineno=335, col_offset=11), lineno=335, col_offset=4), Assign([Name('file', Store(), lineno=336, col_offset=4)], Name('None', Load(), lineno=336, col_offset=11), lineno=336, col_offset=4), Assign([Name('type_options', Store(), lineno=337, col_offset=4)], Dict([], [], lineno=337, col_offset=19), lineno=337, col_offset=4), Assign([Name('disposition', Store(), lineno=338, col_offset=4)], Name('None', Load(), lineno=338, col_offset=18), lineno=338, col_offset=4), Assign([Name('disposition_options', Store(), lineno=339, col_offset=4)], Dict([], [], lineno=339, col_offset=26), lineno=339, col_offset=4), Assign([Name('headers', Store(), lineno=340, col_offset=4)], Dict([], [], lineno=340, col_offset=14), lineno=340, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=342, col_offset=17), Name('name', Param(), lineno=342, col_offset=23), Name('value', Param(), lineno=342, col_offset=29)], None, None, []), [Expr(Str('Constructor from field name and value.', lineno=343, col_offset=8), lineno=343, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=344, col_offset=8), 'name', Store(), lineno=344, col_offset=8)], Name('name', Load(), lineno=344, col_offset=20), lineno=344, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=345, col_offset=8), 'value', Store(), lineno=345, col_offset=8)], Name('value', Load(), lineno=345, col_offset=21), lineno=345, col_offset=8)], [], lineno=342, col_offset=4), FunctionDef('__repr__', arguments([Name('self', Param(), lineno=348, col_offset=17)], None, None, []), [Expr(Str('Return printable representation.', lineno=349, col_offset=8), lineno=349, col_offset=8), Return(BinOp(Str('MiniFieldStorage(%r, %r)', lineno=350, col_offset=15), Mod(), Tuple([Attribute(Name('self', Load(), lineno=350, col_offset=45), 'name', Load(), lineno=350, col_offset=45), Attribute(Name('self', Load(), lineno=350, col_offset=56), 'value', Load(), lineno=350, col_offset=56)], Load(), lineno=350, col_offset=45), lineno=350, col_offset=15), lineno=350, col_offset=8)], [], lineno=348, col_offset=4)], [], lineno=328, col_offset=0), ClassDef('FieldStorage', [], [Expr(Str("Store a sequence of fields, reading multipart/form-data.\n\n    This class provides naming, typing, files stored on disk, and\n    more.  At the top level, it is accessible like a dictionary, whose\n    keys are the field names.  (Note: None can occur as a field name.)\n    The items are either a Python list (if there's multiple values) or\n    another FieldStorage or MiniFieldStorage object.  If it's a single\n    object, it has the following attributes:\n\n    name: the field name, if specified; otherwise None\n\n    filename: the filename, if specified; otherwise None; this is the\n        client side filename, *not* the file name on which it is\n        stored (that's a temporary file you don't deal with)\n\n    value: the value as a *string*; for file uploads, this\n        transparently reads the file every time you request the value\n\n    file: the file(-like) object from which you can read the data;\n        None if the data is stored a simple string\n\n    type: the content-type, or None if not specified\n\n    type_options: dictionary of options specified on the content-type\n        line\n\n    disposition: content-disposition, or None if not specified\n\n    disposition_options: dictionary of corresponding options\n\n    headers: a dictionary(-like) object (sometimes rfc822.Message or a\n        subclass thereof) containing *all* headers\n\n    The class is subclassable, mostly for the purpose of overriding\n    the make_file() method, which is called internally to come up with\n    a file open for reading and writing.  This makes it possible to\n    override the default choice of storing all files in a temporary\n    directory and unlinking them as soon as they have been opened.\n\n    ", lineno=394, col_offset=-1), lineno=394, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=396, col_offset=17), Name('fp', Param(), lineno=396, col_offset=23), Name('headers', Param(), lineno=396, col_offset=32), Name('outerboundary', Param(), lineno=396, col_offset=46), Name('environ', Param(), lineno=397, col_offset=17), Name('keep_blank_values', Param(), lineno=397, col_offset=37), Name('strict_parsing', Param(), lineno=397, col_offset=58)], None, None, [Name('None', Load(), lineno=396, col_offset=26), Name('None', Load(), lineno=396, col_offset=40), Str('', lineno=396, col_offset=60), Attribute(Name('os', Load(), lineno=397, col_offset=25), 'environ', Load(), lineno=397, col_offset=25), Num(0, lineno=397, col_offset=55), Num(0, lineno=397, col_offset=73)]), [Expr(Str('Constructor.  Read multipart/* until last part.\n\n        Arguments, all optional:\n\n        fp              : file pointer; default: sys.stdin\n            (not used when the request method is GET)\n\n        headers         : header dictionary-like object; default:\n            taken from environ as per CGI spec\n\n        outerboundary   : terminating multipart boundary\n            (for internal use only)\n\n        environ         : environment dictionary; default: os.environ\n\n        keep_blank_values: flag indicating whether blank values in\n            percent-encoded forms should be treated as blank strings.\n            A true value indicates that blanks should be retained as\n            blank strings.  The default false value indicates that\n            blank values are to be ignored and treated as if they were\n            not included.\n\n        strict_parsing: flag indicating what to do with parsing errors.\n            If false (the default), errors are silently ignored.\n            If true, errors raise a ValueError exception.\n\n        ', lineno=424, col_offset=-1), lineno=424, col_offset=-1), Assign([Name('method', Store(), lineno=425, col_offset=8)], Str('GET', lineno=425, col_offset=17), lineno=425, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=426, col_offset=8), 'keep_blank_values', Store(), lineno=426, col_offset=8)], Name('keep_blank_values', Load(), lineno=426, col_offset=33), lineno=426, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=427, col_offset=8), 'strict_parsing', Store(), lineno=427, col_offset=8)], Name('strict_parsing', Load(), lineno=427, col_offset=30), lineno=427, col_offset=8), If(Compare(Str('REQUEST_METHOD', lineno=428, col_offset=11), [In()], [Name('environ', Load(), lineno=428, col_offset=31)], lineno=428, col_offset=11), [Assign([Name('method', Store(), lineno=429, col_offset=12)], Call(Attribute(Subscript(Name('environ', Load(), lineno=429, col_offset=21), Index(Str('REQUEST_METHOD', lineno=429, col_offset=29)), Load(), lineno=429, col_offset=21), 'upper', Load(), lineno=429, col_offset=21), [], [], None, None, lineno=429, col_offset=21), lineno=429, col_offset=12)], [], lineno=428, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=430, col_offset=8), 'qs_on_post', Store(), lineno=430, col_offset=8)], Name('None', Load(), lineno=430, col_offset=26), lineno=430, col_offset=8), If(BoolOp(Or(), [Compare(Name('method', Load(), lineno=431, col_offset=11), [Eq()], [Str('GET', lineno=431, col_offset=21)], lineno=431, col_offset=11), Compare(Name('method', Load(), lineno=431, col_offset=30), [Eq()], [Str('HEAD', lineno=431, col_offset=40)], lineno=431, col_offset=30)], lineno=431, col_offset=11), [If(Compare(Str('QUERY_STRING', lineno=432, col_offset=15), [In()], [Name('environ', Load(), lineno=432, col_offset=33)], lineno=432, col_offset=15), [Assign([Name('qs', Store(), lineno=433, col_offset=16)], Subscript(Name('environ', Load(), lineno=433, col_offset=21), Index(Str('QUERY_STRING', lineno=433, col_offset=29)), Load(), lineno=433, col_offset=21), lineno=433, col_offset=16)], [If(Subscript(Attribute(Name('sys', Load(), lineno=434, col_offset=17), 'argv', Load(), lineno=434, col_offset=17), Slice(Num(1, lineno=434, col_offset=26), None, None), Load(), lineno=434, col_offset=17), [Assign([Name('qs', Store(), lineno=435, col_offset=16)], Subscript(Attribute(Name('sys', Load(), lineno=435, col_offset=21), 'argv', Load(), lineno=435, col_offset=21), Index(Num(1, lineno=435, col_offset=30)), Load(), lineno=435, col_offset=21), lineno=435, col_offset=16)], [Assign([Name('qs', Store(), lineno=437, col_offset=16)], Str('', lineno=437, col_offset=21), lineno=437, col_offset=16)], lineno=434, col_offset=17)], lineno=432, col_offset=12), Assign([Name('fp', Store(), lineno=438, col_offset=12)], Call(Name('StringIO', Load(), lineno=438, col_offset=17), [Name('qs', Load(), lineno=438, col_offset=26)], [], None, None, lineno=438, col_offset=17), lineno=438, col_offset=12), If(Compare(Name('headers', Load(), lineno=439, col_offset=15), [Is()], [Name('None', Load(), lineno=439, col_offset=26)], lineno=439, col_offset=15), [Assign([Name('headers', Store(), lineno=440, col_offset=16)], Dict([Str('content-type', lineno=440, col_offset=27)], [Str('application/x-www-form-urlencoded', lineno=441, col_offset=27)], lineno=440, col_offset=26), lineno=440, col_offset=16)], [], lineno=439, col_offset=12)], [], lineno=431, col_offset=8), If(Compare(Name('headers', Load(), lineno=442, col_offset=11), [Is()], [Name('None', Load(), lineno=442, col_offset=22)], lineno=442, col_offset=11), [Assign([Name('headers', Store(), lineno=443, col_offset=12)], Dict([], [], lineno=443, col_offset=22), lineno=443, col_offset=12), If(Compare(Name('method', Load(), lineno=444, col_offset=15), [Eq()], [Str('POST', lineno=444, col_offset=25)], lineno=444, col_offset=15), [Assign([Subscript(Name('headers', Load(), lineno=446, col_offset=16), Index(Str('content-type', lineno=446, col_offset=24)), Store(), lineno=446, col_offset=16)], Str('application/x-www-form-urlencoded', lineno=446, col_offset=42), lineno=446, col_offset=16)], [], lineno=444, col_offset=12), If(Compare(Str('CONTENT_TYPE', lineno=447, col_offset=15), [In()], [Name('environ', Load(), lineno=447, col_offset=33)], lineno=447, col_offset=15), [Assign([Subscript(Name('headers', Load(), lineno=448, col_offset=16), Index(Str('content-type', lineno=448, col_offset=24)), Store(), lineno=448, col_offset=16)], Subscript(Name('environ', Load(), lineno=448, col_offset=42), Index(Str('CONTENT_TYPE', lineno=448, col_offset=50)), Load(), lineno=448, col_offset=42), lineno=448, col_offset=16)], [], lineno=447, col_offset=12), If(Compare(Str('QUERY_STRING', lineno=449, col_offset=15), [In()], [Name('environ', Load(), lineno=449, col_offset=33)], lineno=449, col_offset=15), [Assign([Attribute(Name('self', Load(), lineno=450, col_offset=16), 'qs_on_post', Store(), lineno=450, col_offset=16)], Subscript(Name('environ', Load(), lineno=450, col_offset=34), Index(Str('QUERY_STRING', lineno=450, col_offset=42)), Load(), lineno=450, col_offset=34), lineno=450, col_offset=16)], [], lineno=449, col_offset=12), If(Compare(Str('CONTENT_LENGTH', lineno=451, col_offset=15), [In()], [Name('environ', Load(), lineno=451, col_offset=35)], lineno=451, col_offset=15), [Assign([Subscript(Name('headers', Load(), lineno=452, col_offset=16), Index(Str('content-length', lineno=452, col_offset=24)), Store(), lineno=452, col_offset=16)], Subscript(Name('environ', Load(), lineno=452, col_offset=44), Index(Str('CONTENT_LENGTH', lineno=452, col_offset=52)), Load(), lineno=452, col_offset=44), lineno=452, col_offset=16)], [], lineno=451, col_offset=12)], [], lineno=442, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=453, col_offset=8), 'fp', Store(), lineno=453, col_offset=8)], BoolOp(Or(), [Name('fp', Load(), lineno=453, col_offset=18), Attribute(Name('sys', Load(), lineno=453, col_offset=24), 'stdin', Load(), lineno=453, col_offset=24)], lineno=453, col_offset=18), lineno=453, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=454, col_offset=8), 'headers', Store(), lineno=454, col_offset=8)], Name('headers', Load(), lineno=454, col_offset=23), lineno=454, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=455, col_offset=8), 'outerboundary', Store(), lineno=455, col_offset=8)], Name('outerboundary', Load(), lineno=455, col_offset=29), lineno=455, col_offset=8), Assign([Tuple([Name('cdisp', Store(), lineno=458, col_offset=8), Name('pdict', Store(), lineno=458, col_offset=15)], Store(), lineno=458, col_offset=8)], Tuple([Str('', lineno=458, col_offset=23), Dict([], [], lineno=458, col_offset=27)], Load(), lineno=458, col_offset=23), lineno=458, col_offset=8), If(Compare(Str('content-disposition', lineno=459, col_offset=11), [In()], [Attribute(Name('self', Load(), lineno=459, col_offset=36), 'headers', Load(), lineno=459, col_offset=36)], lineno=459, col_offset=11), [Assign([Tuple([Name('cdisp', Store(), lineno=460, col_offset=12), Name('pdict', Store(), lineno=460, col_offset=19)], Store(), lineno=460, col_offset=12)], Call(Name('parse_header', Load(), lineno=460, col_offset=27), [Subscript(Attribute(Name('self', Load(), lineno=460, col_offset=40), 'headers', Load(), lineno=460, col_offset=40), Index(Str('content-disposition', lineno=460, col_offset=53)), Load(), lineno=460, col_offset=40)], [], None, None, lineno=460, col_offset=27), lineno=460, col_offset=12)], [], lineno=459, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=461, col_offset=8), 'disposition', Store(), lineno=461, col_offset=8)], Name('cdisp', Load(), lineno=461, col_offset=27), lineno=461, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=462, col_offset=8), 'disposition_options', Store(), lineno=462, col_offset=8)], Name('pdict', Load(), lineno=462, col_offset=35), lineno=462, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=463, col_offset=8), 'name', Store(), lineno=463, col_offset=8)], Name('None', Load(), lineno=463, col_offset=20), lineno=463, col_offset=8), If(Compare(Str('name', lineno=464, col_offset=11), [In()], [Name('pdict', Load(), lineno=464, col_offset=21)], lineno=464, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=465, col_offset=12), 'name', Store(), lineno=465, col_offset=12)], Subscript(Name('pdict', Load(), lineno=465, col_offset=24), Index(Str('name', lineno=465, col_offset=30)), Load(), lineno=465, col_offset=24), lineno=465, col_offset=12)], [], lineno=464, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=466, col_offset=8), 'filename', Store(), lineno=466, col_offset=8)], Name('None', Load(), lineno=466, col_offset=24), lineno=466, col_offset=8), If(Compare(Str('filename', lineno=467, col_offset=11), [In()], [Name('pdict', Load(), lineno=467, col_offset=25)], lineno=467, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=468, col_offset=12), 'filename', Store(), lineno=468, col_offset=12)], Subscript(Name('pdict', Load(), lineno=468, col_offset=28), Index(Str('filename', lineno=468, col_offset=34)), Load(), lineno=468, col_offset=28), lineno=468, col_offset=12)], [], lineno=467, col_offset=8), If(Compare(Str('content-type', lineno=482, col_offset=11), [In()], [Attribute(Name('self', Load(), lineno=482, col_offset=29), 'headers', Load(), lineno=482, col_offset=29)], lineno=482, col_offset=11), [Assign([Tuple([Name('ctype', Store(), lineno=483, col_offset=12), Name('pdict', Store(), lineno=483, col_offset=19)], Store(), lineno=483, col_offset=12)], Call(Name('parse_header', Load(), lineno=483, col_offset=27), [Subscript(Attribute(Name('self', Load(), lineno=483, col_offset=40), 'headers', Load(), lineno=483, col_offset=40), Index(Str('content-type', lineno=483, col_offset=53)), Load(), lineno=483, col_offset=40)], [], None, None, lineno=483, col_offset=27), lineno=483, col_offset=12)], [If(BoolOp(Or(), [Attribute(Name('self', Load(), lineno=484, col_offset=13), 'outerboundary', Load(), lineno=484, col_offset=13), Compare(Name('method', Load(), lineno=484, col_offset=35), [NotEq()], [Str('POST', lineno=484, col_offset=45)], lineno=484, col_offset=35)], lineno=484, col_offset=13), [Assign([Tuple([Name('ctype', Store(), lineno=485, col_offset=12), Name('pdict', Store(), lineno=485, col_offset=19)], Store(), lineno=485, col_offset=12)], Tuple([Str('text/plain', lineno=485, col_offset=27), Dict([], [], lineno=485, col_offset=41)], Load(), lineno=485, col_offset=27), lineno=485, col_offset=12)], [Assign([Tuple([Name('ctype', Store(), lineno=487, col_offset=12), Name('pdict', Store(), lineno=487, col_offset=19)], Store(), lineno=487, col_offset=12)], Tuple([Str('application/x-www-form-urlencoded', lineno=487, col_offset=27), Dict([], [], lineno=487, col_offset=64)], Load(), lineno=487, col_offset=27), lineno=487, col_offset=12)], lineno=484, col_offset=13)], lineno=482, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=488, col_offset=8), 'type', Store(), lineno=488, col_offset=8)], Name('ctype', Load(), lineno=488, col_offset=20), lineno=488, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=489, col_offset=8), 'type_options', Store(), lineno=489, col_offset=8)], Name('pdict', Load(), lineno=489, col_offset=28), lineno=489, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=490, col_offset=8), 'innerboundary', Store(), lineno=490, col_offset=8)], Str('', lineno=490, col_offset=29), lineno=490, col_offset=8), If(Compare(Str('boundary', lineno=491, col_offset=11), [In()], [Name('pdict', Load(), lineno=491, col_offset=25)], lineno=491, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=492, col_offset=12), 'innerboundary', Store(), lineno=492, col_offset=12)], Subscript(Name('pdict', Load(), lineno=492, col_offset=33), Index(Str('boundary', lineno=492, col_offset=39)), Load(), lineno=492, col_offset=33), lineno=492, col_offset=12)], [], lineno=491, col_offset=8), Assign([Name('clen', Store(), lineno=493, col_offset=8)], Num(-1, lineno=493, col_offset=16), lineno=493, col_offset=8), If(Compare(Str('content-length', lineno=494, col_offset=11), [In()], [Attribute(Name('self', Load(), lineno=494, col_offset=31), 'headers', Load(), lineno=494, col_offset=31)], lineno=494, col_offset=11), [TryExcept([Assign([Name('clen', Store(), lineno=496, col_offset=16)], Call(Name('int', Load(), lineno=496, col_offset=23), [Subscript(Attribute(Name('self', Load(), lineno=496, col_offset=27), 'headers', Load(), lineno=496, col_offset=27), Index(Str('content-length', lineno=496, col_offset=40)), Load(), lineno=496, col_offset=27)], [], None, None, lineno=496, col_offset=23), lineno=496, col_offset=16)], [ExceptHandler(Name('ValueError', Load(), lineno=497, col_offset=19), None, [Pass( lineno=498, col_offset=16)], lineno=497, col_offset=12)], [], lineno=495, col_offset=12), If(BoolOp(And(), [Name('maxlen', Load(), lineno=499, col_offset=15), Compare(Name('clen', Load(), lineno=499, col_offset=26), [Gt()], [Name('maxlen', Load(), lineno=499, col_offset=33)], lineno=499, col_offset=26)], lineno=499, col_offset=15), [Raise(Name('ValueError', Load(), lineno=500, col_offset=22), Str('Maximum content length exceeded', lineno=500, col_offset=34), None, lineno=500, col_offset=16)], [], lineno=499, col_offset=12)], [], lineno=494, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=501, col_offset=8), 'length', Store(), lineno=501, col_offset=8)], Name('clen', Load(), lineno=501, col_offset=22), lineno=501, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=503, col_offset=8), 'list', Store(), lineno=503, col_offset=8), Attribute(Name('self', Load(), lineno=503, col_offset=20), 'file', Store(), lineno=503, col_offset=20)], Name('None', Load(), lineno=503, col_offset=32), lineno=503, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=504, col_offset=8), 'done', Store(), lineno=504, col_offset=8)], Num(0, lineno=504, col_offset=20), lineno=504, col_offset=8), If(Compare(Name('ctype', Load(), lineno=505, col_offset=11), [Eq()], [Str('application/x-www-form-urlencoded', lineno=505, col_offset=20)], lineno=505, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=506, col_offset=12), 'read_urlencoded', Load(), lineno=506, col_offset=12), [], [], None, None, lineno=506, col_offset=12), lineno=506, col_offset=12)], [If(Compare(Subscript(Name('ctype', Load(), lineno=507, col_offset=13), Slice(None, Num(10, lineno=507, col_offset=20), None), Load(), lineno=507, col_offset=13), [Eq()], [Str('multipart/', lineno=507, col_offset=27)], lineno=507, col_offset=13), [Expr(Call(Attribute(Name('self', Load(), lineno=508, col_offset=12), 'read_multi', Load(), lineno=508, col_offset=12), [Name('environ', Load(), lineno=508, col_offset=28), Name('keep_blank_values', Load(), lineno=508, col_offset=37), Name('strict_parsing', Load(), lineno=508, col_offset=56)], [], None, None, lineno=508, col_offset=12), lineno=508, col_offset=12)], [Expr(Call(Attribute(Name('self', Load(), lineno=510, col_offset=12), 'read_single', Load(), lineno=510, col_offset=12), [], [], None, None, lineno=510, col_offset=12), lineno=510, col_offset=12)], lineno=507, col_offset=13)], lineno=505, col_offset=8)], [], lineno=396, col_offset=4), FunctionDef('__repr__', arguments([Name('self', Param(), lineno=512, col_offset=17)], None, None, []), [Expr(Str('Return a printable representation.', lineno=513, col_offset=8), lineno=513, col_offset=8), Return(BinOp(Str('FieldStorage(%r, %r, %r)', lineno=514, col_offset=15), Mod(), Tuple([Attribute(Name('self', Load(), lineno=515, col_offset=16), 'name', Load(), lineno=515, col_offset=16), Attribute(Name('self', Load(), lineno=515, col_offset=27), 'filename', Load(), lineno=515, col_offset=27), Attribute(Name('self', Load(), lineno=515, col_offset=42), 'value', Load(), lineno=515, col_offset=42)], Load(), lineno=515, col_offset=16), lineno=514, col_offset=15), lineno=514, col_offset=8)], [], lineno=512, col_offset=4), FunctionDef('__iter__', arguments([Name('self', Param(), lineno=517, col_offset=17)], None, None, []), [Return(Call(Name('iter', Load(), lineno=518, col_offset=15), [Call(Attribute(Name('self', Load(), lineno=518, col_offset=20), 'keys', Load(), lineno=518, col_offset=20), [], [], None, None, lineno=518, col_offset=20)], [], None, None, lineno=518, col_offset=15), lineno=518, col_offset=8)], [], lineno=517, col_offset=4), FunctionDef('__getattr__', arguments([Name('self', Param(), lineno=520, col_offset=20), Name('name', Param(), lineno=520, col_offset=26)], None, None, []), [If(Compare(Name('name', Load(), lineno=521, col_offset=11), [NotEq()], [Str('value', lineno=521, col_offset=19)], lineno=521, col_offset=11), [Raise(Name('AttributeError', Load(), lineno=522, col_offset=18), Name('name', Load(), lineno=522, col_offset=34), None, lineno=522, col_offset=12)], [], lineno=521, col_offset=8), If(Attribute(Name('self', Load(), lineno=523, col_offset=11), 'file', Load(), lineno=523, col_offset=11), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=524, col_offset=12), 'file', Load(), lineno=524, col_offset=12), 'seek', Load(), lineno=524, col_offset=12), [Num(0, lineno=524, col_offset=27)], [], None, None, lineno=524, col_offset=12), lineno=524, col_offset=12), Assign([Name('value', Store(), lineno=525, col_offset=12)], Call(Attribute(Attribute(Name('self', Load(), lineno=525, col_offset=20), 'file', Load(), lineno=525, col_offset=20), 'read', Load(), lineno=525, col_offset=20), [], [], None, None, lineno=525, col_offset=20), lineno=525, col_offset=12), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=526, col_offset=12), 'file', Load(), lineno=526, col_offset=12), 'seek', Load(), lineno=526, col_offset=12), [Num(0, lineno=526, col_offset=27)], [], None, None, lineno=526, col_offset=12), lineno=526, col_offset=12)], [If(Compare(Attribute(Name('self', Load(), lineno=527, col_offset=13), 'list', Load(), lineno=527, col_offset=13), [IsNot()], [Name('None', Load(), lineno=527, col_offset=30)], lineno=527, col_offset=13), [Assign([Name('value', Store(), lineno=528, col_offset=12)], Attribute(Name('self', Load(), lineno=528, col_offset=20), 'list', Load(), lineno=528, col_offset=20), lineno=528, col_offset=12)], [Assign([Name('value', Store(), lineno=530, col_offset=12)], Name('None', Load(), lineno=530, col_offset=20), lineno=530, col_offset=12)], lineno=527, col_offset=13)], lineno=523, col_offset=8), Return(Name('value', Load(), lineno=531, col_offset=15), lineno=531, col_offset=8)], [], lineno=520, col_offset=4), FunctionDef('__getitem__', arguments([Name('self', Param(), lineno=533, col_offset=20), Name('key', Param(), lineno=533, col_offset=26)], None, None, []), [Expr(Str('Dictionary style indexing.', lineno=534, col_offset=8), lineno=534, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=535, col_offset=11), 'list', Load(), lineno=535, col_offset=11), [Is()], [Name('None', Load(), lineno=535, col_offset=24)], lineno=535, col_offset=11), [Raise(Name('TypeError', Load(), lineno=536, col_offset=18), Str('not indexable', lineno=536, col_offset=29), None, lineno=536, col_offset=12)], [], lineno=535, col_offset=8), Assign([Name('found', Store(), lineno=537, col_offset=8)], List([], Load(), lineno=537, col_offset=16), lineno=537, col_offset=8), For(Name('item', Store(), lineno=538, col_offset=12), Attribute(Name('self', Load(), lineno=538, col_offset=20), 'list', Load(), lineno=538, col_offset=20), [If(Compare(Attribute(Name('item', Load(), lineno=539, col_offset=15), 'name', Load(), lineno=539, col_offset=15), [Eq()], [Name('key', Load(), lineno=539, col_offset=28)], lineno=539, col_offset=15), [Expr(Call(Attribute(Name('found', Load(), lineno=539, col_offset=33), 'append', Load(), lineno=539, col_offset=33), [Name('item', Load(), lineno=539, col_offset=46)], [], None, None, lineno=539, col_offset=33), lineno=539, col_offset=33)], [], lineno=539, col_offset=12)], [], lineno=538, col_offset=8), If(UnaryOp(Not(), Name('found', Load(), lineno=540, col_offset=15), lineno=540, col_offset=11), [Raise(Name('KeyError', Load(), lineno=541, col_offset=18), Name('key', Load(), lineno=541, col_offset=28), None, lineno=541, col_offset=12)], [], lineno=540, col_offset=8), If(Compare(Call(Name('len', Load(), lineno=542, col_offset=11), [Name('found', Load(), lineno=542, col_offset=15)], [], None, None, lineno=542, col_offset=11), [Eq()], [Num(1, lineno=542, col_offset=25)], lineno=542, col_offset=11), [Return(Subscript(Name('found', Load(), lineno=543, col_offset=19), Index(Num(0, lineno=543, col_offset=25)), Load(), lineno=543, col_offset=19), lineno=543, col_offset=12)], [Return(Name('found', Load(), lineno=545, col_offset=19), lineno=545, col_offset=12)], lineno=542, col_offset=8)], [], lineno=533, col_offset=4), FunctionDef('getvalue', arguments([Name('self', Param(), lineno=547, col_offset=17), Name('key', Param(), lineno=547, col_offset=23), Name('default', Param(), lineno=547, col_offset=28)], None, None, [Name('None', Load(), lineno=547, col_offset=36)]), [Expr(Str("Dictionary style get() method, including 'value' lookup.", lineno=548, col_offset=8), lineno=548, col_offset=8), If(Compare(Name('key', Load(), lineno=549, col_offset=11), [In()], [Name('self', Load(), lineno=549, col_offset=18)], lineno=549, col_offset=11), [Assign([Name('value', Store(), lineno=550, col_offset=12)], Subscript(Name('self', Load(), lineno=550, col_offset=20), Index(Name('key', Load(), lineno=550, col_offset=25)), Load(), lineno=550, col_offset=20), lineno=550, col_offset=12), If(Compare(Call(Name('type', Load(), lineno=551, col_offset=15), [Name('value', Load(), lineno=551, col_offset=20)], [], None, None, lineno=551, col_offset=15), [Is()], [Call(Name('type', Load(), lineno=551, col_offset=30), [List([], Load(), lineno=551, col_offset=35)], [], None, None, lineno=551, col_offset=30)], lineno=551, col_offset=15), [Return(Call(Name('map', Load(), lineno=552, col_offset=23), [Call(Name('attrgetter', Load(), lineno=552, col_offset=27), [Str('value', lineno=552, col_offset=38)], [], None, None, lineno=552, col_offset=27), Name('value', Load(), lineno=552, col_offset=48)], [], None, None, lineno=552, col_offset=23), lineno=552, col_offset=16)], [Return(Attribute(Name('value', Load(), lineno=554, col_offset=23), 'value', Load(), lineno=554, col_offset=23), lineno=554, col_offset=16)], lineno=551, col_offset=12)], [Return(Name('default', Load(), lineno=556, col_offset=19), lineno=556, col_offset=12)], lineno=549, col_offset=8)], [], lineno=547, col_offset=4), FunctionDef('getfirst', arguments([Name('self', Param(), lineno=558, col_offset=17), Name('key', Param(), lineno=558, col_offset=23), Name('default', Param(), lineno=558, col_offset=28)], None, None, [Name('None', Load(), lineno=558, col_offset=36)]), [Expr(Str(' Return the first value received.', lineno=559, col_offset=8), lineno=559, col_offset=8), If(Compare(Name('key', Load(), lineno=560, col_offset=11), [In()], [Name('self', Load(), lineno=560, col_offset=18)], lineno=560, col_offset=11), [Assign([Name('value', Store(), lineno=561, col_offset=12)], Subscript(Name('self', Load(), lineno=561, col_offset=20), Index(Name('key', Load(), lineno=561, col_offset=25)), Load(), lineno=561, col_offset=20), lineno=561, col_offset=12), If(Compare(Call(Name('type', Load(), lineno=562, col_offset=15), [Name('value', Load(), lineno=562, col_offset=20)], [], None, None, lineno=562, col_offset=15), [Is()], [Call(Name('type', Load(), lineno=562, col_offset=30), [List([], Load(), lineno=562, col_offset=35)], [], None, None, lineno=562, col_offset=30)], lineno=562, col_offset=15), [Return(Attribute(Subscript(Name('value', Load(), lineno=563, col_offset=23), Index(Num(0, lineno=563, col_offset=29)), Load(), lineno=563, col_offset=23), 'value', Load(), lineno=563, col_offset=23), lineno=563, col_offset=16)], [Return(Attribute(Name('value', Load(), lineno=565, col_offset=23), 'value', Load(), lineno=565, col_offset=23), lineno=565, col_offset=16)], lineno=562, col_offset=12)], [Return(Name('default', Load(), lineno=567, col_offset=19), lineno=567, col_offset=12)], lineno=560, col_offset=8)], [], lineno=558, col_offset=4), FunctionDef('getlist', arguments([Name('self', Param(), lineno=569, col_offset=16), Name('key', Param(), lineno=569, col_offset=22)], None, None, []), [Expr(Str(' Return list of received values.', lineno=570, col_offset=8), lineno=570, col_offset=8), If(Compare(Name('key', Load(), lineno=571, col_offset=11), [In()], [Name('self', Load(), lineno=571, col_offset=18)], lineno=571, col_offset=11), [Assign([Name('value', Store(), lineno=572, col_offset=12)], Subscript(Name('self', Load(), lineno=572, col_offset=20), Index(Name('key', Load(), lineno=572, col_offset=25)), Load(), lineno=572, col_offset=20), lineno=572, col_offset=12), If(Compare(Call(Name('type', Load(), lineno=573, col_offset=15), [Name('value', Load(), lineno=573, col_offset=20)], [], None, None, lineno=573, col_offset=15), [Is()], [Call(Name('type', Load(), lineno=573, col_offset=30), [List([], Load(), lineno=573, col_offset=35)], [], None, None, lineno=573, col_offset=30)], lineno=573, col_offset=15), [Return(Call(Name('map', Load(), lineno=574, col_offset=23), [Call(Name('attrgetter', Load(), lineno=574, col_offset=27), [Str('value', lineno=574, col_offset=38)], [], None, None, lineno=574, col_offset=27), Name('value', Load(), lineno=574, col_offset=48)], [], None, None, lineno=574, col_offset=23), lineno=574, col_offset=16)], [Return(List([Attribute(Name('value', Load(), lineno=576, col_offset=24), 'value', Load(), lineno=576, col_offset=24)], Load(), lineno=576, col_offset=23), lineno=576, col_offset=16)], lineno=573, col_offset=12)], [Return(List([], Load(), lineno=578, col_offset=19), lineno=578, col_offset=12)], lineno=571, col_offset=8)], [], lineno=569, col_offset=4), FunctionDef('keys', arguments([Name('self', Param(), lineno=580, col_offset=13)], None, None, []), [Expr(Str('Dictionary style keys() method.', lineno=581, col_offset=8), lineno=581, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=582, col_offset=11), 'list', Load(), lineno=582, col_offset=11), [Is()], [Name('None', Load(), lineno=582, col_offset=24)], lineno=582, col_offset=11), [Raise(Name('TypeError', Load(), lineno=583, col_offset=18), Str('not indexable', lineno=583, col_offset=29), None, lineno=583, col_offset=12)], [], lineno=582, col_offset=8), Return(Call(Name('list', Load(), lineno=584, col_offset=15), [Call(Name('set', Load(), lineno=584, col_offset=20), [GeneratorExp(Attribute(Name('item', Load(), lineno=584, col_offset=24), 'name', Load(), lineno=584, col_offset=24), [comprehension(Name('item', Store(), lineno=584, col_offset=38), Attribute(Name('self', Load(), lineno=584, col_offset=46), 'list', Load(), lineno=584, col_offset=46), [])], lineno=584, col_offset=24)], [], None, None, lineno=584, col_offset=20)], [], None, None, lineno=584, col_offset=15), lineno=584, col_offset=8)], [], lineno=580, col_offset=4), FunctionDef('has_key', arguments([Name('self', Param(), lineno=586, col_offset=16), Name('key', Param(), lineno=586, col_offset=22)], None, None, []), [Expr(Str('Dictionary style has_key() method.', lineno=587, col_offset=8), lineno=587, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=588, col_offset=11), 'list', Load(), lineno=588, col_offset=11), [Is()], [Name('None', Load(), lineno=588, col_offset=24)], lineno=588, col_offset=11), [Raise(Name('TypeError', Load(), lineno=589, col_offset=18), Str('not indexable', lineno=589, col_offset=29), None, lineno=589, col_offset=12)], [], lineno=588, col_offset=8), Return(Call(Name('any', Load(), lineno=590, col_offset=15), [GeneratorExp(Compare(Attribute(Name('item', Load(), lineno=590, col_offset=19), 'name', Load(), lineno=590, col_offset=19), [Eq()], [Name('key', Load(), lineno=590, col_offset=32)], lineno=590, col_offset=19), [comprehension(Name('item', Store(), lineno=590, col_offset=40), Attribute(Name('self', Load(), lineno=590, col_offset=48), 'list', Load(), lineno=590, col_offset=48), [])], lineno=590, col_offset=19)], [], None, None, lineno=590, col_offset=15), lineno=590, col_offset=8)], [], lineno=586, col_offset=4), FunctionDef('__contains__', arguments([Name('self', Param(), lineno=592, col_offset=21), Name('key', Param(), lineno=592, col_offset=27)], None, None, []), [Expr(Str('Dictionary style __contains__ method.', lineno=593, col_offset=8), lineno=593, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=594, col_offset=11), 'list', Load(), lineno=594, col_offset=11), [Is()], [Name('None', Load(), lineno=594, col_offset=24)], lineno=594, col_offset=11), [Raise(Name('TypeError', Load(), lineno=595, col_offset=18), Str('not indexable', lineno=595, col_offset=29), None, lineno=595, col_offset=12)], [], lineno=594, col_offset=8), Return(Call(Name('any', Load(), lineno=596, col_offset=15), [GeneratorExp(Compare(Attribute(Name('item', Load(), lineno=596, col_offset=19), 'name', Load(), lineno=596, col_offset=19), [Eq()], [Name('key', Load(), lineno=596, col_offset=32)], lineno=596, col_offset=19), [comprehension(Name('item', Store(), lineno=596, col_offset=40), Attribute(Name('self', Load(), lineno=596, col_offset=48), 'list', Load(), lineno=596, col_offset=48), [])], lineno=596, col_offset=19)], [], None, None, lineno=596, col_offset=15), lineno=596, col_offset=8)], [], lineno=592, col_offset=4), FunctionDef('__len__', arguments([Name('self', Param(), lineno=598, col_offset=16)], None, None, []), [Expr(Str('Dictionary style len(x) support.', lineno=599, col_offset=8), lineno=599, col_offset=8), Return(Call(Name('len', Load(), lineno=600, col_offset=15), [Call(Attribute(Name('self', Load(), lineno=600, col_offset=19), 'keys', Load(), lineno=600, col_offset=19), [], [], None, None, lineno=600, col_offset=19)], [], None, None, lineno=600, col_offset=15), lineno=600, col_offset=8)], [], lineno=598, col_offset=4), FunctionDef('__nonzero__', arguments([Name('self', Param(), lineno=602, col_offset=20)], None, None, []), [Return(Call(Name('bool', Load(), lineno=603, col_offset=15), [Attribute(Name('self', Load(), lineno=603, col_offset=20), 'list', Load(), lineno=603, col_offset=20)], [], None, None, lineno=603, col_offset=15), lineno=603, col_offset=8)], [], lineno=602, col_offset=4), FunctionDef('read_urlencoded', arguments([Name('self', Param(), lineno=605, col_offset=24)], None, None, []), [Expr(Str('Internal: read data in query string format.', lineno=606, col_offset=8), lineno=606, col_offset=8), Assign([Name('qs', Store(), lineno=607, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=607, col_offset=13), 'fp', Load(), lineno=607, col_offset=13), 'read', Load(), lineno=607, col_offset=13), [Attribute(Name('self', Load(), lineno=607, col_offset=26), 'length', Load(), lineno=607, col_offset=26)], [], None, None, lineno=607, col_offset=13), lineno=607, col_offset=8), If(Attribute(Name('self', Load(), lineno=608, col_offset=11), 'qs_on_post', Load(), lineno=608, col_offset=11), [AugAssign(Name('qs', Store(), lineno=609, col_offset=12), Add(), BinOp(Str('&', lineno=609, col_offset=18), Add(), Attribute(Name('self', Load(), lineno=609, col_offset=24), 'qs_on_post', Load(), lineno=609, col_offset=24), lineno=609, col_offset=18), lineno=609, col_offset=12)], [], lineno=608, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=610, col_offset=8), 'list', Store(), lineno=610, col_offset=8), Name('list', Store(), lineno=610, col_offset=20)], List([], Load(), lineno=610, col_offset=27), lineno=610, col_offset=8), For(Tuple([Name('key', Store(), lineno=611, col_offset=12), Name('value', Store(), lineno=611, col_offset=17)], Store(), lineno=611, col_offset=12), Call(Attribute(Name('urlparse', Load(), lineno=611, col_offset=26), 'parse_qsl', Load(), lineno=611, col_offset=26), [Name('qs', Load(), lineno=611, col_offset=45), Attribute(Name('self', Load(), lineno=611, col_offset=49), 'keep_blank_values', Load(), lineno=611, col_offset=49), Attribute(Name('self', Load(), lineno=612, col_offset=44), 'strict_parsing', Load(), lineno=612, col_offset=44)], [], None, None, lineno=611, col_offset=26), [Expr(Call(Attribute(Name('list', Load(), lineno=613, col_offset=12), 'append', Load(), lineno=613, col_offset=12), [Call(Name('MiniFieldStorage', Load(), lineno=613, col_offset=24), [Name('key', Load(), lineno=613, col_offset=41), Name('value', Load(), lineno=613, col_offset=46)], [], None, None, lineno=613, col_offset=24)], [], None, None, lineno=613, col_offset=12), lineno=613, col_offset=12)], [], lineno=611, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=614, col_offset=8), 'skip_lines', Load(), lineno=614, col_offset=8), [], [], None, None, lineno=614, col_offset=8), lineno=614, col_offset=8)], [], lineno=605, col_offset=4), Assign([Name('FieldStorageClass', Store(), lineno=616, col_offset=4)], Name('None', Load(), lineno=616, col_offset=24), lineno=616, col_offset=4), FunctionDef('read_multi', arguments([Name('self', Param(), lineno=618, col_offset=19), Name('environ', Param(), lineno=618, col_offset=25), Name('keep_blank_values', Param(), lineno=618, col_offset=34), Name('strict_parsing', Param(), lineno=618, col_offset=53)], None, None, []), [Expr(Str('Internal: read a part that is itself multipart.', lineno=619, col_offset=8), lineno=619, col_offset=8), Assign([Name('ib', Store(), lineno=620, col_offset=8)], Attribute(Name('self', Load(), lineno=620, col_offset=13), 'innerboundary', Load(), lineno=620, col_offset=13), lineno=620, col_offset=8), If(UnaryOp(Not(), Call(Name('valid_boundary', Load(), lineno=621, col_offset=15), [Name('ib', Load(), lineno=621, col_offset=30)], [], None, None, lineno=621, col_offset=15), lineno=621, col_offset=11), [Raise(Name('ValueError', Load(), lineno=622, col_offset=18), BinOp(Str('Invalid boundary in multipart form: %r', lineno=622, col_offset=30), Mod(), Tuple([Name('ib', Load(), lineno=622, col_offset=74)], Load(), lineno=622, col_offset=74), lineno=622, col_offset=30), None, lineno=622, col_offset=12)], [], lineno=621, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=623, col_offset=8), 'list', Store(), lineno=623, col_offset=8)], List([], Load(), lineno=623, col_offset=20), lineno=623, col_offset=8), If(Attribute(Name('self', Load(), lineno=624, col_offset=11), 'qs_on_post', Load(), lineno=624, col_offset=11), [For(Tuple([Name('key', Store(), lineno=625, col_offset=16), Name('value', Store(), lineno=625, col_offset=21)], Store(), lineno=625, col_offset=16), Call(Attribute(Name('urlparse', Load(), lineno=625, col_offset=30), 'parse_qsl', Load(), lineno=625, col_offset=30), [Attribute(Name('self', Load(), lineno=625, col_offset=49), 'qs_on_post', Load(), lineno=625, col_offset=49), Attribute(Name('self', Load(), lineno=626, col_offset=32), 'keep_blank_values', Load(), lineno=626, col_offset=32), Attribute(Name('self', Load(), lineno=626, col_offset=56), 'strict_parsing', Load(), lineno=626, col_offset=56)], [], None, None, lineno=625, col_offset=30), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=627, col_offset=16), 'list', Load(), lineno=627, col_offset=16), 'append', Load(), lineno=627, col_offset=16), [Call(Name('MiniFieldStorage', Load(), lineno=627, col_offset=33), [Name('key', Load(), lineno=627, col_offset=50), Name('value', Load(), lineno=627, col_offset=55)], [], None, None, lineno=627, col_offset=33)], [], None, None, lineno=627, col_offset=16), lineno=627, col_offset=16)], [], lineno=625, col_offset=12), Assign([Name('FieldStorageClass', Store(), lineno=628, col_offset=12)], Name('None', Load(), lineno=628, col_offset=32), lineno=628, col_offset=12)], [], lineno=624, col_offset=8), Assign([Name('klass', Store(), lineno=630, col_offset=8)], BoolOp(Or(), [Attribute(Name('self', Load(), lineno=630, col_offset=16), 'FieldStorageClass', Load(), lineno=630, col_offset=16), Attribute(Name('self', Load(), lineno=630, col_offset=42), '__class__', Load(), lineno=630, col_offset=42)], lineno=630, col_offset=16), lineno=630, col_offset=8), Assign([Name('part', Store(), lineno=631, col_offset=8)], Call(Name('klass', Load(), lineno=631, col_offset=15), [Attribute(Name('self', Load(), lineno=631, col_offset=21), 'fp', Load(), lineno=631, col_offset=21), Dict([], [], lineno=631, col_offset=30), Name('ib', Load(), lineno=631, col_offset=34), Name('environ', Load(), lineno=632, col_offset=21), Name('keep_blank_values', Load(), lineno=632, col_offset=30), Name('strict_parsing', Load(), lineno=632, col_offset=49)], [], None, None, lineno=631, col_offset=15), lineno=631, col_offset=8), While(UnaryOp(Not(), Attribute(Name('part', Load(), lineno=634, col_offset=18), 'done', Load(), lineno=634, col_offset=18), lineno=634, col_offset=14), [Assign([Name('headers', Store(), lineno=635, col_offset=12)], Call(Attribute(Name('rfc822', Load(), lineno=635, col_offset=22), 'Message', Load(), lineno=635, col_offset=22), [Attribute(Name('self', Load(), lineno=635, col_offset=37), 'fp', Load(), lineno=635, col_offset=37)], [], None, None, lineno=635, col_offset=22), lineno=635, col_offset=12), Assign([Name('part', Store(), lineno=636, col_offset=12)], Call(Name('klass', Load(), lineno=636, col_offset=19), [Attribute(Name('self', Load(), lineno=636, col_offset=25), 'fp', Load(), lineno=636, col_offset=25), Name('headers', Load(), lineno=636, col_offset=34), Name('ib', Load(), lineno=636, col_offset=43), Name('environ', Load(), lineno=637, col_offset=25), Name('keep_blank_values', Load(), lineno=637, col_offset=34), Name('strict_parsing', Load(), lineno=637, col_offset=53)], [], None, None, lineno=636, col_offset=19), lineno=636, col_offset=12), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=638, col_offset=12), 'list', Load(), lineno=638, col_offset=12), 'append', Load(), lineno=638, col_offset=12), [Name('part', Load(), lineno=638, col_offset=29)], [], None, None, lineno=638, col_offset=12), lineno=638, col_offset=12)], [], lineno=634, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=639, col_offset=8), 'skip_lines', Load(), lineno=639, col_offset=8), [], [], None, None, lineno=639, col_offset=8), lineno=639, col_offset=8)], [], lineno=618, col_offset=4), FunctionDef('read_single', arguments([Name('self', Param(), lineno=641, col_offset=20)], None, None, []), [Expr(Str('Internal: read an atomic part.', lineno=642, col_offset=8), lineno=642, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=643, col_offset=11), 'length', Load(), lineno=643, col_offset=11), [GtE()], [Num(0, lineno=643, col_offset=26)], lineno=643, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=644, col_offset=12), 'read_binary', Load(), lineno=644, col_offset=12), [], [], None, None, lineno=644, col_offset=12), lineno=644, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=645, col_offset=12), 'skip_lines', Load(), lineno=645, col_offset=12), [], [], None, None, lineno=645, col_offset=12), lineno=645, col_offset=12)], [Expr(Call(Attribute(Name('self', Load(), lineno=647, col_offset=12), 'read_lines', Load(), lineno=647, col_offset=12), [], [], None, None, lineno=647, col_offset=12), lineno=647, col_offset=12)], lineno=643, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=648, col_offset=8), 'file', Load(), lineno=648, col_offset=8), 'seek', Load(), lineno=648, col_offset=8), [Num(0, lineno=648, col_offset=23)], [], None, None, lineno=648, col_offset=8), lineno=648, col_offset=8)], [], lineno=641, col_offset=4), Assign([Name('bufsize', Store(), lineno=650, col_offset=4)], BinOp(Num(8, lineno=650, col_offset=14), Mult(), Num(1024, lineno=650, col_offset=16), lineno=650, col_offset=14), lineno=650, col_offset=4), FunctionDef('read_binary', arguments([Name('self', Param(), lineno=652, col_offset=20)], None, None, []), [Expr(Str('Internal: read binary data.', lineno=653, col_offset=8), lineno=653, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=654, col_offset=8), 'file', Store(), lineno=654, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=654, col_offset=20), 'make_file', Load(), lineno=654, col_offset=20), [Str('b', lineno=654, col_offset=35)], [], None, None, lineno=654, col_offset=20), lineno=654, col_offset=8), Assign([Name('todo', Store(), lineno=655, col_offset=8)], Attribute(Name('self', Load(), lineno=655, col_offset=15), 'length', Load(), lineno=655, col_offset=15), lineno=655, col_offset=8), If(Compare(Name('todo', Load(), lineno=656, col_offset=11), [GtE()], [Num(0, lineno=656, col_offset=19)], lineno=656, col_offset=11), [While(Compare(Name('todo', Load(), lineno=657, col_offset=18), [Gt()], [Num(0, lineno=657, col_offset=25)], lineno=657, col_offset=18), [Assign([Name('data', Store(), lineno=658, col_offset=16)], Call(Attribute(Attribute(Name('self', Load(), lineno=658, col_offset=23), 'fp', Load(), lineno=658, col_offset=23), 'read', Load(), lineno=658, col_offset=23), [Call(Name('min', Load(), lineno=658, col_offset=36), [Name('todo', Load(), lineno=658, col_offset=40), Attribute(Name('self', Load(), lineno=658, col_offset=46), 'bufsize', Load(), lineno=658, col_offset=46)], [], None, None, lineno=658, col_offset=36)], [], None, None, lineno=658, col_offset=23), lineno=658, col_offset=16), If(UnaryOp(Not(), Name('data', Load(), lineno=659, col_offset=23), lineno=659, col_offset=19), [Assign([Attribute(Name('self', Load(), lineno=660, col_offset=20), 'done', Store(), lineno=660, col_offset=20)], Num(-1, lineno=660, col_offset=33), lineno=660, col_offset=20), Break( lineno=661, col_offset=20)], [], lineno=659, col_offset=16), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=662, col_offset=16), 'file', Load(), lineno=662, col_offset=16), 'write', Load(), lineno=662, col_offset=16), [Name('data', Load(), lineno=662, col_offset=32)], [], None, None, lineno=662, col_offset=16), lineno=662, col_offset=16), Assign([Name('todo', Store(), lineno=663, col_offset=16)], BinOp(Name('todo', Load(), lineno=663, col_offset=23), Sub(), Call(Name('len', Load(), lineno=663, col_offset=30), [Name('data', Load(), lineno=663, col_offset=34)], [], None, None, lineno=663, col_offset=30), lineno=663, col_offset=23), lineno=663, col_offset=16)], [], lineno=657, col_offset=12)], [], lineno=656, col_offset=8)], [], lineno=652, col_offset=4), FunctionDef('read_lines', arguments([Name('self', Param(), lineno=665, col_offset=19)], None, None, []), [Expr(Str('Internal: read lines until EOF or outerboundary.', lineno=666, col_offset=8), lineno=666, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=667, col_offset=8), 'file', Store(), lineno=667, col_offset=8), Attribute(Name('self', Load(), lineno=667, col_offset=20), '__file', Store(), lineno=667, col_offset=20)], Call(Name('StringIO', Load(), lineno=667, col_offset=34), [], [], None, None, lineno=667, col_offset=34), lineno=667, col_offset=8), If(Attribute(Name('self', Load(), lineno=668, col_offset=11), 'outerboundary', Load(), lineno=668, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=669, col_offset=12), 'read_lines_to_outerboundary', Load(), lineno=669, col_offset=12), [], [], None, None, lineno=669, col_offset=12), lineno=669, col_offset=12)], [Expr(Call(Attribute(Name('self', Load(), lineno=671, col_offset=12), 'read_lines_to_eof', Load(), lineno=671, col_offset=12), [], [], None, None, lineno=671, col_offset=12), lineno=671, col_offset=12)], lineno=668, col_offset=8)], [], lineno=665, col_offset=4), FunctionDef('__write', arguments([Name('self', Param(), lineno=673, col_offset=16), Name('line', Param(), lineno=673, col_offset=22)], None, None, []), [If(Compare(Attribute(Name('self', Load(), lineno=674, col_offset=11), '__file', Load(), lineno=674, col_offset=11), [IsNot()], [Name('None', Load(), lineno=674, col_offset=30)], lineno=674, col_offset=11), [If(Compare(BinOp(Call(Attribute(Attribute(Name('self', Load(), lineno=675, col_offset=15), '__file', Load(), lineno=675, col_offset=15), 'tell', Load(), lineno=675, col_offset=15), [], [], None, None, lineno=675, col_offset=15), Add(), Call(Name('len', Load(), lineno=675, col_offset=36), [Name('line', Load(), lineno=675, col_offset=40)], [], None, None, lineno=675, col_offset=36), lineno=675, col_offset=15), [Gt()], [Num(1000, lineno=675, col_offset=48)], lineno=675, col_offset=15), [Assign([Attribute(Name('self', Load(), lineno=676, col_offset=16), 'file', Store(), lineno=676, col_offset=16)], Call(Attribute(Name('self', Load(), lineno=676, col_offset=28), 'make_file', Load(), lineno=676, col_offset=28), [Str('', lineno=676, col_offset=43)], [], None, None, lineno=676, col_offset=28), lineno=676, col_offset=16), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=677, col_offset=16), 'file', Load(), lineno=677, col_offset=16), 'write', Load(), lineno=677, col_offset=16), [Call(Attribute(Attribute(Name('self', Load(), lineno=677, col_offset=32), '__file', Load(), lineno=677, col_offset=32), 'getvalue', Load(), lineno=677, col_offset=32), [], [], None, None, lineno=677, col_offset=32)], [], None, None, lineno=677, col_offset=16), lineno=677, col_offset=16), Assign([Attribute(Name('self', Load(), lineno=678, col_offset=16), '__file', Store(), lineno=678, col_offset=16)], Name('None', Load(), lineno=678, col_offset=30), lineno=678, col_offset=16)], [], lineno=675, col_offset=12)], [], lineno=674, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=679, col_offset=8), 'file', Load(), lineno=679, col_offset=8), 'write', Load(), lineno=679, col_offset=8), [Name('line', Load(), lineno=679, col_offset=24)], [], None, None, lineno=679, col_offset=8), lineno=679, col_offset=8)], [], lineno=673, col_offset=4), FunctionDef('read_lines_to_eof', arguments([Name('self', Param(), lineno=681, col_offset=26)], None, None, []), [Expr(Str('Internal: read lines until EOF.', lineno=682, col_offset=8), lineno=682, col_offset=8), While(Num(1, lineno=683, col_offset=14), [Assign([Name('line', Store(), lineno=684, col_offset=12)], Call(Attribute(Attribute(Name('self', Load(), lineno=684, col_offset=19), 'fp', Load(), lineno=684, col_offset=19), 'readline', Load(), lineno=684, col_offset=19), [BinOp(Num(1, lineno=684, col_offset=36), LShift(), Num(16, lineno=684, col_offset=39), lineno=684, col_offset=36)], [], None, None, lineno=684, col_offset=19), lineno=684, col_offset=12), If(UnaryOp(Not(), Name('line', Load(), lineno=685, col_offset=19), lineno=685, col_offset=15), [Assign([Attribute(Name('self', Load(), lineno=686, col_offset=16), 'done', Store(), lineno=686, col_offset=16)], Num(-1, lineno=686, col_offset=29), lineno=686, col_offset=16), Break( lineno=687, col_offset=16)], [], lineno=685, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=688, col_offset=12), '__write', Load(), lineno=688, col_offset=12), [Name('line', Load(), lineno=688, col_offset=25)], [], None, None, lineno=688, col_offset=12), lineno=688, col_offset=12)], [], lineno=683, col_offset=8)], [], lineno=681, col_offset=4), FunctionDef('read_lines_to_outerboundary', arguments([Name('self', Param(), lineno=690, col_offset=36)], None, None, []), [Expr(Str('Internal: read lines until outerboundary.', lineno=691, col_offset=8), lineno=691, col_offset=8), Assign([Name('next', Store(), lineno=692, col_offset=8)], BinOp(Str('--', lineno=692, col_offset=15), Add(), Attribute(Name('self', Load(), lineno=692, col_offset=22), 'outerboundary', Load(), lineno=692, col_offset=22), lineno=692, col_offset=15), lineno=692, col_offset=8), Assign([Name('last', Store(), lineno=693, col_offset=8)], BinOp(Name('next', Load(), lineno=693, col_offset=15), Add(), Str('--', lineno=693, col_offset=22), lineno=693, col_offset=15), lineno=693, col_offset=8), Assign([Name('delim', Store(), lineno=694, col_offset=8)], Str('', lineno=694, col_offset=16), lineno=694, col_offset=8), Assign([Name('last_line_lfend', Store(), lineno=695, col_offset=8)], Name('True', Load(), lineno=695, col_offset=26), lineno=695, col_offset=8), While(Num(1, lineno=696, col_offset=14), [Assign([Name('line', Store(), lineno=697, col_offset=12)], Call(Attribute(Attribute(Name('self', Load(), lineno=697, col_offset=19), 'fp', Load(), lineno=697, col_offset=19), 'readline', Load(), lineno=697, col_offset=19), [BinOp(Num(1, lineno=697, col_offset=36), LShift(), Num(16, lineno=697, col_offset=39), lineno=697, col_offset=36)], [], None, None, lineno=697, col_offset=19), lineno=697, col_offset=12), If(UnaryOp(Not(), Name('line', Load(), lineno=698, col_offset=19), lineno=698, col_offset=15), [Assign([Attribute(Name('self', Load(), lineno=699, col_offset=16), 'done', Store(), lineno=699, col_offset=16)], Num(-1, lineno=699, col_offset=29), lineno=699, col_offset=16), Break( lineno=700, col_offset=16)], [], lineno=698, col_offset=12), If(BoolOp(And(), [Compare(Subscript(Name('line', Load(), lineno=701, col_offset=15), Slice(None, Num(2, lineno=701, col_offset=21), None), Load(), lineno=701, col_offset=15), [Eq()], [Str('--', lineno=701, col_offset=27)], lineno=701, col_offset=15), Name('last_line_lfend', Load(), lineno=701, col_offset=36)], lineno=701, col_offset=15), [Assign([Name('strippedline', Store(), lineno=702, col_offset=16)], Call(Attribute(Name('line', Load(), lineno=702, col_offset=31), 'strip', Load(), lineno=702, col_offset=31), [], [], None, None, lineno=702, col_offset=31), lineno=702, col_offset=16), If(Compare(Name('strippedline', Load(), lineno=703, col_offset=19), [Eq()], [Name('next', Load(), lineno=703, col_offset=35)], lineno=703, col_offset=19), [Break( lineno=704, col_offset=20)], [], lineno=703, col_offset=16), If(Compare(Name('strippedline', Load(), lineno=705, col_offset=19), [Eq()], [Name('last', Load(), lineno=705, col_offset=35)], lineno=705, col_offset=19), [Assign([Attribute(Name('self', Load(), lineno=706, col_offset=20), 'done', Store(), lineno=706, col_offset=20)], Num(1, lineno=706, col_offset=32), lineno=706, col_offset=20), Break( lineno=707, col_offset=20)], [], lineno=705, col_offset=16)], [], lineno=701, col_offset=12), Assign([Name('odelim', Store(), lineno=708, col_offset=12)], Name('delim', Load(), lineno=708, col_offset=21), lineno=708, col_offset=12), If(Compare(Subscript(Name('line', Load(), lineno=709, col_offset=15), Slice(Num(-2, lineno=709, col_offset=21), None, None), Load(), lineno=709, col_offset=15), [Eq()], [Str('\r\n', lineno=709, col_offset=28)], lineno=709, col_offset=15), [Assign([Name('delim', Store(), lineno=710, col_offset=16)], Str('\r\n', lineno=710, col_offset=24), lineno=710, col_offset=16), Assign([Name('line', Store(), lineno=711, col_offset=16)], Subscript(Name('line', Load(), lineno=711, col_offset=23), Slice(None, Num(-2, lineno=711, col_offset=30), None), Load(), lineno=711, col_offset=23), lineno=711, col_offset=16), Assign([Name('last_line_lfend', Store(), lineno=712, col_offset=16)], Name('True', Load(), lineno=712, col_offset=34), lineno=712, col_offset=16)], [If(Compare(Subscript(Name('line', Load(), lineno=713, col_offset=17), Index(Num(-1, lineno=713, col_offset=23)), Load(), lineno=713, col_offset=17), [Eq()], [Str('\n', lineno=713, col_offset=29)], lineno=713, col_offset=17), [Assign([Name('delim', Store(), lineno=714, col_offset=16)], Str('\n', lineno=714, col_offset=24), lineno=714, col_offset=16), Assign([Name('line', Store(), lineno=715, col_offset=16)], Subscript(Name('line', Load(), lineno=715, col_offset=23), Slice(None, Num(-1, lineno=715, col_offset=30), None), Load(), lineno=715, col_offset=23), lineno=715, col_offset=16), Assign([Name('last_line_lfend', Store(), lineno=716, col_offset=16)], Name('True', Load(), lineno=716, col_offset=34), lineno=716, col_offset=16)], [Assign([Name('delim', Store(), lineno=718, col_offset=16)], Str('', lineno=718, col_offset=24), lineno=718, col_offset=16), Assign([Name('last_line_lfend', Store(), lineno=719, col_offset=16)], Name('False', Load(), lineno=719, col_offset=34), lineno=719, col_offset=16)], lineno=713, col_offset=17)], lineno=709, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=720, col_offset=12), '__write', Load(), lineno=720, col_offset=12), [BinOp(Name('odelim', Load(), lineno=720, col_offset=25), Add(), Name('line', Load(), lineno=720, col_offset=34), lineno=720, col_offset=25)], [], None, None, lineno=720, col_offset=12), lineno=720, col_offset=12)], [], lineno=696, col_offset=8)], [], lineno=690, col_offset=4), FunctionDef('skip_lines', arguments([Name('self', Param(), lineno=722, col_offset=19)], None, None, []), [Expr(Str('Internal: skip lines until outer boundary if defined.', lineno=723, col_offset=8), lineno=723, col_offset=8), If(BoolOp(Or(), [UnaryOp(Not(), Attribute(Name('self', Load(), lineno=724, col_offset=15), 'outerboundary', Load(), lineno=724, col_offset=15), lineno=724, col_offset=11), Attribute(Name('self', Load(), lineno=724, col_offset=37), 'done', Load(), lineno=724, col_offset=37)], lineno=724, col_offset=11), [Return(None, lineno=725, col_offset=12)], [], lineno=724, col_offset=8), Assign([Name('next', Store(), lineno=726, col_offset=8)], BinOp(Str('--', lineno=726, col_offset=15), Add(), Attribute(Name('self', Load(), lineno=726, col_offset=22), 'outerboundary', Load(), lineno=726, col_offset=22), lineno=726, col_offset=15), lineno=726, col_offset=8), Assign([Name('last', Store(), lineno=727, col_offset=8)], BinOp(Name('next', Load(), lineno=727, col_offset=15), Add(), Str('--', lineno=727, col_offset=22), lineno=727, col_offset=15), lineno=727, col_offset=8), Assign([Name('last_line_lfend', Store(), lineno=728, col_offset=8)], Name('True', Load(), lineno=728, col_offset=26), lineno=728, col_offset=8), While(Num(1, lineno=729, col_offset=14), [Assign([Name('line', Store(), lineno=730, col_offset=12)], Call(Attribute(Attribute(Name('self', Load(), lineno=730, col_offset=19), 'fp', Load(), lineno=730, col_offset=19), 'readline', Load(), lineno=730, col_offset=19), [BinOp(Num(1, lineno=730, col_offset=36), LShift(), Num(16, lineno=730, col_offset=39), lineno=730, col_offset=36)], [], None, None, lineno=730, col_offset=19), lineno=730, col_offset=12), If(UnaryOp(Not(), Name('line', Load(), lineno=731, col_offset=19), lineno=731, col_offset=15), [Assign([Attribute(Name('self', Load(), lineno=732, col_offset=16), 'done', Store(), lineno=732, col_offset=16)], Num(-1, lineno=732, col_offset=29), lineno=732, col_offset=16), Break( lineno=733, col_offset=16)], [], lineno=731, col_offset=12), If(BoolOp(And(), [Compare(Subscript(Name('line', Load(), lineno=734, col_offset=15), Slice(None, Num(2, lineno=734, col_offset=21), None), Load(), lineno=734, col_offset=15), [Eq()], [Str('--', lineno=734, col_offset=27)], lineno=734, col_offset=15), Name('last_line_lfend', Load(), lineno=734, col_offset=36)], lineno=734, col_offset=15), [Assign([Name('strippedline', Store(), lineno=735, col_offset=16)], Call(Attribute(Name('line', Load(), lineno=735, col_offset=31), 'strip', Load(), lineno=735, col_offset=31), [], [], None, None, lineno=735, col_offset=31), lineno=735, col_offset=16), If(Compare(Name('strippedline', Load(), lineno=736, col_offset=19), [Eq()], [Name('next', Load(), lineno=736, col_offset=35)], lineno=736, col_offset=19), [Break( lineno=737, col_offset=20)], [], lineno=736, col_offset=16), If(Compare(Name('strippedline', Load(), lineno=738, col_offset=19), [Eq()], [Name('last', Load(), lineno=738, col_offset=35)], lineno=738, col_offset=19), [Assign([Attribute(Name('self', Load(), lineno=739, col_offset=20), 'done', Store(), lineno=739, col_offset=20)], Num(1, lineno=739, col_offset=32), lineno=739, col_offset=20), Break( lineno=740, col_offset=20)], [], lineno=738, col_offset=16)], [], lineno=734, col_offset=12), Assign([Name('last_line_lfend', Store(), lineno=741, col_offset=12)], Call(Attribute(Name('line', Load(), lineno=741, col_offset=30), 'endswith', Load(), lineno=741, col_offset=30), [Str('\n', lineno=741, col_offset=44)], [], None, None, lineno=741, col_offset=30), lineno=741, col_offset=12)], [], lineno=729, col_offset=8)], [], lineno=722, col_offset=4), FunctionDef('make_file', arguments([Name('self', Param(), lineno=743, col_offset=18), Name('binary', Param(), lineno=743, col_offset=24)], None, None, [Name('None', Load(), lineno=743, col_offset=31)]), [Expr(Str("Overridable: return a readable & writable file.\n\n        The file will be used as follows:\n        - data is written to it\n        - seek(0)\n        - data is read from it\n\n        The 'binary' argument is unused -- the file is always opened\n        in binary mode.\n\n        This version opens a temporary file for reading and writing,\n        and immediately deletes (unlinks) it.  The trick (on Unix!) is\n        that the file can still be used, but it can't be opened by\n        another process, and it will automatically be deleted when it\n        is closed or when the current process terminates.\n\n        If you want a more permanent file, you derive a class which\n        overrides this method.  If you want a visible temporary file\n        that is nevertheless automatically deleted when the script\n        terminates, try defining a __del__ method in a derived class\n        which unlinks the temporary files you have created.\n\n        ", lineno=766, col_offset=-1), lineno=766, col_offset=-1), Import([alias('tempfile', None)], lineno=767, col_offset=8), Return(Call(Attribute(Name('tempfile', Load(), lineno=768, col_offset=15), 'TemporaryFile', Load(), lineno=768, col_offset=15), [Str('w+b', lineno=768, col_offset=38)], [], None, None, lineno=768, col_offset=15), lineno=768, col_offset=8)], [], lineno=743, col_offset=4)], [], lineno=353, col_offset=0), ClassDef('FormContentDict', [Attribute(Name('UserDict', Load(), lineno=775, col_offset=22), 'UserDict', Load(), lineno=775, col_offset=22)], [Expr(Str('Form content as dictionary with a list of values per field.\n\n    form = FormContentDict()\n\n    form[key] -> [value, value, ...]\n    key in form -> Boolean\n    form.keys() -> [key, key, ...]\n    form.values() -> [[val, val, ...], [val, val, ...], ...]\n    form.items() ->  [(key, [val, val, ...]), (key, [val, val, ...]), ...]\n    form.dict == {key: [val, val, ...], ...}\n\n    ', lineno=787, col_offset=-1), lineno=787, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=788, col_offset=17), Name('environ', Param(), lineno=788, col_offset=23), Name('keep_blank_values', Param(), lineno=788, col_offset=43), Name('strict_parsing', Param(), lineno=788, col_offset=64)], None, None, [Attribute(Name('os', Load(), lineno=788, col_offset=31), 'environ', Load(), lineno=788, col_offset=31), Num(0, lineno=788, col_offset=61), Num(0, lineno=788, col_offset=79)]), [Assign([Attribute(Name('self', Load(), lineno=789, col_offset=8), 'dict', Store(), lineno=789, col_offset=8), Attribute(Name('self', Load(), lineno=789, col_offset=20), 'data', Store(), lineno=789, col_offset=20)], Call(Name('parse', Load(), lineno=789, col_offset=32), [], [keyword('environ', Name('environ', Load(), lineno=789, col_offset=46)), keyword('keep_blank_values', Name('keep_blank_values', Load(), lineno=790, col_offset=56)), keyword('strict_parsing', Name('strict_parsing', Load(), lineno=791, col_offset=53))], None, None, lineno=789, col_offset=32), lineno=789, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=792, col_offset=8), 'query_string', Store(), lineno=792, col_offset=8)], Subscript(Name('environ', Load(), lineno=792, col_offset=28), Index(Str('QUERY_STRING', lineno=792, col_offset=36)), Load(), lineno=792, col_offset=28), lineno=792, col_offset=8)], [], lineno=788, col_offset=4)], [], lineno=775, col_offset=0), ClassDef('SvFormContentDict', [Name('FormContentDict', Load(), lineno=795, col_offset=24)], [Expr(Str('Form content as dictionary expecting a single value per field.\n\n    If you only expect a single value for each field, then form[key]\n    will return that single value.  It will raise an IndexError if\n    that expectation is not true.  If you expect a field to have\n    possible multiple values, than you can use form.getlist(key) to\n    get all of the values.  values() and items() are a compromise:\n    they return single strings where there is a single value, and\n    lists of strings otherwise.\n\n    ', lineno=806, col_offset=-1), lineno=806, col_offset=-1), FunctionDef('__getitem__', arguments([Name('self', Param(), lineno=807, col_offset=20), Name('key', Param(), lineno=807, col_offset=26)], None, None, []), [If(Compare(Call(Name('len', Load(), lineno=808, col_offset=11), [Subscript(Attribute(Name('self', Load(), lineno=808, col_offset=15), 'dict', Load(), lineno=808, col_offset=15), Index(Name('key', Load(), lineno=808, col_offset=25)), Load(), lineno=808, col_offset=15)], [], None, None, lineno=808, col_offset=11), [Gt()], [Num(1, lineno=808, col_offset=33)], lineno=808, col_offset=11), [Raise(Name('IndexError', Load(), lineno=809, col_offset=18), Str('expecting a single value', lineno=809, col_offset=30), None, lineno=809, col_offset=12)], [], lineno=808, col_offset=8), Return(Subscript(Subscript(Attribute(Name('self', Load(), lineno=810, col_offset=15), 'dict', Load(), lineno=810, col_offset=15), Index(Name('key', Load(), lineno=810, col_offset=25)), Load(), lineno=810, col_offset=15), Index(Num(0, lineno=810, col_offset=30)), Load(), lineno=810, col_offset=15), lineno=810, col_offset=8)], [], lineno=807, col_offset=4), FunctionDef('getlist', arguments([Name('self', Param(), lineno=811, col_offset=16), Name('key', Param(), lineno=811, col_offset=22)], None, None, []), [Return(Subscript(Attribute(Name('self', Load(), lineno=812, col_offset=15), 'dict', Load(), lineno=812, col_offset=15), Index(Name('key', Load(), lineno=812, col_offset=25)), Load(), lineno=812, col_offset=15), lineno=812, col_offset=8)], [], lineno=811, col_offset=4), FunctionDef('values', arguments([Name('self', Param(), lineno=813, col_offset=15)], None, None, []), [Assign([Name('result', Store(), lineno=814, col_offset=8)], List([], Load(), lineno=814, col_offset=17), lineno=814, col_offset=8), For(Name('value', Store(), lineno=815, col_offset=12), Call(Attribute(Attribute(Name('self', Load(), lineno=815, col_offset=21), 'dict', Load(), lineno=815, col_offset=21), 'values', Load(), lineno=815, col_offset=21), [], [], None, None, lineno=815, col_offset=21), [If(Compare(Call(Name('len', Load(), lineno=816, col_offset=15), [Name('value', Load(), lineno=816, col_offset=19)], [], None, None, lineno=816, col_offset=15), [Eq()], [Num(1, lineno=816, col_offset=29)], lineno=816, col_offset=15), [Expr(Call(Attribute(Name('result', Load(), lineno=817, col_offset=16), 'append', Load(), lineno=817, col_offset=16), [Subscript(Name('value', Load(), lineno=817, col_offset=30), Index(Num(0, lineno=817, col_offset=36)), Load(), lineno=817, col_offset=30)], [], None, None, lineno=817, col_offset=16), lineno=817, col_offset=16)], [Expr(Call(Attribute(Name('result', Load(), lineno=818, col_offset=18), 'append', Load(), lineno=818, col_offset=18), [Name('value', Load(), lineno=818, col_offset=32)], [], None, None, lineno=818, col_offset=18), lineno=818, col_offset=18)], lineno=816, col_offset=12)], [], lineno=815, col_offset=8), Return(Name('result', Load(), lineno=819, col_offset=15), lineno=819, col_offset=8)], [], lineno=813, col_offset=4), FunctionDef('items', arguments([Name('self', Param(), lineno=820, col_offset=14)], None, None, []), [Assign([Name('result', Store(), lineno=821, col_offset=8)], List([], Load(), lineno=821, col_offset=17), lineno=821, col_offset=8), For(Tuple([Name('key', Store(), lineno=822, col_offset=12), Name('value', Store(), lineno=822, col_offset=17)], Store(), lineno=822, col_offset=12), Call(Attribute(Attribute(Name('self', Load(), lineno=822, col_offset=26), 'dict', Load(), lineno=822, col_offset=26), 'items', Load(), lineno=822, col_offset=26), [], [], None, None, lineno=822, col_offset=26), [If(Compare(Call(Name('len', Load(), lineno=823, col_offset=15), [Name('value', Load(), lineno=823, col_offset=19)], [], None, None, lineno=823, col_offset=15), [Eq()], [Num(1, lineno=823, col_offset=29)], lineno=823, col_offset=15), [Expr(Call(Attribute(Name('result', Load(), lineno=824, col_offset=16), 'append', Load(), lineno=824, col_offset=16), [Tuple([Name('key', Load(), lineno=824, col_offset=31), Subscript(Name('value', Load(), lineno=824, col_offset=36), Index(Num(0, lineno=824, col_offset=42)), Load(), lineno=824, col_offset=36)], Load(), lineno=824, col_offset=31)], [], None, None, lineno=824, col_offset=16), lineno=824, col_offset=16)], [Expr(Call(Attribute(Name('result', Load(), lineno=825, col_offset=18), 'append', Load(), lineno=825, col_offset=18), [Tuple([Name('key', Load(), lineno=825, col_offset=33), Name('value', Load(), lineno=825, col_offset=38)], Load(), lineno=825, col_offset=33)], [], None, None, lineno=825, col_offset=18), lineno=825, col_offset=18)], lineno=823, col_offset=12)], [], lineno=822, col_offset=8), Return(Name('result', Load(), lineno=826, col_offset=15), lineno=826, col_offset=8)], [], lineno=820, col_offset=4)], [], lineno=795, col_offset=0), ClassDef('InterpFormContentDict', [Name('SvFormContentDict', Load(), lineno=829, col_offset=28)], [Expr(Str('This class is present for backwards compatibility only.', lineno=830, col_offset=4), lineno=830, col_offset=4), FunctionDef('__getitem__', arguments([Name('self', Param(), lineno=831, col_offset=20), Name('key', Param(), lineno=831, col_offset=26)], None, None, []), [Assign([Name('v', Store(), lineno=832, col_offset=8)], Call(Attribute(Name('SvFormContentDict', Load(), lineno=832, col_offset=12), '__getitem__', Load(), lineno=832, col_offset=12), [Name('self', Load(), lineno=832, col_offset=42), Name('key', Load(), lineno=832, col_offset=48)], [], None, None, lineno=832, col_offset=12), lineno=832, col_offset=8), If(Compare(Subscript(Name('v', Load(), lineno=833, col_offset=11), Index(Num(0, lineno=833, col_offset=13)), Load(), lineno=833, col_offset=11), [In()], [Str('0123456789+-.', lineno=833, col_offset=19)], lineno=833, col_offset=11), [TryExcept([Return(Call(Name('int', Load(), lineno=834, col_offset=24), [Name('v', Load(), lineno=834, col_offset=28)], [], None, None, lineno=834, col_offset=24), lineno=834, col_offset=17)], [ExceptHandler(Name('ValueError', Load(), lineno=835, col_offset=19), None, [TryExcept([Return(Call(Name('float', Load(), lineno=836, col_offset=28), [Name('v', Load(), lineno=836, col_offset=34)], [], None, None, lineno=836, col_offset=28), lineno=836, col_offset=21)], [ExceptHandler(Name('ValueError', Load(), lineno=837, col_offset=23), None, [Pass( lineno=837, col_offset=35)], lineno=837, col_offset=16)], [], lineno=836, col_offset=16)], lineno=835, col_offset=12)], [], lineno=834, col_offset=12)], [], lineno=833, col_offset=8), Return(Call(Attribute(Name('v', Load(), lineno=838, col_offset=15), 'strip', Load(), lineno=838, col_offset=15), [], [], None, None, lineno=838, col_offset=15), lineno=838, col_offset=8)], [], lineno=831, col_offset=4), FunctionDef('values', arguments([Name('self', Param(), lineno=839, col_offset=15)], None, None, []), [Assign([Name('result', Store(), lineno=840, col_offset=8)], List([], Load(), lineno=840, col_offset=17), lineno=840, col_offset=8), For(Name('key', Store(), lineno=841, col_offset=12), Call(Attribute(Name('self', Load(), lineno=841, col_offset=19), 'keys', Load(), lineno=841, col_offset=19), [], [], None, None, lineno=841, col_offset=19), [TryExcept([Expr(Call(Attribute(Name('result', Load(), lineno=843, col_offset=16), 'append', Load(), lineno=843, col_offset=16), [Subscript(Name('self', Load(), lineno=843, col_offset=30), Index(Name('key', Load(), lineno=843, col_offset=35)), Load(), lineno=843, col_offset=30)], [], None, None, lineno=843, col_offset=16), lineno=843, col_offset=16)], [ExceptHandler(Name('IndexError', Load(), lineno=844, col_offset=19), None, [Expr(Call(Attribute(Name('result', Load(), lineno=845, col_offset=16), 'append', Load(), lineno=845, col_offset=16), [Subscript(Attribute(Name('self', Load(), lineno=845, col_offset=30), 'dict', Load(), lineno=845, col_offset=30), Index(Name('key', Load(), lineno=845, col_offset=40)), Load(), lineno=845, col_offset=30)], [], None, None, lineno=845, col_offset=16), lineno=845, col_offset=16)], lineno=844, col_offset=12)], [], lineno=842, col_offset=12)], [], lineno=841, col_offset=8), Return(Name('result', Load(), lineno=846, col_offset=15), lineno=846, col_offset=8)], [], lineno=839, col_offset=4), FunctionDef('items', arguments([Name('self', Param(), lineno=847, col_offset=14)], None, None, []), [Assign([Name('result', Store(), lineno=848, col_offset=8)], List([], Load(), lineno=848, col_offset=17), lineno=848, col_offset=8), For(Name('key', Store(), lineno=849, col_offset=12), Call(Attribute(Name('self', Load(), lineno=849, col_offset=19), 'keys', Load(), lineno=849, col_offset=19), [], [], None, None, lineno=849, col_offset=19), [TryExcept([Expr(Call(Attribute(Name('result', Load(), lineno=851, col_offset=16), 'append', Load(), lineno=851, col_offset=16), [Tuple([Name('key', Load(), lineno=851, col_offset=31), Subscript(Name('self', Load(), lineno=851, col_offset=36), Index(Name('key', Load(), lineno=851, col_offset=41)), Load(), lineno=851, col_offset=36)], Load(), lineno=851, col_offset=31)], [], None, None, lineno=851, col_offset=16), lineno=851, col_offset=16)], [ExceptHandler(Name('IndexError', Load(), lineno=852, col_offset=19), None, [Expr(Call(Attribute(Name('result', Load(), lineno=853, col_offset=16), 'append', Load(), lineno=853, col_offset=16), [Tuple([Name('key', Load(), lineno=853, col_offset=31), Subscript(Attribute(Name('self', Load(), lineno=853, col_offset=36), 'dict', Load(), lineno=853, col_offset=36), Index(Name('key', Load(), lineno=853, col_offset=46)), Load(), lineno=853, col_offset=36)], Load(), lineno=853, col_offset=31)], [], None, None, lineno=853, col_offset=16), lineno=853, col_offset=16)], lineno=852, col_offset=12)], [], lineno=850, col_offset=12)], [], lineno=849, col_offset=8), Return(Name('result', Load(), lineno=854, col_offset=15), lineno=854, col_offset=8)], [], lineno=847, col_offset=4)], [], lineno=829, col_offset=0), ClassDef('FormContent', [Name('FormContentDict', Load(), lineno=857, col_offset=18)], [Expr(Str('This class is present for backwards compatibility only.', lineno=858, col_offset=4), lineno=858, col_offset=4), FunctionDef('values', arguments([Name('self', Param(), lineno=859, col_offset=15), Name('key', Param(), lineno=859, col_offset=21)], None, None, []), [If(Compare(Name('key', Load(), lineno=860, col_offset=11), [In()], [Attribute(Name('self', Load(), lineno=860, col_offset=18), 'dict', Load(), lineno=860, col_offset=18)], lineno=860, col_offset=11), [Return(Subscript(Attribute(Name('self', Load(), lineno=860, col_offset=36), 'dict', Load(), lineno=860, col_offset=36), Index(Name('key', Load(), lineno=860, col_offset=46)), Load(), lineno=860, col_offset=36), lineno=860, col_offset=29)], [Return(Name('None', Load(), lineno=861, col_offset=21), lineno=861, col_offset=14)], lineno=860, col_offset=8)], [], lineno=859, col_offset=4), FunctionDef('indexed_value', arguments([Name('self', Param(), lineno=862, col_offset=22), Name('key', Param(), lineno=862, col_offset=28), Name('location', Param(), lineno=862, col_offset=33)], None, None, []), [If(Compare(Name('key', Load(), lineno=863, col_offset=11), [In()], [Attribute(Name('self', Load(), lineno=863, col_offset=18), 'dict', Load(), lineno=863, col_offset=18)], lineno=863, col_offset=11), [If(Compare(Call(Name('len', Load(), lineno=864, col_offset=15), [Subscript(Attribute(Name('self', Load(), lineno=864, col_offset=19), 'dict', Load(), lineno=864, col_offset=19), Index(Name('key', Load(), lineno=864, col_offset=29)), Load(), lineno=864, col_offset=19)], [], None, None, lineno=864, col_offset=15), [Gt()], [Name('location', Load(), lineno=864, col_offset=37)], lineno=864, col_offset=15), [Return(Subscript(Subscript(Attribute(Name('self', Load(), lineno=865, col_offset=23), 'dict', Load(), lineno=865, col_offset=23), Index(Name('key', Load(), lineno=865, col_offset=33)), Load(), lineno=865, col_offset=23), Index(Name('location', Load(), lineno=865, col_offset=38)), Load(), lineno=865, col_offset=23), lineno=865, col_offset=16)], [Return(Name('None', Load(), lineno=866, col_offset=25), lineno=866, col_offset=18)], lineno=864, col_offset=12)], [Return(Name('None', Load(), lineno=867, col_offset=21), lineno=867, col_offset=14)], lineno=863, col_offset=8)], [], lineno=862, col_offset=4), FunctionDef('value', arguments([Name('self', Param(), lineno=868, col_offset=14), Name('key', Param(), lineno=868, col_offset=20)], None, None, []), [If(Compare(Name('key', Load(), lineno=869, col_offset=11), [In()], [Attribute(Name('self', Load(), lineno=869, col_offset=18), 'dict', Load(), lineno=869, col_offset=18)], lineno=869, col_offset=11), [Return(Subscript(Subscript(Attribute(Name('self', Load(), lineno=869, col_offset=36), 'dict', Load(), lineno=869, col_offset=36), Index(Name('key', Load(), lineno=869, col_offset=46)), Load(), lineno=869, col_offset=36), Index(Num(0, lineno=869, col_offset=51)), Load(), lineno=869, col_offset=36), lineno=869, col_offset=29)], [Return(Name('None', Load(), lineno=870, col_offset=21), lineno=870, col_offset=14)], lineno=869, col_offset=8)], [], lineno=868, col_offset=4), FunctionDef('length', arguments([Name('self', Param(), lineno=871, col_offset=15), Name('key', Param(), lineno=871, col_offset=21)], None, None, []), [Return(Call(Name('len', Load(), lineno=872, col_offset=15), [Subscript(Attribute(Name('self', Load(), lineno=872, col_offset=19), 'dict', Load(), lineno=872, col_offset=19), Index(Name('key', Load(), lineno=872, col_offset=29)), Load(), lineno=872, col_offset=19)], [], None, None, lineno=872, col_offset=15), lineno=872, col_offset=8)], [], lineno=871, col_offset=4), FunctionDef('stripped', arguments([Name('self', Param(), lineno=873, col_offset=17), Name('key', Param(), lineno=873, col_offset=23)], None, None, []), [If(Compare(Name('key', Load(), lineno=874, col_offset=11), [In()], [Attribute(Name('self', Load(), lineno=874, col_offset=18), 'dict', Load(), lineno=874, col_offset=18)], lineno=874, col_offset=11), [Return(Call(Attribute(Subscript(Subscript(Attribute(Name('self', Load(), lineno=874, col_offset=36), 'dict', Load(), lineno=874, col_offset=36), Index(Name('key', Load(), lineno=874, col_offset=46)), Load(), lineno=874, col_offset=36), Index(Num(0, lineno=874, col_offset=51)), Load(), lineno=874, col_offset=36), 'strip', Load(), lineno=874, col_offset=36), [], [], None, None, lineno=874, col_offset=36), lineno=874, col_offset=29)], [Return(Name('None', Load(), lineno=875, col_offset=21), lineno=875, col_offset=14)], lineno=874, col_offset=8)], [], lineno=873, col_offset=4), FunctionDef('pars', arguments([Name('self', Param(), lineno=876, col_offset=13)], None, None, []), [Return(Attribute(Name('self', Load(), lineno=877, col_offset=15), 'dict', Load(), lineno=877, col_offset=15), lineno=877, col_offset=8)], [], lineno=876, col_offset=4)], [], lineno=857, col_offset=0), FunctionDef('test', arguments([Name('environ', Param(), lineno=883, col_offset=9)], None, None, [Attribute(Name('os', Load(), lineno=883, col_offset=17), 'environ', Load(), lineno=883, col_offset=17)]), [Expr(Str('Robust test CGI script, usable as main program.\n\n    Write minimal HTTP headers and dump all information provided to\n    the script in HTML form.\n\n    ', lineno=889, col_offset=-1), lineno=889, col_offset=-1), Print(None, [Str('Content-type: text/html', lineno=890, col_offset=10)], True, lineno=890, col_offset=4), Print(None, [], True, lineno=891, col_offset=4), Assign([Attribute(Name('sys', Load(), lineno=892, col_offset=4), 'stderr', Store(), lineno=892, col_offset=4)], Attribute(Name('sys', Load(), lineno=892, col_offset=17), 'stdout', Load(), lineno=892, col_offset=17), lineno=892, col_offset=4), TryExcept([Assign([Name('form', Store(), lineno=894, col_offset=8)], Call(Name('FieldStorage', Load(), lineno=894, col_offset=15), [], [], None, None, lineno=894, col_offset=15), lineno=894, col_offset=8), Expr(Call(Name('print_directory', Load(), lineno=895, col_offset=8), [], [], None, None, lineno=895, col_offset=8), lineno=895, col_offset=8), Expr(Call(Name('print_arguments', Load(), lineno=896, col_offset=8), [], [], None, None, lineno=896, col_offset=8), lineno=896, col_offset=8), Expr(Call(Name('print_form', Load(), lineno=897, col_offset=8), [Name('form', Load(), lineno=897, col_offset=19)], [], None, None, lineno=897, col_offset=8), lineno=897, col_offset=8), Expr(Call(Name('print_environ', Load(), lineno=898, col_offset=8), [Name('environ', Load(), lineno=898, col_offset=22)], [], None, None, lineno=898, col_offset=8), lineno=898, col_offset=8), Expr(Call(Name('print_environ_usage', Load(), lineno=899, col_offset=8), [], [], None, None, lineno=899, col_offset=8), lineno=899, col_offset=8), FunctionDef('f', arguments([], None, None, []), [Exec(Str('testing print_exception() -- <I>italics?</I>', lineno=901, col_offset=17), None, None, lineno=901, col_offset=12)], [], lineno=900, col_offset=8), FunctionDef('g', arguments([Name('f', Param(), lineno=902, col_offset=14)], None, None, [Name('f', Load(), lineno=902, col_offset=16)]), [Expr(Call(Name('f', Load(), lineno=903, col_offset=12), [], [], None, None, lineno=903, col_offset=12), lineno=903, col_offset=12)], [], lineno=902, col_offset=8), Print(None, [Str('<H3>What follows is a test, not an actual exception:</H3>', lineno=904, col_offset=14)], True, lineno=904, col_offset=8), Expr(Call(Name('g', Load(), lineno=905, col_offset=8), [], [], None, None, lineno=905, col_offset=8), lineno=905, col_offset=8)], [ExceptHandler(None, None, [Expr(Call(Name('print_exception', Load(), lineno=907, col_offset=8), [], [], None, None, lineno=907, col_offset=8), lineno=907, col_offset=8)], lineno=906, col_offset=4)], [], lineno=893, col_offset=4), Print(None, [Str('<H1>Second try with a small maxlen...</H1>', lineno=909, col_offset=10)], True, lineno=909, col_offset=4), Global(['maxlen'], lineno=911, col_offset=4), Assign([Name('maxlen', Store(), lineno=912, col_offset=4)], Num(50, lineno=912, col_offset=13), lineno=912, col_offset=4), TryExcept([Assign([Name('form', Store(), lineno=914, col_offset=8)], Call(Name('FieldStorage', Load(), lineno=914, col_offset=15), [], [], None, None, lineno=914, col_offset=15), lineno=914, col_offset=8), Expr(Call(Name('print_directory', Load(), lineno=915, col_offset=8), [], [], None, None, lineno=915, col_offset=8), lineno=915, col_offset=8), Expr(Call(Name('print_arguments', Load(), lineno=916, col_offset=8), [], [], None, None, lineno=916, col_offset=8), lineno=916, col_offset=8), Expr(Call(Name('print_form', Load(), lineno=917, col_offset=8), [Name('form', Load(), lineno=917, col_offset=19)], [], None, None, lineno=917, col_offset=8), lineno=917, col_offset=8), Expr(Call(Name('print_environ', Load(), lineno=918, col_offset=8), [Name('environ', Load(), lineno=918, col_offset=22)], [], None, None, lineno=918, col_offset=8), lineno=918, col_offset=8)], [ExceptHandler(None, None, [Expr(Call(Name('print_exception', Load(), lineno=920, col_offset=8), [], [], None, None, lineno=920, col_offset=8), lineno=920, col_offset=8)], lineno=919, col_offset=4)], [], lineno=913, col_offset=4)], [], lineno=883, col_offset=0), FunctionDef('print_exception', arguments([Name('type', Param(), lineno=922, col_offset=20), Name('value', Param(), lineno=922, col_offset=31), Name('tb', Param(), lineno=922, col_offset=43), Name('limit', Param(), lineno=922, col_offset=52)], None, None, [Name('None', Load(), lineno=922, col_offset=25), Name('None', Load(), lineno=922, col_offset=37), Name('None', Load(), lineno=922, col_offset=46), Name('None', Load(), lineno=922, col_offset=58)]), [If(Compare(Name('type', Load(), lineno=923, col_offset=7), [Is()], [Name('None', Load(), lineno=923, col_offset=15)], lineno=923, col_offset=7), [Assign([Tuple([Name('type', Store(), lineno=924, col_offset=8), Name('value', Store(), lineno=924, col_offset=14), Name('tb', Store(), lineno=924, col_offset=21)], Store(), lineno=924, col_offset=8)], Call(Attribute(Name('sys', Load(), lineno=924, col_offset=26), 'exc_info', Load(), lineno=924, col_offset=26), [], [], None, None, lineno=924, col_offset=26), lineno=924, col_offset=8)], [], lineno=923, col_offset=4), Import([alias('traceback', None)], lineno=925, col_offset=4), Print(None, [], True, lineno=926, col_offset=4), Print(None, [Str('<H3>Traceback (most recent call last):</H3>', lineno=927, col_offset=10)], True, lineno=927, col_offset=4), Assign([Name('list', Store(), lineno=928, col_offset=4)], BinOp(Call(Attribute(Name('traceback', Load(), lineno=928, col_offset=11), 'format_tb', Load(), lineno=928, col_offset=11), [Name('tb', Load(), lineno=928, col_offset=31), Name('limit', Load(), lineno=928, col_offset=35)], [], None, None, lineno=928, col_offset=11), Add(), Call(Attribute(Name('traceback', Load(), lineno=929, col_offset=11), 'format_exception_only', Load(), lineno=929, col_offset=11), [Name('type', Load(), lineno=929, col_offset=43), Name('value', Load(), lineno=929, col_offset=49)], [], None, None, lineno=929, col_offset=11), lineno=928, col_offset=11), lineno=928, col_offset=4), Print(None, [BinOp(Str('<PRE>%s<B>%s</B></PRE>', lineno=930, col_offset=10), Mod(), Tuple([Call(Name('escape', Load(), lineno=931, col_offset=8), [Call(Attribute(Str('', lineno=931, col_offset=15), 'join', Load(), lineno=931, col_offset=15), [Subscript(Name('list', Load(), lineno=931, col_offset=23), Slice(None, Num(-1, lineno=931, col_offset=30), None), Load(), lineno=931, col_offset=23)], [], None, None, lineno=931, col_offset=15)], [], None, None, lineno=931, col_offset=8), Call(Name('escape', Load(), lineno=932, col_offset=8), [Subscript(Name('list', Load(), lineno=932, col_offset=15), Index(Num(-1, lineno=932, col_offset=21)), Load(), lineno=932, col_offset=15)], [], None, None, lineno=932, col_offset=8)], Load(), lineno=931, col_offset=8), lineno=930, col_offset=10)], True, lineno=930, col_offset=4), Delete([Name('tb', Del(), lineno=934, col_offset=8)], lineno=934, col_offset=4)], [], lineno=922, col_offset=0), FunctionDef('print_environ', arguments([Name('environ', Param(), lineno=936, col_offset=18)], None, None, [Attribute(Name('os', Load(), lineno=936, col_offset=26), 'environ', Load(), lineno=936, col_offset=26)]), [Expr(Str('Dump the shell environment as HTML.', lineno=937, col_offset=4), lineno=937, col_offset=4), Assign([Name('keys', Store(), lineno=938, col_offset=4)], Call(Attribute(Name('environ', Load(), lineno=938, col_offset=11), 'keys', Load(), lineno=938, col_offset=11), [], [], None, None, lineno=938, col_offset=11), lineno=938, col_offset=4), Expr(Call(Attribute(Name('keys', Load(), lineno=939, col_offset=4), 'sort', Load(), lineno=939, col_offset=4), [], [], None, None, lineno=939, col_offset=4), lineno=939, col_offset=4), Print(None, [], True, lineno=940, col_offset=4), Print(None, [Str('<H3>Shell Environment:</H3>', lineno=941, col_offset=10)], True, lineno=941, col_offset=4), Print(None, [Str('<DL>', lineno=942, col_offset=10)], True, lineno=942, col_offset=4), For(Name('key', Store(), lineno=943, col_offset=8), Name('keys', Load(), lineno=943, col_offset=15), [Print(None, [Str('<DT>', lineno=944, col_offset=14), Call(Name('escape', Load(), lineno=944, col_offset=22), [Name('key', Load(), lineno=944, col_offset=29)], [], None, None, lineno=944, col_offset=22), Str('<DD>', lineno=944, col_offset=35), Call(Name('escape', Load(), lineno=944, col_offset=43), [Subscript(Name('environ', Load(), lineno=944, col_offset=50), Index(Name('key', Load(), lineno=944, col_offset=58)), Load(), lineno=944, col_offset=50)], [], None, None, lineno=944, col_offset=43)], True, lineno=944, col_offset=8)], [], lineno=943, col_offset=4), Print(None, [Str('</DL>', lineno=945, col_offset=10)], True, lineno=945, col_offset=4), Print(None, [], True, lineno=946, col_offset=4)], [], lineno=936, col_offset=0), FunctionDef('print_form', arguments([Name('form', Param(), lineno=948, col_offset=15)], None, None, []), [Expr(Str('Dump the contents of a form as HTML.', lineno=949, col_offset=4), lineno=949, col_offset=4), Assign([Name('keys', Store(), lineno=950, col_offset=4)], Call(Attribute(Name('form', Load(), lineno=950, col_offset=11), 'keys', Load(), lineno=950, col_offset=11), [], [], None, None, lineno=950, col_offset=11), lineno=950, col_offset=4), Expr(Call(Attribute(Name('keys', Load(), lineno=951, col_offset=4), 'sort', Load(), lineno=951, col_offset=4), [], [], None, None, lineno=951, col_offset=4), lineno=951, col_offset=4), Print(None, [], True, lineno=952, col_offset=4), Print(None, [Str('<H3>Form Contents:</H3>', lineno=953, col_offset=10)], True, lineno=953, col_offset=4), If(UnaryOp(Not(), Name('keys', Load(), lineno=954, col_offset=11), lineno=954, col_offset=7), [Print(None, [Str('<P>No form fields.', lineno=955, col_offset=14)], True, lineno=955, col_offset=8)], [], lineno=954, col_offset=4), Print(None, [Str('<DL>', lineno=956, col_offset=10)], True, lineno=956, col_offset=4), For(Name('key', Store(), lineno=957, col_offset=8), Name('keys', Load(), lineno=957, col_offset=15), [Print(None, [BinOp(BinOp(Str('<DT>', lineno=958, col_offset=14), Add(), Call(Name('escape', Load(), lineno=958, col_offset=23), [Name('key', Load(), lineno=958, col_offset=30)], [], None, None, lineno=958, col_offset=23), lineno=958, col_offset=14), Add(), Str(':', lineno=958, col_offset=37), lineno=958, col_offset=35)], False, lineno=958, col_offset=8), Assign([Name('value', Store(), lineno=959, col_offset=8)], Subscript(Name('form', Load(), lineno=959, col_offset=16), Index(Name('key', Load(), lineno=959, col_offset=21)), Load(), lineno=959, col_offset=16), lineno=959, col_offset=8), Print(None, [BinOp(BinOp(Str('<i>', lineno=960, col_offset=14), Add(), Call(Name('escape', Load(), lineno=960, col_offset=22), [Call(Name('repr', Load(), lineno=960, col_offset=29), [Call(Name('type', Load(), lineno=960, col_offset=34), [Name('value', Load(), lineno=960, col_offset=39)], [], None, None, lineno=960, col_offset=34)], [], None, None, lineno=960, col_offset=29)], [], None, None, lineno=960, col_offset=22), lineno=960, col_offset=14), Add(), Str('</i>', lineno=960, col_offset=50), lineno=960, col_offset=48)], True, lineno=960, col_offset=8), Print(None, [BinOp(Str('<DD>', lineno=961, col_offset=14), Add(), Call(Name('escape', Load(), lineno=961, col_offset=23), [Call(Name('repr', Load(), lineno=961, col_offset=30), [Name('value', Load(), lineno=961, col_offset=35)], [], None, None, lineno=961, col_offset=30)], [], None, None, lineno=961, col_offset=23), lineno=961, col_offset=14)], True, lineno=961, col_offset=8)], [], lineno=957, col_offset=4), Print(None, [Str('</DL>', lineno=962, col_offset=10)], True, lineno=962, col_offset=4), Print(None, [], True, lineno=963, col_offset=4)], [], lineno=948, col_offset=0), FunctionDef('print_directory', arguments([], None, None, []), [Expr(Str('Dump the current directory as HTML.', lineno=966, col_offset=4), lineno=966, col_offset=4), Print(None, [], True, lineno=967, col_offset=4), Print(None, [Str('<H3>Current Working Directory:</H3>', lineno=968, col_offset=10)], True, lineno=968, col_offset=4), TryExcept([Assign([Name('pwd', Store(), lineno=970, col_offset=8)], Call(Attribute(Name('os', Load(), lineno=970, col_offset=14), 'getcwd', Load(), lineno=970, col_offset=14), [], [], None, None, lineno=970, col_offset=14), lineno=970, col_offset=8)], [ExceptHandler(Attribute(Name('os', Load(), lineno=971, col_offset=11), 'error', Load(), lineno=971, col_offset=11), Name('msg', Store(), lineno=971, col_offset=21), [Print(None, [Str('os.error:', lineno=972, col_offset=14), Call(Name('escape', Load(), lineno=972, col_offset=27), [Call(Name('str', Load(), lineno=972, col_offset=34), [Name('msg', Load(), lineno=972, col_offset=38)], [], None, None, lineno=972, col_offset=34)], [], None, None, lineno=972, col_offset=27)], True, lineno=972, col_offset=8)], lineno=971, col_offset=4)], [Print(None, [Call(Name('escape', Load(), lineno=974, col_offset=14), [Name('pwd', Load(), lineno=974, col_offset=21)], [], None, None, lineno=974, col_offset=14)], True, lineno=974, col_offset=8)], lineno=969, col_offset=4), Print(None, [], True, lineno=975, col_offset=4)], [], lineno=965, col_offset=0), FunctionDef('print_arguments', arguments([], None, None, []), [Print(None, [], True, lineno=978, col_offset=4), Print(None, [Str('<H3>Command Line Arguments:</H3>', lineno=979, col_offset=10)], True, lineno=979, col_offset=4), Print(None, [], True, lineno=980, col_offset=4), Print(None, [Attribute(Name('sys', Load(), lineno=981, col_offset=10), 'argv', Load(), lineno=981, col_offset=10)], True, lineno=981, col_offset=4), Print(None, [], True, lineno=982, col_offset=4)], [], lineno=977, col_offset=0), FunctionDef('print_environ_usage', arguments([], None, None, []), [Expr(Str('Dump a list of environment variables used by CGI as HTML.', lineno=985, col_offset=4), lineno=985, col_offset=4), Print(None, [Str('\n<H3>These environment variables could have been set:</H3>\n<UL>\n<LI>AUTH_TYPE\n<LI>CONTENT_LENGTH\n<LI>CONTENT_TYPE\n<LI>DATE_GMT\n<LI>DATE_LOCAL\n<LI>DOCUMENT_NAME\n<LI>DOCUMENT_ROOT\n<LI>DOCUMENT_URI\n<LI>GATEWAY_INTERFACE\n<LI>LAST_MODIFIED\n<LI>PATH\n<LI>PATH_INFO\n<LI>PATH_TRANSLATED\n<LI>QUERY_STRING\n<LI>REMOTE_ADDR\n<LI>REMOTE_HOST\n<LI>REMOTE_IDENT\n<LI>REMOTE_USER\n<LI>REQUEST_METHOD\n<LI>SCRIPT_NAME\n<LI>SERVER_NAME\n<LI>SERVER_PORT\n<LI>SERVER_PROTOCOL\n<LI>SERVER_ROOT\n<LI>SERVER_SOFTWARE\n</UL>\nIn addition, HTTP headers sent by the server may be passed in the\nenvironment as well.  Here are some common variable names:\n<UL>\n<LI>HTTP_ACCEPT\n<LI>HTTP_CONNECTION\n<LI>HTTP_HOST\n<LI>HTTP_PRAGMA\n<LI>HTTP_REFERER\n<LI>HTTP_USER_AGENT\n</UL>\n', lineno=1025, col_offset=-1)], True, lineno=986, col_offset=4)], [], lineno=984, col_offset=0), FunctionDef('escape', arguments([Name('s', Param(), lineno=1031, col_offset=11), Name('quote', Param(), lineno=1031, col_offset=14)], None, None, [Name('None', Load(), lineno=1031, col_offset=20)]), [Expr(Str('Replace special characters "&", "<" and ">" to HTML-safe sequences.\n    If the optional flag quote is true, the quotation mark character (")\n    is also translated.', lineno=1034, col_offset=-1), lineno=1034, col_offset=-1), Assign([Name('s', Store(), lineno=1035, col_offset=4)], Call(Attribute(Name('s', Load(), lineno=1035, col_offset=8), 'replace', Load(), lineno=1035, col_offset=8), [Str('&', lineno=1035, col_offset=18), Str('&amp;', lineno=1035, col_offset=23)], [], None, None, lineno=1035, col_offset=8), lineno=1035, col_offset=4), Assign([Name('s', Store(), lineno=1036, col_offset=4)], Call(Attribute(Name('s', Load(), lineno=1036, col_offset=8), 'replace', Load(), lineno=1036, col_offset=8), [Str('<', lineno=1036, col_offset=18), Str('&lt;', lineno=1036, col_offset=23)], [], None, None, lineno=1036, col_offset=8), lineno=1036, col_offset=4), Assign([Name('s', Store(), lineno=1037, col_offset=4)], Call(Attribute(Name('s', Load(), lineno=1037, col_offset=8), 'replace', Load(), lineno=1037, col_offset=8), [Str('>', lineno=1037, col_offset=18), Str('&gt;', lineno=1037, col_offset=23)], [], None, None, lineno=1037, col_offset=8), lineno=1037, col_offset=4), If(Name('quote', Load(), lineno=1038, col_offset=7), [Assign([Name('s', Store(), lineno=1039, col_offset=8)], Call(Attribute(Name('s', Load(), lineno=1039, col_offset=12), 'replace', Load(), lineno=1039, col_offset=12), [Str('"', lineno=1039, col_offset=22), Str('&quot;', lineno=1039, col_offset=27)], [], None, None, lineno=1039, col_offset=12), lineno=1039, col_offset=8)], [], lineno=1038, col_offset=4), Return(Name('s', Load(), lineno=1040, col_offset=11), lineno=1040, col_offset=4)], [], lineno=1031, col_offset=0), FunctionDef('valid_boundary', arguments([Name('s', Param(), lineno=1042, col_offset=19), Name('_vb_pattern', Param(), lineno=1042, col_offset=22)], None, None, [Str('^[ -~]{0,200}[!-~]$', lineno=1042, col_offset=34)]), [Import([alias('re', None)], lineno=1043, col_offset=4), Return(Call(Attribute(Name('re', Load(), lineno=1044, col_offset=11), 'match', Load(), lineno=1044, col_offset=11), [Name('_vb_pattern', Load(), lineno=1044, col_offset=20), Name('s', Load(), lineno=1044, col_offset=33)], [], None, None, lineno=1044, col_offset=11), lineno=1044, col_offset=4)], [], lineno=1042, col_offset=0), If(Compare(Name('__name__', Load(), lineno=1050, col_offset=3), [Eq()], [Str('__main__', lineno=1050, col_offset=15)], lineno=1050, col_offset=3), [Expr(Call(Name('test', Load(), lineno=1051, col_offset=4), [], [], None, None, lineno=1051, col_offset=4), lineno=1051, col_offset=4)], [], lineno=1050, col_offset=0)])
