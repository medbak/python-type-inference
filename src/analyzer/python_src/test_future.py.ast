Module([Import([alias('unittest', None)], lineno=3, col_offset=0), ImportFrom('test', [alias('test_support', None)], 0, lineno=4, col_offset=0), Import([alias('re', None)], lineno=5, col_offset=0), Assign([Name('rx', Store(), lineno=7, col_offset=0)], Call(Attribute(Name('re', Load(), lineno=7, col_offset=5), 'compile', Load(), lineno=7, col_offset=5), [Str('\\((\\S+).py, line (\\d+)', lineno=7, col_offset=16)], [], None, None, lineno=7, col_offset=5), lineno=7, col_offset=0), FunctionDef('get_error_location', arguments([Name('msg', Param(), lineno=9, col_offset=23)], None, None, []), [Assign([Name('mo', Store(), lineno=10, col_offset=4)], Call(Attribute(Name('rx', Load(), lineno=10, col_offset=9), 'search', Load(), lineno=10, col_offset=9), [Call(Name('str', Load(), lineno=10, col_offset=19), [Name('msg', Load(), lineno=10, col_offset=23)], [], None, None, lineno=10, col_offset=19)], [], None, None, lineno=10, col_offset=9), lineno=10, col_offset=4), Return(Call(Attribute(Name('mo', Load(), lineno=11, col_offset=11), 'group', Load(), lineno=11, col_offset=11), [Num(1, lineno=11, col_offset=20), Num(2, lineno=11, col_offset=23)], [], None, None, lineno=11, col_offset=11), lineno=11, col_offset=4)], [], lineno=9, col_offset=0), ClassDef('FutureTest', [Attribute(Name('unittest', Load(), lineno=13, col_offset=17), 'TestCase', Load(), lineno=13, col_offset=17)], [FunctionDef('test_future1', arguments([Name('self', Param(), lineno=15, col_offset=21)], None, None, []), [Expr(Call(Attribute(Name('test_support', Load(), lineno=16, col_offset=8), 'unload', Load(), lineno=16, col_offset=8), [Str('test_future1', lineno=16, col_offset=28)], [], None, None, lineno=16, col_offset=8), lineno=16, col_offset=8), ImportFrom('test', [alias('test_future1', None)], 0, lineno=17, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=18, col_offset=8), 'assertEqual', Load(), lineno=18, col_offset=8), [Attribute(Name('test_future1', Load(), lineno=18, col_offset=25), 'result', Load(), lineno=18, col_offset=25), Num(6, lineno=18, col_offset=46)], [], None, None, lineno=18, col_offset=8), lineno=18, col_offset=8)], [], lineno=15, col_offset=4), FunctionDef('test_future2', arguments([Name('self', Param(), lineno=20, col_offset=21)], None, None, []), [Expr(Call(Attribute(Name('test_support', Load(), lineno=21, col_offset=8), 'unload', Load(), lineno=21, col_offset=8), [Str('test_future2', lineno=21, col_offset=28)], [], None, None, lineno=21, col_offset=8), lineno=21, col_offset=8), ImportFrom('test', [alias('test_future2', None)], 0, lineno=22, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=23, col_offset=8), 'assertEqual', Load(), lineno=23, col_offset=8), [Attribute(Name('test_future2', Load(), lineno=23, col_offset=25), 'result', Load(), lineno=23, col_offset=25), Num(6, lineno=23, col_offset=46)], [], None, None, lineno=23, col_offset=8), lineno=23, col_offset=8)], [], lineno=20, col_offset=4), FunctionDef('test_future3', arguments([Name('self', Param(), lineno=25, col_offset=21)], None, None, []), [Expr(Call(Attribute(Name('test_support', Load(), lineno=26, col_offset=8), 'unload', Load(), lineno=26, col_offset=8), [Str('test_future3', lineno=26, col_offset=28)], [], None, None, lineno=26, col_offset=8), lineno=26, col_offset=8), ImportFrom('test', [alias('test_future3', None)], 0, lineno=27, col_offset=8)], [], lineno=25, col_offset=4), FunctionDef('test_badfuture3', arguments([Name('self', Param(), lineno=29, col_offset=24)], None, None, []), [TryExcept([ImportFrom('test', [alias('badsyntax_future3', None)], 0, lineno=31, col_offset=12)], [ExceptHandler(Name('SyntaxError', Load(), lineno=32, col_offset=15), Name('msg', Store(), lineno=32, col_offset=28), [Expr(Call(Attribute(Name('self', Load(), lineno=33, col_offset=12), 'assertEqual', Load(), lineno=33, col_offset=12), [Call(Name('get_error_location', Load(), lineno=33, col_offset=29), [Name('msg', Load(), lineno=33, col_offset=48)], [], None, None, lineno=33, col_offset=29), Tuple([Str('badsyntax_future3', lineno=33, col_offset=55), Str('3', lineno=33, col_offset=76)], Load(), lineno=33, col_offset=55)], [], None, None, lineno=33, col_offset=12), lineno=33, col_offset=12)], lineno=32, col_offset=8)], [Expr(Call(Attribute(Name('self', Load(), lineno=35, col_offset=12), 'fail', Load(), lineno=35, col_offset=12), [Str("expected exception didn't occur", lineno=35, col_offset=22)], [], None, None, lineno=35, col_offset=12), lineno=35, col_offset=12)], lineno=30, col_offset=8)], [], lineno=29, col_offset=4), FunctionDef('test_badfuture4', arguments([Name('self', Param(), lineno=37, col_offset=24)], None, None, []), [TryExcept([ImportFrom('test', [alias('badsyntax_future4', None)], 0, lineno=39, col_offset=12)], [ExceptHandler(Name('SyntaxError', Load(), lineno=40, col_offset=15), Name('msg', Store(), lineno=40, col_offset=28), [Expr(Call(Attribute(Name('self', Load(), lineno=41, col_offset=12), 'assertEqual', Load(), lineno=41, col_offset=12), [Call(Name('get_error_location', Load(), lineno=41, col_offset=29), [Name('msg', Load(), lineno=41, col_offset=48)], [], None, None, lineno=41, col_offset=29), Tuple([Str('badsyntax_future4', lineno=41, col_offset=55), Str('3', lineno=41, col_offset=76)], Load(), lineno=41, col_offset=55)], [], None, None, lineno=41, col_offset=12), lineno=41, col_offset=12)], lineno=40, col_offset=8)], [Expr(Call(Attribute(Name('self', Load(), lineno=43, col_offset=12), 'fail', Load(), lineno=43, col_offset=12), [Str("expected exception didn't occur", lineno=43, col_offset=22)], [], None, None, lineno=43, col_offset=12), lineno=43, col_offset=12)], lineno=38, col_offset=8)], [], lineno=37, col_offset=4), FunctionDef('test_badfuture5', arguments([Name('self', Param(), lineno=45, col_offset=24)], None, None, []), [TryExcept([ImportFrom('test', [alias('badsyntax_future5', None)], 0, lineno=47, col_offset=12)], [ExceptHandler(Name('SyntaxError', Load(), lineno=48, col_offset=15), Name('msg', Store(), lineno=48, col_offset=28), [Expr(Call(Attribute(Name('self', Load(), lineno=49, col_offset=12), 'assertEqual', Load(), lineno=49, col_offset=12), [Call(Name('get_error_location', Load(), lineno=49, col_offset=29), [Name('msg', Load(), lineno=49, col_offset=48)], [], None, None, lineno=49, col_offset=29), Tuple([Str('badsyntax_future5', lineno=49, col_offset=55), Str('4', lineno=49, col_offset=76)], Load(), lineno=49, col_offset=55)], [], None, None, lineno=49, col_offset=12), lineno=49, col_offset=12)], lineno=48, col_offset=8)], [Expr(Call(Attribute(Name('self', Load(), lineno=51, col_offset=12), 'fail', Load(), lineno=51, col_offset=12), [Str("expected exception didn't occur", lineno=51, col_offset=22)], [], None, None, lineno=51, col_offset=12), lineno=51, col_offset=12)], lineno=46, col_offset=8)], [], lineno=45, col_offset=4), FunctionDef('test_badfuture6', arguments([Name('self', Param(), lineno=53, col_offset=24)], None, None, []), [TryExcept([ImportFrom('test', [alias('badsyntax_future6', None)], 0, lineno=55, col_offset=12)], [ExceptHandler(Name('SyntaxError', Load(), lineno=56, col_offset=15), Name('msg', Store(), lineno=56, col_offset=28), [Expr(Call(Attribute(Name('self', Load(), lineno=57, col_offset=12), 'assertEqual', Load(), lineno=57, col_offset=12), [Call(Name('get_error_location', Load(), lineno=57, col_offset=29), [Name('msg', Load(), lineno=57, col_offset=48)], [], None, None, lineno=57, col_offset=29), Tuple([Str('badsyntax_future6', lineno=57, col_offset=55), Str('3', lineno=57, col_offset=76)], Load(), lineno=57, col_offset=55)], [], None, None, lineno=57, col_offset=12), lineno=57, col_offset=12)], lineno=56, col_offset=8)], [Expr(Call(Attribute(Name('self', Load(), lineno=59, col_offset=12), 'fail', Load(), lineno=59, col_offset=12), [Str("expected exception didn't occur", lineno=59, col_offset=22)], [], None, None, lineno=59, col_offset=12), lineno=59, col_offset=12)], lineno=54, col_offset=8)], [], lineno=53, col_offset=4), FunctionDef('test_badfuture7', arguments([Name('self', Param(), lineno=61, col_offset=24)], None, None, []), [TryExcept([ImportFrom('test', [alias('badsyntax_future7', None)], 0, lineno=63, col_offset=12)], [ExceptHandler(Name('SyntaxError', Load(), lineno=64, col_offset=15), Name('msg', Store(), lineno=64, col_offset=28), [Expr(Call(Attribute(Name('self', Load(), lineno=65, col_offset=12), 'assertEqual', Load(), lineno=65, col_offset=12), [Call(Name('get_error_location', Load(), lineno=65, col_offset=29), [Name('msg', Load(), lineno=65, col_offset=48)], [], None, None, lineno=65, col_offset=29), Tuple([Str('badsyntax_future7', lineno=65, col_offset=55), Str('3', lineno=65, col_offset=76)], Load(), lineno=65, col_offset=55)], [], None, None, lineno=65, col_offset=12), lineno=65, col_offset=12)], lineno=64, col_offset=8)], [Expr(Call(Attribute(Name('self', Load(), lineno=67, col_offset=12), 'fail', Load(), lineno=67, col_offset=12), [Str("expected exception didn't occur", lineno=67, col_offset=22)], [], None, None, lineno=67, col_offset=12), lineno=67, col_offset=12)], lineno=62, col_offset=8)], [], lineno=61, col_offset=4), FunctionDef('test_badfuture8', arguments([Name('self', Param(), lineno=69, col_offset=24)], None, None, []), [TryExcept([ImportFrom('test', [alias('badsyntax_future8', None)], 0, lineno=71, col_offset=12)], [ExceptHandler(Name('SyntaxError', Load(), lineno=72, col_offset=15), Name('msg', Store(), lineno=72, col_offset=28), [Expr(Call(Attribute(Name('self', Load(), lineno=73, col_offset=12), 'assertEqual', Load(), lineno=73, col_offset=12), [Call(Name('get_error_location', Load(), lineno=73, col_offset=29), [Name('msg', Load(), lineno=73, col_offset=48)], [], None, None, lineno=73, col_offset=29), Tuple([Str('badsyntax_future8', lineno=73, col_offset=55), Str('3', lineno=73, col_offset=76)], Load(), lineno=73, col_offset=55)], [], None, None, lineno=73, col_offset=12), lineno=73, col_offset=12)], lineno=72, col_offset=8)], [Expr(Call(Attribute(Name('self', Load(), lineno=75, col_offset=12), 'fail', Load(), lineno=75, col_offset=12), [Str("expected exception didn't occur", lineno=75, col_offset=22)], [], None, None, lineno=75, col_offset=12), lineno=75, col_offset=12)], lineno=70, col_offset=8)], [], lineno=69, col_offset=4), FunctionDef('test_badfuture9', arguments([Name('self', Param(), lineno=77, col_offset=24)], None, None, []), [TryExcept([ImportFrom('test', [alias('badsyntax_future9', None)], 0, lineno=79, col_offset=12)], [ExceptHandler(Name('SyntaxError', Load(), lineno=80, col_offset=15), Name('msg', Store(), lineno=80, col_offset=28), [Expr(Call(Attribute(Name('self', Load(), lineno=81, col_offset=12), 'assertEqual', Load(), lineno=81, col_offset=12), [Call(Name('get_error_location', Load(), lineno=81, col_offset=29), [Name('msg', Load(), lineno=81, col_offset=48)], [], None, None, lineno=81, col_offset=29), Tuple([Str('badsyntax_future9', lineno=81, col_offset=55), Str('3', lineno=81, col_offset=76)], Load(), lineno=81, col_offset=55)], [], None, None, lineno=81, col_offset=12), lineno=81, col_offset=12)], lineno=80, col_offset=8)], [Expr(Call(Attribute(Name('self', Load(), lineno=83, col_offset=12), 'fail', Load(), lineno=83, col_offset=12), [Str("expected exception didn't occur", lineno=83, col_offset=22)], [], None, None, lineno=83, col_offset=12), lineno=83, col_offset=12)], lineno=78, col_offset=8)], [], lineno=77, col_offset=4), FunctionDef('test_parserhack', arguments([Name('self', Param(), lineno=85, col_offset=24)], None, None, []), [TryExcept([Exec(Str('from __future__ import print_function; print 0', lineno=92, col_offset=17), None, None, lineno=92, col_offset=12)], [ExceptHandler(Name('SyntaxError', Load(), lineno=93, col_offset=15), None, [Pass( lineno=94, col_offset=12)], lineno=93, col_offset=8)], [Expr(Call(Attribute(Name('self', Load(), lineno=96, col_offset=12), 'fail', Load(), lineno=96, col_offset=12), [Str("syntax error didn't occur", lineno=96, col_offset=22)], [], None, None, lineno=96, col_offset=12), lineno=96, col_offset=12)], lineno=91, col_offset=8), TryExcept([Exec(Str('from __future__ import (print_function); print 0', lineno=99, col_offset=17), None, None, lineno=99, col_offset=12)], [ExceptHandler(Name('SyntaxError', Load(), lineno=100, col_offset=15), None, [Pass( lineno=101, col_offset=12)], lineno=100, col_offset=8)], [Expr(Call(Attribute(Name('self', Load(), lineno=103, col_offset=12), 'fail', Load(), lineno=103, col_offset=12), [Str("syntax error didn't occur", lineno=103, col_offset=22)], [], None, None, lineno=103, col_offset=12), lineno=103, col_offset=12)], lineno=98, col_offset=8)], [], lineno=85, col_offset=4), FunctionDef('test_multiple_features', arguments([Name('self', Param(), lineno=105, col_offset=31)], None, None, []), [Expr(Call(Attribute(Name('test_support', Load(), lineno=106, col_offset=8), 'unload', Load(), lineno=106, col_offset=8), [Str('test.test_future5', lineno=106, col_offset=28)], [], None, None, lineno=106, col_offset=8), lineno=106, col_offset=8), ImportFrom('test', [alias('test_future5', None)], 0, lineno=107, col_offset=8)], [], lineno=105, col_offset=4), FunctionDef('test_unicode_literals_exec', arguments([Name('self', Param(), lineno=109, col_offset=35)], None, None, []), [Assign([Name('scope', Store(), lineno=110, col_offset=8)], Dict([], [], lineno=110, col_offset=16), lineno=110, col_offset=8), Exec(Str("from __future__ import unicode_literals; x = ''", lineno=111, col_offset=13), Name('scope', Load(), lineno=111, col_offset=66), None, lineno=111, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=112, col_offset=8), 'assertIsInstance', Load(), lineno=112, col_offset=8), [Subscript(Name('scope', Load(), lineno=112, col_offset=30), Index(Str('x', lineno=112, col_offset=36)), Load(), lineno=112, col_offset=30), Name('unicode', Load(), lineno=112, col_offset=42)], [], None, None, lineno=112, col_offset=8), lineno=112, col_offset=8)], [], lineno=109, col_offset=4)], [], lineno=13, col_offset=0), FunctionDef('test_main', arguments([], None, None, []), [Expr(Call(Attribute(Name('test_support', Load(), lineno=116, col_offset=4), 'run_unittest', Load(), lineno=116, col_offset=4), [Name('FutureTest', Load(), lineno=116, col_offset=30)], [], None, None, lineno=116, col_offset=4), lineno=116, col_offset=4)], [], lineno=115, col_offset=0), If(Compare(Name('__name__', Load(), lineno=118, col_offset=3), [Eq()], [Str('__main__', lineno=118, col_offset=15)], lineno=118, col_offset=3), [Expr(Call(Name('test_main', Load(), lineno=119, col_offset=4), [], [], None, None, lineno=119, col_offset=4), lineno=119, col_offset=4)], [], lineno=118, col_offset=0)])
