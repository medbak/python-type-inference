Module([Import([alias('string', None)], lineno=6, col_offset=0), Assign([Name('MACHEADERFILE', Store(), lineno=9, col_offset=0)], Str('QuickDraw.h', lineno=9, col_offset=16), lineno=9, col_offset=0), Assign([Name('MODNAME', Store(), lineno=10, col_offset=0)], Str('_Qd', lineno=10, col_offset=10), lineno=10, col_offset=0), Assign([Name('OBJECTNAME', Store(), lineno=11, col_offset=0)], Str('Graf', lineno=11, col_offset=13), lineno=11, col_offset=0), Assign([Name('MODPREFIX', Store(), lineno=14, col_offset=0)], Str('Qd', lineno=14, col_offset=12), lineno=14, col_offset=0), Assign([Name('OBJECTTYPE', Store(), lineno=15, col_offset=0)], BinOp(Name('OBJECTNAME', Load(), lineno=15, col_offset=13), Add(), Str('Ptr', lineno=15, col_offset=26), lineno=15, col_offset=13), lineno=15, col_offset=0), Assign([Name('OBJECTPREFIX', Store(), lineno=16, col_offset=0)], BinOp(Name('MODPREFIX', Load(), lineno=16, col_offset=15), Add(), Str('Obj', lineno=16, col_offset=27), lineno=16, col_offset=15), lineno=16, col_offset=0), Assign([Name('INPUTFILE', Store(), lineno=17, col_offset=0)], BinOp(Call(Attribute(Name('string', Load(), lineno=17, col_offset=12), 'lower', Load(), lineno=17, col_offset=12), [Name('MODPREFIX', Load(), lineno=17, col_offset=25)], [], None, None, lineno=17, col_offset=12), Add(), Str('gen.py', lineno=17, col_offset=38), lineno=17, col_offset=12), lineno=17, col_offset=0), Assign([Name('EXTRAFILE', Store(), lineno=18, col_offset=0)], BinOp(Call(Attribute(Name('string', Load(), lineno=18, col_offset=12), 'lower', Load(), lineno=18, col_offset=12), [Name('MODPREFIX', Load(), lineno=18, col_offset=25)], [], None, None, lineno=18, col_offset=12), Add(), Str('edit.py', lineno=18, col_offset=38), lineno=18, col_offset=12), lineno=18, col_offset=0), Assign([Name('OUTPUTFILE', Store(), lineno=19, col_offset=0)], BinOp(Name('MODNAME', Load(), lineno=19, col_offset=13), Add(), Str('module.c', lineno=19, col_offset=23), lineno=19, col_offset=13), lineno=19, col_offset=0), ImportFrom('macsupport', [alias('*', None)], 0, lineno=21, col_offset=0), ClassDef('TextThingieClass', [Name('FixedInputBufferType', Load(), lineno=25, col_offset=23)], [FunctionDef('getargsCheck', arguments([Name('self', Param(), lineno=26, col_offset=21), Name('name', Param(), lineno=26, col_offset=27)], None, None, []), [Expr(Call(Name('Output', Load(), lineno=27, col_offset=8), [Str('/* Fool compiler warnings */', lineno=27, col_offset=15)], [], None, None, lineno=27, col_offset=8), lineno=27, col_offset=8), Expr(Call(Name('Output', Load(), lineno=28, col_offset=8), [Str('%s__in_len__ = %s__in_len__;', lineno=28, col_offset=15), Name('name', Load(), lineno=28, col_offset=47), Name('name', Load(), lineno=28, col_offset=53)], [], None, None, lineno=28, col_offset=8), lineno=28, col_offset=8)], [], lineno=26, col_offset=4), FunctionDef('declareSize', arguments([Name('self', Param(), lineno=30, col_offset=20), Name('name', Param(), lineno=30, col_offset=26)], None, None, []), [Expr(Call(Name('Output', Load(), lineno=31, col_offset=8), [Str('int %s__in_len__;', lineno=31, col_offset=15), Name('name', Load(), lineno=31, col_offset=36)], [], None, None, lineno=31, col_offset=8), lineno=31, col_offset=8)], [], lineno=30, col_offset=4)], [], lineno=25, col_offset=0), Assign([Name('TextThingie', Store(), lineno=33, col_offset=0)], Call(Name('TextThingieClass', Load(), lineno=33, col_offset=14), [Name('None', Load(), lineno=33, col_offset=31)], [], None, None, lineno=33, col_offset=14), lineno=33, col_offset=0), Assign([Name('RgnHandle', Store(), lineno=36, col_offset=0)], Call(Name('OpaqueByValueType', Load(), lineno=36, col_offset=12), [Str('RgnHandle', lineno=36, col_offset=30), Str('ResObj', lineno=36, col_offset=43)], [], None, None, lineno=36, col_offset=12), lineno=36, col_offset=0), Assign([Name('OptRgnHandle', Store(), lineno=37, col_offset=0)], Call(Name('OpaqueByValueType', Load(), lineno=37, col_offset=15), [Str('RgnHandle', lineno=37, col_offset=33), Str('OptResObj', lineno=37, col_offset=46)], [], None, None, lineno=37, col_offset=15), lineno=37, col_offset=0), Assign([Name('PicHandle', Store(), lineno=38, col_offset=0)], Call(Name('OpaqueByValueType', Load(), lineno=38, col_offset=12), [Str('PicHandle', lineno=38, col_offset=30), Str('ResObj', lineno=38, col_offset=43)], [], None, None, lineno=38, col_offset=12), lineno=38, col_offset=0), Assign([Name('PolyHandle', Store(), lineno=39, col_offset=0)], Call(Name('OpaqueByValueType', Load(), lineno=39, col_offset=13), [Str('PolyHandle', lineno=39, col_offset=31), Str('ResObj', lineno=39, col_offset=45)], [], None, None, lineno=39, col_offset=13), lineno=39, col_offset=0), Assign([Name('PixMapHandle', Store(), lineno=40, col_offset=0)], Call(Name('OpaqueByValueType', Load(), lineno=40, col_offset=15), [Str('PixMapHandle', lineno=40, col_offset=33), Str('ResObj', lineno=40, col_offset=49)], [], None, None, lineno=40, col_offset=15), lineno=40, col_offset=0), Assign([Name('PixPatHandle', Store(), lineno=41, col_offset=0)], Call(Name('OpaqueByValueType', Load(), lineno=41, col_offset=15), [Str('PixPatHandle', lineno=41, col_offset=33), Str('ResObj', lineno=41, col_offset=49)], [], None, None, lineno=41, col_offset=15), lineno=41, col_offset=0), Assign([Name('PatHandle', Store(), lineno=42, col_offset=0)], Call(Name('OpaqueByValueType', Load(), lineno=42, col_offset=12), [Str('PatHandle', lineno=42, col_offset=30), Str('ResObj', lineno=42, col_offset=43)], [], None, None, lineno=42, col_offset=12), lineno=42, col_offset=0), Assign([Name('CursHandle', Store(), lineno=43, col_offset=0)], Call(Name('OpaqueByValueType', Load(), lineno=43, col_offset=13), [Str('CursHandle', lineno=43, col_offset=31), Str('ResObj', lineno=43, col_offset=45)], [], None, None, lineno=43, col_offset=13), lineno=43, col_offset=0), Assign([Name('CCrsrHandle', Store(), lineno=44, col_offset=0)], Call(Name('OpaqueByValueType', Load(), lineno=44, col_offset=14), [Str('CCrsrHandle', lineno=44, col_offset=32), Str('ResObj', lineno=44, col_offset=47)], [], None, None, lineno=44, col_offset=14), lineno=44, col_offset=0), Assign([Name('CIconHandle', Store(), lineno=45, col_offset=0)], Call(Name('OpaqueByValueType', Load(), lineno=45, col_offset=14), [Str('CIconHandle', lineno=45, col_offset=32), Str('ResObj', lineno=45, col_offset=47)], [], None, None, lineno=45, col_offset=14), lineno=45, col_offset=0), Assign([Name('CTabHandle', Store(), lineno=46, col_offset=0)], Call(Name('OpaqueByValueType', Load(), lineno=46, col_offset=13), [Str('CTabHandle', lineno=46, col_offset=31), Str('ResObj', lineno=46, col_offset=45)], [], None, None, lineno=46, col_offset=13), lineno=46, col_offset=0), Assign([Name('ITabHandle', Store(), lineno=47, col_offset=0)], Call(Name('OpaqueByValueType', Load(), lineno=47, col_offset=13), [Str('ITabHandle', lineno=47, col_offset=31), Str('ResObj', lineno=47, col_offset=45)], [], None, None, lineno=47, col_offset=13), lineno=47, col_offset=0), Assign([Name('GDHandle', Store(), lineno=48, col_offset=0)], Call(Name('OpaqueByValueType', Load(), lineno=48, col_offset=11), [Str('GDHandle', lineno=48, col_offset=29), Str('ResObj', lineno=48, col_offset=41)], [], None, None, lineno=48, col_offset=11), lineno=48, col_offset=0), Assign([Name('CGrafPtr', Store(), lineno=49, col_offset=0)], Call(Name('OpaqueByValueType', Load(), lineno=49, col_offset=11), [Str('CGrafPtr', lineno=49, col_offset=29), Str('GrafObj', lineno=49, col_offset=41)], [], None, None, lineno=49, col_offset=11), lineno=49, col_offset=0), Assign([Name('GrafPtr', Store(), lineno=50, col_offset=0)], Call(Name('OpaqueByValueType', Load(), lineno=50, col_offset=10), [Str('GrafPtr', lineno=50, col_offset=28), Str('GrafObj', lineno=50, col_offset=39)], [], None, None, lineno=50, col_offset=10), lineno=50, col_offset=0), Assign([Name('BitMap_ptr', Store(), lineno=51, col_offset=0)], Call(Name('OpaqueByValueType', Load(), lineno=51, col_offset=13), [Str('BitMapPtr', lineno=51, col_offset=31), Str('BMObj', lineno=51, col_offset=44)], [], None, None, lineno=51, col_offset=13), lineno=51, col_offset=0), Assign([Name('const_BitMap_ptr', Store(), lineno=52, col_offset=0)], Call(Name('OpaqueByValueType', Load(), lineno=52, col_offset=19), [Str('const BitMap *', lineno=52, col_offset=37), Str('BMObj', lineno=52, col_offset=55)], [], None, None, lineno=52, col_offset=19), lineno=52, col_offset=0), Assign([Name('BitMap', Store(), lineno=53, col_offset=0)], Call(Name('OpaqueType', Load(), lineno=53, col_offset=9), [Str('BitMap', lineno=53, col_offset=20), Str('BMObj_NewCopied', lineno=53, col_offset=30), Str('BUG', lineno=53, col_offset=49)], [], None, None, lineno=53, col_offset=9), lineno=53, col_offset=0), Assign([Name('RGBColor', Store(), lineno=54, col_offset=0)], Call(Name('OpaqueType', Load(), lineno=54, col_offset=11), [Str('RGBColor', lineno=54, col_offset=22), Str('QdRGB', lineno=54, col_offset=34)], [], None, None, lineno=54, col_offset=11), lineno=54, col_offset=0), Assign([Name('RGBColor_ptr', Store(), lineno=55, col_offset=0)], Name('RGBColor', Load(), lineno=55, col_offset=15), lineno=55, col_offset=0), Assign([Name('FontInfo', Store(), lineno=56, col_offset=0)], Call(Name('OpaqueType', Load(), lineno=56, col_offset=11), [Str('FontInfo', lineno=56, col_offset=22), Str('QdFI', lineno=56, col_offset=34)], [], None, None, lineno=56, col_offset=11), lineno=56, col_offset=0), Assign([Name('Component', Store(), lineno=57, col_offset=0)], Call(Name('OpaqueByValueType', Load(), lineno=57, col_offset=12), [Str('Component', lineno=57, col_offset=30), Str('CmpObj', lineno=57, col_offset=43)], [], None, None, lineno=57, col_offset=12), lineno=57, col_offset=0), Assign([Name('ComponentInstance', Store(), lineno=58, col_offset=0)], Call(Name('OpaqueByValueType', Load(), lineno=58, col_offset=20), [Str('ComponentInstance', lineno=58, col_offset=38), Str('CmpInstObj', lineno=58, col_offset=59)], [], None, None, lineno=58, col_offset=20), lineno=58, col_offset=0), Assign([Name('Cursor', Store(), lineno=60, col_offset=0)], Call(Name('StructOutputBufferType', Load(), lineno=60, col_offset=9), [Str('Cursor', lineno=60, col_offset=32)], [], None, None, lineno=60, col_offset=9), lineno=60, col_offset=0), Assign([Name('Cursor_ptr', Store(), lineno=61, col_offset=0)], Call(Name('StructInputBufferType', Load(), lineno=61, col_offset=13), [Str('Cursor', lineno=61, col_offset=35)], [], None, None, lineno=61, col_offset=13), lineno=61, col_offset=0), Assign([Name('Pattern', Store(), lineno=62, col_offset=0)], Call(Name('StructOutputBufferType', Load(), lineno=62, col_offset=10), [Str('Pattern', lineno=62, col_offset=33)], [], None, None, lineno=62, col_offset=10), lineno=62, col_offset=0), Assign([Name('Pattern_ptr', Store(), lineno=63, col_offset=0)], Call(Name('StructInputBufferType', Load(), lineno=63, col_offset=14), [Str('Pattern', lineno=63, col_offset=36)], [], None, None, lineno=63, col_offset=14), lineno=63, col_offset=0), Assign([Name('PenState', Store(), lineno=64, col_offset=0)], Call(Name('StructOutputBufferType', Load(), lineno=64, col_offset=11), [Str('PenState', lineno=64, col_offset=34)], [], None, None, lineno=64, col_offset=11), lineno=64, col_offset=0), Assign([Name('PenState_ptr', Store(), lineno=65, col_offset=0)], Call(Name('StructInputBufferType', Load(), lineno=65, col_offset=15), [Str('PenState', lineno=65, col_offset=37)], [], None, None, lineno=65, col_offset=15), lineno=65, col_offset=0), Assign([Name('TruncCode', Store(), lineno=66, col_offset=0)], Call(Name('Type', Load(), lineno=66, col_offset=12), [Str('TruncCode', lineno=66, col_offset=17), Str('h', lineno=66, col_offset=30)], [], None, None, lineno=66, col_offset=12), lineno=66, col_offset=0), Assign([Name('includestuff', Store(), lineno=68, col_offset=0)], BinOp(Name('includestuff', Load(), lineno=68, col_offset=15), Add(), Str('\n#include <Carbon/Carbon.h>\n\n#ifdef USE_TOOLBOX_OBJECT_GLUE\nextern PyObject *_GrafObj_New(GrafPtr);\nextern int _GrafObj_Convert(PyObject *, GrafPtr *);\nextern PyObject *_BMObj_New(BitMapPtr);\nextern int _BMObj_Convert(PyObject *, BitMapPtr *);\nextern PyObject *_QdRGB_New(RGBColorPtr);\nextern int _QdRGB_Convert(PyObject *, RGBColorPtr);\n\n#define GrafObj_New _GrafObj_New\n#define GrafObj_Convert _GrafObj_Convert\n#define BMObj_New _BMObj_New\n#define BMObj_Convert _BMObj_Convert\n#define QdRGB_New _QdRGB_New\n#define QdRGB_Convert _QdRGB_Convert\n#endif\n\nstatic PyObject *BMObj_NewCopied(BitMapPtr);\n\n/*\n** Parse/generate RGB records\n*/\nPyObject *QdRGB_New(RGBColorPtr itself)\n{\n\n        return Py_BuildValue("lll", (long)itself->red, (long)itself->green, (long)itself->blue);\n}\n\nint QdRGB_Convert(PyObject *v, RGBColorPtr p_itself)\n{\n        long red, green, blue;\n\n        if( !PyArg_ParseTuple(v, "lll", &red, &green, &blue) )\n                return 0;\n        p_itself->red = (unsigned short)red;\n        p_itself->green = (unsigned short)green;\n        p_itself->blue = (unsigned short)blue;\n        return 1;\n}\n\n/*\n** Generate FontInfo records\n*/\nstatic\nPyObject *QdFI_New(FontInfo *itself)\n{\n\n        return Py_BuildValue("hhhh", itself->ascent, itself->descent,\n                        itself->widMax, itself->leading);\n}\n', lineno=120, col_offset=-1), lineno=68, col_offset=15), lineno=68, col_offset=0), Assign([Name('finalstuff', Store(), lineno=122, col_offset=0)], BinOp(Name('finalstuff', Load(), lineno=122, col_offset=13), Add(), Str('\n/* Like BMObj_New, but the original bitmap data structure is copied (and\n** released when the object is released)\n*/\nPyObject *BMObj_NewCopied(BitMapPtr itself)\n{\n        BitMapObject *it;\n        BitMapPtr itself_copy;\n\n        if ((itself_copy=(BitMapPtr)malloc(sizeof(BitMap))) == NULL)\n                return PyErr_NoMemory();\n        *itself_copy = *itself;\n        it = (BitMapObject *)BMObj_New(itself_copy);\n        it->referred_bitmap = itself_copy;\n        return (PyObject *)it;\n}\n\n', lineno=139, col_offset=-1), lineno=122, col_offset=13), lineno=122, col_offset=0), Assign([Name('variablestuff', Store(), lineno=141, col_offset=0)], Str('', lineno=141, col_offset=16), lineno=141, col_offset=0), Assign([Name('initstuff', Store(), lineno=143, col_offset=0)], BinOp(Name('initstuff', Load(), lineno=143, col_offset=12), Add(), Str('\n        PyMac_INIT_TOOLBOX_OBJECT_NEW(BitMapPtr, BMObj_New);\n        PyMac_INIT_TOOLBOX_OBJECT_CONVERT(BitMapPtr, BMObj_Convert);\n        PyMac_INIT_TOOLBOX_OBJECT_NEW(GrafPtr, GrafObj_New);\n        PyMac_INIT_TOOLBOX_OBJECT_CONVERT(GrafPtr, GrafObj_Convert);\n        PyMac_INIT_TOOLBOX_OBJECT_NEW(RGBColorPtr, QdRGB_New);\n        PyMac_INIT_TOOLBOX_OBJECT_CONVERT(RGBColor, QdRGB_Convert);\n', lineno=150, col_offset=-1), lineno=143, col_offset=12), lineno=143, col_offset=0), ClassDef('MyGRObjectDefinition', [Name('PEP253Mixin', Load(), lineno=166, col_offset=27), Name('GlobalObjectDefinition', Load(), lineno=166, col_offset=40)], [Assign([Name('getsetlist', Store(), lineno=167, col_offset=4)], List([Tuple([Str('visRgn', lineno=168, col_offset=13), Str('RgnHandle h=NewRgn(); /* XXXX wrong dispose routine */\n            return Py_BuildValue("O&", ResObj_New, (Handle)GetPortVisibleRegion(self->ob_itself, h));\n            ', lineno=171, col_offset=-1), Name('None', Load(), lineno=172, col_offset=12), Str('Convenience attribute: return a copy of the visible region', lineno=173, col_offset=12)], Load(), lineno=168, col_offset=13), Tuple([Str('clipRgn', lineno=175, col_offset=12), Str('RgnHandle h=NewRgn(); /* XXXX wrong dispose routine */\n            return Py_BuildValue("O&", ResObj_New, (Handle)GetPortClipRegion(self->ob_itself, h));\n            ', lineno=178, col_offset=-1), Name('None', Load(), lineno=179, col_offset=12), Str('Convenience attribute: return a copy of the clipping region', lineno=180, col_offset=12)], Load(), lineno=175, col_offset=12)], Load(), lineno=167, col_offset=17), lineno=167, col_offset=4), FunctionDef('outputCheckNewArg', arguments([Name('self', Param(), lineno=182, col_offset=26)], None, None, []), [Expr(Call(Name('Output', Load(), lineno=183, col_offset=8), [Str('if (itself == NULL) return PyMac_Error(resNotFound);', lineno=183, col_offset=15)], [], None, None, lineno=183, col_offset=8), lineno=183, col_offset=8)], [], lineno=182, col_offset=4), FunctionDef('outputCheckConvertArg', arguments([Name('self', Param(), lineno=184, col_offset=30)], None, None, []), [Expr(Call(Name('Output', Load(), lineno=185, col_offset=8), [Str('#if 1', lineno=185, col_offset=15)], [], None, None, lineno=185, col_offset=8), lineno=185, col_offset=8), Expr(Call(Name('OutLbrace', Load(), lineno=186, col_offset=8), [], [], None, None, lineno=186, col_offset=8), lineno=186, col_offset=8), Expr(Call(Name('Output', Load(), lineno=187, col_offset=8), [Str('WindowRef win;', lineno=187, col_offset=15)], [], None, None, lineno=187, col_offset=8), lineno=187, col_offset=8), Expr(Call(Name('OutLbrace', Load(), lineno=188, col_offset=8), [Str('if (WinObj_Convert(v, &win) && v)', lineno=188, col_offset=18)], [], None, None, lineno=188, col_offset=8), lineno=188, col_offset=8), Expr(Call(Name('Output', Load(), lineno=189, col_offset=8), [Str('*p_itself = (GrafPtr)GetWindowPort(win);', lineno=189, col_offset=15)], [], None, None, lineno=189, col_offset=8), lineno=189, col_offset=8), Expr(Call(Name('Output', Load(), lineno=190, col_offset=8), [Str('return 1;', lineno=190, col_offset=15)], [], None, None, lineno=190, col_offset=8), lineno=190, col_offset=8), Expr(Call(Name('OutRbrace', Load(), lineno=191, col_offset=8), [], [], None, None, lineno=191, col_offset=8), lineno=191, col_offset=8), Expr(Call(Name('Output', Load(), lineno=192, col_offset=8), [Str('PyErr_Clear();', lineno=192, col_offset=15)], [], None, None, lineno=192, col_offset=8), lineno=192, col_offset=8), Expr(Call(Name('OutRbrace', Load(), lineno=193, col_offset=8), [], [], None, None, lineno=193, col_offset=8), lineno=193, col_offset=8), Expr(Call(Name('Output', Load(), lineno=194, col_offset=8), [Str('#else', lineno=194, col_offset=15)], [], None, None, lineno=194, col_offset=8), lineno=194, col_offset=8), Expr(Call(Name('OutLbrace', Load(), lineno=195, col_offset=8), [Str('if (DlgObj_Check(v))', lineno=195, col_offset=18)], [], None, None, lineno=195, col_offset=8), lineno=195, col_offset=8), Expr(Call(Name('Output', Load(), lineno=196, col_offset=8), [Str('DialogRef dlg = (DialogRef)((GrafPortObject *)v)->ob_itself;', lineno=196, col_offset=15)], [], None, None, lineno=196, col_offset=8), lineno=196, col_offset=8), Expr(Call(Name('Output', Load(), lineno=197, col_offset=8), [Str('*p_itself = (GrafPtr)GetWindowPort(GetDialogWindow(dlg));', lineno=197, col_offset=15)], [], None, None, lineno=197, col_offset=8), lineno=197, col_offset=8), Expr(Call(Name('Output', Load(), lineno=198, col_offset=8), [Str('return 1;', lineno=198, col_offset=15)], [], None, None, lineno=198, col_offset=8), lineno=198, col_offset=8), Expr(Call(Name('OutRbrace', Load(), lineno=199, col_offset=8), [], [], None, None, lineno=199, col_offset=8), lineno=199, col_offset=8), Expr(Call(Name('OutLbrace', Load(), lineno=200, col_offset=8), [Str('if (WinObj_Check(v))', lineno=200, col_offset=18)], [], None, None, lineno=200, col_offset=8), lineno=200, col_offset=8), Expr(Call(Name('Output', Load(), lineno=201, col_offset=8), [Str('WindowRef win = (WindowRef)((GrafPortObject *)v)->ob_itself;', lineno=201, col_offset=15)], [], None, None, lineno=201, col_offset=8), lineno=201, col_offset=8), Expr(Call(Name('Output', Load(), lineno=202, col_offset=8), [Str('*p_itself = (GrafPtr)GetWindowPort(win);', lineno=202, col_offset=15)], [], None, None, lineno=202, col_offset=8), lineno=202, col_offset=8), Expr(Call(Name('Output', Load(), lineno=203, col_offset=8), [Str('return 1;', lineno=203, col_offset=15)], [], None, None, lineno=203, col_offset=8), lineno=203, col_offset=8), Expr(Call(Name('OutRbrace', Load(), lineno=204, col_offset=8), [], [], None, None, lineno=204, col_offset=8), lineno=204, col_offset=8), Expr(Call(Name('Output', Load(), lineno=205, col_offset=8), [Str('#endif', lineno=205, col_offset=15)], [], None, None, lineno=205, col_offset=8), lineno=205, col_offset=8)], [], lineno=184, col_offset=4)], [], lineno=166, col_offset=0), ClassDef('MyBMObjectDefinition', [Name('PEP253Mixin', Load(), lineno=207, col_offset=27), Name('GlobalObjectDefinition', Load(), lineno=207, col_offset=40)], [Assign([Name('getsetlist', Store(), lineno=208, col_offset=4)], List([Tuple([Str('baseAddr', lineno=210, col_offset=4), Str('return PyInt_FromLong((long)self->ob_itself->baseAddr);', lineno=211, col_offset=4), Name('None', Load(), lineno=212, col_offset=4), Name('None', Load(), lineno=213, col_offset=4)], Load(), lineno=210, col_offset=4), Tuple([Str('rowBytes', lineno=215, col_offset=4), Str('return PyInt_FromLong((long)self->ob_itself->rowBytes);', lineno=216, col_offset=4), Name('None', Load(), lineno=217, col_offset=4), Name('None', Load(), lineno=218, col_offset=4)], Load(), lineno=215, col_offset=4), Tuple([Str('bounds', lineno=220, col_offset=4), Str('return Py_BuildValue("O&", PyMac_BuildRect, &self->ob_itself->bounds);', lineno=221, col_offset=4), Name('None', Load(), lineno=222, col_offset=4), Name('None', Load(), lineno=223, col_offset=4)], Load(), lineno=220, col_offset=4), Tuple([Str('bitmap_data', lineno=225, col_offset=4), Str('return PyString_FromStringAndSize((char *)self->ob_itself, sizeof(BitMap));', lineno=226, col_offset=4), Name('None', Load(), lineno=227, col_offset=4), Name('None', Load(), lineno=228, col_offset=4)], Load(), lineno=225, col_offset=4), Tuple([Str('pixmap_data', lineno=230, col_offset=4), Str('return PyString_FromStringAndSize((char *)self->ob_itself, sizeof(PixMap));', lineno=231, col_offset=4), Name('None', Load(), lineno=232, col_offset=4), Name('None', Load(), lineno=233, col_offset=4)], Load(), lineno=230, col_offset=4)], Load(), lineno=208, col_offset=17), lineno=208, col_offset=4), FunctionDef('outputCheckNewArg', arguments([Name('self', Param(), lineno=235, col_offset=26)], None, None, []), [Expr(Call(Name('Output', Load(), lineno=236, col_offset=8), [Str('if (itself == NULL) return PyMac_Error(resNotFound);', lineno=236, col_offset=15)], [], None, None, lineno=236, col_offset=8), lineno=236, col_offset=8)], [], lineno=235, col_offset=4), FunctionDef('outputStructMembers', arguments([Name('self', Param(), lineno=237, col_offset=28)], None, None, []), [Expr(Call(Name('Output', Load(), lineno=240, col_offset=8), [Str('%s ob_itself;', lineno=240, col_offset=15), Attribute(Name('self', Load(), lineno=240, col_offset=32), 'itselftype', Load(), lineno=240, col_offset=32)], [], None, None, lineno=240, col_offset=8), lineno=240, col_offset=8), Expr(Call(Name('Output', Load(), lineno=241, col_offset=8), [Str('PyObject *referred_object;', lineno=241, col_offset=15)], [], None, None, lineno=241, col_offset=8), lineno=241, col_offset=8), Expr(Call(Name('Output', Load(), lineno=242, col_offset=8), [Str('BitMap *referred_bitmap;', lineno=242, col_offset=15)], [], None, None, lineno=242, col_offset=8), lineno=242, col_offset=8)], [], lineno=237, col_offset=4), FunctionDef('outputInitStructMembers', arguments([Name('self', Param(), lineno=243, col_offset=32)], None, None, []), [Expr(Call(Name('Output', Load(), lineno=244, col_offset=8), [Str('it->ob_itself = %sitself;', lineno=244, col_offset=15), Attribute(Name('self', Load(), lineno=244, col_offset=44), 'argref', Load(), lineno=244, col_offset=44)], [], None, None, lineno=244, col_offset=8), lineno=244, col_offset=8), Expr(Call(Name('Output', Load(), lineno=245, col_offset=8), [Str('it->referred_object = NULL;', lineno=245, col_offset=15)], [], None, None, lineno=245, col_offset=8), lineno=245, col_offset=8), Expr(Call(Name('Output', Load(), lineno=246, col_offset=8), [Str('it->referred_bitmap = NULL;', lineno=246, col_offset=15)], [], None, None, lineno=246, col_offset=8), lineno=246, col_offset=8)], [], lineno=243, col_offset=4), FunctionDef('outputCleanupStructMembers', arguments([Name('self', Param(), lineno=247, col_offset=35)], None, None, []), [Expr(Call(Name('Output', Load(), lineno=248, col_offset=8), [Str('Py_XDECREF(self->referred_object);', lineno=248, col_offset=15)], [], None, None, lineno=248, col_offset=8), lineno=248, col_offset=8), Expr(Call(Name('Output', Load(), lineno=249, col_offset=8), [Str('if (self->referred_bitmap) free(self->referred_bitmap);', lineno=249, col_offset=15)], [], None, None, lineno=249, col_offset=8), lineno=249, col_offset=8)], [], lineno=247, col_offset=4)], [], lineno=207, col_offset=0), Assign([Name('module', Store(), lineno=252, col_offset=0)], Call(Name('MacModule', Load(), lineno=252, col_offset=9), [Name('MODNAME', Load(), lineno=252, col_offset=19), Name('MODPREFIX', Load(), lineno=252, col_offset=28), Name('includestuff', Load(), lineno=252, col_offset=39), Name('finalstuff', Load(), lineno=252, col_offset=53), Name('initstuff', Load(), lineno=252, col_offset=65), Name('variablestuff', Load(), lineno=252, col_offset=76)], [], None, None, lineno=252, col_offset=9), lineno=252, col_offset=0), Assign([Name('gr_object', Store(), lineno=257, col_offset=0)], Call(Name('MyGRObjectDefinition', Load(), lineno=257, col_offset=12), [Str('GrafPort', lineno=257, col_offset=33), Str('GrafObj', lineno=257, col_offset=45), Str('GrafPtr', lineno=257, col_offset=56)], [], None, None, lineno=257, col_offset=12), lineno=257, col_offset=0), Expr(Call(Attribute(Name('module', Load(), lineno=258, col_offset=0), 'addobject', Load(), lineno=258, col_offset=0), [Name('gr_object', Load(), lineno=258, col_offset=17)], [], None, None, lineno=258, col_offset=0), lineno=258, col_offset=0), Assign([Name('bm_object', Store(), lineno=259, col_offset=0)], Call(Name('MyBMObjectDefinition', Load(), lineno=259, col_offset=12), [Str('BitMap', lineno=259, col_offset=33), Str('BMObj', lineno=259, col_offset=43), Str('BitMapPtr', lineno=259, col_offset=52)], [], None, None, lineno=259, col_offset=12), lineno=259, col_offset=0), Expr(Call(Attribute(Name('module', Load(), lineno=260, col_offset=0), 'addobject', Load(), lineno=260, col_offset=0), [Name('bm_object', Load(), lineno=260, col_offset=17)], [], None, None, lineno=260, col_offset=0), lineno=260, col_offset=0), Assign([Name('Function', Store(), lineno=264, col_offset=0)], Name('OSErrWeakLinkFunctionGenerator', Load(), lineno=264, col_offset=11), lineno=264, col_offset=0), Assign([Name('Method', Store(), lineno=265, col_offset=0)], Name('OSErrWeakLinkMethodGenerator', Load(), lineno=265, col_offset=9), lineno=265, col_offset=0), Assign([Name('functions', Store(), lineno=268, col_offset=0)], List([], Load(), lineno=268, col_offset=12), lineno=268, col_offset=0), Assign([Name('gr_methods', Store(), lineno=269, col_offset=0)], List([], Load(), lineno=269, col_offset=13), lineno=269, col_offset=0), Assign([Name('bm_methods', Store(), lineno=270, col_offset=0)], List([], Load(), lineno=270, col_offset=13), lineno=270, col_offset=0), Expr(Call(Name('execfile', Load(), lineno=272, col_offset=0), [Name('INPUTFILE', Load(), lineno=272, col_offset=9)], [], None, None, lineno=272, col_offset=0), lineno=272, col_offset=0), Expr(Call(Name('execfile', Load(), lineno=273, col_offset=0), [Name('EXTRAFILE', Load(), lineno=273, col_offset=9)], [], None, None, lineno=273, col_offset=0), lineno=273, col_offset=0), For(Name('f', Store(), lineno=277, col_offset=4), Name('functions', Load(), lineno=277, col_offset=9), [Expr(Call(Attribute(Name('module', Load(), lineno=277, col_offset=20), 'add', Load(), lineno=277, col_offset=20), [Name('f', Load(), lineno=277, col_offset=31)], [], None, None, lineno=277, col_offset=20), lineno=277, col_offset=20)], [], lineno=277, col_offset=0), For(Name('f', Store(), lineno=278, col_offset=4), Name('gr_methods', Load(), lineno=278, col_offset=9), [Expr(Call(Attribute(Name('gr_object', Load(), lineno=278, col_offset=21), 'add', Load(), lineno=278, col_offset=21), [Name('f', Load(), lineno=278, col_offset=35)], [], None, None, lineno=278, col_offset=21), lineno=278, col_offset=21)], [], lineno=278, col_offset=0), For(Name('f', Store(), lineno=279, col_offset=4), Name('bm_methods', Load(), lineno=279, col_offset=9), [Expr(Call(Attribute(Name('bm_object', Load(), lineno=279, col_offset=21), 'add', Load(), lineno=279, col_offset=21), [Name('f', Load(), lineno=279, col_offset=35)], [], None, None, lineno=279, col_offset=21), lineno=279, col_offset=21)], [], lineno=279, col_offset=0), Assign([Name('getdata_body', Store(), lineno=282, col_offset=0)], Str('\nint from, length;\nchar *cp;\n\nif ( !PyArg_ParseTuple(_args, "ii", &from, &length) )\n        return NULL;\ncp = _self->ob_itself->baseAddr+from;\n_res = PyString_FromStringAndSize(cp, length);\nreturn _res;\n', lineno=291, col_offset=-1), lineno=282, col_offset=0), Assign([Name('f', Store(), lineno=292, col_offset=0)], Call(Name('ManualGenerator', Load(), lineno=292, col_offset=4), [Str('getdata', lineno=292, col_offset=20), Name('getdata_body', Load(), lineno=292, col_offset=31)], [], None, None, lineno=292, col_offset=4), lineno=292, col_offset=0), Assign([Attribute(Name('f', Load(), lineno=293, col_offset=0), 'docstring', Store(), lineno=293, col_offset=0)], Lambda(arguments([], None, None, []), Str('(int start, int size) -> string. Return bytes from the bitmap', lineno=293, col_offset=22), lineno=293, col_offset=14), lineno=293, col_offset=0), Expr(Call(Attribute(Name('bm_object', Load(), lineno=294, col_offset=0), 'add', Load(), lineno=294, col_offset=0), [Name('f', Load(), lineno=294, col_offset=14)], [], None, None, lineno=294, col_offset=0), lineno=294, col_offset=0), Assign([Name('putdata_body', Store(), lineno=297, col_offset=0)], Str('\nint from, length;\nchar *cp, *icp;\n\nif ( !PyArg_ParseTuple(_args, "is#", &from, &icp, &length) )\n        return NULL;\ncp = _self->ob_itself->baseAddr+from;\nmemcpy(cp, icp, length);\nPy_INCREF(Py_None);\n_res = Py_None;\nreturn _res;\n', lineno=308, col_offset=-1), lineno=297, col_offset=0), Assign([Name('f', Store(), lineno=309, col_offset=0)], Call(Name('ManualGenerator', Load(), lineno=309, col_offset=4), [Str('putdata', lineno=309, col_offset=20), Name('putdata_body', Load(), lineno=309, col_offset=31)], [], None, None, lineno=309, col_offset=4), lineno=309, col_offset=0), Assign([Attribute(Name('f', Load(), lineno=310, col_offset=0), 'docstring', Store(), lineno=310, col_offset=0)], Lambda(arguments([], None, None, []), Str('(int start, string data). Store bytes into the bitmap', lineno=310, col_offset=22), lineno=310, col_offset=14), lineno=310, col_offset=0), Expr(Call(Attribute(Name('bm_object', Load(), lineno=311, col_offset=0), 'add', Load(), lineno=311, col_offset=0), [Name('f', Load(), lineno=311, col_offset=14)], [], None, None, lineno=311, col_offset=0), lineno=311, col_offset=0), Assign([Name('BitMap_body', Store(), lineno=316, col_offset=0)], Str('\nBitMap *ptr;\nPyObject *source;\nRect bounds;\nint rowbytes;\nchar *data;\n\nif ( !PyArg_ParseTuple(_args, "O!iO&", &PyString_Type, &source, &rowbytes, PyMac_GetRect,\n                &bounds) )\n        return NULL;\ndata = PyString_AsString(source);\nif ((ptr=(BitMap *)malloc(sizeof(BitMap))) == NULL )\n        return PyErr_NoMemory();\nptr->baseAddr = (Ptr)data;\nptr->rowBytes = rowbytes;\nptr->bounds = bounds;\nif ( (_res = BMObj_New(ptr)) == NULL ) {\n        free(ptr);\n        return NULL;\n}\n((BitMapObject *)_res)->referred_object = source;\nPy_INCREF(source);\n((BitMapObject *)_res)->referred_bitmap = ptr;\nreturn _res;\n', lineno=340, col_offset=-1), lineno=316, col_offset=0), Assign([Name('f', Store(), lineno=342, col_offset=0)], Call(Name('ManualGenerator', Load(), lineno=342, col_offset=4), [Str('BitMap', lineno=342, col_offset=20), Name('BitMap_body', Load(), lineno=342, col_offset=30)], [], None, None, lineno=342, col_offset=4), lineno=342, col_offset=0), Assign([Attribute(Name('f', Load(), lineno=343, col_offset=0), 'docstring', Store(), lineno=343, col_offset=0)], Lambda(arguments([], None, None, []), Str('Take (string, int, Rect) argument and create BitMap', lineno=343, col_offset=22), lineno=343, col_offset=14), lineno=343, col_offset=0), Expr(Call(Attribute(Name('module', Load(), lineno=344, col_offset=0), 'add', Load(), lineno=344, col_offset=0), [Name('f', Load(), lineno=344, col_offset=11)], [], None, None, lineno=344, col_offset=0), lineno=344, col_offset=0), Assign([Name('RawBitMap_body', Store(), lineno=349, col_offset=0)], Str('\nBitMap *ptr;\nPyObject *source;\n\nif ( !PyArg_ParseTuple(_args, "O!", &PyString_Type, &source) )\n        return NULL;\nif ( PyString_Size(source) != sizeof(BitMap) && PyString_Size(source) != sizeof(PixMap) ) {\n        PyErr_Format(PyExc_TypeError,\n                "Argument size was %d, should be %d (sizeof BitMap) or %d (sizeof PixMap)",\n                PyString_Size(source), sizeof(BitMap), sizeof(PixMap));\n        return NULL;\n}\nptr = (BitMapPtr)PyString_AsString(source);\nif ( (_res = BMObj_New(ptr)) == NULL ) {\n        return NULL;\n}\n((BitMapObject *)_res)->referred_object = source;\nPy_INCREF(source);\nreturn _res;\n', lineno=368, col_offset=-1), lineno=349, col_offset=0), Assign([Name('f', Store(), lineno=370, col_offset=0)], Call(Name('ManualGenerator', Load(), lineno=370, col_offset=4), [Str('RawBitMap', lineno=370, col_offset=20), Name('RawBitMap_body', Load(), lineno=370, col_offset=33)], [], None, None, lineno=370, col_offset=4), lineno=370, col_offset=0), Assign([Attribute(Name('f', Load(), lineno=371, col_offset=0), 'docstring', Store(), lineno=371, col_offset=0)], Lambda(arguments([], None, None, []), Str('Take string BitMap and turn into BitMap object', lineno=371, col_offset=22), lineno=371, col_offset=14), lineno=371, col_offset=0), Expr(Call(Attribute(Name('module', Load(), lineno=372, col_offset=0), 'add', Load(), lineno=372, col_offset=0), [Name('f', Load(), lineno=372, col_offset=11)], [], None, None, lineno=372, col_offset=0), lineno=372, col_offset=0), Expr(Call(Name('SetOutputFileName', Load(), lineno=375, col_offset=0), [Name('OUTPUTFILE', Load(), lineno=375, col_offset=18)], [], None, None, lineno=375, col_offset=0), lineno=375, col_offset=0), Expr(Call(Attribute(Name('module', Load(), lineno=376, col_offset=0), 'generate', Load(), lineno=376, col_offset=0), [], [], None, None, lineno=376, col_offset=0), lineno=376, col_offset=0), Expr(Call(Name('SetOutputFile', Load(), lineno=377, col_offset=0), [], [], None, None, lineno=377, col_offset=0), lineno=377, col_offset=0)])
