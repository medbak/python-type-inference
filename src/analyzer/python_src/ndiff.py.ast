Module([Expr(Str('ndiff [-q] file1 file2\n    or\nndiff (-r1 | -r2) < ndiff_output > file1_or_file2\n\nPrint a human-friendly file difference report to stdout.  Both inter-\nand intra-line differences are noted.  In the second form, recreate file1\n(-r1) or file2 (-r2) on stdout, from an ndiff report on stdin.\n\nIn the first form, if -q ("quiet") is not specified, the first two lines\nof output are\n\n-: file1\n+: file2\n\nEach remaining line begins with a two-letter code:\n\n    "- "    line unique to file1\n    "+ "    line unique to file2\n    "  "    line common to both files\n    "? "    line not present in either input file\n\nLines beginning with "? " attempt to guide the eye to intraline\ndifferences, and were not present in either input file.  These lines can be\nconfusing if the source files contain tab characters.\n\nThe first file can be recovered by retaining only lines that begin with\n"  " or "- ", and deleting those 2-character prefixes; use ndiff with -r1.\n\nThe second file can be recovered similarly, but by retaining only "  " and\n"+ " lines; use ndiff with -r2; or, on Unix, the second file can be\nrecovered by piping the output through\n\n    sed -n \'/^[+ ] /s/^..//p\'\n', lineno=47, col_offset=-1), lineno=47, col_offset=-1), Assign([Name('__version__', Store(), lineno=49, col_offset=0)], Tuple([Num(1, lineno=49, col_offset=14), Num(7, lineno=49, col_offset=17), Num(0, lineno=49, col_offset=20)], Load(), lineno=49, col_offset=14), lineno=49, col_offset=0), Import([alias('difflib', None), alias('sys', None)], lineno=51, col_offset=0), FunctionDef('fail', arguments([Name('msg', Param(), lineno=53, col_offset=9)], None, None, []), [Assign([Name('out', Store(), lineno=54, col_offset=4)], Attribute(Attribute(Name('sys', Load(), lineno=54, col_offset=10), 'stderr', Load(), lineno=54, col_offset=10), 'write', Load(), lineno=54, col_offset=10), lineno=54, col_offset=4), Expr(Call(Name('out', Load(), lineno=55, col_offset=4), [BinOp(Name('msg', Load(), lineno=55, col_offset=8), Add(), Str('\n\n', lineno=55, col_offset=14), lineno=55, col_offset=8)], [], None, None, lineno=55, col_offset=4), lineno=55, col_offset=4), Expr(Call(Name('out', Load(), lineno=56, col_offset=4), [Name('__doc__', Load(), lineno=56, col_offset=8)], [], None, None, lineno=56, col_offset=4), lineno=56, col_offset=4), Return(Num(0, lineno=57, col_offset=11), lineno=57, col_offset=4)], [], lineno=53, col_offset=0), FunctionDef('fopen', arguments([Name('fname', Param(), lineno=61, col_offset=10)], None, None, []), [TryExcept([Return(Call(Name('open', Load(), lineno=63, col_offset=15), [Name('fname', Load(), lineno=63, col_offset=20), Str('U', lineno=63, col_offset=27)], [], None, None, lineno=63, col_offset=15), lineno=63, col_offset=8)], [ExceptHandler(Name('IOError', Load(), lineno=64, col_offset=11), Name('detail', Store(), lineno=64, col_offset=20), [Return(Call(Name('fail', Load(), lineno=65, col_offset=15), [BinOp(BinOp(BinOp(Str("couldn't open ", lineno=65, col_offset=20), Add(), Name('fname', Load(), lineno=65, col_offset=39), lineno=65, col_offset=20), Add(), Str(': ', lineno=65, col_offset=47), lineno=65, col_offset=45), Add(), Call(Name('str', Load(), lineno=65, col_offset=54), [Name('detail', Load(), lineno=65, col_offset=58)], [], None, None, lineno=65, col_offset=54), lineno=65, col_offset=52)], [], None, None, lineno=65, col_offset=15), lineno=65, col_offset=8)], lineno=64, col_offset=4)], [], lineno=62, col_offset=4)], [], lineno=61, col_offset=0), FunctionDef('fcompare', arguments([Name('f1name', Param(), lineno=68, col_offset=13), Name('f2name', Param(), lineno=68, col_offset=21)], None, None, []), [Assign([Name('f1', Store(), lineno=69, col_offset=4)], Call(Name('fopen', Load(), lineno=69, col_offset=9), [Name('f1name', Load(), lineno=69, col_offset=15)], [], None, None, lineno=69, col_offset=9), lineno=69, col_offset=4), Assign([Name('f2', Store(), lineno=70, col_offset=4)], Call(Name('fopen', Load(), lineno=70, col_offset=9), [Name('f2name', Load(), lineno=70, col_offset=15)], [], None, None, lineno=70, col_offset=9), lineno=70, col_offset=4), If(BoolOp(Or(), [UnaryOp(Not(), Name('f1', Load(), lineno=71, col_offset=11), lineno=71, col_offset=7), UnaryOp(Not(), Name('f2', Load(), lineno=71, col_offset=21), lineno=71, col_offset=17)], lineno=71, col_offset=7), [Return(Num(0, lineno=72, col_offset=15), lineno=72, col_offset=8)], [], lineno=71, col_offset=4), Assign([Name('a', Store(), lineno=74, col_offset=4)], Call(Attribute(Name('f1', Load(), lineno=74, col_offset=8), 'readlines', Load(), lineno=74, col_offset=8), [], [], None, None, lineno=74, col_offset=8), lineno=74, col_offset=4), Expr(Call(Attribute(Name('f1', Load(), lineno=74, col_offset=24), 'close', Load(), lineno=74, col_offset=24), [], [], None, None, lineno=74, col_offset=24), lineno=74, col_offset=24), Assign([Name('b', Store(), lineno=75, col_offset=4)], Call(Attribute(Name('f2', Load(), lineno=75, col_offset=8), 'readlines', Load(), lineno=75, col_offset=8), [], [], None, None, lineno=75, col_offset=8), lineno=75, col_offset=4), Expr(Call(Attribute(Name('f2', Load(), lineno=75, col_offset=24), 'close', Load(), lineno=75, col_offset=24), [], [], None, None, lineno=75, col_offset=24), lineno=75, col_offset=24), For(Name('line', Store(), lineno=76, col_offset=8), Call(Attribute(Name('difflib', Load(), lineno=76, col_offset=16), 'ndiff', Load(), lineno=76, col_offset=16), [Name('a', Load(), lineno=76, col_offset=30), Name('b', Load(), lineno=76, col_offset=33)], [], None, None, lineno=76, col_offset=16), [Print(None, [Name('line', Load(), lineno=77, col_offset=14)], False, lineno=77, col_offset=8)], [], lineno=76, col_offset=4), Return(Num(1, lineno=79, col_offset=11), lineno=79, col_offset=4)], [], lineno=68, col_offset=0), FunctionDef('main', arguments([Name('args', Param(), lineno=84, col_offset=9)], None, None, []), [Import([alias('getopt', None)], lineno=85, col_offset=4), TryExcept([Assign([Tuple([Name('opts', Store(), lineno=87, col_offset=8), Name('args', Store(), lineno=87, col_offset=14)], Store(), lineno=87, col_offset=8)], Call(Attribute(Name('getopt', Load(), lineno=87, col_offset=21), 'getopt', Load(), lineno=87, col_offset=21), [Name('args', Load(), lineno=87, col_offset=35), Str('qr:', lineno=87, col_offset=41)], [], None, None, lineno=87, col_offset=21), lineno=87, col_offset=8)], [ExceptHandler(Attribute(Name('getopt', Load(), lineno=88, col_offset=11), 'error', Load(), lineno=88, col_offset=11), Name('detail', Store(), lineno=88, col_offset=25), [Return(Call(Name('fail', Load(), lineno=89, col_offset=15), [Call(Name('str', Load(), lineno=89, col_offset=20), [Name('detail', Load(), lineno=89, col_offset=24)], [], None, None, lineno=89, col_offset=20)], [], None, None, lineno=89, col_offset=15), lineno=89, col_offset=8)], lineno=88, col_offset=4)], [], lineno=86, col_offset=4), Assign([Name('noisy', Store(), lineno=90, col_offset=4)], Num(1, lineno=90, col_offset=12), lineno=90, col_offset=4), Assign([Name('qseen', Store(), lineno=91, col_offset=4), Name('rseen', Store(), lineno=91, col_offset=12)], Num(0, lineno=91, col_offset=20), lineno=91, col_offset=4), For(Tuple([Name('opt', Store(), lineno=92, col_offset=8), Name('val', Store(), lineno=92, col_offset=13)], Store(), lineno=92, col_offset=8), Name('opts', Load(), lineno=92, col_offset=20), [If(Compare(Name('opt', Load(), lineno=93, col_offset=11), [Eq()], [Str('-q', lineno=93, col_offset=18)], lineno=93, col_offset=11), [Assign([Name('qseen', Store(), lineno=94, col_offset=12)], Num(1, lineno=94, col_offset=20), lineno=94, col_offset=12), Assign([Name('noisy', Store(), lineno=95, col_offset=12)], Num(0, lineno=95, col_offset=20), lineno=95, col_offset=12)], [If(Compare(Name('opt', Load(), lineno=96, col_offset=13), [Eq()], [Str('-r', lineno=96, col_offset=20)], lineno=96, col_offset=13), [Assign([Name('rseen', Store(), lineno=97, col_offset=12)], Num(1, lineno=97, col_offset=20), lineno=97, col_offset=12), Assign([Name('whichfile', Store(), lineno=98, col_offset=12)], Name('val', Load(), lineno=98, col_offset=24), lineno=98, col_offset=12)], [], lineno=96, col_offset=13)], lineno=93, col_offset=8)], [], lineno=92, col_offset=4), If(BoolOp(And(), [Name('qseen', Load(), lineno=99, col_offset=7), Name('rseen', Load(), lineno=99, col_offset=17)], lineno=99, col_offset=7), [Return(Call(Name('fail', Load(), lineno=100, col_offset=15), [Str("can't specify both -q and -r", lineno=100, col_offset=20)], [], None, None, lineno=100, col_offset=15), lineno=100, col_offset=8)], [], lineno=99, col_offset=4), If(Name('rseen', Load(), lineno=101, col_offset=7), [If(Name('args', Load(), lineno=102, col_offset=11), [Return(Call(Name('fail', Load(), lineno=103, col_offset=19), [Str('no args allowed with -r option', lineno=103, col_offset=24)], [], None, None, lineno=103, col_offset=19), lineno=103, col_offset=12)], [], lineno=102, col_offset=8), If(Compare(Name('whichfile', Load(), lineno=104, col_offset=11), [In()], [Tuple([Str('1', lineno=104, col_offset=25), Str('2', lineno=104, col_offset=30)], Load(), lineno=104, col_offset=25)], lineno=104, col_offset=11), [Expr(Call(Name('restore', Load(), lineno=105, col_offset=12), [Name('whichfile', Load(), lineno=105, col_offset=20)], [], None, None, lineno=105, col_offset=12), lineno=105, col_offset=12), Return(Num(1, lineno=106, col_offset=19), lineno=106, col_offset=12)], [], lineno=104, col_offset=8), Return(Call(Name('fail', Load(), lineno=107, col_offset=15), [Str('-r value must be 1 or 2', lineno=107, col_offset=20)], [], None, None, lineno=107, col_offset=15), lineno=107, col_offset=8)], [], lineno=101, col_offset=4), If(Compare(Call(Name('len', Load(), lineno=108, col_offset=7), [Name('args', Load(), lineno=108, col_offset=11)], [], None, None, lineno=108, col_offset=7), [NotEq()], [Num(2, lineno=108, col_offset=20)], lineno=108, col_offset=7), [Return(Call(Name('fail', Load(), lineno=109, col_offset=15), [Str('need 2 filename args', lineno=109, col_offset=20)], [], None, None, lineno=109, col_offset=15), lineno=109, col_offset=8)], [], lineno=108, col_offset=4), Assign([Tuple([Name('f1name', Store(), lineno=110, col_offset=4), Name('f2name', Store(), lineno=110, col_offset=12)], Store(), lineno=110, col_offset=4)], Name('args', Load(), lineno=110, col_offset=21), lineno=110, col_offset=4), If(Name('noisy', Load(), lineno=111, col_offset=7), [Print(None, [Str('-:', lineno=112, col_offset=14), Name('f1name', Load(), lineno=112, col_offset=20)], True, lineno=112, col_offset=8), Print(None, [Str('+:', lineno=113, col_offset=14), Name('f2name', Load(), lineno=113, col_offset=20)], True, lineno=113, col_offset=8)], [], lineno=111, col_offset=4), Return(Call(Name('fcompare', Load(), lineno=114, col_offset=11), [Name('f1name', Load(), lineno=114, col_offset=20), Name('f2name', Load(), lineno=114, col_offset=28)], [], None, None, lineno=114, col_offset=11), lineno=114, col_offset=4)], [], lineno=84, col_offset=0), FunctionDef('restore', arguments([Name('which', Param(), lineno=119, col_offset=12)], None, None, []), [Assign([Name('restored', Store(), lineno=120, col_offset=4)], Call(Attribute(Name('difflib', Load(), lineno=120, col_offset=15), 'restore', Load(), lineno=120, col_offset=15), [Call(Attribute(Attribute(Name('sys', Load(), lineno=120, col_offset=31), 'stdin', Load(), lineno=120, col_offset=31), 'readlines', Load(), lineno=120, col_offset=31), [], [], None, None, lineno=120, col_offset=31), Name('which', Load(), lineno=120, col_offset=54)], [], None, None, lineno=120, col_offset=15), lineno=120, col_offset=4), Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=121, col_offset=4), 'stdout', Load(), lineno=121, col_offset=4), 'writelines', Load(), lineno=121, col_offset=4), [Name('restored', Load(), lineno=121, col_offset=26)], [], None, None, lineno=121, col_offset=4), lineno=121, col_offset=4)], [], lineno=119, col_offset=0), If(Compare(Name('__name__', Load(), lineno=123, col_offset=3), [Eq()], [Str('__main__', lineno=123, col_offset=15)], lineno=123, col_offset=3), [Assign([Name('args', Store(), lineno=124, col_offset=4)], Subscript(Attribute(Name('sys', Load(), lineno=124, col_offset=11), 'argv', Load(), lineno=124, col_offset=11), Slice(Num(1, lineno=124, col_offset=20), None, None), Load(), lineno=124, col_offset=11), lineno=124, col_offset=4), If(Compare(Str('-profile', lineno=125, col_offset=7), [In()], [Name('args', Load(), lineno=125, col_offset=21)], lineno=125, col_offset=7), [Import([alias('profile', None), alias('pstats', None)], lineno=126, col_offset=8), Expr(Call(Attribute(Name('args', Load(), lineno=127, col_offset=8), 'remove', Load(), lineno=127, col_offset=8), [Str('-profile', lineno=127, col_offset=20)], [], None, None, lineno=127, col_offset=8), lineno=127, col_offset=8), Assign([Name('statf', Store(), lineno=128, col_offset=8)], Str('ndiff.pro', lineno=128, col_offset=16), lineno=128, col_offset=8), Expr(Call(Attribute(Name('profile', Load(), lineno=129, col_offset=8), 'run', Load(), lineno=129, col_offset=8), [Str('main(args)', lineno=129, col_offset=20), Name('statf', Load(), lineno=129, col_offset=34)], [], None, None, lineno=129, col_offset=8), lineno=129, col_offset=8), Assign([Name('stats', Store(), lineno=130, col_offset=8)], Call(Attribute(Name('pstats', Load(), lineno=130, col_offset=16), 'Stats', Load(), lineno=130, col_offset=16), [Name('statf', Load(), lineno=130, col_offset=29)], [], None, None, lineno=130, col_offset=16), lineno=130, col_offset=8), Expr(Call(Attribute(Call(Attribute(Call(Attribute(Name('stats', Load(), lineno=131, col_offset=8), 'strip_dirs', Load(), lineno=131, col_offset=8), [], [], None, None, lineno=131, col_offset=8), 'sort_stats', Load(), lineno=131, col_offset=8), [Str('time', lineno=131, col_offset=38)], [], None, None, lineno=131, col_offset=8), 'print_stats', Load(), lineno=131, col_offset=8), [], [], None, None, lineno=131, col_offset=8), lineno=131, col_offset=8)], [Expr(Call(Name('main', Load(), lineno=133, col_offset=8), [Name('args', Load(), lineno=133, col_offset=13)], [], None, None, lineno=133, col_offset=8), lineno=133, col_offset=8)], lineno=125, col_offset=4)], [], lineno=123, col_offset=0)])
