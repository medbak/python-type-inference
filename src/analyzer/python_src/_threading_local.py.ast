Module([Expr(Str("Thread-local objects.\n\n(Note that this module provides a Python version of the threading.local\n class.  Depending on the version of Python you're using, there may be a\n faster one available.  You should always import the `local` class from\n `threading`.)\n\nThread-local objects support the management of thread-local data.\nIf you have data that you want to be local to a thread, simply create\na thread-local object and use its attributes:\n\n  >>> mydata = local()\n  >>> mydata.number = 42\n  >>> mydata.number\n  42\n\nYou can also access the local-object's dictionary:\n\n  >>> mydata.__dict__\n  {'number': 42}\n  >>> mydata.__dict__.setdefault('widgets', [])\n  []\n  >>> mydata.widgets\n  []\n\nWhat's important about thread-local objects is that their data are\nlocal to a thread. If we access the data in a different thread:\n\n  >>> log = []\n  >>> def f():\n  ...     items = mydata.__dict__.items()\n  ...     items.sort()\n  ...     log.append(items)\n  ...     mydata.number = 11\n  ...     log.append(mydata.number)\n\n  >>> import threading\n  >>> thread = threading.Thread(target=f)\n  >>> thread.start()\n  >>> thread.join()\n  >>> log\n  [[], 11]\n\nwe get different data.  Furthermore, changes made in the other thread\ndon't affect data seen in this thread:\n\n  >>> mydata.number\n  42\n\nOf course, values you get from a local object, including a __dict__\nattribute, are for whatever thread was current at the time the\nattribute was read.  For that reason, you generally don't want to save\nthese values across threads, as they apply only to the thread they\ncame from.\n\nYou can create custom local objects by subclassing the local class:\n\n  >>> class MyLocal(local):\n  ...     number = 2\n  ...     initialized = False\n  ...     def __init__(self, **kw):\n  ...         if self.initialized:\n  ...             raise SystemError('__init__ called too many times')\n  ...         self.initialized = True\n  ...         self.__dict__.update(kw)\n  ...     def squared(self):\n  ...         return self.number ** 2\n\nThis can be useful to support default values, methods and\ninitialization.  Note that if you define an __init__ method, it will be\ncalled each time the local object is used in a separate thread.  This\nis necessary to initialize each thread's dictionary.\n\nNow if we create a local object:\n\n  >>> mydata = MyLocal(color='red')\n\nNow we have a default number:\n\n  >>> mydata.number\n  2\n\nan initial color:\n\n  >>> mydata.color\n  'red'\n  >>> del mydata.color\n\nAnd a method that operates on the data:\n\n  >>> mydata.squared()\n  4\n\nAs before, we can access the data in a separate thread:\n\n  >>> log = []\n  >>> thread = threading.Thread(target=f)\n  >>> thread.start()\n  >>> thread.join()\n  >>> log\n  [[('color', 'red'), ('initialized', True)], 11]\n\nwithout affecting this thread's data:\n\n  >>> mydata.number\n  2\n  >>> mydata.color\n  Traceback (most recent call last):\n  ...\n  AttributeError: 'MyLocal' object has no attribute 'color'\n\nNote that subclasses can define slots, but they are not thread\nlocal. They are shared across threads:\n\n  >>> class MyLocal(local):\n  ...     __slots__ = 'number'\n\n  >>> mydata = MyLocal()\n  >>> mydata.number = 42\n  >>> mydata.color = 'red'\n\nSo, the separate thread:\n\n  >>> thread = threading.Thread(target=f)\n  >>> thread.start()\n  >>> thread.join()\n\naffects what we see:\n\n  >>> mydata.number\n  11\n\n>>> del mydata\n", lineno=134, col_offset=-1), lineno=134, col_offset=-1), Assign([Name('__all__', Store(), lineno=136, col_offset=0)], List([Str('local', lineno=136, col_offset=11)], Load(), lineno=136, col_offset=10), lineno=136, col_offset=0), ClassDef('_localbase', [Name('object', Load(), lineno=148, col_offset=17)], [Assign([Name('__slots__', Store(), lineno=149, col_offset=4)], Tuple([Str('_local__key', lineno=149, col_offset=16), Str('_local__args', lineno=149, col_offset=31), Str('_local__lock', lineno=149, col_offset=47)], Load(), lineno=149, col_offset=16), lineno=149, col_offset=4), FunctionDef('__new__', arguments([Name('cls', Param(), lineno=151, col_offset=16)], 'args', 'kw', []), [Assign([Name('self', Store(), lineno=152, col_offset=8)], Call(Attribute(Name('object', Load(), lineno=152, col_offset=15), '__new__', Load(), lineno=152, col_offset=15), [Name('cls', Load(), lineno=152, col_offset=30)], [], None, None, lineno=152, col_offset=15), lineno=152, col_offset=8), Assign([Name('key', Store(), lineno=153, col_offset=8)], Tuple([Str('_local__key', lineno=153, col_offset=14), BinOp(Str('thread.local.', lineno=153, col_offset=29), Add(), Call(Name('str', Load(), lineno=153, col_offset=47), [Call(Name('id', Load(), lineno=153, col_offset=51), [Name('self', Load(), lineno=153, col_offset=54)], [], None, None, lineno=153, col_offset=51)], [], None, None, lineno=153, col_offset=47), lineno=153, col_offset=29)], Load(), lineno=153, col_offset=14), lineno=153, col_offset=8), Expr(Call(Attribute(Name('object', Load(), lineno=154, col_offset=8), '__setattr__', Load(), lineno=154, col_offset=8), [Name('self', Load(), lineno=154, col_offset=27), Str('_local__key', lineno=154, col_offset=33), Name('key', Load(), lineno=154, col_offset=48)], [], None, None, lineno=154, col_offset=8), lineno=154, col_offset=8), Expr(Call(Attribute(Name('object', Load(), lineno=155, col_offset=8), '__setattr__', Load(), lineno=155, col_offset=8), [Name('self', Load(), lineno=155, col_offset=27), Str('_local__args', lineno=155, col_offset=33), Tuple([Name('args', Load(), lineno=155, col_offset=50), Name('kw', Load(), lineno=155, col_offset=56)], Load(), lineno=155, col_offset=50)], [], None, None, lineno=155, col_offset=8), lineno=155, col_offset=8), Expr(Call(Attribute(Name('object', Load(), lineno=156, col_offset=8), '__setattr__', Load(), lineno=156, col_offset=8), [Name('self', Load(), lineno=156, col_offset=27), Str('_local__lock', lineno=156, col_offset=33), Call(Name('RLock', Load(), lineno=156, col_offset=49), [], [], None, None, lineno=156, col_offset=49)], [], None, None, lineno=156, col_offset=8), lineno=156, col_offset=8), If(BoolOp(And(), [BoolOp(Or(), [Name('args', Load(), lineno=158, col_offset=12), Name('kw', Load(), lineno=158, col_offset=20)], lineno=158, col_offset=12), Compare(Attribute(Name('cls', Load(), lineno=158, col_offset=29), '__init__', Load(), lineno=158, col_offset=29), [Is()], [Attribute(Name('object', Load(), lineno=158, col_offset=45), '__init__', Load(), lineno=158, col_offset=45)], lineno=158, col_offset=29)], lineno=158, col_offset=11), [Raise(Call(Name('TypeError', Load(), lineno=159, col_offset=18), [Str('Initialization arguments are not supported', lineno=159, col_offset=28)], [], None, None, lineno=159, col_offset=18), None, None, lineno=159, col_offset=12)], [], lineno=158, col_offset=8), Assign([Name('dict', Store(), lineno=164, col_offset=8)], Call(Attribute(Name('object', Load(), lineno=164, col_offset=15), '__getattribute__', Load(), lineno=164, col_offset=15), [Name('self', Load(), lineno=164, col_offset=39), Str('__dict__', lineno=164, col_offset=45)], [], None, None, lineno=164, col_offset=15), lineno=164, col_offset=8), Assign([Subscript(Attribute(Call(Name('current_thread', Load(), lineno=165, col_offset=8), [], [], None, None, lineno=165, col_offset=8), '__dict__', Load(), lineno=165, col_offset=8), Index(Name('key', Load(), lineno=165, col_offset=34)), Store(), lineno=165, col_offset=8)], Name('dict', Load(), lineno=165, col_offset=41), lineno=165, col_offset=8), Return(Name('self', Load(), lineno=167, col_offset=15), lineno=167, col_offset=8)], [], lineno=151, col_offset=4)], [], lineno=148, col_offset=0), FunctionDef('_patch', arguments([Name('self', Param(), lineno=169, col_offset=11)], None, None, []), [Assign([Name('key', Store(), lineno=170, col_offset=4)], Call(Attribute(Name('object', Load(), lineno=170, col_offset=10), '__getattribute__', Load(), lineno=170, col_offset=10), [Name('self', Load(), lineno=170, col_offset=34), Str('_local__key', lineno=170, col_offset=40)], [], None, None, lineno=170, col_offset=10), lineno=170, col_offset=4), Assign([Name('d', Store(), lineno=171, col_offset=4)], Call(Attribute(Attribute(Call(Name('current_thread', Load(), lineno=171, col_offset=8), [], [], None, None, lineno=171, col_offset=8), '__dict__', Load(), lineno=171, col_offset=8), 'get', Load(), lineno=171, col_offset=8), [Name('key', Load(), lineno=171, col_offset=38)], [], None, None, lineno=171, col_offset=8), lineno=171, col_offset=4), If(Compare(Name('d', Load(), lineno=172, col_offset=7), [Is()], [Name('None', Load(), lineno=172, col_offset=12)], lineno=172, col_offset=7), [Assign([Name('d', Store(), lineno=173, col_offset=8)], Dict([], [], lineno=173, col_offset=12), lineno=173, col_offset=8), Assign([Subscript(Attribute(Call(Name('current_thread', Load(), lineno=174, col_offset=8), [], [], None, None, lineno=174, col_offset=8), '__dict__', Load(), lineno=174, col_offset=8), Index(Name('key', Load(), lineno=174, col_offset=34)), Store(), lineno=174, col_offset=8)], Name('d', Load(), lineno=174, col_offset=41), lineno=174, col_offset=8), Expr(Call(Attribute(Name('object', Load(), lineno=175, col_offset=8), '__setattr__', Load(), lineno=175, col_offset=8), [Name('self', Load(), lineno=175, col_offset=27), Str('__dict__', lineno=175, col_offset=33), Name('d', Load(), lineno=175, col_offset=45)], [], None, None, lineno=175, col_offset=8), lineno=175, col_offset=8), Assign([Name('cls', Store(), lineno=179, col_offset=8)], Call(Name('type', Load(), lineno=179, col_offset=14), [Name('self', Load(), lineno=179, col_offset=19)], [], None, None, lineno=179, col_offset=14), lineno=179, col_offset=8), If(Compare(Attribute(Name('cls', Load(), lineno=180, col_offset=11), '__init__', Load(), lineno=180, col_offset=11), [IsNot()], [Attribute(Name('object', Load(), lineno=180, col_offset=31), '__init__', Load(), lineno=180, col_offset=31)], lineno=180, col_offset=11), [Assign([Tuple([Name('args', Store(), lineno=181, col_offset=12), Name('kw', Store(), lineno=181, col_offset=18)], Store(), lineno=181, col_offset=12)], Call(Attribute(Name('object', Load(), lineno=181, col_offset=23), '__getattribute__', Load(), lineno=181, col_offset=23), [Name('self', Load(), lineno=181, col_offset=47), Str('_local__args', lineno=181, col_offset=53)], [], None, None, lineno=181, col_offset=23), lineno=181, col_offset=12), Expr(Call(Attribute(Name('cls', Load(), lineno=182, col_offset=12), '__init__', Load(), lineno=182, col_offset=12), [Name('self', Load(), lineno=182, col_offset=25)], [], Name('args', Load(), lineno=182, col_offset=32), Name('kw', Load(), lineno=182, col_offset=40), lineno=182, col_offset=12), lineno=182, col_offset=12)], [], lineno=180, col_offset=8)], [Expr(Call(Attribute(Name('object', Load(), lineno=184, col_offset=8), '__setattr__', Load(), lineno=184, col_offset=8), [Name('self', Load(), lineno=184, col_offset=27), Str('__dict__', lineno=184, col_offset=33), Name('d', Load(), lineno=184, col_offset=45)], [], None, None, lineno=184, col_offset=8), lineno=184, col_offset=8)], lineno=172, col_offset=4)], [], lineno=169, col_offset=0), ClassDef('local', [Name('_localbase', Load(), lineno=186, col_offset=12)], [FunctionDef('__getattribute__', arguments([Name('self', Param(), lineno=188, col_offset=25), Name('name', Param(), lineno=188, col_offset=31)], None, None, []), [Assign([Name('lock', Store(), lineno=189, col_offset=8)], Call(Attribute(Name('object', Load(), lineno=189, col_offset=15), '__getattribute__', Load(), lineno=189, col_offset=15), [Name('self', Load(), lineno=189, col_offset=39), Str('_local__lock', lineno=189, col_offset=45)], [], None, None, lineno=189, col_offset=15), lineno=189, col_offset=8), Expr(Call(Attribute(Name('lock', Load(), lineno=190, col_offset=8), 'acquire', Load(), lineno=190, col_offset=8), [], [], None, None, lineno=190, col_offset=8), lineno=190, col_offset=8), TryFinally([Expr(Call(Name('_patch', Load(), lineno=192, col_offset=12), [Name('self', Load(), lineno=192, col_offset=19)], [], None, None, lineno=192, col_offset=12), lineno=192, col_offset=12), Return(Call(Attribute(Name('object', Load(), lineno=193, col_offset=19), '__getattribute__', Load(), lineno=193, col_offset=19), [Name('self', Load(), lineno=193, col_offset=43), Name('name', Load(), lineno=193, col_offset=49)], [], None, None, lineno=193, col_offset=19), lineno=193, col_offset=12)], [Expr(Call(Attribute(Name('lock', Load(), lineno=195, col_offset=12), 'release', Load(), lineno=195, col_offset=12), [], [], None, None, lineno=195, col_offset=12), lineno=195, col_offset=12)], lineno=191, col_offset=8)], [], lineno=188, col_offset=4), FunctionDef('__setattr__', arguments([Name('self', Param(), lineno=197, col_offset=20), Name('name', Param(), lineno=197, col_offset=26), Name('value', Param(), lineno=197, col_offset=32)], None, None, []), [If(Compare(Name('name', Load(), lineno=198, col_offset=11), [Eq()], [Str('__dict__', lineno=198, col_offset=19)], lineno=198, col_offset=11), [Raise(Call(Name('AttributeError', Load(), lineno=199, col_offset=18), [BinOp(Str("%r object attribute '__dict__' is read-only", lineno=200, col_offset=16), Mod(), Attribute(Attribute(Name('self', Load(), lineno=201, col_offset=18), '__class__', Load(), lineno=201, col_offset=18), '__name__', Load(), lineno=201, col_offset=18), lineno=200, col_offset=16)], [], None, None, lineno=199, col_offset=18), None, None, lineno=199, col_offset=12)], [], lineno=198, col_offset=8), Assign([Name('lock', Store(), lineno=202, col_offset=8)], Call(Attribute(Name('object', Load(), lineno=202, col_offset=15), '__getattribute__', Load(), lineno=202, col_offset=15), [Name('self', Load(), lineno=202, col_offset=39), Str('_local__lock', lineno=202, col_offset=45)], [], None, None, lineno=202, col_offset=15), lineno=202, col_offset=8), Expr(Call(Attribute(Name('lock', Load(), lineno=203, col_offset=8), 'acquire', Load(), lineno=203, col_offset=8), [], [], None, None, lineno=203, col_offset=8), lineno=203, col_offset=8), TryFinally([Expr(Call(Name('_patch', Load(), lineno=205, col_offset=12), [Name('self', Load(), lineno=205, col_offset=19)], [], None, None, lineno=205, col_offset=12), lineno=205, col_offset=12), Return(Call(Attribute(Name('object', Load(), lineno=206, col_offset=19), '__setattr__', Load(), lineno=206, col_offset=19), [Name('self', Load(), lineno=206, col_offset=38), Name('name', Load(), lineno=206, col_offset=44), Name('value', Load(), lineno=206, col_offset=50)], [], None, None, lineno=206, col_offset=19), lineno=206, col_offset=12)], [Expr(Call(Attribute(Name('lock', Load(), lineno=208, col_offset=12), 'release', Load(), lineno=208, col_offset=12), [], [], None, None, lineno=208, col_offset=12), lineno=208, col_offset=12)], lineno=204, col_offset=8)], [], lineno=197, col_offset=4), FunctionDef('__delattr__', arguments([Name('self', Param(), lineno=210, col_offset=20), Name('name', Param(), lineno=210, col_offset=26)], None, None, []), [If(Compare(Name('name', Load(), lineno=211, col_offset=11), [Eq()], [Str('__dict__', lineno=211, col_offset=19)], lineno=211, col_offset=11), [Raise(Call(Name('AttributeError', Load(), lineno=212, col_offset=18), [BinOp(Str("%r object attribute '__dict__' is read-only", lineno=213, col_offset=16), Mod(), Attribute(Attribute(Name('self', Load(), lineno=214, col_offset=18), '__class__', Load(), lineno=214, col_offset=18), '__name__', Load(), lineno=214, col_offset=18), lineno=213, col_offset=16)], [], None, None, lineno=212, col_offset=18), None, None, lineno=212, col_offset=12)], [], lineno=211, col_offset=8), Assign([Name('lock', Store(), lineno=215, col_offset=8)], Call(Attribute(Name('object', Load(), lineno=215, col_offset=15), '__getattribute__', Load(), lineno=215, col_offset=15), [Name('self', Load(), lineno=215, col_offset=39), Str('_local__lock', lineno=215, col_offset=45)], [], None, None, lineno=215, col_offset=15), lineno=215, col_offset=8), Expr(Call(Attribute(Name('lock', Load(), lineno=216, col_offset=8), 'acquire', Load(), lineno=216, col_offset=8), [], [], None, None, lineno=216, col_offset=8), lineno=216, col_offset=8), TryFinally([Expr(Call(Name('_patch', Load(), lineno=218, col_offset=12), [Name('self', Load(), lineno=218, col_offset=19)], [], None, None, lineno=218, col_offset=12), lineno=218, col_offset=12), Return(Call(Attribute(Name('object', Load(), lineno=219, col_offset=19), '__delattr__', Load(), lineno=219, col_offset=19), [Name('self', Load(), lineno=219, col_offset=38), Name('name', Load(), lineno=219, col_offset=44)], [], None, None, lineno=219, col_offset=19), lineno=219, col_offset=12)], [Expr(Call(Attribute(Name('lock', Load(), lineno=221, col_offset=12), 'release', Load(), lineno=221, col_offset=12), [], [], None, None, lineno=221, col_offset=12), lineno=221, col_offset=12)], lineno=217, col_offset=8)], [], lineno=210, col_offset=4), FunctionDef('__del__', arguments([Name('self', Param(), lineno=223, col_offset=16)], None, None, []), [Import([alias('threading', None)], lineno=224, col_offset=8), Assign([Name('key', Store(), lineno=226, col_offset=8)], Call(Attribute(Name('object', Load(), lineno=226, col_offset=14), '__getattribute__', Load(), lineno=226, col_offset=14), [Name('self', Load(), lineno=226, col_offset=38), Str('_local__key', lineno=226, col_offset=44)], [], None, None, lineno=226, col_offset=14), lineno=226, col_offset=8), TryExcept([Assign([Name('threads', Store(), lineno=231, col_offset=12)], Call(Attribute(Name('threading', Load(), lineno=231, col_offset=22), '_enumerate', Load(), lineno=231, col_offset=22), [], [], None, None, lineno=231, col_offset=22), lineno=231, col_offset=12)], [ExceptHandler(None, None, [Return(None, lineno=236, col_offset=12)], lineno=232, col_offset=8)], [], lineno=228, col_offset=8), For(Name('thread', Store(), lineno=238, col_offset=12), Name('threads', Load(), lineno=238, col_offset=22), [TryExcept([Assign([Name('__dict__', Store(), lineno=240, col_offset=16)], Attribute(Name('thread', Load(), lineno=240, col_offset=27), '__dict__', Load(), lineno=240, col_offset=27), lineno=240, col_offset=16)], [ExceptHandler(Name('AttributeError', Load(), lineno=241, col_offset=19), None, [Continue( lineno=243, col_offset=16)], lineno=241, col_offset=12)], [], lineno=239, col_offset=12), If(Compare(Name('key', Load(), lineno=245, col_offset=15), [In()], [Name('__dict__', Load(), lineno=245, col_offset=22)], lineno=245, col_offset=15), [TryExcept([Delete([Subscript(Name('__dict__', Load(), lineno=247, col_offset=24), Index(Name('key', Load(), lineno=247, col_offset=33)), Del(), lineno=247, col_offset=24)], lineno=247, col_offset=20)], [ExceptHandler(Name('KeyError', Load(), lineno=248, col_offset=23), None, [Pass( lineno=249, col_offset=20)], lineno=248, col_offset=16)], [], lineno=246, col_offset=16)], [], lineno=245, col_offset=12)], [], lineno=238, col_offset=8)], [], lineno=223, col_offset=4)], [], lineno=186, col_offset=0), ImportFrom('threading', [alias('current_thread', None), alias('RLock', None)], 0, lineno=251, col_offset=0)])
