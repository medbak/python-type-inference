Module([Expr(Str("distutils.command.sdist\n\nImplements the Distutils 'sdist' command (create a source distribution).", lineno=3, col_offset=-1), lineno=3, col_offset=-1), Assign([Name('__revision__', Store(), lineno=5, col_offset=0)], Str('$Id: sdist.py 84713 2010-09-11 15:31:13Z eric.araujo $', lineno=5, col_offset=15), lineno=5, col_offset=0), Import([alias('os', None)], lineno=7, col_offset=0), Import([alias('string', None)], lineno=8, col_offset=0), Import([alias('sys', None)], lineno=9, col_offset=0), ImportFrom('glob', [alias('glob', None)], 0, lineno=10, col_offset=0), ImportFrom('warnings', [alias('warn', None)], 0, lineno=11, col_offset=0), ImportFrom('distutils.core', [alias('Command', None)], 0, lineno=13, col_offset=0), ImportFrom('distutils', [alias('dir_util', None), alias('dep_util', None), alias('file_util', None), alias('archive_util', None)], 0, lineno=14, col_offset=0), ImportFrom('distutils.text_file', [alias('TextFile', None)], 0, lineno=15, col_offset=0), ImportFrom('distutils.errors', [alias('DistutilsPlatformError', None), alias('DistutilsOptionError', None), alias('DistutilsTemplateError', None)], 0, lineno=16, col_offset=0), ImportFrom('distutils.filelist', [alias('FileList', None)], 0, lineno=18, col_offset=0), ImportFrom('distutils', [alias('log', None)], 0, lineno=19, col_offset=0), ImportFrom('distutils.util', [alias('convert_path', None)], 0, lineno=20, col_offset=0), FunctionDef('show_formats', arguments([], None, None, []), [Expr(Str('Print all possible values for the \'formats\' option (used by\n    the "--help-formats" command-line option).\n    ', lineno=25, col_offset=-1), lineno=25, col_offset=-1), ImportFrom('distutils.fancy_getopt', [alias('FancyGetopt', None)], 0, lineno=26, col_offset=4), ImportFrom('distutils.archive_util', [alias('ARCHIVE_FORMATS', None)], 0, lineno=27, col_offset=4), Assign([Name('formats', Store(), lineno=28, col_offset=4)], List([], Load(), lineno=28, col_offset=14), lineno=28, col_offset=4), For(Name('format', Store(), lineno=29, col_offset=8), Call(Attribute(Name('ARCHIVE_FORMATS', Load(), lineno=29, col_offset=18), 'keys', Load(), lineno=29, col_offset=18), [], [], None, None, lineno=29, col_offset=18), [Expr(Call(Attribute(Name('formats', Load(), lineno=30, col_offset=8), 'append', Load(), lineno=30, col_offset=8), [Tuple([BinOp(Str('formats=', lineno=30, col_offset=24), Add(), Name('format', Load(), lineno=30, col_offset=37), lineno=30, col_offset=24), Name('None', Load(), lineno=30, col_offset=45), Subscript(Subscript(Name('ARCHIVE_FORMATS', Load(), lineno=31, col_offset=24), Index(Name('format', Load(), lineno=31, col_offset=40)), Load(), lineno=31, col_offset=24), Index(Num(2, lineno=31, col_offset=48)), Load(), lineno=31, col_offset=24)], Load(), lineno=30, col_offset=24)], [], None, None, lineno=30, col_offset=8), lineno=30, col_offset=8)], [], lineno=29, col_offset=4), Expr(Call(Attribute(Name('formats', Load(), lineno=32, col_offset=4), 'sort', Load(), lineno=32, col_offset=4), [], [], None, None, lineno=32, col_offset=4), lineno=32, col_offset=4), Expr(Call(Attribute(Call(Name('FancyGetopt', Load(), lineno=33, col_offset=4), [Name('formats', Load(), lineno=33, col_offset=16)], [], None, None, lineno=33, col_offset=4), 'print_help', Load(), lineno=33, col_offset=4), [Str('List of available source distribution formats:', lineno=34, col_offset=8)], [], None, None, lineno=33, col_offset=4), lineno=33, col_offset=4)], [], lineno=22, col_offset=0), ClassDef('sdist', [Name('Command', Load(), lineno=36, col_offset=12)], [Assign([Name('description', Store(), lineno=38, col_offset=4)], Str('create a source distribution (tarball, zip file, etc.)', lineno=38, col_offset=18), lineno=38, col_offset=4), FunctionDef('checking_metadata', arguments([Name('self', Param(), lineno=40, col_offset=26)], None, None, []), [Expr(Str('Callable used for the check sub-command.\n\n        Placed here so user_options can view it', lineno=43, col_offset=-1), lineno=43, col_offset=-1), Return(Attribute(Name('self', Load(), lineno=44, col_offset=15), 'metadata_check', Load(), lineno=44, col_offset=15), lineno=44, col_offset=8)], [], lineno=40, col_offset=4), Assign([Name('user_options', Store(), lineno=46, col_offset=4)], List([Tuple([Str('template=', lineno=47, col_offset=9), Str('t', lineno=47, col_offset=22), Str('name of manifest template file [default: MANIFEST.in]', lineno=48, col_offset=9)], Load(), lineno=47, col_offset=9), Tuple([Str('manifest=', lineno=49, col_offset=9), Str('m', lineno=49, col_offset=22), Str('name of manifest file [default: MANIFEST]', lineno=50, col_offset=9)], Load(), lineno=49, col_offset=9), Tuple([Str('use-defaults', lineno=51, col_offset=9), Name('None', Load(), lineno=51, col_offset=25), Str('include the default file set in the manifest [default; disable with --no-defaults]', lineno=52, col_offset=9)], Load(), lineno=51, col_offset=9), Tuple([Str('no-defaults', lineno=54, col_offset=9), Name('None', Load(), lineno=54, col_offset=24), Str("don't include the default file set", lineno=55, col_offset=9)], Load(), lineno=54, col_offset=9), Tuple([Str('prune', lineno=56, col_offset=9), Name('None', Load(), lineno=56, col_offset=18), Str('specifically exclude files/directories that should not be distributed (build tree, RCS/CVS dirs, etc.) [default; disable with --no-prune]', lineno=57, col_offset=9)], Load(), lineno=56, col_offset=9), Tuple([Str('no-prune', lineno=60, col_offset=9), Name('None', Load(), lineno=60, col_offset=21), Str("don't automatically exclude anything", lineno=61, col_offset=9)], Load(), lineno=60, col_offset=9), Tuple([Str('manifest-only', lineno=62, col_offset=9), Str('o', lineno=62, col_offset=26), Str('just regenerate the manifest and then stop (implies --force-manifest)', lineno=63, col_offset=9)], Load(), lineno=62, col_offset=9), Tuple([Str('force-manifest', lineno=65, col_offset=9), Str('f', lineno=65, col_offset=27), Str('forcibly regenerate the manifest and carry on as usual. Deprecated: now the manifest is always regenerated.', lineno=66, col_offset=9)], Load(), lineno=65, col_offset=9), Tuple([Str('formats=', lineno=68, col_offset=9), Name('None', Load(), lineno=68, col_offset=21), Str('formats for source distribution (comma-separated list)', lineno=69, col_offset=9)], Load(), lineno=68, col_offset=9), Tuple([Str('keep-temp', lineno=70, col_offset=9), Str('k', lineno=70, col_offset=22), BinOp(Str('keep the distribution tree around after creating ', lineno=71, col_offset=9), Add(), Str('archive file(s)', lineno=72, col_offset=9), lineno=71, col_offset=9)], Load(), lineno=70, col_offset=9), Tuple([Str('dist-dir=', lineno=73, col_offset=9), Str('d', lineno=73, col_offset=22), Str('directory to put the source distribution archive(s) in [default: dist]', lineno=74, col_offset=9)], Load(), lineno=73, col_offset=9), Tuple([Str('metadata-check', lineno=76, col_offset=9), Name('None', Load(), lineno=76, col_offset=27), Str('Ensure that all required elements of meta-data are supplied. Warn if any missing. [default]', lineno=77, col_offset=9)], Load(), lineno=76, col_offset=9), Tuple([Str('owner=', lineno=79, col_offset=9), Str('u', lineno=79, col_offset=19), Str('Owner name used when creating a tar file [default: current user]', lineno=80, col_offset=9)], Load(), lineno=79, col_offset=9), Tuple([Str('group=', lineno=81, col_offset=9), Str('g', lineno=81, col_offset=19), Str('Group name used when creating a tar file [default: current group]', lineno=82, col_offset=9)], Load(), lineno=81, col_offset=9)], Load(), lineno=46, col_offset=19), lineno=46, col_offset=4), Assign([Name('boolean_options', Store(), lineno=85, col_offset=4)], List([Str('use-defaults', lineno=85, col_offset=23), Str('prune', lineno=85, col_offset=39), Str('manifest-only', lineno=86, col_offset=23), Str('force-manifest', lineno=86, col_offset=40), Str('keep-temp', lineno=87, col_offset=23), Str('metadata-check', lineno=87, col_offset=36)], Load(), lineno=85, col_offset=22), lineno=85, col_offset=4), Assign([Name('help_options', Store(), lineno=89, col_offset=4)], List([Tuple([Str('help-formats', lineno=90, col_offset=9), Name('None', Load(), lineno=90, col_offset=25), Str('list available distribution formats', lineno=91, col_offset=9), Name('show_formats', Load(), lineno=91, col_offset=48)], Load(), lineno=90, col_offset=9)], Load(), lineno=89, col_offset=19), lineno=89, col_offset=4), Assign([Name('negative_opt', Store(), lineno=94, col_offset=4)], Dict([Str('no-defaults', lineno=94, col_offset=20), Str('no-prune', lineno=95, col_offset=20)], [Str('use-defaults', lineno=94, col_offset=35), Str('prune', lineno=95, col_offset=32)], lineno=94, col_offset=19), lineno=94, col_offset=4), Assign([Name('default_format', Store(), lineno=97, col_offset=4)], Dict([Str('posix', lineno=97, col_offset=22), Str('nt', lineno=98, col_offset=22)], [Str('gztar', lineno=97, col_offset=31), Str('zip', lineno=98, col_offset=28)], lineno=97, col_offset=21), lineno=97, col_offset=4), Assign([Name('sub_commands', Store(), lineno=100, col_offset=4)], List([Tuple([Str('check', lineno=100, col_offset=21), Name('checking_metadata', Load(), lineno=100, col_offset=30)], Load(), lineno=100, col_offset=21)], Load(), lineno=100, col_offset=19), lineno=100, col_offset=4), FunctionDef('initialize_options', arguments([Name('self', Param(), lineno=102, col_offset=27)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=105, col_offset=8), 'template', Store(), lineno=105, col_offset=8)], Name('None', Load(), lineno=105, col_offset=24), lineno=105, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=106, col_offset=8), 'manifest', Store(), lineno=106, col_offset=8)], Name('None', Load(), lineno=106, col_offset=24), lineno=106, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=110, col_offset=8), 'use_defaults', Store(), lineno=110, col_offset=8)], Num(1, lineno=110, col_offset=28), lineno=110, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=111, col_offset=8), 'prune', Store(), lineno=111, col_offset=8)], Num(1, lineno=111, col_offset=21), lineno=111, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=113, col_offset=8), 'manifest_only', Store(), lineno=113, col_offset=8)], Num(0, lineno=113, col_offset=29), lineno=113, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=114, col_offset=8), 'force_manifest', Store(), lineno=114, col_offset=8)], Num(0, lineno=114, col_offset=30), lineno=114, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=116, col_offset=8), 'formats', Store(), lineno=116, col_offset=8)], Name('None', Load(), lineno=116, col_offset=23), lineno=116, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=117, col_offset=8), 'keep_temp', Store(), lineno=117, col_offset=8)], Num(0, lineno=117, col_offset=25), lineno=117, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=118, col_offset=8), 'dist_dir', Store(), lineno=118, col_offset=8)], Name('None', Load(), lineno=118, col_offset=24), lineno=118, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=120, col_offset=8), 'archive_files', Store(), lineno=120, col_offset=8)], Name('None', Load(), lineno=120, col_offset=29), lineno=120, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=121, col_offset=8), 'metadata_check', Store(), lineno=121, col_offset=8)], Num(1, lineno=121, col_offset=30), lineno=121, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=122, col_offset=8), 'owner', Store(), lineno=122, col_offset=8)], Name('None', Load(), lineno=122, col_offset=21), lineno=122, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=123, col_offset=8), 'group', Store(), lineno=123, col_offset=8)], Name('None', Load(), lineno=123, col_offset=21), lineno=123, col_offset=8)], [], lineno=102, col_offset=4), FunctionDef('finalize_options', arguments([Name('self', Param(), lineno=125, col_offset=25)], None, None, []), [If(Compare(Attribute(Name('self', Load(), lineno=126, col_offset=11), 'manifest', Load(), lineno=126, col_offset=11), [Is()], [Name('None', Load(), lineno=126, col_offset=28)], lineno=126, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=127, col_offset=12), 'manifest', Store(), lineno=127, col_offset=12)], Str('MANIFEST', lineno=127, col_offset=28), lineno=127, col_offset=12)], [], lineno=126, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=128, col_offset=11), 'template', Load(), lineno=128, col_offset=11), [Is()], [Name('None', Load(), lineno=128, col_offset=28)], lineno=128, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=129, col_offset=12), 'template', Store(), lineno=129, col_offset=12)], Str('MANIFEST.in', lineno=129, col_offset=28), lineno=129, col_offset=12)], [], lineno=128, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=131, col_offset=8), 'ensure_string_list', Load(), lineno=131, col_offset=8), [Str('formats', lineno=131, col_offset=32)], [], None, None, lineno=131, col_offset=8), lineno=131, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=132, col_offset=11), 'formats', Load(), lineno=132, col_offset=11), [Is()], [Name('None', Load(), lineno=132, col_offset=27)], lineno=132, col_offset=11), [TryExcept([Assign([Attribute(Name('self', Load(), lineno=134, col_offset=16), 'formats', Store(), lineno=134, col_offset=16)], List([Subscript(Attribute(Name('self', Load(), lineno=134, col_offset=32), 'default_format', Load(), lineno=134, col_offset=32), Index(Attribute(Name('os', Load(), lineno=134, col_offset=52), 'name', Load(), lineno=134, col_offset=52)), Load(), lineno=134, col_offset=32)], Load(), lineno=134, col_offset=31), lineno=134, col_offset=16)], [ExceptHandler(Name('KeyError', Load(), lineno=135, col_offset=19), None, [Raise(Name('DistutilsPlatformError', Load(), lineno=136, col_offset=22), BinOp(Str("don't know how to create source distributions ", lineno=137, col_offset=22), Add(), BinOp(Str('on platform %s', lineno=138, col_offset=22), Mod(), Attribute(Name('os', Load(), lineno=138, col_offset=41), 'name', Load(), lineno=138, col_offset=41), lineno=138, col_offset=22), lineno=137, col_offset=22), None, lineno=136, col_offset=16)], lineno=135, col_offset=12)], [], lineno=133, col_offset=12)], [], lineno=132, col_offset=8), Assign([Name('bad_format', Store(), lineno=140, col_offset=8)], Call(Attribute(Name('archive_util', Load(), lineno=140, col_offset=21), 'check_archive_formats', Load(), lineno=140, col_offset=21), [Attribute(Name('self', Load(), lineno=140, col_offset=56), 'formats', Load(), lineno=140, col_offset=56)], [], None, None, lineno=140, col_offset=21), lineno=140, col_offset=8), If(Name('bad_format', Load(), lineno=141, col_offset=11), [Raise(Name('DistutilsOptionError', Load(), lineno=142, col_offset=18), BinOp(Str("unknown archive format '%s'", lineno=143, col_offset=18), Mod(), Name('bad_format', Load(), lineno=143, col_offset=50), lineno=143, col_offset=18), None, lineno=142, col_offset=12)], [], lineno=141, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=145, col_offset=11), 'dist_dir', Load(), lineno=145, col_offset=11), [Is()], [Name('None', Load(), lineno=145, col_offset=28)], lineno=145, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=146, col_offset=12), 'dist_dir', Store(), lineno=146, col_offset=12)], Str('dist', lineno=146, col_offset=28), lineno=146, col_offset=12)], [], lineno=145, col_offset=8)], [], lineno=125, col_offset=4), FunctionDef('run', arguments([Name('self', Param(), lineno=148, col_offset=12)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=151, col_offset=8), 'filelist', Store(), lineno=151, col_offset=8)], Call(Name('FileList', Load(), lineno=151, col_offset=24), [], [], None, None, lineno=151, col_offset=24), lineno=151, col_offset=8), For(Name('cmd_name', Store(), lineno=154, col_offset=12), Call(Attribute(Name('self', Load(), lineno=154, col_offset=24), 'get_sub_commands', Load(), lineno=154, col_offset=24), [], [], None, None, lineno=154, col_offset=24), [Expr(Call(Attribute(Name('self', Load(), lineno=155, col_offset=12), 'run_command', Load(), lineno=155, col_offset=12), [Name('cmd_name', Load(), lineno=155, col_offset=29)], [], None, None, lineno=155, col_offset=12), lineno=155, col_offset=12)], [], lineno=154, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=160, col_offset=8), 'get_file_list', Load(), lineno=160, col_offset=8), [], [], None, None, lineno=160, col_offset=8), lineno=160, col_offset=8), If(Attribute(Name('self', Load(), lineno=163, col_offset=11), 'manifest_only', Load(), lineno=163, col_offset=11), [Return(None, lineno=164, col_offset=12)], [], lineno=163, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=168, col_offset=8), 'make_distribution', Load(), lineno=168, col_offset=8), [], [], None, None, lineno=168, col_offset=8), lineno=168, col_offset=8)], [], lineno=148, col_offset=4), FunctionDef('check_metadata', arguments([Name('self', Param(), lineno=170, col_offset=23)], None, None, []), [Expr(Str('Deprecated API.', lineno=171, col_offset=8), lineno=171, col_offset=8), Expr(Call(Name('warn', Load(), lineno=172, col_offset=8), [Str('distutils.command.sdist.check_metadata is deprecated,               use the check command instead', lineno=173, col_offset=-1), Name('PendingDeprecationWarning', Load(), lineno=173, col_offset=46)], [], None, None, lineno=172, col_offset=8), lineno=172, col_offset=8), Assign([Name('check', Store(), lineno=174, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=174, col_offset=16), 'distribution', Load(), lineno=174, col_offset=16), 'get_command_obj', Load(), lineno=174, col_offset=16), [Str('check', lineno=174, col_offset=50)], [], None, None, lineno=174, col_offset=16), lineno=174, col_offset=8), Expr(Call(Attribute(Name('check', Load(), lineno=175, col_offset=8), 'ensure_finalized', Load(), lineno=175, col_offset=8), [], [], None, None, lineno=175, col_offset=8), lineno=175, col_offset=8), Expr(Call(Attribute(Name('check', Load(), lineno=176, col_offset=8), 'run', Load(), lineno=176, col_offset=8), [], [], None, None, lineno=176, col_offset=8), lineno=176, col_offset=8)], [], lineno=170, col_offset=4), FunctionDef('get_file_list', arguments([Name('self', Param(), lineno=178, col_offset=22)], None, None, []), [Expr(Str("Figure out the list of files to include in the source\n        distribution, and put it in 'self.filelist'.  This might involve\n        reading the manifest template (and writing the manifest), or just\n        reading the manifest, or just using the default file set -- it all\n        depends on the user's options.\n        ", lineno=184, col_offset=-1), lineno=184, col_offset=-1), Assign([Name('template_exists', Store(), lineno=192, col_offset=8)], Call(Attribute(Attribute(Name('os', Load(), lineno=192, col_offset=26), 'path', Load(), lineno=192, col_offset=26), 'isfile', Load(), lineno=192, col_offset=26), [Attribute(Name('self', Load(), lineno=192, col_offset=41), 'template', Load(), lineno=192, col_offset=41)], [], None, None, lineno=192, col_offset=26), lineno=192, col_offset=8), If(UnaryOp(Not(), Name('template_exists', Load(), lineno=193, col_offset=15), lineno=193, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=194, col_offset=12), 'warn', Load(), lineno=194, col_offset=12), [BinOp(BinOp(Str("manifest template '%s' does not exist ", lineno=194, col_offset=23), Add(), Str('(using default file list)', lineno=195, col_offset=24), lineno=194, col_offset=23), Mod(), Attribute(Name('self', Load(), lineno=196, col_offset=24), 'template', Load(), lineno=196, col_offset=24), lineno=194, col_offset=22)], [], None, None, lineno=194, col_offset=12), lineno=194, col_offset=12)], [], lineno=193, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=197, col_offset=8), 'filelist', Load(), lineno=197, col_offset=8), 'findall', Load(), lineno=197, col_offset=8), [], [], None, None, lineno=197, col_offset=8), lineno=197, col_offset=8), If(Attribute(Name('self', Load(), lineno=199, col_offset=11), 'use_defaults', Load(), lineno=199, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=200, col_offset=12), 'add_defaults', Load(), lineno=200, col_offset=12), [], [], None, None, lineno=200, col_offset=12), lineno=200, col_offset=12)], [], lineno=199, col_offset=8), If(Name('template_exists', Load(), lineno=202, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=203, col_offset=12), 'read_template', Load(), lineno=203, col_offset=12), [], [], None, None, lineno=203, col_offset=12), lineno=203, col_offset=12)], [], lineno=202, col_offset=8), If(Attribute(Name('self', Load(), lineno=205, col_offset=11), 'prune', Load(), lineno=205, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=206, col_offset=12), 'prune_file_list', Load(), lineno=206, col_offset=12), [], [], None, None, lineno=206, col_offset=12), lineno=206, col_offset=12)], [], lineno=205, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=208, col_offset=8), 'filelist', Load(), lineno=208, col_offset=8), 'sort', Load(), lineno=208, col_offset=8), [], [], None, None, lineno=208, col_offset=8), lineno=208, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=209, col_offset=8), 'filelist', Load(), lineno=209, col_offset=8), 'remove_duplicates', Load(), lineno=209, col_offset=8), [], [], None, None, lineno=209, col_offset=8), lineno=209, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=210, col_offset=8), 'write_manifest', Load(), lineno=210, col_offset=8), [], [], None, None, lineno=210, col_offset=8), lineno=210, col_offset=8)], [], lineno=178, col_offset=4), FunctionDef('add_defaults', arguments([Name('self', Param(), lineno=212, col_offset=21)], None, None, []), [Expr(Str("Add all the default files to self.filelist:\n          - README or README.txt\n          - setup.py\n          - test/test*.py\n          - all pure Python modules mentioned in setup script\n          - all files pointed by package_data (build_py)\n          - all files defined in data_files.\n          - all files defined as scripts.\n          - all C sources listed as part of extensions or C libraries\n            in the setup script (doesn't catch C headers!)\n        Warns if (README or README.txt) or setup.py are missing; everything\n        else is optional.\n        ", lineno=225, col_offset=-1), lineno=225, col_offset=-1), Assign([Name('standards', Store(), lineno=227, col_offset=8)], List([Tuple([Str('README', lineno=227, col_offset=22), Str('README.txt', lineno=227, col_offset=32)], Load(), lineno=227, col_offset=22), Attribute(Attribute(Name('self', Load(), lineno=227, col_offset=47), 'distribution', Load(), lineno=227, col_offset=47), 'script_name', Load(), lineno=227, col_offset=47)], Load(), lineno=227, col_offset=20), lineno=227, col_offset=8), For(Name('fn', Store(), lineno=228, col_offset=12), Name('standards', Load(), lineno=228, col_offset=18), [If(Call(Name('isinstance', Load(), lineno=229, col_offset=15), [Name('fn', Load(), lineno=229, col_offset=26), Name('tuple', Load(), lineno=229, col_offset=30)], [], None, None, lineno=229, col_offset=15), [Assign([Name('alts', Store(), lineno=230, col_offset=16)], Name('fn', Load(), lineno=230, col_offset=23), lineno=230, col_offset=16), Assign([Name('got_it', Store(), lineno=231, col_offset=16)], Num(0, lineno=231, col_offset=25), lineno=231, col_offset=16), For(Name('fn', Store(), lineno=232, col_offset=20), Name('alts', Load(), lineno=232, col_offset=26), [If(Call(Attribute(Attribute(Name('os', Load(), lineno=233, col_offset=23), 'path', Load(), lineno=233, col_offset=23), 'exists', Load(), lineno=233, col_offset=23), [Name('fn', Load(), lineno=233, col_offset=38)], [], None, None, lineno=233, col_offset=23), [Assign([Name('got_it', Store(), lineno=234, col_offset=24)], Num(1, lineno=234, col_offset=33), lineno=234, col_offset=24), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=235, col_offset=24), 'filelist', Load(), lineno=235, col_offset=24), 'append', Load(), lineno=235, col_offset=24), [Name('fn', Load(), lineno=235, col_offset=45)], [], None, None, lineno=235, col_offset=24), lineno=235, col_offset=24), Break( lineno=236, col_offset=24)], [], lineno=233, col_offset=20)], [], lineno=232, col_offset=16), If(UnaryOp(Not(), Name('got_it', Load(), lineno=238, col_offset=23), lineno=238, col_offset=19), [Expr(Call(Attribute(Name('self', Load(), lineno=239, col_offset=20), 'warn', Load(), lineno=239, col_offset=20), [BinOp(Str('standard file not found: should have one of ', lineno=239, col_offset=30), Add(), Call(Attribute(Name('string', Load(), lineno=240, col_offset=30), 'join', Load(), lineno=240, col_offset=30), [Name('alts', Load(), lineno=240, col_offset=42), Str(', ', lineno=240, col_offset=48)], [], None, None, lineno=240, col_offset=30), lineno=239, col_offset=30)], [], None, None, lineno=239, col_offset=20), lineno=239, col_offset=20)], [], lineno=238, col_offset=16)], [If(Call(Attribute(Attribute(Name('os', Load(), lineno=242, col_offset=19), 'path', Load(), lineno=242, col_offset=19), 'exists', Load(), lineno=242, col_offset=19), [Name('fn', Load(), lineno=242, col_offset=34)], [], None, None, lineno=242, col_offset=19), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=243, col_offset=20), 'filelist', Load(), lineno=243, col_offset=20), 'append', Load(), lineno=243, col_offset=20), [Name('fn', Load(), lineno=243, col_offset=41)], [], None, None, lineno=243, col_offset=20), lineno=243, col_offset=20)], [Expr(Call(Attribute(Name('self', Load(), lineno=245, col_offset=20), 'warn', Load(), lineno=245, col_offset=20), [BinOp(Str("standard file '%s' not found", lineno=245, col_offset=30), Mod(), Name('fn', Load(), lineno=245, col_offset=63), lineno=245, col_offset=30)], [], None, None, lineno=245, col_offset=20), lineno=245, col_offset=20)], lineno=242, col_offset=16)], lineno=229, col_offset=12)], [], lineno=228, col_offset=8), Assign([Name('optional', Store(), lineno=247, col_offset=8)], List([Str('test/test*.py', lineno=247, col_offset=20), Str('setup.cfg', lineno=247, col_offset=37)], Load(), lineno=247, col_offset=19), lineno=247, col_offset=8), For(Name('pattern', Store(), lineno=248, col_offset=12), Name('optional', Load(), lineno=248, col_offset=23), [Assign([Name('files', Store(), lineno=249, col_offset=12)], Call(Name('filter', Load(), lineno=249, col_offset=20), [Attribute(Attribute(Name('os', Load(), lineno=249, col_offset=27), 'path', Load(), lineno=249, col_offset=27), 'isfile', Load(), lineno=249, col_offset=27), Call(Name('glob', Load(), lineno=249, col_offset=43), [Name('pattern', Load(), lineno=249, col_offset=48)], [], None, None, lineno=249, col_offset=43)], [], None, None, lineno=249, col_offset=20), lineno=249, col_offset=12), If(Name('files', Load(), lineno=250, col_offset=15), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=251, col_offset=16), 'filelist', Load(), lineno=251, col_offset=16), 'extend', Load(), lineno=251, col_offset=16), [Name('files', Load(), lineno=251, col_offset=37)], [], None, None, lineno=251, col_offset=16), lineno=251, col_offset=16)], [], lineno=250, col_offset=12)], [], lineno=248, col_offset=8), Assign([Name('build_py', Store(), lineno=256, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=256, col_offset=19), 'get_finalized_command', Load(), lineno=256, col_offset=19), [Str('build_py', lineno=256, col_offset=46)], [], None, None, lineno=256, col_offset=19), lineno=256, col_offset=8), If(Call(Attribute(Attribute(Name('self', Load(), lineno=259, col_offset=11), 'distribution', Load(), lineno=259, col_offset=11), 'has_pure_modules', Load(), lineno=259, col_offset=11), [], [], None, None, lineno=259, col_offset=11), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=260, col_offset=12), 'filelist', Load(), lineno=260, col_offset=12), 'extend', Load(), lineno=260, col_offset=12), [Call(Attribute(Name('build_py', Load(), lineno=260, col_offset=33), 'get_source_files', Load(), lineno=260, col_offset=33), [], [], None, None, lineno=260, col_offset=33)], [], None, None, lineno=260, col_offset=12), lineno=260, col_offset=12)], [], lineno=259, col_offset=8), For(Tuple([Name('pkg', Store(), lineno=264, col_offset=12), Name('src_dir', Store(), lineno=264, col_offset=17), Name('build_dir', Store(), lineno=264, col_offset=26), Name('filenames', Store(), lineno=264, col_offset=37)], Store(), lineno=264, col_offset=12), Attribute(Name('build_py', Load(), lineno=264, col_offset=50), 'data_files', Load(), lineno=264, col_offset=50), [For(Name('filename', Store(), lineno=265, col_offset=16), Name('filenames', Load(), lineno=265, col_offset=28), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=266, col_offset=16), 'filelist', Load(), lineno=266, col_offset=16), 'append', Load(), lineno=266, col_offset=16), [Call(Attribute(Attribute(Name('os', Load(), lineno=266, col_offset=37), 'path', Load(), lineno=266, col_offset=37), 'join', Load(), lineno=266, col_offset=37), [Name('src_dir', Load(), lineno=266, col_offset=50), Name('filename', Load(), lineno=266, col_offset=59)], [], None, None, lineno=266, col_offset=37)], [], None, None, lineno=266, col_offset=16), lineno=266, col_offset=16)], [], lineno=265, col_offset=12)], [], lineno=264, col_offset=8), If(Call(Attribute(Attribute(Name('self', Load(), lineno=269, col_offset=11), 'distribution', Load(), lineno=269, col_offset=11), 'has_data_files', Load(), lineno=269, col_offset=11), [], [], None, None, lineno=269, col_offset=11), [For(Name('item', Store(), lineno=270, col_offset=16), Attribute(Attribute(Name('self', Load(), lineno=270, col_offset=24), 'distribution', Load(), lineno=270, col_offset=24), 'data_files', Load(), lineno=270, col_offset=24), [If(Call(Name('isinstance', Load(), lineno=271, col_offset=19), [Name('item', Load(), lineno=271, col_offset=30), Name('str', Load(), lineno=271, col_offset=36)], [], None, None, lineno=271, col_offset=19), [Assign([Name('item', Store(), lineno=272, col_offset=20)], Call(Name('convert_path', Load(), lineno=272, col_offset=27), [Name('item', Load(), lineno=272, col_offset=40)], [], None, None, lineno=272, col_offset=27), lineno=272, col_offset=20), If(Call(Attribute(Attribute(Name('os', Load(), lineno=273, col_offset=23), 'path', Load(), lineno=273, col_offset=23), 'isfile', Load(), lineno=273, col_offset=23), [Name('item', Load(), lineno=273, col_offset=38)], [], None, None, lineno=273, col_offset=23), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=274, col_offset=24), 'filelist', Load(), lineno=274, col_offset=24), 'append', Load(), lineno=274, col_offset=24), [Name('item', Load(), lineno=274, col_offset=45)], [], None, None, lineno=274, col_offset=24), lineno=274, col_offset=24)], [], lineno=273, col_offset=20)], [Assign([Tuple([Name('dirname', Store(), lineno=276, col_offset=20), Name('filenames', Store(), lineno=276, col_offset=29)], Store(), lineno=276, col_offset=20)], Name('item', Load(), lineno=276, col_offset=41), lineno=276, col_offset=20), For(Name('f', Store(), lineno=277, col_offset=24), Name('filenames', Load(), lineno=277, col_offset=29), [Assign([Name('f', Store(), lineno=278, col_offset=24)], Call(Name('convert_path', Load(), lineno=278, col_offset=28), [Name('f', Load(), lineno=278, col_offset=41)], [], None, None, lineno=278, col_offset=28), lineno=278, col_offset=24), If(Call(Attribute(Attribute(Name('os', Load(), lineno=279, col_offset=27), 'path', Load(), lineno=279, col_offset=27), 'isfile', Load(), lineno=279, col_offset=27), [Name('f', Load(), lineno=279, col_offset=42)], [], None, None, lineno=279, col_offset=27), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=280, col_offset=28), 'filelist', Load(), lineno=280, col_offset=28), 'append', Load(), lineno=280, col_offset=28), [Name('f', Load(), lineno=280, col_offset=49)], [], None, None, lineno=280, col_offset=28), lineno=280, col_offset=28)], [], lineno=279, col_offset=24)], [], lineno=277, col_offset=20)], lineno=271, col_offset=16)], [], lineno=270, col_offset=12)], [], lineno=269, col_offset=8), If(Call(Attribute(Attribute(Name('self', Load(), lineno=282, col_offset=11), 'distribution', Load(), lineno=282, col_offset=11), 'has_ext_modules', Load(), lineno=282, col_offset=11), [], [], None, None, lineno=282, col_offset=11), [Assign([Name('build_ext', Store(), lineno=283, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=283, col_offset=24), 'get_finalized_command', Load(), lineno=283, col_offset=24), [Str('build_ext', lineno=283, col_offset=51)], [], None, None, lineno=283, col_offset=24), lineno=283, col_offset=12), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=284, col_offset=12), 'filelist', Load(), lineno=284, col_offset=12), 'extend', Load(), lineno=284, col_offset=12), [Call(Attribute(Name('build_ext', Load(), lineno=284, col_offset=33), 'get_source_files', Load(), lineno=284, col_offset=33), [], [], None, None, lineno=284, col_offset=33)], [], None, None, lineno=284, col_offset=12), lineno=284, col_offset=12)], [], lineno=282, col_offset=8), If(Call(Attribute(Attribute(Name('self', Load(), lineno=286, col_offset=11), 'distribution', Load(), lineno=286, col_offset=11), 'has_c_libraries', Load(), lineno=286, col_offset=11), [], [], None, None, lineno=286, col_offset=11), [Assign([Name('build_clib', Store(), lineno=287, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=287, col_offset=25), 'get_finalized_command', Load(), lineno=287, col_offset=25), [Str('build_clib', lineno=287, col_offset=52)], [], None, None, lineno=287, col_offset=25), lineno=287, col_offset=12), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=288, col_offset=12), 'filelist', Load(), lineno=288, col_offset=12), 'extend', Load(), lineno=288, col_offset=12), [Call(Attribute(Name('build_clib', Load(), lineno=288, col_offset=33), 'get_source_files', Load(), lineno=288, col_offset=33), [], [], None, None, lineno=288, col_offset=33)], [], None, None, lineno=288, col_offset=12), lineno=288, col_offset=12)], [], lineno=286, col_offset=8), If(Call(Attribute(Attribute(Name('self', Load(), lineno=290, col_offset=11), 'distribution', Load(), lineno=290, col_offset=11), 'has_scripts', Load(), lineno=290, col_offset=11), [], [], None, None, lineno=290, col_offset=11), [Assign([Name('build_scripts', Store(), lineno=291, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=291, col_offset=28), 'get_finalized_command', Load(), lineno=291, col_offset=28), [Str('build_scripts', lineno=291, col_offset=55)], [], None, None, lineno=291, col_offset=28), lineno=291, col_offset=12), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=292, col_offset=12), 'filelist', Load(), lineno=292, col_offset=12), 'extend', Load(), lineno=292, col_offset=12), [Call(Attribute(Name('build_scripts', Load(), lineno=292, col_offset=33), 'get_source_files', Load(), lineno=292, col_offset=33), [], [], None, None, lineno=292, col_offset=33)], [], None, None, lineno=292, col_offset=12), lineno=292, col_offset=12)], [], lineno=290, col_offset=8)], [], lineno=212, col_offset=4), FunctionDef('read_template', arguments([Name('self', Param(), lineno=294, col_offset=22)], None, None, []), [Expr(Str('Read and parse manifest template file named by self.template.\n\n        (usually "MANIFEST.in") The parsing and processing is done by\n        \'self.filelist\', which updates itself accordingly.\n        ', lineno=299, col_offset=-1), lineno=299, col_offset=-1), Expr(Call(Attribute(Name('log', Load(), lineno=300, col_offset=8), 'info', Load(), lineno=300, col_offset=8), [Str("reading manifest template '%s'", lineno=300, col_offset=17), Attribute(Name('self', Load(), lineno=300, col_offset=51), 'template', Load(), lineno=300, col_offset=51)], [], None, None, lineno=300, col_offset=8), lineno=300, col_offset=8), Assign([Name('template', Store(), lineno=301, col_offset=8)], Call(Name('TextFile', Load(), lineno=301, col_offset=19), [Attribute(Name('self', Load(), lineno=301, col_offset=28), 'template', Load(), lineno=301, col_offset=28)], [keyword('strip_comments', Num(1, lineno=302, col_offset=43)), keyword('skip_blanks', Num(1, lineno=303, col_offset=40)), keyword('join_lines', Num(1, lineno=304, col_offset=39)), keyword('lstrip_ws', Num(1, lineno=305, col_offset=38)), keyword('rstrip_ws', Num(1, lineno=306, col_offset=38)), keyword('collapse_join', Num(1, lineno=307, col_offset=42))], None, None, lineno=301, col_offset=19), lineno=301, col_offset=8), While(Num(1, lineno=309, col_offset=14), [Assign([Name('line', Store(), lineno=310, col_offset=12)], Call(Attribute(Name('template', Load(), lineno=310, col_offset=19), 'readline', Load(), lineno=310, col_offset=19), [], [], None, None, lineno=310, col_offset=19), lineno=310, col_offset=12), If(Compare(Name('line', Load(), lineno=311, col_offset=15), [Is()], [Name('None', Load(), lineno=311, col_offset=23)], lineno=311, col_offset=15), [Break( lineno=312, col_offset=16)], [], lineno=311, col_offset=12), TryExcept([Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=315, col_offset=16), 'filelist', Load(), lineno=315, col_offset=16), 'process_template_line', Load(), lineno=315, col_offset=16), [Name('line', Load(), lineno=315, col_offset=52)], [], None, None, lineno=315, col_offset=16), lineno=315, col_offset=16)], [ExceptHandler(Name('DistutilsTemplateError', Load(), lineno=316, col_offset=19), Name('msg', Store(), lineno=316, col_offset=43), [Expr(Call(Attribute(Name('self', Load(), lineno=317, col_offset=16), 'warn', Load(), lineno=317, col_offset=16), [BinOp(Str('%s, line %d: %s', lineno=317, col_offset=26), Mod(), Tuple([Attribute(Name('template', Load(), lineno=317, col_offset=47), 'filename', Load(), lineno=317, col_offset=47), Attribute(Name('template', Load(), lineno=318, col_offset=47), 'current_line', Load(), lineno=318, col_offset=47), Name('msg', Load(), lineno=319, col_offset=47)], Load(), lineno=317, col_offset=47), lineno=317, col_offset=26)], [], None, None, lineno=317, col_offset=16), lineno=317, col_offset=16)], lineno=316, col_offset=12)], [], lineno=314, col_offset=12)], [], lineno=309, col_offset=8)], [], lineno=294, col_offset=4), FunctionDef('prune_file_list', arguments([Name('self', Param(), lineno=321, col_offset=24)], None, None, []), [Expr(Str('Prune off branches that might slip into the file list as created\n        by \'read_template()\', but really don\'t belong there:\n          * the build tree (typically "build")\n          * the release tree itself (only an issue if we ran "sdist"\n            previously with --keep-temp, or it aborted)\n          * any RCS, CVS, .svn, .hg, .git, .bzr, _darcs directories\n        ', lineno=328, col_offset=-1), lineno=328, col_offset=-1), Assign([Name('build', Store(), lineno=329, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=329, col_offset=16), 'get_finalized_command', Load(), lineno=329, col_offset=16), [Str('build', lineno=329, col_offset=43)], [], None, None, lineno=329, col_offset=16), lineno=329, col_offset=8), Assign([Name('base_dir', Store(), lineno=330, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=330, col_offset=19), 'distribution', Load(), lineno=330, col_offset=19), 'get_fullname', Load(), lineno=330, col_offset=19), [], [], None, None, lineno=330, col_offset=19), lineno=330, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=332, col_offset=8), 'filelist', Load(), lineno=332, col_offset=8), 'exclude_pattern', Load(), lineno=332, col_offset=8), [Name('None', Load(), lineno=332, col_offset=38)], [keyword('prefix', Attribute(Name('build', Load(), lineno=332, col_offset=51), 'build_base', Load(), lineno=332, col_offset=51))], None, None, lineno=332, col_offset=8), lineno=332, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=333, col_offset=8), 'filelist', Load(), lineno=333, col_offset=8), 'exclude_pattern', Load(), lineno=333, col_offset=8), [Name('None', Load(), lineno=333, col_offset=38)], [keyword('prefix', Name('base_dir', Load(), lineno=333, col_offset=51))], None, None, lineno=333, col_offset=8), lineno=333, col_offset=8), If(Compare(Attribute(Name('sys', Load(), lineno=337, col_offset=11), 'platform', Load(), lineno=337, col_offset=11), [Eq()], [Str('win32', lineno=337, col_offset=27)], lineno=337, col_offset=11), [Assign([Name('seps', Store(), lineno=338, col_offset=12)], Str('/|\\\\', lineno=338, col_offset=19), lineno=338, col_offset=12)], [Assign([Name('seps', Store(), lineno=340, col_offset=12)], Str('/', lineno=340, col_offset=19), lineno=340, col_offset=12)], lineno=337, col_offset=8), Assign([Name('vcs_dirs', Store(), lineno=342, col_offset=8)], List([Str('RCS', lineno=342, col_offset=20), Str('CVS', lineno=342, col_offset=27), Str('\\.svn', lineno=342, col_offset=34), Str('\\.hg', lineno=342, col_offset=44), Str('\\.git', lineno=342, col_offset=53), Str('\\.bzr', lineno=342, col_offset=63), Str('_darcs', lineno=343, col_offset=20)], Load(), lineno=342, col_offset=19), lineno=342, col_offset=8), Assign([Name('vcs_ptrn', Store(), lineno=344, col_offset=8)], BinOp(Str('(^|%s)(%s)(%s).*', lineno=344, col_offset=19), Mod(), Tuple([Name('seps', Load(), lineno=344, col_offset=42), Call(Attribute(Str('|', lineno=344, col_offset=48), 'join', Load(), lineno=344, col_offset=48), [Name('vcs_dirs', Load(), lineno=344, col_offset=57)], [], None, None, lineno=344, col_offset=48), Name('seps', Load(), lineno=344, col_offset=68)], Load(), lineno=344, col_offset=42), lineno=344, col_offset=19), lineno=344, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=345, col_offset=8), 'filelist', Load(), lineno=345, col_offset=8), 'exclude_pattern', Load(), lineno=345, col_offset=8), [Name('vcs_ptrn', Load(), lineno=345, col_offset=38)], [keyword('is_regex', Num(1, lineno=345, col_offset=57))], None, None, lineno=345, col_offset=8), lineno=345, col_offset=8)], [], lineno=321, col_offset=4), FunctionDef('write_manifest', arguments([Name('self', Param(), lineno=347, col_offset=23)], None, None, []), [Expr(Str("Write the file list in 'self.filelist' (presumably as filled in\n        by 'add_defaults()' and 'read_template()') to the manifest file\n        named by 'self.manifest'.\n        ", lineno=351, col_offset=-1), lineno=351, col_offset=-1), If(Call(Attribute(Attribute(Name('os', Load(), lineno=352, col_offset=11), 'path', Load(), lineno=352, col_offset=11), 'isfile', Load(), lineno=352, col_offset=11), [Attribute(Name('self', Load(), lineno=352, col_offset=26), 'manifest', Load(), lineno=352, col_offset=26)], [], None, None, lineno=352, col_offset=11), [Assign([Name('fp', Store(), lineno=353, col_offset=12)], Call(Name('open', Load(), lineno=353, col_offset=17), [Attribute(Name('self', Load(), lineno=353, col_offset=22), 'manifest', Load(), lineno=353, col_offset=22)], [], None, None, lineno=353, col_offset=17), lineno=353, col_offset=12), TryFinally([Assign([Name('first_line', Store(), lineno=355, col_offset=16)], Call(Attribute(Name('fp', Load(), lineno=355, col_offset=29), 'readline', Load(), lineno=355, col_offset=29), [], [], None, None, lineno=355, col_offset=29), lineno=355, col_offset=16)], [Expr(Call(Attribute(Name('fp', Load(), lineno=357, col_offset=16), 'close', Load(), lineno=357, col_offset=16), [], [], None, None, lineno=357, col_offset=16), lineno=357, col_offset=16)], lineno=354, col_offset=12), If(Compare(Name('first_line', Load(), lineno=359, col_offset=15), [NotEq()], [Str('# file GENERATED by distutils, do NOT edit\n', lineno=359, col_offset=29)], lineno=359, col_offset=15), [Expr(Call(Attribute(Name('log', Load(), lineno=360, col_offset=16), 'info', Load(), lineno=360, col_offset=16), [BinOp(Str("not writing to manually maintained manifest file '%s'", lineno=360, col_offset=25), Mod(), Attribute(Name('self', Load(), lineno=361, col_offset=48), 'manifest', Load(), lineno=361, col_offset=48), lineno=360, col_offset=25)], [], None, None, lineno=360, col_offset=16), lineno=360, col_offset=16), Return(None, lineno=362, col_offset=16)], [], lineno=359, col_offset=12)], [], lineno=352, col_offset=8), Assign([Name('content', Store(), lineno=364, col_offset=8)], Subscript(Attribute(Attribute(Name('self', Load(), lineno=364, col_offset=18), 'filelist', Load(), lineno=364, col_offset=18), 'files', Load(), lineno=364, col_offset=18), Slice(None, None, None), Load(), lineno=364, col_offset=18), lineno=364, col_offset=8), Expr(Call(Attribute(Name('content', Load(), lineno=365, col_offset=8), 'insert', Load(), lineno=365, col_offset=8), [Num(0, lineno=365, col_offset=23), Str('# file GENERATED by distutils, do NOT edit', lineno=365, col_offset=26)], [], None, None, lineno=365, col_offset=8), lineno=365, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=366, col_offset=8), 'execute', Load(), lineno=366, col_offset=8), [Attribute(Name('file_util', Load(), lineno=366, col_offset=21), 'write_file', Load(), lineno=366, col_offset=21), Tuple([Attribute(Name('self', Load(), lineno=366, col_offset=44), 'manifest', Load(), lineno=366, col_offset=44), Name('content', Load(), lineno=366, col_offset=59)], Load(), lineno=366, col_offset=44), BinOp(Str("writing manifest file '%s'", lineno=367, col_offset=21), Mod(), Attribute(Name('self', Load(), lineno=367, col_offset=52), 'manifest', Load(), lineno=367, col_offset=52), lineno=367, col_offset=21)], [], None, None, lineno=366, col_offset=8), lineno=366, col_offset=8)], [], lineno=347, col_offset=4), FunctionDef('read_manifest', arguments([Name('self', Param(), lineno=369, col_offset=22)], None, None, []), [Expr(Str("Read the manifest file (named by 'self.manifest') and use it to\n        fill in 'self.filelist', the list of files to include in the source\n        distribution.\n        ", lineno=373, col_offset=-1), lineno=373, col_offset=-1), Expr(Call(Attribute(Name('log', Load(), lineno=374, col_offset=8), 'info', Load(), lineno=374, col_offset=8), [Str("reading manifest file '%s'", lineno=374, col_offset=17), Attribute(Name('self', Load(), lineno=374, col_offset=47), 'manifest', Load(), lineno=374, col_offset=47)], [], None, None, lineno=374, col_offset=8), lineno=374, col_offset=8), Assign([Name('manifest', Store(), lineno=375, col_offset=8)], Call(Name('open', Load(), lineno=375, col_offset=19), [Attribute(Name('self', Load(), lineno=375, col_offset=24), 'manifest', Load(), lineno=375, col_offset=24)], [], None, None, lineno=375, col_offset=19), lineno=375, col_offset=8), While(Num(1, lineno=376, col_offset=14), [Assign([Name('line', Store(), lineno=377, col_offset=12)], Call(Attribute(Name('manifest', Load(), lineno=377, col_offset=19), 'readline', Load(), lineno=377, col_offset=19), [], [], None, None, lineno=377, col_offset=19), lineno=377, col_offset=12), If(Compare(Name('line', Load(), lineno=378, col_offset=15), [Eq()], [Str('', lineno=378, col_offset=23)], lineno=378, col_offset=15), [Break( lineno=379, col_offset=16)], [], lineno=378, col_offset=12), If(Compare(Subscript(Name('line', Load(), lineno=380, col_offset=15), Index(Num(-1, lineno=380, col_offset=21)), Load(), lineno=380, col_offset=15), [Eq()], [Str('\n', lineno=380, col_offset=27)], lineno=380, col_offset=15), [Assign([Name('line', Store(), lineno=381, col_offset=16)], Subscript(Name('line', Load(), lineno=381, col_offset=23), Slice(Num(0, lineno=381, col_offset=28), Num(-1, lineno=381, col_offset=31), None), Load(), lineno=381, col_offset=23), lineno=381, col_offset=16)], [], lineno=380, col_offset=12), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=382, col_offset=12), 'filelist', Load(), lineno=382, col_offset=12), 'append', Load(), lineno=382, col_offset=12), [Name('line', Load(), lineno=382, col_offset=33)], [], None, None, lineno=382, col_offset=12), lineno=382, col_offset=12)], [], lineno=376, col_offset=8), Expr(Call(Attribute(Name('manifest', Load(), lineno=383, col_offset=8), 'close', Load(), lineno=383, col_offset=8), [], [], None, None, lineno=383, col_offset=8), lineno=383, col_offset=8)], [], lineno=369, col_offset=4), FunctionDef('make_release_tree', arguments([Name('self', Param(), lineno=385, col_offset=26), Name('base_dir', Param(), lineno=385, col_offset=32), Name('files', Param(), lineno=385, col_offset=42)], None, None, []), [Expr(Str("Create the directory tree that will become the source\n        distribution archive.  All directories implied by the filenames in\n        'files' are created under 'base_dir', and then we hard link or copy\n        (if hard linking is unavailable) those files into place.\n        Essentially, this duplicates the developer's source tree, but in a\n        directory named after the distribution, containing only the files\n        to be distributed.\n        ", lineno=393, col_offset=-1), lineno=393, col_offset=-1), Expr(Call(Attribute(Name('self', Load(), lineno=397, col_offset=8), 'mkpath', Load(), lineno=397, col_offset=8), [Name('base_dir', Load(), lineno=397, col_offset=20)], [], None, None, lineno=397, col_offset=8), lineno=397, col_offset=8), Expr(Call(Attribute(Name('dir_util', Load(), lineno=398, col_offset=8), 'create_tree', Load(), lineno=398, col_offset=8), [Name('base_dir', Load(), lineno=398, col_offset=29), Name('files', Load(), lineno=398, col_offset=39)], [keyword('dry_run', Attribute(Name('self', Load(), lineno=398, col_offset=54), 'dry_run', Load(), lineno=398, col_offset=54))], None, None, lineno=398, col_offset=8), lineno=398, col_offset=8), If(Call(Name('hasattr', Load(), lineno=407, col_offset=11), [Name('os', Load(), lineno=407, col_offset=19), Str('link', lineno=407, col_offset=23)], [], None, None, lineno=407, col_offset=11), [Assign([Name('link', Store(), lineno=408, col_offset=12)], Str('hard', lineno=408, col_offset=19), lineno=408, col_offset=12), Assign([Name('msg', Store(), lineno=409, col_offset=12)], BinOp(Str('making hard links in %s...', lineno=409, col_offset=18), Mod(), Name('base_dir', Load(), lineno=409, col_offset=49), lineno=409, col_offset=18), lineno=409, col_offset=12)], [Assign([Name('link', Store(), lineno=411, col_offset=12)], Name('None', Load(), lineno=411, col_offset=19), lineno=411, col_offset=12), Assign([Name('msg', Store(), lineno=412, col_offset=12)], BinOp(Str('copying files to %s...', lineno=412, col_offset=18), Mod(), Name('base_dir', Load(), lineno=412, col_offset=45), lineno=412, col_offset=18), lineno=412, col_offset=12)], lineno=407, col_offset=8), If(UnaryOp(Not(), Name('files', Load(), lineno=414, col_offset=15), lineno=414, col_offset=11), [Expr(Call(Attribute(Name('log', Load(), lineno=415, col_offset=12), 'warn', Load(), lineno=415, col_offset=12), [Str('no files to distribute -- empty manifest?', lineno=415, col_offset=21)], [], None, None, lineno=415, col_offset=12), lineno=415, col_offset=12)], [Expr(Call(Attribute(Name('log', Load(), lineno=417, col_offset=12), 'info', Load(), lineno=417, col_offset=12), [Name('msg', Load(), lineno=417, col_offset=21)], [], None, None, lineno=417, col_offset=12), lineno=417, col_offset=12)], lineno=414, col_offset=8), For(Name('file', Store(), lineno=418, col_offset=12), Name('files', Load(), lineno=418, col_offset=20), [If(UnaryOp(Not(), Call(Attribute(Attribute(Name('os', Load(), lineno=419, col_offset=19), 'path', Load(), lineno=419, col_offset=19), 'isfile', Load(), lineno=419, col_offset=19), [Name('file', Load(), lineno=419, col_offset=34)], [], None, None, lineno=419, col_offset=19), lineno=419, col_offset=15), [Expr(Call(Attribute(Name('log', Load(), lineno=420, col_offset=16), 'warn', Load(), lineno=420, col_offset=16), [BinOp(Str("'%s' not a regular file -- skipping", lineno=420, col_offset=25), Mod(), Name('file', Load(), lineno=420, col_offset=65), lineno=420, col_offset=25)], [], None, None, lineno=420, col_offset=16), lineno=420, col_offset=16)], [Assign([Name('dest', Store(), lineno=422, col_offset=16)], Call(Attribute(Attribute(Name('os', Load(), lineno=422, col_offset=23), 'path', Load(), lineno=422, col_offset=23), 'join', Load(), lineno=422, col_offset=23), [Name('base_dir', Load(), lineno=422, col_offset=36), Name('file', Load(), lineno=422, col_offset=46)], [], None, None, lineno=422, col_offset=23), lineno=422, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=423, col_offset=16), 'copy_file', Load(), lineno=423, col_offset=16), [Name('file', Load(), lineno=423, col_offset=31), Name('dest', Load(), lineno=423, col_offset=37)], [keyword('link', Name('link', Load(), lineno=423, col_offset=48))], None, None, lineno=423, col_offset=16), lineno=423, col_offset=16)], lineno=419, col_offset=12)], [], lineno=418, col_offset=8), Expr(Call(Attribute(Attribute(Attribute(Name('self', Load(), lineno=425, col_offset=8), 'distribution', Load(), lineno=425, col_offset=8), 'metadata', Load(), lineno=425, col_offset=8), 'write_pkg_info', Load(), lineno=425, col_offset=8), [Name('base_dir', Load(), lineno=425, col_offset=50)], [], None, None, lineno=425, col_offset=8), lineno=425, col_offset=8)], [], lineno=385, col_offset=4), FunctionDef('make_distribution', arguments([Name('self', Param(), lineno=427, col_offset=26)], None, None, []), [Expr(Str("Create the source distribution(s).  First, we create the release\n        tree with 'make_release_tree()'; then, we create all required\n        archive files (according to 'self.formats') from the release tree.\n        Finally, we clean up by blowing away the release tree (unless\n        'self.keep_temp' is true).  The list of archive files created is\n        stored so it can be retrieved later by 'get_archive_files()'.\n        ", lineno=434, col_offset=-1), lineno=434, col_offset=-1), Assign([Name('base_dir', Store(), lineno=437, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=437, col_offset=19), 'distribution', Load(), lineno=437, col_offset=19), 'get_fullname', Load(), lineno=437, col_offset=19), [], [], None, None, lineno=437, col_offset=19), lineno=437, col_offset=8), Assign([Name('base_name', Store(), lineno=438, col_offset=8)], Call(Attribute(Attribute(Name('os', Load(), lineno=438, col_offset=20), 'path', Load(), lineno=438, col_offset=20), 'join', Load(), lineno=438, col_offset=20), [Attribute(Name('self', Load(), lineno=438, col_offset=33), 'dist_dir', Load(), lineno=438, col_offset=33), Name('base_dir', Load(), lineno=438, col_offset=48)], [], None, None, lineno=438, col_offset=20), lineno=438, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=440, col_offset=8), 'make_release_tree', Load(), lineno=440, col_offset=8), [Name('base_dir', Load(), lineno=440, col_offset=31), Attribute(Attribute(Name('self', Load(), lineno=440, col_offset=41), 'filelist', Load(), lineno=440, col_offset=41), 'files', Load(), lineno=440, col_offset=41)], [], None, None, lineno=440, col_offset=8), lineno=440, col_offset=8), Assign([Name('archive_files', Store(), lineno=441, col_offset=8)], List([], Load(), lineno=441, col_offset=24), lineno=441, col_offset=8), If(Compare(Str('tar', lineno=443, col_offset=11), [In()], [Attribute(Name('self', Load(), lineno=443, col_offset=20), 'formats', Load(), lineno=443, col_offset=20)], lineno=443, col_offset=11), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=444, col_offset=12), 'formats', Load(), lineno=444, col_offset=12), 'append', Load(), lineno=444, col_offset=12), [Call(Attribute(Attribute(Name('self', Load(), lineno=444, col_offset=32), 'formats', Load(), lineno=444, col_offset=32), 'pop', Load(), lineno=444, col_offset=32), [Call(Attribute(Attribute(Name('self', Load(), lineno=444, col_offset=49), 'formats', Load(), lineno=444, col_offset=49), 'index', Load(), lineno=444, col_offset=49), [Str('tar', lineno=444, col_offset=68)], [], None, None, lineno=444, col_offset=49)], [], None, None, lineno=444, col_offset=32)], [], None, None, lineno=444, col_offset=12), lineno=444, col_offset=12)], [], lineno=443, col_offset=8), For(Name('fmt', Store(), lineno=446, col_offset=12), Attribute(Name('self', Load(), lineno=446, col_offset=19), 'formats', Load(), lineno=446, col_offset=19), [Assign([Name('file', Store(), lineno=447, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=447, col_offset=19), 'make_archive', Load(), lineno=447, col_offset=19), [Name('base_name', Load(), lineno=447, col_offset=37), Name('fmt', Load(), lineno=447, col_offset=48)], [keyword('base_dir', Name('base_dir', Load(), lineno=447, col_offset=62)), keyword('owner', Attribute(Name('self', Load(), lineno=448, col_offset=43), 'owner', Load(), lineno=448, col_offset=43)), keyword('group', Attribute(Name('self', Load(), lineno=448, col_offset=61), 'group', Load(), lineno=448, col_offset=61))], None, None, lineno=447, col_offset=19), lineno=447, col_offset=12), Expr(Call(Attribute(Name('archive_files', Load(), lineno=449, col_offset=12), 'append', Load(), lineno=449, col_offset=12), [Name('file', Load(), lineno=449, col_offset=33)], [], None, None, lineno=449, col_offset=12), lineno=449, col_offset=12), Expr(Call(Attribute(Attribute(Attribute(Name('self', Load(), lineno=450, col_offset=12), 'distribution', Load(), lineno=450, col_offset=12), 'dist_files', Load(), lineno=450, col_offset=12), 'append', Load(), lineno=450, col_offset=12), [Tuple([Str('sdist', lineno=450, col_offset=49), Str('', lineno=450, col_offset=58), Name('file', Load(), lineno=450, col_offset=62)], Load(), lineno=450, col_offset=49)], [], None, None, lineno=450, col_offset=12), lineno=450, col_offset=12)], [], lineno=446, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=452, col_offset=8), 'archive_files', Store(), lineno=452, col_offset=8)], Name('archive_files', Load(), lineno=452, col_offset=29), lineno=452, col_offset=8), If(UnaryOp(Not(), Attribute(Name('self', Load(), lineno=454, col_offset=15), 'keep_temp', Load(), lineno=454, col_offset=15), lineno=454, col_offset=11), [Expr(Call(Attribute(Name('dir_util', Load(), lineno=455, col_offset=12), 'remove_tree', Load(), lineno=455, col_offset=12), [Name('base_dir', Load(), lineno=455, col_offset=33)], [keyword('dry_run', Attribute(Name('self', Load(), lineno=455, col_offset=51), 'dry_run', Load(), lineno=455, col_offset=51))], None, None, lineno=455, col_offset=12), lineno=455, col_offset=12)], [], lineno=454, col_offset=8)], [], lineno=427, col_offset=4), FunctionDef('get_archive_files', arguments([Name('self', Param(), lineno=457, col_offset=26)], None, None, []), [Expr(Str("Return the list of archive files created when the command\n        was run, or None if the command hasn't run yet.\n        ", lineno=460, col_offset=-1), lineno=460, col_offset=-1), Return(Attribute(Name('self', Load(), lineno=461, col_offset=15), 'archive_files', Load(), lineno=461, col_offset=15), lineno=461, col_offset=8)], [], lineno=457, col_offset=4)], [], lineno=36, col_offset=0)])
