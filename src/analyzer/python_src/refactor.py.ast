Module([Expr(Str('Refactoring framework.\n\nUsed as a main program, this can refactor any number of files and/or\nrecursively descend down directories.  Imported as a module, this\nprovides infrastructure to write your own refactoring tool.\n', lineno=9, col_offset=-1), lineno=9, col_offset=-1), ImportFrom('__future__', [alias('with_statement', None)], 0, lineno=11, col_offset=0), Assign([Name('__author__', Store(), lineno=13, col_offset=0)], Str('Guido van Rossum <guido@python.org>', lineno=13, col_offset=13), lineno=13, col_offset=0), Import([alias('os', None)], lineno=17, col_offset=0), Import([alias('sys', None)], lineno=18, col_offset=0), Import([alias('logging', None)], lineno=19, col_offset=0), Import([alias('operator', None)], lineno=20, col_offset=0), Import([alias('collections', None)], lineno=21, col_offset=0), Import([alias('StringIO', None)], lineno=22, col_offset=0), ImportFrom('itertools', [alias('chain', None)], 0, lineno=23, col_offset=0), ImportFrom('pgen2', [alias('driver', None), alias('tokenize', None), alias('token', None)], 1, lineno=26, col_offset=0), ImportFrom('fixer_util', [alias('find_root', None)], 1, lineno=27, col_offset=0), ImportFrom(None, [alias('pytree', None), alias('pygram', None)], 1, lineno=28, col_offset=0), ImportFrom(None, [alias('btm_utils', 'bu')], 1, lineno=29, col_offset=0), ImportFrom(None, [alias('btm_matcher', 'bm')], 1, lineno=30, col_offset=0), FunctionDef('get_all_fix_names', arguments([Name('fixer_pkg', Param(), lineno=33, col_offset=22), Name('remove_prefix', Param(), lineno=33, col_offset=33)], None, None, [Name('True', Load(), lineno=33, col_offset=47)]), [Expr(Str('Return a sorted list of all available fix names in the given package.', lineno=34, col_offset=4), lineno=34, col_offset=4), Assign([Name('pkg', Store(), lineno=35, col_offset=4)], Call(Name('__import__', Load(), lineno=35, col_offset=10), [Name('fixer_pkg', Load(), lineno=35, col_offset=21), List([], Load(), lineno=35, col_offset=32), List([], Load(), lineno=35, col_offset=36), List([Str('*', lineno=35, col_offset=41)], Load(), lineno=35, col_offset=40)], [], None, None, lineno=35, col_offset=10), lineno=35, col_offset=4), Assign([Name('fixer_dir', Store(), lineno=36, col_offset=4)], Call(Attribute(Attribute(Name('os', Load(), lineno=36, col_offset=16), 'path', Load(), lineno=36, col_offset=16), 'dirname', Load(), lineno=36, col_offset=16), [Attribute(Name('pkg', Load(), lineno=36, col_offset=32), '__file__', Load(), lineno=36, col_offset=32)], [], None, None, lineno=36, col_offset=16), lineno=36, col_offset=4), Assign([Name('fix_names', Store(), lineno=37, col_offset=4)], List([], Load(), lineno=37, col_offset=16), lineno=37, col_offset=4), For(Name('name', Store(), lineno=38, col_offset=8), Call(Name('sorted', Load(), lineno=38, col_offset=16), [Call(Attribute(Name('os', Load(), lineno=38, col_offset=23), 'listdir', Load(), lineno=38, col_offset=23), [Name('fixer_dir', Load(), lineno=38, col_offset=34)], [], None, None, lineno=38, col_offset=23)], [], None, None, lineno=38, col_offset=16), [If(BoolOp(And(), [Call(Attribute(Name('name', Load(), lineno=39, col_offset=11), 'startswith', Load(), lineno=39, col_offset=11), [Str('fix_', lineno=39, col_offset=27)], [], None, None, lineno=39, col_offset=11), Call(Attribute(Name('name', Load(), lineno=39, col_offset=39), 'endswith', Load(), lineno=39, col_offset=39), [Str('.py', lineno=39, col_offset=53)], [], None, None, lineno=39, col_offset=39)], lineno=39, col_offset=11), [If(Name('remove_prefix', Load(), lineno=40, col_offset=15), [Assign([Name('name', Store(), lineno=41, col_offset=16)], Subscript(Name('name', Load(), lineno=41, col_offset=23), Slice(Num(4, lineno=41, col_offset=28), None, None), Load(), lineno=41, col_offset=23), lineno=41, col_offset=16)], [], lineno=40, col_offset=12), Expr(Call(Attribute(Name('fix_names', Load(), lineno=42, col_offset=12), 'append', Load(), lineno=42, col_offset=12), [Subscript(Name('name', Load(), lineno=42, col_offset=29), Slice(None, Num(-3, lineno=42, col_offset=36), None), Load(), lineno=42, col_offset=29)], [], None, None, lineno=42, col_offset=12), lineno=42, col_offset=12)], [], lineno=39, col_offset=8)], [], lineno=38, col_offset=4), Return(Name('fix_names', Load(), lineno=43, col_offset=11), lineno=43, col_offset=4)], [], lineno=33, col_offset=0), ClassDef('_EveryNode', [Name('Exception', Load(), lineno=46, col_offset=17)], [Pass( lineno=47, col_offset=4)], [], lineno=46, col_offset=0), FunctionDef('_get_head_types', arguments([Name('pat', Param(), lineno=50, col_offset=20)], None, None, []), [Expr(Str(' Accepts a pytree Pattern Node and returns a set\n        of the pattern types which will match first. ', lineno=52, col_offset=-1), lineno=52, col_offset=-1), If(Call(Name('isinstance', Load(), lineno=54, col_offset=7), [Name('pat', Load(), lineno=54, col_offset=18), Tuple([Attribute(Name('pytree', Load(), lineno=54, col_offset=24), 'NodePattern', Load(), lineno=54, col_offset=24), Attribute(Name('pytree', Load(), lineno=54, col_offset=44), 'LeafPattern', Load(), lineno=54, col_offset=44)], Load(), lineno=54, col_offset=24)], [], None, None, lineno=54, col_offset=7), [If(Compare(Attribute(Name('pat', Load(), lineno=58, col_offset=11), 'type', Load(), lineno=58, col_offset=11), [Is()], [Name('None', Load(), lineno=58, col_offset=23)], lineno=58, col_offset=11), [Raise(Name('_EveryNode', Load(), lineno=59, col_offset=18), None, None, lineno=59, col_offset=12)], [], lineno=58, col_offset=8), Return(Call(Name('set', Load(), lineno=60, col_offset=15), [List([Attribute(Name('pat', Load(), lineno=60, col_offset=20), 'type', Load(), lineno=60, col_offset=20)], Load(), lineno=60, col_offset=19)], [], None, None, lineno=60, col_offset=15), lineno=60, col_offset=8)], [], lineno=54, col_offset=4), If(Call(Name('isinstance', Load(), lineno=62, col_offset=7), [Name('pat', Load(), lineno=62, col_offset=18), Attribute(Name('pytree', Load(), lineno=62, col_offset=23), 'NegatedPattern', Load(), lineno=62, col_offset=23)], [], None, None, lineno=62, col_offset=7), [If(Attribute(Name('pat', Load(), lineno=63, col_offset=11), 'content', Load(), lineno=63, col_offset=11), [Return(Call(Name('_get_head_types', Load(), lineno=64, col_offset=19), [Attribute(Name('pat', Load(), lineno=64, col_offset=35), 'content', Load(), lineno=64, col_offset=35)], [], None, None, lineno=64, col_offset=19), lineno=64, col_offset=12)], [], lineno=63, col_offset=8), Raise(Name('_EveryNode', Load(), lineno=65, col_offset=14), None, None, lineno=65, col_offset=8)], [], lineno=62, col_offset=4), If(Call(Name('isinstance', Load(), lineno=67, col_offset=7), [Name('pat', Load(), lineno=67, col_offset=18), Attribute(Name('pytree', Load(), lineno=67, col_offset=23), 'WildcardPattern', Load(), lineno=67, col_offset=23)], [], None, None, lineno=67, col_offset=7), [Assign([Name('r', Store(), lineno=69, col_offset=8)], Call(Name('set', Load(), lineno=69, col_offset=12), [], [], None, None, lineno=69, col_offset=12), lineno=69, col_offset=8), For(Name('p', Store(), lineno=70, col_offset=12), Attribute(Name('pat', Load(), lineno=70, col_offset=17), 'content', Load(), lineno=70, col_offset=17), [For(Name('x', Store(), lineno=71, col_offset=16), Name('p', Load(), lineno=71, col_offset=21), [Expr(Call(Attribute(Name('r', Load(), lineno=72, col_offset=16), 'update', Load(), lineno=72, col_offset=16), [Call(Name('_get_head_types', Load(), lineno=72, col_offset=25), [Name('x', Load(), lineno=72, col_offset=41)], [], None, None, lineno=72, col_offset=25)], [], None, None, lineno=72, col_offset=16), lineno=72, col_offset=16)], [], lineno=71, col_offset=12)], [], lineno=70, col_offset=8), Return(Name('r', Load(), lineno=73, col_offset=15), lineno=73, col_offset=8)], [], lineno=67, col_offset=4), Raise(Call(Name('Exception', Load(), lineno=75, col_offset=10), [BinOp(Str("Oh no! I don't understand pattern %s", lineno=75, col_offset=20), Mod(), Name('pat', Load(), lineno=75, col_offset=61), lineno=75, col_offset=20)], [], None, None, lineno=75, col_offset=10), None, None, lineno=75, col_offset=4)], [], lineno=50, col_offset=0), FunctionDef('_get_headnode_dict', arguments([Name('fixer_list', Param(), lineno=78, col_offset=23)], None, None, []), [Expr(Str(' Accepts a list of fixers and returns a dictionary\n        of head node type --> fixer list.  ', lineno=80, col_offset=-1), lineno=80, col_offset=-1), Assign([Name('head_nodes', Store(), lineno=81, col_offset=4)], Call(Attribute(Name('collections', Load(), lineno=81, col_offset=17), 'defaultdict', Load(), lineno=81, col_offset=17), [Name('list', Load(), lineno=81, col_offset=41)], [], None, None, lineno=81, col_offset=17), lineno=81, col_offset=4), Assign([Name('every', Store(), lineno=82, col_offset=4)], List([], Load(), lineno=82, col_offset=12), lineno=82, col_offset=4), For(Name('fixer', Store(), lineno=83, col_offset=8), Name('fixer_list', Load(), lineno=83, col_offset=17), [If(Attribute(Name('fixer', Load(), lineno=84, col_offset=11), 'pattern', Load(), lineno=84, col_offset=11), [TryExcept([Assign([Name('heads', Store(), lineno=86, col_offset=16)], Call(Name('_get_head_types', Load(), lineno=86, col_offset=24), [Attribute(Name('fixer', Load(), lineno=86, col_offset=40), 'pattern', Load(), lineno=86, col_offset=40)], [], None, None, lineno=86, col_offset=24), lineno=86, col_offset=16)], [ExceptHandler(Name('_EveryNode', Load(), lineno=87, col_offset=19), None, [Expr(Call(Attribute(Name('every', Load(), lineno=88, col_offset=16), 'append', Load(), lineno=88, col_offset=16), [Name('fixer', Load(), lineno=88, col_offset=29)], [], None, None, lineno=88, col_offset=16), lineno=88, col_offset=16)], lineno=87, col_offset=12)], [For(Name('node_type', Store(), lineno=90, col_offset=20), Name('heads', Load(), lineno=90, col_offset=33), [Expr(Call(Attribute(Subscript(Name('head_nodes', Load(), lineno=91, col_offset=20), Index(Name('node_type', Load(), lineno=91, col_offset=31)), Load(), lineno=91, col_offset=20), 'append', Load(), lineno=91, col_offset=20), [Name('fixer', Load(), lineno=91, col_offset=49)], [], None, None, lineno=91, col_offset=20), lineno=91, col_offset=20)], [], lineno=90, col_offset=16)], lineno=85, col_offset=12)], [If(Compare(Attribute(Name('fixer', Load(), lineno=93, col_offset=15), '_accept_type', Load(), lineno=93, col_offset=15), [IsNot()], [Name('None', Load(), lineno=93, col_offset=41)], lineno=93, col_offset=15), [Expr(Call(Attribute(Subscript(Name('head_nodes', Load(), lineno=94, col_offset=16), Index(Attribute(Name('fixer', Load(), lineno=94, col_offset=27), '_accept_type', Load(), lineno=94, col_offset=27)), Load(), lineno=94, col_offset=16), 'append', Load(), lineno=94, col_offset=16), [Name('fixer', Load(), lineno=94, col_offset=54)], [], None, None, lineno=94, col_offset=16), lineno=94, col_offset=16)], [Expr(Call(Attribute(Name('every', Load(), lineno=96, col_offset=16), 'append', Load(), lineno=96, col_offset=16), [Name('fixer', Load(), lineno=96, col_offset=29)], [], None, None, lineno=96, col_offset=16), lineno=96, col_offset=16)], lineno=93, col_offset=12)], lineno=84, col_offset=8)], [], lineno=83, col_offset=4), For(Name('node_type', Store(), lineno=97, col_offset=8), Call(Name('chain', Load(), lineno=97, col_offset=21), [Call(Attribute(Attribute(Attribute(Name('pygram', Load(), lineno=97, col_offset=27), 'python_grammar', Load(), lineno=97, col_offset=27), 'symbol2number', Load(), lineno=97, col_offset=27), 'itervalues', Load(), lineno=97, col_offset=27), [], [], None, None, lineno=97, col_offset=27), Attribute(Attribute(Name('pygram', Load(), lineno=98, col_offset=27), 'python_grammar', Load(), lineno=98, col_offset=27), 'tokens', Load(), lineno=98, col_offset=27)], [], None, None, lineno=97, col_offset=21), [Expr(Call(Attribute(Subscript(Name('head_nodes', Load(), lineno=99, col_offset=8), Index(Name('node_type', Load(), lineno=99, col_offset=19)), Load(), lineno=99, col_offset=8), 'extend', Load(), lineno=99, col_offset=8), [Name('every', Load(), lineno=99, col_offset=37)], [], None, None, lineno=99, col_offset=8), lineno=99, col_offset=8)], [], lineno=97, col_offset=4), Return(Call(Name('dict', Load(), lineno=100, col_offset=11), [Name('head_nodes', Load(), lineno=100, col_offset=16)], [], None, None, lineno=100, col_offset=11), lineno=100, col_offset=4)], [], lineno=78, col_offset=0), FunctionDef('get_fixers_from_package', arguments([Name('pkg_name', Param(), lineno=103, col_offset=28)], None, None, []), [Expr(Str('\n    Return the fully qualified names for fixers in the package pkg_name.\n    ', lineno=106, col_offset=-1), lineno=106, col_offset=-1), Return(ListComp(BinOp(BinOp(Name('pkg_name', Load(), lineno=107, col_offset=12), Add(), Str('.', lineno=107, col_offset=23), lineno=107, col_offset=12), Add(), Name('fix_name', Load(), lineno=107, col_offset=29), lineno=107, col_offset=27), [comprehension(Name('fix_name', Store(), lineno=108, col_offset=16), Call(Name('get_all_fix_names', Load(), lineno=108, col_offset=28), [Name('pkg_name', Load(), lineno=108, col_offset=46), Name('False', Load(), lineno=108, col_offset=56)], [], None, None, lineno=108, col_offset=28), [])], lineno=107, col_offset=12), lineno=107, col_offset=4)], [], lineno=103, col_offset=0), FunctionDef('_identity', arguments([Name('obj', Param(), lineno=110, col_offset=14)], None, None, []), [Return(Name('obj', Load(), lineno=111, col_offset=11), lineno=111, col_offset=4)], [], lineno=110, col_offset=0), If(Compare(Attribute(Name('sys', Load(), lineno=113, col_offset=3), 'version_info', Load(), lineno=113, col_offset=3), [Lt()], [Tuple([Num(3, lineno=113, col_offset=23), Num(0, lineno=113, col_offset=26)], Load(), lineno=113, col_offset=23)], lineno=113, col_offset=3), [Import([alias('codecs', None)], lineno=114, col_offset=4), Assign([Name('_open_with_encoding', Store(), lineno=115, col_offset=4)], Attribute(Name('codecs', Load(), lineno=115, col_offset=26), 'open', Load(), lineno=115, col_offset=26), lineno=115, col_offset=4), FunctionDef('_from_system_newlines', arguments([Name('input', Param(), lineno=117, col_offset=30)], None, None, []), [Return(Call(Attribute(Name('input', Load(), lineno=118, col_offset=15), 'replace', Load(), lineno=118, col_offset=15), [Str(u'\r\n', lineno=118, col_offset=29), Str(u'\n', lineno=118, col_offset=38)], [], None, None, lineno=118, col_offset=15), lineno=118, col_offset=8)], [], lineno=117, col_offset=4), FunctionDef('_to_system_newlines', arguments([Name('input', Param(), lineno=119, col_offset=28)], None, None, []), [If(Compare(Attribute(Name('os', Load(), lineno=120, col_offset=11), 'linesep', Load(), lineno=120, col_offset=11), [NotEq()], [Str('\n', lineno=120, col_offset=25)], lineno=120, col_offset=11), [Return(Call(Attribute(Name('input', Load(), lineno=121, col_offset=19), 'replace', Load(), lineno=121, col_offset=19), [Str(u'\n', lineno=121, col_offset=33), Attribute(Name('os', Load(), lineno=121, col_offset=40), 'linesep', Load(), lineno=121, col_offset=40)], [], None, None, lineno=121, col_offset=19), lineno=121, col_offset=12)], [Return(Name('input', Load(), lineno=123, col_offset=19), lineno=123, col_offset=12)], lineno=120, col_offset=8)], [], lineno=119, col_offset=4)], [Assign([Name('_open_with_encoding', Store(), lineno=125, col_offset=4)], Name('open', Load(), lineno=125, col_offset=26), lineno=125, col_offset=4), Assign([Name('_from_system_newlines', Store(), lineno=126, col_offset=4)], Name('_identity', Load(), lineno=126, col_offset=28), lineno=126, col_offset=4), Assign([Name('_to_system_newlines', Store(), lineno=127, col_offset=4)], Name('_identity', Load(), lineno=127, col_offset=26), lineno=127, col_offset=4)], lineno=113, col_offset=0), FunctionDef('_detect_future_features', arguments([Name('source', Param(), lineno=130, col_offset=28)], None, None, []), [Assign([Name('have_docstring', Store(), lineno=131, col_offset=4)], Name('False', Load(), lineno=131, col_offset=21), lineno=131, col_offset=4), Assign([Name('gen', Store(), lineno=132, col_offset=4)], Call(Attribute(Name('tokenize', Load(), lineno=132, col_offset=10), 'generate_tokens', Load(), lineno=132, col_offset=10), [Attribute(Call(Attribute(Name('StringIO', Load(), lineno=132, col_offset=35), 'StringIO', Load(), lineno=132, col_offset=35), [Name('source', Load(), lineno=132, col_offset=53)], [], None, None, lineno=132, col_offset=35), 'readline', Load(), lineno=132, col_offset=35)], [], None, None, lineno=132, col_offset=10), lineno=132, col_offset=4), FunctionDef('advance', arguments([], None, None, []), [Assign([Name('tok', Store(), lineno=134, col_offset=8)], Call(Attribute(Name('gen', Load(), lineno=134, col_offset=14), 'next', Load(), lineno=134, col_offset=14), [], [], None, None, lineno=134, col_offset=14), lineno=134, col_offset=8), Return(Tuple([Subscript(Name('tok', Load(), lineno=135, col_offset=15), Index(Num(0, lineno=135, col_offset=19)), Load(), lineno=135, col_offset=15), Subscript(Name('tok', Load(), lineno=135, col_offset=23), Index(Num(1, lineno=135, col_offset=27)), Load(), lineno=135, col_offset=23)], Load(), lineno=135, col_offset=15), lineno=135, col_offset=8)], [], lineno=133, col_offset=4), Assign([Name('ignore', Store(), lineno=136, col_offset=4)], Call(Name('frozenset', Load(), lineno=136, col_offset=13), [Tuple([Attribute(Name('token', Load(), lineno=136, col_offset=24), 'NEWLINE', Load(), lineno=136, col_offset=24), Attribute(Name('tokenize', Load(), lineno=136, col_offset=39), 'NL', Load(), lineno=136, col_offset=39), Attribute(Name('token', Load(), lineno=136, col_offset=52), 'COMMENT', Load(), lineno=136, col_offset=52)], Load(), lineno=136, col_offset=24)], [], None, None, lineno=136, col_offset=13), lineno=136, col_offset=4), Assign([Name('features', Store(), lineno=137, col_offset=4)], Call(Name('set', Load(), lineno=137, col_offset=15), [], [], None, None, lineno=137, col_offset=15), lineno=137, col_offset=4), TryExcept([While(Name('True', Load(), lineno=139, col_offset=14), [Assign([Tuple([Name('tp', Store(), lineno=140, col_offset=12), Name('value', Store(), lineno=140, col_offset=16)], Store(), lineno=140, col_offset=12)], Call(Name('advance', Load(), lineno=140, col_offset=24), [], [], None, None, lineno=140, col_offset=24), lineno=140, col_offset=12), If(Compare(Name('tp', Load(), lineno=141, col_offset=15), [In()], [Name('ignore', Load(), lineno=141, col_offset=21)], lineno=141, col_offset=15), [Continue( lineno=142, col_offset=16)], [If(Compare(Name('tp', Load(), lineno=143, col_offset=17), [Eq()], [Attribute(Name('token', Load(), lineno=143, col_offset=23), 'STRING', Load(), lineno=143, col_offset=23)], lineno=143, col_offset=17), [If(Name('have_docstring', Load(), lineno=144, col_offset=19), [Break( lineno=145, col_offset=20)], [], lineno=144, col_offset=16), Assign([Name('have_docstring', Store(), lineno=146, col_offset=16)], Name('True', Load(), lineno=146, col_offset=33), lineno=146, col_offset=16)], [If(BoolOp(And(), [Compare(Name('tp', Load(), lineno=147, col_offset=17), [Eq()], [Attribute(Name('token', Load(), lineno=147, col_offset=23), 'NAME', Load(), lineno=147, col_offset=23)], lineno=147, col_offset=17), Compare(Name('value', Load(), lineno=147, col_offset=38), [Eq()], [Str(u'from', lineno=147, col_offset=47)], lineno=147, col_offset=38)], lineno=147, col_offset=17), [Assign([Tuple([Name('tp', Store(), lineno=148, col_offset=16), Name('value', Store(), lineno=148, col_offset=20)], Store(), lineno=148, col_offset=16)], Call(Name('advance', Load(), lineno=148, col_offset=28), [], [], None, None, lineno=148, col_offset=28), lineno=148, col_offset=16), If(BoolOp(Or(), [Compare(Name('tp', Load(), lineno=149, col_offset=19), [NotEq()], [Attribute(Name('token', Load(), lineno=149, col_offset=25), 'NAME', Load(), lineno=149, col_offset=25)], lineno=149, col_offset=19), Compare(Name('value', Load(), lineno=149, col_offset=39), [NotEq()], [Str(u'__future__', lineno=149, col_offset=48)], lineno=149, col_offset=39)], lineno=149, col_offset=19), [Break( lineno=150, col_offset=20)], [], lineno=149, col_offset=16), Assign([Tuple([Name('tp', Store(), lineno=151, col_offset=16), Name('value', Store(), lineno=151, col_offset=20)], Store(), lineno=151, col_offset=16)], Call(Name('advance', Load(), lineno=151, col_offset=28), [], [], None, None, lineno=151, col_offset=28), lineno=151, col_offset=16), If(BoolOp(Or(), [Compare(Name('tp', Load(), lineno=152, col_offset=19), [NotEq()], [Attribute(Name('token', Load(), lineno=152, col_offset=25), 'NAME', Load(), lineno=152, col_offset=25)], lineno=152, col_offset=19), Compare(Name('value', Load(), lineno=152, col_offset=39), [NotEq()], [Str(u'import', lineno=152, col_offset=48)], lineno=152, col_offset=39)], lineno=152, col_offset=19), [Break( lineno=153, col_offset=20)], [], lineno=152, col_offset=16), Assign([Tuple([Name('tp', Store(), lineno=154, col_offset=16), Name('value', Store(), lineno=154, col_offset=20)], Store(), lineno=154, col_offset=16)], Call(Name('advance', Load(), lineno=154, col_offset=28), [], [], None, None, lineno=154, col_offset=28), lineno=154, col_offset=16), If(BoolOp(And(), [Compare(Name('tp', Load(), lineno=155, col_offset=19), [Eq()], [Attribute(Name('token', Load(), lineno=155, col_offset=25), 'OP', Load(), lineno=155, col_offset=25)], lineno=155, col_offset=19), Compare(Name('value', Load(), lineno=155, col_offset=38), [Eq()], [Str(u'(', lineno=155, col_offset=47)], lineno=155, col_offset=38)], lineno=155, col_offset=19), [Assign([Tuple([Name('tp', Store(), lineno=156, col_offset=20), Name('value', Store(), lineno=156, col_offset=24)], Store(), lineno=156, col_offset=20)], Call(Name('advance', Load(), lineno=156, col_offset=32), [], [], None, None, lineno=156, col_offset=32), lineno=156, col_offset=20)], [], lineno=155, col_offset=16), While(Compare(Name('tp', Load(), lineno=157, col_offset=22), [Eq()], [Attribute(Name('token', Load(), lineno=157, col_offset=28), 'NAME', Load(), lineno=157, col_offset=28)], lineno=157, col_offset=22), [Expr(Call(Attribute(Name('features', Load(), lineno=158, col_offset=20), 'add', Load(), lineno=158, col_offset=20), [Name('value', Load(), lineno=158, col_offset=33)], [], None, None, lineno=158, col_offset=20), lineno=158, col_offset=20), Assign([Tuple([Name('tp', Store(), lineno=159, col_offset=20), Name('value', Store(), lineno=159, col_offset=24)], Store(), lineno=159, col_offset=20)], Call(Name('advance', Load(), lineno=159, col_offset=32), [], [], None, None, lineno=159, col_offset=32), lineno=159, col_offset=20), If(BoolOp(Or(), [Compare(Name('tp', Load(), lineno=160, col_offset=23), [NotEq()], [Attribute(Name('token', Load(), lineno=160, col_offset=29), 'OP', Load(), lineno=160, col_offset=29)], lineno=160, col_offset=23), Compare(Name('value', Load(), lineno=160, col_offset=41), [NotEq()], [Str(u',', lineno=160, col_offset=50)], lineno=160, col_offset=41)], lineno=160, col_offset=23), [Break( lineno=161, col_offset=24)], [], lineno=160, col_offset=20), Assign([Tuple([Name('tp', Store(), lineno=162, col_offset=20), Name('value', Store(), lineno=162, col_offset=24)], Store(), lineno=162, col_offset=20)], Call(Name('advance', Load(), lineno=162, col_offset=32), [], [], None, None, lineno=162, col_offset=32), lineno=162, col_offset=20)], [], lineno=157, col_offset=16)], [Break( lineno=164, col_offset=16)], lineno=147, col_offset=17)], lineno=143, col_offset=17)], lineno=141, col_offset=12)], [], lineno=139, col_offset=8)], [ExceptHandler(Name('StopIteration', Load(), lineno=165, col_offset=11), None, [Pass( lineno=166, col_offset=8)], lineno=165, col_offset=4)], [], lineno=138, col_offset=4), Return(Call(Name('frozenset', Load(), lineno=167, col_offset=11), [Name('features', Load(), lineno=167, col_offset=21)], [], None, None, lineno=167, col_offset=11), lineno=167, col_offset=4)], [], lineno=130, col_offset=0), ClassDef('FixerError', [Name('Exception', Load(), lineno=170, col_offset=17)], [Expr(Str('A fixer could not be loaded.', lineno=171, col_offset=4), lineno=171, col_offset=4)], [], lineno=170, col_offset=0), ClassDef('RefactoringTool', [Name('object', Load(), lineno=174, col_offset=22)], [Assign([Name('_default_options', Store(), lineno=176, col_offset=4)], Dict([Str('print_function', lineno=176, col_offset=24)], [Name('False', Load(), lineno=176, col_offset=43)], lineno=176, col_offset=23), lineno=176, col_offset=4), Assign([Name('CLASS_PREFIX', Store(), lineno=178, col_offset=4)], Str('Fix', lineno=178, col_offset=19), lineno=178, col_offset=4), Assign([Name('FILE_PREFIX', Store(), lineno=179, col_offset=4)], Str('fix_', lineno=179, col_offset=18), lineno=179, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=181, col_offset=17), Name('fixer_names', Param(), lineno=181, col_offset=23), Name('options', Param(), lineno=181, col_offset=36), Name('explicit', Param(), lineno=181, col_offset=50)], None, None, [Name('None', Load(), lineno=181, col_offset=44), Name('None', Load(), lineno=181, col_offset=59)]), [Expr(Str('Initializer.\n\n        Args:\n            fixer_names: a list of fixers to import\n            options: an dict with configuration.\n            explicit: a list of fixers to run even if they are explicit.\n        ', lineno=188, col_offset=-1), lineno=188, col_offset=-1), Assign([Attribute(Name('self', Load(), lineno=189, col_offset=8), 'fixers', Store(), lineno=189, col_offset=8)], Name('fixer_names', Load(), lineno=189, col_offset=22), lineno=189, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=190, col_offset=8), 'explicit', Store(), lineno=190, col_offset=8)], BoolOp(Or(), [Name('explicit', Load(), lineno=190, col_offset=24), List([], Load(), lineno=190, col_offset=36)], lineno=190, col_offset=24), lineno=190, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=191, col_offset=8), 'options', Store(), lineno=191, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=191, col_offset=23), '_default_options', Load(), lineno=191, col_offset=23), 'copy', Load(), lineno=191, col_offset=23), [], [], None, None, lineno=191, col_offset=23), lineno=191, col_offset=8), If(Compare(Name('options', Load(), lineno=192, col_offset=11), [IsNot()], [Name('None', Load(), lineno=192, col_offset=26)], lineno=192, col_offset=11), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=193, col_offset=12), 'options', Load(), lineno=193, col_offset=12), 'update', Load(), lineno=193, col_offset=12), [Name('options', Load(), lineno=193, col_offset=32)], [], None, None, lineno=193, col_offset=12), lineno=193, col_offset=12)], [], lineno=192, col_offset=8), If(Subscript(Attribute(Name('self', Load(), lineno=194, col_offset=11), 'options', Load(), lineno=194, col_offset=11), Index(Str('print_function', lineno=194, col_offset=24)), Load(), lineno=194, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=195, col_offset=12), 'grammar', Store(), lineno=195, col_offset=12)], Attribute(Name('pygram', Load(), lineno=195, col_offset=27), 'python_grammar_no_print_statement', Load(), lineno=195, col_offset=27), lineno=195, col_offset=12)], [Assign([Attribute(Name('self', Load(), lineno=197, col_offset=12), 'grammar', Store(), lineno=197, col_offset=12)], Attribute(Name('pygram', Load(), lineno=197, col_offset=27), 'python_grammar', Load(), lineno=197, col_offset=27), lineno=197, col_offset=12)], lineno=194, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=198, col_offset=8), 'errors', Store(), lineno=198, col_offset=8)], List([], Load(), lineno=198, col_offset=22), lineno=198, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=199, col_offset=8), 'logger', Store(), lineno=199, col_offset=8)], Call(Attribute(Name('logging', Load(), lineno=199, col_offset=22), 'getLogger', Load(), lineno=199, col_offset=22), [Str('RefactoringTool', lineno=199, col_offset=40)], [], None, None, lineno=199, col_offset=22), lineno=199, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=200, col_offset=8), 'fixer_log', Store(), lineno=200, col_offset=8)], List([], Load(), lineno=200, col_offset=25), lineno=200, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=201, col_offset=8), 'wrote', Store(), lineno=201, col_offset=8)], Name('False', Load(), lineno=201, col_offset=21), lineno=201, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=202, col_offset=8), 'driver', Store(), lineno=202, col_offset=8)], Call(Attribute(Name('driver', Load(), lineno=202, col_offset=22), 'Driver', Load(), lineno=202, col_offset=22), [Attribute(Name('self', Load(), lineno=202, col_offset=36), 'grammar', Load(), lineno=202, col_offset=36)], [keyword('convert', Attribute(Name('pytree', Load(), lineno=203, col_offset=44), 'convert', Load(), lineno=203, col_offset=44)), keyword('logger', Attribute(Name('self', Load(), lineno=204, col_offset=43), 'logger', Load(), lineno=204, col_offset=43))], None, None, lineno=202, col_offset=22), lineno=202, col_offset=8), Assign([Tuple([Attribute(Name('self', Load(), lineno=205, col_offset=8), 'pre_order', Store(), lineno=205, col_offset=8), Attribute(Name('self', Load(), lineno=205, col_offset=24), 'post_order', Store(), lineno=205, col_offset=24)], Store(), lineno=205, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=205, col_offset=42), 'get_fixers', Load(), lineno=205, col_offset=42), [], [], None, None, lineno=205, col_offset=42), lineno=205, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=208, col_offset=8), 'files', Store(), lineno=208, col_offset=8)], List([], Load(), lineno=208, col_offset=21), lineno=208, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=210, col_offset=8), 'BM', Store(), lineno=210, col_offset=8)], Call(Attribute(Name('bm', Load(), lineno=210, col_offset=18), 'BottomMatcher', Load(), lineno=210, col_offset=18), [], [], None, None, lineno=210, col_offset=18), lineno=210, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=211, col_offset=8), 'bmi_pre_order', Store(), lineno=211, col_offset=8)], List([], Load(), lineno=211, col_offset=29), lineno=211, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=212, col_offset=8), 'bmi_post_order', Store(), lineno=212, col_offset=8)], List([], Load(), lineno=212, col_offset=30), lineno=212, col_offset=8), For(Name('fixer', Store(), lineno=214, col_offset=12), Call(Name('chain', Load(), lineno=214, col_offset=21), [Attribute(Name('self', Load(), lineno=214, col_offset=27), 'post_order', Load(), lineno=214, col_offset=27), Attribute(Name('self', Load(), lineno=214, col_offset=44), 'pre_order', Load(), lineno=214, col_offset=44)], [], None, None, lineno=214, col_offset=21), [If(Attribute(Name('fixer', Load(), lineno=215, col_offset=15), 'BM_compatible', Load(), lineno=215, col_offset=15), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=216, col_offset=16), 'BM', Load(), lineno=216, col_offset=16), 'add_fixer', Load(), lineno=216, col_offset=16), [Name('fixer', Load(), lineno=216, col_offset=34)], [], None, None, lineno=216, col_offset=16), lineno=216, col_offset=16)], [If(Compare(Name('fixer', Load(), lineno=219, col_offset=17), [In()], [Attribute(Name('self', Load(), lineno=219, col_offset=26), 'pre_order', Load(), lineno=219, col_offset=26)], lineno=219, col_offset=17), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=220, col_offset=16), 'bmi_pre_order', Load(), lineno=220, col_offset=16), 'append', Load(), lineno=220, col_offset=16), [Name('fixer', Load(), lineno=220, col_offset=42)], [], None, None, lineno=220, col_offset=16), lineno=220, col_offset=16)], [If(Compare(Name('fixer', Load(), lineno=221, col_offset=17), [In()], [Attribute(Name('self', Load(), lineno=221, col_offset=26), 'post_order', Load(), lineno=221, col_offset=26)], lineno=221, col_offset=17), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=222, col_offset=16), 'bmi_post_order', Load(), lineno=222, col_offset=16), 'append', Load(), lineno=222, col_offset=16), [Name('fixer', Load(), lineno=222, col_offset=43)], [], None, None, lineno=222, col_offset=16), lineno=222, col_offset=16)], [], lineno=221, col_offset=17)], lineno=219, col_offset=17)], lineno=215, col_offset=12)], [], lineno=214, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=224, col_offset=8), 'bmi_pre_order_heads', Store(), lineno=224, col_offset=8)], Call(Name('_get_headnode_dict', Load(), lineno=224, col_offset=35), [Attribute(Name('self', Load(), lineno=224, col_offset=54), 'bmi_pre_order', Load(), lineno=224, col_offset=54)], [], None, None, lineno=224, col_offset=35), lineno=224, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=225, col_offset=8), 'bmi_post_order_heads', Store(), lineno=225, col_offset=8)], Call(Name('_get_headnode_dict', Load(), lineno=225, col_offset=36), [Attribute(Name('self', Load(), lineno=225, col_offset=55), 'bmi_post_order', Load(), lineno=225, col_offset=55)], [], None, None, lineno=225, col_offset=36), lineno=225, col_offset=8)], [], lineno=181, col_offset=4), FunctionDef('get_fixers', arguments([Name('self', Param(), lineno=229, col_offset=19)], None, None, []), [Expr(Str('Inspects the options to load the requested patterns and handlers.\n\n        Returns:\n          (pre_order, post_order), where pre_order is the list of fixers that\n          want a pre-order AST traversal, and post_order is the list that want\n          post-order traversal.\n        ', lineno=236, col_offset=-1), lineno=236, col_offset=-1), Assign([Name('pre_order_fixers', Store(), lineno=237, col_offset=8)], List([], Load(), lineno=237, col_offset=27), lineno=237, col_offset=8), Assign([Name('post_order_fixers', Store(), lineno=238, col_offset=8)], List([], Load(), lineno=238, col_offset=28), lineno=238, col_offset=8), For(Name('fix_mod_path', Store(), lineno=239, col_offset=12), Attribute(Name('self', Load(), lineno=239, col_offset=28), 'fixers', Load(), lineno=239, col_offset=28), [Assign([Name('mod', Store(), lineno=240, col_offset=12)], Call(Name('__import__', Load(), lineno=240, col_offset=18), [Name('fix_mod_path', Load(), lineno=240, col_offset=29), Dict([], [], lineno=240, col_offset=43), Dict([], [], lineno=240, col_offset=47), List([Str('*', lineno=240, col_offset=52)], Load(), lineno=240, col_offset=51)], [], None, None, lineno=240, col_offset=18), lineno=240, col_offset=12), Assign([Name('fix_name', Store(), lineno=241, col_offset=12)], Subscript(Call(Attribute(Name('fix_mod_path', Load(), lineno=241, col_offset=23), 'rsplit', Load(), lineno=241, col_offset=23), [Str('.', lineno=241, col_offset=43), Num(1, lineno=241, col_offset=48)], [], None, None, lineno=241, col_offset=23), Index(Num(-1, lineno=241, col_offset=52)), Load(), lineno=241, col_offset=23), lineno=241, col_offset=12), If(Call(Attribute(Name('fix_name', Load(), lineno=242, col_offset=15), 'startswith', Load(), lineno=242, col_offset=15), [Attribute(Name('self', Load(), lineno=242, col_offset=35), 'FILE_PREFIX', Load(), lineno=242, col_offset=35)], [], None, None, lineno=242, col_offset=15), [Assign([Name('fix_name', Store(), lineno=243, col_offset=16)], Subscript(Name('fix_name', Load(), lineno=243, col_offset=27), Slice(Call(Name('len', Load(), lineno=243, col_offset=36), [Attribute(Name('self', Load(), lineno=243, col_offset=40), 'FILE_PREFIX', Load(), lineno=243, col_offset=40)], [], None, None, lineno=243, col_offset=36), None, None), Load(), lineno=243, col_offset=27), lineno=243, col_offset=16)], [], lineno=242, col_offset=12), Assign([Name('parts', Store(), lineno=244, col_offset=12)], Call(Attribute(Name('fix_name', Load(), lineno=244, col_offset=20), 'split', Load(), lineno=244, col_offset=20), [Str('_', lineno=244, col_offset=35)], [], None, None, lineno=244, col_offset=20), lineno=244, col_offset=12), Assign([Name('class_name', Store(), lineno=245, col_offset=12)], BinOp(Attribute(Name('self', Load(), lineno=245, col_offset=25), 'CLASS_PREFIX', Load(), lineno=245, col_offset=25), Add(), Call(Attribute(Str('', lineno=245, col_offset=45), 'join', Load(), lineno=245, col_offset=45), [ListComp(Call(Attribute(Name('p', Load(), lineno=245, col_offset=54), 'title', Load(), lineno=245, col_offset=54), [], [], None, None, lineno=245, col_offset=54), [comprehension(Name('p', Store(), lineno=245, col_offset=68), Name('parts', Load(), lineno=245, col_offset=73), [])], lineno=245, col_offset=54)], [], None, None, lineno=245, col_offset=45), lineno=245, col_offset=25), lineno=245, col_offset=12), TryExcept([Assign([Name('fix_class', Store(), lineno=247, col_offset=16)], Call(Name('getattr', Load(), lineno=247, col_offset=28), [Name('mod', Load(), lineno=247, col_offset=36), Name('class_name', Load(), lineno=247, col_offset=41)], [], None, None, lineno=247, col_offset=28), lineno=247, col_offset=16)], [ExceptHandler(Name('AttributeError', Load(), lineno=248, col_offset=19), None, [Raise(Call(Name('FixerError', Load(), lineno=249, col_offset=22), [BinOp(Str("Can't find %s.%s", lineno=249, col_offset=33), Mod(), Tuple([Name('fix_name', Load(), lineno=249, col_offset=55), Name('class_name', Load(), lineno=249, col_offset=65)], Load(), lineno=249, col_offset=55), lineno=249, col_offset=33)], [], None, None, lineno=249, col_offset=22), None, None, lineno=249, col_offset=16)], lineno=248, col_offset=12)], [], lineno=246, col_offset=12), Assign([Name('fixer', Store(), lineno=250, col_offset=12)], Call(Name('fix_class', Load(), lineno=250, col_offset=20), [Attribute(Name('self', Load(), lineno=250, col_offset=30), 'options', Load(), lineno=250, col_offset=30), Attribute(Name('self', Load(), lineno=250, col_offset=44), 'fixer_log', Load(), lineno=250, col_offset=44)], [], None, None, lineno=250, col_offset=20), lineno=250, col_offset=12), If(BoolOp(And(), [Attribute(Name('fixer', Load(), lineno=251, col_offset=15), 'explicit', Load(), lineno=251, col_offset=15), Compare(Attribute(Name('self', Load(), lineno=251, col_offset=34), 'explicit', Load(), lineno=251, col_offset=34), [IsNot()], [Name('True', Load(), lineno=251, col_offset=55)], lineno=251, col_offset=34), Compare(Name('fix_mod_path', Load(), lineno=252, col_offset=20), [NotIn()], [Attribute(Name('self', Load(), lineno=252, col_offset=40), 'explicit', Load(), lineno=252, col_offset=40)], lineno=252, col_offset=20)], lineno=251, col_offset=15), [Expr(Call(Attribute(Name('self', Load(), lineno=253, col_offset=16), 'log_message', Load(), lineno=253, col_offset=16), [Str('Skipping implicit fixer: %s', lineno=253, col_offset=33), Name('fix_name', Load(), lineno=253, col_offset=64)], [], None, None, lineno=253, col_offset=16), lineno=253, col_offset=16), Continue( lineno=254, col_offset=16)], [], lineno=251, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=256, col_offset=12), 'log_debug', Load(), lineno=256, col_offset=12), [Str('Adding transformation: %s', lineno=256, col_offset=27), Name('fix_name', Load(), lineno=256, col_offset=56)], [], None, None, lineno=256, col_offset=12), lineno=256, col_offset=12), If(Compare(Attribute(Name('fixer', Load(), lineno=257, col_offset=15), 'order', Load(), lineno=257, col_offset=15), [Eq()], [Str('pre', lineno=257, col_offset=30)], lineno=257, col_offset=15), [Expr(Call(Attribute(Name('pre_order_fixers', Load(), lineno=258, col_offset=16), 'append', Load(), lineno=258, col_offset=16), [Name('fixer', Load(), lineno=258, col_offset=40)], [], None, None, lineno=258, col_offset=16), lineno=258, col_offset=16)], [If(Compare(Attribute(Name('fixer', Load(), lineno=259, col_offset=17), 'order', Load(), lineno=259, col_offset=17), [Eq()], [Str('post', lineno=259, col_offset=32)], lineno=259, col_offset=17), [Expr(Call(Attribute(Name('post_order_fixers', Load(), lineno=260, col_offset=16), 'append', Load(), lineno=260, col_offset=16), [Name('fixer', Load(), lineno=260, col_offset=41)], [], None, None, lineno=260, col_offset=16), lineno=260, col_offset=16)], [Raise(Call(Name('FixerError', Load(), lineno=262, col_offset=22), [BinOp(Str('Illegal fixer order: %r', lineno=262, col_offset=33), Mod(), Attribute(Name('fixer', Load(), lineno=262, col_offset=61), 'order', Load(), lineno=262, col_offset=61), lineno=262, col_offset=33)], [], None, None, lineno=262, col_offset=22), None, None, lineno=262, col_offset=16)], lineno=259, col_offset=17)], lineno=257, col_offset=12)], [], lineno=239, col_offset=8), Assign([Name('key_func', Store(), lineno=264, col_offset=8)], Call(Attribute(Name('operator', Load(), lineno=264, col_offset=19), 'attrgetter', Load(), lineno=264, col_offset=19), [Str('run_order', lineno=264, col_offset=39)], [], None, None, lineno=264, col_offset=19), lineno=264, col_offset=8), Expr(Call(Attribute(Name('pre_order_fixers', Load(), lineno=265, col_offset=8), 'sort', Load(), lineno=265, col_offset=8), [], [keyword('key', Name('key_func', Load(), lineno=265, col_offset=34))], None, None, lineno=265, col_offset=8), lineno=265, col_offset=8), Expr(Call(Attribute(Name('post_order_fixers', Load(), lineno=266, col_offset=8), 'sort', Load(), lineno=266, col_offset=8), [], [keyword('key', Name('key_func', Load(), lineno=266, col_offset=35))], None, None, lineno=266, col_offset=8), lineno=266, col_offset=8), Return(Tuple([Name('pre_order_fixers', Load(), lineno=267, col_offset=16), Name('post_order_fixers', Load(), lineno=267, col_offset=34)], Load(), lineno=267, col_offset=16), lineno=267, col_offset=8)], [], lineno=229, col_offset=4), FunctionDef('log_error', arguments([Name('self', Param(), lineno=269, col_offset=18), Name('msg', Param(), lineno=269, col_offset=24)], 'args', 'kwds', []), [Expr(Str('Called when an error occurs.', lineno=270, col_offset=8), lineno=270, col_offset=8), Raise(None, None, None, lineno=271, col_offset=8)], [], lineno=269, col_offset=4), FunctionDef('log_message', arguments([Name('self', Param(), lineno=273, col_offset=20), Name('msg', Param(), lineno=273, col_offset=26)], 'args', None, []), [Expr(Str('Hook to log a message.', lineno=274, col_offset=8), lineno=274, col_offset=8), If(Name('args', Load(), lineno=275, col_offset=11), [Assign([Name('msg', Store(), lineno=276, col_offset=12)], BinOp(Name('msg', Load(), lineno=276, col_offset=18), Mod(), Name('args', Load(), lineno=276, col_offset=24), lineno=276, col_offset=18), lineno=276, col_offset=12)], [], lineno=275, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=277, col_offset=8), 'logger', Load(), lineno=277, col_offset=8), 'info', Load(), lineno=277, col_offset=8), [Name('msg', Load(), lineno=277, col_offset=25)], [], None, None, lineno=277, col_offset=8), lineno=277, col_offset=8)], [], lineno=273, col_offset=4), FunctionDef('log_debug', arguments([Name('self', Param(), lineno=279, col_offset=18), Name('msg', Param(), lineno=279, col_offset=24)], 'args', None, []), [If(Name('args', Load(), lineno=280, col_offset=11), [Assign([Name('msg', Store(), lineno=281, col_offset=12)], BinOp(Name('msg', Load(), lineno=281, col_offset=18), Mod(), Name('args', Load(), lineno=281, col_offset=24), lineno=281, col_offset=18), lineno=281, col_offset=12)], [], lineno=280, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=282, col_offset=8), 'logger', Load(), lineno=282, col_offset=8), 'debug', Load(), lineno=282, col_offset=8), [Name('msg', Load(), lineno=282, col_offset=26)], [], None, None, lineno=282, col_offset=8), lineno=282, col_offset=8)], [], lineno=279, col_offset=4), FunctionDef('print_output', arguments([Name('self', Param(), lineno=284, col_offset=21), Name('old_text', Param(), lineno=284, col_offset=27), Name('new_text', Param(), lineno=284, col_offset=37), Name('filename', Param(), lineno=284, col_offset=47), Name('equal', Param(), lineno=284, col_offset=57)], None, None, []), [Expr(Str('Called with the old version, new version, and filename of a\n        refactored file.', lineno=286, col_offset=-1), lineno=286, col_offset=-1), Pass( lineno=287, col_offset=8)], [], lineno=284, col_offset=4), FunctionDef('refactor', arguments([Name('self', Param(), lineno=289, col_offset=17), Name('items', Param(), lineno=289, col_offset=23), Name('write', Param(), lineno=289, col_offset=30), Name('doctests_only', Param(), lineno=289, col_offset=43)], None, None, [Name('False', Load(), lineno=289, col_offset=36), Name('False', Load(), lineno=289, col_offset=57)]), [Expr(Str('Refactor a list of files and directories.', lineno=290, col_offset=8), lineno=290, col_offset=8), For(Name('dir_or_file', Store(), lineno=292, col_offset=12), Name('items', Load(), lineno=292, col_offset=27), [If(Call(Attribute(Attribute(Name('os', Load(), lineno=293, col_offset=15), 'path', Load(), lineno=293, col_offset=15), 'isdir', Load(), lineno=293, col_offset=15), [Name('dir_or_file', Load(), lineno=293, col_offset=29)], [], None, None, lineno=293, col_offset=15), [Expr(Call(Attribute(Name('self', Load(), lineno=294, col_offset=16), 'refactor_dir', Load(), lineno=294, col_offset=16), [Name('dir_or_file', Load(), lineno=294, col_offset=34), Name('write', Load(), lineno=294, col_offset=47), Name('doctests_only', Load(), lineno=294, col_offset=54)], [], None, None, lineno=294, col_offset=16), lineno=294, col_offset=16)], [Expr(Call(Attribute(Name('self', Load(), lineno=296, col_offset=16), 'refactor_file', Load(), lineno=296, col_offset=16), [Name('dir_or_file', Load(), lineno=296, col_offset=35), Name('write', Load(), lineno=296, col_offset=48), Name('doctests_only', Load(), lineno=296, col_offset=55)], [], None, None, lineno=296, col_offset=16), lineno=296, col_offset=16)], lineno=293, col_offset=12)], [], lineno=292, col_offset=8)], [], lineno=289, col_offset=4), FunctionDef('refactor_dir', arguments([Name('self', Param(), lineno=298, col_offset=21), Name('dir_name', Param(), lineno=298, col_offset=27), Name('write', Param(), lineno=298, col_offset=37), Name('doctests_only', Param(), lineno=298, col_offset=50)], None, None, [Name('False', Load(), lineno=298, col_offset=43), Name('False', Load(), lineno=298, col_offset=64)]), [Expr(Str("Descends down a directory and refactor every Python file found.\n\n        Python files are assumed to have a .py extension.\n\n        Files and subdirectories starting with '.' are skipped.\n        ", lineno=304, col_offset=-1), lineno=304, col_offset=-1), For(Tuple([Name('dirpath', Store(), lineno=305, col_offset=12), Name('dirnames', Store(), lineno=305, col_offset=21), Name('filenames', Store(), lineno=305, col_offset=31)], Store(), lineno=305, col_offset=12), Call(Attribute(Name('os', Load(), lineno=305, col_offset=44), 'walk', Load(), lineno=305, col_offset=44), [Name('dir_name', Load(), lineno=305, col_offset=52)], [], None, None, lineno=305, col_offset=44), [Expr(Call(Attribute(Name('self', Load(), lineno=306, col_offset=12), 'log_debug', Load(), lineno=306, col_offset=12), [Str('Descending into %s', lineno=306, col_offset=27), Name('dirpath', Load(), lineno=306, col_offset=49)], [], None, None, lineno=306, col_offset=12), lineno=306, col_offset=12), Expr(Call(Attribute(Name('dirnames', Load(), lineno=307, col_offset=12), 'sort', Load(), lineno=307, col_offset=12), [], [], None, None, lineno=307, col_offset=12), lineno=307, col_offset=12), Expr(Call(Attribute(Name('filenames', Load(), lineno=308, col_offset=12), 'sort', Load(), lineno=308, col_offset=12), [], [], None, None, lineno=308, col_offset=12), lineno=308, col_offset=12), For(Name('name', Store(), lineno=309, col_offset=16), Name('filenames', Load(), lineno=309, col_offset=24), [If(BoolOp(And(), [UnaryOp(Not(), Call(Attribute(Name('name', Load(), lineno=310, col_offset=23), 'startswith', Load(), lineno=310, col_offset=23), [Str('.', lineno=310, col_offset=39)], [], None, None, lineno=310, col_offset=23), lineno=310, col_offset=19), Call(Attribute(Subscript(Call(Attribute(Attribute(Name('os', Load(), lineno=311, col_offset=24), 'path', Load(), lineno=311, col_offset=24), 'splitext', Load(), lineno=311, col_offset=24), [Name('name', Load(), lineno=311, col_offset=41)], [], None, None, lineno=311, col_offset=24), Index(Num(1, lineno=311, col_offset=47)), Load(), lineno=311, col_offset=24), 'endswith', Load(), lineno=311, col_offset=24), [Str('py', lineno=311, col_offset=59)], [], None, None, lineno=311, col_offset=24)], lineno=310, col_offset=19), [Assign([Name('fullname', Store(), lineno=312, col_offset=20)], Call(Attribute(Attribute(Name('os', Load(), lineno=312, col_offset=31), 'path', Load(), lineno=312, col_offset=31), 'join', Load(), lineno=312, col_offset=31), [Name('dirpath', Load(), lineno=312, col_offset=44), Name('name', Load(), lineno=312, col_offset=53)], [], None, None, lineno=312, col_offset=31), lineno=312, col_offset=20), Expr(Call(Attribute(Name('self', Load(), lineno=313, col_offset=20), 'refactor_file', Load(), lineno=313, col_offset=20), [Name('fullname', Load(), lineno=313, col_offset=39), Name('write', Load(), lineno=313, col_offset=49), Name('doctests_only', Load(), lineno=313, col_offset=56)], [], None, None, lineno=313, col_offset=20), lineno=313, col_offset=20)], [], lineno=310, col_offset=16)], [], lineno=309, col_offset=12), Assign([Subscript(Name('dirnames', Load(), lineno=315, col_offset=12), Slice(None, None, None), Store(), lineno=315, col_offset=12)], ListComp(Name('dn', Load(), lineno=315, col_offset=27), [comprehension(Name('dn', Store(), lineno=315, col_offset=34), Name('dirnames', Load(), lineno=315, col_offset=40), [UnaryOp(Not(), Call(Attribute(Name('dn', Load(), lineno=315, col_offset=56), 'startswith', Load(), lineno=315, col_offset=56), [Str('.', lineno=315, col_offset=70)], [], None, None, lineno=315, col_offset=56), lineno=315, col_offset=52)])], lineno=315, col_offset=27), lineno=315, col_offset=12)], [], lineno=305, col_offset=8)], [], lineno=298, col_offset=4), FunctionDef('_read_python_source', arguments([Name('self', Param(), lineno=317, col_offset=28), Name('filename', Param(), lineno=317, col_offset=34)], None, None, []), [Expr(Str('\n        Do our best to decode a Python source file correctly.\n        ', lineno=320, col_offset=-1), lineno=320, col_offset=-1), TryExcept([Assign([Name('f', Store(), lineno=322, col_offset=12)], Call(Name('open', Load(), lineno=322, col_offset=16), [Name('filename', Load(), lineno=322, col_offset=21), Str('rb', lineno=322, col_offset=31)], [], None, None, lineno=322, col_offset=16), lineno=322, col_offset=12)], [ExceptHandler(Name('IOError', Load(), lineno=323, col_offset=15), Name('err', Store(), lineno=323, col_offset=26), [Expr(Call(Attribute(Name('self', Load(), lineno=324, col_offset=12), 'log_error', Load(), lineno=324, col_offset=12), [Str("Can't open %s: %s", lineno=324, col_offset=27), Name('filename', Load(), lineno=324, col_offset=48), Name('err', Load(), lineno=324, col_offset=58)], [], None, None, lineno=324, col_offset=12), lineno=324, col_offset=12), Return(Tuple([Name('None', Load(), lineno=325, col_offset=19), Name('None', Load(), lineno=325, col_offset=25)], Load(), lineno=325, col_offset=19), lineno=325, col_offset=12)], lineno=323, col_offset=8)], [], lineno=321, col_offset=8), TryFinally([Assign([Name('encoding', Store(), lineno=327, col_offset=12)], Subscript(Call(Attribute(Name('tokenize', Load(), lineno=327, col_offset=23), 'detect_encoding', Load(), lineno=327, col_offset=23), [Attribute(Name('f', Load(), lineno=327, col_offset=48), 'readline', Load(), lineno=327, col_offset=48)], [], None, None, lineno=327, col_offset=23), Index(Num(0, lineno=327, col_offset=60)), Load(), lineno=327, col_offset=23), lineno=327, col_offset=12)], [Expr(Call(Attribute(Name('f', Load(), lineno=329, col_offset=12), 'close', Load(), lineno=329, col_offset=12), [], [], None, None, lineno=329, col_offset=12), lineno=329, col_offset=12)], lineno=326, col_offset=8), With(Call(Name('_open_with_encoding', Load(), lineno=330, col_offset=13), [Name('filename', Load(), lineno=330, col_offset=33), Str('r', lineno=330, col_offset=43)], [keyword('encoding', Name('encoding', Load(), lineno=330, col_offset=57))], None, None, lineno=330, col_offset=13), Name('f', Store(), lineno=330, col_offset=70), [Return(Tuple([Call(Name('_from_system_newlines', Load(), lineno=331, col_offset=19), [Call(Attribute(Name('f', Load(), lineno=331, col_offset=41), 'read', Load(), lineno=331, col_offset=41), [], [], None, None, lineno=331, col_offset=41)], [], None, None, lineno=331, col_offset=19), Name('encoding', Load(), lineno=331, col_offset=52)], Load(), lineno=331, col_offset=19), lineno=331, col_offset=12)], lineno=330, col_offset=13)], [], lineno=317, col_offset=4), FunctionDef('refactor_file', arguments([Name('self', Param(), lineno=333, col_offset=22), Name('filename', Param(), lineno=333, col_offset=28), Name('write', Param(), lineno=333, col_offset=38), Name('doctests_only', Param(), lineno=333, col_offset=51)], None, None, [Name('False', Load(), lineno=333, col_offset=44), Name('False', Load(), lineno=333, col_offset=65)]), [Expr(Str('Refactors a file.', lineno=334, col_offset=8), lineno=334, col_offset=8), Assign([Tuple([Name('input', Store(), lineno=335, col_offset=8), Name('encoding', Store(), lineno=335, col_offset=15)], Store(), lineno=335, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=335, col_offset=26), '_read_python_source', Load(), lineno=335, col_offset=26), [Name('filename', Load(), lineno=335, col_offset=51)], [], None, None, lineno=335, col_offset=26), lineno=335, col_offset=8), If(Compare(Name('input', Load(), lineno=336, col_offset=11), [Is()], [Name('None', Load(), lineno=336, col_offset=20)], lineno=336, col_offset=11), [Return(None, lineno=338, col_offset=12)], [], lineno=336, col_offset=8), AugAssign(Name('input', Store(), lineno=339, col_offset=8), Add(), Str(u'\n', lineno=339, col_offset=17), lineno=339, col_offset=8), If(Name('doctests_only', Load(), lineno=340, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=341, col_offset=12), 'log_debug', Load(), lineno=341, col_offset=12), [Str('Refactoring doctests in %s', lineno=341, col_offset=27), Name('filename', Load(), lineno=341, col_offset=57)], [], None, None, lineno=341, col_offset=12), lineno=341, col_offset=12), Assign([Name('output', Store(), lineno=342, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=342, col_offset=21), 'refactor_docstring', Load(), lineno=342, col_offset=21), [Name('input', Load(), lineno=342, col_offset=45), Name('filename', Load(), lineno=342, col_offset=52)], [], None, None, lineno=342, col_offset=21), lineno=342, col_offset=12), If(Compare(Name('output', Load(), lineno=343, col_offset=15), [NotEq()], [Name('input', Load(), lineno=343, col_offset=25)], lineno=343, col_offset=15), [Expr(Call(Attribute(Name('self', Load(), lineno=344, col_offset=16), 'processed_file', Load(), lineno=344, col_offset=16), [Name('output', Load(), lineno=344, col_offset=36), Name('filename', Load(), lineno=344, col_offset=44), Name('input', Load(), lineno=344, col_offset=54), Name('write', Load(), lineno=344, col_offset=61), Name('encoding', Load(), lineno=344, col_offset=68)], [], None, None, lineno=344, col_offset=16), lineno=344, col_offset=16)], [Expr(Call(Attribute(Name('self', Load(), lineno=346, col_offset=16), 'log_debug', Load(), lineno=346, col_offset=16), [Str('No doctest changes in %s', lineno=346, col_offset=31), Name('filename', Load(), lineno=346, col_offset=59)], [], None, None, lineno=346, col_offset=16), lineno=346, col_offset=16)], lineno=343, col_offset=12)], [Assign([Name('tree', Store(), lineno=348, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=348, col_offset=19), 'refactor_string', Load(), lineno=348, col_offset=19), [Name('input', Load(), lineno=348, col_offset=40), Name('filename', Load(), lineno=348, col_offset=47)], [], None, None, lineno=348, col_offset=19), lineno=348, col_offset=12), If(BoolOp(And(), [Name('tree', Load(), lineno=349, col_offset=15), Attribute(Name('tree', Load(), lineno=349, col_offset=24), 'was_changed', Load(), lineno=349, col_offset=24)], lineno=349, col_offset=15), [Expr(Call(Attribute(Name('self', Load(), lineno=351, col_offset=16), 'processed_file', Load(), lineno=351, col_offset=16), [Subscript(Call(Name('unicode', Load(), lineno=351, col_offset=36), [Name('tree', Load(), lineno=351, col_offset=44)], [], None, None, lineno=351, col_offset=36), Slice(None, Num(-1, lineno=351, col_offset=52), None), Load(), lineno=351, col_offset=36), Name('filename', Load(), lineno=351, col_offset=56)], [keyword('write', Name('write', Load(), lineno=352, col_offset=42)), keyword('encoding', Name('encoding', Load(), lineno=352, col_offset=58))], None, None, lineno=351, col_offset=16), lineno=351, col_offset=16)], [Expr(Call(Attribute(Name('self', Load(), lineno=354, col_offset=16), 'log_debug', Load(), lineno=354, col_offset=16), [Str('No changes in %s', lineno=354, col_offset=31), Name('filename', Load(), lineno=354, col_offset=51)], [], None, None, lineno=354, col_offset=16), lineno=354, col_offset=16)], lineno=349, col_offset=12)], lineno=340, col_offset=8)], [], lineno=333, col_offset=4), FunctionDef('refactor_string', arguments([Name('self', Param(), lineno=356, col_offset=24), Name('data', Param(), lineno=356, col_offset=30), Name('name', Param(), lineno=356, col_offset=36)], None, None, []), [Expr(Str('Refactor a given input string.\n\n        Args:\n            data: a string holding the code to be refactored.\n            name: a human-readable name for use in error/log messages.\n\n        Returns:\n            An AST corresponding to the refactored input stream; None if\n            there were errors during the parse.\n        ', lineno=366, col_offset=-1), lineno=366, col_offset=-1), Assign([Name('features', Store(), lineno=367, col_offset=8)], Call(Name('_detect_future_features', Load(), lineno=367, col_offset=19), [Name('data', Load(), lineno=367, col_offset=43)], [], None, None, lineno=367, col_offset=19), lineno=367, col_offset=8), If(Compare(Str('print_function', lineno=368, col_offset=11), [In()], [Name('features', Load(), lineno=368, col_offset=31)], lineno=368, col_offset=11), [Assign([Attribute(Attribute(Name('self', Load(), lineno=369, col_offset=12), 'driver', Load(), lineno=369, col_offset=12), 'grammar', Store(), lineno=369, col_offset=12)], Attribute(Name('pygram', Load(), lineno=369, col_offset=34), 'python_grammar_no_print_statement', Load(), lineno=369, col_offset=34), lineno=369, col_offset=12)], [], lineno=368, col_offset=8), TryFinally([TryExcept([Assign([Name('tree', Store(), lineno=371, col_offset=12)], Call(Attribute(Attribute(Name('self', Load(), lineno=371, col_offset=19), 'driver', Load(), lineno=371, col_offset=19), 'parse_string', Load(), lineno=371, col_offset=19), [Name('data', Load(), lineno=371, col_offset=44)], [], None, None, lineno=371, col_offset=19), lineno=371, col_offset=12)], [ExceptHandler(Name('Exception', Load(), lineno=372, col_offset=15), Name('err', Store(), lineno=372, col_offset=28), [Expr(Call(Attribute(Name('self', Load(), lineno=373, col_offset=12), 'log_error', Load(), lineno=373, col_offset=12), [Str("Can't parse %s: %s: %s", lineno=373, col_offset=27), Name('name', Load(), lineno=374, col_offset=27), Attribute(Attribute(Name('err', Load(), lineno=374, col_offset=33), '__class__', Load(), lineno=374, col_offset=33), '__name__', Load(), lineno=374, col_offset=33), Name('err', Load(), lineno=374, col_offset=57)], [], None, None, lineno=373, col_offset=12), lineno=373, col_offset=12), Return(None, lineno=375, col_offset=12)], lineno=372, col_offset=8)], [], lineno=370, col_offset=8)], [Assign([Attribute(Attribute(Name('self', Load(), lineno=377, col_offset=12), 'driver', Load(), lineno=377, col_offset=12), 'grammar', Store(), lineno=377, col_offset=12)], Attribute(Name('self', Load(), lineno=377, col_offset=34), 'grammar', Load(), lineno=377, col_offset=34), lineno=377, col_offset=12)], lineno=370, col_offset=8), Assign([Attribute(Name('tree', Load(), lineno=378, col_offset=8), 'future_features', Store(), lineno=378, col_offset=8)], Name('features', Load(), lineno=378, col_offset=31), lineno=378, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=379, col_offset=8), 'log_debug', Load(), lineno=379, col_offset=8), [Str('Refactoring %s', lineno=379, col_offset=23), Name('name', Load(), lineno=379, col_offset=41)], [], None, None, lineno=379, col_offset=8), lineno=379, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=380, col_offset=8), 'refactor_tree', Load(), lineno=380, col_offset=8), [Name('tree', Load(), lineno=380, col_offset=27), Name('name', Load(), lineno=380, col_offset=33)], [], None, None, lineno=380, col_offset=8), lineno=380, col_offset=8), Return(Name('tree', Load(), lineno=381, col_offset=15), lineno=381, col_offset=8)], [], lineno=356, col_offset=4), FunctionDef('refactor_stdin', arguments([Name('self', Param(), lineno=383, col_offset=23), Name('doctests_only', Param(), lineno=383, col_offset=29)], None, None, [Name('False', Load(), lineno=383, col_offset=43)]), [Assign([Name('input', Store(), lineno=384, col_offset=8)], Call(Attribute(Attribute(Name('sys', Load(), lineno=384, col_offset=16), 'stdin', Load(), lineno=384, col_offset=16), 'read', Load(), lineno=384, col_offset=16), [], [], None, None, lineno=384, col_offset=16), lineno=384, col_offset=8), If(Name('doctests_only', Load(), lineno=385, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=386, col_offset=12), 'log_debug', Load(), lineno=386, col_offset=12), [Str('Refactoring doctests in stdin', lineno=386, col_offset=27)], [], None, None, lineno=386, col_offset=12), lineno=386, col_offset=12), Assign([Name('output', Store(), lineno=387, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=387, col_offset=21), 'refactor_docstring', Load(), lineno=387, col_offset=21), [Name('input', Load(), lineno=387, col_offset=45), Str('<stdin>', lineno=387, col_offset=52)], [], None, None, lineno=387, col_offset=21), lineno=387, col_offset=12), If(Compare(Name('output', Load(), lineno=388, col_offset=15), [NotEq()], [Name('input', Load(), lineno=388, col_offset=25)], lineno=388, col_offset=15), [Expr(Call(Attribute(Name('self', Load(), lineno=389, col_offset=16), 'processed_file', Load(), lineno=389, col_offset=16), [Name('output', Load(), lineno=389, col_offset=36), Str('<stdin>', lineno=389, col_offset=44), Name('input', Load(), lineno=389, col_offset=55)], [], None, None, lineno=389, col_offset=16), lineno=389, col_offset=16)], [Expr(Call(Attribute(Name('self', Load(), lineno=391, col_offset=16), 'log_debug', Load(), lineno=391, col_offset=16), [Str('No doctest changes in stdin', lineno=391, col_offset=31)], [], None, None, lineno=391, col_offset=16), lineno=391, col_offset=16)], lineno=388, col_offset=12)], [Assign([Name('tree', Store(), lineno=393, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=393, col_offset=19), 'refactor_string', Load(), lineno=393, col_offset=19), [Name('input', Load(), lineno=393, col_offset=40), Str('<stdin>', lineno=393, col_offset=47)], [], None, None, lineno=393, col_offset=19), lineno=393, col_offset=12), If(BoolOp(And(), [Name('tree', Load(), lineno=394, col_offset=15), Attribute(Name('tree', Load(), lineno=394, col_offset=24), 'was_changed', Load(), lineno=394, col_offset=24)], lineno=394, col_offset=15), [Expr(Call(Attribute(Name('self', Load(), lineno=395, col_offset=16), 'processed_file', Load(), lineno=395, col_offset=16), [Call(Name('unicode', Load(), lineno=395, col_offset=36), [Name('tree', Load(), lineno=395, col_offset=44)], [], None, None, lineno=395, col_offset=36), Str('<stdin>', lineno=395, col_offset=51), Name('input', Load(), lineno=395, col_offset=62)], [], None, None, lineno=395, col_offset=16), lineno=395, col_offset=16)], [Expr(Call(Attribute(Name('self', Load(), lineno=397, col_offset=16), 'log_debug', Load(), lineno=397, col_offset=16), [Str('No changes in stdin', lineno=397, col_offset=31)], [], None, None, lineno=397, col_offset=16), lineno=397, col_offset=16)], lineno=394, col_offset=12)], lineno=385, col_offset=8)], [], lineno=383, col_offset=4), FunctionDef('refactor_tree', arguments([Name('self', Param(), lineno=399, col_offset=22), Name('tree', Param(), lineno=399, col_offset=28), Name('name', Param(), lineno=399, col_offset=34)], None, None, []), [Expr(Str('Refactors a parse tree (modifying the tree in place).\n\n        For compatible patterns the bottom matcher module is\n        used. Otherwise the tree is traversed node-to-node for\n        matches.\n\n        Args:\n            tree: a pytree.Node instance representing the root of the tree\n                  to be refactored.\n            name: a human-readable name for this tree.\n\n        Returns:\n            True if the tree was modified, False otherwise.\n        ', lineno=413, col_offset=-1), lineno=413, col_offset=-1), For(Name('fixer', Store(), lineno=415, col_offset=12), Call(Name('chain', Load(), lineno=415, col_offset=21), [Attribute(Name('self', Load(), lineno=415, col_offset=27), 'pre_order', Load(), lineno=415, col_offset=27), Attribute(Name('self', Load(), lineno=415, col_offset=43), 'post_order', Load(), lineno=415, col_offset=43)], [], None, None, lineno=415, col_offset=21), [Expr(Call(Attribute(Name('fixer', Load(), lineno=416, col_offset=12), 'start_tree', Load(), lineno=416, col_offset=12), [Name('tree', Load(), lineno=416, col_offset=29), Name('name', Load(), lineno=416, col_offset=35)], [], None, None, lineno=416, col_offset=12), lineno=416, col_offset=12)], [], lineno=415, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=419, col_offset=8), 'traverse_by', Load(), lineno=419, col_offset=8), [Attribute(Name('self', Load(), lineno=419, col_offset=25), 'bmi_pre_order_heads', Load(), lineno=419, col_offset=25), Call(Attribute(Name('tree', Load(), lineno=419, col_offset=51), 'pre_order', Load(), lineno=419, col_offset=51), [], [], None, None, lineno=419, col_offset=51)], [], None, None, lineno=419, col_offset=8), lineno=419, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=420, col_offset=8), 'traverse_by', Load(), lineno=420, col_offset=8), [Attribute(Name('self', Load(), lineno=420, col_offset=25), 'bmi_post_order_heads', Load(), lineno=420, col_offset=25), Call(Attribute(Name('tree', Load(), lineno=420, col_offset=52), 'post_order', Load(), lineno=420, col_offset=52), [], [], None, None, lineno=420, col_offset=52)], [], None, None, lineno=420, col_offset=8), lineno=420, col_offset=8), Assign([Name('match_set', Store(), lineno=423, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=423, col_offset=20), 'BM', Load(), lineno=423, col_offset=20), 'run', Load(), lineno=423, col_offset=20), [Call(Attribute(Name('tree', Load(), lineno=423, col_offset=32), 'leaves', Load(), lineno=423, col_offset=32), [], [], None, None, lineno=423, col_offset=32)], [], None, None, lineno=423, col_offset=20), lineno=423, col_offset=8), While(Call(Name('any', Load(), lineno=425, col_offset=14), [Call(Attribute(Name('match_set', Load(), lineno=425, col_offset=18), 'values', Load(), lineno=425, col_offset=18), [], [], None, None, lineno=425, col_offset=18)], [], None, None, lineno=425, col_offset=14), [For(Name('fixer', Store(), lineno=426, col_offset=16), Attribute(Attribute(Name('self', Load(), lineno=426, col_offset=25), 'BM', Load(), lineno=426, col_offset=25), 'fixers', Load(), lineno=426, col_offset=25), [If(BoolOp(And(), [Compare(Name('fixer', Load(), lineno=427, col_offset=19), [In()], [Name('match_set', Load(), lineno=427, col_offset=28)], lineno=427, col_offset=19), Subscript(Name('match_set', Load(), lineno=427, col_offset=42), Index(Name('fixer', Load(), lineno=427, col_offset=52)), Load(), lineno=427, col_offset=42)], lineno=427, col_offset=19), [Expr(Call(Attribute(Subscript(Name('match_set', Load(), lineno=429, col_offset=20), Index(Name('fixer', Load(), lineno=429, col_offset=30)), Load(), lineno=429, col_offset=20), 'sort', Load(), lineno=429, col_offset=20), [], [keyword('key', Attribute(Attribute(Name('pytree', Load(), lineno=429, col_offset=46), 'Base', Load(), lineno=429, col_offset=46), 'depth', Load(), lineno=429, col_offset=46)), keyword('reverse', Name('True', Load(), lineno=429, col_offset=73))], None, None, lineno=429, col_offset=20), lineno=429, col_offset=20), If(Attribute(Name('fixer', Load(), lineno=431, col_offset=23), 'keep_line_order', Load(), lineno=431, col_offset=23), [Expr(Call(Attribute(Subscript(Name('match_set', Load(), lineno=434, col_offset=24), Index(Name('fixer', Load(), lineno=434, col_offset=34)), Load(), lineno=434, col_offset=24), 'sort', Load(), lineno=434, col_offset=24), [], [keyword('key', Attribute(Attribute(Name('pytree', Load(), lineno=434, col_offset=50), 'Base', Load(), lineno=434, col_offset=50), 'get_lineno', Load(), lineno=434, col_offset=50))], None, None, lineno=434, col_offset=24), lineno=434, col_offset=24)], [], lineno=431, col_offset=20), For(Name('node', Store(), lineno=436, col_offset=24), Call(Name('list', Load(), lineno=436, col_offset=32), [Subscript(Name('match_set', Load(), lineno=436, col_offset=37), Index(Name('fixer', Load(), lineno=436, col_offset=47)), Load(), lineno=436, col_offset=37)], [], None, None, lineno=436, col_offset=32), [If(Compare(Name('node', Load(), lineno=437, col_offset=27), [In()], [Subscript(Name('match_set', Load(), lineno=437, col_offset=35), Index(Name('fixer', Load(), lineno=437, col_offset=45)), Load(), lineno=437, col_offset=35)], lineno=437, col_offset=27), [Expr(Call(Attribute(Subscript(Name('match_set', Load(), lineno=438, col_offset=28), Index(Name('fixer', Load(), lineno=438, col_offset=38)), Load(), lineno=438, col_offset=28), 'remove', Load(), lineno=438, col_offset=28), [Name('node', Load(), lineno=438, col_offset=52)], [], None, None, lineno=438, col_offset=28), lineno=438, col_offset=28)], [], lineno=437, col_offset=24), TryExcept([Expr(Call(Name('find_root', Load(), lineno=441, col_offset=28), [Name('node', Load(), lineno=441, col_offset=38)], [], None, None, lineno=441, col_offset=28), lineno=441, col_offset=28)], [ExceptHandler(Name('AssertionError', Load(), lineno=442, col_offset=31), None, [Continue( lineno=445, col_offset=28)], lineno=442, col_offset=24)], [], lineno=440, col_offset=24), If(BoolOp(And(), [Attribute(Name('node', Load(), lineno=447, col_offset=27), 'fixers_applied', Load(), lineno=447, col_offset=27), Compare(Name('fixer', Load(), lineno=447, col_offset=51), [In()], [Attribute(Name('node', Load(), lineno=447, col_offset=60), 'fixers_applied', Load(), lineno=447, col_offset=60)], lineno=447, col_offset=51)], lineno=447, col_offset=27), [Continue( lineno=449, col_offset=28)], [], lineno=447, col_offset=24), Assign([Name('results', Store(), lineno=451, col_offset=24)], Call(Attribute(Name('fixer', Load(), lineno=451, col_offset=34), 'match', Load(), lineno=451, col_offset=34), [Name('node', Load(), lineno=451, col_offset=46)], [], None, None, lineno=451, col_offset=34), lineno=451, col_offset=24), If(Name('results', Load(), lineno=453, col_offset=27), [Assign([Name('new', Store(), lineno=454, col_offset=28)], Call(Attribute(Name('fixer', Load(), lineno=454, col_offset=34), 'transform', Load(), lineno=454, col_offset=34), [Name('node', Load(), lineno=454, col_offset=50), Name('results', Load(), lineno=454, col_offset=56)], [], None, None, lineno=454, col_offset=34), lineno=454, col_offset=28), If(Compare(Name('new', Load(), lineno=455, col_offset=31), [IsNot()], [Name('None', Load(), lineno=455, col_offset=42)], lineno=455, col_offset=31), [Expr(Call(Attribute(Name('node', Load(), lineno=456, col_offset=32), 'replace', Load(), lineno=456, col_offset=32), [Name('new', Load(), lineno=456, col_offset=45)], [], None, None, lineno=456, col_offset=32), lineno=456, col_offset=32), For(Name('node', Store(), lineno=458, col_offset=36), Call(Attribute(Name('new', Load(), lineno=458, col_offset=44), 'post_order', Load(), lineno=458, col_offset=44), [], [], None, None, lineno=458, col_offset=44), [If(UnaryOp(Not(), Attribute(Name('node', Load(), lineno=461, col_offset=43), 'fixers_applied', Load(), lineno=461, col_offset=43), lineno=461, col_offset=39), [Assign([Attribute(Name('node', Load(), lineno=462, col_offset=40), 'fixers_applied', Store(), lineno=462, col_offset=40)], List([], Load(), lineno=462, col_offset=62), lineno=462, col_offset=40)], [], lineno=461, col_offset=36), Expr(Call(Attribute(Attribute(Name('node', Load(), lineno=463, col_offset=36), 'fixers_applied', Load(), lineno=463, col_offset=36), 'append', Load(), lineno=463, col_offset=36), [Name('fixer', Load(), lineno=463, col_offset=63)], [], None, None, lineno=463, col_offset=36), lineno=463, col_offset=36)], [], lineno=458, col_offset=32), Assign([Name('new_matches', Store(), lineno=467, col_offset=32)], Call(Attribute(Attribute(Name('self', Load(), lineno=467, col_offset=46), 'BM', Load(), lineno=467, col_offset=46), 'run', Load(), lineno=467, col_offset=46), [Call(Attribute(Name('new', Load(), lineno=467, col_offset=58), 'leaves', Load(), lineno=467, col_offset=58), [], [], None, None, lineno=467, col_offset=58)], [], None, None, lineno=467, col_offset=46), lineno=467, col_offset=32), For(Name('fxr', Store(), lineno=468, col_offset=36), Name('new_matches', Load(), lineno=468, col_offset=43), [If(UnaryOp(Not(), Compare(Name('fxr', Load(), lineno=469, col_offset=43), [In()], [Name('match_set', Load(), lineno=469, col_offset=50)], lineno=469, col_offset=43), lineno=469, col_offset=39), [Assign([Subscript(Name('match_set', Load(), lineno=470, col_offset=40), Index(Name('fxr', Load(), lineno=470, col_offset=50)), Store(), lineno=470, col_offset=40)], List([], Load(), lineno=470, col_offset=55), lineno=470, col_offset=40)], [], lineno=469, col_offset=36), Expr(Call(Attribute(Subscript(Name('match_set', Load(), lineno=472, col_offset=36), Index(Name('fxr', Load(), lineno=472, col_offset=46)), Load(), lineno=472, col_offset=36), 'extend', Load(), lineno=472, col_offset=36), [Subscript(Name('new_matches', Load(), lineno=472, col_offset=58), Index(Name('fxr', Load(), lineno=472, col_offset=70)), Load(), lineno=472, col_offset=58)], [], None, None, lineno=472, col_offset=36), lineno=472, col_offset=36)], [], lineno=468, col_offset=32)], [], lineno=455, col_offset=28)], [], lineno=453, col_offset=24)], [], lineno=436, col_offset=20)], [], lineno=427, col_offset=16)], [], lineno=426, col_offset=12)], [], lineno=425, col_offset=8), For(Name('fixer', Store(), lineno=474, col_offset=12), Call(Name('chain', Load(), lineno=474, col_offset=21), [Attribute(Name('self', Load(), lineno=474, col_offset=27), 'pre_order', Load(), lineno=474, col_offset=27), Attribute(Name('self', Load(), lineno=474, col_offset=43), 'post_order', Load(), lineno=474, col_offset=43)], [], None, None, lineno=474, col_offset=21), [Expr(Call(Attribute(Name('fixer', Load(), lineno=475, col_offset=12), 'finish_tree', Load(), lineno=475, col_offset=12), [Name('tree', Load(), lineno=475, col_offset=30), Name('name', Load(), lineno=475, col_offset=36)], [], None, None, lineno=475, col_offset=12), lineno=475, col_offset=12)], [], lineno=474, col_offset=8), Return(Attribute(Name('tree', Load(), lineno=476, col_offset=15), 'was_changed', Load(), lineno=476, col_offset=15), lineno=476, col_offset=8)], [], lineno=399, col_offset=4), FunctionDef('traverse_by', arguments([Name('self', Param(), lineno=478, col_offset=20), Name('fixers', Param(), lineno=478, col_offset=26), Name('traversal', Param(), lineno=478, col_offset=34)], None, None, []), [Expr(Str('Traverse an AST, applying a set of fixers to each node.\n\n        This is a helper method for refactor_tree().\n\n        Args:\n            fixers: a list of fixer instances.\n            traversal: a generator that yields AST nodes.\n\n        Returns:\n            None\n        ', lineno=489, col_offset=-1), lineno=489, col_offset=-1), If(UnaryOp(Not(), Name('fixers', Load(), lineno=490, col_offset=15), lineno=490, col_offset=11), [Return(None, lineno=491, col_offset=12)], [], lineno=490, col_offset=8), For(Name('node', Store(), lineno=492, col_offset=12), Name('traversal', Load(), lineno=492, col_offset=20), [For(Name('fixer', Store(), lineno=493, col_offset=16), Subscript(Name('fixers', Load(), lineno=493, col_offset=25), Index(Attribute(Name('node', Load(), lineno=493, col_offset=32), 'type', Load(), lineno=493, col_offset=32)), Load(), lineno=493, col_offset=25), [Assign([Name('results', Store(), lineno=494, col_offset=16)], Call(Attribute(Name('fixer', Load(), lineno=494, col_offset=26), 'match', Load(), lineno=494, col_offset=26), [Name('node', Load(), lineno=494, col_offset=38)], [], None, None, lineno=494, col_offset=26), lineno=494, col_offset=16), If(Name('results', Load(), lineno=495, col_offset=19), [Assign([Name('new', Store(), lineno=496, col_offset=20)], Call(Attribute(Name('fixer', Load(), lineno=496, col_offset=26), 'transform', Load(), lineno=496, col_offset=26), [Name('node', Load(), lineno=496, col_offset=42), Name('results', Load(), lineno=496, col_offset=48)], [], None, None, lineno=496, col_offset=26), lineno=496, col_offset=20), If(Compare(Name('new', Load(), lineno=497, col_offset=23), [IsNot()], [Name('None', Load(), lineno=497, col_offset=34)], lineno=497, col_offset=23), [Expr(Call(Attribute(Name('node', Load(), lineno=498, col_offset=24), 'replace', Load(), lineno=498, col_offset=24), [Name('new', Load(), lineno=498, col_offset=37)], [], None, None, lineno=498, col_offset=24), lineno=498, col_offset=24), Assign([Name('node', Store(), lineno=499, col_offset=24)], Name('new', Load(), lineno=499, col_offset=31), lineno=499, col_offset=24)], [], lineno=497, col_offset=20)], [], lineno=495, col_offset=16)], [], lineno=493, col_offset=12)], [], lineno=492, col_offset=8)], [], lineno=478, col_offset=4), FunctionDef('processed_file', arguments([Name('self', Param(), lineno=501, col_offset=23), Name('new_text', Param(), lineno=501, col_offset=29), Name('filename', Param(), lineno=501, col_offset=39), Name('old_text', Param(), lineno=501, col_offset=49), Name('write', Param(), lineno=501, col_offset=64), Name('encoding', Param(), lineno=502, col_offset=23)], None, None, [Name('None', Load(), lineno=501, col_offset=58), Name('False', Load(), lineno=501, col_offset=70), Name('None', Load(), lineno=502, col_offset=32)]), [Expr(Str('\n        Called when a file has been refactored, and there are changes.\n        ', lineno=505, col_offset=-1), lineno=505, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=506, col_offset=8), 'files', Load(), lineno=506, col_offset=8), 'append', Load(), lineno=506, col_offset=8), [Name('filename', Load(), lineno=506, col_offset=26)], [], None, None, lineno=506, col_offset=8), lineno=506, col_offset=8), If(Compare(Name('old_text', Load(), lineno=507, col_offset=11), [Is()], [Name('None', Load(), lineno=507, col_offset=23)], lineno=507, col_offset=11), [Assign([Name('old_text', Store(), lineno=508, col_offset=12)], Subscript(Call(Attribute(Name('self', Load(), lineno=508, col_offset=23), '_read_python_source', Load(), lineno=508, col_offset=23), [Name('filename', Load(), lineno=508, col_offset=48)], [], None, None, lineno=508, col_offset=23), Index(Num(0, lineno=508, col_offset=58)), Load(), lineno=508, col_offset=23), lineno=508, col_offset=12), If(Compare(Name('old_text', Load(), lineno=509, col_offset=15), [Is()], [Name('None', Load(), lineno=509, col_offset=27)], lineno=509, col_offset=15), [Return(None, lineno=510, col_offset=16)], [], lineno=509, col_offset=12)], [], lineno=507, col_offset=8), Assign([Name('equal', Store(), lineno=511, col_offset=8)], Compare(Name('old_text', Load(), lineno=511, col_offset=16), [Eq()], [Name('new_text', Load(), lineno=511, col_offset=28)], lineno=511, col_offset=16), lineno=511, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=512, col_offset=8), 'print_output', Load(), lineno=512, col_offset=8), [Name('old_text', Load(), lineno=512, col_offset=26), Name('new_text', Load(), lineno=512, col_offset=36), Name('filename', Load(), lineno=512, col_offset=46), Name('equal', Load(), lineno=512, col_offset=56)], [], None, None, lineno=512, col_offset=8), lineno=512, col_offset=8), If(Name('equal', Load(), lineno=513, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=514, col_offset=12), 'log_debug', Load(), lineno=514, col_offset=12), [Str('No changes to %s', lineno=514, col_offset=27), Name('filename', Load(), lineno=514, col_offset=47)], [], None, None, lineno=514, col_offset=12), lineno=514, col_offset=12), Return(None, lineno=515, col_offset=12)], [], lineno=513, col_offset=8), If(Name('write', Load(), lineno=516, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=517, col_offset=12), 'write_file', Load(), lineno=517, col_offset=12), [Name('new_text', Load(), lineno=517, col_offset=28), Name('filename', Load(), lineno=517, col_offset=38), Name('old_text', Load(), lineno=517, col_offset=48), Name('encoding', Load(), lineno=517, col_offset=58)], [], None, None, lineno=517, col_offset=12), lineno=517, col_offset=12)], [Expr(Call(Attribute(Name('self', Load(), lineno=519, col_offset=12), 'log_debug', Load(), lineno=519, col_offset=12), [Str('Not writing changes to %s', lineno=519, col_offset=27), Name('filename', Load(), lineno=519, col_offset=56)], [], None, None, lineno=519, col_offset=12), lineno=519, col_offset=12)], lineno=516, col_offset=8)], [], lineno=501, col_offset=4), FunctionDef('write_file', arguments([Name('self', Param(), lineno=521, col_offset=19), Name('new_text', Param(), lineno=521, col_offset=25), Name('filename', Param(), lineno=521, col_offset=35), Name('old_text', Param(), lineno=521, col_offset=45), Name('encoding', Param(), lineno=521, col_offset=55)], None, None, [Name('None', Load(), lineno=521, col_offset=64)]), [Expr(Str('Writes a string to a file.\n\n        It first shows a unified diff between the old text and the new text, and\n        then rewrites the file; the latter is only done if the write option is\n        set.\n        ', lineno=527, col_offset=-1), lineno=527, col_offset=-1), TryExcept([Assign([Name('f', Store(), lineno=529, col_offset=12)], Call(Name('_open_with_encoding', Load(), lineno=529, col_offset=16), [Name('filename', Load(), lineno=529, col_offset=36), Str('w', lineno=529, col_offset=46)], [keyword('encoding', Name('encoding', Load(), lineno=529, col_offset=60))], None, None, lineno=529, col_offset=16), lineno=529, col_offset=12)], [ExceptHandler(Attribute(Name('os', Load(), lineno=530, col_offset=15), 'error', Load(), lineno=530, col_offset=15), Name('err', Store(), lineno=530, col_offset=27), [Expr(Call(Attribute(Name('self', Load(), lineno=531, col_offset=12), 'log_error', Load(), lineno=531, col_offset=12), [Str("Can't create %s: %s", lineno=531, col_offset=27), Name('filename', Load(), lineno=531, col_offset=50), Name('err', Load(), lineno=531, col_offset=60)], [], None, None, lineno=531, col_offset=12), lineno=531, col_offset=12), Return(None, lineno=532, col_offset=12)], lineno=530, col_offset=8)], [], lineno=528, col_offset=8), TryFinally([TryExcept([Expr(Call(Attribute(Name('f', Load(), lineno=534, col_offset=12), 'write', Load(), lineno=534, col_offset=12), [Call(Name('_to_system_newlines', Load(), lineno=534, col_offset=20), [Name('new_text', Load(), lineno=534, col_offset=40)], [], None, None, lineno=534, col_offset=20)], [], None, None, lineno=534, col_offset=12), lineno=534, col_offset=12)], [ExceptHandler(Attribute(Name('os', Load(), lineno=535, col_offset=15), 'error', Load(), lineno=535, col_offset=15), Name('err', Store(), lineno=535, col_offset=27), [Expr(Call(Attribute(Name('self', Load(), lineno=536, col_offset=12), 'log_error', Load(), lineno=536, col_offset=12), [Str("Can't write %s: %s", lineno=536, col_offset=27), Name('filename', Load(), lineno=536, col_offset=49), Name('err', Load(), lineno=536, col_offset=59)], [], None, None, lineno=536, col_offset=12), lineno=536, col_offset=12)], lineno=535, col_offset=8)], [], lineno=533, col_offset=8)], [Expr(Call(Attribute(Name('f', Load(), lineno=538, col_offset=12), 'close', Load(), lineno=538, col_offset=12), [], [], None, None, lineno=538, col_offset=12), lineno=538, col_offset=12)], lineno=533, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=539, col_offset=8), 'log_debug', Load(), lineno=539, col_offset=8), [Str('Wrote changes to %s', lineno=539, col_offset=23), Name('filename', Load(), lineno=539, col_offset=46)], [], None, None, lineno=539, col_offset=8), lineno=539, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=540, col_offset=8), 'wrote', Store(), lineno=540, col_offset=8)], Name('True', Load(), lineno=540, col_offset=21), lineno=540, col_offset=8)], [], lineno=521, col_offset=4), Assign([Name('PS1', Store(), lineno=542, col_offset=4)], Str('>>> ', lineno=542, col_offset=10), lineno=542, col_offset=4), Assign([Name('PS2', Store(), lineno=543, col_offset=4)], Str('... ', lineno=543, col_offset=10), lineno=543, col_offset=4), FunctionDef('refactor_docstring', arguments([Name('self', Param(), lineno=545, col_offset=27), Name('input', Param(), lineno=545, col_offset=33), Name('filename', Param(), lineno=545, col_offset=40)], None, None, []), [Expr(Str('Refactors a docstring, looking for doctests.\n\n        This returns a modified version of the input string.  It looks\n        for doctests, which start with a ">>>" prompt, and may be\n        continued with "..." prompts, as long as the "..." is indented\n        the same as the ">>>".\n\n        (Unfortunately we can\'t use the doctest module\'s parser,\n        since, like most parsers, it is not geared towards preserving\n        the original source.)\n        ', lineno=556, col_offset=-1), lineno=556, col_offset=-1), Assign([Name('result', Store(), lineno=557, col_offset=8)], List([], Load(), lineno=557, col_offset=17), lineno=557, col_offset=8), Assign([Name('block', Store(), lineno=558, col_offset=8)], Name('None', Load(), lineno=558, col_offset=16), lineno=558, col_offset=8), Assign([Name('block_lineno', Store(), lineno=559, col_offset=8)], Name('None', Load(), lineno=559, col_offset=23), lineno=559, col_offset=8), Assign([Name('indent', Store(), lineno=560, col_offset=8)], Name('None', Load(), lineno=560, col_offset=17), lineno=560, col_offset=8), Assign([Name('lineno', Store(), lineno=561, col_offset=8)], Num(0, lineno=561, col_offset=17), lineno=561, col_offset=8), For(Name('line', Store(), lineno=562, col_offset=12), Call(Attribute(Name('input', Load(), lineno=562, col_offset=20), 'splitlines', Load(), lineno=562, col_offset=20), [Name('True', Load(), lineno=562, col_offset=37)], [], None, None, lineno=562, col_offset=20), [AugAssign(Name('lineno', Store(), lineno=563, col_offset=12), Add(), Num(1, lineno=563, col_offset=22), lineno=563, col_offset=12), If(Call(Attribute(Call(Attribute(Name('line', Load(), lineno=564, col_offset=15), 'lstrip', Load(), lineno=564, col_offset=15), [], [], None, None, lineno=564, col_offset=15), 'startswith', Load(), lineno=564, col_offset=15), [Attribute(Name('self', Load(), lineno=564, col_offset=40), 'PS1', Load(), lineno=564, col_offset=40)], [], None, None, lineno=564, col_offset=15), [If(Compare(Name('block', Load(), lineno=565, col_offset=19), [IsNot()], [Name('None', Load(), lineno=565, col_offset=32)], lineno=565, col_offset=19), [Expr(Call(Attribute(Name('result', Load(), lineno=566, col_offset=20), 'extend', Load(), lineno=566, col_offset=20), [Call(Attribute(Name('self', Load(), lineno=566, col_offset=34), 'refactor_doctest', Load(), lineno=566, col_offset=34), [Name('block', Load(), lineno=566, col_offset=56), Name('block_lineno', Load(), lineno=566, col_offset=63), Name('indent', Load(), lineno=567, col_offset=56), Name('filename', Load(), lineno=567, col_offset=64)], [], None, None, lineno=566, col_offset=34)], [], None, None, lineno=566, col_offset=20), lineno=566, col_offset=20)], [], lineno=565, col_offset=16), Assign([Name('block_lineno', Store(), lineno=568, col_offset=16)], Name('lineno', Load(), lineno=568, col_offset=31), lineno=568, col_offset=16), Assign([Name('block', Store(), lineno=569, col_offset=16)], List([Name('line', Load(), lineno=569, col_offset=25)], Load(), lineno=569, col_offset=24), lineno=569, col_offset=16), Assign([Name('i', Store(), lineno=570, col_offset=16)], Call(Attribute(Name('line', Load(), lineno=570, col_offset=20), 'find', Load(), lineno=570, col_offset=20), [Attribute(Name('self', Load(), lineno=570, col_offset=30), 'PS1', Load(), lineno=570, col_offset=30)], [], None, None, lineno=570, col_offset=20), lineno=570, col_offset=16), Assign([Name('indent', Store(), lineno=571, col_offset=16)], Subscript(Name('line', Load(), lineno=571, col_offset=25), Slice(None, Name('i', Load(), lineno=571, col_offset=31), None), Load(), lineno=571, col_offset=25), lineno=571, col_offset=16)], [If(BoolOp(And(), [Compare(Name('indent', Load(), lineno=572, col_offset=18), [IsNot()], [Name('None', Load(), lineno=572, col_offset=32)], lineno=572, col_offset=18), BoolOp(Or(), [Call(Attribute(Name('line', Load(), lineno=573, col_offset=19), 'startswith', Load(), lineno=573, col_offset=19), [BinOp(Name('indent', Load(), lineno=573, col_offset=35), Add(), Attribute(Name('self', Load(), lineno=573, col_offset=44), 'PS2', Load(), lineno=573, col_offset=44), lineno=573, col_offset=35)], [], None, None, lineno=573, col_offset=19), Compare(Name('line', Load(), lineno=574, col_offset=19), [Eq()], [BinOp(BinOp(Name('indent', Load(), lineno=574, col_offset=27), Add(), Call(Attribute(Attribute(Name('self', Load(), lineno=574, col_offset=36), 'PS2', Load(), lineno=574, col_offset=36), 'rstrip', Load(), lineno=574, col_offset=36), [], [], None, None, lineno=574, col_offset=36), lineno=574, col_offset=27), Add(), Str(u'\n', lineno=574, col_offset=56), lineno=574, col_offset=54)], lineno=574, col_offset=19)], lineno=573, col_offset=19)], lineno=572, col_offset=18), [Expr(Call(Attribute(Name('block', Load(), lineno=575, col_offset=16), 'append', Load(), lineno=575, col_offset=16), [Name('line', Load(), lineno=575, col_offset=29)], [], None, None, lineno=575, col_offset=16), lineno=575, col_offset=16)], [If(Compare(Name('block', Load(), lineno=577, col_offset=19), [IsNot()], [Name('None', Load(), lineno=577, col_offset=32)], lineno=577, col_offset=19), [Expr(Call(Attribute(Name('result', Load(), lineno=578, col_offset=20), 'extend', Load(), lineno=578, col_offset=20), [Call(Attribute(Name('self', Load(), lineno=578, col_offset=34), 'refactor_doctest', Load(), lineno=578, col_offset=34), [Name('block', Load(), lineno=578, col_offset=56), Name('block_lineno', Load(), lineno=578, col_offset=63), Name('indent', Load(), lineno=579, col_offset=56), Name('filename', Load(), lineno=579, col_offset=64)], [], None, None, lineno=578, col_offset=34)], [], None, None, lineno=578, col_offset=20), lineno=578, col_offset=20)], [], lineno=577, col_offset=16), Assign([Name('block', Store(), lineno=580, col_offset=16)], Name('None', Load(), lineno=580, col_offset=24), lineno=580, col_offset=16), Assign([Name('indent', Store(), lineno=581, col_offset=16)], Name('None', Load(), lineno=581, col_offset=25), lineno=581, col_offset=16), Expr(Call(Attribute(Name('result', Load(), lineno=582, col_offset=16), 'append', Load(), lineno=582, col_offset=16), [Name('line', Load(), lineno=582, col_offset=30)], [], None, None, lineno=582, col_offset=16), lineno=582, col_offset=16)], lineno=572, col_offset=17)], lineno=564, col_offset=12)], [], lineno=562, col_offset=8), If(Compare(Name('block', Load(), lineno=583, col_offset=11), [IsNot()], [Name('None', Load(), lineno=583, col_offset=24)], lineno=583, col_offset=11), [Expr(Call(Attribute(Name('result', Load(), lineno=584, col_offset=12), 'extend', Load(), lineno=584, col_offset=12), [Call(Attribute(Name('self', Load(), lineno=584, col_offset=26), 'refactor_doctest', Load(), lineno=584, col_offset=26), [Name('block', Load(), lineno=584, col_offset=48), Name('block_lineno', Load(), lineno=584, col_offset=55), Name('indent', Load(), lineno=585, col_offset=48), Name('filename', Load(), lineno=585, col_offset=56)], [], None, None, lineno=584, col_offset=26)], [], None, None, lineno=584, col_offset=12), lineno=584, col_offset=12)], [], lineno=583, col_offset=8), Return(Call(Attribute(Str(u'', lineno=586, col_offset=15), 'join', Load(), lineno=586, col_offset=15), [Name('result', Load(), lineno=586, col_offset=24)], [], None, None, lineno=586, col_offset=15), lineno=586, col_offset=8)], [], lineno=545, col_offset=4), FunctionDef('refactor_doctest', arguments([Name('self', Param(), lineno=588, col_offset=25), Name('block', Param(), lineno=588, col_offset=31), Name('lineno', Param(), lineno=588, col_offset=38), Name('indent', Param(), lineno=588, col_offset=46), Name('filename', Param(), lineno=588, col_offset=54)], None, None, []), [Expr(Str('Refactors one doctest.\n\n        A doctest is given as a block of lines, the first of which starts\n        with ">>>" (possibly indented), while the remaining lines start\n        with "..." (identically indented).\n\n        ', lineno=595, col_offset=-1), lineno=595, col_offset=-1), TryExcept([Assign([Name('tree', Store(), lineno=597, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=597, col_offset=19), 'parse_block', Load(), lineno=597, col_offset=19), [Name('block', Load(), lineno=597, col_offset=36), Name('lineno', Load(), lineno=597, col_offset=43), Name('indent', Load(), lineno=597, col_offset=51)], [], None, None, lineno=597, col_offset=19), lineno=597, col_offset=12)], [ExceptHandler(Name('Exception', Load(), lineno=598, col_offset=15), Name('err', Store(), lineno=598, col_offset=28), [If(Call(Attribute(Attribute(Name('self', Load(), lineno=599, col_offset=15), 'logger', Load(), lineno=599, col_offset=15), 'isEnabledFor', Load(), lineno=599, col_offset=15), [Attribute(Name('logging', Load(), lineno=599, col_offset=40), 'DEBUG', Load(), lineno=599, col_offset=40)], [], None, None, lineno=599, col_offset=15), [For(Name('line', Store(), lineno=600, col_offset=20), Name('block', Load(), lineno=600, col_offset=28), [Expr(Call(Attribute(Name('self', Load(), lineno=601, col_offset=20), 'log_debug', Load(), lineno=601, col_offset=20), [Str('Source: %s', lineno=601, col_offset=35), Call(Attribute(Name('line', Load(), lineno=601, col_offset=49), 'rstrip', Load(), lineno=601, col_offset=49), [Str(u'\n', lineno=601, col_offset=61)], [], None, None, lineno=601, col_offset=49)], [], None, None, lineno=601, col_offset=20), lineno=601, col_offset=20)], [], lineno=600, col_offset=16)], [], lineno=599, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=602, col_offset=12), 'log_error', Load(), lineno=602, col_offset=12), [Str("Can't parse docstring in %s line %s: %s: %s", lineno=602, col_offset=27), Name('filename', Load(), lineno=603, col_offset=27), Name('lineno', Load(), lineno=603, col_offset=37), Attribute(Attribute(Name('err', Load(), lineno=603, col_offset=45), '__class__', Load(), lineno=603, col_offset=45), '__name__', Load(), lineno=603, col_offset=45), Name('err', Load(), lineno=603, col_offset=69)], [], None, None, lineno=602, col_offset=12), lineno=602, col_offset=12), Return(Name('block', Load(), lineno=604, col_offset=19), lineno=604, col_offset=12)], lineno=598, col_offset=8)], [], lineno=596, col_offset=8), If(Call(Attribute(Name('self', Load(), lineno=605, col_offset=11), 'refactor_tree', Load(), lineno=605, col_offset=11), [Name('tree', Load(), lineno=605, col_offset=30), Name('filename', Load(), lineno=605, col_offset=36)], [], None, None, lineno=605, col_offset=11), [Assign([Name('new', Store(), lineno=606, col_offset=12)], Call(Attribute(Call(Name('unicode', Load(), lineno=606, col_offset=18), [Name('tree', Load(), lineno=606, col_offset=26)], [], None, None, lineno=606, col_offset=18), 'splitlines', Load(), lineno=606, col_offset=18), [Name('True', Load(), lineno=606, col_offset=43)], [], None, None, lineno=606, col_offset=18), lineno=606, col_offset=12), Assign([Tuple([Name('clipped', Store(), lineno=608, col_offset=12), Name('new', Store(), lineno=608, col_offset=21)], Store(), lineno=608, col_offset=12)], Tuple([Subscript(Name('new', Load(), lineno=608, col_offset=27), Slice(None, BinOp(Name('lineno', Load(), lineno=608, col_offset=32), Sub(), Num(1, lineno=608, col_offset=39), lineno=608, col_offset=32), None), Load(), lineno=608, col_offset=27), Subscript(Name('new', Load(), lineno=608, col_offset=43), Slice(BinOp(Name('lineno', Load(), lineno=608, col_offset=47), Sub(), Num(1, lineno=608, col_offset=54), lineno=608, col_offset=47), None, None), Load(), lineno=608, col_offset=43)], Load(), lineno=608, col_offset=27), lineno=608, col_offset=12), Assert(Compare(Name('clipped', Load(), lineno=609, col_offset=19), [Eq()], [BinOp(List([Str(u'\n', lineno=609, col_offset=31)], Load(), lineno=609, col_offset=30), Mult(), BinOp(Name('lineno', Load(), lineno=609, col_offset=41), Sub(), Num(1, lineno=609, col_offset=48), lineno=609, col_offset=41), lineno=609, col_offset=30)], lineno=609, col_offset=19), Name('clipped', Load(), lineno=609, col_offset=52), lineno=609, col_offset=12), If(UnaryOp(Not(), Call(Attribute(Subscript(Name('new', Load(), lineno=610, col_offset=19), Index(Num(-1, lineno=610, col_offset=24)), Load(), lineno=610, col_offset=19), 'endswith', Load(), lineno=610, col_offset=19), [Str(u'\n', lineno=610, col_offset=36)], [], None, None, lineno=610, col_offset=19), lineno=610, col_offset=15), [AugAssign(Subscript(Name('new', Load(), lineno=611, col_offset=16), Index(Num(-1, lineno=611, col_offset=21)), Store(), lineno=611, col_offset=16), Add(), Str(u'\n', lineno=611, col_offset=27), lineno=611, col_offset=16)], [], lineno=610, col_offset=12), Assign([Name('block', Store(), lineno=612, col_offset=12)], List([BinOp(BinOp(Name('indent', Load(), lineno=612, col_offset=21), Add(), Attribute(Name('self', Load(), lineno=612, col_offset=30), 'PS1', Load(), lineno=612, col_offset=30), lineno=612, col_offset=21), Add(), Call(Attribute(Name('new', Load(), lineno=612, col_offset=41), 'pop', Load(), lineno=612, col_offset=41), [Num(0, lineno=612, col_offset=49)], [], None, None, lineno=612, col_offset=41), lineno=612, col_offset=39)], Load(), lineno=612, col_offset=20), lineno=612, col_offset=12), If(Name('new', Load(), lineno=613, col_offset=15), [AugAssign(Name('block', Store(), lineno=614, col_offset=16), Add(), ListComp(BinOp(BinOp(Name('indent', Load(), lineno=614, col_offset=26), Add(), Attribute(Name('self', Load(), lineno=614, col_offset=35), 'PS2', Load(), lineno=614, col_offset=35), lineno=614, col_offset=26), Add(), Name('line', Load(), lineno=614, col_offset=46), lineno=614, col_offset=44), [comprehension(Name('line', Store(), lineno=614, col_offset=55), Name('new', Load(), lineno=614, col_offset=63), [])], lineno=614, col_offset=26), lineno=614, col_offset=16)], [], lineno=613, col_offset=12)], [], lineno=605, col_offset=8), Return(Name('block', Load(), lineno=615, col_offset=15), lineno=615, col_offset=8)], [], lineno=588, col_offset=4), FunctionDef('summarize', arguments([Name('self', Param(), lineno=617, col_offset=18)], None, None, []), [If(Attribute(Name('self', Load(), lineno=618, col_offset=11), 'wrote', Load(), lineno=618, col_offset=11), [Assign([Name('were', Store(), lineno=619, col_offset=12)], Str('were', lineno=619, col_offset=19), lineno=619, col_offset=12)], [Assign([Name('were', Store(), lineno=621, col_offset=12)], Str('need to be', lineno=621, col_offset=19), lineno=621, col_offset=12)], lineno=618, col_offset=8), If(UnaryOp(Not(), Attribute(Name('self', Load(), lineno=622, col_offset=15), 'files', Load(), lineno=622, col_offset=15), lineno=622, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=623, col_offset=12), 'log_message', Load(), lineno=623, col_offset=12), [Str('No files %s modified.', lineno=623, col_offset=29), Name('were', Load(), lineno=623, col_offset=54)], [], None, None, lineno=623, col_offset=12), lineno=623, col_offset=12)], [Expr(Call(Attribute(Name('self', Load(), lineno=625, col_offset=12), 'log_message', Load(), lineno=625, col_offset=12), [Str('Files that %s modified:', lineno=625, col_offset=29), Name('were', Load(), lineno=625, col_offset=56)], [], None, None, lineno=625, col_offset=12), lineno=625, col_offset=12), For(Name('file', Store(), lineno=626, col_offset=16), Attribute(Name('self', Load(), lineno=626, col_offset=24), 'files', Load(), lineno=626, col_offset=24), [Expr(Call(Attribute(Name('self', Load(), lineno=627, col_offset=16), 'log_message', Load(), lineno=627, col_offset=16), [Name('file', Load(), lineno=627, col_offset=33)], [], None, None, lineno=627, col_offset=16), lineno=627, col_offset=16)], [], lineno=626, col_offset=12)], lineno=622, col_offset=8), If(Attribute(Name('self', Load(), lineno=628, col_offset=11), 'fixer_log', Load(), lineno=628, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=629, col_offset=12), 'log_message', Load(), lineno=629, col_offset=12), [Str('Warnings/messages while refactoring:', lineno=629, col_offset=29)], [], None, None, lineno=629, col_offset=12), lineno=629, col_offset=12), For(Name('message', Store(), lineno=630, col_offset=16), Attribute(Name('self', Load(), lineno=630, col_offset=27), 'fixer_log', Load(), lineno=630, col_offset=27), [Expr(Call(Attribute(Name('self', Load(), lineno=631, col_offset=16), 'log_message', Load(), lineno=631, col_offset=16), [Name('message', Load(), lineno=631, col_offset=33)], [], None, None, lineno=631, col_offset=16), lineno=631, col_offset=16)], [], lineno=630, col_offset=12)], [], lineno=628, col_offset=8), If(Attribute(Name('self', Load(), lineno=632, col_offset=11), 'errors', Load(), lineno=632, col_offset=11), [If(Compare(Call(Name('len', Load(), lineno=633, col_offset=15), [Attribute(Name('self', Load(), lineno=633, col_offset=19), 'errors', Load(), lineno=633, col_offset=19)], [], None, None, lineno=633, col_offset=15), [Eq()], [Num(1, lineno=633, col_offset=35)], lineno=633, col_offset=15), [Expr(Call(Attribute(Name('self', Load(), lineno=634, col_offset=16), 'log_message', Load(), lineno=634, col_offset=16), [Str('There was 1 error:', lineno=634, col_offset=33)], [], None, None, lineno=634, col_offset=16), lineno=634, col_offset=16)], [Expr(Call(Attribute(Name('self', Load(), lineno=636, col_offset=16), 'log_message', Load(), lineno=636, col_offset=16), [Str('There were %d errors:', lineno=636, col_offset=33), Call(Name('len', Load(), lineno=636, col_offset=58), [Attribute(Name('self', Load(), lineno=636, col_offset=62), 'errors', Load(), lineno=636, col_offset=62)], [], None, None, lineno=636, col_offset=58)], [], None, None, lineno=636, col_offset=16), lineno=636, col_offset=16)], lineno=633, col_offset=12), For(Tuple([Name('msg', Store(), lineno=637, col_offset=16), Name('args', Store(), lineno=637, col_offset=21), Name('kwds', Store(), lineno=637, col_offset=27)], Store(), lineno=637, col_offset=16), Attribute(Name('self', Load(), lineno=637, col_offset=35), 'errors', Load(), lineno=637, col_offset=35), [Expr(Call(Attribute(Name('self', Load(), lineno=638, col_offset=16), 'log_message', Load(), lineno=638, col_offset=16), [Name('msg', Load(), lineno=638, col_offset=33)], [], Name('args', Load(), lineno=638, col_offset=39), Name('kwds', Load(), lineno=638, col_offset=47), lineno=638, col_offset=16), lineno=638, col_offset=16)], [], lineno=637, col_offset=12)], [], lineno=632, col_offset=8)], [], lineno=617, col_offset=4), FunctionDef('parse_block', arguments([Name('self', Param(), lineno=640, col_offset=20), Name('block', Param(), lineno=640, col_offset=26), Name('lineno', Param(), lineno=640, col_offset=33), Name('indent', Param(), lineno=640, col_offset=41)], None, None, []), [Expr(Str('Parses a block into a tree.\n\n        This is necessary to get correct line number / offset information\n        in the parser diagnostics and embedded into the parse tree.\n        ', lineno=645, col_offset=-1), lineno=645, col_offset=-1), Assign([Name('tree', Store(), lineno=646, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=646, col_offset=15), 'driver', Load(), lineno=646, col_offset=15), 'parse_tokens', Load(), lineno=646, col_offset=15), [Call(Attribute(Name('self', Load(), lineno=646, col_offset=40), 'wrap_toks', Load(), lineno=646, col_offset=40), [Name('block', Load(), lineno=646, col_offset=55), Name('lineno', Load(), lineno=646, col_offset=62), Name('indent', Load(), lineno=646, col_offset=70)], [], None, None, lineno=646, col_offset=40)], [], None, None, lineno=646, col_offset=15), lineno=646, col_offset=8), Assign([Attribute(Name('tree', Load(), lineno=647, col_offset=8), 'future_features', Store(), lineno=647, col_offset=8)], Call(Name('frozenset', Load(), lineno=647, col_offset=31), [], [], None, None, lineno=647, col_offset=31), lineno=647, col_offset=8), Return(Name('tree', Load(), lineno=648, col_offset=15), lineno=648, col_offset=8)], [], lineno=640, col_offset=4), FunctionDef('wrap_toks', arguments([Name('self', Param(), lineno=650, col_offset=18), Name('block', Param(), lineno=650, col_offset=24), Name('lineno', Param(), lineno=650, col_offset=31), Name('indent', Param(), lineno=650, col_offset=39)], None, None, []), [Expr(Str('Wraps a tokenize stream to systematically modify start/end.', lineno=651, col_offset=8), lineno=651, col_offset=8), Assign([Name('tokens', Store(), lineno=652, col_offset=8)], Call(Attribute(Name('tokenize', Load(), lineno=652, col_offset=17), 'generate_tokens', Load(), lineno=652, col_offset=17), [Attribute(Call(Attribute(Name('self', Load(), lineno=652, col_offset=42), 'gen_lines', Load(), lineno=652, col_offset=42), [Name('block', Load(), lineno=652, col_offset=57), Name('indent', Load(), lineno=652, col_offset=64)], [], None, None, lineno=652, col_offset=42), 'next', Load(), lineno=652, col_offset=42)], [], None, None, lineno=652, col_offset=17), lineno=652, col_offset=8), For(Tuple([Name('type', Store(), lineno=653, col_offset=12), Name('value', Store(), lineno=653, col_offset=18), Tuple([Name('line0', Store(), lineno=653, col_offset=26), Name('col0', Store(), lineno=653, col_offset=33)], Store(), lineno=653, col_offset=26), Tuple([Name('line1', Store(), lineno=653, col_offset=41), Name('col1', Store(), lineno=653, col_offset=48)], Store(), lineno=653, col_offset=41), Name('line_text', Store(), lineno=653, col_offset=55)], Store(), lineno=653, col_offset=12), Name('tokens', Load(), lineno=653, col_offset=68), [AugAssign(Name('line0', Store(), lineno=654, col_offset=12), Add(), BinOp(Name('lineno', Load(), lineno=654, col_offset=21), Sub(), Num(1, lineno=654, col_offset=30), lineno=654, col_offset=21), lineno=654, col_offset=12), AugAssign(Name('line1', Store(), lineno=655, col_offset=12), Add(), BinOp(Name('lineno', Load(), lineno=655, col_offset=21), Sub(), Num(1, lineno=655, col_offset=30), lineno=655, col_offset=21), lineno=655, col_offset=12), Expr(Yield(Tuple([Name('type', Load(), lineno=661, col_offset=18), Name('value', Load(), lineno=661, col_offset=24), Tuple([Name('line0', Load(), lineno=661, col_offset=32), Name('col0', Load(), lineno=661, col_offset=39)], Load(), lineno=661, col_offset=32), Tuple([Name('line1', Load(), lineno=661, col_offset=47), Name('col1', Load(), lineno=661, col_offset=54)], Load(), lineno=661, col_offset=47), Name('line_text', Load(), lineno=661, col_offset=61)], Load(), lineno=661, col_offset=18), lineno=661, col_offset=12), lineno=661, col_offset=12)], [], lineno=653, col_offset=8)], [], lineno=650, col_offset=4), FunctionDef('gen_lines', arguments([Name('self', Param(), lineno=664, col_offset=18), Name('block', Param(), lineno=664, col_offset=24), Name('indent', Param(), lineno=664, col_offset=31)], None, None, []), [Expr(Str('Generates lines as expected by tokenize from a list of lines.\n\n        This strips the first len(indent + self.PS1) characters off each line.\n        ', lineno=668, col_offset=-1), lineno=668, col_offset=-1), Assign([Name('prefix1', Store(), lineno=669, col_offset=8)], BinOp(Name('indent', Load(), lineno=669, col_offset=18), Add(), Attribute(Name('self', Load(), lineno=669, col_offset=27), 'PS1', Load(), lineno=669, col_offset=27), lineno=669, col_offset=18), lineno=669, col_offset=8), Assign([Name('prefix2', Store(), lineno=670, col_offset=8)], BinOp(Name('indent', Load(), lineno=670, col_offset=18), Add(), Attribute(Name('self', Load(), lineno=670, col_offset=27), 'PS2', Load(), lineno=670, col_offset=27), lineno=670, col_offset=18), lineno=670, col_offset=8), Assign([Name('prefix', Store(), lineno=671, col_offset=8)], Name('prefix1', Load(), lineno=671, col_offset=17), lineno=671, col_offset=8), For(Name('line', Store(), lineno=672, col_offset=12), Name('block', Load(), lineno=672, col_offset=20), [If(Call(Attribute(Name('line', Load(), lineno=673, col_offset=15), 'startswith', Load(), lineno=673, col_offset=15), [Name('prefix', Load(), lineno=673, col_offset=31)], [], None, None, lineno=673, col_offset=15), [Expr(Yield(Subscript(Name('line', Load(), lineno=674, col_offset=22), Slice(Call(Name('len', Load(), lineno=674, col_offset=27), [Name('prefix', Load(), lineno=674, col_offset=31)], [], None, None, lineno=674, col_offset=27), None, None), Load(), lineno=674, col_offset=22), lineno=674, col_offset=16), lineno=674, col_offset=16)], [If(Compare(Name('line', Load(), lineno=675, col_offset=17), [Eq()], [BinOp(Call(Attribute(Name('prefix', Load(), lineno=675, col_offset=25), 'rstrip', Load(), lineno=675, col_offset=25), [], [], None, None, lineno=675, col_offset=25), Add(), Str(u'\n', lineno=675, col_offset=43), lineno=675, col_offset=25)], lineno=675, col_offset=17), [Expr(Yield(Str(u'\n', lineno=676, col_offset=22), lineno=676, col_offset=16), lineno=676, col_offset=16)], [Raise(Call(Name('AssertionError', Load(), lineno=678, col_offset=22), [BinOp(Str('line=%r, prefix=%r', lineno=678, col_offset=37), Mod(), Tuple([Name('line', Load(), lineno=678, col_offset=61), Name('prefix', Load(), lineno=678, col_offset=67)], Load(), lineno=678, col_offset=61), lineno=678, col_offset=37)], [], None, None, lineno=678, col_offset=22), None, None, lineno=678, col_offset=16)], lineno=675, col_offset=17)], lineno=673, col_offset=12), Assign([Name('prefix', Store(), lineno=679, col_offset=12)], Name('prefix2', Load(), lineno=679, col_offset=21), lineno=679, col_offset=12)], [], lineno=672, col_offset=8), While(Name('True', Load(), lineno=680, col_offset=14), [Expr(Yield(Str('', lineno=681, col_offset=18), lineno=681, col_offset=12), lineno=681, col_offset=12)], [], lineno=680, col_offset=8)], [], lineno=664, col_offset=4)], [], lineno=174, col_offset=0), ClassDef('MultiprocessingUnsupported', [Name('Exception', Load(), lineno=684, col_offset=33)], [Pass( lineno=685, col_offset=4)], [], lineno=684, col_offset=0), ClassDef('MultiprocessRefactoringTool', [Name('RefactoringTool', Load(), lineno=688, col_offset=34)], [FunctionDef('__init__', arguments([Name('self', Param(), lineno=690, col_offset=17)], 'args', 'kwargs', []), [Expr(Call(Attribute(Call(Name('super', Load(), lineno=691, col_offset=8), [Name('MultiprocessRefactoringTool', Load(), lineno=691, col_offset=14), Name('self', Load(), lineno=691, col_offset=43)], [], None, None, lineno=691, col_offset=8), '__init__', Load(), lineno=691, col_offset=8), [], [], Name('args', Load(), lineno=691, col_offset=59), Name('kwargs', Load(), lineno=691, col_offset=67), lineno=691, col_offset=8), lineno=691, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=692, col_offset=8), 'queue', Store(), lineno=692, col_offset=8)], Name('None', Load(), lineno=692, col_offset=21), lineno=692, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=693, col_offset=8), 'output_lock', Store(), lineno=693, col_offset=8)], Name('None', Load(), lineno=693, col_offset=27), lineno=693, col_offset=8)], [], lineno=690, col_offset=4), FunctionDef('refactor', arguments([Name('self', Param(), lineno=695, col_offset=17), Name('items', Param(), lineno=695, col_offset=23), Name('write', Param(), lineno=695, col_offset=30), Name('doctests_only', Param(), lineno=695, col_offset=43), Name('num_processes', Param(), lineno=696, col_offset=17)], None, None, [Name('False', Load(), lineno=695, col_offset=36), Name('False', Load(), lineno=695, col_offset=57), Num(1, lineno=696, col_offset=31)]), [If(Compare(Name('num_processes', Load(), lineno=697, col_offset=11), [Eq()], [Num(1, lineno=697, col_offset=28)], lineno=697, col_offset=11), [Return(Call(Attribute(Call(Name('super', Load(), lineno=698, col_offset=19), [Name('MultiprocessRefactoringTool', Load(), lineno=698, col_offset=25), Name('self', Load(), lineno=698, col_offset=54)], [], None, None, lineno=698, col_offset=19), 'refactor', Load(), lineno=698, col_offset=19), [Name('items', Load(), lineno=699, col_offset=16), Name('write', Load(), lineno=699, col_offset=23), Name('doctests_only', Load(), lineno=699, col_offset=30)], [], None, None, lineno=698, col_offset=19), lineno=698, col_offset=12)], [], lineno=697, col_offset=8), TryExcept([Import([alias('multiprocessing', None)], lineno=701, col_offset=12)], [ExceptHandler(Name('ImportError', Load(), lineno=702, col_offset=15), None, [Raise(Name('MultiprocessingUnsupported', Load(), lineno=703, col_offset=18), None, None, lineno=703, col_offset=12)], lineno=702, col_offset=8)], [], lineno=700, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=704, col_offset=11), 'queue', Load(), lineno=704, col_offset=11), [IsNot()], [Name('None', Load(), lineno=704, col_offset=29)], lineno=704, col_offset=11), [Raise(Call(Name('RuntimeError', Load(), lineno=705, col_offset=18), [Str('already doing multiple processes', lineno=705, col_offset=31)], [], None, None, lineno=705, col_offset=18), None, None, lineno=705, col_offset=12)], [], lineno=704, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=706, col_offset=8), 'queue', Store(), lineno=706, col_offset=8)], Call(Attribute(Name('multiprocessing', Load(), lineno=706, col_offset=21), 'JoinableQueue', Load(), lineno=706, col_offset=21), [], [], None, None, lineno=706, col_offset=21), lineno=706, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=707, col_offset=8), 'output_lock', Store(), lineno=707, col_offset=8)], Call(Attribute(Name('multiprocessing', Load(), lineno=707, col_offset=27), 'Lock', Load(), lineno=707, col_offset=27), [], [], None, None, lineno=707, col_offset=27), lineno=707, col_offset=8), Assign([Name('processes', Store(), lineno=708, col_offset=8)], ListComp(Call(Attribute(Name('multiprocessing', Load(), lineno=708, col_offset=21), 'Process', Load(), lineno=708, col_offset=21), [], [keyword('target', Attribute(Name('self', Load(), lineno=708, col_offset=52), '_child', Load(), lineno=708, col_offset=52))], None, None, lineno=708, col_offset=21), [comprehension(Name('i', Store(), lineno=709, col_offset=25), Call(Name('xrange', Load(), lineno=709, col_offset=30), [Name('num_processes', Load(), lineno=709, col_offset=37)], [], None, None, lineno=709, col_offset=30), [])], lineno=708, col_offset=21), lineno=708, col_offset=8), TryFinally([For(Name('p', Store(), lineno=711, col_offset=16), Name('processes', Load(), lineno=711, col_offset=21), [Expr(Call(Attribute(Name('p', Load(), lineno=712, col_offset=16), 'start', Load(), lineno=712, col_offset=16), [], [], None, None, lineno=712, col_offset=16), lineno=712, col_offset=16)], [], lineno=711, col_offset=12), Expr(Call(Attribute(Call(Name('super', Load(), lineno=713, col_offset=12), [Name('MultiprocessRefactoringTool', Load(), lineno=713, col_offset=18), Name('self', Load(), lineno=713, col_offset=47)], [], None, None, lineno=713, col_offset=12), 'refactor', Load(), lineno=713, col_offset=12), [Name('items', Load(), lineno=713, col_offset=62), Name('write', Load(), lineno=713, col_offset=69), Name('doctests_only', Load(), lineno=714, col_offset=62)], [], None, None, lineno=713, col_offset=12), lineno=713, col_offset=12)], [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=716, col_offset=12), 'queue', Load(), lineno=716, col_offset=12), 'join', Load(), lineno=716, col_offset=12), [], [], None, None, lineno=716, col_offset=12), lineno=716, col_offset=12), For(Name('i', Store(), lineno=717, col_offset=16), Call(Name('xrange', Load(), lineno=717, col_offset=21), [Name('num_processes', Load(), lineno=717, col_offset=28)], [], None, None, lineno=717, col_offset=21), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=718, col_offset=16), 'queue', Load(), lineno=718, col_offset=16), 'put', Load(), lineno=718, col_offset=16), [Name('None', Load(), lineno=718, col_offset=31)], [], None, None, lineno=718, col_offset=16), lineno=718, col_offset=16)], [], lineno=717, col_offset=12), For(Name('p', Store(), lineno=719, col_offset=16), Name('processes', Load(), lineno=719, col_offset=21), [If(Call(Attribute(Name('p', Load(), lineno=720, col_offset=19), 'is_alive', Load(), lineno=720, col_offset=19), [], [], None, None, lineno=720, col_offset=19), [Expr(Call(Attribute(Name('p', Load(), lineno=721, col_offset=20), 'join', Load(), lineno=721, col_offset=20), [], [], None, None, lineno=721, col_offset=20), lineno=721, col_offset=20)], [], lineno=720, col_offset=16)], [], lineno=719, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=722, col_offset=12), 'queue', Store(), lineno=722, col_offset=12)], Name('None', Load(), lineno=722, col_offset=25), lineno=722, col_offset=12)], lineno=710, col_offset=8)], [], lineno=695, col_offset=4), FunctionDef('_child', arguments([Name('self', Param(), lineno=724, col_offset=15)], None, None, []), [Assign([Name('task', Store(), lineno=725, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=725, col_offset=15), 'queue', Load(), lineno=725, col_offset=15), 'get', Load(), lineno=725, col_offset=15), [], [], None, None, lineno=725, col_offset=15), lineno=725, col_offset=8), While(Compare(Name('task', Load(), lineno=726, col_offset=14), [IsNot()], [Name('None', Load(), lineno=726, col_offset=26)], lineno=726, col_offset=14), [Assign([Tuple([Name('args', Store(), lineno=727, col_offset=12), Name('kwargs', Store(), lineno=727, col_offset=18)], Store(), lineno=727, col_offset=12)], Name('task', Load(), lineno=727, col_offset=27), lineno=727, col_offset=12), TryFinally([Expr(Call(Attribute(Call(Name('super', Load(), lineno=729, col_offset=16), [Name('MultiprocessRefactoringTool', Load(), lineno=729, col_offset=22), Name('self', Load(), lineno=729, col_offset=51)], [], None, None, lineno=729, col_offset=16), 'refactor_file', Load(), lineno=729, col_offset=16), [], [], Name('args', Load(), lineno=730, col_offset=21), Name('kwargs', Load(), lineno=730, col_offset=29), lineno=729, col_offset=16), lineno=729, col_offset=16)], [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=732, col_offset=16), 'queue', Load(), lineno=732, col_offset=16), 'task_done', Load(), lineno=732, col_offset=16), [], [], None, None, lineno=732, col_offset=16), lineno=732, col_offset=16)], lineno=728, col_offset=12), Assign([Name('task', Store(), lineno=733, col_offset=12)], Call(Attribute(Attribute(Name('self', Load(), lineno=733, col_offset=19), 'queue', Load(), lineno=733, col_offset=19), 'get', Load(), lineno=733, col_offset=19), [], [], None, None, lineno=733, col_offset=19), lineno=733, col_offset=12)], [], lineno=726, col_offset=8)], [], lineno=724, col_offset=4), FunctionDef('refactor_file', arguments([Name('self', Param(), lineno=735, col_offset=22)], 'args', 'kwargs', []), [If(Compare(Attribute(Name('self', Load(), lineno=736, col_offset=11), 'queue', Load(), lineno=736, col_offset=11), [IsNot()], [Name('None', Load(), lineno=736, col_offset=29)], lineno=736, col_offset=11), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=737, col_offset=12), 'queue', Load(), lineno=737, col_offset=12), 'put', Load(), lineno=737, col_offset=12), [Tuple([Name('args', Load(), lineno=737, col_offset=28), Name('kwargs', Load(), lineno=737, col_offset=34)], Load(), lineno=737, col_offset=28)], [], None, None, lineno=737, col_offset=12), lineno=737, col_offset=12)], [Return(Call(Attribute(Call(Name('super', Load(), lineno=739, col_offset=19), [Name('MultiprocessRefactoringTool', Load(), lineno=739, col_offset=25), Name('self', Load(), lineno=739, col_offset=54)], [], None, None, lineno=739, col_offset=19), 'refactor_file', Load(), lineno=739, col_offset=19), [], [], Name('args', Load(), lineno=740, col_offset=17), Name('kwargs', Load(), lineno=740, col_offset=25), lineno=739, col_offset=19), lineno=739, col_offset=12)], lineno=736, col_offset=8)], [], lineno=735, col_offset=4)], [], lineno=688, col_offset=0)])
