Module([Expr(Str('Token constants (from "token.h").', lineno=3, col_offset=0), lineno=3, col_offset=0), Assign([Name('ENDMARKER', Store(), lineno=13, col_offset=0)], Num(0, lineno=13, col_offset=12), lineno=13, col_offset=0), Assign([Name('NAME', Store(), lineno=14, col_offset=0)], Num(1, lineno=14, col_offset=7), lineno=14, col_offset=0), Assign([Name('NUMBER', Store(), lineno=15, col_offset=0)], Num(2, lineno=15, col_offset=9), lineno=15, col_offset=0), Assign([Name('STRING', Store(), lineno=16, col_offset=0)], Num(3, lineno=16, col_offset=9), lineno=16, col_offset=0), Assign([Name('NEWLINE', Store(), lineno=17, col_offset=0)], Num(4, lineno=17, col_offset=10), lineno=17, col_offset=0), Assign([Name('INDENT', Store(), lineno=18, col_offset=0)], Num(5, lineno=18, col_offset=9), lineno=18, col_offset=0), Assign([Name('DEDENT', Store(), lineno=19, col_offset=0)], Num(6, lineno=19, col_offset=9), lineno=19, col_offset=0), Assign([Name('LPAR', Store(), lineno=20, col_offset=0)], Num(7, lineno=20, col_offset=7), lineno=20, col_offset=0), Assign([Name('RPAR', Store(), lineno=21, col_offset=0)], Num(8, lineno=21, col_offset=7), lineno=21, col_offset=0), Assign([Name('LSQB', Store(), lineno=22, col_offset=0)], Num(9, lineno=22, col_offset=7), lineno=22, col_offset=0), Assign([Name('RSQB', Store(), lineno=23, col_offset=0)], Num(10, lineno=23, col_offset=7), lineno=23, col_offset=0), Assign([Name('COLON', Store(), lineno=24, col_offset=0)], Num(11, lineno=24, col_offset=8), lineno=24, col_offset=0), Assign([Name('COMMA', Store(), lineno=25, col_offset=0)], Num(12, lineno=25, col_offset=8), lineno=25, col_offset=0), Assign([Name('SEMI', Store(), lineno=26, col_offset=0)], Num(13, lineno=26, col_offset=7), lineno=26, col_offset=0), Assign([Name('PLUS', Store(), lineno=27, col_offset=0)], Num(14, lineno=27, col_offset=7), lineno=27, col_offset=0), Assign([Name('MINUS', Store(), lineno=28, col_offset=0)], Num(15, lineno=28, col_offset=8), lineno=28, col_offset=0), Assign([Name('STAR', Store(), lineno=29, col_offset=0)], Num(16, lineno=29, col_offset=7), lineno=29, col_offset=0), Assign([Name('SLASH', Store(), lineno=30, col_offset=0)], Num(17, lineno=30, col_offset=8), lineno=30, col_offset=0), Assign([Name('VBAR', Store(), lineno=31, col_offset=0)], Num(18, lineno=31, col_offset=7), lineno=31, col_offset=0), Assign([Name('AMPER', Store(), lineno=32, col_offset=0)], Num(19, lineno=32, col_offset=8), lineno=32, col_offset=0), Assign([Name('LESS', Store(), lineno=33, col_offset=0)], Num(20, lineno=33, col_offset=7), lineno=33, col_offset=0), Assign([Name('GREATER', Store(), lineno=34, col_offset=0)], Num(21, lineno=34, col_offset=10), lineno=34, col_offset=0), Assign([Name('EQUAL', Store(), lineno=35, col_offset=0)], Num(22, lineno=35, col_offset=8), lineno=35, col_offset=0), Assign([Name('DOT', Store(), lineno=36, col_offset=0)], Num(23, lineno=36, col_offset=6), lineno=36, col_offset=0), Assign([Name('PERCENT', Store(), lineno=37, col_offset=0)], Num(24, lineno=37, col_offset=10), lineno=37, col_offset=0), Assign([Name('BACKQUOTE', Store(), lineno=38, col_offset=0)], Num(25, lineno=38, col_offset=12), lineno=38, col_offset=0), Assign([Name('LBRACE', Store(), lineno=39, col_offset=0)], Num(26, lineno=39, col_offset=9), lineno=39, col_offset=0), Assign([Name('RBRACE', Store(), lineno=40, col_offset=0)], Num(27, lineno=40, col_offset=9), lineno=40, col_offset=0), Assign([Name('EQEQUAL', Store(), lineno=41, col_offset=0)], Num(28, lineno=41, col_offset=10), lineno=41, col_offset=0), Assign([Name('NOTEQUAL', Store(), lineno=42, col_offset=0)], Num(29, lineno=42, col_offset=11), lineno=42, col_offset=0), Assign([Name('LESSEQUAL', Store(), lineno=43, col_offset=0)], Num(30, lineno=43, col_offset=12), lineno=43, col_offset=0), Assign([Name('GREATEREQUAL', Store(), lineno=44, col_offset=0)], Num(31, lineno=44, col_offset=15), lineno=44, col_offset=0), Assign([Name('TILDE', Store(), lineno=45, col_offset=0)], Num(32, lineno=45, col_offset=8), lineno=45, col_offset=0), Assign([Name('CIRCUMFLEX', Store(), lineno=46, col_offset=0)], Num(33, lineno=46, col_offset=13), lineno=46, col_offset=0), Assign([Name('LEFTSHIFT', Store(), lineno=47, col_offset=0)], Num(34, lineno=47, col_offset=12), lineno=47, col_offset=0), Assign([Name('RIGHTSHIFT', Store(), lineno=48, col_offset=0)], Num(35, lineno=48, col_offset=13), lineno=48, col_offset=0), Assign([Name('DOUBLESTAR', Store(), lineno=49, col_offset=0)], Num(36, lineno=49, col_offset=13), lineno=49, col_offset=0), Assign([Name('PLUSEQUAL', Store(), lineno=50, col_offset=0)], Num(37, lineno=50, col_offset=12), lineno=50, col_offset=0), Assign([Name('MINEQUAL', Store(), lineno=51, col_offset=0)], Num(38, lineno=51, col_offset=11), lineno=51, col_offset=0), Assign([Name('STAREQUAL', Store(), lineno=52, col_offset=0)], Num(39, lineno=52, col_offset=12), lineno=52, col_offset=0), Assign([Name('SLASHEQUAL', Store(), lineno=53, col_offset=0)], Num(40, lineno=53, col_offset=13), lineno=53, col_offset=0), Assign([Name('PERCENTEQUAL', Store(), lineno=54, col_offset=0)], Num(41, lineno=54, col_offset=15), lineno=54, col_offset=0), Assign([Name('AMPEREQUAL', Store(), lineno=55, col_offset=0)], Num(42, lineno=55, col_offset=13), lineno=55, col_offset=0), Assign([Name('VBAREQUAL', Store(), lineno=56, col_offset=0)], Num(43, lineno=56, col_offset=12), lineno=56, col_offset=0), Assign([Name('CIRCUMFLEXEQUAL', Store(), lineno=57, col_offset=0)], Num(44, lineno=57, col_offset=18), lineno=57, col_offset=0), Assign([Name('LEFTSHIFTEQUAL', Store(), lineno=58, col_offset=0)], Num(45, lineno=58, col_offset=17), lineno=58, col_offset=0), Assign([Name('RIGHTSHIFTEQUAL', Store(), lineno=59, col_offset=0)], Num(46, lineno=59, col_offset=18), lineno=59, col_offset=0), Assign([Name('DOUBLESTAREQUAL', Store(), lineno=60, col_offset=0)], Num(47, lineno=60, col_offset=18), lineno=60, col_offset=0), Assign([Name('DOUBLESLASH', Store(), lineno=61, col_offset=0)], Num(48, lineno=61, col_offset=14), lineno=61, col_offset=0), Assign([Name('DOUBLESLASHEQUAL', Store(), lineno=62, col_offset=0)], Num(49, lineno=62, col_offset=19), lineno=62, col_offset=0), Assign([Name('AT', Store(), lineno=63, col_offset=0)], Num(50, lineno=63, col_offset=5), lineno=63, col_offset=0), Assign([Name('OP', Store(), lineno=64, col_offset=0)], Num(51, lineno=64, col_offset=5), lineno=64, col_offset=0), Assign([Name('ERRORTOKEN', Store(), lineno=65, col_offset=0)], Num(52, lineno=65, col_offset=13), lineno=65, col_offset=0), Assign([Name('N_TOKENS', Store(), lineno=66, col_offset=0)], Num(53, lineno=66, col_offset=11), lineno=66, col_offset=0), Assign([Name('NT_OFFSET', Store(), lineno=67, col_offset=0)], Num(256, lineno=67, col_offset=12), lineno=67, col_offset=0), Assign([Name('tok_name', Store(), lineno=70, col_offset=0)], Dict([], [], lineno=70, col_offset=11), lineno=70, col_offset=0), For(Tuple([Name('_name', Store(), lineno=71, col_offset=4), Name('_value', Store(), lineno=71, col_offset=11)], Store(), lineno=71, col_offset=4), Call(Attribute(Call(Name('globals', Load(), lineno=71, col_offset=21), [], [], None, None, lineno=71, col_offset=21), 'items', Load(), lineno=71, col_offset=21), [], [], None, None, lineno=71, col_offset=21), [If(Compare(Call(Name('type', Load(), lineno=72, col_offset=7), [Name('_value', Load(), lineno=72, col_offset=12)], [], None, None, lineno=72, col_offset=7), [Is()], [Call(Name('type', Load(), lineno=72, col_offset=23), [Num(0, lineno=72, col_offset=28)], [], None, None, lineno=72, col_offset=23)], lineno=72, col_offset=7), [Assign([Subscript(Name('tok_name', Load(), lineno=73, col_offset=8), Index(Name('_value', Load(), lineno=73, col_offset=17)), Store(), lineno=73, col_offset=8)], Name('_name', Load(), lineno=73, col_offset=27), lineno=73, col_offset=8)], [], lineno=72, col_offset=4)], [], lineno=71, col_offset=0), Delete([Name('_name', Del(), lineno=74, col_offset=4), Name('_value', Del(), lineno=74, col_offset=11)], lineno=74, col_offset=0), FunctionDef('ISTERMINAL', arguments([Name('x', Param(), lineno=77, col_offset=15)], None, None, []), [Return(Compare(Name('x', Load(), lineno=78, col_offset=11), [Lt()], [Name('NT_OFFSET', Load(), lineno=78, col_offset=15)], lineno=78, col_offset=11), lineno=78, col_offset=4)], [], lineno=77, col_offset=0), FunctionDef('ISNONTERMINAL', arguments([Name('x', Param(), lineno=80, col_offset=18)], None, None, []), [Return(Compare(Name('x', Load(), lineno=81, col_offset=11), [GtE()], [Name('NT_OFFSET', Load(), lineno=81, col_offset=16)], lineno=81, col_offset=11), lineno=81, col_offset=4)], [], lineno=80, col_offset=0), FunctionDef('ISEOF', arguments([Name('x', Param(), lineno=83, col_offset=10)], None, None, []), [Return(Compare(Name('x', Load(), lineno=84, col_offset=11), [Eq()], [Name('ENDMARKER', Load(), lineno=84, col_offset=16)], lineno=84, col_offset=11), lineno=84, col_offset=4)], [], lineno=83, col_offset=0), FunctionDef('main', arguments([], None, None, []), [Import([alias('re', None)], lineno=88, col_offset=4), Import([alias('sys', None)], lineno=89, col_offset=4), Assign([Name('args', Store(), lineno=90, col_offset=4)], Subscript(Attribute(Name('sys', Load(), lineno=90, col_offset=11), 'argv', Load(), lineno=90, col_offset=11), Slice(Num(1, lineno=90, col_offset=20), None, None), Load(), lineno=90, col_offset=11), lineno=90, col_offset=4), Assign([Name('inFileName', Store(), lineno=91, col_offset=4)], BoolOp(Or(), [BoolOp(And(), [Name('args', Load(), lineno=91, col_offset=17), Subscript(Name('args', Load(), lineno=91, col_offset=26), Index(Num(0, lineno=91, col_offset=31)), Load(), lineno=91, col_offset=26)], lineno=91, col_offset=17), Str('Include/token.h', lineno=91, col_offset=37)], lineno=91, col_offset=17), lineno=91, col_offset=4), Assign([Name('outFileName', Store(), lineno=92, col_offset=4)], Str('Lib/token.py', lineno=92, col_offset=18), lineno=92, col_offset=4), If(Compare(Call(Name('len', Load(), lineno=93, col_offset=7), [Name('args', Load(), lineno=93, col_offset=11)], [], None, None, lineno=93, col_offset=7), [Gt()], [Num(1, lineno=93, col_offset=19)], lineno=93, col_offset=7), [Assign([Name('outFileName', Store(), lineno=94, col_offset=8)], Subscript(Name('args', Load(), lineno=94, col_offset=22), Index(Num(1, lineno=94, col_offset=27)), Load(), lineno=94, col_offset=22), lineno=94, col_offset=8)], [], lineno=93, col_offset=4), TryExcept([Assign([Name('fp', Store(), lineno=96, col_offset=8)], Call(Name('open', Load(), lineno=96, col_offset=13), [Name('inFileName', Load(), lineno=96, col_offset=18)], [], None, None, lineno=96, col_offset=13), lineno=96, col_offset=8)], [ExceptHandler(Name('IOError', Load(), lineno=97, col_offset=11), Name('err', Store(), lineno=97, col_offset=20), [Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=98, col_offset=8), 'stdout', Load(), lineno=98, col_offset=8), 'write', Load(), lineno=98, col_offset=8), [BinOp(Str('I/O error: %s\n', lineno=98, col_offset=25), Mod(), Call(Name('str', Load(), lineno=98, col_offset=45), [Name('err', Load(), lineno=98, col_offset=49)], [], None, None, lineno=98, col_offset=45), lineno=98, col_offset=25)], [], None, None, lineno=98, col_offset=8), lineno=98, col_offset=8), Expr(Call(Attribute(Name('sys', Load(), lineno=99, col_offset=8), 'exit', Load(), lineno=99, col_offset=8), [Num(1, lineno=99, col_offset=17)], [], None, None, lineno=99, col_offset=8), lineno=99, col_offset=8)], lineno=97, col_offset=4)], [], lineno=95, col_offset=4), Assign([Name('lines', Store(), lineno=100, col_offset=4)], Call(Attribute(Call(Attribute(Name('fp', Load(), lineno=100, col_offset=12), 'read', Load(), lineno=100, col_offset=12), [], [], None, None, lineno=100, col_offset=12), 'split', Load(), lineno=100, col_offset=12), [Str('\n', lineno=100, col_offset=28)], [], None, None, lineno=100, col_offset=12), lineno=100, col_offset=4), Expr(Call(Attribute(Name('fp', Load(), lineno=101, col_offset=4), 'close', Load(), lineno=101, col_offset=4), [], [], None, None, lineno=101, col_offset=4), lineno=101, col_offset=4), Assign([Name('prog', Store(), lineno=102, col_offset=4)], Call(Attribute(Name('re', Load(), lineno=102, col_offset=11), 'compile', Load(), lineno=102, col_offset=11), [Str('#define[ \t][ \t]*([A-Z0-9][A-Z0-9_]*)[ \t][ \t]*([0-9][0-9]*)', lineno=103, col_offset=8), Attribute(Name('re', Load(), lineno=104, col_offset=8), 'IGNORECASE', Load(), lineno=104, col_offset=8)], [], None, None, lineno=102, col_offset=11), lineno=102, col_offset=4), Assign([Name('tokens', Store(), lineno=105, col_offset=4)], Dict([], [], lineno=105, col_offset=13), lineno=105, col_offset=4), For(Name('line', Store(), lineno=106, col_offset=8), Name('lines', Load(), lineno=106, col_offset=16), [Assign([Name('match', Store(), lineno=107, col_offset=8)], Call(Attribute(Name('prog', Load(), lineno=107, col_offset=16), 'match', Load(), lineno=107, col_offset=16), [Name('line', Load(), lineno=107, col_offset=27)], [], None, None, lineno=107, col_offset=16), lineno=107, col_offset=8), If(Name('match', Load(), lineno=108, col_offset=11), [Assign([Tuple([Name('name', Store(), lineno=109, col_offset=12), Name('val', Store(), lineno=109, col_offset=18)], Store(), lineno=109, col_offset=12)], Call(Attribute(Name('match', Load(), lineno=109, col_offset=24), 'group', Load(), lineno=109, col_offset=24), [Num(1, lineno=109, col_offset=36), Num(2, lineno=109, col_offset=39)], [], None, None, lineno=109, col_offset=24), lineno=109, col_offset=12), Assign([Name('val', Store(), lineno=110, col_offset=12)], Call(Name('int', Load(), lineno=110, col_offset=18), [Name('val', Load(), lineno=110, col_offset=22)], [], None, None, lineno=110, col_offset=18), lineno=110, col_offset=12), Assign([Subscript(Name('tokens', Load(), lineno=111, col_offset=12), Index(Name('val', Load(), lineno=111, col_offset=19)), Store(), lineno=111, col_offset=12)], Name('name', Load(), lineno=111, col_offset=26), lineno=111, col_offset=12)], [], lineno=108, col_offset=8)], [], lineno=106, col_offset=4), Assign([Name('keys', Store(), lineno=112, col_offset=4)], Call(Attribute(Name('tokens', Load(), lineno=112, col_offset=11), 'keys', Load(), lineno=112, col_offset=11), [], [], None, None, lineno=112, col_offset=11), lineno=112, col_offset=4), Expr(Call(Attribute(Name('keys', Load(), lineno=113, col_offset=4), 'sort', Load(), lineno=113, col_offset=4), [], [], None, None, lineno=113, col_offset=4), lineno=113, col_offset=4), TryExcept([Assign([Name('fp', Store(), lineno=116, col_offset=8)], Call(Name('open', Load(), lineno=116, col_offset=13), [Name('outFileName', Load(), lineno=116, col_offset=18)], [], None, None, lineno=116, col_offset=13), lineno=116, col_offset=8)], [ExceptHandler(Name('IOError', Load(), lineno=117, col_offset=11), Name('err', Store(), lineno=117, col_offset=20), [Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=118, col_offset=8), 'stderr', Load(), lineno=118, col_offset=8), 'write', Load(), lineno=118, col_offset=8), [BinOp(Str('I/O error: %s\n', lineno=118, col_offset=25), Mod(), Call(Name('str', Load(), lineno=118, col_offset=45), [Name('err', Load(), lineno=118, col_offset=49)], [], None, None, lineno=118, col_offset=45), lineno=118, col_offset=25)], [], None, None, lineno=118, col_offset=8), lineno=118, col_offset=8), Expr(Call(Attribute(Name('sys', Load(), lineno=119, col_offset=8), 'exit', Load(), lineno=119, col_offset=8), [Num(2, lineno=119, col_offset=17)], [], None, None, lineno=119, col_offset=8), lineno=119, col_offset=8)], lineno=117, col_offset=4)], [], lineno=115, col_offset=4), Assign([Name('format', Store(), lineno=120, col_offset=4)], Call(Attribute(Call(Attribute(Name('fp', Load(), lineno=120, col_offset=13), 'read', Load(), lineno=120, col_offset=13), [], [], None, None, lineno=120, col_offset=13), 'split', Load(), lineno=120, col_offset=13), [Str('\n', lineno=120, col_offset=29)], [], None, None, lineno=120, col_offset=13), lineno=120, col_offset=4), Expr(Call(Attribute(Name('fp', Load(), lineno=121, col_offset=4), 'close', Load(), lineno=121, col_offset=4), [], [], None, None, lineno=121, col_offset=4), lineno=121, col_offset=4), TryExcept([Assign([Name('start', Store(), lineno=123, col_offset=8)], BinOp(Call(Attribute(Name('format', Load(), lineno=123, col_offset=16), 'index', Load(), lineno=123, col_offset=16), [Str('#--start constants--', lineno=123, col_offset=29)], [], None, None, lineno=123, col_offset=16), Add(), Num(1, lineno=123, col_offset=55), lineno=123, col_offset=16), lineno=123, col_offset=8), Assign([Name('end', Store(), lineno=124, col_offset=8)], Call(Attribute(Name('format', Load(), lineno=124, col_offset=14), 'index', Load(), lineno=124, col_offset=14), [Str('#--end constants--', lineno=124, col_offset=27)], [], None, None, lineno=124, col_offset=14), lineno=124, col_offset=8)], [ExceptHandler(Name('ValueError', Load(), lineno=125, col_offset=11), None, [Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=126, col_offset=8), 'stderr', Load(), lineno=126, col_offset=8), 'write', Load(), lineno=126, col_offset=8), [Str('target does not contain format markers', lineno=126, col_offset=25)], [], None, None, lineno=126, col_offset=8), lineno=126, col_offset=8), Expr(Call(Attribute(Name('sys', Load(), lineno=127, col_offset=8), 'exit', Load(), lineno=127, col_offset=8), [Num(3, lineno=127, col_offset=17)], [], None, None, lineno=127, col_offset=8), lineno=127, col_offset=8)], lineno=125, col_offset=4)], [], lineno=122, col_offset=4), Assign([Name('lines', Store(), lineno=128, col_offset=4)], List([], Load(), lineno=128, col_offset=12), lineno=128, col_offset=4), For(Name('val', Store(), lineno=129, col_offset=8), Name('keys', Load(), lineno=129, col_offset=15), [Expr(Call(Attribute(Name('lines', Load(), lineno=130, col_offset=8), 'append', Load(), lineno=130, col_offset=8), [BinOp(Str('%s = %d', lineno=130, col_offset=21), Mod(), Tuple([Subscript(Name('tokens', Load(), lineno=130, col_offset=34), Index(Name('val', Load(), lineno=130, col_offset=41)), Load(), lineno=130, col_offset=34), Name('val', Load(), lineno=130, col_offset=47)], Load(), lineno=130, col_offset=34), lineno=130, col_offset=21)], [], None, None, lineno=130, col_offset=8), lineno=130, col_offset=8)], [], lineno=129, col_offset=4), Assign([Subscript(Name('format', Load(), lineno=131, col_offset=4), Slice(Name('start', Load(), lineno=131, col_offset=11), Name('end', Load(), lineno=131, col_offset=17), None), Store(), lineno=131, col_offset=4)], Name('lines', Load(), lineno=131, col_offset=24), lineno=131, col_offset=4), TryExcept([Assign([Name('fp', Store(), lineno=133, col_offset=8)], Call(Name('open', Load(), lineno=133, col_offset=13), [Name('outFileName', Load(), lineno=133, col_offset=18), Str('w', lineno=133, col_offset=31)], [], None, None, lineno=133, col_offset=13), lineno=133, col_offset=8)], [ExceptHandler(Name('IOError', Load(), lineno=134, col_offset=11), Name('err', Store(), lineno=134, col_offset=20), [Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=135, col_offset=8), 'stderr', Load(), lineno=135, col_offset=8), 'write', Load(), lineno=135, col_offset=8), [BinOp(Str('I/O error: %s\n', lineno=135, col_offset=25), Mod(), Call(Name('str', Load(), lineno=135, col_offset=45), [Name('err', Load(), lineno=135, col_offset=49)], [], None, None, lineno=135, col_offset=45), lineno=135, col_offset=25)], [], None, None, lineno=135, col_offset=8), lineno=135, col_offset=8), Expr(Call(Attribute(Name('sys', Load(), lineno=136, col_offset=8), 'exit', Load(), lineno=136, col_offset=8), [Num(4, lineno=136, col_offset=17)], [], None, None, lineno=136, col_offset=8), lineno=136, col_offset=8)], lineno=134, col_offset=4)], [], lineno=132, col_offset=4), Expr(Call(Attribute(Name('fp', Load(), lineno=137, col_offset=4), 'write', Load(), lineno=137, col_offset=4), [Call(Attribute(Str('\n', lineno=137, col_offset=13), 'join', Load(), lineno=137, col_offset=13), [Name('format', Load(), lineno=137, col_offset=23)], [], None, None, lineno=137, col_offset=13)], [], None, None, lineno=137, col_offset=4), lineno=137, col_offset=4), Expr(Call(Attribute(Name('fp', Load(), lineno=138, col_offset=4), 'close', Load(), lineno=138, col_offset=4), [], [], None, None, lineno=138, col_offset=4), lineno=138, col_offset=4)], [], lineno=87, col_offset=0), If(Compare(Name('__name__', Load(), lineno=141, col_offset=3), [Eq()], [Str('__main__', lineno=141, col_offset=15)], lineno=141, col_offset=3), [Expr(Call(Name('main', Load(), lineno=142, col_offset=4), [], [], None, None, lineno=142, col_offset=4), lineno=142, col_offset=4)], [], lineno=141, col_offset=0)])
