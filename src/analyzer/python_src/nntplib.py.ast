Module([Expr(Str("An NNTP client class based on RFC 977: Network News Transfer Protocol.\n\nExample:\n\n>>> from nntplib import NNTP\n>>> s = NNTP('news')\n>>> resp, count, first, last, name = s.group('comp.lang.python')\n>>> print 'Group', name, 'has', count, 'articles, range', first, 'to', last\nGroup comp.lang.python has 51 articles, range 5770 to 5821\n>>> resp, subs = s.xhdr('subject', first + '-' + last)\n>>> resp = s.quit()\n>>>\n\nHere 'resp' is the server response line.\nError responses are turned into exceptions.\n\nTo post an article from a file:\n>>> f = open(filename, 'r') # file containing article, including header\n>>> resp = s.post(f)\n>>>\n\nFor descriptions of all methods, read the comments in the code below.\nNote that all arguments and return values representing article numbers\nare strings, not numbers, since they are rarely used for calculations.\n", lineno=25, col_offset=-1), lineno=25, col_offset=-1), Import([alias('re', None)], lineno=32, col_offset=0), Import([alias('socket', None)], lineno=33, col_offset=0), Assign([Name('__all__', Store(), lineno=35, col_offset=0)], List([Str('NNTP', lineno=35, col_offset=11), Str('NNTPReplyError', lineno=35, col_offset=18), Str('NNTPTemporaryError', lineno=35, col_offset=35), Str('NNTPPermanentError', lineno=36, col_offset=11), Str('NNTPProtocolError', lineno=36, col_offset=32), Str('NNTPDataError', lineno=36, col_offset=52), Str('error_reply', lineno=37, col_offset=11), Str('error_temp', lineno=37, col_offset=25), Str('error_perm', lineno=37, col_offset=38), Str('error_proto', lineno=37, col_offset=51), Str('error_data', lineno=38, col_offset=11)], Load(), lineno=35, col_offset=10), lineno=35, col_offset=0), ClassDef('NNTPError', [Name('Exception', Load(), lineno=41, col_offset=16)], [Expr(Str('Base class for all nntplib exceptions', lineno=42, col_offset=4), lineno=42, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=43, col_offset=17)], 'args', None, []), [Expr(Call(Attribute(Name('Exception', Load(), lineno=44, col_offset=8), '__init__', Load(), lineno=44, col_offset=8), [Name('self', Load(), lineno=44, col_offset=27)], [], Name('args', Load(), lineno=44, col_offset=34), None, lineno=44, col_offset=8), lineno=44, col_offset=8), TryExcept([Assign([Attribute(Name('self', Load(), lineno=46, col_offset=12), 'response', Store(), lineno=46, col_offset=12)], Subscript(Name('args', Load(), lineno=46, col_offset=28), Index(Num(0, lineno=46, col_offset=33)), Load(), lineno=46, col_offset=28), lineno=46, col_offset=12)], [ExceptHandler(Name('IndexError', Load(), lineno=47, col_offset=15), None, [Assign([Attribute(Name('self', Load(), lineno=48, col_offset=12), 'response', Store(), lineno=48, col_offset=12)], Str('No response given', lineno=48, col_offset=28), lineno=48, col_offset=12)], lineno=47, col_offset=8)], [], lineno=45, col_offset=8)], [], lineno=43, col_offset=4)], [], lineno=41, col_offset=0), ClassDef('NNTPReplyError', [Name('NNTPError', Load(), lineno=50, col_offset=21)], [Expr(Str('Unexpected [123]xx reply', lineno=51, col_offset=4), lineno=51, col_offset=4), Pass( lineno=52, col_offset=4)], [], lineno=50, col_offset=0), ClassDef('NNTPTemporaryError', [Name('NNTPError', Load(), lineno=54, col_offset=25)], [Expr(Str('4xx errors', lineno=55, col_offset=4), lineno=55, col_offset=4), Pass( lineno=56, col_offset=4)], [], lineno=54, col_offset=0), ClassDef('NNTPPermanentError', [Name('NNTPError', Load(), lineno=58, col_offset=25)], [Expr(Str('5xx errors', lineno=59, col_offset=4), lineno=59, col_offset=4), Pass( lineno=60, col_offset=4)], [], lineno=58, col_offset=0), ClassDef('NNTPProtocolError', [Name('NNTPError', Load(), lineno=62, col_offset=24)], [Expr(Str('Response does not begin with [1-5]', lineno=63, col_offset=4), lineno=63, col_offset=4), Pass( lineno=64, col_offset=4)], [], lineno=62, col_offset=0), ClassDef('NNTPDataError', [Name('NNTPError', Load(), lineno=66, col_offset=20)], [Expr(Str('Error in response data', lineno=67, col_offset=4), lineno=67, col_offset=4), Pass( lineno=68, col_offset=4)], [], lineno=66, col_offset=0), Assign([Name('error_reply', Store(), lineno=71, col_offset=0)], Name('NNTPReplyError', Load(), lineno=71, col_offset=14), lineno=71, col_offset=0), Assign([Name('error_temp', Store(), lineno=72, col_offset=0)], Name('NNTPTemporaryError', Load(), lineno=72, col_offset=13), lineno=72, col_offset=0), Assign([Name('error_perm', Store(), lineno=73, col_offset=0)], Name('NNTPPermanentError', Load(), lineno=73, col_offset=13), lineno=73, col_offset=0), Assign([Name('error_proto', Store(), lineno=74, col_offset=0)], Name('NNTPProtocolError', Load(), lineno=74, col_offset=14), lineno=74, col_offset=0), Assign([Name('error_data', Store(), lineno=75, col_offset=0)], Name('NNTPDataError', Load(), lineno=75, col_offset=13), lineno=75, col_offset=0), Assign([Name('NNTP_PORT', Store(), lineno=80, col_offset=0)], Num(119, lineno=80, col_offset=12), lineno=80, col_offset=0), Assign([Name('LONGRESP', Store(), lineno=84, col_offset=0)], List([Str('100', lineno=84, col_offset=12), Str('215', lineno=84, col_offset=19), Str('220', lineno=84, col_offset=26), Str('221', lineno=84, col_offset=33), Str('222', lineno=84, col_offset=40), Str('224', lineno=84, col_offset=47), Str('230', lineno=84, col_offset=54), Str('231', lineno=84, col_offset=61), Str('282', lineno=84, col_offset=68)], Load(), lineno=84, col_offset=11), lineno=84, col_offset=0), Assign([Name('CRLF', Store(), lineno=88, col_offset=0)], Str('\r\n', lineno=88, col_offset=7), lineno=88, col_offset=0), ClassDef('NNTP', [], [FunctionDef('__init__', arguments([Name('self', Param(), lineno=94, col_offset=17), Name('host', Param(), lineno=94, col_offset=23), Name('port', Param(), lineno=94, col_offset=29), Name('user', Param(), lineno=94, col_offset=45), Name('password', Param(), lineno=94, col_offset=56), Name('readermode', Param(), lineno=95, col_offset=17), Name('usenetrc', Param(), lineno=95, col_offset=34)], None, None, [Name('NNTP_PORT', Load(), lineno=94, col_offset=34), Name('None', Load(), lineno=94, col_offset=50), Name('None', Load(), lineno=94, col_offset=65), Name('None', Load(), lineno=95, col_offset=28), Name('True', Load(), lineno=95, col_offset=43)]), [Expr(Str("Initialize an instance.  Arguments:\n        - host: hostname to connect to\n        - port: port to connect to (default the standard NNTP port)\n        - user: username to authenticate with\n        - password: password to use with username\n        - readermode: if true, send 'mode reader' command after\n                      connecting.\n\n        readermode is sometimes necessary if you are connecting to an\n        NNTP server on the local machine and intend to call\n        reader-specific comamnds, such as `group'.  If you get\n        unexpected NNTPPermanentErrors, you might need to set\n        readermode.\n        ", lineno=109, col_offset=-1), lineno=109, col_offset=-1), Assign([Attribute(Name('self', Load(), lineno=110, col_offset=8), 'host', Store(), lineno=110, col_offset=8)], Name('host', Load(), lineno=110, col_offset=20), lineno=110, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=111, col_offset=8), 'port', Store(), lineno=111, col_offset=8)], Name('port', Load(), lineno=111, col_offset=20), lineno=111, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=112, col_offset=8), 'sock', Store(), lineno=112, col_offset=8)], Call(Attribute(Name('socket', Load(), lineno=112, col_offset=20), 'create_connection', Load(), lineno=112, col_offset=20), [Tuple([Name('host', Load(), lineno=112, col_offset=46), Name('port', Load(), lineno=112, col_offset=52)], Load(), lineno=112, col_offset=46)], [], None, None, lineno=112, col_offset=20), lineno=112, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=113, col_offset=8), 'file', Store(), lineno=113, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=113, col_offset=20), 'sock', Load(), lineno=113, col_offset=20), 'makefile', Load(), lineno=113, col_offset=20), [Str('rb', lineno=113, col_offset=39)], [], None, None, lineno=113, col_offset=20), lineno=113, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=114, col_offset=8), 'debugging', Store(), lineno=114, col_offset=8)], Num(0, lineno=114, col_offset=25), lineno=114, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=115, col_offset=8), 'welcome', Store(), lineno=115, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=115, col_offset=23), 'getresp', Load(), lineno=115, col_offset=23), [], [], None, None, lineno=115, col_offset=23), lineno=115, col_offset=8), Assign([Name('readermode_afterauth', Store(), lineno=122, col_offset=8)], Num(0, lineno=122, col_offset=31), lineno=122, col_offset=8), If(Name('readermode', Load(), lineno=123, col_offset=11), [TryExcept([Assign([Attribute(Name('self', Load(), lineno=125, col_offset=16), 'welcome', Store(), lineno=125, col_offset=16)], Call(Attribute(Name('self', Load(), lineno=125, col_offset=31), 'shortcmd', Load(), lineno=125, col_offset=31), [Str('mode reader', lineno=125, col_offset=45)], [], None, None, lineno=125, col_offset=31), lineno=125, col_offset=16)], [ExceptHandler(Name('NNTPPermanentError', Load(), lineno=126, col_offset=19), None, [Pass( lineno=128, col_offset=16)], lineno=126, col_offset=12), ExceptHandler(Name('NNTPTemporaryError', Load(), lineno=129, col_offset=19), Name('e', Store(), lineno=129, col_offset=39), [If(BoolOp(And(), [Name('user', Load(), lineno=130, col_offset=19), Compare(Subscript(Attribute(Name('e', Load(), lineno=130, col_offset=28), 'response', Load(), lineno=130, col_offset=28), Slice(None, Num(3, lineno=130, col_offset=40), None), Load(), lineno=130, col_offset=28), [Eq()], [Str('480', lineno=130, col_offset=46)], lineno=130, col_offset=28)], lineno=130, col_offset=19), [Assign([Name('readermode_afterauth', Store(), lineno=132, col_offset=20)], Num(1, lineno=132, col_offset=43), lineno=132, col_offset=20)], [Raise(None, None, None, lineno=134, col_offset=20)], lineno=130, col_offset=16)], lineno=129, col_offset=12)], [], lineno=124, col_offset=12)], [], lineno=123, col_offset=8), TryExcept([If(BoolOp(And(), [Name('usenetrc', Load(), lineno=138, col_offset=15), UnaryOp(Not(), Name('user', Load(), lineno=138, col_offset=32), lineno=138, col_offset=28)], lineno=138, col_offset=15), [Import([alias('netrc', None)], lineno=139, col_offset=16), Assign([Name('credentials', Store(), lineno=140, col_offset=16)], Call(Attribute(Name('netrc', Load(), lineno=140, col_offset=30), 'netrc', Load(), lineno=140, col_offset=30), [], [], None, None, lineno=140, col_offset=30), lineno=140, col_offset=16), Assign([Name('auth', Store(), lineno=141, col_offset=16)], Call(Attribute(Name('credentials', Load(), lineno=141, col_offset=23), 'authenticators', Load(), lineno=141, col_offset=23), [Name('host', Load(), lineno=141, col_offset=50)], [], None, None, lineno=141, col_offset=23), lineno=141, col_offset=16), If(Name('auth', Load(), lineno=142, col_offset=19), [Assign([Name('user', Store(), lineno=143, col_offset=20)], Subscript(Name('auth', Load(), lineno=143, col_offset=27), Index(Num(0, lineno=143, col_offset=32)), Load(), lineno=143, col_offset=27), lineno=143, col_offset=20), Assign([Name('password', Store(), lineno=144, col_offset=20)], Subscript(Name('auth', Load(), lineno=144, col_offset=31), Index(Num(2, lineno=144, col_offset=36)), Load(), lineno=144, col_offset=31), lineno=144, col_offset=20)], [], lineno=142, col_offset=16)], [], lineno=138, col_offset=12)], [ExceptHandler(Name('IOError', Load(), lineno=145, col_offset=15), None, [Pass( lineno=146, col_offset=12)], lineno=145, col_offset=8)], [], lineno=137, col_offset=8), If(Name('user', Load(), lineno=148, col_offset=11), [Assign([Name('resp', Store(), lineno=149, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=149, col_offset=19), 'shortcmd', Load(), lineno=149, col_offset=19), [BinOp(Str('authinfo user ', lineno=149, col_offset=33), Add(), Name('user', Load(), lineno=149, col_offset=50), lineno=149, col_offset=33)], [], None, None, lineno=149, col_offset=19), lineno=149, col_offset=12), If(Compare(Subscript(Name('resp', Load(), lineno=150, col_offset=15), Slice(None, Num(3, lineno=150, col_offset=21), None), Load(), lineno=150, col_offset=15), [Eq()], [Str('381', lineno=150, col_offset=27)], lineno=150, col_offset=15), [If(UnaryOp(Not(), Name('password', Load(), lineno=151, col_offset=23), lineno=151, col_offset=19), [Raise(Call(Name('NNTPReplyError', Load(), lineno=152, col_offset=26), [Name('resp', Load(), lineno=152, col_offset=41)], [], None, None, lineno=152, col_offset=26), None, None, lineno=152, col_offset=20)], [Assign([Name('resp', Store(), lineno=154, col_offset=20)], Call(Attribute(Name('self', Load(), lineno=154, col_offset=27), 'shortcmd', Load(), lineno=154, col_offset=27), [BinOp(Str('authinfo pass ', lineno=155, col_offset=28), Add(), Name('password', Load(), lineno=155, col_offset=45), lineno=155, col_offset=28)], [], None, None, lineno=154, col_offset=27), lineno=154, col_offset=20), If(Compare(Subscript(Name('resp', Load(), lineno=156, col_offset=23), Slice(None, Num(3, lineno=156, col_offset=29), None), Load(), lineno=156, col_offset=23), [NotEq()], [Str('281', lineno=156, col_offset=35)], lineno=156, col_offset=23), [Raise(Call(Name('NNTPPermanentError', Load(), lineno=157, col_offset=30), [Name('resp', Load(), lineno=157, col_offset=49)], [], None, None, lineno=157, col_offset=30), None, None, lineno=157, col_offset=24)], [], lineno=156, col_offset=20)], lineno=151, col_offset=16)], [], lineno=150, col_offset=12), If(Name('readermode_afterauth', Load(), lineno=158, col_offset=15), [TryExcept([Assign([Attribute(Name('self', Load(), lineno=160, col_offset=20), 'welcome', Store(), lineno=160, col_offset=20)], Call(Attribute(Name('self', Load(), lineno=160, col_offset=35), 'shortcmd', Load(), lineno=160, col_offset=35), [Str('mode reader', lineno=160, col_offset=49)], [], None, None, lineno=160, col_offset=35), lineno=160, col_offset=20)], [ExceptHandler(Name('NNTPPermanentError', Load(), lineno=161, col_offset=23), None, [Pass( lineno=163, col_offset=20)], lineno=161, col_offset=16)], [], lineno=159, col_offset=16)], [], lineno=158, col_offset=12)], [], lineno=148, col_offset=8)], [], lineno=94, col_offset=4), FunctionDef('getwelcome', arguments([Name('self', Param(), lineno=171, col_offset=19)], None, None, []), [Expr(Str('Get the welcome message from the server\n        (this is read and squirreled away by __init__()).\n        If the response code is 200, posting is allowed;\n        if it 201, posting is not allowed.', lineno=175, col_offset=-1), lineno=175, col_offset=-1), If(Attribute(Name('self', Load(), lineno=177, col_offset=11), 'debugging', Load(), lineno=177, col_offset=11), [Print(None, [Str('*welcome*', lineno=177, col_offset=33), Call(Name('repr', Load(), lineno=177, col_offset=46), [Attribute(Name('self', Load(), lineno=177, col_offset=51), 'welcome', Load(), lineno=177, col_offset=51)], [], None, None, lineno=177, col_offset=46)], True, lineno=177, col_offset=27)], [], lineno=177, col_offset=8), Return(Attribute(Name('self', Load(), lineno=178, col_offset=15), 'welcome', Load(), lineno=178, col_offset=15), lineno=178, col_offset=8)], [], lineno=171, col_offset=4), FunctionDef('set_debuglevel', arguments([Name('self', Param(), lineno=180, col_offset=23), Name('level', Param(), lineno=180, col_offset=29)], None, None, []), [Expr(Str("Set the debugging level.  Argument 'level' means:\n        0: no debugging output (default)\n        1: print commands and responses but not body text etc.\n        2: also print raw lines read and sent before stripping CR/LF", lineno=184, col_offset=-1), lineno=184, col_offset=-1), Assign([Attribute(Name('self', Load(), lineno=186, col_offset=8), 'debugging', Store(), lineno=186, col_offset=8)], Name('level', Load(), lineno=186, col_offset=25), lineno=186, col_offset=8)], [], lineno=180, col_offset=4), Assign([Name('debug', Store(), lineno=187, col_offset=4)], Name('set_debuglevel', Load(), lineno=187, col_offset=12), lineno=187, col_offset=4), FunctionDef('putline', arguments([Name('self', Param(), lineno=189, col_offset=16), Name('line', Param(), lineno=189, col_offset=22)], None, None, []), [Expr(Str('Internal: send one line to the server, appending CRLF.', lineno=190, col_offset=8), lineno=190, col_offset=8), Assign([Name('line', Store(), lineno=191, col_offset=8)], BinOp(Name('line', Load(), lineno=191, col_offset=15), Add(), Name('CRLF', Load(), lineno=191, col_offset=22), lineno=191, col_offset=15), lineno=191, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=192, col_offset=11), 'debugging', Load(), lineno=192, col_offset=11), [Gt()], [Num(1, lineno=192, col_offset=28)], lineno=192, col_offset=11), [Print(None, [Str('*put*', lineno=192, col_offset=37), Call(Name('repr', Load(), lineno=192, col_offset=46), [Name('line', Load(), lineno=192, col_offset=51)], [], None, None, lineno=192, col_offset=46)], True, lineno=192, col_offset=31)], [], lineno=192, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=193, col_offset=8), 'sock', Load(), lineno=193, col_offset=8), 'sendall', Load(), lineno=193, col_offset=8), [Name('line', Load(), lineno=193, col_offset=26)], [], None, None, lineno=193, col_offset=8), lineno=193, col_offset=8)], [], lineno=189, col_offset=4), FunctionDef('putcmd', arguments([Name('self', Param(), lineno=195, col_offset=15), Name('line', Param(), lineno=195, col_offset=21)], None, None, []), [Expr(Str('Internal: send one command to the server (through putline()).', lineno=196, col_offset=8), lineno=196, col_offset=8), If(Attribute(Name('self', Load(), lineno=197, col_offset=11), 'debugging', Load(), lineno=197, col_offset=11), [Print(None, [Str('*cmd*', lineno=197, col_offset=33), Call(Name('repr', Load(), lineno=197, col_offset=42), [Name('line', Load(), lineno=197, col_offset=47)], [], None, None, lineno=197, col_offset=42)], True, lineno=197, col_offset=27)], [], lineno=197, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=198, col_offset=8), 'putline', Load(), lineno=198, col_offset=8), [Name('line', Load(), lineno=198, col_offset=21)], [], None, None, lineno=198, col_offset=8), lineno=198, col_offset=8)], [], lineno=195, col_offset=4), FunctionDef('getline', arguments([Name('self', Param(), lineno=200, col_offset=16)], None, None, []), [Expr(Str('Internal: return one line from the server, stripping CRLF.\n        Raise EOFError if the connection is closed.', lineno=202, col_offset=-1), lineno=202, col_offset=-1), Assign([Name('line', Store(), lineno=203, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=203, col_offset=15), 'file', Load(), lineno=203, col_offset=15), 'readline', Load(), lineno=203, col_offset=15), [], [], None, None, lineno=203, col_offset=15), lineno=203, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=204, col_offset=11), 'debugging', Load(), lineno=204, col_offset=11), [Gt()], [Num(1, lineno=204, col_offset=28)], lineno=204, col_offset=11), [Print(None, [Str('*get*', lineno=205, col_offset=18), Call(Name('repr', Load(), lineno=205, col_offset=27), [Name('line', Load(), lineno=205, col_offset=32)], [], None, None, lineno=205, col_offset=27)], True, lineno=205, col_offset=12)], [], lineno=204, col_offset=8), If(UnaryOp(Not(), Name('line', Load(), lineno=206, col_offset=15), lineno=206, col_offset=11), [Raise(Name('EOFError', Load(), lineno=206, col_offset=27), None, None, lineno=206, col_offset=21)], [], lineno=206, col_offset=8), If(Compare(Subscript(Name('line', Load(), lineno=207, col_offset=11), Slice(Num(-2, lineno=207, col_offset=17), None, None), Load(), lineno=207, col_offset=11), [Eq()], [Name('CRLF', Load(), lineno=207, col_offset=24)], lineno=207, col_offset=11), [Assign([Name('line', Store(), lineno=207, col_offset=30)], Subscript(Name('line', Load(), lineno=207, col_offset=37), Slice(None, Num(-2, lineno=207, col_offset=44), None), Load(), lineno=207, col_offset=37), lineno=207, col_offset=30)], [If(Compare(Subscript(Name('line', Load(), lineno=208, col_offset=13), Slice(Num(-1, lineno=208, col_offset=19), None, None), Load(), lineno=208, col_offset=13), [In()], [Name('CRLF', Load(), lineno=208, col_offset=26)], lineno=208, col_offset=13), [Assign([Name('line', Store(), lineno=208, col_offset=32)], Subscript(Name('line', Load(), lineno=208, col_offset=39), Slice(None, Num(-1, lineno=208, col_offset=46), None), Load(), lineno=208, col_offset=39), lineno=208, col_offset=32)], [], lineno=208, col_offset=13)], lineno=207, col_offset=8), Return(Name('line', Load(), lineno=209, col_offset=15), lineno=209, col_offset=8)], [], lineno=200, col_offset=4), FunctionDef('getresp', arguments([Name('self', Param(), lineno=211, col_offset=16)], None, None, []), [Expr(Str('Internal: get a response from the server.\n        Raise various errors if the response indicates an error.', lineno=213, col_offset=-1), lineno=213, col_offset=-1), Assign([Name('resp', Store(), lineno=214, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=214, col_offset=15), 'getline', Load(), lineno=214, col_offset=15), [], [], None, None, lineno=214, col_offset=15), lineno=214, col_offset=8), If(Attribute(Name('self', Load(), lineno=215, col_offset=11), 'debugging', Load(), lineno=215, col_offset=11), [Print(None, [Str('*resp*', lineno=215, col_offset=33), Call(Name('repr', Load(), lineno=215, col_offset=43), [Name('resp', Load(), lineno=215, col_offset=48)], [], None, None, lineno=215, col_offset=43)], True, lineno=215, col_offset=27)], [], lineno=215, col_offset=8), Assign([Name('c', Store(), lineno=216, col_offset=8)], Subscript(Name('resp', Load(), lineno=216, col_offset=12), Slice(None, Num(1, lineno=216, col_offset=18), None), Load(), lineno=216, col_offset=12), lineno=216, col_offset=8), If(Compare(Name('c', Load(), lineno=217, col_offset=11), [Eq()], [Str('4', lineno=217, col_offset=16)], lineno=217, col_offset=11), [Raise(Call(Name('NNTPTemporaryError', Load(), lineno=218, col_offset=18), [Name('resp', Load(), lineno=218, col_offset=37)], [], None, None, lineno=218, col_offset=18), None, None, lineno=218, col_offset=12)], [], lineno=217, col_offset=8), If(Compare(Name('c', Load(), lineno=219, col_offset=11), [Eq()], [Str('5', lineno=219, col_offset=16)], lineno=219, col_offset=11), [Raise(Call(Name('NNTPPermanentError', Load(), lineno=220, col_offset=18), [Name('resp', Load(), lineno=220, col_offset=37)], [], None, None, lineno=220, col_offset=18), None, None, lineno=220, col_offset=12)], [], lineno=219, col_offset=8), If(Compare(Name('c', Load(), lineno=221, col_offset=11), [NotIn()], [Str('123', lineno=221, col_offset=20)], lineno=221, col_offset=11), [Raise(Call(Name('NNTPProtocolError', Load(), lineno=222, col_offset=18), [Name('resp', Load(), lineno=222, col_offset=36)], [], None, None, lineno=222, col_offset=18), None, None, lineno=222, col_offset=12)], [], lineno=221, col_offset=8), Return(Name('resp', Load(), lineno=223, col_offset=15), lineno=223, col_offset=8)], [], lineno=211, col_offset=4), FunctionDef('getlongresp', arguments([Name('self', Param(), lineno=225, col_offset=20), Name('file', Param(), lineno=225, col_offset=26)], None, None, [Name('None', Load(), lineno=225, col_offset=31)]), [Expr(Str('Internal: get a response plus following text from the server.\n        Raise various errors if the response indicates an error.', lineno=227, col_offset=-1), lineno=227, col_offset=-1), Assign([Name('openedFile', Store(), lineno=229, col_offset=8)], Name('None', Load(), lineno=229, col_offset=21), lineno=229, col_offset=8), TryFinally([If(Call(Name('isinstance', Load(), lineno=232, col_offset=15), [Name('file', Load(), lineno=232, col_offset=26), Name('str', Load(), lineno=232, col_offset=32)], [], None, None, lineno=232, col_offset=15), [Assign([Name('openedFile', Store(), lineno=233, col_offset=16), Name('file', Store(), lineno=233, col_offset=29)], Call(Name('open', Load(), lineno=233, col_offset=36), [Name('file', Load(), lineno=233, col_offset=41), Str('w', lineno=233, col_offset=47)], [], None, None, lineno=233, col_offset=36), lineno=233, col_offset=16)], [], lineno=232, col_offset=12), Assign([Name('resp', Store(), lineno=235, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=235, col_offset=19), 'getresp', Load(), lineno=235, col_offset=19), [], [], None, None, lineno=235, col_offset=19), lineno=235, col_offset=12), If(Compare(Subscript(Name('resp', Load(), lineno=236, col_offset=15), Slice(None, Num(3, lineno=236, col_offset=21), None), Load(), lineno=236, col_offset=15), [NotIn()], [Name('LONGRESP', Load(), lineno=236, col_offset=31)], lineno=236, col_offset=15), [Raise(Call(Name('NNTPReplyError', Load(), lineno=237, col_offset=22), [Name('resp', Load(), lineno=237, col_offset=37)], [], None, None, lineno=237, col_offset=22), None, None, lineno=237, col_offset=16)], [], lineno=236, col_offset=12), Assign([Name('list', Store(), lineno=238, col_offset=12)], List([], Load(), lineno=238, col_offset=19), lineno=238, col_offset=12), While(Num(1, lineno=239, col_offset=18), [Assign([Name('line', Store(), lineno=240, col_offset=16)], Call(Attribute(Name('self', Load(), lineno=240, col_offset=23), 'getline', Load(), lineno=240, col_offset=23), [], [], None, None, lineno=240, col_offset=23), lineno=240, col_offset=16), If(Compare(Name('line', Load(), lineno=241, col_offset=19), [Eq()], [Str('.', lineno=241, col_offset=27)], lineno=241, col_offset=19), [Break( lineno=242, col_offset=20)], [], lineno=241, col_offset=16), If(Compare(Subscript(Name('line', Load(), lineno=243, col_offset=19), Slice(None, Num(2, lineno=243, col_offset=25), None), Load(), lineno=243, col_offset=19), [Eq()], [Str('..', lineno=243, col_offset=31)], lineno=243, col_offset=19), [Assign([Name('line', Store(), lineno=244, col_offset=20)], Subscript(Name('line', Load(), lineno=244, col_offset=27), Slice(Num(1, lineno=244, col_offset=32), None, None), Load(), lineno=244, col_offset=27), lineno=244, col_offset=20)], [], lineno=243, col_offset=16), If(Name('file', Load(), lineno=245, col_offset=19), [Expr(Call(Attribute(Name('file', Load(), lineno=246, col_offset=20), 'write', Load(), lineno=246, col_offset=20), [BinOp(Name('line', Load(), lineno=246, col_offset=31), Add(), Str('\n', lineno=246, col_offset=38), lineno=246, col_offset=31)], [], None, None, lineno=246, col_offset=20), lineno=246, col_offset=20)], [Expr(Call(Attribute(Name('list', Load(), lineno=248, col_offset=20), 'append', Load(), lineno=248, col_offset=20), [Name('line', Load(), lineno=248, col_offset=32)], [], None, None, lineno=248, col_offset=20), lineno=248, col_offset=20)], lineno=245, col_offset=16)], [], lineno=239, col_offset=12)], [If(Name('openedFile', Load(), lineno=251, col_offset=15), [Expr(Call(Attribute(Name('openedFile', Load(), lineno=252, col_offset=16), 'close', Load(), lineno=252, col_offset=16), [], [], None, None, lineno=252, col_offset=16), lineno=252, col_offset=16)], [], lineno=251, col_offset=12)], lineno=230, col_offset=8), Return(Tuple([Name('resp', Load(), lineno=254, col_offset=15), Name('list', Load(), lineno=254, col_offset=21)], Load(), lineno=254, col_offset=15), lineno=254, col_offset=8)], [], lineno=225, col_offset=4), FunctionDef('shortcmd', arguments([Name('self', Param(), lineno=256, col_offset=17), Name('line', Param(), lineno=256, col_offset=23)], None, None, []), [Expr(Str('Internal: send a command and get the response.', lineno=257, col_offset=8), lineno=257, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=258, col_offset=8), 'putcmd', Load(), lineno=258, col_offset=8), [Name('line', Load(), lineno=258, col_offset=20)], [], None, None, lineno=258, col_offset=8), lineno=258, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=259, col_offset=15), 'getresp', Load(), lineno=259, col_offset=15), [], [], None, None, lineno=259, col_offset=15), lineno=259, col_offset=8)], [], lineno=256, col_offset=4), FunctionDef('longcmd', arguments([Name('self', Param(), lineno=261, col_offset=16), Name('line', Param(), lineno=261, col_offset=22), Name('file', Param(), lineno=261, col_offset=28)], None, None, [Name('None', Load(), lineno=261, col_offset=33)]), [Expr(Str('Internal: send a command and get the response plus following text.', lineno=262, col_offset=8), lineno=262, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=263, col_offset=8), 'putcmd', Load(), lineno=263, col_offset=8), [Name('line', Load(), lineno=263, col_offset=20)], [], None, None, lineno=263, col_offset=8), lineno=263, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=264, col_offset=15), 'getlongresp', Load(), lineno=264, col_offset=15), [Name('file', Load(), lineno=264, col_offset=32)], [], None, None, lineno=264, col_offset=15), lineno=264, col_offset=8)], [], lineno=261, col_offset=4), FunctionDef('newgroups', arguments([Name('self', Param(), lineno=266, col_offset=18), Name('date', Param(), lineno=266, col_offset=24), Name('time', Param(), lineno=266, col_offset=30), Name('file', Param(), lineno=266, col_offset=36)], None, None, [Name('None', Load(), lineno=266, col_offset=41)]), [Expr(Str("Process a NEWGROUPS command.  Arguments:\n        - date: string 'yymmdd' indicating the date\n        - time: string 'hhmmss' indicating the time\n        Return:\n        - resp: server response if successful\n        - list: list of newsgroup names", lineno=272, col_offset=-1), lineno=272, col_offset=-1), Return(Call(Attribute(Name('self', Load(), lineno=274, col_offset=15), 'longcmd', Load(), lineno=274, col_offset=15), [BinOp(BinOp(BinOp(Str('NEWGROUPS ', lineno=274, col_offset=28), Add(), Name('date', Load(), lineno=274, col_offset=43), lineno=274, col_offset=28), Add(), Str(' ', lineno=274, col_offset=50), lineno=274, col_offset=48), Add(), Name('time', Load(), lineno=274, col_offset=56), lineno=274, col_offset=54), Name('file', Load(), lineno=274, col_offset=62)], [], None, None, lineno=274, col_offset=15), lineno=274, col_offset=8)], [], lineno=266, col_offset=4), FunctionDef('newnews', arguments([Name('self', Param(), lineno=276, col_offset=16), Name('group', Param(), lineno=276, col_offset=22), Name('date', Param(), lineno=276, col_offset=29), Name('time', Param(), lineno=276, col_offset=35), Name('file', Param(), lineno=276, col_offset=41)], None, None, [Name('None', Load(), lineno=276, col_offset=46)]), [Expr(Str("Process a NEWNEWS command.  Arguments:\n        - group: group name or '*'\n        - date: string 'yymmdd' indicating the date\n        - time: string 'hhmmss' indicating the time\n        Return:\n        - resp: server response if successful\n        - list: list of message ids", lineno=283, col_offset=-1), lineno=283, col_offset=-1), Assign([Name('cmd', Store(), lineno=285, col_offset=8)], BinOp(BinOp(BinOp(BinOp(BinOp(Str('NEWNEWS ', lineno=285, col_offset=14), Add(), Name('group', Load(), lineno=285, col_offset=27), lineno=285, col_offset=14), Add(), Str(' ', lineno=285, col_offset=35), lineno=285, col_offset=33), Add(), Name('date', Load(), lineno=285, col_offset=41), lineno=285, col_offset=39), Add(), Str(' ', lineno=285, col_offset=48), lineno=285, col_offset=46), Add(), Name('time', Load(), lineno=285, col_offset=54), lineno=285, col_offset=52), lineno=285, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=286, col_offset=15), 'longcmd', Load(), lineno=286, col_offset=15), [Name('cmd', Load(), lineno=286, col_offset=28), Name('file', Load(), lineno=286, col_offset=33)], [], None, None, lineno=286, col_offset=15), lineno=286, col_offset=8)], [], lineno=276, col_offset=4), FunctionDef('list', arguments([Name('self', Param(), lineno=288, col_offset=13), Name('file', Param(), lineno=288, col_offset=19)], None, None, [Name('None', Load(), lineno=288, col_offset=24)]), [Expr(Str('Process a LIST command.  Return:\n        - resp: server response if successful\n        - list: list of (group, last, first, flag) (strings)', lineno=291, col_offset=-1), lineno=291, col_offset=-1), Assign([Tuple([Name('resp', Store(), lineno=293, col_offset=8), Name('list', Store(), lineno=293, col_offset=14)], Store(), lineno=293, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=293, col_offset=21), 'longcmd', Load(), lineno=293, col_offset=21), [Str('LIST', lineno=293, col_offset=34), Name('file', Load(), lineno=293, col_offset=42)], [], None, None, lineno=293, col_offset=21), lineno=293, col_offset=8), For(Name('i', Store(), lineno=294, col_offset=12), Call(Name('range', Load(), lineno=294, col_offset=17), [Call(Name('len', Load(), lineno=294, col_offset=23), [Name('list', Load(), lineno=294, col_offset=27)], [], None, None, lineno=294, col_offset=23)], [], None, None, lineno=294, col_offset=17), [Assign([Subscript(Name('list', Load(), lineno=296, col_offset=12), Index(Name('i', Load(), lineno=296, col_offset=17)), Store(), lineno=296, col_offset=12)], Call(Name('tuple', Load(), lineno=296, col_offset=22), [Call(Attribute(Subscript(Name('list', Load(), lineno=296, col_offset=28), Index(Name('i', Load(), lineno=296, col_offset=33)), Load(), lineno=296, col_offset=28), 'split', Load(), lineno=296, col_offset=28), [], [], None, None, lineno=296, col_offset=28)], [], None, None, lineno=296, col_offset=22), lineno=296, col_offset=12)], [], lineno=294, col_offset=8), Return(Tuple([Name('resp', Load(), lineno=297, col_offset=15), Name('list', Load(), lineno=297, col_offset=21)], Load(), lineno=297, col_offset=15), lineno=297, col_offset=8)], [], lineno=288, col_offset=4), FunctionDef('description', arguments([Name('self', Param(), lineno=299, col_offset=20), Name('group', Param(), lineno=299, col_offset=26)], None, None, []), [Expr(Str("Get a description for a single group.  If more than one\n        group matches ('group' is a pattern), return the first.  If no\n        group matches, return an empty string.\n\n        This elides the response code from the server, since it can\n        only be '215' or '285' (for xgtitle) anyway.  If the response\n        code is needed, use the 'descriptions' method.\n\n        NOTE: This neither checks for a wildcard in 'group' nor does\n        it check whether the group actually exists.", lineno=310, col_offset=-1), lineno=310, col_offset=-1), Assign([Tuple([Name('resp', Store(), lineno=312, col_offset=8), Name('lines', Store(), lineno=312, col_offset=14)], Store(), lineno=312, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=312, col_offset=22), 'descriptions', Load(), lineno=312, col_offset=22), [Name('group', Load(), lineno=312, col_offset=40)], [], None, None, lineno=312, col_offset=22), lineno=312, col_offset=8), If(Compare(Call(Name('len', Load(), lineno=313, col_offset=11), [Name('lines', Load(), lineno=313, col_offset=15)], [], None, None, lineno=313, col_offset=11), [Eq()], [Num(0, lineno=313, col_offset=25)], lineno=313, col_offset=11), [Return(Str('', lineno=314, col_offset=19), lineno=314, col_offset=12)], [Return(Subscript(Subscript(Name('lines', Load(), lineno=316, col_offset=19), Index(Num(0, lineno=316, col_offset=25)), Load(), lineno=316, col_offset=19), Index(Num(1, lineno=316, col_offset=28)), Load(), lineno=316, col_offset=19), lineno=316, col_offset=12)], lineno=313, col_offset=8)], [], lineno=299, col_offset=4), FunctionDef('descriptions', arguments([Name('self', Param(), lineno=318, col_offset=21), Name('group_pattern', Param(), lineno=318, col_offset=27)], None, None, []), [Expr(Str('Get descriptions for a range of groups.', lineno=319, col_offset=8), lineno=319, col_offset=8), Assign([Name('line_pat', Store(), lineno=320, col_offset=8)], Call(Attribute(Name('re', Load(), lineno=320, col_offset=19), 'compile', Load(), lineno=320, col_offset=19), [Str('^(?P<group>[^ \t]+)[ \t]+(.*)$', lineno=320, col_offset=30)], [], None, None, lineno=320, col_offset=19), lineno=320, col_offset=8), Assign([Tuple([Name('resp', Store(), lineno=322, col_offset=8), Name('raw_lines', Store(), lineno=322, col_offset=14)], Store(), lineno=322, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=322, col_offset=26), 'longcmd', Load(), lineno=322, col_offset=26), [BinOp(Str('LIST NEWSGROUPS ', lineno=322, col_offset=39), Add(), Name('group_pattern', Load(), lineno=322, col_offset=60), lineno=322, col_offset=39)], [], None, None, lineno=322, col_offset=26), lineno=322, col_offset=8), If(Compare(Subscript(Name('resp', Load(), lineno=323, col_offset=11), Slice(None, Num(3, lineno=323, col_offset=17), None), Load(), lineno=323, col_offset=11), [NotEq()], [Str('215', lineno=323, col_offset=23)], lineno=323, col_offset=11), [Assign([Tuple([Name('resp', Store(), lineno=327, col_offset=12), Name('raw_lines', Store(), lineno=327, col_offset=18)], Store(), lineno=327, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=327, col_offset=30), 'longcmd', Load(), lineno=327, col_offset=30), [BinOp(Str('XGTITLE ', lineno=327, col_offset=43), Add(), Name('group_pattern', Load(), lineno=327, col_offset=56), lineno=327, col_offset=43)], [], None, None, lineno=327, col_offset=30), lineno=327, col_offset=12)], [], lineno=323, col_offset=8), Assign([Name('lines', Store(), lineno=328, col_offset=8)], List([], Load(), lineno=328, col_offset=16), lineno=328, col_offset=8), For(Name('raw_line', Store(), lineno=329, col_offset=12), Name('raw_lines', Load(), lineno=329, col_offset=24), [Assign([Name('match', Store(), lineno=330, col_offset=12)], Call(Attribute(Name('line_pat', Load(), lineno=330, col_offset=20), 'search', Load(), lineno=330, col_offset=20), [Call(Attribute(Name('raw_line', Load(), lineno=330, col_offset=36), 'strip', Load(), lineno=330, col_offset=36), [], [], None, None, lineno=330, col_offset=36)], [], None, None, lineno=330, col_offset=20), lineno=330, col_offset=12), If(Name('match', Load(), lineno=331, col_offset=15), [Expr(Call(Attribute(Name('lines', Load(), lineno=332, col_offset=16), 'append', Load(), lineno=332, col_offset=16), [Call(Attribute(Name('match', Load(), lineno=332, col_offset=29), 'group', Load(), lineno=332, col_offset=29), [Num(1, lineno=332, col_offset=41), Num(2, lineno=332, col_offset=44)], [], None, None, lineno=332, col_offset=29)], [], None, None, lineno=332, col_offset=16), lineno=332, col_offset=16)], [], lineno=331, col_offset=12)], [], lineno=329, col_offset=8), Return(Tuple([Name('resp', Load(), lineno=333, col_offset=15), Name('lines', Load(), lineno=333, col_offset=21)], Load(), lineno=333, col_offset=15), lineno=333, col_offset=8)], [], lineno=318, col_offset=4), FunctionDef('group', arguments([Name('self', Param(), lineno=335, col_offset=14), Name('name', Param(), lineno=335, col_offset=20)], None, None, []), [Expr(Str('Process a GROUP command.  Argument:\n        - group: the group name\n        Returns:\n        - resp: server response if successful\n        - count: number of articles (string)\n        - first: first article number (string)\n        - last: last article number (string)\n        - name: the group name', lineno=343, col_offset=-1), lineno=343, col_offset=-1), Assign([Name('resp', Store(), lineno=345, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=345, col_offset=15), 'shortcmd', Load(), lineno=345, col_offset=15), [BinOp(Str('GROUP ', lineno=345, col_offset=29), Add(), Name('name', Load(), lineno=345, col_offset=40), lineno=345, col_offset=29)], [], None, None, lineno=345, col_offset=15), lineno=345, col_offset=8), If(Compare(Subscript(Name('resp', Load(), lineno=346, col_offset=11), Slice(None, Num(3, lineno=346, col_offset=17), None), Load(), lineno=346, col_offset=11), [NotEq()], [Str('211', lineno=346, col_offset=23)], lineno=346, col_offset=11), [Raise(Call(Name('NNTPReplyError', Load(), lineno=347, col_offset=18), [Name('resp', Load(), lineno=347, col_offset=33)], [], None, None, lineno=347, col_offset=18), None, None, lineno=347, col_offset=12)], [], lineno=346, col_offset=8), Assign([Name('words', Store(), lineno=348, col_offset=8)], Call(Attribute(Name('resp', Load(), lineno=348, col_offset=16), 'split', Load(), lineno=348, col_offset=16), [], [], None, None, lineno=348, col_offset=16), lineno=348, col_offset=8), Assign([Name('count', Store(), lineno=349, col_offset=8), Name('first', Store(), lineno=349, col_offset=16), Name('last', Store(), lineno=349, col_offset=24)], Num(0, lineno=349, col_offset=31), lineno=349, col_offset=8), Assign([Name('n', Store(), lineno=350, col_offset=8)], Call(Name('len', Load(), lineno=350, col_offset=12), [Name('words', Load(), lineno=350, col_offset=16)], [], None, None, lineno=350, col_offset=12), lineno=350, col_offset=8), If(Compare(Name('n', Load(), lineno=351, col_offset=11), [Gt()], [Num(1, lineno=351, col_offset=15)], lineno=351, col_offset=11), [Assign([Name('count', Store(), lineno=352, col_offset=12)], Subscript(Name('words', Load(), lineno=352, col_offset=20), Index(Num(1, lineno=352, col_offset=26)), Load(), lineno=352, col_offset=20), lineno=352, col_offset=12), If(Compare(Name('n', Load(), lineno=353, col_offset=15), [Gt()], [Num(2, lineno=353, col_offset=19)], lineno=353, col_offset=15), [Assign([Name('first', Store(), lineno=354, col_offset=16)], Subscript(Name('words', Load(), lineno=354, col_offset=24), Index(Num(2, lineno=354, col_offset=30)), Load(), lineno=354, col_offset=24), lineno=354, col_offset=16), If(Compare(Name('n', Load(), lineno=355, col_offset=19), [Gt()], [Num(3, lineno=355, col_offset=23)], lineno=355, col_offset=19), [Assign([Name('last', Store(), lineno=356, col_offset=20)], Subscript(Name('words', Load(), lineno=356, col_offset=27), Index(Num(3, lineno=356, col_offset=33)), Load(), lineno=356, col_offset=27), lineno=356, col_offset=20), If(Compare(Name('n', Load(), lineno=357, col_offset=23), [Gt()], [Num(4, lineno=357, col_offset=27)], lineno=357, col_offset=23), [Assign([Name('name', Store(), lineno=358, col_offset=24)], Call(Attribute(Subscript(Name('words', Load(), lineno=358, col_offset=31), Index(Num(4, lineno=358, col_offset=37)), Load(), lineno=358, col_offset=31), 'lower', Load(), lineno=358, col_offset=31), [], [], None, None, lineno=358, col_offset=31), lineno=358, col_offset=24)], [], lineno=357, col_offset=20)], [], lineno=355, col_offset=16)], [], lineno=353, col_offset=12)], [], lineno=351, col_offset=8), Return(Tuple([Name('resp', Load(), lineno=359, col_offset=15), Name('count', Load(), lineno=359, col_offset=21), Name('first', Load(), lineno=359, col_offset=28), Name('last', Load(), lineno=359, col_offset=35), Name('name', Load(), lineno=359, col_offset=41)], Load(), lineno=359, col_offset=15), lineno=359, col_offset=8)], [], lineno=335, col_offset=4), FunctionDef('help', arguments([Name('self', Param(), lineno=361, col_offset=13), Name('file', Param(), lineno=361, col_offset=19)], None, None, [Name('None', Load(), lineno=361, col_offset=24)]), [Expr(Str('Process a HELP command.  Returns:\n        - resp: server response if successful\n        - list: list of strings', lineno=364, col_offset=-1), lineno=364, col_offset=-1), Return(Call(Attribute(Name('self', Load(), lineno=366, col_offset=15), 'longcmd', Load(), lineno=366, col_offset=15), [Str('HELP', lineno=366, col_offset=28), Name('file', Load(), lineno=366, col_offset=35)], [], None, None, lineno=366, col_offset=15), lineno=366, col_offset=8)], [], lineno=361, col_offset=4), FunctionDef('statparse', arguments([Name('self', Param(), lineno=368, col_offset=18), Name('resp', Param(), lineno=368, col_offset=24)], None, None, []), [Expr(Str('Internal: parse the response of a STAT, NEXT or LAST command.', lineno=369, col_offset=8), lineno=369, col_offset=8), If(Compare(Subscript(Name('resp', Load(), lineno=370, col_offset=11), Slice(None, Num(2, lineno=370, col_offset=17), None), Load(), lineno=370, col_offset=11), [NotEq()], [Str('22', lineno=370, col_offset=23)], lineno=370, col_offset=11), [Raise(Call(Name('NNTPReplyError', Load(), lineno=371, col_offset=18), [Name('resp', Load(), lineno=371, col_offset=33)], [], None, None, lineno=371, col_offset=18), None, None, lineno=371, col_offset=12)], [], lineno=370, col_offset=8), Assign([Name('words', Store(), lineno=372, col_offset=8)], Call(Attribute(Name('resp', Load(), lineno=372, col_offset=16), 'split', Load(), lineno=372, col_offset=16), [], [], None, None, lineno=372, col_offset=16), lineno=372, col_offset=8), Assign([Name('nr', Store(), lineno=373, col_offset=8)], Num(0, lineno=373, col_offset=13), lineno=373, col_offset=8), Assign([Name('id', Store(), lineno=374, col_offset=8)], Str('', lineno=374, col_offset=13), lineno=374, col_offset=8), Assign([Name('n', Store(), lineno=375, col_offset=8)], Call(Name('len', Load(), lineno=375, col_offset=12), [Name('words', Load(), lineno=375, col_offset=16)], [], None, None, lineno=375, col_offset=12), lineno=375, col_offset=8), If(Compare(Name('n', Load(), lineno=376, col_offset=11), [Gt()], [Num(1, lineno=376, col_offset=15)], lineno=376, col_offset=11), [Assign([Name('nr', Store(), lineno=377, col_offset=12)], Subscript(Name('words', Load(), lineno=377, col_offset=17), Index(Num(1, lineno=377, col_offset=23)), Load(), lineno=377, col_offset=17), lineno=377, col_offset=12), If(Compare(Name('n', Load(), lineno=378, col_offset=15), [Gt()], [Num(2, lineno=378, col_offset=19)], lineno=378, col_offset=15), [Assign([Name('id', Store(), lineno=379, col_offset=16)], Subscript(Name('words', Load(), lineno=379, col_offset=21), Index(Num(2, lineno=379, col_offset=27)), Load(), lineno=379, col_offset=21), lineno=379, col_offset=16)], [], lineno=378, col_offset=12)], [], lineno=376, col_offset=8), Return(Tuple([Name('resp', Load(), lineno=380, col_offset=15), Name('nr', Load(), lineno=380, col_offset=21), Name('id', Load(), lineno=380, col_offset=25)], Load(), lineno=380, col_offset=15), lineno=380, col_offset=8)], [], lineno=368, col_offset=4), FunctionDef('statcmd', arguments([Name('self', Param(), lineno=382, col_offset=16), Name('line', Param(), lineno=382, col_offset=22)], None, None, []), [Expr(Str('Internal: process a STAT, NEXT or LAST command.', lineno=383, col_offset=8), lineno=383, col_offset=8), Assign([Name('resp', Store(), lineno=384, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=384, col_offset=15), 'shortcmd', Load(), lineno=384, col_offset=15), [Name('line', Load(), lineno=384, col_offset=29)], [], None, None, lineno=384, col_offset=15), lineno=384, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=385, col_offset=15), 'statparse', Load(), lineno=385, col_offset=15), [Name('resp', Load(), lineno=385, col_offset=30)], [], None, None, lineno=385, col_offset=15), lineno=385, col_offset=8)], [], lineno=382, col_offset=4), FunctionDef('stat', arguments([Name('self', Param(), lineno=387, col_offset=13), Name('id', Param(), lineno=387, col_offset=19)], None, None, []), [Expr(Str('Process a STAT command.  Argument:\n        - id: article number or message id\n        Returns:\n        - resp: server response if successful\n        - nr:   the article number\n        - id:   the message id', lineno=393, col_offset=-1), lineno=393, col_offset=-1), Return(Call(Attribute(Name('self', Load(), lineno=395, col_offset=15), 'statcmd', Load(), lineno=395, col_offset=15), [BinOp(Str('STAT ', lineno=395, col_offset=28), Add(), Name('id', Load(), lineno=395, col_offset=38), lineno=395, col_offset=28)], [], None, None, lineno=395, col_offset=15), lineno=395, col_offset=8)], [], lineno=387, col_offset=4), FunctionDef('next', arguments([Name('self', Param(), lineno=397, col_offset=13)], None, None, []), [Expr(Str('Process a NEXT command.  No arguments.  Return as for STAT.', lineno=398, col_offset=8), lineno=398, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=399, col_offset=15), 'statcmd', Load(), lineno=399, col_offset=15), [Str('NEXT', lineno=399, col_offset=28)], [], None, None, lineno=399, col_offset=15), lineno=399, col_offset=8)], [], lineno=397, col_offset=4), FunctionDef('last', arguments([Name('self', Param(), lineno=401, col_offset=13)], None, None, []), [Expr(Str('Process a LAST command.  No arguments.  Return as for STAT.', lineno=402, col_offset=8), lineno=402, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=403, col_offset=15), 'statcmd', Load(), lineno=403, col_offset=15), [Str('LAST', lineno=403, col_offset=28)], [], None, None, lineno=403, col_offset=15), lineno=403, col_offset=8)], [], lineno=401, col_offset=4), FunctionDef('artcmd', arguments([Name('self', Param(), lineno=405, col_offset=15), Name('line', Param(), lineno=405, col_offset=21), Name('file', Param(), lineno=405, col_offset=27)], None, None, [Name('None', Load(), lineno=405, col_offset=32)]), [Expr(Str('Internal: process a HEAD, BODY or ARTICLE command.', lineno=406, col_offset=8), lineno=406, col_offset=8), Assign([Tuple([Name('resp', Store(), lineno=407, col_offset=8), Name('list', Store(), lineno=407, col_offset=14)], Store(), lineno=407, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=407, col_offset=21), 'longcmd', Load(), lineno=407, col_offset=21), [Name('line', Load(), lineno=407, col_offset=34), Name('file', Load(), lineno=407, col_offset=40)], [], None, None, lineno=407, col_offset=21), lineno=407, col_offset=8), Assign([Tuple([Name('resp', Store(), lineno=408, col_offset=8), Name('nr', Store(), lineno=408, col_offset=14), Name('id', Store(), lineno=408, col_offset=18)], Store(), lineno=408, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=408, col_offset=23), 'statparse', Load(), lineno=408, col_offset=23), [Name('resp', Load(), lineno=408, col_offset=38)], [], None, None, lineno=408, col_offset=23), lineno=408, col_offset=8), Return(Tuple([Name('resp', Load(), lineno=409, col_offset=15), Name('nr', Load(), lineno=409, col_offset=21), Name('id', Load(), lineno=409, col_offset=25), Name('list', Load(), lineno=409, col_offset=29)], Load(), lineno=409, col_offset=15), lineno=409, col_offset=8)], [], lineno=405, col_offset=4), FunctionDef('head', arguments([Name('self', Param(), lineno=411, col_offset=13), Name('id', Param(), lineno=411, col_offset=19)], None, None, []), [Expr(Str("Process a HEAD command.  Argument:\n        - id: article number or message id\n        Returns:\n        - resp: server response if successful\n        - nr: article number\n        - id: message id\n        - list: the lines of the article's header", lineno=418, col_offset=-1), lineno=418, col_offset=-1), Return(Call(Attribute(Name('self', Load(), lineno=420, col_offset=15), 'artcmd', Load(), lineno=420, col_offset=15), [BinOp(Str('HEAD ', lineno=420, col_offset=27), Add(), Name('id', Load(), lineno=420, col_offset=37), lineno=420, col_offset=27)], [], None, None, lineno=420, col_offset=15), lineno=420, col_offset=8)], [], lineno=411, col_offset=4), FunctionDef('body', arguments([Name('self', Param(), lineno=422, col_offset=13), Name('id', Param(), lineno=422, col_offset=19), Name('file', Param(), lineno=422, col_offset=23)], None, None, [Name('None', Load(), lineno=422, col_offset=28)]), [Expr(Str("Process a BODY command.  Argument:\n        - id: article number or message id\n        - file: Filename string or file object to store the article in\n        Returns:\n        - resp: server response if successful\n        - nr: article number\n        - id: message id\n        - list: the lines of the article's body or an empty list\n                if file was used", lineno=431, col_offset=-1), lineno=431, col_offset=-1), Return(Call(Attribute(Name('self', Load(), lineno=433, col_offset=15), 'artcmd', Load(), lineno=433, col_offset=15), [BinOp(Str('BODY ', lineno=433, col_offset=27), Add(), Name('id', Load(), lineno=433, col_offset=37), lineno=433, col_offset=27), Name('file', Load(), lineno=433, col_offset=41)], [], None, None, lineno=433, col_offset=15), lineno=433, col_offset=8)], [], lineno=422, col_offset=4), FunctionDef('article', arguments([Name('self', Param(), lineno=435, col_offset=16), Name('id', Param(), lineno=435, col_offset=22)], None, None, []), [Expr(Str('Process an ARTICLE command.  Argument:\n        - id: article number or message id\n        Returns:\n        - resp: server response if successful\n        - nr: article number\n        - id: message id\n        - list: the lines of the article', lineno=442, col_offset=-1), lineno=442, col_offset=-1), Return(Call(Attribute(Name('self', Load(), lineno=444, col_offset=15), 'artcmd', Load(), lineno=444, col_offset=15), [BinOp(Str('ARTICLE ', lineno=444, col_offset=27), Add(), Name('id', Load(), lineno=444, col_offset=40), lineno=444, col_offset=27)], [], None, None, lineno=444, col_offset=15), lineno=444, col_offset=8)], [], lineno=435, col_offset=4), FunctionDef('slave', arguments([Name('self', Param(), lineno=446, col_offset=14)], None, None, []), [Expr(Str('Process a SLAVE command.  Returns:\n        - resp: server response if successful', lineno=448, col_offset=-1), lineno=448, col_offset=-1), Return(Call(Attribute(Name('self', Load(), lineno=450, col_offset=15), 'shortcmd', Load(), lineno=450, col_offset=15), [Str('SLAVE', lineno=450, col_offset=29)], [], None, None, lineno=450, col_offset=15), lineno=450, col_offset=8)], [], lineno=446, col_offset=4), FunctionDef('xhdr', arguments([Name('self', Param(), lineno=452, col_offset=13), Name('hdr', Param(), lineno=452, col_offset=19), Name('str', Param(), lineno=452, col_offset=24), Name('file', Param(), lineno=452, col_offset=29)], None, None, [Name('None', Load(), lineno=452, col_offset=34)]), [Expr(Str("Process an XHDR command (optional server extension).  Arguments:\n        - hdr: the header type (e.g. 'subject')\n        - str: an article nr, a message id, or a range nr1-nr2\n        Returns:\n        - resp: server response if successful\n        - list: list of (nr, value) strings", lineno=458, col_offset=-1), lineno=458, col_offset=-1), Assign([Name('pat', Store(), lineno=460, col_offset=8)], Call(Attribute(Name('re', Load(), lineno=460, col_offset=14), 'compile', Load(), lineno=460, col_offset=14), [Str('^([0-9]+) ?(.*)\n?', lineno=460, col_offset=25)], [], None, None, lineno=460, col_offset=14), lineno=460, col_offset=8), Assign([Tuple([Name('resp', Store(), lineno=461, col_offset=8), Name('lines', Store(), lineno=461, col_offset=14)], Store(), lineno=461, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=461, col_offset=22), 'longcmd', Load(), lineno=461, col_offset=22), [BinOp(BinOp(BinOp(Str('XHDR ', lineno=461, col_offset=35), Add(), Name('hdr', Load(), lineno=461, col_offset=45), lineno=461, col_offset=35), Add(), Str(' ', lineno=461, col_offset=51), lineno=461, col_offset=49), Add(), Name('str', Load(), lineno=461, col_offset=57), lineno=461, col_offset=55), Name('file', Load(), lineno=461, col_offset=62)], [], None, None, lineno=461, col_offset=22), lineno=461, col_offset=8), For(Name('i', Store(), lineno=462, col_offset=12), Call(Name('range', Load(), lineno=462, col_offset=17), [Call(Name('len', Load(), lineno=462, col_offset=23), [Name('lines', Load(), lineno=462, col_offset=27)], [], None, None, lineno=462, col_offset=23)], [], None, None, lineno=462, col_offset=17), [Assign([Name('line', Store(), lineno=463, col_offset=12)], Subscript(Name('lines', Load(), lineno=463, col_offset=19), Index(Name('i', Load(), lineno=463, col_offset=25)), Load(), lineno=463, col_offset=19), lineno=463, col_offset=12), Assign([Name('m', Store(), lineno=464, col_offset=12)], Call(Attribute(Name('pat', Load(), lineno=464, col_offset=16), 'match', Load(), lineno=464, col_offset=16), [Name('line', Load(), lineno=464, col_offset=26)], [], None, None, lineno=464, col_offset=16), lineno=464, col_offset=12), If(Name('m', Load(), lineno=465, col_offset=15), [Assign([Subscript(Name('lines', Load(), lineno=466, col_offset=16), Index(Name('i', Load(), lineno=466, col_offset=22)), Store(), lineno=466, col_offset=16)], Call(Attribute(Name('m', Load(), lineno=466, col_offset=27), 'group', Load(), lineno=466, col_offset=27), [Num(1, lineno=466, col_offset=35), Num(2, lineno=466, col_offset=38)], [], None, None, lineno=466, col_offset=27), lineno=466, col_offset=16)], [], lineno=465, col_offset=12)], [], lineno=462, col_offset=8), Return(Tuple([Name('resp', Load(), lineno=467, col_offset=15), Name('lines', Load(), lineno=467, col_offset=21)], Load(), lineno=467, col_offset=15), lineno=467, col_offset=8)], [], lineno=452, col_offset=4), FunctionDef('xover', arguments([Name('self', Param(), lineno=469, col_offset=14), Name('start', Param(), lineno=469, col_offset=20), Name('end', Param(), lineno=469, col_offset=27), Name('file', Param(), lineno=469, col_offset=32)], None, None, [Name('None', Load(), lineno=469, col_offset=37)]), [Expr(Str('Process an XOVER command (optional server extension) Arguments:\n        - start: start of range\n        - end: end of range\n        Returns:\n        - resp: server response if successful\n        - list: list of (art-nr, subject, poster, date,\n                         id, references, size, lines)', lineno=476, col_offset=-1), lineno=476, col_offset=-1), Assign([Tuple([Name('resp', Store(), lineno=478, col_offset=8), Name('lines', Store(), lineno=478, col_offset=14)], Store(), lineno=478, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=478, col_offset=22), 'longcmd', Load(), lineno=478, col_offset=22), [BinOp(BinOp(BinOp(Str('XOVER ', lineno=478, col_offset=35), Add(), Name('start', Load(), lineno=478, col_offset=46), lineno=478, col_offset=35), Add(), Str('-', lineno=478, col_offset=54), lineno=478, col_offset=52), Add(), Name('end', Load(), lineno=478, col_offset=60), lineno=478, col_offset=58), Name('file', Load(), lineno=478, col_offset=65)], [], None, None, lineno=478, col_offset=22), lineno=478, col_offset=8), Assign([Name('xover_lines', Store(), lineno=479, col_offset=8)], List([], Load(), lineno=479, col_offset=22), lineno=479, col_offset=8), For(Name('line', Store(), lineno=480, col_offset=12), Name('lines', Load(), lineno=480, col_offset=20), [Assign([Name('elem', Store(), lineno=481, col_offset=12)], Call(Attribute(Name('line', Load(), lineno=481, col_offset=19), 'split', Load(), lineno=481, col_offset=19), [Str('\t', lineno=481, col_offset=30)], [], None, None, lineno=481, col_offset=19), lineno=481, col_offset=12), TryExcept([Expr(Call(Attribute(Name('xover_lines', Load(), lineno=483, col_offset=16), 'append', Load(), lineno=483, col_offset=16), [Tuple([Subscript(Name('elem', Load(), lineno=483, col_offset=36), Index(Num(0, lineno=483, col_offset=41)), Load(), lineno=483, col_offset=36), Subscript(Name('elem', Load(), lineno=484, col_offset=36), Index(Num(1, lineno=484, col_offset=41)), Load(), lineno=484, col_offset=36), Subscript(Name('elem', Load(), lineno=485, col_offset=36), Index(Num(2, lineno=485, col_offset=41)), Load(), lineno=485, col_offset=36), Subscript(Name('elem', Load(), lineno=486, col_offset=36), Index(Num(3, lineno=486, col_offset=41)), Load(), lineno=486, col_offset=36), Subscript(Name('elem', Load(), lineno=487, col_offset=36), Index(Num(4, lineno=487, col_offset=41)), Load(), lineno=487, col_offset=36), Call(Attribute(Subscript(Name('elem', Load(), lineno=488, col_offset=36), Index(Num(5, lineno=488, col_offset=41)), Load(), lineno=488, col_offset=36), 'split', Load(), lineno=488, col_offset=36), [], [], None, None, lineno=488, col_offset=36), Subscript(Name('elem', Load(), lineno=489, col_offset=36), Index(Num(6, lineno=489, col_offset=41)), Load(), lineno=489, col_offset=36), Subscript(Name('elem', Load(), lineno=490, col_offset=36), Index(Num(7, lineno=490, col_offset=41)), Load(), lineno=490, col_offset=36)], Load(), lineno=483, col_offset=36)], [], None, None, lineno=483, col_offset=16), lineno=483, col_offset=16)], [ExceptHandler(Name('IndexError', Load(), lineno=491, col_offset=19), None, [Raise(Call(Name('NNTPDataError', Load(), lineno=492, col_offset=22), [Name('line', Load(), lineno=492, col_offset=36)], [], None, None, lineno=492, col_offset=22), None, None, lineno=492, col_offset=16)], lineno=491, col_offset=12)], [], lineno=482, col_offset=12)], [], lineno=480, col_offset=8), Return(Tuple([Name('resp', Load(), lineno=493, col_offset=15), Name('xover_lines', Load(), lineno=493, col_offset=20)], Load(), lineno=493, col_offset=15), lineno=493, col_offset=8)], [], lineno=469, col_offset=4), FunctionDef('xgtitle', arguments([Name('self', Param(), lineno=495, col_offset=16), Name('group', Param(), lineno=495, col_offset=22), Name('file', Param(), lineno=495, col_offset=29)], None, None, [Name('None', Load(), lineno=495, col_offset=34)]), [Expr(Str('Process an XGTITLE command (optional server extension) Arguments:\n        - group: group name wildcard (i.e. news.*)\n        Returns:\n        - resp: server response if successful\n        - list: list of (name,title) strings', lineno=500, col_offset=-1), lineno=500, col_offset=-1), Assign([Name('line_pat', Store(), lineno=502, col_offset=8)], Call(Attribute(Name('re', Load(), lineno=502, col_offset=19), 'compile', Load(), lineno=502, col_offset=19), [Str('^([^ \t]+)[ \t]+(.*)$', lineno=502, col_offset=30)], [], None, None, lineno=502, col_offset=19), lineno=502, col_offset=8), Assign([Tuple([Name('resp', Store(), lineno=503, col_offset=8), Name('raw_lines', Store(), lineno=503, col_offset=14)], Store(), lineno=503, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=503, col_offset=26), 'longcmd', Load(), lineno=503, col_offset=26), [BinOp(Str('XGTITLE ', lineno=503, col_offset=39), Add(), Name('group', Load(), lineno=503, col_offset=52), lineno=503, col_offset=39), Name('file', Load(), lineno=503, col_offset=59)], [], None, None, lineno=503, col_offset=26), lineno=503, col_offset=8), Assign([Name('lines', Store(), lineno=504, col_offset=8)], List([], Load(), lineno=504, col_offset=16), lineno=504, col_offset=8), For(Name('raw_line', Store(), lineno=505, col_offset=12), Name('raw_lines', Load(), lineno=505, col_offset=24), [Assign([Name('match', Store(), lineno=506, col_offset=12)], Call(Attribute(Name('line_pat', Load(), lineno=506, col_offset=20), 'search', Load(), lineno=506, col_offset=20), [Call(Attribute(Name('raw_line', Load(), lineno=506, col_offset=36), 'strip', Load(), lineno=506, col_offset=36), [], [], None, None, lineno=506, col_offset=36)], [], None, None, lineno=506, col_offset=20), lineno=506, col_offset=12), If(Name('match', Load(), lineno=507, col_offset=15), [Expr(Call(Attribute(Name('lines', Load(), lineno=508, col_offset=16), 'append', Load(), lineno=508, col_offset=16), [Call(Attribute(Name('match', Load(), lineno=508, col_offset=29), 'group', Load(), lineno=508, col_offset=29), [Num(1, lineno=508, col_offset=41), Num(2, lineno=508, col_offset=44)], [], None, None, lineno=508, col_offset=29)], [], None, None, lineno=508, col_offset=16), lineno=508, col_offset=16)], [], lineno=507, col_offset=12)], [], lineno=505, col_offset=8), Return(Tuple([Name('resp', Load(), lineno=509, col_offset=15), Name('lines', Load(), lineno=509, col_offset=21)], Load(), lineno=509, col_offset=15), lineno=509, col_offset=8)], [], lineno=495, col_offset=4), FunctionDef('xpath', arguments([Name('self', Param(), lineno=511, col_offset=14), Name('id', Param(), lineno=511, col_offset=19)], None, None, []), [Expr(Str('Process an XPATH command (optional server extension) Arguments:\n        - id: Message id of article\n        Returns:\n        resp: server response if successful\n        path: directory path to article', lineno=516, col_offset=-1), lineno=516, col_offset=-1), Assign([Name('resp', Store(), lineno=518, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=518, col_offset=15), 'shortcmd', Load(), lineno=518, col_offset=15), [BinOp(Str('XPATH ', lineno=518, col_offset=29), Add(), Name('id', Load(), lineno=518, col_offset=40), lineno=518, col_offset=29)], [], None, None, lineno=518, col_offset=15), lineno=518, col_offset=8), If(Compare(Subscript(Name('resp', Load(), lineno=519, col_offset=11), Slice(None, Num(3, lineno=519, col_offset=17), None), Load(), lineno=519, col_offset=11), [NotEq()], [Str('223', lineno=519, col_offset=23)], lineno=519, col_offset=11), [Raise(Call(Name('NNTPReplyError', Load(), lineno=520, col_offset=18), [Name('resp', Load(), lineno=520, col_offset=33)], [], None, None, lineno=520, col_offset=18), None, None, lineno=520, col_offset=12)], [], lineno=519, col_offset=8), TryExcept([Assign([List([Name('resp_num', Store(), lineno=522, col_offset=13), Name('path', Store(), lineno=522, col_offset=23)], Store(), lineno=522, col_offset=12)], Call(Attribute(Name('resp', Load(), lineno=522, col_offset=31), 'split', Load(), lineno=522, col_offset=31), [], [], None, None, lineno=522, col_offset=31), lineno=522, col_offset=12)], [ExceptHandler(Name('ValueError', Load(), lineno=523, col_offset=15), None, [Raise(Call(Name('NNTPReplyError', Load(), lineno=524, col_offset=18), [Name('resp', Load(), lineno=524, col_offset=33)], [], None, None, lineno=524, col_offset=18), None, None, lineno=524, col_offset=12)], lineno=523, col_offset=8)], [Return(Tuple([Name('resp', Load(), lineno=526, col_offset=19), Name('path', Load(), lineno=526, col_offset=25)], Load(), lineno=526, col_offset=19), lineno=526, col_offset=12)], lineno=521, col_offset=8)], [], lineno=511, col_offset=4), FunctionDef('date', arguments([Name('self', Param(), lineno=528, col_offset=14)], None, None, []), [Expr(Str('Process the DATE command. Arguments:\n        None\n        Returns:\n        resp: server response if successful\n        date: Date suitable for newnews/newgroups commands etc.\n        time: Time suitable for newnews/newgroups commands etc.', lineno=534, col_offset=-1), lineno=534, col_offset=-1), Assign([Name('resp', Store(), lineno=536, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=536, col_offset=15), 'shortcmd', Load(), lineno=536, col_offset=15), [Str('DATE', lineno=536, col_offset=29)], [], None, None, lineno=536, col_offset=15), lineno=536, col_offset=8), If(Compare(Subscript(Name('resp', Load(), lineno=537, col_offset=11), Slice(None, Num(3, lineno=537, col_offset=17), None), Load(), lineno=537, col_offset=11), [NotEq()], [Str('111', lineno=537, col_offset=23)], lineno=537, col_offset=11), [Raise(Call(Name('NNTPReplyError', Load(), lineno=538, col_offset=18), [Name('resp', Load(), lineno=538, col_offset=33)], [], None, None, lineno=538, col_offset=18), None, None, lineno=538, col_offset=12)], [], lineno=537, col_offset=8), Assign([Name('elem', Store(), lineno=539, col_offset=8)], Call(Attribute(Name('resp', Load(), lineno=539, col_offset=15), 'split', Load(), lineno=539, col_offset=15), [], [], None, None, lineno=539, col_offset=15), lineno=539, col_offset=8), If(Compare(Call(Name('len', Load(), lineno=540, col_offset=11), [Name('elem', Load(), lineno=540, col_offset=15)], [], None, None, lineno=540, col_offset=11), [NotEq()], [Num(2, lineno=540, col_offset=24)], lineno=540, col_offset=11), [Raise(Call(Name('NNTPDataError', Load(), lineno=541, col_offset=18), [Name('resp', Load(), lineno=541, col_offset=32)], [], None, None, lineno=541, col_offset=18), None, None, lineno=541, col_offset=12)], [], lineno=540, col_offset=8), Assign([Name('date', Store(), lineno=542, col_offset=8)], Subscript(Subscript(Name('elem', Load(), lineno=542, col_offset=15), Index(Num(1, lineno=542, col_offset=20)), Load(), lineno=542, col_offset=15), Slice(Num(2, lineno=542, col_offset=23), Num(8, lineno=542, col_offset=25), None), Load(), lineno=542, col_offset=15), lineno=542, col_offset=8), Assign([Name('time', Store(), lineno=543, col_offset=8)], Subscript(Subscript(Name('elem', Load(), lineno=543, col_offset=15), Index(Num(1, lineno=543, col_offset=20)), Load(), lineno=543, col_offset=15), Slice(Num(-6, lineno=543, col_offset=24), None, None), Load(), lineno=543, col_offset=15), lineno=543, col_offset=8), If(BoolOp(Or(), [Compare(Call(Name('len', Load(), lineno=544, col_offset=11), [Name('date', Load(), lineno=544, col_offset=15)], [], None, None, lineno=544, col_offset=11), [NotEq()], [Num(6, lineno=544, col_offset=24)], lineno=544, col_offset=11), Compare(Call(Name('len', Load(), lineno=544, col_offset=29), [Name('time', Load(), lineno=544, col_offset=33)], [], None, None, lineno=544, col_offset=29), [NotEq()], [Num(6, lineno=544, col_offset=42)], lineno=544, col_offset=29)], lineno=544, col_offset=11), [Raise(Call(Name('NNTPDataError', Load(), lineno=545, col_offset=18), [Name('resp', Load(), lineno=545, col_offset=32)], [], None, None, lineno=545, col_offset=18), None, None, lineno=545, col_offset=12)], [], lineno=544, col_offset=8), Return(Tuple([Name('resp', Load(), lineno=546, col_offset=15), Name('date', Load(), lineno=546, col_offset=21), Name('time', Load(), lineno=546, col_offset=27)], Load(), lineno=546, col_offset=15), lineno=546, col_offset=8)], [], lineno=528, col_offset=4), FunctionDef('post', arguments([Name('self', Param(), lineno=549, col_offset=13), Name('f', Param(), lineno=549, col_offset=19)], None, None, []), [Expr(Str('Process a POST command.  Arguments:\n        - f: file containing the article\n        Returns:\n        - resp: server response if successful', lineno=553, col_offset=-1), lineno=553, col_offset=-1), Assign([Name('resp', Store(), lineno=555, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=555, col_offset=15), 'shortcmd', Load(), lineno=555, col_offset=15), [Str('POST', lineno=555, col_offset=29)], [], None, None, lineno=555, col_offset=15), lineno=555, col_offset=8), If(Compare(Subscript(Name('resp', Load(), lineno=557, col_offset=11), Index(Num(0, lineno=557, col_offset=16)), Load(), lineno=557, col_offset=11), [NotEq()], [Str('3', lineno=557, col_offset=22)], lineno=557, col_offset=11), [Raise(Call(Name('NNTPReplyError', Load(), lineno=558, col_offset=18), [Name('resp', Load(), lineno=558, col_offset=33)], [], None, None, lineno=558, col_offset=18), None, None, lineno=558, col_offset=12)], [], lineno=557, col_offset=8), While(Num(1, lineno=559, col_offset=14), [Assign([Name('line', Store(), lineno=560, col_offset=12)], Call(Attribute(Name('f', Load(), lineno=560, col_offset=19), 'readline', Load(), lineno=560, col_offset=19), [], [], None, None, lineno=560, col_offset=19), lineno=560, col_offset=12), If(UnaryOp(Not(), Name('line', Load(), lineno=561, col_offset=19), lineno=561, col_offset=15), [Break( lineno=562, col_offset=16)], [], lineno=561, col_offset=12), If(Compare(Subscript(Name('line', Load(), lineno=563, col_offset=15), Index(Num(-1, lineno=563, col_offset=21)), Load(), lineno=563, col_offset=15), [Eq()], [Str('\n', lineno=563, col_offset=27)], lineno=563, col_offset=15), [Assign([Name('line', Store(), lineno=564, col_offset=16)], Subscript(Name('line', Load(), lineno=564, col_offset=23), Slice(None, Num(-1, lineno=564, col_offset=30), None), Load(), lineno=564, col_offset=23), lineno=564, col_offset=16)], [], lineno=563, col_offset=12), If(Compare(Subscript(Name('line', Load(), lineno=565, col_offset=15), Slice(None, Num(1, lineno=565, col_offset=21), None), Load(), lineno=565, col_offset=15), [Eq()], [Str('.', lineno=565, col_offset=27)], lineno=565, col_offset=15), [Assign([Name('line', Store(), lineno=566, col_offset=16)], BinOp(Str('.', lineno=566, col_offset=23), Add(), Name('line', Load(), lineno=566, col_offset=29), lineno=566, col_offset=23), lineno=566, col_offset=16)], [], lineno=565, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=567, col_offset=12), 'putline', Load(), lineno=567, col_offset=12), [Name('line', Load(), lineno=567, col_offset=25)], [], None, None, lineno=567, col_offset=12), lineno=567, col_offset=12)], [], lineno=559, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=568, col_offset=8), 'putline', Load(), lineno=568, col_offset=8), [Str('.', lineno=568, col_offset=21)], [], None, None, lineno=568, col_offset=8), lineno=568, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=569, col_offset=15), 'getresp', Load(), lineno=569, col_offset=15), [], [], None, None, lineno=569, col_offset=15), lineno=569, col_offset=8)], [], lineno=549, col_offset=4), FunctionDef('ihave', arguments([Name('self', Param(), lineno=571, col_offset=14), Name('id', Param(), lineno=571, col_offset=20), Name('f', Param(), lineno=571, col_offset=24)], None, None, []), [Expr(Str('Process an IHAVE command.  Arguments:\n        - id: message-id of the article\n        - f:  file containing the article\n        Returns:\n        - resp: server response if successful\n        Note that if the server refuses the article an exception is raised.', lineno=577, col_offset=-1), lineno=577, col_offset=-1), Assign([Name('resp', Store(), lineno=579, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=579, col_offset=15), 'shortcmd', Load(), lineno=579, col_offset=15), [BinOp(Str('IHAVE ', lineno=579, col_offset=29), Add(), Name('id', Load(), lineno=579, col_offset=40), lineno=579, col_offset=29)], [], None, None, lineno=579, col_offset=15), lineno=579, col_offset=8), If(Compare(Subscript(Name('resp', Load(), lineno=581, col_offset=11), Index(Num(0, lineno=581, col_offset=16)), Load(), lineno=581, col_offset=11), [NotEq()], [Str('3', lineno=581, col_offset=22)], lineno=581, col_offset=11), [Raise(Call(Name('NNTPReplyError', Load(), lineno=582, col_offset=18), [Name('resp', Load(), lineno=582, col_offset=33)], [], None, None, lineno=582, col_offset=18), None, None, lineno=582, col_offset=12)], [], lineno=581, col_offset=8), While(Num(1, lineno=583, col_offset=14), [Assign([Name('line', Store(), lineno=584, col_offset=12)], Call(Attribute(Name('f', Load(), lineno=584, col_offset=19), 'readline', Load(), lineno=584, col_offset=19), [], [], None, None, lineno=584, col_offset=19), lineno=584, col_offset=12), If(UnaryOp(Not(), Name('line', Load(), lineno=585, col_offset=19), lineno=585, col_offset=15), [Break( lineno=586, col_offset=16)], [], lineno=585, col_offset=12), If(Compare(Subscript(Name('line', Load(), lineno=587, col_offset=15), Index(Num(-1, lineno=587, col_offset=21)), Load(), lineno=587, col_offset=15), [Eq()], [Str('\n', lineno=587, col_offset=27)], lineno=587, col_offset=15), [Assign([Name('line', Store(), lineno=588, col_offset=16)], Subscript(Name('line', Load(), lineno=588, col_offset=23), Slice(None, Num(-1, lineno=588, col_offset=30), None), Load(), lineno=588, col_offset=23), lineno=588, col_offset=16)], [], lineno=587, col_offset=12), If(Compare(Subscript(Name('line', Load(), lineno=589, col_offset=15), Slice(None, Num(1, lineno=589, col_offset=21), None), Load(), lineno=589, col_offset=15), [Eq()], [Str('.', lineno=589, col_offset=27)], lineno=589, col_offset=15), [Assign([Name('line', Store(), lineno=590, col_offset=16)], BinOp(Str('.', lineno=590, col_offset=23), Add(), Name('line', Load(), lineno=590, col_offset=29), lineno=590, col_offset=23), lineno=590, col_offset=16)], [], lineno=589, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=591, col_offset=12), 'putline', Load(), lineno=591, col_offset=12), [Name('line', Load(), lineno=591, col_offset=25)], [], None, None, lineno=591, col_offset=12), lineno=591, col_offset=12)], [], lineno=583, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=592, col_offset=8), 'putline', Load(), lineno=592, col_offset=8), [Str('.', lineno=592, col_offset=21)], [], None, None, lineno=592, col_offset=8), lineno=592, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=593, col_offset=15), 'getresp', Load(), lineno=593, col_offset=15), [], [], None, None, lineno=593, col_offset=15), lineno=593, col_offset=8)], [], lineno=571, col_offset=4), FunctionDef('quit', arguments([Name('self', Param(), lineno=595, col_offset=13)], None, None, []), [Expr(Str('Process a QUIT command and close the socket.  Returns:\n        - resp: server response if successful', lineno=597, col_offset=-1), lineno=597, col_offset=-1), Assign([Name('resp', Store(), lineno=599, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=599, col_offset=15), 'shortcmd', Load(), lineno=599, col_offset=15), [Str('QUIT', lineno=599, col_offset=29)], [], None, None, lineno=599, col_offset=15), lineno=599, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=600, col_offset=8), 'file', Load(), lineno=600, col_offset=8), 'close', Load(), lineno=600, col_offset=8), [], [], None, None, lineno=600, col_offset=8), lineno=600, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=601, col_offset=8), 'sock', Load(), lineno=601, col_offset=8), 'close', Load(), lineno=601, col_offset=8), [], [], None, None, lineno=601, col_offset=8), lineno=601, col_offset=8), Delete([Attribute(Name('self', Load(), lineno=602, col_offset=12), 'file', Del(), lineno=602, col_offset=12), Attribute(Name('self', Load(), lineno=602, col_offset=23), 'sock', Del(), lineno=602, col_offset=23)], lineno=602, col_offset=8), Return(Name('resp', Load(), lineno=603, col_offset=15), lineno=603, col_offset=8)], [], lineno=595, col_offset=4)], [], lineno=93, col_offset=0), If(Compare(Name('__name__', Load(), lineno=611, col_offset=3), [Eq()], [Str('__main__', lineno=611, col_offset=15)], lineno=611, col_offset=3), [Import([alias('os', None)], lineno=612, col_offset=4), Assign([Name('newshost', Store(), lineno=613, col_offset=4)], BoolOp(And(), [Str('news', lineno=613, col_offset=15), Subscript(Attribute(Name('os', Load(), lineno=613, col_offset=26), 'environ', Load(), lineno=613, col_offset=26), Index(Str('NNTPSERVER', lineno=613, col_offset=37)), Load(), lineno=613, col_offset=26)], lineno=613, col_offset=15), lineno=613, col_offset=4), If(Compare(Call(Attribute(Name('newshost', Load(), lineno=614, col_offset=7), 'find', Load(), lineno=614, col_offset=7), [Str('.', lineno=614, col_offset=21)], [], None, None, lineno=614, col_offset=7), [Eq()], [Num(-1, lineno=614, col_offset=30)], lineno=614, col_offset=7), [Assign([Name('mode', Store(), lineno=615, col_offset=8)], Str('readermode', lineno=615, col_offset=15), lineno=615, col_offset=8)], [Assign([Name('mode', Store(), lineno=617, col_offset=8)], Name('None', Load(), lineno=617, col_offset=15), lineno=617, col_offset=8)], lineno=614, col_offset=4), Assign([Name('s', Store(), lineno=618, col_offset=4)], Call(Name('NNTP', Load(), lineno=618, col_offset=8), [Name('newshost', Load(), lineno=618, col_offset=13)], [keyword('readermode', Name('mode', Load(), lineno=618, col_offset=34))], None, None, lineno=618, col_offset=8), lineno=618, col_offset=4), Assign([Tuple([Name('resp', Store(), lineno=619, col_offset=4), Name('count', Store(), lineno=619, col_offset=10), Name('first', Store(), lineno=619, col_offset=17), Name('last', Store(), lineno=619, col_offset=24), Name('name', Store(), lineno=619, col_offset=30)], Store(), lineno=619, col_offset=4)], Call(Attribute(Name('s', Load(), lineno=619, col_offset=37), 'group', Load(), lineno=619, col_offset=37), [Str('comp.lang.python', lineno=619, col_offset=45)], [], None, None, lineno=619, col_offset=37), lineno=619, col_offset=4), Print(None, [Name('resp', Load(), lineno=620, col_offset=10)], True, lineno=620, col_offset=4), Print(None, [Str('Group', lineno=621, col_offset=10), Name('name', Load(), lineno=621, col_offset=19), Str('has', lineno=621, col_offset=25), Name('count', Load(), lineno=621, col_offset=32), Str('articles, range', lineno=621, col_offset=39), Name('first', Load(), lineno=621, col_offset=58), Str('to', lineno=621, col_offset=65), Name('last', Load(), lineno=621, col_offset=71)], True, lineno=621, col_offset=4), Assign([Tuple([Name('resp', Store(), lineno=622, col_offset=4), Name('subs', Store(), lineno=622, col_offset=10)], Store(), lineno=622, col_offset=4)], Call(Attribute(Name('s', Load(), lineno=622, col_offset=17), 'xhdr', Load(), lineno=622, col_offset=17), [Str('subject', lineno=622, col_offset=24), BinOp(BinOp(Name('first', Load(), lineno=622, col_offset=35), Add(), Str('-', lineno=622, col_offset=43), lineno=622, col_offset=35), Add(), Name('last', Load(), lineno=622, col_offset=49), lineno=622, col_offset=47)], [], None, None, lineno=622, col_offset=17), lineno=622, col_offset=4), Print(None, [Name('resp', Load(), lineno=623, col_offset=10)], True, lineno=623, col_offset=4), For(Name('item', Store(), lineno=624, col_offset=8), Name('subs', Load(), lineno=624, col_offset=16), [Print(None, [BinOp(Str('%7s %s', lineno=625, col_offset=14), Mod(), Name('item', Load(), lineno=625, col_offset=25), lineno=625, col_offset=14)], True, lineno=625, col_offset=8)], [], lineno=624, col_offset=4), Assign([Name('resp', Store(), lineno=626, col_offset=4)], Call(Attribute(Name('s', Load(), lineno=626, col_offset=11), 'quit', Load(), lineno=626, col_offset=11), [], [], None, None, lineno=626, col_offset=11), lineno=626, col_offset=4), Print(None, [Name('resp', Load(), lineno=627, col_offset=10)], True, lineno=627, col_offset=4)], [], lineno=611, col_offset=0)])
