Module([Expr(Str('Common operations on Posix pathnames.\n\nInstead of importing this module directly, import os and refer to\nthis module as os.path.  The "os.path" name is an alias for this\nmodule on Posix systems; on other systems (e.g. Mac, Windows),\nos.path provides the same operations in a manner specific to that\nplatform, and is an alias to another module (e.g. macpath, ntpath).\n\nSome of this can actually be useful on non-Posix systems too, e.g.\nfor manipulation of the pathname component of URLs.\n', lineno=11, col_offset=-1), lineno=11, col_offset=-1), Import([alias('os', None)], lineno=13, col_offset=0), Import([alias('sys', None)], lineno=14, col_offset=0), Import([alias('stat', None)], lineno=15, col_offset=0), Import([alias('genericpath', None)], lineno=16, col_offset=0), Import([alias('warnings', None)], lineno=17, col_offset=0), ImportFrom('genericpath', [alias('*', None)], 0, lineno=18, col_offset=0), Assign([Name('__all__', Store(), lineno=20, col_offset=0)], List([Str('normcase', lineno=20, col_offset=11), Str('isabs', lineno=20, col_offset=22), Str('join', lineno=20, col_offset=30), Str('splitdrive', lineno=20, col_offset=37), Str('split', lineno=20, col_offset=50), Str('splitext', lineno=20, col_offset=58), Str('basename', lineno=21, col_offset=11), Str('dirname', lineno=21, col_offset=22), Str('commonprefix', lineno=21, col_offset=32), Str('getsize', lineno=21, col_offset=47), Str('getmtime', lineno=21, col_offset=57), Str('getatime', lineno=22, col_offset=11), Str('getctime', lineno=22, col_offset=22), Str('islink', lineno=22, col_offset=33), Str('exists', lineno=22, col_offset=42), Str('lexists', lineno=22, col_offset=51), Str('isdir', lineno=22, col_offset=61), Str('isfile', lineno=22, col_offset=69), Str('ismount', lineno=23, col_offset=11), Str('walk', lineno=23, col_offset=21), Str('expanduser', lineno=23, col_offset=28), Str('expandvars', lineno=23, col_offset=41), Str('normpath', lineno=23, col_offset=54), Str('abspath', lineno=23, col_offset=65), Str('samefile', lineno=24, col_offset=11), Str('sameopenfile', lineno=24, col_offset=22), Str('samestat', lineno=24, col_offset=37), Str('curdir', lineno=25, col_offset=11), Str('pardir', lineno=25, col_offset=20), Str('sep', lineno=25, col_offset=29), Str('pathsep', lineno=25, col_offset=35), Str('defpath', lineno=25, col_offset=45), Str('altsep', lineno=25, col_offset=55), Str('extsep', lineno=25, col_offset=64), Str('devnull', lineno=26, col_offset=11), Str('realpath', lineno=26, col_offset=21), Str('supports_unicode_filenames', lineno=26, col_offset=32), Str('relpath', lineno=26, col_offset=61)], Load(), lineno=20, col_offset=10), lineno=20, col_offset=0), Assign([Name('curdir', Store(), lineno=29, col_offset=0)], Str('.', lineno=29, col_offset=9), lineno=29, col_offset=0), Assign([Name('pardir', Store(), lineno=30, col_offset=0)], Str('..', lineno=30, col_offset=9), lineno=30, col_offset=0), Assign([Name('extsep', Store(), lineno=31, col_offset=0)], Str('.', lineno=31, col_offset=9), lineno=31, col_offset=0), Assign([Name('sep', Store(), lineno=32, col_offset=0)], Str('/', lineno=32, col_offset=6), lineno=32, col_offset=0), Assign([Name('pathsep', Store(), lineno=33, col_offset=0)], Str(':', lineno=33, col_offset=10), lineno=33, col_offset=0), Assign([Name('defpath', Store(), lineno=34, col_offset=0)], Str(':/bin:/usr/bin', lineno=34, col_offset=10), lineno=34, col_offset=0), Assign([Name('altsep', Store(), lineno=35, col_offset=0)], Name('None', Load(), lineno=35, col_offset=9), lineno=35, col_offset=0), Assign([Name('devnull', Store(), lineno=36, col_offset=0)], Str('/dev/null', lineno=36, col_offset=10), lineno=36, col_offset=0), FunctionDef('normcase', arguments([Name('s', Param(), lineno=43, col_offset=13)], None, None, []), [Expr(Str('Normalize case of pathname.  Has no effect under Posix', lineno=44, col_offset=4), lineno=44, col_offset=4), Return(Name('s', Load(), lineno=45, col_offset=11), lineno=45, col_offset=4)], [], lineno=43, col_offset=0), FunctionDef('isabs', arguments([Name('s', Param(), lineno=51, col_offset=10)], None, None, []), [Expr(Str('Test whether a path is absolute', lineno=52, col_offset=4), lineno=52, col_offset=4), Return(Call(Attribute(Name('s', Load(), lineno=53, col_offset=11), 'startswith', Load(), lineno=53, col_offset=11), [Str('/', lineno=53, col_offset=24)], [], None, None, lineno=53, col_offset=11), lineno=53, col_offset=4)], [], lineno=51, col_offset=0), FunctionDef('join', arguments([Name('a', Param(), lineno=60, col_offset=9)], 'p', None, []), [Expr(Str("Join two or more pathname components, inserting '/' as needed.\n    If any component is an absolute path, all previous path components\n    will be discarded.", lineno=63, col_offset=-1), lineno=63, col_offset=-1), Assign([Name('path', Store(), lineno=64, col_offset=4)], Name('a', Load(), lineno=64, col_offset=11), lineno=64, col_offset=4), For(Name('b', Store(), lineno=65, col_offset=8), Name('p', Load(), lineno=65, col_offset=13), [If(Call(Attribute(Name('b', Load(), lineno=66, col_offset=11), 'startswith', Load(), lineno=66, col_offset=11), [Str('/', lineno=66, col_offset=24)], [], None, None, lineno=66, col_offset=11), [Assign([Name('path', Store(), lineno=67, col_offset=12)], Name('b', Load(), lineno=67, col_offset=19), lineno=67, col_offset=12)], [If(BoolOp(Or(), [Compare(Name('path', Load(), lineno=68, col_offset=13), [Eq()], [Str('', lineno=68, col_offset=21)], lineno=68, col_offset=13), Call(Attribute(Name('path', Load(), lineno=68, col_offset=27), 'endswith', Load(), lineno=68, col_offset=27), [Str('/', lineno=68, col_offset=41)], [], None, None, lineno=68, col_offset=27)], lineno=68, col_offset=13), [AugAssign(Name('path', Store(), lineno=69, col_offset=12), Add(), Name('b', Load(), lineno=69, col_offset=21), lineno=69, col_offset=12)], [AugAssign(Name('path', Store(), lineno=71, col_offset=12), Add(), BinOp(Str('/', lineno=71, col_offset=20), Add(), Name('b', Load(), lineno=71, col_offset=26), lineno=71, col_offset=20), lineno=71, col_offset=12)], lineno=68, col_offset=13)], lineno=66, col_offset=8)], [], lineno=65, col_offset=4), Return(Name('path', Load(), lineno=72, col_offset=11), lineno=72, col_offset=4)], [], lineno=60, col_offset=0), FunctionDef('split', arguments([Name('p', Param(), lineno=80, col_offset=10)], None, None, []), [Expr(Str('Split a pathname.  Returns tuple "(head, tail)" where "tail" is\n    everything after the final slash.  Either part may be empty.', lineno=82, col_offset=-1), lineno=82, col_offset=-1), Assign([Name('i', Store(), lineno=83, col_offset=4)], BinOp(Call(Attribute(Name('p', Load(), lineno=83, col_offset=8), 'rfind', Load(), lineno=83, col_offset=8), [Str('/', lineno=83, col_offset=16)], [], None, None, lineno=83, col_offset=8), Add(), Num(1, lineno=83, col_offset=23), lineno=83, col_offset=8), lineno=83, col_offset=4), Assign([Tuple([Name('head', Store(), lineno=84, col_offset=4), Name('tail', Store(), lineno=84, col_offset=10)], Store(), lineno=84, col_offset=4)], Tuple([Subscript(Name('p', Load(), lineno=84, col_offset=17), Slice(None, Name('i', Load(), lineno=84, col_offset=20), None), Load(), lineno=84, col_offset=17), Subscript(Name('p', Load(), lineno=84, col_offset=24), Slice(Name('i', Load(), lineno=84, col_offset=26), None, None), Load(), lineno=84, col_offset=24)], Load(), lineno=84, col_offset=17), lineno=84, col_offset=4), If(BoolOp(And(), [Name('head', Load(), lineno=85, col_offset=7), Compare(Name('head', Load(), lineno=85, col_offset=16), [NotEq()], [BinOp(Str('/', lineno=85, col_offset=24), Mult(), Call(Name('len', Load(), lineno=85, col_offset=28), [Name('head', Load(), lineno=85, col_offset=32)], [], None, None, lineno=85, col_offset=28), lineno=85, col_offset=24)], lineno=85, col_offset=16)], lineno=85, col_offset=7), [Assign([Name('head', Store(), lineno=86, col_offset=8)], Call(Attribute(Name('head', Load(), lineno=86, col_offset=15), 'rstrip', Load(), lineno=86, col_offset=15), [Str('/', lineno=86, col_offset=27)], [], None, None, lineno=86, col_offset=15), lineno=86, col_offset=8)], [], lineno=85, col_offset=4), Return(Tuple([Name('head', Load(), lineno=87, col_offset=11), Name('tail', Load(), lineno=87, col_offset=17)], Load(), lineno=87, col_offset=11), lineno=87, col_offset=4)], [], lineno=80, col_offset=0), FunctionDef('splitext', arguments([Name('p', Param(), lineno=95, col_offset=13)], None, None, []), [Return(Call(Attribute(Name('genericpath', Load(), lineno=96, col_offset=11), '_splitext', Load(), lineno=96, col_offset=11), [Name('p', Load(), lineno=96, col_offset=33), Name('sep', Load(), lineno=96, col_offset=36), Name('altsep', Load(), lineno=96, col_offset=41), Name('extsep', Load(), lineno=96, col_offset=49)], [], None, None, lineno=96, col_offset=11), lineno=96, col_offset=4)], [], lineno=95, col_offset=0), Assign([Attribute(Name('splitext', Load(), lineno=97, col_offset=0), '__doc__', Store(), lineno=97, col_offset=0)], Attribute(Attribute(Name('genericpath', Load(), lineno=97, col_offset=19), '_splitext', Load(), lineno=97, col_offset=19), '__doc__', Load(), lineno=97, col_offset=19), lineno=97, col_offset=0), FunctionDef('splitdrive', arguments([Name('p', Param(), lineno=102, col_offset=15)], None, None, []), [Expr(Str('Split a pathname into drive and path. On Posix, drive is always\n    empty.', lineno=104, col_offset=-1), lineno=104, col_offset=-1), Return(Tuple([Str('', lineno=105, col_offset=11), Name('p', Load(), lineno=105, col_offset=15)], Load(), lineno=105, col_offset=11), lineno=105, col_offset=4)], [], lineno=102, col_offset=0), FunctionDef('basename', arguments([Name('p', Param(), lineno=110, col_offset=13)], None, None, []), [Expr(Str('Returns the final component of a pathname', lineno=111, col_offset=4), lineno=111, col_offset=4), Assign([Name('i', Store(), lineno=112, col_offset=4)], BinOp(Call(Attribute(Name('p', Load(), lineno=112, col_offset=8), 'rfind', Load(), lineno=112, col_offset=8), [Str('/', lineno=112, col_offset=16)], [], None, None, lineno=112, col_offset=8), Add(), Num(1, lineno=112, col_offset=23), lineno=112, col_offset=8), lineno=112, col_offset=4), Return(Subscript(Name('p', Load(), lineno=113, col_offset=11), Slice(Name('i', Load(), lineno=113, col_offset=13), None, None), Load(), lineno=113, col_offset=11), lineno=113, col_offset=4)], [], lineno=110, col_offset=0), FunctionDef('dirname', arguments([Name('p', Param(), lineno=118, col_offset=12)], None, None, []), [Expr(Str('Returns the directory component of a pathname', lineno=119, col_offset=4), lineno=119, col_offset=4), Assign([Name('i', Store(), lineno=120, col_offset=4)], BinOp(Call(Attribute(Name('p', Load(), lineno=120, col_offset=8), 'rfind', Load(), lineno=120, col_offset=8), [Str('/', lineno=120, col_offset=16)], [], None, None, lineno=120, col_offset=8), Add(), Num(1, lineno=120, col_offset=23), lineno=120, col_offset=8), lineno=120, col_offset=4), Assign([Name('head', Store(), lineno=121, col_offset=4)], Subscript(Name('p', Load(), lineno=121, col_offset=11), Slice(None, Name('i', Load(), lineno=121, col_offset=14), None), Load(), lineno=121, col_offset=11), lineno=121, col_offset=4), If(BoolOp(And(), [Name('head', Load(), lineno=122, col_offset=7), Compare(Name('head', Load(), lineno=122, col_offset=16), [NotEq()], [BinOp(Str('/', lineno=122, col_offset=24), Mult(), Call(Name('len', Load(), lineno=122, col_offset=28), [Name('head', Load(), lineno=122, col_offset=32)], [], None, None, lineno=122, col_offset=28), lineno=122, col_offset=24)], lineno=122, col_offset=16)], lineno=122, col_offset=7), [Assign([Name('head', Store(), lineno=123, col_offset=8)], Call(Attribute(Name('head', Load(), lineno=123, col_offset=15), 'rstrip', Load(), lineno=123, col_offset=15), [Str('/', lineno=123, col_offset=27)], [], None, None, lineno=123, col_offset=15), lineno=123, col_offset=8)], [], lineno=122, col_offset=4), Return(Name('head', Load(), lineno=124, col_offset=11), lineno=124, col_offset=4)], [], lineno=118, col_offset=0), FunctionDef('islink', arguments([Name('path', Param(), lineno=130, col_offset=11)], None, None, []), [Expr(Str('Test whether a path is a symbolic link', lineno=131, col_offset=4), lineno=131, col_offset=4), TryExcept([Assign([Name('st', Store(), lineno=133, col_offset=8)], Call(Attribute(Name('os', Load(), lineno=133, col_offset=13), 'lstat', Load(), lineno=133, col_offset=13), [Name('path', Load(), lineno=133, col_offset=22)], [], None, None, lineno=133, col_offset=13), lineno=133, col_offset=8)], [ExceptHandler(Tuple([Attribute(Name('os', Load(), lineno=134, col_offset=12), 'error', Load(), lineno=134, col_offset=12), Name('AttributeError', Load(), lineno=134, col_offset=22)], Load(), lineno=134, col_offset=12), None, [Return(Name('False', Load(), lineno=135, col_offset=15), lineno=135, col_offset=8)], lineno=134, col_offset=4)], [], lineno=132, col_offset=4), Return(Call(Attribute(Name('stat', Load(), lineno=136, col_offset=11), 'S_ISLNK', Load(), lineno=136, col_offset=11), [Attribute(Name('st', Load(), lineno=136, col_offset=24), 'st_mode', Load(), lineno=136, col_offset=24)], [], None, None, lineno=136, col_offset=11), lineno=136, col_offset=4)], [], lineno=130, col_offset=0), FunctionDef('lexists', arguments([Name('path', Param(), lineno=140, col_offset=12)], None, None, []), [Expr(Str('Test whether a path exists.  Returns True for broken symbolic links', lineno=141, col_offset=4), lineno=141, col_offset=4), TryExcept([Expr(Call(Attribute(Name('os', Load(), lineno=143, col_offset=8), 'lstat', Load(), lineno=143, col_offset=8), [Name('path', Load(), lineno=143, col_offset=17)], [], None, None, lineno=143, col_offset=8), lineno=143, col_offset=8)], [ExceptHandler(Attribute(Name('os', Load(), lineno=144, col_offset=11), 'error', Load(), lineno=144, col_offset=11), None, [Return(Name('False', Load(), lineno=145, col_offset=15), lineno=145, col_offset=8)], lineno=144, col_offset=4)], [], lineno=142, col_offset=4), Return(Name('True', Load(), lineno=146, col_offset=11), lineno=146, col_offset=4)], [], lineno=140, col_offset=0), FunctionDef('samefile', arguments([Name('f1', Param(), lineno=151, col_offset=13), Name('f2', Param(), lineno=151, col_offset=17)], None, None, []), [Expr(Str('Test whether two pathnames reference the same actual file', lineno=152, col_offset=4), lineno=152, col_offset=4), Assign([Name('s1', Store(), lineno=153, col_offset=4)], Call(Attribute(Name('os', Load(), lineno=153, col_offset=9), 'stat', Load(), lineno=153, col_offset=9), [Name('f1', Load(), lineno=153, col_offset=17)], [], None, None, lineno=153, col_offset=9), lineno=153, col_offset=4), Assign([Name('s2', Store(), lineno=154, col_offset=4)], Call(Attribute(Name('os', Load(), lineno=154, col_offset=9), 'stat', Load(), lineno=154, col_offset=9), [Name('f2', Load(), lineno=154, col_offset=17)], [], None, None, lineno=154, col_offset=9), lineno=154, col_offset=4), Return(Call(Name('samestat', Load(), lineno=155, col_offset=11), [Name('s1', Load(), lineno=155, col_offset=20), Name('s2', Load(), lineno=155, col_offset=24)], [], None, None, lineno=155, col_offset=11), lineno=155, col_offset=4)], [], lineno=151, col_offset=0), FunctionDef('sameopenfile', arguments([Name('fp1', Param(), lineno=161, col_offset=17), Name('fp2', Param(), lineno=161, col_offset=22)], None, None, []), [Expr(Str('Test whether two open file objects reference the same file', lineno=162, col_offset=4), lineno=162, col_offset=4), Assign([Name('s1', Store(), lineno=163, col_offset=4)], Call(Attribute(Name('os', Load(), lineno=163, col_offset=9), 'fstat', Load(), lineno=163, col_offset=9), [Name('fp1', Load(), lineno=163, col_offset=18)], [], None, None, lineno=163, col_offset=9), lineno=163, col_offset=4), Assign([Name('s2', Store(), lineno=164, col_offset=4)], Call(Attribute(Name('os', Load(), lineno=164, col_offset=9), 'fstat', Load(), lineno=164, col_offset=9), [Name('fp2', Load(), lineno=164, col_offset=18)], [], None, None, lineno=164, col_offset=9), lineno=164, col_offset=4), Return(Call(Name('samestat', Load(), lineno=165, col_offset=11), [Name('s1', Load(), lineno=165, col_offset=20), Name('s2', Load(), lineno=165, col_offset=24)], [], None, None, lineno=165, col_offset=11), lineno=165, col_offset=4)], [], lineno=161, col_offset=0), FunctionDef('samestat', arguments([Name('s1', Param(), lineno=171, col_offset=13), Name('s2', Param(), lineno=171, col_offset=17)], None, None, []), [Expr(Str('Test whether two stat buffers reference the same file', lineno=172, col_offset=4), lineno=172, col_offset=4), Return(BoolOp(And(), [Compare(Attribute(Name('s1', Load(), lineno=173, col_offset=11), 'st_ino', Load(), lineno=173, col_offset=11), [Eq()], [Attribute(Name('s2', Load(), lineno=173, col_offset=24), 'st_ino', Load(), lineno=173, col_offset=24)], lineno=173, col_offset=11), Compare(Attribute(Name('s1', Load(), lineno=174, col_offset=11), 'st_dev', Load(), lineno=174, col_offset=11), [Eq()], [Attribute(Name('s2', Load(), lineno=174, col_offset=24), 'st_dev', Load(), lineno=174, col_offset=24)], lineno=174, col_offset=11)], lineno=173, col_offset=11), lineno=173, col_offset=4)], [], lineno=171, col_offset=0), FunctionDef('ismount', arguments([Name('path', Param(), lineno=180, col_offset=12)], None, None, []), [Expr(Str('Test whether a path is a mount point', lineno=181, col_offset=4), lineno=181, col_offset=4), If(Call(Name('islink', Load(), lineno=182, col_offset=7), [Name('path', Load(), lineno=182, col_offset=14)], [], None, None, lineno=182, col_offset=7), [Return(Name('False', Load(), lineno=184, col_offset=15), lineno=184, col_offset=8)], [], lineno=182, col_offset=4), TryExcept([Assign([Name('s1', Store(), lineno=186, col_offset=8)], Call(Attribute(Name('os', Load(), lineno=186, col_offset=13), 'lstat', Load(), lineno=186, col_offset=13), [Name('path', Load(), lineno=186, col_offset=22)], [], None, None, lineno=186, col_offset=13), lineno=186, col_offset=8), Assign([Name('s2', Store(), lineno=187, col_offset=8)], Call(Attribute(Name('os', Load(), lineno=187, col_offset=13), 'lstat', Load(), lineno=187, col_offset=13), [Call(Name('join', Load(), lineno=187, col_offset=22), [Name('path', Load(), lineno=187, col_offset=27), Str('..', lineno=187, col_offset=33)], [], None, None, lineno=187, col_offset=22)], [], None, None, lineno=187, col_offset=13), lineno=187, col_offset=8)], [ExceptHandler(Attribute(Name('os', Load(), lineno=188, col_offset=11), 'error', Load(), lineno=188, col_offset=11), None, [Return(Name('False', Load(), lineno=189, col_offset=15), lineno=189, col_offset=8)], lineno=188, col_offset=4)], [], lineno=185, col_offset=4), Assign([Name('dev1', Store(), lineno=190, col_offset=4)], Attribute(Name('s1', Load(), lineno=190, col_offset=11), 'st_dev', Load(), lineno=190, col_offset=11), lineno=190, col_offset=4), Assign([Name('dev2', Store(), lineno=191, col_offset=4)], Attribute(Name('s2', Load(), lineno=191, col_offset=11), 'st_dev', Load(), lineno=191, col_offset=11), lineno=191, col_offset=4), If(Compare(Name('dev1', Load(), lineno=192, col_offset=7), [NotEq()], [Name('dev2', Load(), lineno=192, col_offset=15)], lineno=192, col_offset=7), [Return(Name('True', Load(), lineno=193, col_offset=15), lineno=193, col_offset=8)], [], lineno=192, col_offset=4), Assign([Name('ino1', Store(), lineno=194, col_offset=4)], Attribute(Name('s1', Load(), lineno=194, col_offset=11), 'st_ino', Load(), lineno=194, col_offset=11), lineno=194, col_offset=4), Assign([Name('ino2', Store(), lineno=195, col_offset=4)], Attribute(Name('s2', Load(), lineno=195, col_offset=11), 'st_ino', Load(), lineno=195, col_offset=11), lineno=195, col_offset=4), If(Compare(Name('ino1', Load(), lineno=196, col_offset=7), [Eq()], [Name('ino2', Load(), lineno=196, col_offset=15)], lineno=196, col_offset=7), [Return(Name('True', Load(), lineno=197, col_offset=15), lineno=197, col_offset=8)], [], lineno=196, col_offset=4), Return(Name('False', Load(), lineno=198, col_offset=11), lineno=198, col_offset=4)], [], lineno=180, col_offset=0), FunctionDef('walk', arguments([Name('top', Param(), lineno=209, col_offset=9), Name('func', Param(), lineno=209, col_offset=14), Name('arg', Param(), lineno=209, col_offset=20)], None, None, []), [Expr(Str("Directory tree walk with callback function.\n\n    For each directory in the directory tree rooted at top (including top\n    itself, but excluding '.' and '..'), call func(arg, dirname, fnames).\n    dirname is the name of the directory, and fnames a list of the names of\n    the files and subdirectories in dirname (excluding '.' and '..').  func\n    may modify the fnames list in-place (e.g. via del or slice assignment),\n    and walk will only recurse into the subdirectories whose names remain in\n    fnames; this can be used to implement a filter, or to impose a specific\n    order of visiting.  No semantics are defined for, or required of, arg,\n    beyond that arg is always passed to func.  It can be used, e.g., to pass\n    a filename pattern, or a mutable object designed to accumulate\n    statistics.  Passing None for arg is common.", lineno=222, col_offset=-1), lineno=222, col_offset=-1), Expr(Call(Attribute(Name('warnings', Load(), lineno=223, col_offset=4), 'warnpy3k', Load(), lineno=223, col_offset=4), [Str('In 3.x, os.path.walk is removed in favor of os.walk.', lineno=223, col_offset=22)], [keyword('stacklevel', Num(2, lineno=224, col_offset=33))], None, None, lineno=223, col_offset=4), lineno=223, col_offset=4), TryExcept([Assign([Name('names', Store(), lineno=226, col_offset=8)], Call(Attribute(Name('os', Load(), lineno=226, col_offset=16), 'listdir', Load(), lineno=226, col_offset=16), [Name('top', Load(), lineno=226, col_offset=27)], [], None, None, lineno=226, col_offset=16), lineno=226, col_offset=8)], [ExceptHandler(Attribute(Name('os', Load(), lineno=227, col_offset=11), 'error', Load(), lineno=227, col_offset=11), None, [Return(None, lineno=228, col_offset=8)], lineno=227, col_offset=4)], [], lineno=225, col_offset=4), Expr(Call(Name('func', Load(), lineno=229, col_offset=4), [Name('arg', Load(), lineno=229, col_offset=9), Name('top', Load(), lineno=229, col_offset=14), Name('names', Load(), lineno=229, col_offset=19)], [], None, None, lineno=229, col_offset=4), lineno=229, col_offset=4), For(Name('name', Store(), lineno=230, col_offset=8), Name('names', Load(), lineno=230, col_offset=16), [Assign([Name('name', Store(), lineno=231, col_offset=8)], Call(Name('join', Load(), lineno=231, col_offset=15), [Name('top', Load(), lineno=231, col_offset=20), Name('name', Load(), lineno=231, col_offset=25)], [], None, None, lineno=231, col_offset=15), lineno=231, col_offset=8), TryExcept([Assign([Name('st', Store(), lineno=233, col_offset=12)], Call(Attribute(Name('os', Load(), lineno=233, col_offset=17), 'lstat', Load(), lineno=233, col_offset=17), [Name('name', Load(), lineno=233, col_offset=26)], [], None, None, lineno=233, col_offset=17), lineno=233, col_offset=12)], [ExceptHandler(Attribute(Name('os', Load(), lineno=234, col_offset=15), 'error', Load(), lineno=234, col_offset=15), None, [Continue( lineno=235, col_offset=12)], lineno=234, col_offset=8)], [], lineno=232, col_offset=8), If(Call(Attribute(Name('stat', Load(), lineno=236, col_offset=11), 'S_ISDIR', Load(), lineno=236, col_offset=11), [Attribute(Name('st', Load(), lineno=236, col_offset=24), 'st_mode', Load(), lineno=236, col_offset=24)], [], None, None, lineno=236, col_offset=11), [Expr(Call(Name('walk', Load(), lineno=237, col_offset=12), [Name('name', Load(), lineno=237, col_offset=17), Name('func', Load(), lineno=237, col_offset=23), Name('arg', Load(), lineno=237, col_offset=29)], [], None, None, lineno=237, col_offset=12), lineno=237, col_offset=12)], [], lineno=236, col_offset=8)], [], lineno=230, col_offset=4)], [], lineno=209, col_offset=0), FunctionDef('expanduser', arguments([Name('path', Param(), lineno=249, col_offset=15)], None, None, []), [Expr(Str('Expand ~ and ~user constructions.  If user or $HOME is unknown,\n    do nothing.', lineno=251, col_offset=-1), lineno=251, col_offset=-1), If(UnaryOp(Not(), Call(Attribute(Name('path', Load(), lineno=252, col_offset=11), 'startswith', Load(), lineno=252, col_offset=11), [Str('~', lineno=252, col_offset=27)], [], None, None, lineno=252, col_offset=11), lineno=252, col_offset=7), [Return(Name('path', Load(), lineno=253, col_offset=15), lineno=253, col_offset=8)], [], lineno=252, col_offset=4), Assign([Name('i', Store(), lineno=254, col_offset=4)], Call(Attribute(Name('path', Load(), lineno=254, col_offset=8), 'find', Load(), lineno=254, col_offset=8), [Str('/', lineno=254, col_offset=18), Num(1, lineno=254, col_offset=23)], [], None, None, lineno=254, col_offset=8), lineno=254, col_offset=4), If(Compare(Name('i', Load(), lineno=255, col_offset=7), [Lt()], [Num(0, lineno=255, col_offset=11)], lineno=255, col_offset=7), [Assign([Name('i', Store(), lineno=256, col_offset=8)], Call(Name('len', Load(), lineno=256, col_offset=12), [Name('path', Load(), lineno=256, col_offset=16)], [], None, None, lineno=256, col_offset=12), lineno=256, col_offset=8)], [], lineno=255, col_offset=4), If(Compare(Name('i', Load(), lineno=257, col_offset=7), [Eq()], [Num(1, lineno=257, col_offset=12)], lineno=257, col_offset=7), [If(Compare(Str('HOME', lineno=258, col_offset=11), [NotIn()], [Attribute(Name('os', Load(), lineno=258, col_offset=25), 'environ', Load(), lineno=258, col_offset=25)], lineno=258, col_offset=11), [Import([alias('pwd', None)], lineno=259, col_offset=12), Assign([Name('userhome', Store(), lineno=260, col_offset=12)], Attribute(Call(Attribute(Name('pwd', Load(), lineno=260, col_offset=23), 'getpwuid', Load(), lineno=260, col_offset=23), [Call(Attribute(Name('os', Load(), lineno=260, col_offset=36), 'getuid', Load(), lineno=260, col_offset=36), [], [], None, None, lineno=260, col_offset=36)], [], None, None, lineno=260, col_offset=23), 'pw_dir', Load(), lineno=260, col_offset=23), lineno=260, col_offset=12)], [Assign([Name('userhome', Store(), lineno=262, col_offset=12)], Subscript(Attribute(Name('os', Load(), lineno=262, col_offset=23), 'environ', Load(), lineno=262, col_offset=23), Index(Str('HOME', lineno=262, col_offset=34)), Load(), lineno=262, col_offset=23), lineno=262, col_offset=12)], lineno=258, col_offset=8)], [Import([alias('pwd', None)], lineno=264, col_offset=8), TryExcept([Assign([Name('pwent', Store(), lineno=266, col_offset=12)], Call(Attribute(Name('pwd', Load(), lineno=266, col_offset=20), 'getpwnam', Load(), lineno=266, col_offset=20), [Subscript(Name('path', Load(), lineno=266, col_offset=33), Slice(Num(1, lineno=266, col_offset=38), Name('i', Load(), lineno=266, col_offset=40), None), Load(), lineno=266, col_offset=33)], [], None, None, lineno=266, col_offset=20), lineno=266, col_offset=12)], [ExceptHandler(Name('KeyError', Load(), lineno=267, col_offset=15), None, [Return(Name('path', Load(), lineno=268, col_offset=19), lineno=268, col_offset=12)], lineno=267, col_offset=8)], [], lineno=265, col_offset=8), Assign([Name('userhome', Store(), lineno=269, col_offset=8)], Attribute(Name('pwent', Load(), lineno=269, col_offset=19), 'pw_dir', Load(), lineno=269, col_offset=19), lineno=269, col_offset=8)], lineno=257, col_offset=4), Assign([Name('userhome', Store(), lineno=270, col_offset=4)], BoolOp(Or(), [Call(Attribute(Name('userhome', Load(), lineno=270, col_offset=15), 'rstrip', Load(), lineno=270, col_offset=15), [Str('/', lineno=270, col_offset=31)], [], None, None, lineno=270, col_offset=15), Name('userhome', Load(), lineno=270, col_offset=39)], lineno=270, col_offset=15), lineno=270, col_offset=4), Return(BinOp(Name('userhome', Load(), lineno=271, col_offset=11), Add(), Subscript(Name('path', Load(), lineno=271, col_offset=22), Slice(Name('i', Load(), lineno=271, col_offset=27), None, None), Load(), lineno=271, col_offset=22), lineno=271, col_offset=11), lineno=271, col_offset=4)], [], lineno=249, col_offset=0), Assign([Name('_varprog', Store(), lineno=278, col_offset=0)], Name('None', Load(), lineno=278, col_offset=11), lineno=278, col_offset=0), FunctionDef('expandvars', arguments([Name('path', Param(), lineno=280, col_offset=15)], None, None, []), [Expr(Str('Expand shell variables of form $var and ${var}.  Unknown variables\n    are left unchanged.', lineno=282, col_offset=-1), lineno=282, col_offset=-1), Global(['_varprog'], lineno=283, col_offset=4), If(Compare(Str('$', lineno=284, col_offset=7), [NotIn()], [Name('path', Load(), lineno=284, col_offset=18)], lineno=284, col_offset=7), [Return(Name('path', Load(), lineno=285, col_offset=15), lineno=285, col_offset=8)], [], lineno=284, col_offset=4), If(UnaryOp(Not(), Name('_varprog', Load(), lineno=286, col_offset=11), lineno=286, col_offset=7), [Import([alias('re', None)], lineno=287, col_offset=8), Assign([Name('_varprog', Store(), lineno=288, col_offset=8)], Call(Attribute(Name('re', Load(), lineno=288, col_offset=19), 'compile', Load(), lineno=288, col_offset=19), [Str('\\$(\\w+|\\{[^}]*\\})', lineno=288, col_offset=30)], [], None, None, lineno=288, col_offset=19), lineno=288, col_offset=8)], [], lineno=286, col_offset=4), Assign([Name('i', Store(), lineno=289, col_offset=4)], Num(0, lineno=289, col_offset=8), lineno=289, col_offset=4), While(Name('True', Load(), lineno=290, col_offset=10), [Assign([Name('m', Store(), lineno=291, col_offset=8)], Call(Attribute(Name('_varprog', Load(), lineno=291, col_offset=12), 'search', Load(), lineno=291, col_offset=12), [Name('path', Load(), lineno=291, col_offset=28), Name('i', Load(), lineno=291, col_offset=34)], [], None, None, lineno=291, col_offset=12), lineno=291, col_offset=8), If(UnaryOp(Not(), Name('m', Load(), lineno=292, col_offset=15), lineno=292, col_offset=11), [Break( lineno=293, col_offset=12)], [], lineno=292, col_offset=8), Assign([Tuple([Name('i', Store(), lineno=294, col_offset=8), Name('j', Store(), lineno=294, col_offset=11)], Store(), lineno=294, col_offset=8)], Call(Attribute(Name('m', Load(), lineno=294, col_offset=15), 'span', Load(), lineno=294, col_offset=15), [Num(0, lineno=294, col_offset=22)], [], None, None, lineno=294, col_offset=15), lineno=294, col_offset=8), Assign([Name('name', Store(), lineno=295, col_offset=8)], Call(Attribute(Name('m', Load(), lineno=295, col_offset=15), 'group', Load(), lineno=295, col_offset=15), [Num(1, lineno=295, col_offset=23)], [], None, None, lineno=295, col_offset=15), lineno=295, col_offset=8), If(BoolOp(And(), [Call(Attribute(Name('name', Load(), lineno=296, col_offset=11), 'startswith', Load(), lineno=296, col_offset=11), [Str('{', lineno=296, col_offset=27)], [], None, None, lineno=296, col_offset=11), Call(Attribute(Name('name', Load(), lineno=296, col_offset=36), 'endswith', Load(), lineno=296, col_offset=36), [Str('}', lineno=296, col_offset=50)], [], None, None, lineno=296, col_offset=36)], lineno=296, col_offset=11), [Assign([Name('name', Store(), lineno=297, col_offset=12)], Subscript(Name('name', Load(), lineno=297, col_offset=19), Slice(Num(1, lineno=297, col_offset=24), Num(-1, lineno=297, col_offset=27), None), Load(), lineno=297, col_offset=19), lineno=297, col_offset=12)], [], lineno=296, col_offset=8), If(Compare(Name('name', Load(), lineno=298, col_offset=11), [In()], [Attribute(Name('os', Load(), lineno=298, col_offset=19), 'environ', Load(), lineno=298, col_offset=19)], lineno=298, col_offset=11), [Assign([Name('tail', Store(), lineno=299, col_offset=12)], Subscript(Name('path', Load(), lineno=299, col_offset=19), Slice(Name('j', Load(), lineno=299, col_offset=24), None, None), Load(), lineno=299, col_offset=19), lineno=299, col_offset=12), Assign([Name('path', Store(), lineno=300, col_offset=12)], BinOp(Subscript(Name('path', Load(), lineno=300, col_offset=19), Slice(None, Name('i', Load(), lineno=300, col_offset=25), None), Load(), lineno=300, col_offset=19), Add(), Subscript(Attribute(Name('os', Load(), lineno=300, col_offset=30), 'environ', Load(), lineno=300, col_offset=30), Index(Name('name', Load(), lineno=300, col_offset=41)), Load(), lineno=300, col_offset=30), lineno=300, col_offset=19), lineno=300, col_offset=12), Assign([Name('i', Store(), lineno=301, col_offset=12)], Call(Name('len', Load(), lineno=301, col_offset=16), [Name('path', Load(), lineno=301, col_offset=20)], [], None, None, lineno=301, col_offset=16), lineno=301, col_offset=12), AugAssign(Name('path', Store(), lineno=302, col_offset=12), Add(), Name('tail', Load(), lineno=302, col_offset=20), lineno=302, col_offset=12)], [Assign([Name('i', Store(), lineno=304, col_offset=12)], Name('j', Load(), lineno=304, col_offset=16), lineno=304, col_offset=12)], lineno=298, col_offset=8)], [], lineno=290, col_offset=4), Return(Name('path', Load(), lineno=305, col_offset=11), lineno=305, col_offset=4)], [], lineno=280, col_offset=0), FunctionDef('normpath', arguments([Name('path', Param(), lineno=312, col_offset=13)], None, None, []), [Expr(Str('Normalize path, eliminating double slashes, etc.', lineno=313, col_offset=4), lineno=313, col_offset=4), Assign([Tuple([Name('slash', Store(), lineno=315, col_offset=4), Name('dot', Store(), lineno=315, col_offset=11)], Store(), lineno=315, col_offset=4)], IfExp(Call(Name('isinstance', Load(), lineno=315, col_offset=33), [Name('path', Load(), lineno=315, col_offset=44), Name('unicode', Load(), lineno=315, col_offset=50)], [], None, None, lineno=315, col_offset=33), Tuple([Str(u'/', lineno=315, col_offset=18), Str(u'.', lineno=315, col_offset=24)], Load(), lineno=315, col_offset=18), Tuple([Str('/', lineno=315, col_offset=65), Str('.', lineno=315, col_offset=70)], Load(), lineno=315, col_offset=65), lineno=315, col_offset=17), lineno=315, col_offset=4), If(Compare(Name('path', Load(), lineno=316, col_offset=7), [Eq()], [Str('', lineno=316, col_offset=15)], lineno=316, col_offset=7), [Return(Name('dot', Load(), lineno=317, col_offset=15), lineno=317, col_offset=8)], [], lineno=316, col_offset=4), Assign([Name('initial_slashes', Store(), lineno=318, col_offset=4)], Call(Attribute(Name('path', Load(), lineno=318, col_offset=22), 'startswith', Load(), lineno=318, col_offset=22), [Str('/', lineno=318, col_offset=38)], [], None, None, lineno=318, col_offset=22), lineno=318, col_offset=4), If(BoolOp(And(), [Name('initial_slashes', Load(), lineno=321, col_offset=8), Call(Attribute(Name('path', Load(), lineno=322, col_offset=8), 'startswith', Load(), lineno=322, col_offset=8), [Str('//', lineno=322, col_offset=24)], [], None, None, lineno=322, col_offset=8), UnaryOp(Not(), Call(Attribute(Name('path', Load(), lineno=322, col_offset=38), 'startswith', Load(), lineno=322, col_offset=38), [Str('///', lineno=322, col_offset=54)], [], None, None, lineno=322, col_offset=38), lineno=322, col_offset=34)], lineno=321, col_offset=8), [Assign([Name('initial_slashes', Store(), lineno=323, col_offset=8)], Num(2, lineno=323, col_offset=26), lineno=323, col_offset=8)], [], lineno=321, col_offset=4), Assign([Name('comps', Store(), lineno=324, col_offset=4)], Call(Attribute(Name('path', Load(), lineno=324, col_offset=12), 'split', Load(), lineno=324, col_offset=12), [Str('/', lineno=324, col_offset=23)], [], None, None, lineno=324, col_offset=12), lineno=324, col_offset=4), Assign([Name('new_comps', Store(), lineno=325, col_offset=4)], List([], Load(), lineno=325, col_offset=16), lineno=325, col_offset=4), For(Name('comp', Store(), lineno=326, col_offset=8), Name('comps', Load(), lineno=326, col_offset=16), [If(Compare(Name('comp', Load(), lineno=327, col_offset=11), [In()], [Tuple([Str('', lineno=327, col_offset=20), Str('.', lineno=327, col_offset=24)], Load(), lineno=327, col_offset=20)], lineno=327, col_offset=11), [Continue( lineno=328, col_offset=12)], [], lineno=327, col_offset=8), If(BoolOp(Or(), [Compare(Name('comp', Load(), lineno=329, col_offset=12), [NotEq()], [Str('..', lineno=329, col_offset=20)], lineno=329, col_offset=12), BoolOp(And(), [UnaryOp(Not(), Name('initial_slashes', Load(), lineno=329, col_offset=33), lineno=329, col_offset=29), UnaryOp(Not(), Name('new_comps', Load(), lineno=329, col_offset=57), lineno=329, col_offset=53)], lineno=329, col_offset=29), BoolOp(And(), [Name('new_comps', Load(), lineno=330, col_offset=14), Compare(Subscript(Name('new_comps', Load(), lineno=330, col_offset=28), Index(Num(-1, lineno=330, col_offset=39)), Load(), lineno=330, col_offset=28), [Eq()], [Str('..', lineno=330, col_offset=45)], lineno=330, col_offset=28)], lineno=330, col_offset=14)], lineno=329, col_offset=12), [Expr(Call(Attribute(Name('new_comps', Load(), lineno=331, col_offset=12), 'append', Load(), lineno=331, col_offset=12), [Name('comp', Load(), lineno=331, col_offset=29)], [], None, None, lineno=331, col_offset=12), lineno=331, col_offset=12)], [If(Name('new_comps', Load(), lineno=332, col_offset=13), [Expr(Call(Attribute(Name('new_comps', Load(), lineno=333, col_offset=12), 'pop', Load(), lineno=333, col_offset=12), [], [], None, None, lineno=333, col_offset=12), lineno=333, col_offset=12)], [], lineno=332, col_offset=13)], lineno=329, col_offset=8)], [], lineno=326, col_offset=4), Assign([Name('comps', Store(), lineno=334, col_offset=4)], Name('new_comps', Load(), lineno=334, col_offset=12), lineno=334, col_offset=4), Assign([Name('path', Store(), lineno=335, col_offset=4)], Call(Attribute(Name('slash', Load(), lineno=335, col_offset=11), 'join', Load(), lineno=335, col_offset=11), [Name('comps', Load(), lineno=335, col_offset=22)], [], None, None, lineno=335, col_offset=11), lineno=335, col_offset=4), If(Name('initial_slashes', Load(), lineno=336, col_offset=7), [Assign([Name('path', Store(), lineno=337, col_offset=8)], BinOp(BinOp(Name('slash', Load(), lineno=337, col_offset=15), Mult(), Name('initial_slashes', Load(), lineno=337, col_offset=21), lineno=337, col_offset=15), Add(), Name('path', Load(), lineno=337, col_offset=39), lineno=337, col_offset=15), lineno=337, col_offset=8)], [], lineno=336, col_offset=4), Return(BoolOp(Or(), [Name('path', Load(), lineno=338, col_offset=11), Name('dot', Load(), lineno=338, col_offset=19)], lineno=338, col_offset=11), lineno=338, col_offset=4)], [], lineno=312, col_offset=0), FunctionDef('abspath', arguments([Name('path', Param(), lineno=341, col_offset=12)], None, None, []), [Expr(Str('Return an absolute path.', lineno=342, col_offset=4), lineno=342, col_offset=4), If(UnaryOp(Not(), Call(Name('isabs', Load(), lineno=343, col_offset=11), [Name('path', Load(), lineno=343, col_offset=17)], [], None, None, lineno=343, col_offset=11), lineno=343, col_offset=7), [If(Call(Name('isinstance', Load(), lineno=344, col_offset=11), [Name('path', Load(), lineno=344, col_offset=22), Name('unicode', Load(), lineno=344, col_offset=28)], [], None, None, lineno=344, col_offset=11), [Assign([Name('cwd', Store(), lineno=345, col_offset=12)], Call(Attribute(Name('os', Load(), lineno=345, col_offset=18), 'getcwdu', Load(), lineno=345, col_offset=18), [], [], None, None, lineno=345, col_offset=18), lineno=345, col_offset=12)], [Assign([Name('cwd', Store(), lineno=347, col_offset=12)], Call(Attribute(Name('os', Load(), lineno=347, col_offset=18), 'getcwd', Load(), lineno=347, col_offset=18), [], [], None, None, lineno=347, col_offset=18), lineno=347, col_offset=12)], lineno=344, col_offset=8), Assign([Name('path', Store(), lineno=348, col_offset=8)], Call(Name('join', Load(), lineno=348, col_offset=15), [Name('cwd', Load(), lineno=348, col_offset=20), Name('path', Load(), lineno=348, col_offset=25)], [], None, None, lineno=348, col_offset=15), lineno=348, col_offset=8)], [], lineno=343, col_offset=4), Return(Call(Name('normpath', Load(), lineno=349, col_offset=11), [Name('path', Load(), lineno=349, col_offset=20)], [], None, None, lineno=349, col_offset=11), lineno=349, col_offset=4)], [], lineno=341, col_offset=0), FunctionDef('realpath', arguments([Name('filename', Param(), lineno=355, col_offset=13)], None, None, []), [Expr(Str('Return the canonical path of the specified filename, eliminating any\nsymbolic links encountered in the path.', lineno=357, col_offset=-1), lineno=357, col_offset=-1), If(Call(Name('isabs', Load(), lineno=358, col_offset=7), [Name('filename', Load(), lineno=358, col_offset=13)], [], None, None, lineno=358, col_offset=7), [Assign([Name('bits', Store(), lineno=359, col_offset=8)], BinOp(List([Str('/', lineno=359, col_offset=16)], Load(), lineno=359, col_offset=15), Add(), Subscript(Call(Attribute(Name('filename', Load(), lineno=359, col_offset=23), 'split', Load(), lineno=359, col_offset=23), [Str('/', lineno=359, col_offset=38)], [], None, None, lineno=359, col_offset=23), Slice(Num(1, lineno=359, col_offset=43), None, None), Load(), lineno=359, col_offset=23), lineno=359, col_offset=15), lineno=359, col_offset=8)], [Assign([Name('bits', Store(), lineno=361, col_offset=8)], BinOp(List([Str('', lineno=361, col_offset=16)], Load(), lineno=361, col_offset=15), Add(), Call(Attribute(Name('filename', Load(), lineno=361, col_offset=22), 'split', Load(), lineno=361, col_offset=22), [Str('/', lineno=361, col_offset=37)], [], None, None, lineno=361, col_offset=22), lineno=361, col_offset=15), lineno=361, col_offset=8)], lineno=358, col_offset=4), For(Name('i', Store(), lineno=363, col_offset=8), Call(Name('range', Load(), lineno=363, col_offset=13), [Num(2, lineno=363, col_offset=19), BinOp(Call(Name('len', Load(), lineno=363, col_offset=22), [Name('bits', Load(), lineno=363, col_offset=26)], [], None, None, lineno=363, col_offset=22), Add(), Num(1, lineno=363, col_offset=32), lineno=363, col_offset=22)], [], None, None, lineno=363, col_offset=13), [Assign([Name('component', Store(), lineno=364, col_offset=8)], Call(Name('join', Load(), lineno=364, col_offset=20), [], [], Subscript(Name('bits', Load(), lineno=364, col_offset=26), Slice(Num(0, lineno=364, col_offset=31), Name('i', Load(), lineno=364, col_offset=33), None), Load(), lineno=364, col_offset=26), None, lineno=364, col_offset=20), lineno=364, col_offset=8), If(Call(Name('islink', Load(), lineno=366, col_offset=11), [Name('component', Load(), lineno=366, col_offset=18)], [], None, None, lineno=366, col_offset=11), [Assign([Name('resolved', Store(), lineno=367, col_offset=12)], Call(Name('_resolve_link', Load(), lineno=367, col_offset=23), [Name('component', Load(), lineno=367, col_offset=37)], [], None, None, lineno=367, col_offset=23), lineno=367, col_offset=12), If(Compare(Name('resolved', Load(), lineno=368, col_offset=15), [Is()], [Name('None', Load(), lineno=368, col_offset=27)], lineno=368, col_offset=15), [Return(Call(Name('abspath', Load(), lineno=370, col_offset=23), [Call(Name('join', Load(), lineno=370, col_offset=31), [], [], BinOp(List([Name('component', Load(), lineno=370, col_offset=39)], Load(), lineno=370, col_offset=38), Add(), Subscript(Name('bits', Load(), lineno=370, col_offset=52), Slice(Name('i', Load(), lineno=370, col_offset=57), None, None), Load(), lineno=370, col_offset=52), lineno=370, col_offset=38), None, lineno=370, col_offset=31)], [], None, None, lineno=370, col_offset=23), lineno=370, col_offset=16)], [Assign([Name('newpath', Store(), lineno=372, col_offset=16)], Call(Name('join', Load(), lineno=372, col_offset=26), [], [], BinOp(List([Name('resolved', Load(), lineno=372, col_offset=34)], Load(), lineno=372, col_offset=33), Add(), Subscript(Name('bits', Load(), lineno=372, col_offset=46), Slice(Name('i', Load(), lineno=372, col_offset=51), None, None), Load(), lineno=372, col_offset=46), lineno=372, col_offset=33), None, lineno=372, col_offset=26), lineno=372, col_offset=16), Return(Call(Name('realpath', Load(), lineno=373, col_offset=23), [Name('newpath', Load(), lineno=373, col_offset=32)], [], None, None, lineno=373, col_offset=23), lineno=373, col_offset=16)], lineno=368, col_offset=12)], [], lineno=366, col_offset=8)], [], lineno=363, col_offset=4), Return(Call(Name('abspath', Load(), lineno=375, col_offset=11), [Name('filename', Load(), lineno=375, col_offset=19)], [], None, None, lineno=375, col_offset=11), lineno=375, col_offset=4)], [], lineno=355, col_offset=0), FunctionDef('_resolve_link', arguments([Name('path', Param(), lineno=378, col_offset=18)], None, None, []), [Expr(Str("Internal helper function.  Takes a path and follows symlinks\n    until we either arrive at something that isn't a symlink, or\n    encounter a path we've seen before (meaning that there's a loop).\n    ", lineno=382, col_offset=-1), lineno=382, col_offset=-1), Assign([Name('paths_seen', Store(), lineno=383, col_offset=4)], Call(Name('set', Load(), lineno=383, col_offset=17), [], [], None, None, lineno=383, col_offset=17), lineno=383, col_offset=4), While(Call(Name('islink', Load(), lineno=384, col_offset=10), [Name('path', Load(), lineno=384, col_offset=17)], [], None, None, lineno=384, col_offset=10), [If(Compare(Name('path', Load(), lineno=385, col_offset=11), [In()], [Name('paths_seen', Load(), lineno=385, col_offset=19)], lineno=385, col_offset=11), [Return(Name('None', Load(), lineno=387, col_offset=19), lineno=387, col_offset=12)], [], lineno=385, col_offset=8), Expr(Call(Attribute(Name('paths_seen', Load(), lineno=388, col_offset=8), 'add', Load(), lineno=388, col_offset=8), [Name('path', Load(), lineno=388, col_offset=23)], [], None, None, lineno=388, col_offset=8), lineno=388, col_offset=8), Assign([Name('resolved', Store(), lineno=390, col_offset=8)], Call(Attribute(Name('os', Load(), lineno=390, col_offset=19), 'readlink', Load(), lineno=390, col_offset=19), [Name('path', Load(), lineno=390, col_offset=31)], [], None, None, lineno=390, col_offset=19), lineno=390, col_offset=8), If(UnaryOp(Not(), Call(Name('isabs', Load(), lineno=391, col_offset=15), [Name('resolved', Load(), lineno=391, col_offset=21)], [], None, None, lineno=391, col_offset=15), lineno=391, col_offset=11), [Assign([Name('dir', Store(), lineno=392, col_offset=12)], Call(Name('dirname', Load(), lineno=392, col_offset=18), [Name('path', Load(), lineno=392, col_offset=26)], [], None, None, lineno=392, col_offset=18), lineno=392, col_offset=12), Assign([Name('path', Store(), lineno=393, col_offset=12)], Call(Name('normpath', Load(), lineno=393, col_offset=19), [Call(Name('join', Load(), lineno=393, col_offset=28), [Name('dir', Load(), lineno=393, col_offset=33), Name('resolved', Load(), lineno=393, col_offset=38)], [], None, None, lineno=393, col_offset=28)], [], None, None, lineno=393, col_offset=19), lineno=393, col_offset=12)], [Assign([Name('path', Store(), lineno=395, col_offset=12)], Call(Name('normpath', Load(), lineno=395, col_offset=19), [Name('resolved', Load(), lineno=395, col_offset=28)], [], None, None, lineno=395, col_offset=19), lineno=395, col_offset=12)], lineno=391, col_offset=8)], [], lineno=384, col_offset=4), Return(Name('path', Load(), lineno=396, col_offset=11), lineno=396, col_offset=4)], [], lineno=378, col_offset=0), Assign([Name('supports_unicode_filenames', Store(), lineno=398, col_offset=0)], Compare(Attribute(Name('sys', Load(), lineno=398, col_offset=30), 'platform', Load(), lineno=398, col_offset=30), [Eq()], [Str('darwin', lineno=398, col_offset=46)], lineno=398, col_offset=30), lineno=398, col_offset=0), FunctionDef('relpath', arguments([Name('path', Param(), lineno=400, col_offset=12), Name('start', Param(), lineno=400, col_offset=18)], None, None, [Name('curdir', Load(), lineno=400, col_offset=24)]), [Expr(Str('Return a relative version of a path', lineno=401, col_offset=4), lineno=401, col_offset=4), If(UnaryOp(Not(), Name('path', Load(), lineno=403, col_offset=11), lineno=403, col_offset=7), [Raise(Call(Name('ValueError', Load(), lineno=404, col_offset=14), [Str('no path specified', lineno=404, col_offset=25)], [], None, None, lineno=404, col_offset=14), None, None, lineno=404, col_offset=8)], [], lineno=403, col_offset=4), Assign([Name('start_list', Store(), lineno=406, col_offset=4)], ListComp(Name('x', Load(), lineno=406, col_offset=18), [comprehension(Name('x', Store(), lineno=406, col_offset=24), Call(Attribute(Call(Name('abspath', Load(), lineno=406, col_offset=29), [Name('start', Load(), lineno=406, col_offset=37)], [], None, None, lineno=406, col_offset=29), 'split', Load(), lineno=406, col_offset=29), [Name('sep', Load(), lineno=406, col_offset=50)], [], None, None, lineno=406, col_offset=29), [Name('x', Load(), lineno=406, col_offset=58)])], lineno=406, col_offset=18), lineno=406, col_offset=4), Assign([Name('path_list', Store(), lineno=407, col_offset=4)], ListComp(Name('x', Load(), lineno=407, col_offset=17), [comprehension(Name('x', Store(), lineno=407, col_offset=23), Call(Attribute(Call(Name('abspath', Load(), lineno=407, col_offset=28), [Name('path', Load(), lineno=407, col_offset=36)], [], None, None, lineno=407, col_offset=28), 'split', Load(), lineno=407, col_offset=28), [Name('sep', Load(), lineno=407, col_offset=48)], [], None, None, lineno=407, col_offset=28), [Name('x', Load(), lineno=407, col_offset=56)])], lineno=407, col_offset=17), lineno=407, col_offset=4), Assign([Name('i', Store(), lineno=410, col_offset=4)], Call(Name('len', Load(), lineno=410, col_offset=8), [Call(Name('commonprefix', Load(), lineno=410, col_offset=12), [List([Name('start_list', Load(), lineno=410, col_offset=26), Name('path_list', Load(), lineno=410, col_offset=38)], Load(), lineno=410, col_offset=25)], [], None, None, lineno=410, col_offset=12)], [], None, None, lineno=410, col_offset=8), lineno=410, col_offset=4), Assign([Name('rel_list', Store(), lineno=412, col_offset=4)], BinOp(BinOp(List([Name('pardir', Load(), lineno=412, col_offset=16)], Load(), lineno=412, col_offset=15), Mult(), BinOp(Call(Name('len', Load(), lineno=412, col_offset=27), [Name('start_list', Load(), lineno=412, col_offset=31)], [], None, None, lineno=412, col_offset=27), Sub(), Name('i', Load(), lineno=412, col_offset=43), lineno=412, col_offset=27), lineno=412, col_offset=15), Add(), Subscript(Name('path_list', Load(), lineno=412, col_offset=48), Slice(Name('i', Load(), lineno=412, col_offset=58), None, None), Load(), lineno=412, col_offset=48), lineno=412, col_offset=15), lineno=412, col_offset=4), If(UnaryOp(Not(), Name('rel_list', Load(), lineno=413, col_offset=11), lineno=413, col_offset=7), [Return(Name('curdir', Load(), lineno=414, col_offset=15), lineno=414, col_offset=8)], [], lineno=413, col_offset=4), Return(Call(Name('join', Load(), lineno=415, col_offset=11), [], [], Name('rel_list', Load(), lineno=415, col_offset=17), None, lineno=415, col_offset=11), lineno=415, col_offset=4)], [], lineno=400, col_offset=0)])
