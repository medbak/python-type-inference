Module([Expr(Str("Test program for the fcntl C module.\n\nOS/2+EMX doesn't support the file locking operations.\n\n", lineno=5, col_offset=-1), lineno=5, col_offset=-1), Import([alias('os', None)], lineno=6, col_offset=0), Import([alias('struct', None)], lineno=7, col_offset=0), Import([alias('sys', None)], lineno=8, col_offset=0), Import([alias('unittest', None)], lineno=9, col_offset=0), ImportFrom('test.test_support', [alias('verbose', None), alias('TESTFN', None), alias('unlink', None), alias('run_unittest', None), alias('import_module', None)], 0, lineno=10, col_offset=0), Assign([Name('fcntl', Store(), lineno=14, col_offset=0)], Call(Name('import_module', Load(), lineno=14, col_offset=8), [Str('fcntl', lineno=14, col_offset=22)], [], None, None, lineno=14, col_offset=8), lineno=14, col_offset=0), FunctionDef('get_lockdata', arguments([], None, None, []), [If(Call(Attribute(Attribute(Name('sys', Load(), lineno=20, col_offset=7), 'platform', Load(), lineno=20, col_offset=7), 'startswith', Load(), lineno=20, col_offset=7), [Str('atheos', lineno=20, col_offset=31)], [], None, None, lineno=20, col_offset=7), [Assign([Name('start_len', Store(), lineno=21, col_offset=8)], Str('qq', lineno=21, col_offset=20), lineno=21, col_offset=8)], [TryExcept([Expr(Attribute(Name('os', Load(), lineno=24, col_offset=12), 'O_LARGEFILE', Load(), lineno=24, col_offset=12), lineno=24, col_offset=12)], [ExceptHandler(Name('AttributeError', Load(), lineno=25, col_offset=15), None, [Assign([Name('start_len', Store(), lineno=26, col_offset=12)], Str('ll', lineno=26, col_offset=24), lineno=26, col_offset=12)], lineno=25, col_offset=8)], [Assign([Name('start_len', Store(), lineno=28, col_offset=12)], Str('qq', lineno=28, col_offset=24), lineno=28, col_offset=12)], lineno=23, col_offset=8)], lineno=20, col_offset=4), If(Compare(Attribute(Name('sys', Load(), lineno=30, col_offset=7), 'platform', Load(), lineno=30, col_offset=7), [In()], [Tuple([Str('netbsd1', lineno=30, col_offset=24), Str('netbsd2', lineno=30, col_offset=35), Str('netbsd3', lineno=30, col_offset=46), Str('Darwin1.2', lineno=31, col_offset=24), Str('darwin', lineno=31, col_offset=37), Str('freebsd2', lineno=32, col_offset=24), Str('freebsd3', lineno=32, col_offset=36), Str('freebsd4', lineno=32, col_offset=48), Str('freebsd5', lineno=32, col_offset=60), Str('freebsd6', lineno=33, col_offset=24), Str('freebsd7', lineno=33, col_offset=36), Str('freebsd8', lineno=33, col_offset=48), Str('bsdos2', lineno=34, col_offset=24), Str('bsdos3', lineno=34, col_offset=34), Str('bsdos4', lineno=34, col_offset=44), Str('openbsd', lineno=35, col_offset=24), Str('openbsd2', lineno=35, col_offset=35), Str('openbsd3', lineno=35, col_offset=47), Str('openbsd4', lineno=35, col_offset=59)], Load(), lineno=30, col_offset=24)], lineno=30, col_offset=7), [If(Compare(Call(Attribute(Name('struct', Load(), lineno=36, col_offset=11), 'calcsize', Load(), lineno=36, col_offset=11), [Str('l', lineno=36, col_offset=27)], [], None, None, lineno=36, col_offset=11), [Eq()], [Num(8, lineno=36, col_offset=35)], lineno=36, col_offset=11), [Assign([Name('off_t', Store(), lineno=37, col_offset=12)], Str('l', lineno=37, col_offset=20), lineno=37, col_offset=12), Assign([Name('pid_t', Store(), lineno=38, col_offset=12)], Str('i', lineno=38, col_offset=20), lineno=38, col_offset=12)], [Assign([Name('off_t', Store(), lineno=40, col_offset=12)], Str('lxxxx', lineno=40, col_offset=20), lineno=40, col_offset=12), Assign([Name('pid_t', Store(), lineno=41, col_offset=12)], Str('l', lineno=41, col_offset=20), lineno=41, col_offset=12)], lineno=36, col_offset=8), Assign([Name('lockdata', Store(), lineno=42, col_offset=8)], Call(Attribute(Name('struct', Load(), lineno=42, col_offset=19), 'pack', Load(), lineno=42, col_offset=19), [BinOp(BinOp(BinOp(Name('off_t', Load(), lineno=42, col_offset=31), Add(), Name('off_t', Load(), lineno=42, col_offset=39), lineno=42, col_offset=31), Add(), Name('pid_t', Load(), lineno=42, col_offset=47), lineno=42, col_offset=45), Add(), Str('hh', lineno=42, col_offset=55), lineno=42, col_offset=53), Num(0, lineno=42, col_offset=61), Num(0, lineno=42, col_offset=64), Num(0, lineno=42, col_offset=67), Attribute(Name('fcntl', Load(), lineno=43, col_offset=31), 'F_WRLCK', Load(), lineno=43, col_offset=31), Num(0, lineno=43, col_offset=46)], [], None, None, lineno=42, col_offset=19), lineno=42, col_offset=8)], [If(Compare(Attribute(Name('sys', Load(), lineno=44, col_offset=9), 'platform', Load(), lineno=44, col_offset=9), [In()], [List([Str('aix3', lineno=44, col_offset=26), Str('aix4', lineno=44, col_offset=34), Str('hp-uxB', lineno=44, col_offset=42), Str('unixware7', lineno=44, col_offset=52)], Load(), lineno=44, col_offset=25)], lineno=44, col_offset=9), [Assign([Name('lockdata', Store(), lineno=45, col_offset=8)], Call(Attribute(Name('struct', Load(), lineno=45, col_offset=19), 'pack', Load(), lineno=45, col_offset=19), [Str('hhlllii', lineno=45, col_offset=31), Attribute(Name('fcntl', Load(), lineno=45, col_offset=42), 'F_WRLCK', Load(), lineno=45, col_offset=42), Num(0, lineno=45, col_offset=57), Num(0, lineno=45, col_offset=60), Num(0, lineno=45, col_offset=63), Num(0, lineno=45, col_offset=66), Num(0, lineno=45, col_offset=69), Num(0, lineno=45, col_offset=72)], [], None, None, lineno=45, col_offset=19), lineno=45, col_offset=8)], [If(Compare(Attribute(Name('sys', Load(), lineno=46, col_offset=9), 'platform', Load(), lineno=46, col_offset=9), [In()], [List([Str('os2emx', lineno=46, col_offset=26)], Load(), lineno=46, col_offset=25)], lineno=46, col_offset=9), [Assign([Name('lockdata', Store(), lineno=47, col_offset=8)], Name('None', Load(), lineno=47, col_offset=19), lineno=47, col_offset=8)], [Assign([Name('lockdata', Store(), lineno=49, col_offset=8)], Call(Attribute(Name('struct', Load(), lineno=49, col_offset=19), 'pack', Load(), lineno=49, col_offset=19), [BinOp(BinOp(Str('hh', lineno=49, col_offset=31), Add(), Name('start_len', Load(), lineno=49, col_offset=36), lineno=49, col_offset=31), Add(), Str('hh', lineno=49, col_offset=46), lineno=49, col_offset=45), Attribute(Name('fcntl', Load(), lineno=49, col_offset=52), 'F_WRLCK', Load(), lineno=49, col_offset=52), Num(0, lineno=49, col_offset=67), Num(0, lineno=49, col_offset=70), Num(0, lineno=49, col_offset=73), Num(0, lineno=49, col_offset=76), Num(0, lineno=49, col_offset=79)], [], None, None, lineno=49, col_offset=19), lineno=49, col_offset=8)], lineno=46, col_offset=9)], lineno=44, col_offset=9)], lineno=30, col_offset=4), If(Name('lockdata', Load(), lineno=50, col_offset=7), [If(Name('verbose', Load(), lineno=51, col_offset=11), [Print(None, [Str('struct.pack: ', lineno=52, col_offset=18), Call(Name('repr', Load(), lineno=52, col_offset=35), [Name('lockdata', Load(), lineno=52, col_offset=40)], [], None, None, lineno=52, col_offset=35)], True, lineno=52, col_offset=12)], [], lineno=51, col_offset=8)], [], lineno=50, col_offset=4), Return(Name('lockdata', Load(), lineno=53, col_offset=11), lineno=53, col_offset=4)], [], lineno=19, col_offset=0), Assign([Name('lockdata', Store(), lineno=55, col_offset=0)], Call(Name('get_lockdata', Load(), lineno=55, col_offset=11), [], [], None, None, lineno=55, col_offset=11), lineno=55, col_offset=0), ClassDef('TestFcntl', [Attribute(Name('unittest', Load(), lineno=58, col_offset=16), 'TestCase', Load(), lineno=58, col_offset=16)], [FunctionDef('setUp', arguments([Name('self', Param(), lineno=60, col_offset=14)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=61, col_offset=8), 'f', Store(), lineno=61, col_offset=8)], Name('None', Load(), lineno=61, col_offset=17), lineno=61, col_offset=8)], [], lineno=60, col_offset=4), FunctionDef('tearDown', arguments([Name('self', Param(), lineno=63, col_offset=17)], None, None, []), [If(BoolOp(And(), [Attribute(Name('self', Load(), lineno=64, col_offset=11), 'f', Load(), lineno=64, col_offset=11), UnaryOp(Not(), Attribute(Attribute(Name('self', Load(), lineno=64, col_offset=26), 'f', Load(), lineno=64, col_offset=26), 'closed', Load(), lineno=64, col_offset=26), lineno=64, col_offset=22)], lineno=64, col_offset=11), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=65, col_offset=12), 'f', Load(), lineno=65, col_offset=12), 'close', Load(), lineno=65, col_offset=12), [], [], None, None, lineno=65, col_offset=12), lineno=65, col_offset=12)], [], lineno=64, col_offset=8), Expr(Call(Name('unlink', Load(), lineno=66, col_offset=8), [Name('TESTFN', Load(), lineno=66, col_offset=15)], [], None, None, lineno=66, col_offset=8), lineno=66, col_offset=8)], [], lineno=63, col_offset=4), FunctionDef('test_fcntl_fileno', arguments([Name('self', Param(), lineno=68, col_offset=26)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=70, col_offset=8), 'f', Store(), lineno=70, col_offset=8)], Call(Name('open', Load(), lineno=70, col_offset=17), [Name('TESTFN', Load(), lineno=70, col_offset=22), Str('w', lineno=70, col_offset=30)], [], None, None, lineno=70, col_offset=17), lineno=70, col_offset=8), Assign([Name('rv', Store(), lineno=71, col_offset=8)], Call(Attribute(Name('fcntl', Load(), lineno=71, col_offset=13), 'fcntl', Load(), lineno=71, col_offset=13), [Call(Attribute(Attribute(Name('self', Load(), lineno=71, col_offset=25), 'f', Load(), lineno=71, col_offset=25), 'fileno', Load(), lineno=71, col_offset=25), [], [], None, None, lineno=71, col_offset=25), Attribute(Name('fcntl', Load(), lineno=71, col_offset=42), 'F_SETFL', Load(), lineno=71, col_offset=42), Attribute(Name('os', Load(), lineno=71, col_offset=57), 'O_NONBLOCK', Load(), lineno=71, col_offset=57)], [], None, None, lineno=71, col_offset=13), lineno=71, col_offset=8), If(Name('verbose', Load(), lineno=72, col_offset=11), [Print(None, [Str('Status from fcntl with O_NONBLOCK: ', lineno=73, col_offset=18), Name('rv', Load(), lineno=73, col_offset=57)], True, lineno=73, col_offset=12)], [], lineno=72, col_offset=8), If(Compare(Attribute(Name('sys', Load(), lineno=74, col_offset=11), 'platform', Load(), lineno=74, col_offset=11), [NotIn()], [List([Str('os2emx', lineno=74, col_offset=32)], Load(), lineno=74, col_offset=31)], lineno=74, col_offset=11), [Assign([Name('rv', Store(), lineno=75, col_offset=12)], Call(Attribute(Name('fcntl', Load(), lineno=75, col_offset=17), 'fcntl', Load(), lineno=75, col_offset=17), [Call(Attribute(Attribute(Name('self', Load(), lineno=75, col_offset=29), 'f', Load(), lineno=75, col_offset=29), 'fileno', Load(), lineno=75, col_offset=29), [], [], None, None, lineno=75, col_offset=29), Attribute(Name('fcntl', Load(), lineno=75, col_offset=46), 'F_SETLKW', Load(), lineno=75, col_offset=46), Name('lockdata', Load(), lineno=75, col_offset=62)], [], None, None, lineno=75, col_offset=17), lineno=75, col_offset=12), If(Name('verbose', Load(), lineno=76, col_offset=15), [Print(None, [Str('String from fcntl with F_SETLKW: ', lineno=77, col_offset=22), Call(Name('repr', Load(), lineno=77, col_offset=59), [Name('rv', Load(), lineno=77, col_offset=64)], [], None, None, lineno=77, col_offset=59)], True, lineno=77, col_offset=16)], [], lineno=76, col_offset=12)], [], lineno=74, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=78, col_offset=8), 'f', Load(), lineno=78, col_offset=8), 'close', Load(), lineno=78, col_offset=8), [], [], None, None, lineno=78, col_offset=8), lineno=78, col_offset=8)], [], lineno=68, col_offset=4), FunctionDef('test_fcntl_file_descriptor', arguments([Name('self', Param(), lineno=80, col_offset=35)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=82, col_offset=8), 'f', Store(), lineno=82, col_offset=8)], Call(Name('open', Load(), lineno=82, col_offset=17), [Name('TESTFN', Load(), lineno=82, col_offset=22), Str('w', lineno=82, col_offset=30)], [], None, None, lineno=82, col_offset=17), lineno=82, col_offset=8), Assign([Name('rv', Store(), lineno=83, col_offset=8)], Call(Attribute(Name('fcntl', Load(), lineno=83, col_offset=13), 'fcntl', Load(), lineno=83, col_offset=13), [Attribute(Name('self', Load(), lineno=83, col_offset=25), 'f', Load(), lineno=83, col_offset=25), Attribute(Name('fcntl', Load(), lineno=83, col_offset=33), 'F_SETFL', Load(), lineno=83, col_offset=33), Attribute(Name('os', Load(), lineno=83, col_offset=48), 'O_NONBLOCK', Load(), lineno=83, col_offset=48)], [], None, None, lineno=83, col_offset=13), lineno=83, col_offset=8), If(Compare(Attribute(Name('sys', Load(), lineno=84, col_offset=11), 'platform', Load(), lineno=84, col_offset=11), [NotIn()], [List([Str('os2emx', lineno=84, col_offset=32)], Load(), lineno=84, col_offset=31)], lineno=84, col_offset=11), [Assign([Name('rv', Store(), lineno=85, col_offset=12)], Call(Attribute(Name('fcntl', Load(), lineno=85, col_offset=17), 'fcntl', Load(), lineno=85, col_offset=17), [Attribute(Name('self', Load(), lineno=85, col_offset=29), 'f', Load(), lineno=85, col_offset=29), Attribute(Name('fcntl', Load(), lineno=85, col_offset=37), 'F_SETLKW', Load(), lineno=85, col_offset=37), Name('lockdata', Load(), lineno=85, col_offset=53)], [], None, None, lineno=85, col_offset=17), lineno=85, col_offset=12)], [], lineno=84, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=86, col_offset=8), 'f', Load(), lineno=86, col_offset=8), 'close', Load(), lineno=86, col_offset=8), [], [], None, None, lineno=86, col_offset=8), lineno=86, col_offset=8)], [], lineno=80, col_offset=4), FunctionDef('test_fcntl_64_bit', arguments([Name('self', Param(), lineno=88, col_offset=26)], None, None, []), [TryExcept([Assign([Name('cmd', Store(), lineno=92, col_offset=12)], Attribute(Name('fcntl', Load(), lineno=92, col_offset=18), 'F_NOTIFY', Load(), lineno=92, col_offset=18), lineno=92, col_offset=12), Assign([Name('flags', Store(), lineno=94, col_offset=12)], Attribute(Name('fcntl', Load(), lineno=94, col_offset=20), 'DN_MULTISHOT', Load(), lineno=94, col_offset=20), lineno=94, col_offset=12)], [ExceptHandler(Name('AttributeError', Load(), lineno=95, col_offset=15), None, [Expr(Call(Attribute(Name('self', Load(), lineno=96, col_offset=12), 'skipTest', Load(), lineno=96, col_offset=12), [Str('F_NOTIFY or DN_MULTISHOT unavailable', lineno=96, col_offset=26)], [], None, None, lineno=96, col_offset=12), lineno=96, col_offset=12)], lineno=95, col_offset=8)], [], lineno=91, col_offset=8), Assign([Name('fd', Store(), lineno=97, col_offset=8)], Call(Attribute(Name('os', Load(), lineno=97, col_offset=13), 'open', Load(), lineno=97, col_offset=13), [Call(Attribute(Attribute(Name('os', Load(), lineno=97, col_offset=21), 'path', Load(), lineno=97, col_offset=21), 'dirname', Load(), lineno=97, col_offset=21), [Call(Attribute(Attribute(Name('os', Load(), lineno=97, col_offset=37), 'path', Load(), lineno=97, col_offset=37), 'abspath', Load(), lineno=97, col_offset=37), [Name('TESTFN', Load(), lineno=97, col_offset=53)], [], None, None, lineno=97, col_offset=37)], [], None, None, lineno=97, col_offset=21), Attribute(Name('os', Load(), lineno=97, col_offset=63), 'O_RDONLY', Load(), lineno=97, col_offset=63)], [], None, None, lineno=97, col_offset=13), lineno=97, col_offset=8), TryFinally([Expr(Call(Attribute(Name('fcntl', Load(), lineno=99, col_offset=12), 'fcntl', Load(), lineno=99, col_offset=12), [Name('fd', Load(), lineno=99, col_offset=24), Name('cmd', Load(), lineno=99, col_offset=28), Name('flags', Load(), lineno=99, col_offset=33)], [], None, None, lineno=99, col_offset=12), lineno=99, col_offset=12)], [Expr(Call(Attribute(Name('os', Load(), lineno=101, col_offset=12), 'close', Load(), lineno=101, col_offset=12), [Name('fd', Load(), lineno=101, col_offset=21)], [], None, None, lineno=101, col_offset=12), lineno=101, col_offset=12)], lineno=98, col_offset=8)], [], lineno=88, col_offset=4)], [], lineno=58, col_offset=0), FunctionDef('test_main', arguments([], None, None, []), [Expr(Call(Name('run_unittest', Load(), lineno=105, col_offset=4), [Name('TestFcntl', Load(), lineno=105, col_offset=17)], [], None, None, lineno=105, col_offset=4), lineno=105, col_offset=4)], [], lineno=104, col_offset=0), If(Compare(Name('__name__', Load(), lineno=107, col_offset=3), [Eq()], [Str('__main__', lineno=107, col_offset=15)], lineno=107, col_offset=3), [Expr(Call(Name('test_main', Load(), lineno=108, col_offset=4), [], [], None, None, lineno=108, col_offset=4), lineno=108, col_offset=4)], [], lineno=107, col_offset=0)])
