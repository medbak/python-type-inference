Module([Expr(Str(' A Python Benchmark Suite\n\n', lineno=5, col_offset=-1), lineno=5, col_offset=-1), Assign([Name('__copyright__', Store(), lineno=15, col_offset=0)], Str('Copyright (c), 1997-2006, Marc-Andre Lemburg (mal@lemburg.com)\nCopyright (c), 2000-2006, eGenix.com Software GmbH (info@egenix.com)\n\n                   All Rights Reserved.\n\nPermission to use, copy, modify, and distribute this software and its\ndocumentation for any purpose and without fee or royalty is hereby\ngranted, provided that the above copyright notice appear in all copies\nand that both that copyright notice and this permission notice appear\nin supporting documentation or portions thereof, including\nmodifications, that you make.\n\nTHE AUTHOR MARC-ANDRE LEMBURG DISCLAIMS ALL WARRANTIES WITH REGARD TO\nTHIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND\nFITNESS, IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL,\nINDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING\nFROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,\nNEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION\nWITH THE USE OR PERFORMANCE OF THIS SOFTWARE !\n', lineno=35, col_offset=-1), lineno=15, col_offset=0), Import([alias('sys', None), alias('time', None), alias('operator', None), alias('string', None), alias('platform', None)], lineno=37, col_offset=0), ImportFrom('CommandLine', [alias('*', None)], 0, lineno=38, col_offset=0), TryExcept([Import([alias('cPickle', None)], lineno=41, col_offset=4), Assign([Name('pickle', Store(), lineno=42, col_offset=4)], Name('cPickle', Load(), lineno=42, col_offset=13), lineno=42, col_offset=4)], [ExceptHandler(Name('ImportError', Load(), lineno=43, col_offset=7), None, [Import([alias('pickle', None)], lineno=44, col_offset=4)], lineno=43, col_offset=0)], [], lineno=40, col_offset=0), Assign([Name('__version__', Store(), lineno=47, col_offset=0)], Str('2.0', lineno=47, col_offset=14), lineno=47, col_offset=0), Assign([Name('MILLI_SECONDS', Store(), lineno=52, col_offset=0)], Num(1000.0, lineno=52, col_offset=16), lineno=52, col_offset=0), Assign([Name('MICRO_SECONDS', Store(), lineno=53, col_offset=0)], Num(1000000.0, lineno=53, col_offset=16), lineno=53, col_offset=0), Assign([Name('PERCENT', Store(), lineno=56, col_offset=0)], Num(100, lineno=56, col_offset=10), lineno=56, col_offset=0), Assign([Name('LINE', Store(), lineno=59, col_offset=0)], Num(79, lineno=59, col_offset=7), lineno=59, col_offset=0), Assign([Name('MIN_TEST_RUNTIME', Store(), lineno=62, col_offset=0)], Num(0.001, lineno=62, col_offset=19), lineno=62, col_offset=0), Assign([Name('CALIBRATION_RUNS', Store(), lineno=65, col_offset=0)], Num(20, lineno=65, col_offset=19), lineno=65, col_offset=0), Assign([Name('CALIBRATION_LOOPS', Store(), lineno=68, col_offset=0)], Num(20, lineno=68, col_offset=20), lineno=68, col_offset=0), Assign([Name('ALLOW_SKIPPING_CALIBRATION', Store(), lineno=71, col_offset=0)], Num(1, lineno=71, col_offset=29), lineno=71, col_offset=0), Assign([Name('TIMER_TIME_TIME', Store(), lineno=74, col_offset=0)], Str('time.time', lineno=74, col_offset=18), lineno=74, col_offset=0), Assign([Name('TIMER_TIME_CLOCK', Store(), lineno=75, col_offset=0)], Str('time.clock', lineno=75, col_offset=19), lineno=75, col_offset=0), Assign([Name('TIMER_SYSTIMES_PROCESSTIME', Store(), lineno=76, col_offset=0)], Str('systimes.processtime', lineno=76, col_offset=29), lineno=76, col_offset=0), If(Compare(Subscript(Attribute(Name('sys', Load(), lineno=79, col_offset=3), 'platform', Load(), lineno=79, col_offset=3), Slice(None, Num(3, lineno=79, col_offset=17), None), Load(), lineno=79, col_offset=3), [Eq()], [Str('win', lineno=79, col_offset=23)], lineno=79, col_offset=3), [Assign([Name('TIMER_PLATFORM_DEFAULT', Store(), lineno=81, col_offset=4)], Name('TIMER_TIME_CLOCK', Load(), lineno=81, col_offset=29), lineno=81, col_offset=4)], [Assign([Name('TIMER_PLATFORM_DEFAULT', Store(), lineno=84, col_offset=4)], Name('TIMER_TIME_TIME', Load(), lineno=84, col_offset=29), lineno=84, col_offset=4)], lineno=79, col_offset=0), Assign([Name('_debug', Store(), lineno=87, col_offset=0)], Num(0, lineno=87, col_offset=9), lineno=87, col_offset=0), FunctionDef('get_timer', arguments([Name('timertype', Param(), lineno=91, col_offset=14)], None, None, []), [If(Compare(Name('timertype', Load(), lineno=93, col_offset=7), [Eq()], [Name('TIMER_TIME_TIME', Load(), lineno=93, col_offset=20)], lineno=93, col_offset=7), [Return(Attribute(Name('time', Load(), lineno=94, col_offset=15), 'time', Load(), lineno=94, col_offset=15), lineno=94, col_offset=8)], [If(Compare(Name('timertype', Load(), lineno=95, col_offset=9), [Eq()], [Name('TIMER_TIME_CLOCK', Load(), lineno=95, col_offset=22)], lineno=95, col_offset=9), [Return(Attribute(Name('time', Load(), lineno=96, col_offset=15), 'clock', Load(), lineno=96, col_offset=15), lineno=96, col_offset=8)], [If(Compare(Name('timertype', Load(), lineno=97, col_offset=9), [Eq()], [Name('TIMER_SYSTIMES_PROCESSTIME', Load(), lineno=97, col_offset=22)], lineno=97, col_offset=9), [Import([alias('systimes', None)], lineno=98, col_offset=8), Return(Attribute(Name('systimes', Load(), lineno=99, col_offset=15), 'processtime', Load(), lineno=99, col_offset=15), lineno=99, col_offset=8)], [Raise(Call(Name('TypeError', Load(), lineno=101, col_offset=14), [BinOp(Str('unknown timer type: %s', lineno=101, col_offset=24), Mod(), Name('timertype', Load(), lineno=101, col_offset=51), lineno=101, col_offset=24)], [], None, None, lineno=101, col_offset=14), None, None, lineno=101, col_offset=8)], lineno=97, col_offset=9)], lineno=95, col_offset=9)], lineno=93, col_offset=4)], [], lineno=91, col_offset=0), FunctionDef('get_machine_details', arguments([], None, None, []), [If(Name('_debug', Load(), lineno=105, col_offset=7), [Print(None, [Str('Getting machine details...', lineno=106, col_offset=14)], True, lineno=106, col_offset=8)], [], lineno=105, col_offset=4), Assign([Tuple([Name('buildno', Store(), lineno=107, col_offset=4), Name('builddate', Store(), lineno=107, col_offset=13)], Store(), lineno=107, col_offset=4)], Call(Attribute(Name('platform', Load(), lineno=107, col_offset=25), 'python_build', Load(), lineno=107, col_offset=25), [], [], None, None, lineno=107, col_offset=25), lineno=107, col_offset=4), Assign([Name('python', Store(), lineno=108, col_offset=4)], Call(Attribute(Name('platform', Load(), lineno=108, col_offset=13), 'python_version', Load(), lineno=108, col_offset=13), [], [], None, None, lineno=108, col_offset=13), lineno=108, col_offset=4), TryExcept([Expr(Call(Name('unichr', Load(), lineno=110, col_offset=8), [Num(100000, lineno=110, col_offset=15)], [], None, None, lineno=110, col_offset=8), lineno=110, col_offset=8)], [ExceptHandler(Name('ValueError', Load(), lineno=111, col_offset=11), None, [Assign([Name('unicode', Store(), lineno=113, col_offset=8)], Str('UCS2', lineno=113, col_offset=18), lineno=113, col_offset=8)], lineno=111, col_offset=4), ExceptHandler(Name('NameError', Load(), lineno=114, col_offset=11), None, [Assign([Name('unicode', Store(), lineno=115, col_offset=8)], Name('None', Load(), lineno=115, col_offset=18), lineno=115, col_offset=8)], lineno=114, col_offset=4)], [Assign([Name('unicode', Store(), lineno=118, col_offset=8)], Str('UCS4', lineno=118, col_offset=18), lineno=118, col_offset=8)], lineno=109, col_offset=4), Assign([Tuple([Name('bits', Store(), lineno=119, col_offset=4), Name('linkage', Store(), lineno=119, col_offset=10)], Store(), lineno=119, col_offset=4)], Call(Attribute(Name('platform', Load(), lineno=119, col_offset=20), 'architecture', Load(), lineno=119, col_offset=20), [], [], None, None, lineno=119, col_offset=20), lineno=119, col_offset=4), Return(Dict([Str('platform', lineno=121, col_offset=8), Str('processor', lineno=122, col_offset=8), Str('executable', lineno=123, col_offset=8), Str('implementation', lineno=124, col_offset=8), Str('python', lineno=126, col_offset=8), Str('compiler', lineno=127, col_offset=8), Str('buildno', lineno=128, col_offset=8), Str('builddate', lineno=129, col_offset=8), Str('unicode', lineno=130, col_offset=8), Str('bits', lineno=131, col_offset=8)], [Call(Attribute(Name('platform', Load(), lineno=121, col_offset=20), 'platform', Load(), lineno=121, col_offset=20), [], [], None, None, lineno=121, col_offset=20), Call(Attribute(Name('platform', Load(), lineno=122, col_offset=21), 'processor', Load(), lineno=122, col_offset=21), [], [], None, None, lineno=122, col_offset=21), Attribute(Name('sys', Load(), lineno=123, col_offset=22), 'executable', Load(), lineno=123, col_offset=22), Call(Call(Name('getattr', Load(), lineno=124, col_offset=26), [Name('platform', Load(), lineno=124, col_offset=34), Str('python_implementation', lineno=124, col_offset=44), Lambda(arguments([], None, None, []), Str('n/a', lineno=125, col_offset=41), lineno=125, col_offset=34)], [], None, None, lineno=124, col_offset=26), [], [], None, None, lineno=124, col_offset=26), Call(Attribute(Name('platform', Load(), lineno=126, col_offset=18), 'python_version', Load(), lineno=126, col_offset=18), [], [], None, None, lineno=126, col_offset=18), Call(Attribute(Name('platform', Load(), lineno=127, col_offset=20), 'python_compiler', Load(), lineno=127, col_offset=20), [], [], None, None, lineno=127, col_offset=20), Name('buildno', Load(), lineno=128, col_offset=19), Name('builddate', Load(), lineno=129, col_offset=21), Name('unicode', Load(), lineno=130, col_offset=19), Name('bits', Load(), lineno=131, col_offset=16)], lineno=120, col_offset=11), lineno=120, col_offset=4)], [], lineno=103, col_offset=0), FunctionDef('print_machine_details', arguments([Name('d', Param(), lineno=134, col_offset=26), Name('indent', Param(), lineno=134, col_offset=29)], None, None, [Str('', lineno=134, col_offset=36)]), [Assign([Name('l', Store(), lineno=136, col_offset=4)], List([Str('Machine Details:', lineno=136, col_offset=9), BinOp(Str('   Platform ID:    %s', lineno=137, col_offset=9), Mod(), Call(Attribute(Name('d', Load(), lineno=137, col_offset=35), 'get', Load(), lineno=137, col_offset=35), [Str('platform', lineno=137, col_offset=41), Str('n/a', lineno=137, col_offset=53)], [], None, None, lineno=137, col_offset=35), lineno=137, col_offset=9), BinOp(Str('   Processor:      %s', lineno=138, col_offset=9), Mod(), Call(Attribute(Name('d', Load(), lineno=138, col_offset=35), 'get', Load(), lineno=138, col_offset=35), [Str('processor', lineno=138, col_offset=41), Str('n/a', lineno=138, col_offset=54)], [], None, None, lineno=138, col_offset=35), lineno=138, col_offset=9), Str('', lineno=139, col_offset=9), Str('Python:', lineno=140, col_offset=9), BinOp(Str('   Implementation: %s', lineno=141, col_offset=9), Mod(), Call(Attribute(Name('d', Load(), lineno=141, col_offset=35), 'get', Load(), lineno=141, col_offset=35), [Str('implementation', lineno=141, col_offset=41), Str('n/a', lineno=141, col_offset=59)], [], None, None, lineno=141, col_offset=35), lineno=141, col_offset=9), BinOp(Str('   Executable:     %s', lineno=142, col_offset=9), Mod(), Call(Attribute(Name('d', Load(), lineno=142, col_offset=35), 'get', Load(), lineno=142, col_offset=35), [Str('executable', lineno=142, col_offset=41), Str('n/a', lineno=142, col_offset=55)], [], None, None, lineno=142, col_offset=35), lineno=142, col_offset=9), BinOp(Str('   Version:        %s', lineno=143, col_offset=9), Mod(), Call(Attribute(Name('d', Load(), lineno=143, col_offset=35), 'get', Load(), lineno=143, col_offset=35), [Str('python', lineno=143, col_offset=41), Str('n/a', lineno=143, col_offset=51)], [], None, None, lineno=143, col_offset=35), lineno=143, col_offset=9), BinOp(Str('   Compiler:       %s', lineno=144, col_offset=9), Mod(), Call(Attribute(Name('d', Load(), lineno=144, col_offset=35), 'get', Load(), lineno=144, col_offset=35), [Str('compiler', lineno=144, col_offset=41), Str('n/a', lineno=144, col_offset=53)], [], None, None, lineno=144, col_offset=35), lineno=144, col_offset=9), BinOp(Str('   Bits:           %s', lineno=145, col_offset=9), Mod(), Call(Attribute(Name('d', Load(), lineno=145, col_offset=35), 'get', Load(), lineno=145, col_offset=35), [Str('bits', lineno=145, col_offset=41), Str('n/a', lineno=145, col_offset=49)], [], None, None, lineno=145, col_offset=35), lineno=145, col_offset=9), BinOp(Str('   Build:          %s (#%s)', lineno=146, col_offset=9), Mod(), Tuple([Call(Attribute(Name('d', Load(), lineno=146, col_offset=42), 'get', Load(), lineno=146, col_offset=42), [Str('builddate', lineno=146, col_offset=48), Str('n/a', lineno=146, col_offset=61)], [], None, None, lineno=146, col_offset=42), Call(Attribute(Name('d', Load(), lineno=147, col_offset=42), 'get', Load(), lineno=147, col_offset=42), [Str('buildno', lineno=147, col_offset=48), Str('n/a', lineno=147, col_offset=59)], [], None, None, lineno=147, col_offset=42)], Load(), lineno=146, col_offset=42), lineno=146, col_offset=9), BinOp(Str('   Unicode:        %s', lineno=148, col_offset=9), Mod(), Call(Attribute(Name('d', Load(), lineno=148, col_offset=35), 'get', Load(), lineno=148, col_offset=35), [Str('unicode', lineno=148, col_offset=41), Str('n/a', lineno=148, col_offset=52)], [], None, None, lineno=148, col_offset=35), lineno=148, col_offset=9)], Load(), lineno=136, col_offset=8), lineno=136, col_offset=4), Print(None, [BinOp(BinOp(Name('indent', Load(), lineno=150, col_offset=10), Add(), Call(Attribute(Name('string', Load(), lineno=150, col_offset=19), 'join', Load(), lineno=150, col_offset=19), [Name('l', Load(), lineno=150, col_offset=31), BinOp(Str('\n', lineno=150, col_offset=34), Add(), Name('indent', Load(), lineno=150, col_offset=41), lineno=150, col_offset=34)], [], None, None, lineno=150, col_offset=19), lineno=150, col_offset=10), Add(), Str('\n', lineno=150, col_offset=51), lineno=150, col_offset=49)], True, lineno=150, col_offset=4)], [], lineno=134, col_offset=0), ClassDef('Test', [], [Expr(Str(' All test must have this class as baseclass. It provides\n        the necessary interface to the benchmark machinery.\n\n        The tests must set .rounds to a value high enough to let the\n        test run between 20-50 seconds. This is needed because\n        clock()-timing only gives rather inaccurate values (on Linux,\n        for example, it is accurate to a few hundreths of a\n        second). If you don\'t want to wait that long, use a warp\n        factor larger than 1.\n\n        It is also important to set the .operations variable to a\n        value representing the number of "virtual operations" done per\n        call of .run().\n\n        If you change a test in some way, don\'t forget to increase\n        its version number.\n\n    ', lineno=173, col_offset=-1), lineno=173, col_offset=-1), Assign([Name('version', Store(), lineno=180, col_offset=4)], Num(2.0, lineno=180, col_offset=14), lineno=180, col_offset=4), Assign([Name('operations', Store(), lineno=189, col_offset=4)], Num(1, lineno=189, col_offset=17), lineno=189, col_offset=4), Assign([Name('rounds', Store(), lineno=194, col_offset=4)], Num(100000, lineno=194, col_offset=13), lineno=194, col_offset=4), Assign([Name('is_a_test', Store(), lineno=199, col_offset=4)], Num(1, lineno=199, col_offset=16), lineno=199, col_offset=4), Assign([Name('last_timing', Store(), lineno=202, col_offset=4)], Tuple([Num(0.0, lineno=202, col_offset=19), Num(0.0, lineno=202, col_offset=24), Num(0.0, lineno=202, col_offset=29)], Load(), lineno=202, col_offset=19), lineno=202, col_offset=4), Assign([Name('warp', Store(), lineno=205, col_offset=4)], Num(1, lineno=205, col_offset=11), lineno=205, col_offset=4), Assign([Name('calibration_runs', Store(), lineno=208, col_offset=4)], Name('CALIBRATION_RUNS', Load(), lineno=208, col_offset=23), lineno=208, col_offset=4), Assign([Name('overhead_times', Store(), lineno=211, col_offset=4)], Name('None', Load(), lineno=211, col_offset=21), lineno=211, col_offset=4), Assign([Name('times', Store(), lineno=214, col_offset=4)], List([], Load(), lineno=214, col_offset=12), lineno=214, col_offset=4), Assign([Name('timer', Store(), lineno=217, col_offset=4)], Name('TIMER_PLATFORM_DEFAULT', Load(), lineno=217, col_offset=12), lineno=217, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=219, col_offset=17), Name('warp', Param(), lineno=219, col_offset=23), Name('calibration_runs', Param(), lineno=219, col_offset=34), Name('timer', Param(), lineno=219, col_offset=57)], None, None, [Name('None', Load(), lineno=219, col_offset=28), Name('None', Load(), lineno=219, col_offset=51), Name('None', Load(), lineno=219, col_offset=63)]), [If(Compare(Name('warp', Load(), lineno=222, col_offset=11), [IsNot()], [Name('None', Load(), lineno=222, col_offset=23)], lineno=222, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=223, col_offset=12), 'rounds', Store(), lineno=223, col_offset=12)], Call(Name('int', Load(), lineno=223, col_offset=26), [BinOp(Attribute(Name('self', Load(), lineno=223, col_offset=30), 'rounds', Load(), lineno=223, col_offset=30), Div(), Name('warp', Load(), lineno=223, col_offset=44), lineno=223, col_offset=30)], [], None, None, lineno=223, col_offset=26), lineno=223, col_offset=12), If(Compare(Attribute(Name('self', Load(), lineno=224, col_offset=15), 'rounds', Load(), lineno=224, col_offset=15), [Eq()], [Num(0, lineno=224, col_offset=30)], lineno=224, col_offset=15), [Raise(Call(Name('ValueError', Load(), lineno=225, col_offset=22), [Str('warp factor set too high', lineno=225, col_offset=33)], [], None, None, lineno=225, col_offset=22), None, None, lineno=225, col_offset=16)], [], lineno=224, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=226, col_offset=12), 'warp', Store(), lineno=226, col_offset=12)], Name('warp', Load(), lineno=226, col_offset=24), lineno=226, col_offset=12)], [], lineno=222, col_offset=8), If(Compare(Name('calibration_runs', Load(), lineno=227, col_offset=11), [IsNot()], [Name('None', Load(), lineno=227, col_offset=35)], lineno=227, col_offset=11), [If(BoolOp(And(), [UnaryOp(Not(), Name('ALLOW_SKIPPING_CALIBRATION', Load(), lineno=228, col_offset=20), lineno=228, col_offset=16), Compare(Name('calibration_runs', Load(), lineno=229, col_offset=16), [Lt()], [Num(1, lineno=229, col_offset=35)], lineno=229, col_offset=16)], lineno=228, col_offset=16), [Raise(Call(Name('ValueError', Load(), lineno=230, col_offset=22), [Str('at least one calibration run is required', lineno=230, col_offset=33)], [], None, None, lineno=230, col_offset=22), None, None, lineno=230, col_offset=16)], [], lineno=228, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=231, col_offset=12), 'calibration_runs', Store(), lineno=231, col_offset=12)], Name('calibration_runs', Load(), lineno=231, col_offset=36), lineno=231, col_offset=12)], [], lineno=227, col_offset=8), If(Compare(Name('timer', Load(), lineno=232, col_offset=11), [IsNot()], [Name('None', Load(), lineno=232, col_offset=24)], lineno=232, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=233, col_offset=12), 'timer', Store(), lineno=233, col_offset=12)], Name('timer', Load(), lineno=233, col_offset=25), lineno=233, col_offset=12)], [], lineno=232, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=236, col_offset=8), 'times', Store(), lineno=236, col_offset=8)], List([], Load(), lineno=236, col_offset=21), lineno=236, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=237, col_offset=8), 'overhead_times', Store(), lineno=237, col_offset=8)], List([], Load(), lineno=237, col_offset=30), lineno=237, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=241, col_offset=8), 'version', Store(), lineno=241, col_offset=8)], Attribute(Name('self', Load(), lineno=241, col_offset=23), 'version', Load(), lineno=241, col_offset=23), lineno=241, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=242, col_offset=8), 'operations', Store(), lineno=242, col_offset=8)], Attribute(Name('self', Load(), lineno=242, col_offset=26), 'operations', Load(), lineno=242, col_offset=26), lineno=242, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=243, col_offset=8), 'rounds', Store(), lineno=243, col_offset=8)], Attribute(Name('self', Load(), lineno=243, col_offset=22), 'rounds', Load(), lineno=243, col_offset=22), lineno=243, col_offset=8)], [], lineno=219, col_offset=4), FunctionDef('get_timer', arguments([Name('self', Param(), lineno=245, col_offset=18)], None, None, []), [Expr(Str(' Return the timer function to use for the test.\n\n        ', lineno=249, col_offset=-1), lineno=249, col_offset=-1), Return(Call(Name('get_timer', Load(), lineno=250, col_offset=15), [Attribute(Name('self', Load(), lineno=250, col_offset=25), 'timer', Load(), lineno=250, col_offset=25)], [], None, None, lineno=250, col_offset=15), lineno=250, col_offset=8)], [], lineno=245, col_offset=4), FunctionDef('compatible', arguments([Name('self', Param(), lineno=252, col_offset=19), Name('other', Param(), lineno=252, col_offset=25)], None, None, []), [Expr(Str(' Return 1/0 depending on whether the test is compatible\n            with the other Test instance or not.\n\n        ', lineno=257, col_offset=-1), lineno=257, col_offset=-1), If(Compare(Attribute(Name('self', Load(), lineno=258, col_offset=11), 'version', Load(), lineno=258, col_offset=11), [NotEq()], [Attribute(Name('other', Load(), lineno=258, col_offset=27), 'version', Load(), lineno=258, col_offset=27)], lineno=258, col_offset=11), [Return(Num(0, lineno=259, col_offset=19), lineno=259, col_offset=12)], [], lineno=258, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=260, col_offset=11), 'rounds', Load(), lineno=260, col_offset=11), [NotEq()], [Attribute(Name('other', Load(), lineno=260, col_offset=26), 'rounds', Load(), lineno=260, col_offset=26)], lineno=260, col_offset=11), [Return(Num(0, lineno=261, col_offset=19), lineno=261, col_offset=12)], [], lineno=260, col_offset=8), Return(Num(1, lineno=262, col_offset=15), lineno=262, col_offset=8)], [], lineno=252, col_offset=4), FunctionDef('calibrate_test', arguments([Name('self', Param(), lineno=264, col_offset=23)], None, None, []), [If(Compare(Attribute(Name('self', Load(), lineno=266, col_offset=11), 'calibration_runs', Load(), lineno=266, col_offset=11), [Eq()], [Num(0, lineno=266, col_offset=36)], lineno=266, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=267, col_offset=12), 'overhead_times', Store(), lineno=267, col_offset=12)], List([Num(0.0, lineno=267, col_offset=35)], Load(), lineno=267, col_offset=34), lineno=267, col_offset=12), Return(None, lineno=268, col_offset=12)], [], lineno=266, col_offset=8), Assign([Name('calibrate', Store(), lineno=270, col_offset=8)], Attribute(Name('self', Load(), lineno=270, col_offset=20), 'calibrate', Load(), lineno=270, col_offset=20), lineno=270, col_offset=8), Assign([Name('timer', Store(), lineno=271, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=271, col_offset=16), 'get_timer', Load(), lineno=271, col_offset=16), [], [], None, None, lineno=271, col_offset=16), lineno=271, col_offset=8), Assign([Name('calibration_loops', Store(), lineno=272, col_offset=8)], Call(Name('range', Load(), lineno=272, col_offset=28), [Name('CALIBRATION_LOOPS', Load(), lineno=272, col_offset=34)], [], None, None, lineno=272, col_offset=28), lineno=272, col_offset=8), Assign([Name('prep_times', Store(), lineno=275, col_offset=8)], List([], Load(), lineno=275, col_offset=21), lineno=275, col_offset=8), For(Name('i', Store(), lineno=276, col_offset=12), Call(Name('range', Load(), lineno=276, col_offset=17), [Attribute(Name('self', Load(), lineno=276, col_offset=23), 'calibration_runs', Load(), lineno=276, col_offset=23)], [], None, None, lineno=276, col_offset=17), [Assign([Name('t', Store(), lineno=277, col_offset=12)], Call(Name('timer', Load(), lineno=277, col_offset=16), [], [], None, None, lineno=277, col_offset=16), lineno=277, col_offset=12), For(Name('i', Store(), lineno=278, col_offset=16), Name('calibration_loops', Load(), lineno=278, col_offset=21), [Pass( lineno=279, col_offset=16)], [], lineno=278, col_offset=12), Assign([Name('t', Store(), lineno=280, col_offset=12)], BinOp(Call(Name('timer', Load(), lineno=280, col_offset=16), [], [], None, None, lineno=280, col_offset=16), Sub(), Name('t', Load(), lineno=280, col_offset=26), lineno=280, col_offset=16), lineno=280, col_offset=12), Expr(Call(Attribute(Name('prep_times', Load(), lineno=281, col_offset=12), 'append', Load(), lineno=281, col_offset=12), [Name('t', Load(), lineno=281, col_offset=30)], [], None, None, lineno=281, col_offset=12), lineno=281, col_offset=12)], [], lineno=276, col_offset=8), Assign([Name('min_prep_time', Store(), lineno=282, col_offset=8)], Call(Name('min', Load(), lineno=282, col_offset=24), [Name('prep_times', Load(), lineno=282, col_offset=28)], [], None, None, lineno=282, col_offset=24), lineno=282, col_offset=8), If(Name('_debug', Load(), lineno=283, col_offset=11), [Print(None, [], True, lineno=284, col_offset=12), Print(None, [BinOp(Str('Calib. prep time     = %.6fms', lineno=285, col_offset=18), Mod(), BinOp(Name('min_prep_time', Load(), lineno=286, col_offset=16), Mult(), Name('MILLI_SECONDS', Load(), lineno=286, col_offset=32), lineno=286, col_offset=16), lineno=285, col_offset=18)], True, lineno=285, col_offset=12)], [], lineno=283, col_offset=8), For(Name('i', Store(), lineno=290, col_offset=12), Call(Name('range', Load(), lineno=290, col_offset=17), [Attribute(Name('self', Load(), lineno=290, col_offset=23), 'calibration_runs', Load(), lineno=290, col_offset=23)], [], None, None, lineno=290, col_offset=17), [Assign([Name('t', Store(), lineno=291, col_offset=12)], Call(Name('timer', Load(), lineno=291, col_offset=16), [], [], None, None, lineno=291, col_offset=16), lineno=291, col_offset=12), For(Name('i', Store(), lineno=292, col_offset=16), Name('calibration_loops', Load(), lineno=292, col_offset=21), [Expr(Call(Name('calibrate', Load(), lineno=293, col_offset=16), [], [], None, None, lineno=293, col_offset=16), lineno=293, col_offset=16)], [], lineno=292, col_offset=12), Assign([Name('t', Store(), lineno=294, col_offset=12)], BinOp(Call(Name('timer', Load(), lineno=294, col_offset=16), [], [], None, None, lineno=294, col_offset=16), Sub(), Name('t', Load(), lineno=294, col_offset=26), lineno=294, col_offset=16), lineno=294, col_offset=12), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=295, col_offset=12), 'overhead_times', Load(), lineno=295, col_offset=12), 'append', Load(), lineno=295, col_offset=12), [BinOp(BinOp(Name('t', Load(), lineno=295, col_offset=39), Div(), Name('CALIBRATION_LOOPS', Load(), lineno=295, col_offset=43), lineno=295, col_offset=39), Sub(), Name('min_prep_time', Load(), lineno=296, col_offset=41), lineno=295, col_offset=39)], [], None, None, lineno=295, col_offset=12), lineno=295, col_offset=12)], [], lineno=290, col_offset=8), Assign([Name('min_overhead', Store(), lineno=299, col_offset=8)], Call(Name('min', Load(), lineno=299, col_offset=23), [Attribute(Name('self', Load(), lineno=299, col_offset=27), 'overhead_times', Load(), lineno=299, col_offset=27)], [], None, None, lineno=299, col_offset=23), lineno=299, col_offset=8), Assign([Name('max_overhead', Store(), lineno=300, col_offset=8)], Call(Name('max', Load(), lineno=300, col_offset=23), [Attribute(Name('self', Load(), lineno=300, col_offset=27), 'overhead_times', Load(), lineno=300, col_offset=27)], [], None, None, lineno=300, col_offset=23), lineno=300, col_offset=8), If(Name('_debug', Load(), lineno=301, col_offset=11), [Print(None, [BinOp(Str('Calib. overhead time = %.6fms', lineno=302, col_offset=18), Mod(), BinOp(Name('min_overhead', Load(), lineno=303, col_offset=16), Mult(), Name('MILLI_SECONDS', Load(), lineno=303, col_offset=31), lineno=303, col_offset=16), lineno=302, col_offset=18)], True, lineno=302, col_offset=12)], [], lineno=301, col_offset=8), If(Compare(Name('min_overhead', Load(), lineno=304, col_offset=11), [Lt()], [Num(0.0, lineno=304, col_offset=26)], lineno=304, col_offset=11), [Raise(Call(Name('ValueError', Load(), lineno=305, col_offset=18), [Str('calibration setup did not work', lineno=305, col_offset=29)], [], None, None, lineno=305, col_offset=18), None, None, lineno=305, col_offset=12)], [], lineno=304, col_offset=8), If(Compare(BinOp(Name('max_overhead', Load(), lineno=306, col_offset=11), Sub(), Name('min_overhead', Load(), lineno=306, col_offset=26), lineno=306, col_offset=11), [Gt()], [Num(0.1, lineno=306, col_offset=41)], lineno=306, col_offset=11), [Raise(Call(Name('ValueError', Load(), lineno=307, col_offset=18), [BinOp(Str('overhead calibration timing range too inaccurate: %r - %r', lineno=308, col_offset=16), Mod(), Tuple([Name('min_overhead', Load(), lineno=309, col_offset=29), Name('max_overhead', Load(), lineno=309, col_offset=43)], Load(), lineno=309, col_offset=29), lineno=308, col_offset=16)], [], None, None, lineno=307, col_offset=18), None, None, lineno=307, col_offset=12)], [], lineno=306, col_offset=8)], [], lineno=264, col_offset=4), FunctionDef('run', arguments([Name('self', Param(), lineno=311, col_offset=12)], None, None, []), [Expr(Str(' Run the test in two phases: first calibrate, then\n            do the actual test. Be careful to keep the calibration\n            timing low w/r to the test timing.\n\n        ', lineno=317, col_offset=-1), lineno=317, col_offset=-1), Assign([Name('test', Store(), lineno=318, col_offset=8)], Attribute(Name('self', Load(), lineno=318, col_offset=15), 'test', Load(), lineno=318, col_offset=15), lineno=318, col_offset=8), Assign([Name('timer', Store(), lineno=319, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=319, col_offset=16), 'get_timer', Load(), lineno=319, col_offset=16), [], [], None, None, lineno=319, col_offset=16), lineno=319, col_offset=8), Assign([Name('min_overhead', Store(), lineno=322, col_offset=8)], Call(Name('min', Load(), lineno=322, col_offset=23), [Attribute(Name('self', Load(), lineno=322, col_offset=27), 'overhead_times', Load(), lineno=322, col_offset=27)], [], None, None, lineno=322, col_offset=23), lineno=322, col_offset=8), Assign([Name('t', Store(), lineno=325, col_offset=8)], Call(Name('timer', Load(), lineno=325, col_offset=12), [], [], None, None, lineno=325, col_offset=12), lineno=325, col_offset=8), Expr(Call(Name('test', Load(), lineno=326, col_offset=8), [], [], None, None, lineno=326, col_offset=8), lineno=326, col_offset=8), Assign([Name('t', Store(), lineno=327, col_offset=8)], BinOp(Call(Name('timer', Load(), lineno=327, col_offset=12), [], [], None, None, lineno=327, col_offset=12), Sub(), Name('t', Load(), lineno=327, col_offset=22), lineno=327, col_offset=12), lineno=327, col_offset=8), If(Compare(Name('t', Load(), lineno=328, col_offset=11), [Lt()], [Name('MIN_TEST_RUNTIME', Load(), lineno=328, col_offset=15)], lineno=328, col_offset=11), [Raise(Call(Name('ValueError', Load(), lineno=329, col_offset=18), [Str('warp factor too high: test times are < 10ms', lineno=329, col_offset=29)], [], None, None, lineno=329, col_offset=18), None, None, lineno=329, col_offset=12)], [], lineno=328, col_offset=8), Assign([Name('eff_time', Store(), lineno=331, col_offset=8)], BinOp(Name('t', Load(), lineno=331, col_offset=19), Sub(), Name('min_overhead', Load(), lineno=331, col_offset=23), lineno=331, col_offset=19), lineno=331, col_offset=8), If(Compare(Name('eff_time', Load(), lineno=332, col_offset=11), [Lt()], [Num(0, lineno=332, col_offset=22)], lineno=332, col_offset=11), [Raise(Call(Name('ValueError', Load(), lineno=333, col_offset=18), [Str('wrong calibration', lineno=333, col_offset=29)], [], None, None, lineno=333, col_offset=18), None, None, lineno=333, col_offset=12)], [], lineno=332, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=334, col_offset=8), 'last_timing', Store(), lineno=334, col_offset=8)], Tuple([Name('eff_time', Load(), lineno=334, col_offset=28), Name('t', Load(), lineno=334, col_offset=38), Name('min_overhead', Load(), lineno=334, col_offset=41)], Load(), lineno=334, col_offset=28), lineno=334, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=335, col_offset=8), 'times', Load(), lineno=335, col_offset=8), 'append', Load(), lineno=335, col_offset=8), [Name('eff_time', Load(), lineno=335, col_offset=26)], [], None, None, lineno=335, col_offset=8), lineno=335, col_offset=8)], [], lineno=311, col_offset=4), FunctionDef('calibrate', arguments([Name('self', Param(), lineno=337, col_offset=18)], None, None, []), [Expr(Str(' Calibrate the test.\n\n            This method should execute everything that is needed to\n            setup and run the test - except for the actual operations\n            that you intend to measure. pybench uses this method to\n            measure the test implementation overhead.\n\n        ', lineno=346, col_offset=-1), lineno=346, col_offset=-1), Return(None, lineno=347, col_offset=8)], [], lineno=337, col_offset=4), FunctionDef('test', arguments([Name('self', Param(), lineno=349, col_offset=13)], None, None, []), [Expr(Str(' Run the test.\n\n            The test needs to run self.rounds executing\n            self.operations number of operations each.\n\n        ', lineno=356, col_offset=-1), lineno=356, col_offset=-1), Return(None, lineno=357, col_offset=8)], [], lineno=349, col_offset=4), FunctionDef('stat', arguments([Name('self', Param(), lineno=359, col_offset=13)], None, None, []), [Expr(Str(' Return test run statistics as tuple:\n\n            (minimum run time,\n             average run time,\n             total run time,\n             average time per operation,\n             minimum overhead time)\n\n        ', lineno=369, col_offset=-1), lineno=369, col_offset=-1), Assign([Name('runs', Store(), lineno=370, col_offset=8)], Call(Name('len', Load(), lineno=370, col_offset=15), [Attribute(Name('self', Load(), lineno=370, col_offset=19), 'times', Load(), lineno=370, col_offset=19)], [], None, None, lineno=370, col_offset=15), lineno=370, col_offset=8), If(Compare(Name('runs', Load(), lineno=371, col_offset=11), [Eq()], [Num(0, lineno=371, col_offset=19)], lineno=371, col_offset=11), [Return(Tuple([Num(0.0, lineno=372, col_offset=19), Num(0.0, lineno=372, col_offset=24), Num(0.0, lineno=372, col_offset=29), Num(0.0, lineno=372, col_offset=34)], Load(), lineno=372, col_offset=19), lineno=372, col_offset=12)], [], lineno=371, col_offset=8), Assign([Name('min_time', Store(), lineno=373, col_offset=8)], Call(Name('min', Load(), lineno=373, col_offset=19), [Attribute(Name('self', Load(), lineno=373, col_offset=23), 'times', Load(), lineno=373, col_offset=23)], [], None, None, lineno=373, col_offset=19), lineno=373, col_offset=8), Assign([Name('total_time', Store(), lineno=374, col_offset=8)], Call(Name('reduce', Load(), lineno=374, col_offset=21), [Attribute(Name('operator', Load(), lineno=374, col_offset=28), 'add', Load(), lineno=374, col_offset=28), Attribute(Name('self', Load(), lineno=374, col_offset=42), 'times', Load(), lineno=374, col_offset=42), Num(0.0, lineno=374, col_offset=54)], [], None, None, lineno=374, col_offset=21), lineno=374, col_offset=8), Assign([Name('avg_time', Store(), lineno=375, col_offset=8)], BinOp(Name('total_time', Load(), lineno=375, col_offset=19), Div(), Call(Name('float', Load(), lineno=375, col_offset=32), [Name('runs', Load(), lineno=375, col_offset=38)], [], None, None, lineno=375, col_offset=32), lineno=375, col_offset=19), lineno=375, col_offset=8), Assign([Name('operation_avg', Store(), lineno=376, col_offset=8)], BinOp(Name('total_time', Load(), lineno=376, col_offset=24), Div(), Call(Name('float', Load(), lineno=376, col_offset=37), [BinOp(BinOp(Name('runs', Load(), lineno=376, col_offset=43), Mult(), Attribute(Name('self', Load(), lineno=377, col_offset=45), 'rounds', Load(), lineno=377, col_offset=45), lineno=376, col_offset=43), Mult(), Attribute(Name('self', Load(), lineno=378, col_offset=45), 'operations', Load(), lineno=378, col_offset=45), lineno=378, col_offset=43)], [], None, None, lineno=376, col_offset=37), lineno=376, col_offset=24), lineno=376, col_offset=8), If(Attribute(Name('self', Load(), lineno=379, col_offset=11), 'overhead_times', Load(), lineno=379, col_offset=11), [Assign([Name('min_overhead', Store(), lineno=380, col_offset=12)], Call(Name('min', Load(), lineno=380, col_offset=27), [Attribute(Name('self', Load(), lineno=380, col_offset=31), 'overhead_times', Load(), lineno=380, col_offset=31)], [], None, None, lineno=380, col_offset=27), lineno=380, col_offset=12)], [Assign([Name('min_overhead', Store(), lineno=382, col_offset=12)], Subscript(Attribute(Name('self', Load(), lineno=382, col_offset=27), 'last_timing', Load(), lineno=382, col_offset=27), Index(Num(2, lineno=382, col_offset=44)), Load(), lineno=382, col_offset=27), lineno=382, col_offset=12)], lineno=379, col_offset=8), Return(Tuple([Name('min_time', Load(), lineno=383, col_offset=15), Name('avg_time', Load(), lineno=383, col_offset=25), Name('total_time', Load(), lineno=383, col_offset=35), Name('operation_avg', Load(), lineno=383, col_offset=47), Name('min_overhead', Load(), lineno=383, col_offset=62)], Load(), lineno=383, col_offset=15), lineno=383, col_offset=8)], [], lineno=359, col_offset=4)], [], lineno=154, col_offset=0), Import([alias('Setup', None)], lineno=390, col_offset=0), ClassDef('Benchmark', [], [Assign([Name('name', Store(), lineno=397, col_offset=4)], Str('', lineno=397, col_offset=11), lineno=397, col_offset=4), Assign([Name('rounds', Store(), lineno=400, col_offset=4)], Num(1, lineno=400, col_offset=13), lineno=400, col_offset=4), Assign([Name('warp', Store(), lineno=403, col_offset=4)], Num(1, lineno=403, col_offset=11), lineno=403, col_offset=4), Assign([Name('roundtime', Store(), lineno=406, col_offset=4)], Num(0, lineno=406, col_offset=16), lineno=406, col_offset=4), Assign([Name('version', Store(), lineno=409, col_offset=4)], Num(2.0, lineno=409, col_offset=14), lineno=409, col_offset=4), Assign([Name('verbose', Store(), lineno=412, col_offset=4)], Num(0, lineno=412, col_offset=14), lineno=412, col_offset=4), Assign([Name('machine_details', Store(), lineno=415, col_offset=4)], Name('None', Load(), lineno=415, col_offset=22), lineno=415, col_offset=4), Assign([Name('timer', Store(), lineno=418, col_offset=4)], Name('TIMER_PLATFORM_DEFAULT', Load(), lineno=418, col_offset=12), lineno=418, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=420, col_offset=17), Name('name', Param(), lineno=420, col_offset=23), Name('verbose', Param(), lineno=420, col_offset=29), Name('timer', Param(), lineno=420, col_offset=43), Name('warp', Param(), lineno=420, col_offset=55), Name('calibration_runs', Param(), lineno=421, col_offset=17)], None, None, [Name('None', Load(), lineno=420, col_offset=37), Name('None', Load(), lineno=420, col_offset=49), Name('None', Load(), lineno=420, col_offset=60), Name('None', Load(), lineno=421, col_offset=34)]), [If(Name('name', Load(), lineno=423, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=424, col_offset=12), 'name', Store(), lineno=424, col_offset=12)], Name('name', Load(), lineno=424, col_offset=24), lineno=424, col_offset=12)], [Assign([Attribute(Name('self', Load(), lineno=426, col_offset=12), 'name', Store(), lineno=426, col_offset=12)], BinOp(Str('%04i-%02i-%02i %02i:%02i:%02i', lineno=426, col_offset=24), Mod(), Subscript(Call(Attribute(Name('time', Load(), lineno=427, col_offset=25), 'localtime', Load(), lineno=427, col_offset=25), [Call(Attribute(Name('time', Load(), lineno=427, col_offset=40), 'time', Load(), lineno=427, col_offset=40), [], [], None, None, lineno=427, col_offset=40)], [], None, None, lineno=427, col_offset=25), Slice(None, Num(6, lineno=427, col_offset=54), None), Load(), lineno=427, col_offset=25), lineno=426, col_offset=24), lineno=426, col_offset=12)], lineno=423, col_offset=8), If(Compare(Name('verbose', Load(), lineno=428, col_offset=11), [IsNot()], [Name('None', Load(), lineno=428, col_offset=26)], lineno=428, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=429, col_offset=12), 'verbose', Store(), lineno=429, col_offset=12)], Name('verbose', Load(), lineno=429, col_offset=27), lineno=429, col_offset=12)], [], lineno=428, col_offset=8), If(Compare(Name('timer', Load(), lineno=430, col_offset=11), [IsNot()], [Name('None', Load(), lineno=430, col_offset=24)], lineno=430, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=431, col_offset=12), 'timer', Store(), lineno=431, col_offset=12)], Name('timer', Load(), lineno=431, col_offset=25), lineno=431, col_offset=12)], [], lineno=430, col_offset=8), If(Compare(Name('warp', Load(), lineno=432, col_offset=11), [IsNot()], [Name('None', Load(), lineno=432, col_offset=23)], lineno=432, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=433, col_offset=12), 'warp', Store(), lineno=433, col_offset=12)], Name('warp', Load(), lineno=433, col_offset=24), lineno=433, col_offset=12)], [], lineno=432, col_offset=8), If(Compare(Name('calibration_runs', Load(), lineno=434, col_offset=11), [IsNot()], [Name('None', Load(), lineno=434, col_offset=35)], lineno=434, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=435, col_offset=12), 'calibration_runs', Store(), lineno=435, col_offset=12)], Name('calibration_runs', Load(), lineno=435, col_offset=36), lineno=435, col_offset=12)], [], lineno=434, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=438, col_offset=8), 'tests', Store(), lineno=438, col_offset=8)], Dict([], [], lineno=438, col_offset=21), lineno=438, col_offset=8), If(Name('_debug', Load(), lineno=439, col_offset=11), [Print(None, [Str('Getting machine details...', lineno=440, col_offset=18)], True, lineno=440, col_offset=12)], [], lineno=439, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=441, col_offset=8), 'machine_details', Store(), lineno=441, col_offset=8)], Call(Name('get_machine_details', Load(), lineno=441, col_offset=31), [], [], None, None, lineno=441, col_offset=31), lineno=441, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=445, col_offset=8), 'version', Store(), lineno=445, col_offset=8)], Attribute(Name('self', Load(), lineno=445, col_offset=23), 'version', Load(), lineno=445, col_offset=23), lineno=445, col_offset=8)], [], lineno=420, col_offset=4), FunctionDef('get_timer', arguments([Name('self', Param(), lineno=447, col_offset=18)], None, None, []), [Expr(Str(' Return the timer function to use for the test.\n\n        ', lineno=451, col_offset=-1), lineno=451, col_offset=-1), Return(Call(Name('get_timer', Load(), lineno=452, col_offset=15), [Attribute(Name('self', Load(), lineno=452, col_offset=25), 'timer', Load(), lineno=452, col_offset=25)], [], None, None, lineno=452, col_offset=15), lineno=452, col_offset=8)], [], lineno=447, col_offset=4), FunctionDef('compatible', arguments([Name('self', Param(), lineno=454, col_offset=19), Name('other', Param(), lineno=454, col_offset=25)], None, None, []), [Expr(Str(' Return 1/0 depending on whether the benchmark is\n            compatible with the other Benchmark instance or not.\n\n        ', lineno=459, col_offset=-1), lineno=459, col_offset=-1), If(Compare(Attribute(Name('self', Load(), lineno=460, col_offset=11), 'version', Load(), lineno=460, col_offset=11), [NotEq()], [Attribute(Name('other', Load(), lineno=460, col_offset=27), 'version', Load(), lineno=460, col_offset=27)], lineno=460, col_offset=11), [Return(Num(0, lineno=461, col_offset=19), lineno=461, col_offset=12)], [], lineno=460, col_offset=8), If(BoolOp(And(), [Compare(Attribute(Name('self', Load(), lineno=462, col_offset=12), 'machine_details', Load(), lineno=462, col_offset=12), [Eq()], [Attribute(Name('other', Load(), lineno=462, col_offset=36), 'machine_details', Load(), lineno=462, col_offset=36)], lineno=462, col_offset=12), Compare(Attribute(Name('self', Load(), lineno=463, col_offset=12), 'timer', Load(), lineno=463, col_offset=12), [NotEq()], [Attribute(Name('other', Load(), lineno=463, col_offset=26), 'timer', Load(), lineno=463, col_offset=26)], lineno=463, col_offset=12)], lineno=462, col_offset=12), [Return(Num(0, lineno=464, col_offset=19), lineno=464, col_offset=12)], [], lineno=462, col_offset=8), If(BoolOp(And(), [Compare(Attribute(Name('self', Load(), lineno=465, col_offset=12), 'calibration_runs', Load(), lineno=465, col_offset=12), [Eq()], [Num(0, lineno=465, col_offset=37)], lineno=465, col_offset=12), Compare(Attribute(Name('other', Load(), lineno=466, col_offset=12), 'calibration_runs', Load(), lineno=466, col_offset=12), [NotEq()], [Num(0, lineno=466, col_offset=38)], lineno=466, col_offset=12)], lineno=465, col_offset=12), [Return(Num(0, lineno=467, col_offset=19), lineno=467, col_offset=12)], [], lineno=465, col_offset=8), If(BoolOp(And(), [Compare(Attribute(Name('self', Load(), lineno=468, col_offset=12), 'calibration_runs', Load(), lineno=468, col_offset=12), [NotEq()], [Num(0, lineno=468, col_offset=37)], lineno=468, col_offset=12), Compare(Attribute(Name('other', Load(), lineno=469, col_offset=12), 'calibration_runs', Load(), lineno=469, col_offset=12), [Eq()], [Num(0, lineno=469, col_offset=38)], lineno=469, col_offset=12)], lineno=468, col_offset=12), [Return(Num(0, lineno=470, col_offset=19), lineno=470, col_offset=12)], [], lineno=468, col_offset=8), Return(Num(1, lineno=471, col_offset=15), lineno=471, col_offset=8)], [], lineno=454, col_offset=4), FunctionDef('load_tests', arguments([Name('self', Param(), lineno=473, col_offset=19), Name('setupmod', Param(), lineno=473, col_offset=25), Name('limitnames', Param(), lineno=473, col_offset=35)], None, None, [Name('None', Load(), lineno=473, col_offset=46)]), [If(Attribute(Name('self', Load(), lineno=476, col_offset=11), 'verbose', Load(), lineno=476, col_offset=11), [Print(None, [Str('Searching for tests ...', lineno=477, col_offset=18)], True, lineno=477, col_offset=12), Print(None, [Str('--------------------------------------', lineno=478, col_offset=18)], True, lineno=478, col_offset=12)], [], lineno=476, col_offset=8), For(Name('testclass', Store(), lineno=479, col_offset=12), Call(Attribute(Attribute(Name('setupmod', Load(), lineno=479, col_offset=25), '__dict__', Load(), lineno=479, col_offset=25), 'values', Load(), lineno=479, col_offset=25), [], [], None, None, lineno=479, col_offset=25), [If(UnaryOp(Not(), Call(Name('hasattr', Load(), lineno=480, col_offset=19), [Name('testclass', Load(), lineno=480, col_offset=27), Str('is_a_test', lineno=480, col_offset=38)], [], None, None, lineno=480, col_offset=19), lineno=480, col_offset=15), [Continue( lineno=481, col_offset=16)], [], lineno=480, col_offset=12), Assign([Name('name', Store(), lineno=482, col_offset=12)], Attribute(Name('testclass', Load(), lineno=482, col_offset=19), '__name__', Load(), lineno=482, col_offset=19), lineno=482, col_offset=12), If(Compare(Name('name', Load(), lineno=483, col_offset=16), [Eq()], [Str('Test', lineno=483, col_offset=24)], lineno=483, col_offset=16), [Continue( lineno=484, col_offset=16)], [], lineno=483, col_offset=12), If(BoolOp(And(), [Compare(Name('limitnames', Load(), lineno=485, col_offset=16), [IsNot()], [Name('None', Load(), lineno=485, col_offset=34)], lineno=485, col_offset=16), Compare(Call(Attribute(Name('limitnames', Load(), lineno=486, col_offset=16), 'search', Load(), lineno=486, col_offset=16), [Name('name', Load(), lineno=486, col_offset=34)], [], None, None, lineno=486, col_offset=16), [Is()], [Name('None', Load(), lineno=486, col_offset=43)], lineno=486, col_offset=16)], lineno=485, col_offset=16), [Continue( lineno=487, col_offset=16)], [], lineno=485, col_offset=12), Assign([Subscript(Attribute(Name('self', Load(), lineno=488, col_offset=12), 'tests', Load(), lineno=488, col_offset=12), Index(Name('name', Load(), lineno=488, col_offset=23)), Store(), lineno=488, col_offset=12)], Call(Name('testclass', Load(), lineno=488, col_offset=31), [], [keyword('warp', Attribute(Name('self', Load(), lineno=489, col_offset=21), 'warp', Load(), lineno=489, col_offset=21)), keyword('calibration_runs', Attribute(Name('self', Load(), lineno=490, col_offset=33), 'calibration_runs', Load(), lineno=490, col_offset=33)), keyword('timer', Attribute(Name('self', Load(), lineno=491, col_offset=22), 'timer', Load(), lineno=491, col_offset=22))], None, None, lineno=488, col_offset=31), lineno=488, col_offset=12)], [], lineno=479, col_offset=8), Assign([Name('l', Store(), lineno=492, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=492, col_offset=12), 'tests', Load(), lineno=492, col_offset=12), 'keys', Load(), lineno=492, col_offset=12), [], [], None, None, lineno=492, col_offset=12), lineno=492, col_offset=8), Expr(Call(Attribute(Name('l', Load(), lineno=493, col_offset=8), 'sort', Load(), lineno=493, col_offset=8), [], [], None, None, lineno=493, col_offset=8), lineno=493, col_offset=8), If(Attribute(Name('self', Load(), lineno=494, col_offset=11), 'verbose', Load(), lineno=494, col_offset=11), [For(Name('name', Store(), lineno=495, col_offset=16), Name('l', Load(), lineno=495, col_offset=24), [Print(None, [BinOp(Str('  %s', lineno=496, col_offset=22), Mod(), Name('name', Load(), lineno=496, col_offset=31), lineno=496, col_offset=22)], True, lineno=496, col_offset=16)], [], lineno=495, col_offset=12), Print(None, [Str('--------------------------------------', lineno=497, col_offset=18)], True, lineno=497, col_offset=12), Print(None, [BinOp(Str('  %i tests found', lineno=498, col_offset=18), Mod(), Call(Name('len', Load(), lineno=498, col_offset=39), [Name('l', Load(), lineno=498, col_offset=43)], [], None, None, lineno=498, col_offset=39), lineno=498, col_offset=18)], True, lineno=498, col_offset=12), Print(None, [], True, lineno=499, col_offset=12)], [], lineno=494, col_offset=8)], [], lineno=473, col_offset=4), FunctionDef('calibrate', arguments([Name('self', Param(), lineno=501, col_offset=18)], None, None, []), [Print(None, [Str('Calibrating tests. Please wait...', lineno=503, col_offset=14)], False, lineno=503, col_offset=8), Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=504, col_offset=8), 'stdout', Load(), lineno=504, col_offset=8), 'flush', Load(), lineno=504, col_offset=8), [], [], None, None, lineno=504, col_offset=8), lineno=504, col_offset=8), If(Attribute(Name('self', Load(), lineno=505, col_offset=11), 'verbose', Load(), lineno=505, col_offset=11), [Print(None, [], True, lineno=506, col_offset=12), Print(None, [], True, lineno=507, col_offset=12), Print(None, [Str('Test                              min      max', lineno=508, col_offset=18)], True, lineno=508, col_offset=12), Print(None, [BinOp(Str('-', lineno=509, col_offset=18), Mult(), Name('LINE', Load(), lineno=509, col_offset=24), lineno=509, col_offset=18)], True, lineno=509, col_offset=12)], [], lineno=505, col_offset=8), Assign([Name('tests', Store(), lineno=510, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=510, col_offset=16), 'tests', Load(), lineno=510, col_offset=16), 'items', Load(), lineno=510, col_offset=16), [], [], None, None, lineno=510, col_offset=16), lineno=510, col_offset=8), Expr(Call(Attribute(Name('tests', Load(), lineno=511, col_offset=8), 'sort', Load(), lineno=511, col_offset=8), [], [], None, None, lineno=511, col_offset=8), lineno=511, col_offset=8), For(Name('i', Store(), lineno=512, col_offset=12), Call(Name('range', Load(), lineno=512, col_offset=17), [Call(Name('len', Load(), lineno=512, col_offset=23), [Name('tests', Load(), lineno=512, col_offset=27)], [], None, None, lineno=512, col_offset=23)], [], None, None, lineno=512, col_offset=17), [Assign([Tuple([Name('name', Store(), lineno=513, col_offset=12), Name('test', Store(), lineno=513, col_offset=18)], Store(), lineno=513, col_offset=12)], Subscript(Name('tests', Load(), lineno=513, col_offset=25), Index(Name('i', Load(), lineno=513, col_offset=31)), Load(), lineno=513, col_offset=25), lineno=513, col_offset=12), Expr(Call(Attribute(Name('test', Load(), lineno=514, col_offset=12), 'calibrate_test', Load(), lineno=514, col_offset=12), [], [], None, None, lineno=514, col_offset=12), lineno=514, col_offset=12), If(Attribute(Name('self', Load(), lineno=515, col_offset=15), 'verbose', Load(), lineno=515, col_offset=15), [Print(None, [BinOp(Str('%30s:  %6.3fms  %6.3fms', lineno=516, col_offset=22), Mod(), Tuple([Name('name', Load(), lineno=517, col_offset=23), BinOp(Call(Name('min', Load(), lineno=518, col_offset=23), [Attribute(Name('test', Load(), lineno=518, col_offset=27), 'overhead_times', Load(), lineno=518, col_offset=27)], [], None, None, lineno=518, col_offset=23), Mult(), Name('MILLI_SECONDS', Load(), lineno=518, col_offset=50), lineno=518, col_offset=23), BinOp(Call(Name('max', Load(), lineno=519, col_offset=23), [Attribute(Name('test', Load(), lineno=519, col_offset=27), 'overhead_times', Load(), lineno=519, col_offset=27)], [], None, None, lineno=519, col_offset=23), Mult(), Name('MILLI_SECONDS', Load(), lineno=519, col_offset=50), lineno=519, col_offset=23)], Load(), lineno=517, col_offset=23), lineno=516, col_offset=22)], True, lineno=516, col_offset=16)], [], lineno=515, col_offset=12)], [], lineno=512, col_offset=8), If(Attribute(Name('self', Load(), lineno=520, col_offset=11), 'verbose', Load(), lineno=520, col_offset=11), [Print(None, [], True, lineno=521, col_offset=12), Print(None, [Str('Done with the calibration.', lineno=522, col_offset=18)], True, lineno=522, col_offset=12)], [Print(None, [Str('done.', lineno=524, col_offset=18)], True, lineno=524, col_offset=12)], lineno=520, col_offset=8), Print(None, [], True, lineno=525, col_offset=8)], [], lineno=501, col_offset=4), FunctionDef('run', arguments([Name('self', Param(), lineno=527, col_offset=12)], None, None, []), [Assign([Name('tests', Store(), lineno=529, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=529, col_offset=16), 'tests', Load(), lineno=529, col_offset=16), 'items', Load(), lineno=529, col_offset=16), [], [], None, None, lineno=529, col_offset=16), lineno=529, col_offset=8), Expr(Call(Attribute(Name('tests', Load(), lineno=530, col_offset=8), 'sort', Load(), lineno=530, col_offset=8), [], [], None, None, lineno=530, col_offset=8), lineno=530, col_offset=8), Assign([Name('timer', Store(), lineno=531, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=531, col_offset=16), 'get_timer', Load(), lineno=531, col_offset=16), [], [], None, None, lineno=531, col_offset=16), lineno=531, col_offset=8), Print(None, [BinOp(Str('Running %i round(s) of the suite at warp factor %i:', lineno=532, col_offset=14), Mod(), Tuple([Attribute(Name('self', Load(), lineno=533, col_offset=15), 'rounds', Load(), lineno=533, col_offset=15), Attribute(Name('self', Load(), lineno=533, col_offset=28), 'warp', Load(), lineno=533, col_offset=28)], Load(), lineno=533, col_offset=15), lineno=532, col_offset=14)], True, lineno=532, col_offset=8), Print(None, [], True, lineno=534, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=535, col_offset=8), 'roundtimes', Store(), lineno=535, col_offset=8)], List([], Load(), lineno=535, col_offset=26), lineno=535, col_offset=8), For(Name('i', Store(), lineno=536, col_offset=12), Call(Name('range', Load(), lineno=536, col_offset=17), [Attribute(Name('self', Load(), lineno=536, col_offset=23), 'rounds', Load(), lineno=536, col_offset=23)], [], None, None, lineno=536, col_offset=17), [If(Attribute(Name('self', Load(), lineno=537, col_offset=15), 'verbose', Load(), lineno=537, col_offset=15), [Print(None, [BinOp(Str(' Round %-25i  effective   absolute  overhead', lineno=538, col_offset=22), Mod(), BinOp(Name('i', Load(), lineno=538, col_offset=72), Add(), Num(1, lineno=538, col_offset=74), lineno=538, col_offset=72), lineno=538, col_offset=22)], True, lineno=538, col_offset=16)], [], lineno=537, col_offset=12), Assign([Name('total_eff_time', Store(), lineno=539, col_offset=12)], Num(0.0, lineno=539, col_offset=29), lineno=539, col_offset=12), For(Name('j', Store(), lineno=540, col_offset=16), Call(Name('range', Load(), lineno=540, col_offset=21), [Call(Name('len', Load(), lineno=540, col_offset=27), [Name('tests', Load(), lineno=540, col_offset=31)], [], None, None, lineno=540, col_offset=27)], [], None, None, lineno=540, col_offset=21), [Assign([Tuple([Name('name', Store(), lineno=541, col_offset=16), Name('test', Store(), lineno=541, col_offset=22)], Store(), lineno=541, col_offset=16)], Subscript(Name('tests', Load(), lineno=541, col_offset=29), Index(Name('j', Load(), lineno=541, col_offset=35)), Load(), lineno=541, col_offset=29), lineno=541, col_offset=16), If(Attribute(Name('self', Load(), lineno=542, col_offset=19), 'verbose', Load(), lineno=542, col_offset=19), [Print(None, [BinOp(Str('%30s:', lineno=543, col_offset=26), Mod(), Name('name', Load(), lineno=543, col_offset=36), lineno=543, col_offset=26)], False, lineno=543, col_offset=20)], [], lineno=542, col_offset=16), Expr(Call(Attribute(Name('test', Load(), lineno=544, col_offset=16), 'run', Load(), lineno=544, col_offset=16), [], [], None, None, lineno=544, col_offset=16), lineno=544, col_offset=16), Assign([Tuple([Name('eff_time', Store(), lineno=545, col_offset=17), Name('abs_time', Store(), lineno=545, col_offset=27), Name('min_overhead', Store(), lineno=545, col_offset=37)], Store(), lineno=545, col_offset=17)], Attribute(Name('test', Load(), lineno=545, col_offset=53), 'last_timing', Load(), lineno=545, col_offset=53), lineno=545, col_offset=16), Assign([Name('total_eff_time', Store(), lineno=546, col_offset=16)], BinOp(Name('total_eff_time', Load(), lineno=546, col_offset=33), Add(), Name('eff_time', Load(), lineno=546, col_offset=50), lineno=546, col_offset=33), lineno=546, col_offset=16), If(Attribute(Name('self', Load(), lineno=547, col_offset=19), 'verbose', Load(), lineno=547, col_offset=19), [Print(None, [BinOp(Str('    %5.0fms    %5.0fms %7.3fms', lineno=548, col_offset=26), Mod(), Tuple([BinOp(Name('eff_time', Load(), lineno=549, col_offset=27), Mult(), Name('MILLI_SECONDS', Load(), lineno=549, col_offset=38), lineno=549, col_offset=27), BinOp(Name('abs_time', Load(), lineno=550, col_offset=27), Mult(), Name('MILLI_SECONDS', Load(), lineno=550, col_offset=38), lineno=550, col_offset=27), BinOp(Name('min_overhead', Load(), lineno=551, col_offset=27), Mult(), Name('MILLI_SECONDS', Load(), lineno=551, col_offset=42), lineno=551, col_offset=27)], Load(), lineno=549, col_offset=27), lineno=548, col_offset=26)], True, lineno=548, col_offset=20)], [], lineno=547, col_offset=16)], [], lineno=540, col_offset=12), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=552, col_offset=12), 'roundtimes', Load(), lineno=552, col_offset=12), 'append', Load(), lineno=552, col_offset=12), [Name('total_eff_time', Load(), lineno=552, col_offset=35)], [], None, None, lineno=552, col_offset=12), lineno=552, col_offset=12), If(Attribute(Name('self', Load(), lineno=553, col_offset=15), 'verbose', Load(), lineno=553, col_offset=15), [Print(None, [Str('                                  ------------------------------', lineno=554, col_offset=23)], True, lineno=554, col_offset=16), Print(None, [BinOp(Str('                        Totals:    %6.0fms', lineno=556, col_offset=23), Mod(), BinOp(Name('total_eff_time', Load(), lineno=558, col_offset=24), Mult(), Name('MILLI_SECONDS', Load(), lineno=558, col_offset=41), lineno=558, col_offset=24), lineno=556, col_offset=23)], True, lineno=556, col_offset=16), Print(None, [], True, lineno=559, col_offset=16)], [Print(None, [BinOp(Str('* Round %i done in %.3f seconds.', lineno=561, col_offset=22), Mod(), Tuple([BinOp(Name('i', Load(), lineno=561, col_offset=60), Add(), Num(1, lineno=561, col_offset=62), lineno=561, col_offset=60), Name('total_eff_time', Load(), lineno=562, col_offset=60)], Load(), lineno=561, col_offset=60), lineno=561, col_offset=22)], True, lineno=561, col_offset=16)], lineno=553, col_offset=12)], [], lineno=536, col_offset=8), Print(None, [], True, lineno=563, col_offset=8)], [], lineno=527, col_offset=4), FunctionDef('stat', arguments([Name('self', Param(), lineno=565, col_offset=13)], None, None, []), [Expr(Str(' Return benchmark run statistics as tuple:\n\n            (minimum round time,\n             average round time,\n             maximum round time)\n\n            XXX Currently not used, since the benchmark does test\n                statistics across all rounds.\n\n        ', lineno=576, col_offset=-1), lineno=576, col_offset=-1), Assign([Name('runs', Store(), lineno=577, col_offset=8)], Call(Name('len', Load(), lineno=577, col_offset=15), [Attribute(Name('self', Load(), lineno=577, col_offset=19), 'roundtimes', Load(), lineno=577, col_offset=19)], [], None, None, lineno=577, col_offset=15), lineno=577, col_offset=8), If(Compare(Name('runs', Load(), lineno=578, col_offset=11), [Eq()], [Num(0, lineno=578, col_offset=19)], lineno=578, col_offset=11), [Return(Tuple([Num(0.0, lineno=579, col_offset=19), Num(0.0, lineno=579, col_offset=24)], Load(), lineno=579, col_offset=19), lineno=579, col_offset=12)], [], lineno=578, col_offset=8), Assign([Name('min_time', Store(), lineno=580, col_offset=8)], Call(Name('min', Load(), lineno=580, col_offset=19), [Attribute(Name('self', Load(), lineno=580, col_offset=23), 'roundtimes', Load(), lineno=580, col_offset=23)], [], None, None, lineno=580, col_offset=19), lineno=580, col_offset=8), Assign([Name('total_time', Store(), lineno=581, col_offset=8)], Call(Name('reduce', Load(), lineno=581, col_offset=21), [Attribute(Name('operator', Load(), lineno=581, col_offset=28), 'add', Load(), lineno=581, col_offset=28), Attribute(Name('self', Load(), lineno=581, col_offset=42), 'roundtimes', Load(), lineno=581, col_offset=42), Num(0.0, lineno=581, col_offset=59)], [], None, None, lineno=581, col_offset=21), lineno=581, col_offset=8), Assign([Name('avg_time', Store(), lineno=582, col_offset=8)], BinOp(Name('total_time', Load(), lineno=582, col_offset=19), Div(), Call(Name('float', Load(), lineno=582, col_offset=32), [Name('runs', Load(), lineno=582, col_offset=38)], [], None, None, lineno=582, col_offset=32), lineno=582, col_offset=19), lineno=582, col_offset=8), Assign([Name('max_time', Store(), lineno=583, col_offset=8)], Call(Name('max', Load(), lineno=583, col_offset=19), [Attribute(Name('self', Load(), lineno=583, col_offset=23), 'roundtimes', Load(), lineno=583, col_offset=23)], [], None, None, lineno=583, col_offset=19), lineno=583, col_offset=8), Return(Tuple([Name('min_time', Load(), lineno=584, col_offset=16), Name('avg_time', Load(), lineno=584, col_offset=26), Name('max_time', Load(), lineno=584, col_offset=36)], Load(), lineno=584, col_offset=16), lineno=584, col_offset=8)], [], lineno=565, col_offset=4), FunctionDef('print_header', arguments([Name('self', Param(), lineno=586, col_offset=21), Name('title', Param(), lineno=586, col_offset=27)], None, None, [Str('Benchmark', lineno=586, col_offset=33)]), [Print(None, [BinOp(Str('-', lineno=588, col_offset=14), Mult(), Name('LINE', Load(), lineno=588, col_offset=20), lineno=588, col_offset=14)], True, lineno=588, col_offset=8), Print(None, [BinOp(Str('%s: %s', lineno=589, col_offset=14), Mod(), Tuple([Name('title', Load(), lineno=589, col_offset=26), Attribute(Name('self', Load(), lineno=589, col_offset=33), 'name', Load(), lineno=589, col_offset=33)], Load(), lineno=589, col_offset=26), lineno=589, col_offset=14)], True, lineno=589, col_offset=8), Print(None, [BinOp(Str('-', lineno=590, col_offset=14), Mult(), Name('LINE', Load(), lineno=590, col_offset=20), lineno=590, col_offset=14)], True, lineno=590, col_offset=8), Print(None, [], True, lineno=591, col_offset=8), Print(None, [BinOp(Str('    Rounds: %s', lineno=592, col_offset=14), Mod(), Attribute(Name('self', Load(), lineno=592, col_offset=33), 'rounds', Load(), lineno=592, col_offset=33), lineno=592, col_offset=14)], True, lineno=592, col_offset=8), Print(None, [BinOp(Str('    Warp:   %s', lineno=593, col_offset=14), Mod(), Attribute(Name('self', Load(), lineno=593, col_offset=33), 'warp', Load(), lineno=593, col_offset=33), lineno=593, col_offset=14)], True, lineno=593, col_offset=8), Print(None, [BinOp(Str('    Timer:  %s', lineno=594, col_offset=14), Mod(), Attribute(Name('self', Load(), lineno=594, col_offset=33), 'timer', Load(), lineno=594, col_offset=33), lineno=594, col_offset=14)], True, lineno=594, col_offset=8), Print(None, [], True, lineno=595, col_offset=8), If(Attribute(Name('self', Load(), lineno=596, col_offset=11), 'machine_details', Load(), lineno=596, col_offset=11), [Expr(Call(Name('print_machine_details', Load(), lineno=597, col_offset=12), [Attribute(Name('self', Load(), lineno=597, col_offset=34), 'machine_details', Load(), lineno=597, col_offset=34)], [keyword('indent', Str('    ', lineno=597, col_offset=63))], None, None, lineno=597, col_offset=12), lineno=597, col_offset=12), Print(None, [], True, lineno=598, col_offset=12)], [], lineno=596, col_offset=8)], [], lineno=586, col_offset=4), FunctionDef('print_benchmark', arguments([Name('self', Param(), lineno=600, col_offset=24), Name('hidenoise', Param(), lineno=600, col_offset=30), Name('limitnames', Param(), lineno=600, col_offset=43)], None, None, [Num(0, lineno=600, col_offset=40), Name('None', Load(), lineno=600, col_offset=54)]), [Print(None, [Str('Test                             minimum  average  operation  overhead', lineno=602, col_offset=15)], True, lineno=602, col_offset=8), Print(None, [BinOp(Str('-', lineno=604, col_offset=14), Mult(), Name('LINE', Load(), lineno=604, col_offset=20), lineno=604, col_offset=14)], True, lineno=604, col_offset=8), Assign([Name('tests', Store(), lineno=605, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=605, col_offset=16), 'tests', Load(), lineno=605, col_offset=16), 'items', Load(), lineno=605, col_offset=16), [], [], None, None, lineno=605, col_offset=16), lineno=605, col_offset=8), Expr(Call(Attribute(Name('tests', Load(), lineno=606, col_offset=8), 'sort', Load(), lineno=606, col_offset=8), [], [], None, None, lineno=606, col_offset=8), lineno=606, col_offset=8), Assign([Name('total_min_time', Store(), lineno=607, col_offset=8)], Num(0.0, lineno=607, col_offset=25), lineno=607, col_offset=8), Assign([Name('total_avg_time', Store(), lineno=608, col_offset=8)], Num(0.0, lineno=608, col_offset=25), lineno=608, col_offset=8), For(Tuple([Name('name', Store(), lineno=609, col_offset=12), Name('test', Store(), lineno=609, col_offset=18)], Store(), lineno=609, col_offset=12), Name('tests', Load(), lineno=609, col_offset=26), [If(BoolOp(And(), [Compare(Name('limitnames', Load(), lineno=610, col_offset=16), [IsNot()], [Name('None', Load(), lineno=610, col_offset=34)], lineno=610, col_offset=16), Compare(Call(Attribute(Name('limitnames', Load(), lineno=611, col_offset=16), 'search', Load(), lineno=611, col_offset=16), [Name('name', Load(), lineno=611, col_offset=34)], [], None, None, lineno=611, col_offset=16), [Is()], [Name('None', Load(), lineno=611, col_offset=43)], lineno=611, col_offset=16)], lineno=610, col_offset=16), [Continue( lineno=612, col_offset=16)], [], lineno=610, col_offset=12), Assign([Tuple([Name('min_time', Store(), lineno=613, col_offset=13), Name('avg_time', Store(), lineno=614, col_offset=13), Name('total_time', Store(), lineno=615, col_offset=13), Name('op_avg', Store(), lineno=616, col_offset=13), Name('min_overhead', Store(), lineno=617, col_offset=13)], Store(), lineno=613, col_offset=13)], Call(Attribute(Name('test', Load(), lineno=617, col_offset=29), 'stat', Load(), lineno=617, col_offset=29), [], [], None, None, lineno=617, col_offset=29), lineno=613, col_offset=12), Assign([Name('total_min_time', Store(), lineno=618, col_offset=12)], BinOp(Name('total_min_time', Load(), lineno=618, col_offset=29), Add(), Name('min_time', Load(), lineno=618, col_offset=46), lineno=618, col_offset=29), lineno=618, col_offset=12), Assign([Name('total_avg_time', Store(), lineno=619, col_offset=12)], BinOp(Name('total_avg_time', Load(), lineno=619, col_offset=29), Add(), Name('avg_time', Load(), lineno=619, col_offset=46), lineno=619, col_offset=29), lineno=619, col_offset=12), Print(None, [BinOp(Str('%30s:  %5.0fms  %5.0fms  %6.2fus  %7.3fms', lineno=620, col_offset=18), Mod(), Tuple([Name('name', Load(), lineno=621, col_offset=19), BinOp(Name('min_time', Load(), lineno=622, col_offset=19), Mult(), Name('MILLI_SECONDS', Load(), lineno=622, col_offset=30), lineno=622, col_offset=19), BinOp(Name('avg_time', Load(), lineno=623, col_offset=19), Mult(), Name('MILLI_SECONDS', Load(), lineno=623, col_offset=30), lineno=623, col_offset=19), BinOp(Name('op_avg', Load(), lineno=624, col_offset=19), Mult(), Name('MICRO_SECONDS', Load(), lineno=624, col_offset=28), lineno=624, col_offset=19), BinOp(Name('min_overhead', Load(), lineno=625, col_offset=19), Mult(), Name('MILLI_SECONDS', Load(), lineno=625, col_offset=33), lineno=625, col_offset=19)], Load(), lineno=621, col_offset=19), lineno=620, col_offset=18)], True, lineno=620, col_offset=12)], [], lineno=609, col_offset=8), Print(None, [BinOp(Str('-', lineno=626, col_offset=14), Mult(), Name('LINE', Load(), lineno=626, col_offset=20), lineno=626, col_offset=14)], True, lineno=626, col_offset=8), Print(None, [BinOp(Str('Totals:                         %6.0fms %6.0fms', lineno=627, col_offset=15), Mod(), Tuple([BinOp(Name('total_min_time', Load(), lineno=629, col_offset=16), Mult(), Name('MILLI_SECONDS', Load(), lineno=629, col_offset=33), lineno=629, col_offset=16), BinOp(Name('total_avg_time', Load(), lineno=630, col_offset=16), Mult(), Name('MILLI_SECONDS', Load(), lineno=630, col_offset=33), lineno=630, col_offset=16)], Load(), lineno=629, col_offset=16), lineno=627, col_offset=15)], True, lineno=627, col_offset=8), Print(None, [], True, lineno=632, col_offset=8)], [], lineno=600, col_offset=4), FunctionDef('print_comparison', arguments([Name('self', Param(), lineno=634, col_offset=25), Name('compare_to', Param(), lineno=634, col_offset=31), Name('hidenoise', Param(), lineno=634, col_offset=43), Name('limitnames', Param(), lineno=634, col_offset=56)], None, None, [Num(0, lineno=634, col_offset=53), Name('None', Load(), lineno=634, col_offset=67)]), [If(Compare(Attribute(Name('compare_to', Load(), lineno=637, col_offset=11), 'version', Load(), lineno=637, col_offset=11), [NotEq()], [Attribute(Name('self', Load(), lineno=637, col_offset=33), 'version', Load(), lineno=637, col_offset=33)], lineno=637, col_offset=11), [Print(None, [BinOp(Str('* Benchmark versions differ: cannot compare this benchmark to "%s" !', lineno=638, col_offset=19), Mod(), Attribute(Name('compare_to', Load(), lineno=640, col_offset=19), 'name', Load(), lineno=640, col_offset=19), lineno=638, col_offset=19)], True, lineno=638, col_offset=12), Print(None, [], True, lineno=641, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=642, col_offset=12), 'print_benchmark', Load(), lineno=642, col_offset=12), [], [keyword('hidenoise', Name('hidenoise', Load(), lineno=642, col_offset=43)), keyword('limitnames', Name('limitnames', Load(), lineno=643, col_offset=44))], None, None, lineno=642, col_offset=12), lineno=642, col_offset=12), Return(None, lineno=644, col_offset=12)], [], lineno=637, col_offset=8), Expr(Call(Attribute(Name('compare_to', Load(), lineno=647, col_offset=8), 'print_header', Load(), lineno=647, col_offset=8), [Str('Comparing with', lineno=647, col_offset=32)], [], None, None, lineno=647, col_offset=8), lineno=647, col_offset=8), Print(None, [Str('Test                             minimum run-time        average  run-time', lineno=648, col_offset=15)], True, lineno=648, col_offset=8), Print(None, [Str('                                 this    other   diff    this    other   diff', lineno=650, col_offset=15)], True, lineno=650, col_offset=8), Print(None, [BinOp(Str('-', lineno=652, col_offset=14), Mult(), Name('LINE', Load(), lineno=652, col_offset=20), lineno=652, col_offset=14)], True, lineno=652, col_offset=8), Assign([Name('tests', Store(), lineno=655, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=655, col_offset=16), 'tests', Load(), lineno=655, col_offset=16), 'items', Load(), lineno=655, col_offset=16), [], [], None, None, lineno=655, col_offset=16), lineno=655, col_offset=8), Expr(Call(Attribute(Name('tests', Load(), lineno=656, col_offset=8), 'sort', Load(), lineno=656, col_offset=8), [], [], None, None, lineno=656, col_offset=8), lineno=656, col_offset=8), Assign([Name('total_min_time', Store(), lineno=657, col_offset=8), Name('other_total_min_time', Store(), lineno=657, col_offset=25)], Num(0.0, lineno=657, col_offset=48), lineno=657, col_offset=8), Assign([Name('total_avg_time', Store(), lineno=658, col_offset=8), Name('other_total_avg_time', Store(), lineno=658, col_offset=25)], Num(0.0, lineno=658, col_offset=48), lineno=658, col_offset=8), Assign([Name('benchmarks_compatible', Store(), lineno=659, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=659, col_offset=32), 'compatible', Load(), lineno=659, col_offset=32), [Name('compare_to', Load(), lineno=659, col_offset=48)], [], None, None, lineno=659, col_offset=32), lineno=659, col_offset=8), Assign([Name('tests_compatible', Store(), lineno=660, col_offset=8)], Num(1, lineno=660, col_offset=27), lineno=660, col_offset=8), For(Tuple([Name('name', Store(), lineno=661, col_offset=12), Name('test', Store(), lineno=661, col_offset=18)], Store(), lineno=661, col_offset=12), Name('tests', Load(), lineno=661, col_offset=26), [If(BoolOp(And(), [Compare(Name('limitnames', Load(), lineno=662, col_offset=16), [IsNot()], [Name('None', Load(), lineno=662, col_offset=34)], lineno=662, col_offset=16), Compare(Call(Attribute(Name('limitnames', Load(), lineno=663, col_offset=16), 'search', Load(), lineno=663, col_offset=16), [Name('name', Load(), lineno=663, col_offset=34)], [], None, None, lineno=663, col_offset=16), [Is()], [Name('None', Load(), lineno=663, col_offset=43)], lineno=663, col_offset=16)], lineno=662, col_offset=16), [Continue( lineno=664, col_offset=16)], [], lineno=662, col_offset=12), Assign([Tuple([Name('min_time', Store(), lineno=665, col_offset=13), Name('avg_time', Store(), lineno=666, col_offset=13), Name('total_time', Store(), lineno=667, col_offset=13), Name('op_avg', Store(), lineno=668, col_offset=13), Name('min_overhead', Store(), lineno=669, col_offset=13)], Store(), lineno=665, col_offset=13)], Call(Attribute(Name('test', Load(), lineno=669, col_offset=29), 'stat', Load(), lineno=669, col_offset=29), [], [], None, None, lineno=669, col_offset=29), lineno=665, col_offset=12), Assign([Name('total_min_time', Store(), lineno=670, col_offset=12)], BinOp(Name('total_min_time', Load(), lineno=670, col_offset=29), Add(), Name('min_time', Load(), lineno=670, col_offset=46), lineno=670, col_offset=29), lineno=670, col_offset=12), Assign([Name('total_avg_time', Store(), lineno=671, col_offset=12)], BinOp(Name('total_avg_time', Load(), lineno=671, col_offset=29), Add(), Name('avg_time', Load(), lineno=671, col_offset=46), lineno=671, col_offset=29), lineno=671, col_offset=12), TryExcept([Assign([Name('other', Store(), lineno=673, col_offset=16)], Subscript(Attribute(Name('compare_to', Load(), lineno=673, col_offset=24), 'tests', Load(), lineno=673, col_offset=24), Index(Name('name', Load(), lineno=673, col_offset=41)), Load(), lineno=673, col_offset=24), lineno=673, col_offset=16)], [ExceptHandler(Name('KeyError', Load(), lineno=674, col_offset=19), None, [Assign([Name('other', Store(), lineno=675, col_offset=16)], Name('None', Load(), lineno=675, col_offset=24), lineno=675, col_offset=16)], lineno=674, col_offset=12)], [], lineno=672, col_offset=12), If(Compare(Name('other', Load(), lineno=676, col_offset=15), [Is()], [Name('None', Load(), lineno=676, col_offset=24)], lineno=676, col_offset=15), [Assign([Tuple([Name('min_diff', Store(), lineno=678, col_offset=16), Name('avg_diff', Store(), lineno=678, col_offset=26)], Store(), lineno=678, col_offset=16)], Tuple([Str('n/a', lineno=678, col_offset=37), Str('n/a', lineno=678, col_offset=44)], Load(), lineno=678, col_offset=37), lineno=678, col_offset=16), Assign([Name('other_min_time', Store(), lineno=679, col_offset=16)], Num(0.0, lineno=679, col_offset=33), lineno=679, col_offset=16), Assign([Name('other_avg_time', Store(), lineno=680, col_offset=16)], Num(0.0, lineno=680, col_offset=33), lineno=680, col_offset=16), Assign([Name('tests_compatible', Store(), lineno=681, col_offset=16)], Num(0, lineno=681, col_offset=35), lineno=681, col_offset=16)], [Assign([Tuple([Name('other_min_time', Store(), lineno=683, col_offset=17), Name('other_avg_time', Store(), lineno=684, col_offset=17), Name('other_total_time', Store(), lineno=685, col_offset=17), Name('other_op_avg', Store(), lineno=686, col_offset=17), Name('other_min_overhead', Store(), lineno=687, col_offset=17)], Store(), lineno=683, col_offset=17)], Call(Attribute(Name('other', Load(), lineno=687, col_offset=39), 'stat', Load(), lineno=687, col_offset=39), [], [], None, None, lineno=687, col_offset=39), lineno=683, col_offset=16), Assign([Name('other_total_min_time', Store(), lineno=688, col_offset=16)], BinOp(Name('other_total_min_time', Load(), lineno=688, col_offset=39), Add(), Name('other_min_time', Load(), lineno=688, col_offset=62), lineno=688, col_offset=39), lineno=688, col_offset=16), Assign([Name('other_total_avg_time', Store(), lineno=689, col_offset=16)], BinOp(Name('other_total_avg_time', Load(), lineno=689, col_offset=39), Add(), Name('other_avg_time', Load(), lineno=689, col_offset=62), lineno=689, col_offset=39), lineno=689, col_offset=16), If(BoolOp(And(), [Name('benchmarks_compatible', Load(), lineno=690, col_offset=20), Call(Attribute(Name('test', Load(), lineno=691, col_offset=20), 'compatible', Load(), lineno=691, col_offset=20), [Name('other', Load(), lineno=691, col_offset=36)], [], None, None, lineno=691, col_offset=20)], lineno=690, col_offset=20), [Assign([Name('min_diff', Store(), lineno=693, col_offset=20)], BinOp(BinOp(BinOp(Name('min_time', Load(), lineno=693, col_offset=33), Mult(), Attribute(Name('self', Load(), lineno=693, col_offset=44), 'warp', Load(), lineno=693, col_offset=44), lineno=693, col_offset=33), Div(), BinOp(Name('other_min_time', Load(), lineno=694, col_offset=33), Mult(), Attribute(Name('other', Load(), lineno=694, col_offset=50), 'warp', Load(), lineno=694, col_offset=50), lineno=694, col_offset=33), lineno=693, col_offset=32), Sub(), Num(1.0, lineno=694, col_offset=64), lineno=693, col_offset=32), lineno=693, col_offset=20), Assign([Name('avg_diff', Store(), lineno=695, col_offset=20)], BinOp(BinOp(BinOp(Name('avg_time', Load(), lineno=695, col_offset=33), Mult(), Attribute(Name('self', Load(), lineno=695, col_offset=44), 'warp', Load(), lineno=695, col_offset=44), lineno=695, col_offset=33), Div(), BinOp(Name('other_avg_time', Load(), lineno=696, col_offset=33), Mult(), Attribute(Name('other', Load(), lineno=696, col_offset=50), 'warp', Load(), lineno=696, col_offset=50), lineno=696, col_offset=33), lineno=695, col_offset=32), Sub(), Num(1.0, lineno=696, col_offset=64), lineno=695, col_offset=32), lineno=695, col_offset=20), If(BoolOp(And(), [Name('hidenoise', Load(), lineno=697, col_offset=23), Compare(Call(Name('abs', Load(), lineno=697, col_offset=37), [Name('min_diff', Load(), lineno=697, col_offset=41)], [], None, None, lineno=697, col_offset=37), [Lt()], [Num(10.0, lineno=697, col_offset=53)], lineno=697, col_offset=37)], lineno=697, col_offset=23), [Assign([Name('min_diff', Store(), lineno=698, col_offset=24)], Str('', lineno=698, col_offset=35), lineno=698, col_offset=24)], [Assign([Name('min_diff', Store(), lineno=700, col_offset=24)], BinOp(Str('%+5.1f%%', lineno=700, col_offset=35), Mod(), BinOp(Name('min_diff', Load(), lineno=700, col_offset=49), Mult(), Name('PERCENT', Load(), lineno=700, col_offset=60), lineno=700, col_offset=49), lineno=700, col_offset=35), lineno=700, col_offset=24)], lineno=697, col_offset=20), If(BoolOp(And(), [Name('hidenoise', Load(), lineno=701, col_offset=23), Compare(Call(Name('abs', Load(), lineno=701, col_offset=37), [Name('avg_diff', Load(), lineno=701, col_offset=41)], [], None, None, lineno=701, col_offset=37), [Lt()], [Num(10.0, lineno=701, col_offset=53)], lineno=701, col_offset=37)], lineno=701, col_offset=23), [Assign([Name('avg_diff', Store(), lineno=702, col_offset=24)], Str('', lineno=702, col_offset=35), lineno=702, col_offset=24)], [Assign([Name('avg_diff', Store(), lineno=704, col_offset=24)], BinOp(Str('%+5.1f%%', lineno=704, col_offset=35), Mod(), BinOp(Name('avg_diff', Load(), lineno=704, col_offset=49), Mult(), Name('PERCENT', Load(), lineno=704, col_offset=60), lineno=704, col_offset=49), lineno=704, col_offset=35), lineno=704, col_offset=24)], lineno=701, col_offset=20)], [Assign([Tuple([Name('min_diff', Store(), lineno=707, col_offset=20), Name('avg_diff', Store(), lineno=707, col_offset=30)], Store(), lineno=707, col_offset=20)], Tuple([Str('n/a', lineno=707, col_offset=41), Str('n/a', lineno=707, col_offset=48)], Load(), lineno=707, col_offset=41), lineno=707, col_offset=20), Assign([Name('tests_compatible', Store(), lineno=708, col_offset=20)], Num(0, lineno=708, col_offset=39), lineno=708, col_offset=20)], lineno=690, col_offset=16)], lineno=676, col_offset=12), Print(None, [BinOp(Str('%30s: %5.0fms %5.0fms %7s %5.0fms %5.0fms %7s', lineno=709, col_offset=18), Mod(), Tuple([Name('name', Load(), lineno=710, col_offset=19), BinOp(Name('min_time', Load(), lineno=711, col_offset=19), Mult(), Name('MILLI_SECONDS', Load(), lineno=711, col_offset=30), lineno=711, col_offset=19), BinOp(BinOp(BinOp(Name('other_min_time', Load(), lineno=712, col_offset=19), Mult(), Name('MILLI_SECONDS', Load(), lineno=712, col_offset=36), lineno=712, col_offset=19), Mult(), Attribute(Name('compare_to', Load(), lineno=712, col_offset=52), 'warp', Load(), lineno=712, col_offset=52), lineno=712, col_offset=50), Div(), Attribute(Name('self', Load(), lineno=712, col_offset=70), 'warp', Load(), lineno=712, col_offset=70), lineno=712, col_offset=68), Name('min_diff', Load(), lineno=713, col_offset=19), BinOp(Name('avg_time', Load(), lineno=714, col_offset=19), Mult(), Name('MILLI_SECONDS', Load(), lineno=714, col_offset=30), lineno=714, col_offset=19), BinOp(BinOp(BinOp(Name('other_avg_time', Load(), lineno=715, col_offset=19), Mult(), Name('MILLI_SECONDS', Load(), lineno=715, col_offset=36), lineno=715, col_offset=19), Mult(), Attribute(Name('compare_to', Load(), lineno=715, col_offset=52), 'warp', Load(), lineno=715, col_offset=52), lineno=715, col_offset=50), Div(), Attribute(Name('self', Load(), lineno=715, col_offset=70), 'warp', Load(), lineno=715, col_offset=70), lineno=715, col_offset=68), Name('avg_diff', Load(), lineno=716, col_offset=19)], Load(), lineno=710, col_offset=19), lineno=709, col_offset=18)], True, lineno=709, col_offset=12)], [], lineno=661, col_offset=8), Print(None, [BinOp(Str('-', lineno=717, col_offset=14), Mult(), Name('LINE', Load(), lineno=717, col_offset=20), lineno=717, col_offset=14)], True, lineno=717, col_offset=8), If(BoolOp(Or(), [UnaryOp(Not(), Name('benchmarks_compatible', Load(), lineno=720, col_offset=15), lineno=720, col_offset=11), UnaryOp(Not(), Name('tests_compatible', Load(), lineno=720, col_offset=44), lineno=720, col_offset=40)], lineno=720, col_offset=11), [Assign([Tuple([Name('min_diff', Store(), lineno=721, col_offset=12), Name('avg_diff', Store(), lineno=721, col_offset=22)], Store(), lineno=721, col_offset=12)], Tuple([Str('n/a', lineno=721, col_offset=33), Str('n/a', lineno=721, col_offset=40)], Load(), lineno=721, col_offset=33), lineno=721, col_offset=12)], [If(Compare(Name('other_total_min_time', Load(), lineno=723, col_offset=15), [NotEq()], [Num(0.0, lineno=723, col_offset=39)], lineno=723, col_offset=15), [Assign([Name('min_diff', Store(), lineno=724, col_offset=16)], BinOp(Str('%+5.1f%%', lineno=724, col_offset=27), Mod(), BinOp(BinOp(BinOp(BinOp(Name('total_min_time', Load(), lineno=725, col_offset=22), Mult(), Attribute(Name('self', Load(), lineno=725, col_offset=39), 'warp', Load(), lineno=725, col_offset=39), lineno=725, col_offset=22), Div(), BinOp(Name('other_total_min_time', Load(), lineno=726, col_offset=22), Mult(), Attribute(Name('compare_to', Load(), lineno=726, col_offset=45), 'warp', Load(), lineno=726, col_offset=45), lineno=726, col_offset=22), lineno=725, col_offset=21), Sub(), Num(1.0, lineno=726, col_offset=64), lineno=725, col_offset=21), Mult(), Name('PERCENT', Load(), lineno=726, col_offset=71), lineno=725, col_offset=20), lineno=724, col_offset=27), lineno=724, col_offset=16)], [Assign([Name('min_diff', Store(), lineno=728, col_offset=16)], Str('n/a', lineno=728, col_offset=27), lineno=728, col_offset=16)], lineno=723, col_offset=12), If(Compare(Name('other_total_avg_time', Load(), lineno=729, col_offset=15), [NotEq()], [Num(0.0, lineno=729, col_offset=39)], lineno=729, col_offset=15), [Assign([Name('avg_diff', Store(), lineno=730, col_offset=16)], BinOp(Str('%+5.1f%%', lineno=730, col_offset=27), Mod(), BinOp(BinOp(BinOp(BinOp(Name('total_avg_time', Load(), lineno=731, col_offset=22), Mult(), Attribute(Name('self', Load(), lineno=731, col_offset=39), 'warp', Load(), lineno=731, col_offset=39), lineno=731, col_offset=22), Div(), BinOp(Name('other_total_avg_time', Load(), lineno=732, col_offset=22), Mult(), Attribute(Name('compare_to', Load(), lineno=732, col_offset=45), 'warp', Load(), lineno=732, col_offset=45), lineno=732, col_offset=22), lineno=731, col_offset=21), Sub(), Num(1.0, lineno=732, col_offset=64), lineno=731, col_offset=21), Mult(), Name('PERCENT', Load(), lineno=732, col_offset=71), lineno=731, col_offset=20), lineno=730, col_offset=27), lineno=730, col_offset=16)], [Assign([Name('avg_diff', Store(), lineno=734, col_offset=16)], Str('n/a', lineno=734, col_offset=27), lineno=734, col_offset=16)], lineno=729, col_offset=12)], lineno=720, col_offset=8), Print(None, [BinOp(Str('Totals:                         %5.0fms %5.0fms %7s %5.0fms %5.0fms %7s', lineno=735, col_offset=15), Mod(), Tuple([BinOp(Name('total_min_time', Load(), lineno=737, col_offset=16), Mult(), Name('MILLI_SECONDS', Load(), lineno=737, col_offset=33), lineno=737, col_offset=16), BinOp(BinOp(BinOp(Name('other_total_min_time', Load(), lineno=738, col_offset=17), Mult(), Attribute(Name('compare_to', Load(), lineno=738, col_offset=40), 'warp', Load(), lineno=738, col_offset=40), lineno=738, col_offset=17), Div(), Attribute(Name('self', Load(), lineno=738, col_offset=56), 'warp', Load(), lineno=738, col_offset=56), lineno=738, col_offset=55), Mult(), Name('MILLI_SECONDS', Load(), lineno=739, col_offset=19), lineno=739, col_offset=17), Name('min_diff', Load(), lineno=740, col_offset=16), BinOp(Name('total_avg_time', Load(), lineno=741, col_offset=16), Mult(), Name('MILLI_SECONDS', Load(), lineno=741, col_offset=33), lineno=741, col_offset=16), BinOp(BinOp(BinOp(Name('other_total_avg_time', Load(), lineno=742, col_offset=17), Mult(), Attribute(Name('compare_to', Load(), lineno=742, col_offset=40), 'warp', Load(), lineno=742, col_offset=40), lineno=742, col_offset=17), Div(), Attribute(Name('self', Load(), lineno=742, col_offset=56), 'warp', Load(), lineno=742, col_offset=56), lineno=742, col_offset=55), Mult(), Name('MILLI_SECONDS', Load(), lineno=743, col_offset=19), lineno=743, col_offset=17), Name('avg_diff', Load(), lineno=744, col_offset=16)], Load(), lineno=737, col_offset=16), lineno=735, col_offset=15)], True, lineno=735, col_offset=8), Print(None, [], True, lineno=746, col_offset=8), Print(None, [BinOp(Str('(this=%s, other=%s)', lineno=747, col_offset=14), Mod(), Tuple([Attribute(Name('self', Load(), lineno=747, col_offset=39), 'name', Load(), lineno=747, col_offset=39), Attribute(Name('compare_to', Load(), lineno=748, col_offset=39), 'name', Load(), lineno=748, col_offset=39)], Load(), lineno=747, col_offset=39), lineno=747, col_offset=14)], True, lineno=747, col_offset=8), Print(None, [], True, lineno=749, col_offset=8)], [], lineno=634, col_offset=4)], [], lineno=394, col_offset=0), ClassDef('PyBenchCmdline', [Name('Application', Load(), lineno=751, col_offset=21)], [Assign([Name('header', Store(), lineno=753, col_offset=4)], Str('PYBENCH - a benchmark test suite for Python interpreters/compilers.', lineno=753, col_offset=14), lineno=753, col_offset=4), Assign([Name('version', Store(), lineno=756, col_offset=4)], Name('__version__', Load(), lineno=756, col_offset=14), lineno=756, col_offset=4), Assign([Name('debug', Store(), lineno=758, col_offset=4)], Name('_debug', Load(), lineno=758, col_offset=12), lineno=758, col_offset=4), Assign([Name('options', Store(), lineno=760, col_offset=4)], List([Call(Name('ArgumentOption', Load(), lineno=760, col_offset=15), [Str('-n', lineno=760, col_offset=30), Str('number of rounds', lineno=761, col_offset=30), Attribute(Name('Setup', Load(), lineno=762, col_offset=30), 'Number_of_rounds', Load(), lineno=762, col_offset=30)], [], None, None, lineno=760, col_offset=15), Call(Name('ArgumentOption', Load(), lineno=763, col_offset=15), [Str('-f', lineno=763, col_offset=30), Str('save benchmark to file arg', lineno=764, col_offset=30), Str('', lineno=765, col_offset=30)], [], None, None, lineno=763, col_offset=15), Call(Name('ArgumentOption', Load(), lineno=766, col_offset=15), [Str('-c', lineno=766, col_offset=30), Str('compare benchmark with the one in file arg', lineno=767, col_offset=30), Str('', lineno=768, col_offset=30)], [], None, None, lineno=766, col_offset=15), Call(Name('ArgumentOption', Load(), lineno=769, col_offset=15), [Str('-s', lineno=769, col_offset=30), Str('show benchmark in file arg, then exit', lineno=770, col_offset=30), Str('', lineno=771, col_offset=30)], [], None, None, lineno=769, col_offset=15), Call(Name('ArgumentOption', Load(), lineno=772, col_offset=15), [Str('-w', lineno=772, col_offset=30), Str('set warp factor to arg', lineno=773, col_offset=30), Attribute(Name('Setup', Load(), lineno=774, col_offset=30), 'Warp_factor', Load(), lineno=774, col_offset=30)], [], None, None, lineno=772, col_offset=15), Call(Name('ArgumentOption', Load(), lineno=775, col_offset=15), [Str('-t', lineno=775, col_offset=30), Str('run only tests with names matching arg', lineno=776, col_offset=30), Str('', lineno=777, col_offset=30)], [], None, None, lineno=775, col_offset=15), Call(Name('ArgumentOption', Load(), lineno=778, col_offset=15), [Str('-C', lineno=778, col_offset=30), Str('set the number of calibration runs to arg', lineno=779, col_offset=30), Name('CALIBRATION_RUNS', Load(), lineno=780, col_offset=30)], [], None, None, lineno=778, col_offset=15), Call(Name('SwitchOption', Load(), lineno=781, col_offset=15), [Str('-d', lineno=781, col_offset=28), Str('hide noise in comparisons', lineno=782, col_offset=28), Num(0, lineno=783, col_offset=28)], [], None, None, lineno=781, col_offset=15), Call(Name('SwitchOption', Load(), lineno=784, col_offset=15), [Str('-v', lineno=784, col_offset=28), Str('verbose output (not recommended)', lineno=785, col_offset=28), Num(0, lineno=786, col_offset=28)], [], None, None, lineno=784, col_offset=15), Call(Name('SwitchOption', Load(), lineno=787, col_offset=15), [Str('--with-gc', lineno=787, col_offset=28), Str('enable garbage collection', lineno=788, col_offset=28), Num(0, lineno=789, col_offset=28)], [], None, None, lineno=787, col_offset=15), Call(Name('SwitchOption', Load(), lineno=790, col_offset=15), [Str('--with-syscheck', lineno=790, col_offset=28), Str('use default sys check interval', lineno=791, col_offset=28), Num(0, lineno=792, col_offset=28)], [], None, None, lineno=790, col_offset=15), Call(Name('ArgumentOption', Load(), lineno=793, col_offset=15), [Str('--timer', lineno=793, col_offset=30), Str('use given timer', lineno=794, col_offset=28), Name('TIMER_PLATFORM_DEFAULT', Load(), lineno=795, col_offset=28)], [], None, None, lineno=793, col_offset=15)], Load(), lineno=760, col_offset=14), lineno=760, col_offset=4), Assign([Name('about', Store(), lineno=798, col_offset=4)], Str('The normal operation is to run the suite and display the\nresults. Use -f to save them for later reuse or comparisons.\n\nAvailable timers:\n\n   time.time\n   time.clock\n   systimes.processtime\n\nExamples:\n\npython2.1 pybench.py -f p21.pybench\npython2.5 pybench.py -f p25.pybench\npython pybench.py -s p25.pybench -c p21.pybench\n', lineno=813, col_offset=-1), lineno=798, col_offset=4), Assign([Name('copyright', Store(), lineno=814, col_offset=4)], Name('__copyright__', Load(), lineno=814, col_offset=16), lineno=814, col_offset=4), FunctionDef('main', arguments([Name('self', Param(), lineno=816, col_offset=13)], None, None, []), [Assign([Name('rounds', Store(), lineno=818, col_offset=8)], Subscript(Attribute(Name('self', Load(), lineno=818, col_offset=17), 'values', Load(), lineno=818, col_offset=17), Index(Str('-n', lineno=818, col_offset=29)), Load(), lineno=818, col_offset=17), lineno=818, col_offset=8), Assign([Name('reportfile', Store(), lineno=819, col_offset=8)], Subscript(Attribute(Name('self', Load(), lineno=819, col_offset=21), 'values', Load(), lineno=819, col_offset=21), Index(Str('-f', lineno=819, col_offset=33)), Load(), lineno=819, col_offset=21), lineno=819, col_offset=8), Assign([Name('show_bench', Store(), lineno=820, col_offset=8)], Subscript(Attribute(Name('self', Load(), lineno=820, col_offset=21), 'values', Load(), lineno=820, col_offset=21), Index(Str('-s', lineno=820, col_offset=33)), Load(), lineno=820, col_offset=21), lineno=820, col_offset=8), Assign([Name('compare_to', Store(), lineno=821, col_offset=8)], Subscript(Attribute(Name('self', Load(), lineno=821, col_offset=21), 'values', Load(), lineno=821, col_offset=21), Index(Str('-c', lineno=821, col_offset=33)), Load(), lineno=821, col_offset=21), lineno=821, col_offset=8), Assign([Name('hidenoise', Store(), lineno=822, col_offset=8)], Subscript(Attribute(Name('self', Load(), lineno=822, col_offset=20), 'values', Load(), lineno=822, col_offset=20), Index(Str('-d', lineno=822, col_offset=32)), Load(), lineno=822, col_offset=20), lineno=822, col_offset=8), Assign([Name('warp', Store(), lineno=823, col_offset=8)], Call(Name('int', Load(), lineno=823, col_offset=15), [Subscript(Attribute(Name('self', Load(), lineno=823, col_offset=19), 'values', Load(), lineno=823, col_offset=19), Index(Str('-w', lineno=823, col_offset=31)), Load(), lineno=823, col_offset=19)], [], None, None, lineno=823, col_offset=15), lineno=823, col_offset=8), Assign([Name('withgc', Store(), lineno=824, col_offset=8)], Subscript(Attribute(Name('self', Load(), lineno=824, col_offset=17), 'values', Load(), lineno=824, col_offset=17), Index(Str('--with-gc', lineno=824, col_offset=29)), Load(), lineno=824, col_offset=17), lineno=824, col_offset=8), Assign([Name('limitnames', Store(), lineno=825, col_offset=8)], Subscript(Attribute(Name('self', Load(), lineno=825, col_offset=21), 'values', Load(), lineno=825, col_offset=21), Index(Str('-t', lineno=825, col_offset=33)), Load(), lineno=825, col_offset=21), lineno=825, col_offset=8), If(Name('limitnames', Load(), lineno=826, col_offset=11), [If(Name('_debug', Load(), lineno=827, col_offset=15), [Print(None, [BinOp(Str('* limiting test names to one with substring "%s"', lineno=828, col_offset=22), Mod(), Name('limitnames', Load(), lineno=829, col_offset=22), lineno=828, col_offset=22)], True, lineno=828, col_offset=16)], [], lineno=827, col_offset=12), Assign([Name('limitnames', Store(), lineno=830, col_offset=12)], Call(Attribute(Name('re', Load(), lineno=830, col_offset=25), 'compile', Load(), lineno=830, col_offset=25), [Name('limitnames', Load(), lineno=830, col_offset=36), Attribute(Name('re', Load(), lineno=830, col_offset=48), 'I', Load(), lineno=830, col_offset=48)], [], None, None, lineno=830, col_offset=25), lineno=830, col_offset=12)], [Assign([Name('limitnames', Store(), lineno=832, col_offset=12)], Name('None', Load(), lineno=832, col_offset=25), lineno=832, col_offset=12)], lineno=826, col_offset=8), Assign([Name('verbose', Store(), lineno=833, col_offset=8)], Attribute(Name('self', Load(), lineno=833, col_offset=18), 'verbose', Load(), lineno=833, col_offset=18), lineno=833, col_offset=8), Assign([Name('withsyscheck', Store(), lineno=834, col_offset=8)], Subscript(Attribute(Name('self', Load(), lineno=834, col_offset=23), 'values', Load(), lineno=834, col_offset=23), Index(Str('--with-syscheck', lineno=834, col_offset=35)), Load(), lineno=834, col_offset=23), lineno=834, col_offset=8), Assign([Name('calibration_runs', Store(), lineno=835, col_offset=8)], Subscript(Attribute(Name('self', Load(), lineno=835, col_offset=27), 'values', Load(), lineno=835, col_offset=27), Index(Str('-C', lineno=835, col_offset=39)), Load(), lineno=835, col_offset=27), lineno=835, col_offset=8), Assign([Name('timer', Store(), lineno=836, col_offset=8)], Subscript(Attribute(Name('self', Load(), lineno=836, col_offset=16), 'values', Load(), lineno=836, col_offset=16), Index(Str('--timer', lineno=836, col_offset=28)), Load(), lineno=836, col_offset=16), lineno=836, col_offset=8), Print(None, [BinOp(Str('-', lineno=838, col_offset=14), Mult(), Name('LINE', Load(), lineno=838, col_offset=20), lineno=838, col_offset=14)], True, lineno=838, col_offset=8), Print(None, [BinOp(Str('PYBENCH %s', lineno=839, col_offset=14), Mod(), Name('__version__', Load(), lineno=839, col_offset=29), lineno=839, col_offset=14)], True, lineno=839, col_offset=8), Print(None, [BinOp(Str('-', lineno=840, col_offset=14), Mult(), Name('LINE', Load(), lineno=840, col_offset=20), lineno=840, col_offset=14)], True, lineno=840, col_offset=8), Print(None, [BinOp(Str('* using %s %s', lineno=841, col_offset=14), Mod(), Tuple([Call(Call(Name('getattr', Load(), lineno=842, col_offset=12), [Name('platform', Load(), lineno=842, col_offset=20), Str('python_implementation', lineno=842, col_offset=30), Lambda(arguments([], None, None, []), Str('Python', lineno=842, col_offset=62), lineno=842, col_offset=55)], [], None, None, lineno=842, col_offset=12), [], [], None, None, lineno=842, col_offset=12), Call(Attribute(Name('string', Load(), lineno=843, col_offset=12), 'join', Load(), lineno=843, col_offset=12), [Call(Attribute(Name('string', Load(), lineno=843, col_offset=24), 'split', Load(), lineno=843, col_offset=24), [Attribute(Name('sys', Load(), lineno=843, col_offset=37), 'version', Load(), lineno=843, col_offset=37)], [], None, None, lineno=843, col_offset=24), Str(' ', lineno=843, col_offset=51)], [], None, None, lineno=843, col_offset=12)], Load(), lineno=842, col_offset=12), lineno=841, col_offset=14)], True, lineno=841, col_offset=8), If(UnaryOp(Not(), Name('withgc', Load(), lineno=846, col_offset=15), lineno=846, col_offset=11), [TryExcept([Import([alias('gc', None)], lineno=848, col_offset=16)], [ExceptHandler(Name('ImportError', Load(), lineno=849, col_offset=19), None, [Print(None, [Str("* Python version doesn't support garbage collection", lineno=850, col_offset=22)], True, lineno=850, col_offset=16)], lineno=849, col_offset=12)], [TryExcept([Expr(Call(Attribute(Name('gc', Load(), lineno=853, col_offset=20), 'disable', Load(), lineno=853, col_offset=20), [], [], None, None, lineno=853, col_offset=20), lineno=853, col_offset=20)], [ExceptHandler(Name('NotImplementedError', Load(), lineno=854, col_offset=23), None, [Print(None, [Str("* Python version doesn't support gc.disable", lineno=855, col_offset=26)], True, lineno=855, col_offset=20)], lineno=854, col_offset=16)], [Print(None, [Str('* disabled garbage collection', lineno=857, col_offset=26)], True, lineno=857, col_offset=20)], lineno=852, col_offset=16)], lineno=847, col_offset=12)], [], lineno=846, col_offset=8), If(UnaryOp(Not(), Name('withsyscheck', Load(), lineno=860, col_offset=15), lineno=860, col_offset=11), [Assign([Name('value', Store(), lineno=862, col_offset=12)], Num(2147483647, lineno=862, col_offset=20), lineno=862, col_offset=12), TryExcept([Expr(Call(Attribute(Name('sys', Load(), lineno=864, col_offset=16), 'setcheckinterval', Load(), lineno=864, col_offset=16), [Name('value', Load(), lineno=864, col_offset=37)], [], None, None, lineno=864, col_offset=16), lineno=864, col_offset=16)], [ExceptHandler(Tuple([Name('AttributeError', Load(), lineno=865, col_offset=20), Name('NotImplementedError', Load(), lineno=865, col_offset=36)], Load(), lineno=865, col_offset=20), None, [Print(None, [Str("* Python version doesn't support sys.setcheckinterval", lineno=866, col_offset=22)], True, lineno=866, col_offset=16)], lineno=865, col_offset=12)], [Print(None, [BinOp(Str('* system check interval set to maximum: %s', lineno=868, col_offset=22), Mod(), Name('value', Load(), lineno=868, col_offset=69), lineno=868, col_offset=22)], True, lineno=868, col_offset=16)], lineno=863, col_offset=12)], [], lineno=860, col_offset=8), If(Compare(Name('timer', Load(), lineno=870, col_offset=11), [Eq()], [Name('TIMER_SYSTIMES_PROCESSTIME', Load(), lineno=870, col_offset=20)], lineno=870, col_offset=11), [Import([alias('systimes', None)], lineno=871, col_offset=12), Print(None, [BinOp(Str('* using timer: systimes.processtime (%s)', lineno=872, col_offset=18), Mod(), Attribute(Name('systimes', Load(), lineno=873, col_offset=18), 'SYSTIMES_IMPLEMENTATION', Load(), lineno=873, col_offset=18), lineno=872, col_offset=18)], True, lineno=872, col_offset=12)], [Print(None, [BinOp(Str('* using timer: %s', lineno=875, col_offset=18), Mod(), Name('timer', Load(), lineno=875, col_offset=40), lineno=875, col_offset=18)], True, lineno=875, col_offset=12)], lineno=870, col_offset=8), Print(None, [], True, lineno=877, col_offset=8), If(Name('compare_to', Load(), lineno=879, col_offset=11), [TryExcept([Assign([Name('f', Store(), lineno=881, col_offset=16)], Call(Name('open', Load(), lineno=881, col_offset=20), [Name('compare_to', Load(), lineno=881, col_offset=25), Str('rb', lineno=881, col_offset=36)], [], None, None, lineno=881, col_offset=20), lineno=881, col_offset=16), Assign([Name('bench', Store(), lineno=882, col_offset=16)], Call(Attribute(Name('pickle', Load(), lineno=882, col_offset=24), 'load', Load(), lineno=882, col_offset=24), [Name('f', Load(), lineno=882, col_offset=36)], [], None, None, lineno=882, col_offset=24), lineno=882, col_offset=16), Assign([Attribute(Name('bench', Load(), lineno=883, col_offset=16), 'name', Store(), lineno=883, col_offset=16)], Name('compare_to', Load(), lineno=883, col_offset=29), lineno=883, col_offset=16), Expr(Call(Attribute(Name('f', Load(), lineno=884, col_offset=16), 'close', Load(), lineno=884, col_offset=16), [], [], None, None, lineno=884, col_offset=16), lineno=884, col_offset=16), Assign([Name('compare_to', Store(), lineno=885, col_offset=16)], Name('bench', Load(), lineno=885, col_offset=29), lineno=885, col_offset=16)], [ExceptHandler(Name('IOError', Load(), lineno=886, col_offset=19), Name('reason', Store(), lineno=886, col_offset=28), [Print(None, [BinOp(Str('* Error opening/reading file %s: %s', lineno=887, col_offset=22), Mod(), Tuple([Call(Name('repr', Load(), lineno=888, col_offset=20), [Name('compare_to', Load(), lineno=888, col_offset=25)], [], None, None, lineno=888, col_offset=20), Name('reason', Load(), lineno=889, col_offset=20)], Load(), lineno=888, col_offset=20), lineno=887, col_offset=22)], True, lineno=887, col_offset=16), Assign([Name('compare_to', Store(), lineno=890, col_offset=16)], Name('None', Load(), lineno=890, col_offset=29), lineno=890, col_offset=16)], lineno=886, col_offset=12)], [], lineno=880, col_offset=12)], [], lineno=879, col_offset=8), If(Name('show_bench', Load(), lineno=892, col_offset=11), [TryExcept([Assign([Name('f', Store(), lineno=894, col_offset=16)], Call(Name('open', Load(), lineno=894, col_offset=20), [Name('show_bench', Load(), lineno=894, col_offset=25), Str('rb', lineno=894, col_offset=36)], [], None, None, lineno=894, col_offset=20), lineno=894, col_offset=16), Assign([Name('bench', Store(), lineno=895, col_offset=16)], Call(Attribute(Name('pickle', Load(), lineno=895, col_offset=24), 'load', Load(), lineno=895, col_offset=24), [Name('f', Load(), lineno=895, col_offset=36)], [], None, None, lineno=895, col_offset=24), lineno=895, col_offset=16), Assign([Attribute(Name('bench', Load(), lineno=896, col_offset=16), 'name', Store(), lineno=896, col_offset=16)], Name('show_bench', Load(), lineno=896, col_offset=29), lineno=896, col_offset=16), Expr(Call(Attribute(Name('f', Load(), lineno=897, col_offset=16), 'close', Load(), lineno=897, col_offset=16), [], [], None, None, lineno=897, col_offset=16), lineno=897, col_offset=16), Expr(Call(Attribute(Name('bench', Load(), lineno=898, col_offset=16), 'print_header', Load(), lineno=898, col_offset=16), [], [], None, None, lineno=898, col_offset=16), lineno=898, col_offset=16), If(Name('compare_to', Load(), lineno=899, col_offset=19), [Expr(Call(Attribute(Name('bench', Load(), lineno=900, col_offset=20), 'print_comparison', Load(), lineno=900, col_offset=20), [Name('compare_to', Load(), lineno=900, col_offset=43)], [keyword('hidenoise', Name('hidenoise', Load(), lineno=901, col_offset=53)), keyword('limitnames', Name('limitnames', Load(), lineno=902, col_offset=54))], None, None, lineno=900, col_offset=20), lineno=900, col_offset=20)], [Expr(Call(Attribute(Name('bench', Load(), lineno=904, col_offset=20), 'print_benchmark', Load(), lineno=904, col_offset=20), [], [keyword('hidenoise', Name('hidenoise', Load(), lineno=904, col_offset=52)), keyword('limitnames', Name('limitnames', Load(), lineno=905, col_offset=53))], None, None, lineno=904, col_offset=20), lineno=904, col_offset=20)], lineno=899, col_offset=16)], [ExceptHandler(Name('IOError', Load(), lineno=906, col_offset=19), Name('reason', Store(), lineno=906, col_offset=28), [Print(None, [BinOp(Str('* Error opening/reading file %s: %s', lineno=907, col_offset=22), Mod(), Tuple([Call(Name('repr', Load(), lineno=908, col_offset=20), [Name('show_bench', Load(), lineno=908, col_offset=25)], [], None, None, lineno=908, col_offset=20), Name('reason', Load(), lineno=909, col_offset=20)], Load(), lineno=908, col_offset=20), lineno=907, col_offset=22)], True, lineno=907, col_offset=16), Print(None, [], True, lineno=910, col_offset=16)], lineno=906, col_offset=12)], [], lineno=893, col_offset=12), Return(None, lineno=911, col_offset=12)], [], lineno=892, col_offset=8), If(Name('reportfile', Load(), lineno=913, col_offset=11), [Print(None, [BinOp(Str('Creating benchmark: %s (rounds=%i, warp=%i)', lineno=914, col_offset=18), Mod(), Tuple([Name('reportfile', Load(), lineno=915, col_offset=19), Name('rounds', Load(), lineno=915, col_offset=31), Name('warp', Load(), lineno=915, col_offset=39)], Load(), lineno=915, col_offset=19), lineno=914, col_offset=18)], True, lineno=914, col_offset=12), Print(None, [], True, lineno=916, col_offset=12)], [], lineno=913, col_offset=8), Assign([Name('bench', Store(), lineno=919, col_offset=8)], Call(Name('Benchmark', Load(), lineno=919, col_offset=16), [Name('reportfile', Load(), lineno=919, col_offset=26)], [keyword('verbose', Name('verbose', Load(), lineno=920, col_offset=34)), keyword('timer', Name('timer', Load(), lineno=921, col_offset=32)), keyword('warp', Name('warp', Load(), lineno=922, col_offset=31)), keyword('calibration_runs', Name('calibration_runs', Load(), lineno=923, col_offset=43))], None, None, lineno=919, col_offset=16), lineno=919, col_offset=8), Assign([Attribute(Name('bench', Load(), lineno=924, col_offset=8), 'rounds', Store(), lineno=924, col_offset=8)], Name('rounds', Load(), lineno=924, col_offset=23), lineno=924, col_offset=8), Expr(Call(Attribute(Name('bench', Load(), lineno=925, col_offset=8), 'load_tests', Load(), lineno=925, col_offset=8), [Name('Setup', Load(), lineno=925, col_offset=25)], [keyword('limitnames', Name('limitnames', Load(), lineno=925, col_offset=43))], None, None, lineno=925, col_offset=8), lineno=925, col_offset=8), TryExcept([Expr(Call(Attribute(Name('bench', Load(), lineno=927, col_offset=12), 'calibrate', Load(), lineno=927, col_offset=12), [], [], None, None, lineno=927, col_offset=12), lineno=927, col_offset=12), Expr(Call(Attribute(Name('bench', Load(), lineno=928, col_offset=12), 'run', Load(), lineno=928, col_offset=12), [], [], None, None, lineno=928, col_offset=12), lineno=928, col_offset=12)], [ExceptHandler(Name('KeyboardInterrupt', Load(), lineno=929, col_offset=15), None, [Print(None, [], True, lineno=930, col_offset=12), Print(None, [Str('*** KeyboardInterrupt -- Aborting', lineno=931, col_offset=18)], True, lineno=931, col_offset=12), Print(None, [], True, lineno=932, col_offset=12), Return(None, lineno=933, col_offset=12)], lineno=929, col_offset=8)], [], lineno=926, col_offset=8), Expr(Call(Attribute(Name('bench', Load(), lineno=934, col_offset=8), 'print_header', Load(), lineno=934, col_offset=8), [], [], None, None, lineno=934, col_offset=8), lineno=934, col_offset=8), If(Name('compare_to', Load(), lineno=935, col_offset=11), [Expr(Call(Attribute(Name('bench', Load(), lineno=936, col_offset=12), 'print_comparison', Load(), lineno=936, col_offset=12), [Name('compare_to', Load(), lineno=936, col_offset=35)], [keyword('hidenoise', Name('hidenoise', Load(), lineno=937, col_offset=45)), keyword('limitnames', Name('limitnames', Load(), lineno=938, col_offset=46))], None, None, lineno=936, col_offset=12), lineno=936, col_offset=12)], [Expr(Call(Attribute(Name('bench', Load(), lineno=940, col_offset=12), 'print_benchmark', Load(), lineno=940, col_offset=12), [], [keyword('hidenoise', Name('hidenoise', Load(), lineno=940, col_offset=44)), keyword('limitnames', Name('limitnames', Load(), lineno=941, col_offset=45))], None, None, lineno=940, col_offset=12), lineno=940, col_offset=12)], lineno=935, col_offset=8), Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=944, col_offset=8), 'stderr', Load(), lineno=944, col_offset=8), 'write', Load(), lineno=944, col_offset=8), [Str('\x07', lineno=944, col_offset=25)], [], None, None, lineno=944, col_offset=8), lineno=944, col_offset=8), If(Name('reportfile', Load(), lineno=946, col_offset=11), [TryExcept([Assign([Name('f', Store(), lineno=948, col_offset=16)], Call(Name('open', Load(), lineno=948, col_offset=20), [Name('reportfile', Load(), lineno=948, col_offset=25), Str('wb', lineno=948, col_offset=36)], [], None, None, lineno=948, col_offset=20), lineno=948, col_offset=16), Assign([Attribute(Name('bench', Load(), lineno=949, col_offset=16), 'name', Store(), lineno=949, col_offset=16)], Name('reportfile', Load(), lineno=949, col_offset=29), lineno=949, col_offset=16), Expr(Call(Attribute(Name('pickle', Load(), lineno=950, col_offset=16), 'dump', Load(), lineno=950, col_offset=16), [Name('bench', Load(), lineno=950, col_offset=28), Name('f', Load(), lineno=950, col_offset=34)], [], None, None, lineno=950, col_offset=16), lineno=950, col_offset=16), Expr(Call(Attribute(Name('f', Load(), lineno=951, col_offset=16), 'close', Load(), lineno=951, col_offset=16), [], [], None, None, lineno=951, col_offset=16), lineno=951, col_offset=16)], [ExceptHandler(Name('IOError', Load(), lineno=952, col_offset=19), Name('reason', Store(), lineno=952, col_offset=28), [Print(None, [Str('* Error opening/writing reportfile', lineno=953, col_offset=22)], True, lineno=953, col_offset=16)], lineno=952, col_offset=12), ExceptHandler(Name('IOError', Load(), lineno=954, col_offset=19), Name('reason', Store(), lineno=954, col_offset=28), [Print(None, [BinOp(Str('* Error opening/writing reportfile %s: %s', lineno=955, col_offset=22), Mod(), Tuple([Name('reportfile', Load(), lineno=956, col_offset=20), Name('reason', Load(), lineno=957, col_offset=20)], Load(), lineno=956, col_offset=20), lineno=955, col_offset=22)], True, lineno=955, col_offset=16), Print(None, [], True, lineno=958, col_offset=16)], lineno=954, col_offset=12)], [], lineno=947, col_offset=12)], [], lineno=946, col_offset=8)], [], lineno=816, col_offset=4)], [], lineno=751, col_offset=0), If(Compare(Name('__name__', Load(), lineno=960, col_offset=3), [Eq()], [Str('__main__', lineno=960, col_offset=15)], lineno=960, col_offset=3), [Expr(Call(Name('PyBenchCmdline', Load(), lineno=961, col_offset=4), [], [], None, None, lineno=961, col_offset=4), lineno=961, col_offset=4)], [], lineno=960, col_offset=0)])
