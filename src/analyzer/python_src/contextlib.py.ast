Module([Expr(Str('Utilities for with-statement contexts.  See PEP 343.', lineno=1, col_offset=0), lineno=1, col_offset=0), Import([alias('sys', None)], lineno=3, col_offset=0), ImportFrom('functools', [alias('wraps', None)], 0, lineno=4, col_offset=0), ImportFrom('warnings', [alias('warn', None)], 0, lineno=5, col_offset=0), Assign([Name('__all__', Store(), lineno=7, col_offset=0)], List([Str('contextmanager', lineno=7, col_offset=11), Str('nested', lineno=7, col_offset=29), Str('closing', lineno=7, col_offset=39)], Load(), lineno=7, col_offset=10), lineno=7, col_offset=0), ClassDef('GeneratorContextManager', [Name('object', Load(), lineno=9, col_offset=30)], [Expr(Str('Helper for @contextmanager decorator.', lineno=10, col_offset=4), lineno=10, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=12, col_offset=17), Name('gen', Param(), lineno=12, col_offset=23)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=13, col_offset=8), 'gen', Store(), lineno=13, col_offset=8)], Name('gen', Load(), lineno=13, col_offset=19), lineno=13, col_offset=8)], [], lineno=12, col_offset=4), FunctionDef('__enter__', arguments([Name('self', Param(), lineno=15, col_offset=18)], None, None, []), [TryExcept([Return(Call(Attribute(Attribute(Name('self', Load(), lineno=17, col_offset=19), 'gen', Load(), lineno=17, col_offset=19), 'next', Load(), lineno=17, col_offset=19), [], [], None, None, lineno=17, col_offset=19), lineno=17, col_offset=12)], [ExceptHandler(Name('StopIteration', Load(), lineno=18, col_offset=15), None, [Raise(Call(Name('RuntimeError', Load(), lineno=19, col_offset=18), [Str("generator didn't yield", lineno=19, col_offset=31)], [], None, None, lineno=19, col_offset=18), None, None, lineno=19, col_offset=12)], lineno=18, col_offset=8)], [], lineno=16, col_offset=8)], [], lineno=15, col_offset=4), FunctionDef('__exit__', arguments([Name('self', Param(), lineno=21, col_offset=17), Name('type', Param(), lineno=21, col_offset=23), Name('value', Param(), lineno=21, col_offset=29), Name('traceback', Param(), lineno=21, col_offset=36)], None, None, []), [If(Compare(Name('type', Load(), lineno=22, col_offset=11), [Is()], [Name('None', Load(), lineno=22, col_offset=19)], lineno=22, col_offset=11), [TryExcept([Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=24, col_offset=16), 'gen', Load(), lineno=24, col_offset=16), 'next', Load(), lineno=24, col_offset=16), [], [], None, None, lineno=24, col_offset=16), lineno=24, col_offset=16)], [ExceptHandler(Name('StopIteration', Load(), lineno=25, col_offset=19), None, [Return(None, lineno=26, col_offset=16)], lineno=25, col_offset=12)], [Raise(Call(Name('RuntimeError', Load(), lineno=28, col_offset=22), [Str("generator didn't stop", lineno=28, col_offset=35)], [], None, None, lineno=28, col_offset=22), None, None, lineno=28, col_offset=16)], lineno=23, col_offset=12)], [If(Compare(Name('value', Load(), lineno=30, col_offset=15), [Is()], [Name('None', Load(), lineno=30, col_offset=24)], lineno=30, col_offset=15), [Assign([Name('value', Store(), lineno=33, col_offset=16)], Call(Name('type', Load(), lineno=33, col_offset=24), [], [], None, None, lineno=33, col_offset=24), lineno=33, col_offset=16)], [], lineno=30, col_offset=12), TryExcept([Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=35, col_offset=16), 'gen', Load(), lineno=35, col_offset=16), 'throw', Load(), lineno=35, col_offset=16), [Name('type', Load(), lineno=35, col_offset=31), Name('value', Load(), lineno=35, col_offset=37), Name('traceback', Load(), lineno=35, col_offset=44)], [], None, None, lineno=35, col_offset=16), lineno=35, col_offset=16), Raise(Call(Name('RuntimeError', Load(), lineno=36, col_offset=22), [Str("generator didn't stop after throw()", lineno=36, col_offset=35)], [], None, None, lineno=36, col_offset=22), None, None, lineno=36, col_offset=16)], [ExceptHandler(Name('StopIteration', Load(), lineno=37, col_offset=19), Name('exc', Store(), lineno=37, col_offset=34), [Return(Compare(Name('exc', Load(), lineno=41, col_offset=23), [IsNot()], [Name('value', Load(), lineno=41, col_offset=34)], lineno=41, col_offset=23), lineno=41, col_offset=16)], lineno=37, col_offset=12), ExceptHandler(None, None, [If(Compare(Subscript(Call(Attribute(Name('sys', Load(), lineno=50, col_offset=19), 'exc_info', Load(), lineno=50, col_offset=19), [], [], None, None, lineno=50, col_offset=19), Index(Num(1, lineno=50, col_offset=34)), Load(), lineno=50, col_offset=19), [IsNot()], [Name('value', Load(), lineno=50, col_offset=44)], lineno=50, col_offset=19), [Raise(None, None, None, lineno=51, col_offset=20)], [], lineno=50, col_offset=16)], lineno=42, col_offset=12)], [], lineno=34, col_offset=12)], lineno=22, col_offset=8)], [], lineno=21, col_offset=4)], [], lineno=9, col_offset=0), FunctionDef('contextmanager', arguments([Name('func', Param(), lineno=54, col_offset=19)], None, None, []), [Expr(Str('@contextmanager decorator.\n\n    Typical usage:\n\n        @contextmanager\n        def some_generator(<arguments>):\n            <setup>\n            try:\n                yield <value>\n            finally:\n                <cleanup>\n\n    This makes this:\n\n        with some_generator(<arguments>) as <variable>:\n            <body>\n\n    equivalent to this:\n\n        <setup>\n        try:\n            <variable> = <value>\n            <body>\n        finally:\n            <cleanup>\n\n    ', lineno=81, col_offset=-1), lineno=81, col_offset=-1), FunctionDef('helper', arguments([], 'args', 'kwds', []), [Return(Call(Name('GeneratorContextManager', Load(), lineno=84, col_offset=15), [Call(Name('func', Load(), lineno=84, col_offset=39), [], [], Name('args', Load(), lineno=84, col_offset=45), Name('kwds', Load(), lineno=84, col_offset=53), lineno=84, col_offset=39)], [], None, None, lineno=84, col_offset=15), lineno=84, col_offset=8)], [Call(Name('wraps', Load(), lineno=82, col_offset=5), [Name('func', Load(), lineno=82, col_offset=11)], [], None, None, lineno=82, col_offset=5)], lineno=82, col_offset=4), Return(Name('helper', Load(), lineno=85, col_offset=11), lineno=85, col_offset=4)], [], lineno=54, col_offset=0), FunctionDef('nested', arguments([], 'managers', None, []), [Expr(Str('Combine multiple context managers into a single nested context manager.\n\n   This function has been deprecated in favour of the multiple manager form\n   of the with statement.\n\n   The one advantage of this function over the multiple manager form of the\n   with statement is that argument unpacking allows it to be\n   used with a variable number of context managers as follows:\n\n      with nested(*managers):\n          do_something()\n\n    ', lineno=102, col_offset=-1), lineno=102, col_offset=-1), Expr(Call(Name('warn', Load(), lineno=103, col_offset=4), [Str('With-statements now directly support multiple context managers', lineno=103, col_offset=9), Name('DeprecationWarning', Load(), lineno=104, col_offset=9), Num(3, lineno=104, col_offset=29)], [], None, None, lineno=103, col_offset=4), lineno=103, col_offset=4), Assign([Name('exits', Store(), lineno=105, col_offset=4)], List([], Load(), lineno=105, col_offset=12), lineno=105, col_offset=4), Assign([Name('vars', Store(), lineno=106, col_offset=4)], List([], Load(), lineno=106, col_offset=11), lineno=106, col_offset=4), Assign([Name('exc', Store(), lineno=107, col_offset=4)], Tuple([Name('None', Load(), lineno=107, col_offset=11), Name('None', Load(), lineno=107, col_offset=17), Name('None', Load(), lineno=107, col_offset=23)], Load(), lineno=107, col_offset=11), lineno=107, col_offset=4), TryFinally([TryExcept([For(Name('mgr', Store(), lineno=109, col_offset=12), Name('managers', Load(), lineno=109, col_offset=19), [Assign([Name('exit', Store(), lineno=110, col_offset=12)], Attribute(Name('mgr', Load(), lineno=110, col_offset=19), '__exit__', Load(), lineno=110, col_offset=19), lineno=110, col_offset=12), Assign([Name('enter', Store(), lineno=111, col_offset=12)], Attribute(Name('mgr', Load(), lineno=111, col_offset=20), '__enter__', Load(), lineno=111, col_offset=20), lineno=111, col_offset=12), Expr(Call(Attribute(Name('vars', Load(), lineno=112, col_offset=12), 'append', Load(), lineno=112, col_offset=12), [Call(Name('enter', Load(), lineno=112, col_offset=24), [], [], None, None, lineno=112, col_offset=24)], [], None, None, lineno=112, col_offset=12), lineno=112, col_offset=12), Expr(Call(Attribute(Name('exits', Load(), lineno=113, col_offset=12), 'append', Load(), lineno=113, col_offset=12), [Name('exit', Load(), lineno=113, col_offset=25)], [], None, None, lineno=113, col_offset=12), lineno=113, col_offset=12)], [], lineno=109, col_offset=8), Expr(Yield(Name('vars', Load(), lineno=114, col_offset=14), lineno=114, col_offset=8), lineno=114, col_offset=8)], [ExceptHandler(None, None, [Assign([Name('exc', Store(), lineno=116, col_offset=8)], Call(Attribute(Name('sys', Load(), lineno=116, col_offset=14), 'exc_info', Load(), lineno=116, col_offset=14), [], [], None, None, lineno=116, col_offset=14), lineno=116, col_offset=8)], lineno=115, col_offset=4)], [], lineno=108, col_offset=4)], [While(Name('exits', Load(), lineno=118, col_offset=14), [Assign([Name('exit', Store(), lineno=119, col_offset=12)], Call(Attribute(Name('exits', Load(), lineno=119, col_offset=19), 'pop', Load(), lineno=119, col_offset=19), [], [], None, None, lineno=119, col_offset=19), lineno=119, col_offset=12), TryExcept([If(Call(Name('exit', Load(), lineno=121, col_offset=19), [], [], Name('exc', Load(), lineno=121, col_offset=25), None, lineno=121, col_offset=19), [Assign([Name('exc', Store(), lineno=122, col_offset=20)], Tuple([Name('None', Load(), lineno=122, col_offset=27), Name('None', Load(), lineno=122, col_offset=33), Name('None', Load(), lineno=122, col_offset=39)], Load(), lineno=122, col_offset=27), lineno=122, col_offset=20)], [], lineno=121, col_offset=16)], [ExceptHandler(None, None, [Assign([Name('exc', Store(), lineno=124, col_offset=16)], Call(Attribute(Name('sys', Load(), lineno=124, col_offset=22), 'exc_info', Load(), lineno=124, col_offset=22), [], [], None, None, lineno=124, col_offset=22), lineno=124, col_offset=16)], lineno=123, col_offset=12)], [], lineno=120, col_offset=12)], [], lineno=118, col_offset=8), If(Compare(Name('exc', Load(), lineno=125, col_offset=11), [NotEq()], [Tuple([Name('None', Load(), lineno=125, col_offset=19), Name('None', Load(), lineno=125, col_offset=25), Name('None', Load(), lineno=125, col_offset=31)], Load(), lineno=125, col_offset=19)], lineno=125, col_offset=11), [Raise(Subscript(Name('exc', Load(), lineno=129, col_offset=18), Index(Num(0, lineno=129, col_offset=22)), Load(), lineno=129, col_offset=18), Subscript(Name('exc', Load(), lineno=129, col_offset=26), Index(Num(1, lineno=129, col_offset=30)), Load(), lineno=129, col_offset=26), Subscript(Name('exc', Load(), lineno=129, col_offset=34), Index(Num(2, lineno=129, col_offset=38)), Load(), lineno=129, col_offset=34), lineno=129, col_offset=12)], [], lineno=125, col_offset=8)], lineno=108, col_offset=4)], [Name('contextmanager', Load(), lineno=88, col_offset=1)], lineno=88, col_offset=0), ClassDef('closing', [Name('object', Load(), lineno=132, col_offset=14)], [Expr(Str('Context to automatically close something at the end of a block.\n\n    Code like this:\n\n        with closing(<module>.open(<arguments>)) as f:\n            <block>\n\n    is equivalent to this:\n\n        f = <module>.open(<arguments>)\n        try:\n            <block>\n        finally:\n            f.close()\n\n    ', lineno=148, col_offset=-1), lineno=148, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=149, col_offset=17), Name('thing', Param(), lineno=149, col_offset=23)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=150, col_offset=8), 'thing', Store(), lineno=150, col_offset=8)], Name('thing', Load(), lineno=150, col_offset=21), lineno=150, col_offset=8)], [], lineno=149, col_offset=4), FunctionDef('__enter__', arguments([Name('self', Param(), lineno=151, col_offset=18)], None, None, []), [Return(Attribute(Name('self', Load(), lineno=152, col_offset=15), 'thing', Load(), lineno=152, col_offset=15), lineno=152, col_offset=8)], [], lineno=151, col_offset=4), FunctionDef('__exit__', arguments([Name('self', Param(), lineno=153, col_offset=17)], 'exc_info', None, []), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=154, col_offset=8), 'thing', Load(), lineno=154, col_offset=8), 'close', Load(), lineno=154, col_offset=8), [], [], None, None, lineno=154, col_offset=8), lineno=154, col_offset=8)], [], lineno=153, col_offset=4)], [], lineno=132, col_offset=0)])
