Module([ImportFrom('unittest', [alias('TestCase', None)], 0, lineno=1, col_offset=0), Import([alias('json', None)], lineno=3, col_offset=0), Assign([Name('JSON', Store(), lineno=6, col_offset=0)], Str('\n[\n    "JSON Test Pattern pass1",\n    {"object with 1 member":["array with 1 element"]},\n    {},\n    [],\n    -42,\n    true,\n    false,\n    null,\n    {\n        "integer": 1234567890,\n        "real": -9876.543210,\n        "e": 0.123456789e-12,\n        "E": 1.234567890E+34,\n        "":  23456789012E666,\n        "zero": 0,\n        "one": 1,\n        "space": " ",\n        "quote": "\\"",\n        "backslash": "\\\\",\n        "controls": "\\b\\f\\n\\r\\t",\n        "slash": "/ & \\/",\n        "alpha": "abcdefghijklmnopqrstuvwyz",\n        "ALPHA": "ABCDEFGHIJKLMNOPQRSTUVWYZ",\n        "digit": "0123456789",\n        "special": "`1~!@#$%^&*()_+-={\':[,]}|;.</>?",\n        "hex": "\\u0123\\u4567\\u89AB\\uCDEF\\uabcd\\uef4A",\n        "true": true,\n        "false": false,\n        "null": null,\n        "array":[  ],\n        "object":{  },\n        "address": "50 St. James Street",\n        "url": "http://www.JSON.org/",\n        "comment": "// /* <!-- --",\n        "# -- --> */": " ",\n        " s p a c e d " :[1,2 , 3\n\n,\n\n4 , 5        ,          6           ,7        ],\n        "compact": [1,2,3,4,5,6,7],\n        "jsontext": "{\\"object with 1 member\\":[\\"array with 1 element\\"]}",\n        "quotes": "&#34; \\u0022 %22 0x22 034 &#x22;",\n        "\\/\\\\\\"\\uCAFE\\uBABE\\uAB98\\uFCDE\\ubcda\\uef4A\\b\\f\\n\\r\\t`1~!@#$%^&*()_+-=[]{}|;:\',./<>?"\n: "A key can be any string"\n    },\n    0.5 ,98.6\n,\n99.44\n,\n\n1066\n\n\n,"rosebud"]\n', lineno=63, col_offset=-1), lineno=6, col_offset=0), ClassDef('TestPass1', [Name('TestCase', Load(), lineno=65, col_offset=16)], [FunctionDef('test_parse', arguments([Name('self', Param(), lineno=66, col_offset=19)], None, None, []), [Assign([Name('res', Store(), lineno=68, col_offset=8)], Call(Attribute(Name('json', Load(), lineno=68, col_offset=14), 'loads', Load(), lineno=68, col_offset=14), [Name('JSON', Load(), lineno=68, col_offset=25)], [], None, None, lineno=68, col_offset=14), lineno=68, col_offset=8), Assign([Name('out', Store(), lineno=69, col_offset=8)], Call(Attribute(Name('json', Load(), lineno=69, col_offset=14), 'dumps', Load(), lineno=69, col_offset=14), [Name('res', Load(), lineno=69, col_offset=25)], [], None, None, lineno=69, col_offset=14), lineno=69, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=70, col_offset=8), 'assertEqual', Load(), lineno=70, col_offset=8), [Name('res', Load(), lineno=70, col_offset=25), Call(Attribute(Name('json', Load(), lineno=70, col_offset=30), 'loads', Load(), lineno=70, col_offset=30), [Name('out', Load(), lineno=70, col_offset=41)], [], None, None, lineno=70, col_offset=30)], [], None, None, lineno=70, col_offset=8), lineno=70, col_offset=8), TryExcept([Expr(Call(Attribute(Name('json', Load(), lineno=72, col_offset=12), 'dumps', Load(), lineno=72, col_offset=12), [Name('res', Load(), lineno=72, col_offset=23)], [keyword('allow_nan', Name('False', Load(), lineno=72, col_offset=38))], None, None, lineno=72, col_offset=12), lineno=72, col_offset=12)], [ExceptHandler(Name('ValueError', Load(), lineno=73, col_offset=15), None, [Pass( lineno=74, col_offset=12)], lineno=73, col_offset=8)], [Expr(Call(Attribute(Name('self', Load(), lineno=76, col_offset=12), 'fail', Load(), lineno=76, col_offset=12), [Str('23456789012E666 should be out of range', lineno=76, col_offset=22)], [], None, None, lineno=76, col_offset=12), lineno=76, col_offset=12)], lineno=71, col_offset=8)], [], lineno=66, col_offset=4)], [], lineno=65, col_offset=0)])
