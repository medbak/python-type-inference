Module([Expr(Str("\nFile-like objects that read from or write to a bsddb record.\n\nThis implements (nearly) all stdio methods.\n\nf = DBRecIO(db, key, txn=None)\nf.close()           # explicitly release resources held\nflag = f.isatty()   # always false\npos = f.tell()      # get current position\nf.seek(pos)         # set current position\nf.seek(pos, mode)   # mode 0: absolute; 1: relative; 2: relative to EOF\nbuf = f.read()      # read until EOF\nbuf = f.read(n)     # read up to n bytes\nf.truncate([size])  # truncate file at to at most size (default: current pos)\nf.write(buf)        # write at current position\nf.writelines(list)  # for line in list: f.write(line)\n\nNotes:\n- fileno() is left unimplemented so that code which uses it triggers\n  an exception early.\n- There's a simple test set (see end of this file) - not yet updated\n  for DBRecIO.\n- readline() is not implemented yet.\n\n\nFrom:\n    Itamar Shtull-Trauring <itamar@maxnm.com>\n", lineno=29, col_offset=-1), lineno=29, col_offset=-1), Import([alias('errno', None)], lineno=31, col_offset=0), Import([alias('string', None)], lineno=32, col_offset=0), ClassDef('DBRecIO', [], [FunctionDef('__init__', arguments([Name('self', Param(), lineno=35, col_offset=17), Name('db', Param(), lineno=35, col_offset=23), Name('key', Param(), lineno=35, col_offset=27), Name('txn', Param(), lineno=35, col_offset=32)], None, None, [Name('None', Load(), lineno=35, col_offset=36)]), [Assign([Attribute(Name('self', Load(), lineno=36, col_offset=8), 'db', Store(), lineno=36, col_offset=8)], Name('db', Load(), lineno=36, col_offset=18), lineno=36, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=37, col_offset=8), 'key', Store(), lineno=37, col_offset=8)], Name('key', Load(), lineno=37, col_offset=19), lineno=37, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=38, col_offset=8), 'txn', Store(), lineno=38, col_offset=8)], Name('txn', Load(), lineno=38, col_offset=19), lineno=38, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=39, col_offset=8), 'len', Store(), lineno=39, col_offset=8)], Name('None', Load(), lineno=39, col_offset=19), lineno=39, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=40, col_offset=8), 'pos', Store(), lineno=40, col_offset=8)], Num(0, lineno=40, col_offset=19), lineno=40, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=41, col_offset=8), 'closed', Store(), lineno=41, col_offset=8)], Num(0, lineno=41, col_offset=22), lineno=41, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=42, col_offset=8), 'softspace', Store(), lineno=42, col_offset=8)], Num(0, lineno=42, col_offset=25), lineno=42, col_offset=8)], [], lineno=35, col_offset=4), FunctionDef('close', arguments([Name('self', Param(), lineno=44, col_offset=14)], None, None, []), [If(UnaryOp(Not(), Attribute(Name('self', Load(), lineno=45, col_offset=15), 'closed', Load(), lineno=45, col_offset=15), lineno=45, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=46, col_offset=12), 'closed', Store(), lineno=46, col_offset=12)], Num(1, lineno=46, col_offset=26), lineno=46, col_offset=12), Delete([Attribute(Name('self', Load(), lineno=47, col_offset=16), 'db', Del(), lineno=47, col_offset=16), Attribute(Name('self', Load(), lineno=47, col_offset=25), 'txn', Del(), lineno=47, col_offset=25)], lineno=47, col_offset=12)], [], lineno=45, col_offset=8)], [], lineno=44, col_offset=4), FunctionDef('isatty', arguments([Name('self', Param(), lineno=49, col_offset=15)], None, None, []), [If(Attribute(Name('self', Load(), lineno=50, col_offset=11), 'closed', Load(), lineno=50, col_offset=11), [Raise(Name('ValueError', Load(), lineno=51, col_offset=18), Str('I/O operation on closed file', lineno=51, col_offset=30), None, lineno=51, col_offset=12)], [], lineno=50, col_offset=8), Return(Num(0, lineno=52, col_offset=15), lineno=52, col_offset=8)], [], lineno=49, col_offset=4), FunctionDef('seek', arguments([Name('self', Param(), lineno=54, col_offset=13), Name('pos', Param(), lineno=54, col_offset=19), Name('mode', Param(), lineno=54, col_offset=24)], None, None, [Num(0, lineno=54, col_offset=31)]), [If(Attribute(Name('self', Load(), lineno=55, col_offset=11), 'closed', Load(), lineno=55, col_offset=11), [Raise(Name('ValueError', Load(), lineno=56, col_offset=18), Str('I/O operation on closed file', lineno=56, col_offset=30), None, lineno=56, col_offset=12)], [], lineno=55, col_offset=8), If(Compare(Name('mode', Load(), lineno=57, col_offset=11), [Eq()], [Num(1, lineno=57, col_offset=19)], lineno=57, col_offset=11), [Assign([Name('pos', Store(), lineno=58, col_offset=12)], BinOp(Name('pos', Load(), lineno=58, col_offset=18), Add(), Attribute(Name('self', Load(), lineno=58, col_offset=24), 'pos', Load(), lineno=58, col_offset=24), lineno=58, col_offset=18), lineno=58, col_offset=12)], [If(Compare(Name('mode', Load(), lineno=59, col_offset=13), [Eq()], [Num(2, lineno=59, col_offset=21)], lineno=59, col_offset=13), [Assign([Name('pos', Store(), lineno=60, col_offset=12)], BinOp(Name('pos', Load(), lineno=60, col_offset=18), Add(), Attribute(Name('self', Load(), lineno=60, col_offset=24), 'len', Load(), lineno=60, col_offset=24), lineno=60, col_offset=18), lineno=60, col_offset=12)], [], lineno=59, col_offset=13)], lineno=57, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=61, col_offset=8), 'pos', Store(), lineno=61, col_offset=8)], Call(Name('max', Load(), lineno=61, col_offset=19), [Num(0, lineno=61, col_offset=23), Name('pos', Load(), lineno=61, col_offset=26)], [], None, None, lineno=61, col_offset=19), lineno=61, col_offset=8)], [], lineno=54, col_offset=4), FunctionDef('tell', arguments([Name('self', Param(), lineno=63, col_offset=13)], None, None, []), [If(Attribute(Name('self', Load(), lineno=64, col_offset=11), 'closed', Load(), lineno=64, col_offset=11), [Raise(Name('ValueError', Load(), lineno=65, col_offset=18), Str('I/O operation on closed file', lineno=65, col_offset=30), None, lineno=65, col_offset=12)], [], lineno=64, col_offset=8), Return(Attribute(Name('self', Load(), lineno=66, col_offset=15), 'pos', Load(), lineno=66, col_offset=15), lineno=66, col_offset=8)], [], lineno=63, col_offset=4), FunctionDef('read', arguments([Name('self', Param(), lineno=68, col_offset=13), Name('n', Param(), lineno=68, col_offset=19)], None, None, [Num(-1, lineno=68, col_offset=24)]), [If(Attribute(Name('self', Load(), lineno=69, col_offset=11), 'closed', Load(), lineno=69, col_offset=11), [Raise(Name('ValueError', Load(), lineno=70, col_offset=18), Str('I/O operation on closed file', lineno=70, col_offset=30), None, lineno=70, col_offset=12)], [], lineno=69, col_offset=8), If(Compare(Name('n', Load(), lineno=71, col_offset=11), [Lt()], [Num(0, lineno=71, col_offset=15)], lineno=71, col_offset=11), [Assign([Name('newpos', Store(), lineno=72, col_offset=12)], Attribute(Name('self', Load(), lineno=72, col_offset=21), 'len', Load(), lineno=72, col_offset=21), lineno=72, col_offset=12)], [Assign([Name('newpos', Store(), lineno=74, col_offset=12)], Call(Name('min', Load(), lineno=74, col_offset=21), [BinOp(Attribute(Name('self', Load(), lineno=74, col_offset=25), 'pos', Load(), lineno=74, col_offset=25), Add(), Name('n', Load(), lineno=74, col_offset=34), lineno=74, col_offset=25), Attribute(Name('self', Load(), lineno=74, col_offset=37), 'len', Load(), lineno=74, col_offset=37)], [], None, None, lineno=74, col_offset=21), lineno=74, col_offset=12)], lineno=71, col_offset=8), Assign([Name('dlen', Store(), lineno=76, col_offset=8)], BinOp(Name('newpos', Load(), lineno=76, col_offset=15), Sub(), Attribute(Name('self', Load(), lineno=76, col_offset=24), 'pos', Load(), lineno=76, col_offset=24), lineno=76, col_offset=15), lineno=76, col_offset=8), Assign([Name('r', Store(), lineno=78, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=78, col_offset=12), 'db', Load(), lineno=78, col_offset=12), 'get', Load(), lineno=78, col_offset=12), [Attribute(Name('self', Load(), lineno=78, col_offset=24), 'key', Load(), lineno=78, col_offset=24)], [keyword('txn', Attribute(Name('self', Load(), lineno=78, col_offset=38), 'txn', Load(), lineno=78, col_offset=38)), keyword('dlen', Name('dlen', Load(), lineno=78, col_offset=53)), keyword('doff', Attribute(Name('self', Load(), lineno=78, col_offset=64), 'pos', Load(), lineno=78, col_offset=64))], None, None, lineno=78, col_offset=12), lineno=78, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=79, col_offset=8), 'pos', Store(), lineno=79, col_offset=8)], Name('newpos', Load(), lineno=79, col_offset=19), lineno=79, col_offset=8), Return(Name('r', Load(), lineno=80, col_offset=15), lineno=80, col_offset=8)], [], lineno=68, col_offset=4), Assign([Name('__fixme', Store(), lineno=82, col_offset=4)], Str('\n    def readline(self, length=None):\n        if self.closed:\n            raise ValueError, "I/O operation on closed file"\n        if self.buflist:\n            self.buf = self.buf + string.joinfields(self.buflist, \'\')\n            self.buflist = []\n        i = string.find(self.buf, \'\n\', self.pos)\n        if i < 0:\n            newpos = self.len\n        else:\n            newpos = i+1\n        if length is not None:\n            if self.pos + length < newpos:\n                newpos = self.pos + length\n        r = self.buf[self.pos:newpos]\n        self.pos = newpos\n        return r\n\n    def readlines(self, sizehint = 0):\n        total = 0\n        lines = []\n        line = self.readline()\n        while line:\n            lines.append(line)\n            total += len(line)\n            if 0 < sizehint <= total:\n                break\n            line = self.readline()\n        return lines\n    ', lineno=112, col_offset=-1), lineno=82, col_offset=4), FunctionDef('truncate', arguments([Name('self', Param(), lineno=114, col_offset=17), Name('size', Param(), lineno=114, col_offset=23)], None, None, [Name('None', Load(), lineno=114, col_offset=28)]), [If(Attribute(Name('self', Load(), lineno=115, col_offset=11), 'closed', Load(), lineno=115, col_offset=11), [Raise(Name('ValueError', Load(), lineno=116, col_offset=18), Str('I/O operation on closed file', lineno=116, col_offset=30), None, lineno=116, col_offset=12)], [], lineno=115, col_offset=8), If(Compare(Name('size', Load(), lineno=117, col_offset=11), [Is()], [Name('None', Load(), lineno=117, col_offset=19)], lineno=117, col_offset=11), [Assign([Name('size', Store(), lineno=118, col_offset=12)], Attribute(Name('self', Load(), lineno=118, col_offset=19), 'pos', Load(), lineno=118, col_offset=19), lineno=118, col_offset=12)], [If(Compare(Name('size', Load(), lineno=119, col_offset=13), [Lt()], [Num(0, lineno=119, col_offset=20)], lineno=119, col_offset=13), [Raise(Call(Name('IOError', Load(), lineno=120, col_offset=18), [Attribute(Name('errno', Load(), lineno=120, col_offset=26), 'EINVAL', Load(), lineno=120, col_offset=26), Str('Negative size not allowed', lineno=121, col_offset=38)], [], None, None, lineno=120, col_offset=18), None, None, lineno=120, col_offset=12)], [If(Compare(Name('size', Load(), lineno=122, col_offset=13), [Lt()], [Attribute(Name('self', Load(), lineno=122, col_offset=20), 'pos', Load(), lineno=122, col_offset=20)], lineno=122, col_offset=13), [Assign([Attribute(Name('self', Load(), lineno=123, col_offset=12), 'pos', Store(), lineno=123, col_offset=12)], Name('size', Load(), lineno=123, col_offset=23), lineno=123, col_offset=12)], [], lineno=122, col_offset=13)], lineno=119, col_offset=13)], lineno=117, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=124, col_offset=8), 'db', Load(), lineno=124, col_offset=8), 'put', Load(), lineno=124, col_offset=8), [Attribute(Name('self', Load(), lineno=124, col_offset=20), 'key', Load(), lineno=124, col_offset=20), Str('', lineno=124, col_offset=30)], [keyword('txn', Attribute(Name('self', Load(), lineno=124, col_offset=38), 'txn', Load(), lineno=124, col_offset=38)), keyword('dlen', BinOp(Attribute(Name('self', Load(), lineno=124, col_offset=53), 'len', Load(), lineno=124, col_offset=53), Sub(), Name('size', Load(), lineno=124, col_offset=62), lineno=124, col_offset=53)), keyword('doff', Name('size', Load(), lineno=124, col_offset=73))], None, None, lineno=124, col_offset=8), lineno=124, col_offset=8)], [], lineno=114, col_offset=4), FunctionDef('write', arguments([Name('self', Param(), lineno=126, col_offset=14), Name('s', Param(), lineno=126, col_offset=20)], None, None, []), [If(Attribute(Name('self', Load(), lineno=127, col_offset=11), 'closed', Load(), lineno=127, col_offset=11), [Raise(Name('ValueError', Load(), lineno=128, col_offset=18), Str('I/O operation on closed file', lineno=128, col_offset=30), None, lineno=128, col_offset=12)], [], lineno=127, col_offset=8), If(UnaryOp(Not(), Name('s', Load(), lineno=129, col_offset=15), lineno=129, col_offset=11), [Return(None, lineno=129, col_offset=18)], [], lineno=129, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=130, col_offset=11), 'pos', Load(), lineno=130, col_offset=11), [Gt()], [Attribute(Name('self', Load(), lineno=130, col_offset=22), 'len', Load(), lineno=130, col_offset=22)], lineno=130, col_offset=11), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=131, col_offset=12), 'buflist', Load(), lineno=131, col_offset=12), 'append', Load(), lineno=131, col_offset=12), [BinOp(Str('\x00', lineno=131, col_offset=32), Mult(), BinOp(Attribute(Name('self', Load(), lineno=131, col_offset=38), 'pos', Load(), lineno=131, col_offset=38), Sub(), Attribute(Name('self', Load(), lineno=131, col_offset=49), 'len', Load(), lineno=131, col_offset=49), lineno=131, col_offset=38), lineno=131, col_offset=32)], [], None, None, lineno=131, col_offset=12), lineno=131, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=132, col_offset=12), 'len', Store(), lineno=132, col_offset=12)], Attribute(Name('self', Load(), lineno=132, col_offset=23), 'pos', Load(), lineno=132, col_offset=23), lineno=132, col_offset=12)], [], lineno=130, col_offset=8), Assign([Name('newpos', Store(), lineno=133, col_offset=8)], BinOp(Attribute(Name('self', Load(), lineno=133, col_offset=17), 'pos', Load(), lineno=133, col_offset=17), Add(), Call(Name('len', Load(), lineno=133, col_offset=28), [Name('s', Load(), lineno=133, col_offset=32)], [], None, None, lineno=133, col_offset=28), lineno=133, col_offset=17), lineno=133, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=134, col_offset=8), 'db', Load(), lineno=134, col_offset=8), 'put', Load(), lineno=134, col_offset=8), [Attribute(Name('self', Load(), lineno=134, col_offset=20), 'key', Load(), lineno=134, col_offset=20), Name('s', Load(), lineno=134, col_offset=30)], [keyword('txn', Attribute(Name('self', Load(), lineno=134, col_offset=37), 'txn', Load(), lineno=134, col_offset=37)), keyword('dlen', Call(Name('len', Load(), lineno=134, col_offset=52), [Name('s', Load(), lineno=134, col_offset=56)], [], None, None, lineno=134, col_offset=52)), keyword('doff', Attribute(Name('self', Load(), lineno=134, col_offset=65), 'pos', Load(), lineno=134, col_offset=65))], None, None, lineno=134, col_offset=8), lineno=134, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=135, col_offset=8), 'pos', Store(), lineno=135, col_offset=8)], Name('newpos', Load(), lineno=135, col_offset=19), lineno=135, col_offset=8)], [], lineno=126, col_offset=4), FunctionDef('writelines', arguments([Name('self', Param(), lineno=137, col_offset=19), Name('list', Param(), lineno=137, col_offset=25)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=138, col_offset=8), 'write', Load(), lineno=138, col_offset=8), [Call(Attribute(Name('string', Load(), lineno=138, col_offset=19), 'joinfields', Load(), lineno=138, col_offset=19), [Name('list', Load(), lineno=138, col_offset=37), Str('', lineno=138, col_offset=43)], [], None, None, lineno=138, col_offset=19)], [], None, None, lineno=138, col_offset=8), lineno=138, col_offset=8)], [], lineno=137, col_offset=4), FunctionDef('flush', arguments([Name('self', Param(), lineno=140, col_offset=14)], None, None, []), [If(Attribute(Name('self', Load(), lineno=141, col_offset=11), 'closed', Load(), lineno=141, col_offset=11), [Raise(Name('ValueError', Load(), lineno=142, col_offset=18), Str('I/O operation on closed file', lineno=142, col_offset=30), None, lineno=142, col_offset=12)], [], lineno=141, col_offset=8)], [], lineno=140, col_offset=4)], [], lineno=34, col_offset=0), Expr(Str("\n# A little test suite\n\ndef _test():\n    import sys\n    if sys.argv[1:]:\n        file = sys.argv[1]\n    else:\n        file = '/etc/passwd'\n    lines = open(file, 'r').readlines()\n    text = open(file, 'r').read()\n    f = StringIO()\n    for line in lines[:-2]:\n        f.write(line)\n    f.writelines(lines[-2:])\n    if f.getvalue() != text:\n        raise RuntimeError, 'write failed'\n    length = f.tell()\n    print 'File length =', length\n    f.seek(len(lines[0]))\n    f.write(lines[1])\n    f.seek(0)\n    print 'First line =', repr(f.readline())\n    here = f.tell()\n    line = f.readline()\n    print 'Second line =', repr(line)\n    f.seek(-len(line), 1)\n    line2 = f.read(len(line))\n    if line != line2:\n        raise RuntimeError, 'bad result after seek back'\n    f.seek(len(line2), 1)\n    list = f.readlines()\n    line = list[-1]\n    f.seek(f.tell() - len(line))\n    line2 = f.read()\n    if line != line2:\n        raise RuntimeError, 'bad result after seek back from EOF'\n    print 'Read', len(list), 'more lines'\n    print 'File length =', f.tell()\n    if f.tell() != length:\n        raise RuntimeError, 'bad length'\n    f.close()\n\nif __name__ == '__main__':\n    _test()\n", lineno=190, col_offset=-1), lineno=190, col_offset=-1)])
