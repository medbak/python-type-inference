Module([Expr(Str('\nHere\'s a sample session to show how to use this module.\nAt the moment, this is the only documentation.\n\nThe Basics\n----------\n\nImporting is easy..\n\n   >>> import Cookie\n\nMost of the time you start by creating a cookie.  Cookies come in\nthree flavors, each with slightly different encoding semantics, but\nmore on that later.\n\n   >>> C = Cookie.SimpleCookie()\n   >>> C = Cookie.SerialCookie()\n   >>> C = Cookie.SmartCookie()\n\n[Note: Long-time users of Cookie.py will remember using\nCookie.Cookie() to create an Cookie object.  Although deprecated, it\nis still supported by the code.  See the Backward Compatibility notes\nfor more information.]\n\nOnce you\'ve created your Cookie, you can add values just as if it were\na dictionary.\n\n   >>> C = Cookie.SmartCookie()\n   >>> C["fig"] = "newton"\n   >>> C["sugar"] = "wafer"\n   >>> C.output()\n   \'Set-Cookie: fig=newton\\r\\nSet-Cookie: sugar=wafer\'\n\nNotice that the printable representation of a Cookie is the\nappropriate format for a Set-Cookie: header.  This is the\ndefault behavior.  You can change the header and printed\nattributes by using the .output() function\n\n   >>> C = Cookie.SmartCookie()\n   >>> C["rocky"] = "road"\n   >>> C["rocky"]["path"] = "/cookie"\n   >>> print C.output(header="Cookie:")\n   Cookie: rocky=road; Path=/cookie\n   >>> print C.output(attrs=[], header="Cookie:")\n   Cookie: rocky=road\n\nThe load() method of a Cookie extracts cookies from a string.  In a\nCGI script, you would use this method to extract the cookies from the\nHTTP_COOKIE environment variable.\n\n   >>> C = Cookie.SmartCookie()\n   >>> C.load("chips=ahoy; vienna=finger")\n   >>> C.output()\n   \'Set-Cookie: chips=ahoy\\r\\nSet-Cookie: vienna=finger\'\n\nThe load() method is darn-tootin smart about identifying cookies\nwithin a string.  Escaped quotation marks, nested semicolons, and other\nsuch trickeries do not confuse it.\n\n   >>> C = Cookie.SmartCookie()\n   >>> C.load(\'keebler="E=everybody; L=\\\\"Loves\\\\"; fudge=\\\\012;";\')\n   >>> print C\n   Set-Cookie: keebler="E=everybody; L=\\"Loves\\"; fudge=\\012;"\n\nEach element of the Cookie also supports all of the RFC 2109\nCookie attributes.  Here\'s an example which sets the Path\nattribute.\n\n   >>> C = Cookie.SmartCookie()\n   >>> C["oreo"] = "doublestuff"\n   >>> C["oreo"]["path"] = "/"\n   >>> print C\n   Set-Cookie: oreo=doublestuff; Path=/\n\nEach dictionary element has a \'value\' attribute, which gives you\nback the value associated with the key.\n\n   >>> C = Cookie.SmartCookie()\n   >>> C["twix"] = "none for you"\n   >>> C["twix"].value\n   \'none for you\'\n\n\nA Bit More Advanced\n-------------------\n\nAs mentioned before, there are three different flavors of Cookie\nobjects, each with different encoding/decoding semantics.  This\nsection briefly discusses the differences.\n\nSimpleCookie\n\nThe SimpleCookie expects that all values should be standard strings.\nJust to be sure, SimpleCookie invokes the str() builtin to convert\nthe value to a string, when the values are set dictionary-style.\n\n   >>> C = Cookie.SimpleCookie()\n   >>> C["number"] = 7\n   >>> C["string"] = "seven"\n   >>> C["number"].value\n   \'7\'\n   >>> C["string"].value\n   \'seven\'\n   >>> C.output()\n   \'Set-Cookie: number=7\\r\\nSet-Cookie: string=seven\'\n\n\nSerialCookie\n\nThe SerialCookie expects that all values should be serialized using\ncPickle (or pickle, if cPickle isn\'t available).  As a result of\nserializing, SerialCookie can save almost any Python object to a\nvalue, and recover the exact same object when the cookie has been\nreturned.  (SerialCookie can yield some strange-looking cookie\nvalues, however.)\n\n   >>> C = Cookie.SerialCookie()\n   >>> C["number"] = 7\n   >>> C["string"] = "seven"\n   >>> C["number"].value\n   7\n   >>> C["string"].value\n   \'seven\'\n   >>> C.output()\n   \'Set-Cookie: number="I7\\\\012."\\r\\nSet-Cookie: string="S\\\'seven\\\'\\\\012p1\\\\012."\'\n\nBe warned, however, if SerialCookie cannot de-serialize a value (because\nit isn\'t a valid pickle\'d object), IT WILL RAISE AN EXCEPTION.\n\n\nSmartCookie\n\nThe SmartCookie combines aspects of each of the other two flavors.\nWhen setting a value in a dictionary-fashion, the SmartCookie will\nserialize (ala cPickle) the value *if and only if* it isn\'t a\nPython string.  String objects are *not* serialized.  Similarly,\nwhen the load() method parses out values, it attempts to de-serialize\nthe value.  If it fails, then it fallsback to treating the value\nas a string.\n\n   >>> C = Cookie.SmartCookie()\n   >>> C["number"] = 7\n   >>> C["string"] = "seven"\n   >>> C["number"].value\n   7\n   >>> C["string"].value\n   \'seven\'\n   >>> C.output()\n   \'Set-Cookie: number="I7\\\\012."\\r\\nSet-Cookie: string=seven\'\n\n\nBackwards Compatibility\n-----------------------\n\nIn order to keep compatibilty with earlier versions of Cookie.py,\nit is still possible to use Cookie.Cookie() to create a Cookie.  In\nfact, this simply returns a SmartCookie.\n\n   >>> C = Cookie.Cookie()\n   >>> print C.__class__.__name__\n   SmartCookie\n\n\nFinis.\n', lineno=206, col_offset=-1), lineno=206, col_offset=-1), Import([alias('string', None)], lineno=213, col_offset=0), TryExcept([ImportFrom('cPickle', [alias('dumps', None), alias('loads', None)], 0, lineno=216, col_offset=4)], [ExceptHandler(Name('ImportError', Load(), lineno=217, col_offset=7), None, [ImportFrom('pickle', [alias('dumps', None), alias('loads', None)], 0, lineno=218, col_offset=4)], lineno=217, col_offset=0)], [], lineno=215, col_offset=0), Import([alias('re', None), alias('warnings', None)], lineno=220, col_offset=0), Assign([Name('__all__', Store(), lineno=222, col_offset=0)], List([Str('CookieError', lineno=222, col_offset=11), Str('BaseCookie', lineno=222, col_offset=25), Str('SimpleCookie', lineno=222, col_offset=38), Str('SerialCookie', lineno=222, col_offset=53), Str('SmartCookie', lineno=223, col_offset=11), Str('Cookie', lineno=223, col_offset=25)], Load(), lineno=222, col_offset=10), lineno=222, col_offset=0), Assign([Name('_nulljoin', Store(), lineno=225, col_offset=0)], Attribute(Str('', lineno=225, col_offset=12), 'join', Load(), lineno=225, col_offset=12), lineno=225, col_offset=0), Assign([Name('_semispacejoin', Store(), lineno=226, col_offset=0)], Attribute(Str('; ', lineno=226, col_offset=17), 'join', Load(), lineno=226, col_offset=17), lineno=226, col_offset=0), Assign([Name('_spacejoin', Store(), lineno=227, col_offset=0)], Attribute(Str(' ', lineno=227, col_offset=13), 'join', Load(), lineno=227, col_offset=13), lineno=227, col_offset=0), ClassDef('CookieError', [Name('Exception', Load(), lineno=232, col_offset=18)], [Pass( lineno=233, col_offset=4)], [], lineno=232, col_offset=0), Assign([Name('_LegalChars', Store(), lineno=247, col_offset=0)], BinOp(BinOp(Attribute(Name('string', Load(), lineno=247, col_offset=20), 'ascii_letters', Load(), lineno=247, col_offset=20), Add(), Attribute(Name('string', Load(), lineno=247, col_offset=43), 'digits', Load(), lineno=247, col_offset=43), lineno=247, col_offset=20), Add(), Str("!#$%&'*+-.^_`|~", lineno=247, col_offset=59), lineno=247, col_offset=57), lineno=247, col_offset=0), Assign([Name('_Translator', Store(), lineno=248, col_offset=0)], Dict([Str('\x00', lineno=249, col_offset=4), Str('\x01', lineno=249, col_offset=23), Str('\x02', lineno=249, col_offset=42), Str('\x03', lineno=250, col_offset=4), Str('\x04', lineno=250, col_offset=23), Str('\x05', lineno=250, col_offset=42), Str('\x06', lineno=251, col_offset=4), Str('\x07', lineno=251, col_offset=23), Str('\x08', lineno=251, col_offset=42), Str('\t', lineno=252, col_offset=4), Str('\n', lineno=252, col_offset=23), Str('\x0b', lineno=252, col_offset=42), Str('\x0c', lineno=253, col_offset=4), Str('\r', lineno=253, col_offset=23), Str('\x0e', lineno=253, col_offset=42), Str('\x0f', lineno=254, col_offset=4), Str('\x10', lineno=254, col_offset=23), Str('\x11', lineno=254, col_offset=42), Str('\x12', lineno=255, col_offset=4), Str('\x13', lineno=255, col_offset=23), Str('\x14', lineno=255, col_offset=42), Str('\x15', lineno=256, col_offset=4), Str('\x16', lineno=256, col_offset=23), Str('\x17', lineno=256, col_offset=42), Str('\x18', lineno=257, col_offset=4), Str('\x19', lineno=257, col_offset=23), Str('\x1a', lineno=257, col_offset=42), Str('\x1b', lineno=258, col_offset=4), Str('\x1c', lineno=258, col_offset=23), Str('\x1d', lineno=258, col_offset=42), Str('\x1e', lineno=259, col_offset=4), Str('\x1f', lineno=259, col_offset=23), Str('"', lineno=261, col_offset=4), Str('\\', lineno=261, col_offset=23), Str('\x7f', lineno=263, col_offset=4), Str('\x80', lineno=263, col_offset=23), Str('\x81', lineno=263, col_offset=42), Str('\x82', lineno=264, col_offset=4), Str('\x83', lineno=264, col_offset=23), Str('\x84', lineno=264, col_offset=42), Str('\x85', lineno=265, col_offset=4), Str('\x86', lineno=265, col_offset=23), Str('\x87', lineno=265, col_offset=42), Str('\x88', lineno=266, col_offset=4), Str('\x89', lineno=266, col_offset=23), Str('\x8a', lineno=266, col_offset=42), Str('\x8b', lineno=267, col_offset=4), Str('\x8c', lineno=267, col_offset=23), Str('\x8d', lineno=267, col_offset=42), Str('\x8e', lineno=268, col_offset=4), Str('\x8f', lineno=268, col_offset=23), Str('\x90', lineno=268, col_offset=42), Str('\x91', lineno=269, col_offset=4), Str('\x92', lineno=269, col_offset=23), Str('\x93', lineno=269, col_offset=42), Str('\x94', lineno=270, col_offset=4), Str('\x95', lineno=270, col_offset=23), Str('\x96', lineno=270, col_offset=42), Str('\x97', lineno=271, col_offset=4), Str('\x98', lineno=271, col_offset=23), Str('\x99', lineno=271, col_offset=42), Str('\x9a', lineno=272, col_offset=4), Str('\x9b', lineno=272, col_offset=23), Str('\x9c', lineno=272, col_offset=42), Str('\x9d', lineno=273, col_offset=4), Str('\x9e', lineno=273, col_offset=23), Str('\x9f', lineno=273, col_offset=42), Str('\xa0', lineno=274, col_offset=4), Str('\xa1', lineno=274, col_offset=23), Str('\xa2', lineno=274, col_offset=42), Str('\xa3', lineno=275, col_offset=4), Str('\xa4', lineno=275, col_offset=23), Str('\xa5', lineno=275, col_offset=42), Str('\xa6', lineno=276, col_offset=4), Str('\xa7', lineno=276, col_offset=23), Str('\xa8', lineno=276, col_offset=42), Str('\xa9', lineno=277, col_offset=4), Str('\xaa', lineno=277, col_offset=23), Str('\xab', lineno=277, col_offset=42), Str('\xac', lineno=278, col_offset=4), Str('\xad', lineno=278, col_offset=23), Str('\xae', lineno=278, col_offset=42), Str('\xaf', lineno=279, col_offset=4), Str('\xb0', lineno=279, col_offset=23), Str('\xb1', lineno=279, col_offset=42), Str('\xb2', lineno=280, col_offset=4), Str('\xb3', lineno=280, col_offset=23), Str('\xb4', lineno=280, col_offset=42), Str('\xb5', lineno=281, col_offset=4), Str('\xb6', lineno=281, col_offset=23), Str('\xb7', lineno=281, col_offset=42), Str('\xb8', lineno=282, col_offset=4), Str('\xb9', lineno=282, col_offset=23), Str('\xba', lineno=282, col_offset=42), Str('\xbb', lineno=283, col_offset=4), Str('\xbc', lineno=283, col_offset=23), Str('\xbd', lineno=283, col_offset=42), Str('\xbe', lineno=284, col_offset=4), Str('\xbf', lineno=284, col_offset=23), Str('\xc0', lineno=284, col_offset=42), Str('\xc1', lineno=285, col_offset=4), Str('\xc2', lineno=285, col_offset=23), Str('\xc3', lineno=285, col_offset=42), Str('\xc4', lineno=286, col_offset=4), Str('\xc5', lineno=286, col_offset=23), Str('\xc6', lineno=286, col_offset=42), Str('\xc7', lineno=287, col_offset=4), Str('\xc8', lineno=287, col_offset=23), Str('\xc9', lineno=287, col_offset=42), Str('\xca', lineno=288, col_offset=4), Str('\xcb', lineno=288, col_offset=23), Str('\xcc', lineno=288, col_offset=42), Str('\xcd', lineno=289, col_offset=4), Str('\xce', lineno=289, col_offset=23), Str('\xcf', lineno=289, col_offset=42), Str('\xd0', lineno=290, col_offset=4), Str('\xd1', lineno=290, col_offset=23), Str('\xd2', lineno=290, col_offset=42), Str('\xd3', lineno=291, col_offset=4), Str('\xd4', lineno=291, col_offset=23), Str('\xd5', lineno=291, col_offset=42), Str('\xd6', lineno=292, col_offset=4), Str('\xd7', lineno=292, col_offset=23), Str('\xd8', lineno=292, col_offset=42), Str('\xd9', lineno=293, col_offset=4), Str('\xda', lineno=293, col_offset=23), Str('\xdb', lineno=293, col_offset=42), Str('\xdc', lineno=294, col_offset=4), Str('\xdd', lineno=294, col_offset=23), Str('\xde', lineno=294, col_offset=42), Str('\xdf', lineno=295, col_offset=4), Str('\xe0', lineno=295, col_offset=23), Str('\xe1', lineno=295, col_offset=42), Str('\xe2', lineno=296, col_offset=4), Str('\xe3', lineno=296, col_offset=23), Str('\xe4', lineno=296, col_offset=42), Str('\xe5', lineno=297, col_offset=4), Str('\xe6', lineno=297, col_offset=23), Str('\xe7', lineno=297, col_offset=42), Str('\xe8', lineno=298, col_offset=4), Str('\xe9', lineno=298, col_offset=23), Str('\xea', lineno=298, col_offset=42), Str('\xeb', lineno=299, col_offset=4), Str('\xec', lineno=299, col_offset=23), Str('\xed', lineno=299, col_offset=42), Str('\xee', lineno=300, col_offset=4), Str('\xef', lineno=300, col_offset=23), Str('\xf0', lineno=300, col_offset=42), Str('\xf1', lineno=301, col_offset=4), Str('\xf2', lineno=301, col_offset=23), Str('\xf3', lineno=301, col_offset=42), Str('\xf4', lineno=302, col_offset=4), Str('\xf5', lineno=302, col_offset=23), Str('\xf6', lineno=302, col_offset=42), Str('\xf7', lineno=303, col_offset=4), Str('\xf8', lineno=303, col_offset=23), Str('\xf9', lineno=303, col_offset=42), Str('\xfa', lineno=304, col_offset=4), Str('\xfb', lineno=304, col_offset=23), Str('\xfc', lineno=304, col_offset=42), Str('\xfd', lineno=305, col_offset=4), Str('\xfe', lineno=305, col_offset=23), Str('\xff', lineno=305, col_offset=42)], [Str('\\000', lineno=249, col_offset=13), Str('\\001', lineno=249, col_offset=32), Str('\\002', lineno=249, col_offset=51), Str('\\003', lineno=250, col_offset=13), Str('\\004', lineno=250, col_offset=32), Str('\\005', lineno=250, col_offset=51), Str('\\006', lineno=251, col_offset=13), Str('\\007', lineno=251, col_offset=32), Str('\\010', lineno=251, col_offset=51), Str('\\011', lineno=252, col_offset=13), Str('\\012', lineno=252, col_offset=32), Str('\\013', lineno=252, col_offset=51), Str('\\014', lineno=253, col_offset=13), Str('\\015', lineno=253, col_offset=32), Str('\\016', lineno=253, col_offset=51), Str('\\017', lineno=254, col_offset=13), Str('\\020', lineno=254, col_offset=32), Str('\\021', lineno=254, col_offset=51), Str('\\022', lineno=255, col_offset=13), Str('\\023', lineno=255, col_offset=32), Str('\\024', lineno=255, col_offset=51), Str('\\025', lineno=256, col_offset=13), Str('\\026', lineno=256, col_offset=32), Str('\\027', lineno=256, col_offset=51), Str('\\030', lineno=257, col_offset=13), Str('\\031', lineno=257, col_offset=32), Str('\\032', lineno=257, col_offset=51), Str('\\033', lineno=258, col_offset=13), Str('\\034', lineno=258, col_offset=32), Str('\\035', lineno=258, col_offset=51), Str('\\036', lineno=259, col_offset=13), Str('\\037', lineno=259, col_offset=32), Str('\\"', lineno=261, col_offset=10), Str('\\\\', lineno=261, col_offset=30), Str('\\177', lineno=263, col_offset=13), Str('\\200', lineno=263, col_offset=32), Str('\\201', lineno=263, col_offset=51), Str('\\202', lineno=264, col_offset=13), Str('\\203', lineno=264, col_offset=32), Str('\\204', lineno=264, col_offset=51), Str('\\205', lineno=265, col_offset=13), Str('\\206', lineno=265, col_offset=32), Str('\\207', lineno=265, col_offset=51), Str('\\210', lineno=266, col_offset=13), Str('\\211', lineno=266, col_offset=32), Str('\\212', lineno=266, col_offset=51), Str('\\213', lineno=267, col_offset=13), Str('\\214', lineno=267, col_offset=32), Str('\\215', lineno=267, col_offset=51), Str('\\216', lineno=268, col_offset=13), Str('\\217', lineno=268, col_offset=32), Str('\\220', lineno=268, col_offset=51), Str('\\221', lineno=269, col_offset=13), Str('\\222', lineno=269, col_offset=32), Str('\\223', lineno=269, col_offset=51), Str('\\224', lineno=270, col_offset=13), Str('\\225', lineno=270, col_offset=32), Str('\\226', lineno=270, col_offset=51), Str('\\227', lineno=271, col_offset=13), Str('\\230', lineno=271, col_offset=32), Str('\\231', lineno=271, col_offset=51), Str('\\232', lineno=272, col_offset=13), Str('\\233', lineno=272, col_offset=32), Str('\\234', lineno=272, col_offset=51), Str('\\235', lineno=273, col_offset=13), Str('\\236', lineno=273, col_offset=32), Str('\\237', lineno=273, col_offset=51), Str('\\240', lineno=274, col_offset=13), Str('\\241', lineno=274, col_offset=32), Str('\\242', lineno=274, col_offset=51), Str('\\243', lineno=275, col_offset=13), Str('\\244', lineno=275, col_offset=32), Str('\\245', lineno=275, col_offset=51), Str('\\246', lineno=276, col_offset=13), Str('\\247', lineno=276, col_offset=32), Str('\\250', lineno=276, col_offset=51), Str('\\251', lineno=277, col_offset=13), Str('\\252', lineno=277, col_offset=32), Str('\\253', lineno=277, col_offset=51), Str('\\254', lineno=278, col_offset=13), Str('\\255', lineno=278, col_offset=32), Str('\\256', lineno=278, col_offset=51), Str('\\257', lineno=279, col_offset=13), Str('\\260', lineno=279, col_offset=32), Str('\\261', lineno=279, col_offset=51), Str('\\262', lineno=280, col_offset=13), Str('\\263', lineno=280, col_offset=32), Str('\\264', lineno=280, col_offset=51), Str('\\265', lineno=281, col_offset=13), Str('\\266', lineno=281, col_offset=32), Str('\\267', lineno=281, col_offset=51), Str('\\270', lineno=282, col_offset=13), Str('\\271', lineno=282, col_offset=32), Str('\\272', lineno=282, col_offset=51), Str('\\273', lineno=283, col_offset=13), Str('\\274', lineno=283, col_offset=32), Str('\\275', lineno=283, col_offset=51), Str('\\276', lineno=284, col_offset=13), Str('\\277', lineno=284, col_offset=32), Str('\\300', lineno=284, col_offset=51), Str('\\301', lineno=285, col_offset=13), Str('\\302', lineno=285, col_offset=32), Str('\\303', lineno=285, col_offset=51), Str('\\304', lineno=286, col_offset=13), Str('\\305', lineno=286, col_offset=32), Str('\\306', lineno=286, col_offset=51), Str('\\307', lineno=287, col_offset=13), Str('\\310', lineno=287, col_offset=32), Str('\\311', lineno=287, col_offset=51), Str('\\312', lineno=288, col_offset=13), Str('\\313', lineno=288, col_offset=32), Str('\\314', lineno=288, col_offset=51), Str('\\315', lineno=289, col_offset=13), Str('\\316', lineno=289, col_offset=32), Str('\\317', lineno=289, col_offset=51), Str('\\320', lineno=290, col_offset=13), Str('\\321', lineno=290, col_offset=32), Str('\\322', lineno=290, col_offset=51), Str('\\323', lineno=291, col_offset=13), Str('\\324', lineno=291, col_offset=32), Str('\\325', lineno=291, col_offset=51), Str('\\326', lineno=292, col_offset=13), Str('\\327', lineno=292, col_offset=32), Str('\\330', lineno=292, col_offset=51), Str('\\331', lineno=293, col_offset=13), Str('\\332', lineno=293, col_offset=32), Str('\\333', lineno=293, col_offset=51), Str('\\334', lineno=294, col_offset=13), Str('\\335', lineno=294, col_offset=32), Str('\\336', lineno=294, col_offset=51), Str('\\337', lineno=295, col_offset=13), Str('\\340', lineno=295, col_offset=32), Str('\\341', lineno=295, col_offset=51), Str('\\342', lineno=296, col_offset=13), Str('\\343', lineno=296, col_offset=32), Str('\\344', lineno=296, col_offset=51), Str('\\345', lineno=297, col_offset=13), Str('\\346', lineno=297, col_offset=32), Str('\\347', lineno=297, col_offset=51), Str('\\350', lineno=298, col_offset=13), Str('\\351', lineno=298, col_offset=32), Str('\\352', lineno=298, col_offset=51), Str('\\353', lineno=299, col_offset=13), Str('\\354', lineno=299, col_offset=32), Str('\\355', lineno=299, col_offset=51), Str('\\356', lineno=300, col_offset=13), Str('\\357', lineno=300, col_offset=32), Str('\\360', lineno=300, col_offset=51), Str('\\361', lineno=301, col_offset=13), Str('\\362', lineno=301, col_offset=32), Str('\\363', lineno=301, col_offset=51), Str('\\364', lineno=302, col_offset=13), Str('\\365', lineno=302, col_offset=32), Str('\\366', lineno=302, col_offset=51), Str('\\367', lineno=303, col_offset=13), Str('\\370', lineno=303, col_offset=32), Str('\\371', lineno=303, col_offset=51), Str('\\372', lineno=304, col_offset=13), Str('\\373', lineno=304, col_offset=32), Str('\\374', lineno=304, col_offset=51), Str('\\375', lineno=305, col_offset=13), Str('\\376', lineno=305, col_offset=32), Str('\\377', lineno=305, col_offset=51)], lineno=248, col_offset=20), lineno=248, col_offset=0), Assign([Name('_idmap', Store(), lineno=308, col_offset=0)], Call(Attribute(Str('', lineno=308, col_offset=9), 'join', Load(), lineno=308, col_offset=9), [GeneratorExp(Call(Name('chr', Load(), lineno=308, col_offset=17), [Name('x', Load(), lineno=308, col_offset=21)], [], None, None, lineno=308, col_offset=17), [comprehension(Name('x', Store(), lineno=308, col_offset=28), Call(Name('xrange', Load(), lineno=308, col_offset=33), [Num(256, lineno=308, col_offset=40)], [], None, None, lineno=308, col_offset=33), [])], lineno=308, col_offset=17)], [], None, None, lineno=308, col_offset=9), lineno=308, col_offset=0), FunctionDef('_quote', arguments([Name('str', Param(), lineno=310, col_offset=11), Name('LegalChars', Param(), lineno=310, col_offset=16), Name('idmap', Param(), lineno=311, col_offset=11), Name('translate', Param(), lineno=311, col_offset=25)], None, None, [Name('_LegalChars', Load(), lineno=310, col_offset=27), Name('_idmap', Load(), lineno=311, col_offset=17), Attribute(Name('string', Load(), lineno=311, col_offset=35), 'translate', Load(), lineno=311, col_offset=35)]), [If(Compare(Str('', lineno=318, col_offset=7), [Eq()], [Call(Name('translate', Load(), lineno=318, col_offset=13), [Name('str', Load(), lineno=318, col_offset=23), Name('idmap', Load(), lineno=318, col_offset=28), Name('LegalChars', Load(), lineno=318, col_offset=35)], [], None, None, lineno=318, col_offset=13)], lineno=318, col_offset=7), [Return(Name('str', Load(), lineno=319, col_offset=15), lineno=319, col_offset=8)], [Return(BinOp(BinOp(Str('"', lineno=321, col_offset=15), Add(), Call(Name('_nulljoin', Load(), lineno=321, col_offset=21), [Call(Name('map', Load(), lineno=321, col_offset=32), [Attribute(Name('_Translator', Load(), lineno=321, col_offset=36), 'get', Load(), lineno=321, col_offset=36), Name('str', Load(), lineno=321, col_offset=53), Name('str', Load(), lineno=321, col_offset=58)], [], None, None, lineno=321, col_offset=32)], [], None, None, lineno=321, col_offset=21), lineno=321, col_offset=15), Add(), Str('"', lineno=321, col_offset=67), lineno=321, col_offset=65), lineno=321, col_offset=8)], lineno=318, col_offset=4)], [], lineno=310, col_offset=0), Assign([Name('_OctalPatt', Store(), lineno=325, col_offset=0)], Call(Attribute(Name('re', Load(), lineno=325, col_offset=13), 'compile', Load(), lineno=325, col_offset=13), [Str('\\\\[0-3][0-7][0-7]', lineno=325, col_offset=24)], [], None, None, lineno=325, col_offset=13), lineno=325, col_offset=0), Assign([Name('_QuotePatt', Store(), lineno=326, col_offset=0)], Call(Attribute(Name('re', Load(), lineno=326, col_offset=13), 'compile', Load(), lineno=326, col_offset=13), [Str('[\\\\].', lineno=326, col_offset=24)], [], None, None, lineno=326, col_offset=13), lineno=326, col_offset=0), FunctionDef('_unquote', arguments([Name('str', Param(), lineno=328, col_offset=13)], None, None, []), [If(Compare(Call(Name('len', Load(), lineno=331, col_offset=8), [Name('str', Load(), lineno=331, col_offset=12)], [], None, None, lineno=331, col_offset=8), [Lt()], [Num(2, lineno=331, col_offset=19)], lineno=331, col_offset=8), [Return(Name('str', Load(), lineno=332, col_offset=15), lineno=332, col_offset=8)], [], lineno=331, col_offset=4), If(BoolOp(Or(), [Compare(Subscript(Name('str', Load(), lineno=333, col_offset=7), Index(Num(0, lineno=333, col_offset=11)), Load(), lineno=333, col_offset=7), [NotEq()], [Str('"', lineno=333, col_offset=17)], lineno=333, col_offset=7), Compare(Subscript(Name('str', Load(), lineno=333, col_offset=24), Index(Num(-1, lineno=333, col_offset=29)), Load(), lineno=333, col_offset=24), [NotEq()], [Str('"', lineno=333, col_offset=35)], lineno=333, col_offset=24)], lineno=333, col_offset=7), [Return(Name('str', Load(), lineno=334, col_offset=15), lineno=334, col_offset=8)], [], lineno=333, col_offset=4), Assign([Name('str', Store(), lineno=340, col_offset=4)], Subscript(Name('str', Load(), lineno=340, col_offset=10), Slice(Num(1, lineno=340, col_offset=14), Num(-1, lineno=340, col_offset=17), None), Load(), lineno=340, col_offset=10), lineno=340, col_offset=4), Assign([Name('i', Store(), lineno=346, col_offset=4)], Num(0, lineno=346, col_offset=8), lineno=346, col_offset=4), Assign([Name('n', Store(), lineno=347, col_offset=4)], Call(Name('len', Load(), lineno=347, col_offset=8), [Name('str', Load(), lineno=347, col_offset=12)], [], None, None, lineno=347, col_offset=8), lineno=347, col_offset=4), Assign([Name('res', Store(), lineno=348, col_offset=4)], List([], Load(), lineno=348, col_offset=10), lineno=348, col_offset=4), While(Compare(Num(0, lineno=349, col_offset=10), [LtE(), Lt()], [Name('i', Load(), lineno=349, col_offset=15), Name('n', Load(), lineno=349, col_offset=19)], lineno=349, col_offset=10), [Assign([Name('Omatch', Store(), lineno=350, col_offset=8)], Call(Attribute(Name('_OctalPatt', Load(), lineno=350, col_offset=17), 'search', Load(), lineno=350, col_offset=17), [Name('str', Load(), lineno=350, col_offset=35), Name('i', Load(), lineno=350, col_offset=40)], [], None, None, lineno=350, col_offset=17), lineno=350, col_offset=8), Assign([Name('Qmatch', Store(), lineno=351, col_offset=8)], Call(Attribute(Name('_QuotePatt', Load(), lineno=351, col_offset=17), 'search', Load(), lineno=351, col_offset=17), [Name('str', Load(), lineno=351, col_offset=35), Name('i', Load(), lineno=351, col_offset=40)], [], None, None, lineno=351, col_offset=17), lineno=351, col_offset=8), If(BoolOp(And(), [UnaryOp(Not(), Name('Omatch', Load(), lineno=352, col_offset=15), lineno=352, col_offset=11), UnaryOp(Not(), Name('Qmatch', Load(), lineno=352, col_offset=30), lineno=352, col_offset=26)], lineno=352, col_offset=11), [Expr(Call(Attribute(Name('res', Load(), lineno=353, col_offset=12), 'append', Load(), lineno=353, col_offset=12), [Subscript(Name('str', Load(), lineno=353, col_offset=23), Slice(Name('i', Load(), lineno=353, col_offset=27), None, None), Load(), lineno=353, col_offset=23)], [], None, None, lineno=353, col_offset=12), lineno=353, col_offset=12), Break( lineno=354, col_offset=12)], [], lineno=352, col_offset=8), Assign([Name('j', Store(), lineno=356, col_offset=8), Name('k', Store(), lineno=356, col_offset=12)], Num(-1, lineno=356, col_offset=17), lineno=356, col_offset=8), If(Name('Omatch', Load(), lineno=357, col_offset=11), [Assign([Name('j', Store(), lineno=357, col_offset=19)], Call(Attribute(Name('Omatch', Load(), lineno=357, col_offset=23), 'start', Load(), lineno=357, col_offset=23), [Num(0, lineno=357, col_offset=36)], [], None, None, lineno=357, col_offset=23), lineno=357, col_offset=19)], [], lineno=357, col_offset=8), If(Name('Qmatch', Load(), lineno=358, col_offset=11), [Assign([Name('k', Store(), lineno=358, col_offset=19)], Call(Attribute(Name('Qmatch', Load(), lineno=358, col_offset=23), 'start', Load(), lineno=358, col_offset=23), [Num(0, lineno=358, col_offset=36)], [], None, None, lineno=358, col_offset=23), lineno=358, col_offset=19)], [], lineno=358, col_offset=8), If(BoolOp(And(), [Name('Qmatch', Load(), lineno=359, col_offset=11), BoolOp(Or(), [UnaryOp(Not(), Name('Omatch', Load(), lineno=359, col_offset=28), lineno=359, col_offset=24), Compare(Name('k', Load(), lineno=359, col_offset=38), [Lt()], [Name('j', Load(), lineno=359, col_offset=42)], lineno=359, col_offset=38)], lineno=359, col_offset=24)], lineno=359, col_offset=11), [Expr(Call(Attribute(Name('res', Load(), lineno=360, col_offset=12), 'append', Load(), lineno=360, col_offset=12), [Subscript(Name('str', Load(), lineno=360, col_offset=23), Slice(Name('i', Load(), lineno=360, col_offset=27), Name('k', Load(), lineno=360, col_offset=29), None), Load(), lineno=360, col_offset=23)], [], None, None, lineno=360, col_offset=12), lineno=360, col_offset=12), Expr(Call(Attribute(Name('res', Load(), lineno=361, col_offset=12), 'append', Load(), lineno=361, col_offset=12), [Subscript(Name('str', Load(), lineno=361, col_offset=23), Index(BinOp(Name('k', Load(), lineno=361, col_offset=27), Add(), Num(1, lineno=361, col_offset=29), lineno=361, col_offset=27)), Load(), lineno=361, col_offset=23)], [], None, None, lineno=361, col_offset=12), lineno=361, col_offset=12), Assign([Name('i', Store(), lineno=362, col_offset=12)], BinOp(Name('k', Load(), lineno=362, col_offset=16), Add(), Num(2, lineno=362, col_offset=18), lineno=362, col_offset=16), lineno=362, col_offset=12)], [Expr(Call(Attribute(Name('res', Load(), lineno=364, col_offset=12), 'append', Load(), lineno=364, col_offset=12), [Subscript(Name('str', Load(), lineno=364, col_offset=23), Slice(Name('i', Load(), lineno=364, col_offset=27), Name('j', Load(), lineno=364, col_offset=29), None), Load(), lineno=364, col_offset=23)], [], None, None, lineno=364, col_offset=12), lineno=364, col_offset=12), Expr(Call(Attribute(Name('res', Load(), lineno=365, col_offset=12), 'append', Load(), lineno=365, col_offset=12), [Call(Name('chr', Load(), lineno=365, col_offset=24), [Call(Name('int', Load(), lineno=365, col_offset=29), [Subscript(Name('str', Load(), lineno=365, col_offset=33), Slice(BinOp(Name('j', Load(), lineno=365, col_offset=37), Add(), Num(1, lineno=365, col_offset=39), lineno=365, col_offset=37), BinOp(Name('j', Load(), lineno=365, col_offset=41), Add(), Num(4, lineno=365, col_offset=43), lineno=365, col_offset=41), None), Load(), lineno=365, col_offset=33), Num(8, lineno=365, col_offset=47)], [], None, None, lineno=365, col_offset=29)], [], None, None, lineno=365, col_offset=24)], [], None, None, lineno=365, col_offset=12), lineno=365, col_offset=12), Assign([Name('i', Store(), lineno=366, col_offset=12)], BinOp(Name('j', Load(), lineno=366, col_offset=16), Add(), Num(4, lineno=366, col_offset=18), lineno=366, col_offset=16), lineno=366, col_offset=12)], lineno=359, col_offset=8)], [], lineno=349, col_offset=4), Return(Call(Name('_nulljoin', Load(), lineno=367, col_offset=11), [Name('res', Load(), lineno=367, col_offset=21)], [], None, None, lineno=367, col_offset=11), lineno=367, col_offset=4)], [], lineno=328, col_offset=0), Assign([Name('_weekdayname', Store(), lineno=378, col_offset=0)], List([Str('Mon', lineno=378, col_offset=16), Str('Tue', lineno=378, col_offset=23), Str('Wed', lineno=378, col_offset=30), Str('Thu', lineno=378, col_offset=37), Str('Fri', lineno=378, col_offset=44), Str('Sat', lineno=378, col_offset=51), Str('Sun', lineno=378, col_offset=58)], Load(), lineno=378, col_offset=15), lineno=378, col_offset=0), Assign([Name('_monthname', Store(), lineno=380, col_offset=0)], List([Name('None', Load(), lineno=380, col_offset=14), Str('Jan', lineno=381, col_offset=14), Str('Feb', lineno=381, col_offset=21), Str('Mar', lineno=381, col_offset=28), Str('Apr', lineno=381, col_offset=35), Str('May', lineno=381, col_offset=42), Str('Jun', lineno=381, col_offset=49), Str('Jul', lineno=382, col_offset=14), Str('Aug', lineno=382, col_offset=21), Str('Sep', lineno=382, col_offset=28), Str('Oct', lineno=382, col_offset=35), Str('Nov', lineno=382, col_offset=42), Str('Dec', lineno=382, col_offset=49)], Load(), lineno=380, col_offset=13), lineno=380, col_offset=0), FunctionDef('_getdate', arguments([Name('future', Param(), lineno=384, col_offset=13), Name('weekdayname', Param(), lineno=384, col_offset=23), Name('monthname', Param(), lineno=384, col_offset=49)], None, None, [Num(0, lineno=384, col_offset=20), Name('_weekdayname', Load(), lineno=384, col_offset=35), Name('_monthname', Load(), lineno=384, col_offset=59)]), [ImportFrom('time', [alias('gmtime', None), alias('time', None)], 0, lineno=385, col_offset=4), Assign([Name('now', Store(), lineno=386, col_offset=4)], Call(Name('time', Load(), lineno=386, col_offset=10), [], [], None, None, lineno=386, col_offset=10), lineno=386, col_offset=4), Assign([Tuple([Name('year', Store(), lineno=387, col_offset=4), Name('month', Store(), lineno=387, col_offset=10), Name('day', Store(), lineno=387, col_offset=17), Name('hh', Store(), lineno=387, col_offset=22), Name('mm', Store(), lineno=387, col_offset=26), Name('ss', Store(), lineno=387, col_offset=30), Name('wd', Store(), lineno=387, col_offset=34), Name('y', Store(), lineno=387, col_offset=38), Name('z', Store(), lineno=387, col_offset=41)], Store(), lineno=387, col_offset=4)], Call(Name('gmtime', Load(), lineno=387, col_offset=45), [BinOp(Name('now', Load(), lineno=387, col_offset=52), Add(), Name('future', Load(), lineno=387, col_offset=58), lineno=387, col_offset=52)], [], None, None, lineno=387, col_offset=45), lineno=387, col_offset=4), Return(BinOp(Str('%s, %02d-%3s-%4d %02d:%02d:%02d GMT', lineno=388, col_offset=11), Mod(), Tuple([Subscript(Name('weekdayname', Load(), lineno=389, col_offset=12), Index(Name('wd', Load(), lineno=389, col_offset=24)), Load(), lineno=389, col_offset=12), Name('day', Load(), lineno=389, col_offset=29), Subscript(Name('monthname', Load(), lineno=389, col_offset=34), Index(Name('month', Load(), lineno=389, col_offset=44)), Load(), lineno=389, col_offset=34), Name('year', Load(), lineno=389, col_offset=52), Name('hh', Load(), lineno=389, col_offset=58), Name('mm', Load(), lineno=389, col_offset=62), Name('ss', Load(), lineno=389, col_offset=66)], Load(), lineno=389, col_offset=12), lineno=388, col_offset=11), lineno=388, col_offset=4)], [], lineno=384, col_offset=0), ClassDef('Morsel', [Name('dict', Load(), lineno=403, col_offset=13)], [Assign([Name('_reserved', Store(), lineno=417, col_offset=4)], Dict([Str('expires', lineno=417, col_offset=18), Str('path', lineno=418, col_offset=19), Str('comment', lineno=419, col_offset=19), Str('domain', lineno=420, col_offset=19), Str('max-age', lineno=421, col_offset=19), Str('secure', lineno=422, col_offset=19), Str('httponly', lineno=423, col_offset=19), Str('version', lineno=424, col_offset=19)], [Str('expires', lineno=417, col_offset=30), Str('Path', lineno=418, col_offset=35), Str('Comment', lineno=419, col_offset=31), Str('Domain', lineno=420, col_offset=35), Str('Max-Age', lineno=421, col_offset=31), Str('secure', lineno=422, col_offset=35), Str('httponly', lineno=423, col_offset=33), Str('Version', lineno=424, col_offset=31)], lineno=417, col_offset=16), lineno=417, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=427, col_offset=17)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=429, col_offset=8), 'key', Store(), lineno=429, col_offset=8), Attribute(Name('self', Load(), lineno=429, col_offset=19), 'value', Store(), lineno=429, col_offset=19), Attribute(Name('self', Load(), lineno=429, col_offset=32), 'coded_value', Store(), lineno=429, col_offset=32)], Name('None', Load(), lineno=429, col_offset=51), lineno=429, col_offset=8), For(Name('K', Store(), lineno=432, col_offset=12), Attribute(Name('self', Load(), lineno=432, col_offset=17), '_reserved', Load(), lineno=432, col_offset=17), [Expr(Call(Attribute(Name('dict', Load(), lineno=433, col_offset=12), '__setitem__', Load(), lineno=433, col_offset=12), [Name('self', Load(), lineno=433, col_offset=29), Name('K', Load(), lineno=433, col_offset=35), Str('', lineno=433, col_offset=38)], [], None, None, lineno=433, col_offset=12), lineno=433, col_offset=12)], [], lineno=432, col_offset=8)], [], lineno=427, col_offset=4), FunctionDef('__setitem__', arguments([Name('self', Param(), lineno=436, col_offset=20), Name('K', Param(), lineno=436, col_offset=26), Name('V', Param(), lineno=436, col_offset=29)], None, None, []), [Assign([Name('K', Store(), lineno=437, col_offset=8)], Call(Attribute(Name('K', Load(), lineno=437, col_offset=12), 'lower', Load(), lineno=437, col_offset=12), [], [], None, None, lineno=437, col_offset=12), lineno=437, col_offset=8), If(UnaryOp(Not(), Compare(Name('K', Load(), lineno=438, col_offset=15), [In()], [Attribute(Name('self', Load(), lineno=438, col_offset=20), '_reserved', Load(), lineno=438, col_offset=20)], lineno=438, col_offset=15), lineno=438, col_offset=11), [Raise(Call(Name('CookieError', Load(), lineno=439, col_offset=18), [BinOp(Str('Invalid Attribute %s', lineno=439, col_offset=30), Mod(), Name('K', Load(), lineno=439, col_offset=55), lineno=439, col_offset=30)], [], None, None, lineno=439, col_offset=18), None, None, lineno=439, col_offset=12)], [], lineno=438, col_offset=8), Expr(Call(Attribute(Name('dict', Load(), lineno=440, col_offset=8), '__setitem__', Load(), lineno=440, col_offset=8), [Name('self', Load(), lineno=440, col_offset=25), Name('K', Load(), lineno=440, col_offset=31), Name('V', Load(), lineno=440, col_offset=34)], [], None, None, lineno=440, col_offset=8), lineno=440, col_offset=8)], [], lineno=436, col_offset=4), FunctionDef('isReservedKey', arguments([Name('self', Param(), lineno=443, col_offset=22), Name('K', Param(), lineno=443, col_offset=28)], None, None, []), [Return(Compare(Call(Attribute(Name('K', Load(), lineno=444, col_offset=15), 'lower', Load(), lineno=444, col_offset=15), [], [], None, None, lineno=444, col_offset=15), [In()], [Attribute(Name('self', Load(), lineno=444, col_offset=28), '_reserved', Load(), lineno=444, col_offset=28)], lineno=444, col_offset=15), lineno=444, col_offset=8)], [], lineno=443, col_offset=4), FunctionDef('set', arguments([Name('self', Param(), lineno=447, col_offset=12), Name('key', Param(), lineno=447, col_offset=18), Name('val', Param(), lineno=447, col_offset=23), Name('coded_val', Param(), lineno=447, col_offset=28), Name('LegalChars', Param(), lineno=448, col_offset=12), Name('idmap', Param(), lineno=449, col_offset=12), Name('translate', Param(), lineno=449, col_offset=26)], None, None, [Name('_LegalChars', Load(), lineno=448, col_offset=23), Name('_idmap', Load(), lineno=449, col_offset=18), Attribute(Name('string', Load(), lineno=449, col_offset=36), 'translate', Load(), lineno=449, col_offset=36)]), [If(Compare(Call(Attribute(Name('key', Load(), lineno=452, col_offset=11), 'lower', Load(), lineno=452, col_offset=11), [], [], None, None, lineno=452, col_offset=11), [In()], [Attribute(Name('self', Load(), lineno=452, col_offset=26), '_reserved', Load(), lineno=452, col_offset=26)], lineno=452, col_offset=11), [Raise(Call(Name('CookieError', Load(), lineno=453, col_offset=18), [BinOp(Str('Attempt to set a reserved key: %s', lineno=453, col_offset=30), Mod(), Name('key', Load(), lineno=453, col_offset=68), lineno=453, col_offset=30)], [], None, None, lineno=453, col_offset=18), None, None, lineno=453, col_offset=12)], [], lineno=452, col_offset=8), If(Compare(Str('', lineno=454, col_offset=11), [NotEq()], [Call(Name('translate', Load(), lineno=454, col_offset=17), [Name('key', Load(), lineno=454, col_offset=27), Name('idmap', Load(), lineno=454, col_offset=32), Name('LegalChars', Load(), lineno=454, col_offset=39)], [], None, None, lineno=454, col_offset=17)], lineno=454, col_offset=11), [Raise(Call(Name('CookieError', Load(), lineno=455, col_offset=18), [BinOp(Str('Illegal key value: %s', lineno=455, col_offset=30), Mod(), Name('key', Load(), lineno=455, col_offset=56), lineno=455, col_offset=30)], [], None, None, lineno=455, col_offset=18), None, None, lineno=455, col_offset=12)], [], lineno=454, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=458, col_offset=8), 'key', Store(), lineno=458, col_offset=8)], Name('key', Load(), lineno=458, col_offset=35), lineno=458, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=459, col_offset=8), 'value', Store(), lineno=459, col_offset=8)], Name('val', Load(), lineno=459, col_offset=35), lineno=459, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=460, col_offset=8), 'coded_value', Store(), lineno=460, col_offset=8)], Name('coded_val', Load(), lineno=460, col_offset=35), lineno=460, col_offset=8)], [], lineno=447, col_offset=4), FunctionDef('output', arguments([Name('self', Param(), lineno=463, col_offset=15), Name('attrs', Param(), lineno=463, col_offset=21), Name('header', Param(), lineno=463, col_offset=33)], None, None, [Name('None', Load(), lineno=463, col_offset=27), Str('Set-Cookie:', lineno=463, col_offset=42)]), [Return(BinOp(Str('%s %s', lineno=464, col_offset=15), Mod(), Tuple([Name('header', Load(), lineno=464, col_offset=27), Call(Attribute(Name('self', Load(), lineno=464, col_offset=35), 'OutputString', Load(), lineno=464, col_offset=35), [Name('attrs', Load(), lineno=464, col_offset=53)], [], None, None, lineno=464, col_offset=35)], Load(), lineno=464, col_offset=27), lineno=464, col_offset=15), lineno=464, col_offset=8)], [], lineno=463, col_offset=4), Assign([Name('__str__', Store(), lineno=466, col_offset=4)], Name('output', Load(), lineno=466, col_offset=14), lineno=466, col_offset=4), FunctionDef('__repr__', arguments([Name('self', Param(), lineno=468, col_offset=17)], None, None, []), [Return(BinOp(Str('<%s: %s=%s>', lineno=469, col_offset=15), Mod(), Tuple([Attribute(Attribute(Name('self', Load(), lineno=469, col_offset=32), '__class__', Load(), lineno=469, col_offset=32), '__name__', Load(), lineno=469, col_offset=32), Attribute(Name('self', Load(), lineno=470, col_offset=32), 'key', Load(), lineno=470, col_offset=32), Call(Name('repr', Load(), lineno=470, col_offset=42), [Attribute(Name('self', Load(), lineno=470, col_offset=47), 'value', Load(), lineno=470, col_offset=47)], [], None, None, lineno=470, col_offset=42)], Load(), lineno=469, col_offset=32), lineno=469, col_offset=15), lineno=469, col_offset=8)], [], lineno=468, col_offset=4), FunctionDef('js_output', arguments([Name('self', Param(), lineno=472, col_offset=18), Name('attrs', Param(), lineno=472, col_offset=24)], None, None, [Name('None', Load(), lineno=472, col_offset=30)]), [Return(BinOp(Str('\n        <script type="text/javascript">\n        <!-- begin hiding\n        document.cookie = "%s";\n        // end hiding -->\n        </script>\n        ', lineno=480, col_offset=-1), Mod(), Tuple([Call(Attribute(Call(Attribute(Name('self', Load(), lineno=480, col_offset=16), 'OutputString', Load(), lineno=480, col_offset=16), [Name('attrs', Load(), lineno=480, col_offset=34)], [], None, None, lineno=480, col_offset=16), 'replace', Load(), lineno=480, col_offset=16), [Str('"', lineno=480, col_offset=49), Str('\\"', lineno=480, col_offset=53)], [], None, None, lineno=480, col_offset=16)], Load(), lineno=480, col_offset=16), lineno=480, col_offset=-1), lineno=474, col_offset=8)], [], lineno=472, col_offset=4), FunctionDef('OutputString', arguments([Name('self', Param(), lineno=483, col_offset=21), Name('attrs', Param(), lineno=483, col_offset=27)], None, None, [Name('None', Load(), lineno=483, col_offset=33)]), [Assign([Name('result', Store(), lineno=486, col_offset=8)], List([], Load(), lineno=486, col_offset=17), lineno=486, col_offset=8), Assign([Name('RA', Store(), lineno=487, col_offset=8)], Attribute(Name('result', Load(), lineno=487, col_offset=13), 'append', Load(), lineno=487, col_offset=13), lineno=487, col_offset=8), Expr(Call(Name('RA', Load(), lineno=490, col_offset=8), [BinOp(Str('%s=%s', lineno=490, col_offset=11), Mod(), Tuple([Attribute(Name('self', Load(), lineno=490, col_offset=22), 'key', Load(), lineno=490, col_offset=22), Attribute(Name('self', Load(), lineno=490, col_offset=32), 'coded_value', Load(), lineno=490, col_offset=32)], Load(), lineno=490, col_offset=22), lineno=490, col_offset=11)], [], None, None, lineno=490, col_offset=8), lineno=490, col_offset=8), If(Compare(Name('attrs', Load(), lineno=493, col_offset=11), [Is()], [Name('None', Load(), lineno=493, col_offset=20)], lineno=493, col_offset=11), [Assign([Name('attrs', Store(), lineno=494, col_offset=12)], Attribute(Name('self', Load(), lineno=494, col_offset=20), '_reserved', Load(), lineno=494, col_offset=20), lineno=494, col_offset=12)], [], lineno=493, col_offset=8), Assign([Name('items', Store(), lineno=495, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=495, col_offset=16), 'items', Load(), lineno=495, col_offset=16), [], [], None, None, lineno=495, col_offset=16), lineno=495, col_offset=8), Expr(Call(Attribute(Name('items', Load(), lineno=496, col_offset=8), 'sort', Load(), lineno=496, col_offset=8), [], [], None, None, lineno=496, col_offset=8), lineno=496, col_offset=8), For(Tuple([Name('K', Store(), lineno=497, col_offset=12), Name('V', Store(), lineno=497, col_offset=14)], Store(), lineno=497, col_offset=12), Name('items', Load(), lineno=497, col_offset=19), [If(Compare(Name('V', Load(), lineno=498, col_offset=15), [Eq()], [Str('', lineno=498, col_offset=20)], lineno=498, col_offset=15), [Continue( lineno=498, col_offset=24)], [], lineno=498, col_offset=12), If(Compare(Name('K', Load(), lineno=499, col_offset=15), [NotIn()], [Name('attrs', Load(), lineno=499, col_offset=24)], lineno=499, col_offset=15), [Continue( lineno=499, col_offset=31)], [], lineno=499, col_offset=12), If(BoolOp(And(), [Compare(Name('K', Load(), lineno=500, col_offset=15), [Eq()], [Str('expires', lineno=500, col_offset=20)], lineno=500, col_offset=15), Compare(Call(Name('type', Load(), lineno=500, col_offset=34), [Name('V', Load(), lineno=500, col_offset=39)], [], None, None, lineno=500, col_offset=34), [Eq()], [Call(Name('type', Load(), lineno=500, col_offset=45), [Num(1, lineno=500, col_offset=50)], [], None, None, lineno=500, col_offset=45)], lineno=500, col_offset=34)], lineno=500, col_offset=15), [Expr(Call(Name('RA', Load(), lineno=501, col_offset=16), [BinOp(Str('%s=%s', lineno=501, col_offset=19), Mod(), Tuple([Subscript(Attribute(Name('self', Load(), lineno=501, col_offset=30), '_reserved', Load(), lineno=501, col_offset=30), Index(Name('K', Load(), lineno=501, col_offset=45)), Load(), lineno=501, col_offset=30), Call(Name('_getdate', Load(), lineno=501, col_offset=49), [Name('V', Load(), lineno=501, col_offset=58)], [], None, None, lineno=501, col_offset=49)], Load(), lineno=501, col_offset=30), lineno=501, col_offset=19)], [], None, None, lineno=501, col_offset=16), lineno=501, col_offset=16)], [If(BoolOp(And(), [Compare(Name('K', Load(), lineno=502, col_offset=17), [Eq()], [Str('max-age', lineno=502, col_offset=22)], lineno=502, col_offset=17), Compare(Call(Name('type', Load(), lineno=502, col_offset=36), [Name('V', Load(), lineno=502, col_offset=41)], [], None, None, lineno=502, col_offset=36), [Eq()], [Call(Name('type', Load(), lineno=502, col_offset=47), [Num(1, lineno=502, col_offset=52)], [], None, None, lineno=502, col_offset=47)], lineno=502, col_offset=36)], lineno=502, col_offset=17), [Expr(Call(Name('RA', Load(), lineno=503, col_offset=16), [BinOp(Str('%s=%d', lineno=503, col_offset=19), Mod(), Tuple([Subscript(Attribute(Name('self', Load(), lineno=503, col_offset=30), '_reserved', Load(), lineno=503, col_offset=30), Index(Name('K', Load(), lineno=503, col_offset=45)), Load(), lineno=503, col_offset=30), Name('V', Load(), lineno=503, col_offset=49)], Load(), lineno=503, col_offset=30), lineno=503, col_offset=19)], [], None, None, lineno=503, col_offset=16), lineno=503, col_offset=16)], [If(Compare(Name('K', Load(), lineno=504, col_offset=17), [Eq()], [Str('secure', lineno=504, col_offset=22)], lineno=504, col_offset=17), [Expr(Call(Name('RA', Load(), lineno=505, col_offset=16), [Call(Name('str', Load(), lineno=505, col_offset=19), [Subscript(Attribute(Name('self', Load(), lineno=505, col_offset=23), '_reserved', Load(), lineno=505, col_offset=23), Index(Name('K', Load(), lineno=505, col_offset=38)), Load(), lineno=505, col_offset=23)], [], None, None, lineno=505, col_offset=19)], [], None, None, lineno=505, col_offset=16), lineno=505, col_offset=16)], [If(Compare(Name('K', Load(), lineno=506, col_offset=17), [Eq()], [Str('httponly', lineno=506, col_offset=22)], lineno=506, col_offset=17), [Expr(Call(Name('RA', Load(), lineno=507, col_offset=16), [Call(Name('str', Load(), lineno=507, col_offset=19), [Subscript(Attribute(Name('self', Load(), lineno=507, col_offset=23), '_reserved', Load(), lineno=507, col_offset=23), Index(Name('K', Load(), lineno=507, col_offset=38)), Load(), lineno=507, col_offset=23)], [], None, None, lineno=507, col_offset=19)], [], None, None, lineno=507, col_offset=16), lineno=507, col_offset=16)], [Expr(Call(Name('RA', Load(), lineno=509, col_offset=16), [BinOp(Str('%s=%s', lineno=509, col_offset=19), Mod(), Tuple([Subscript(Attribute(Name('self', Load(), lineno=509, col_offset=30), '_reserved', Load(), lineno=509, col_offset=30), Index(Name('K', Load(), lineno=509, col_offset=45)), Load(), lineno=509, col_offset=30), Name('V', Load(), lineno=509, col_offset=49)], Load(), lineno=509, col_offset=30), lineno=509, col_offset=19)], [], None, None, lineno=509, col_offset=16), lineno=509, col_offset=16)], lineno=506, col_offset=17)], lineno=504, col_offset=17)], lineno=502, col_offset=17)], lineno=500, col_offset=12)], [], lineno=497, col_offset=8), Return(Call(Name('_semispacejoin', Load(), lineno=512, col_offset=15), [Name('result', Load(), lineno=512, col_offset=30)], [], None, None, lineno=512, col_offset=15), lineno=512, col_offset=8)], [], lineno=483, col_offset=4)], [], lineno=403, col_offset=0), Assign([Name('_LegalCharsPatt', Store(), lineno=527, col_offset=0)], Str("[\\w\\d!#%&'~_`><@,:/\\$\\*\\+\\-\\.\\^\\|\\)\\(\\?\\}\\{\\=]", lineno=527, col_offset=19), lineno=527, col_offset=0), Assign([Name('_CookiePattern', Store(), lineno=528, col_offset=0)], Call(Attribute(Name('re', Load(), lineno=528, col_offset=17), 'compile', Load(), lineno=528, col_offset=17), [BinOp(BinOp(BinOp(BinOp(Str('(?x)(?P<key>', lineno=529, col_offset=4), Add(), Name('_LegalCharsPatt', Load(), lineno=531, col_offset=8), lineno=529, col_offset=4), Add(), Str('+?)\\s*=\\s*(?P<val>"(?:[^\\\\"]|\\\\.)*"|\\w{3},\\s[\\w\\d-]{9,11}\\s[\\d:]{8}\\sGMT|', lineno=531, col_offset=25), lineno=531, col_offset=24), Add(), Name('_LegalCharsPatt', Load(), lineno=539, col_offset=8), lineno=539, col_offset=6), Add(), Str('*)\\s*;?', lineno=539, col_offset=25), lineno=539, col_offset=24)], [], None, None, lineno=528, col_offset=17), lineno=528, col_offset=0), ClassDef('BaseCookie', [Name('dict', Load(), lineno=549, col_offset=17)], [FunctionDef('value_decode', arguments([Name('self', Param(), lineno=553, col_offset=21), Name('val', Param(), lineno=553, col_offset=27)], None, None, []), [Expr(Str("real_value, coded_value = value_decode(STRING)\n        Called prior to setting a cookie's value from the network\n        representation.  The VALUE is the value read from HTTP\n        header.\n        Override this function to modify the behavior of cookies.\n        ", lineno=559, col_offset=-1), lineno=559, col_offset=-1), Return(Tuple([Name('val', Load(), lineno=560, col_offset=15), Name('val', Load(), lineno=560, col_offset=20)], Load(), lineno=560, col_offset=15), lineno=560, col_offset=8)], [], lineno=553, col_offset=4), FunctionDef('value_encode', arguments([Name('self', Param(), lineno=563, col_offset=21), Name('val', Param(), lineno=563, col_offset=27)], None, None, []), [Expr(Str("real_value, coded_value = value_encode(VALUE)\n        Called prior to setting a cookie's value from the dictionary\n        representation.  The VALUE is the value being assigned.\n        Override this function to modify the behavior of cookies.\n        ", lineno=568, col_offset=-1), lineno=568, col_offset=-1), Assign([Name('strval', Store(), lineno=569, col_offset=8)], Call(Name('str', Load(), lineno=569, col_offset=17), [Name('val', Load(), lineno=569, col_offset=21)], [], None, None, lineno=569, col_offset=17), lineno=569, col_offset=8), Return(Tuple([Name('strval', Load(), lineno=570, col_offset=15), Name('strval', Load(), lineno=570, col_offset=23)], Load(), lineno=570, col_offset=15), lineno=570, col_offset=8)], [], lineno=563, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=573, col_offset=17), Name('input', Param(), lineno=573, col_offset=23)], None, None, [Name('None', Load(), lineno=573, col_offset=29)]), [If(Name('input', Load(), lineno=574, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=574, col_offset=18), 'load', Load(), lineno=574, col_offset=18), [Name('input', Load(), lineno=574, col_offset=28)], [], None, None, lineno=574, col_offset=18), lineno=574, col_offset=18)], [], lineno=574, col_offset=8)], [], lineno=573, col_offset=4), FunctionDef('__set', arguments([Name('self', Param(), lineno=577, col_offset=14), Name('key', Param(), lineno=577, col_offset=20), Name('real_value', Param(), lineno=577, col_offset=25), Name('coded_value', Param(), lineno=577, col_offset=37)], None, None, []), [Expr(Str("Private method for setting a cookie's value", lineno=578, col_offset=8), lineno=578, col_offset=8), Assign([Name('M', Store(), lineno=579, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=579, col_offset=12), 'get', Load(), lineno=579, col_offset=12), [Name('key', Load(), lineno=579, col_offset=21), Call(Name('Morsel', Load(), lineno=579, col_offset=26), [], [], None, None, lineno=579, col_offset=26)], [], None, None, lineno=579, col_offset=12), lineno=579, col_offset=8), Expr(Call(Attribute(Name('M', Load(), lineno=580, col_offset=8), 'set', Load(), lineno=580, col_offset=8), [Name('key', Load(), lineno=580, col_offset=14), Name('real_value', Load(), lineno=580, col_offset=19), Name('coded_value', Load(), lineno=580, col_offset=31)], [], None, None, lineno=580, col_offset=8), lineno=580, col_offset=8), Expr(Call(Attribute(Name('dict', Load(), lineno=581, col_offset=8), '__setitem__', Load(), lineno=581, col_offset=8), [Name('self', Load(), lineno=581, col_offset=25), Name('key', Load(), lineno=581, col_offset=31), Name('M', Load(), lineno=581, col_offset=36)], [], None, None, lineno=581, col_offset=8), lineno=581, col_offset=8)], [], lineno=577, col_offset=4), FunctionDef('__setitem__', arguments([Name('self', Param(), lineno=584, col_offset=20), Name('key', Param(), lineno=584, col_offset=26), Name('value', Param(), lineno=584, col_offset=31)], None, None, []), [Expr(Str('Dictionary style assignment.', lineno=585, col_offset=8), lineno=585, col_offset=8), Assign([Tuple([Name('rval', Store(), lineno=586, col_offset=8), Name('cval', Store(), lineno=586, col_offset=14)], Store(), lineno=586, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=586, col_offset=21), 'value_encode', Load(), lineno=586, col_offset=21), [Name('value', Load(), lineno=586, col_offset=39)], [], None, None, lineno=586, col_offset=21), lineno=586, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=587, col_offset=8), '__set', Load(), lineno=587, col_offset=8), [Name('key', Load(), lineno=587, col_offset=19), Name('rval', Load(), lineno=587, col_offset=24), Name('cval', Load(), lineno=587, col_offset=30)], [], None, None, lineno=587, col_offset=8), lineno=587, col_offset=8)], [], lineno=584, col_offset=4), FunctionDef('output', arguments([Name('self', Param(), lineno=590, col_offset=15), Name('attrs', Param(), lineno=590, col_offset=21), Name('header', Param(), lineno=590, col_offset=33), Name('sep', Param(), lineno=590, col_offset=55)], None, None, [Name('None', Load(), lineno=590, col_offset=27), Str('Set-Cookie:', lineno=590, col_offset=40), Str('\r\n', lineno=590, col_offset=59)]), [Expr(Str('Return a string suitable for HTTP.', lineno=591, col_offset=8), lineno=591, col_offset=8), Assign([Name('result', Store(), lineno=592, col_offset=8)], List([], Load(), lineno=592, col_offset=17), lineno=592, col_offset=8), Assign([Name('items', Store(), lineno=593, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=593, col_offset=16), 'items', Load(), lineno=593, col_offset=16), [], [], None, None, lineno=593, col_offset=16), lineno=593, col_offset=8), Expr(Call(Attribute(Name('items', Load(), lineno=594, col_offset=8), 'sort', Load(), lineno=594, col_offset=8), [], [], None, None, lineno=594, col_offset=8), lineno=594, col_offset=8), For(Tuple([Name('K', Store(), lineno=595, col_offset=12), Name('V', Store(), lineno=595, col_offset=14)], Store(), lineno=595, col_offset=12), Name('items', Load(), lineno=595, col_offset=19), [Expr(Call(Attribute(Name('result', Load(), lineno=596, col_offset=12), 'append', Load(), lineno=596, col_offset=12), [Call(Attribute(Name('V', Load(), lineno=596, col_offset=27), 'output', Load(), lineno=596, col_offset=27), [Name('attrs', Load(), lineno=596, col_offset=36), Name('header', Load(), lineno=596, col_offset=43)], [], None, None, lineno=596, col_offset=27)], [], None, None, lineno=596, col_offset=12), lineno=596, col_offset=12)], [], lineno=595, col_offset=8), Return(Call(Attribute(Name('sep', Load(), lineno=597, col_offset=15), 'join', Load(), lineno=597, col_offset=15), [Name('result', Load(), lineno=597, col_offset=24)], [], None, None, lineno=597, col_offset=15), lineno=597, col_offset=8)], [], lineno=590, col_offset=4), Assign([Name('__str__', Store(), lineno=600, col_offset=4)], Name('output', Load(), lineno=600, col_offset=14), lineno=600, col_offset=4), FunctionDef('__repr__', arguments([Name('self', Param(), lineno=602, col_offset=17)], None, None, []), [Assign([Name('L', Store(), lineno=603, col_offset=8)], List([], Load(), lineno=603, col_offset=12), lineno=603, col_offset=8), Assign([Name('items', Store(), lineno=604, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=604, col_offset=16), 'items', Load(), lineno=604, col_offset=16), [], [], None, None, lineno=604, col_offset=16), lineno=604, col_offset=8), Expr(Call(Attribute(Name('items', Load(), lineno=605, col_offset=8), 'sort', Load(), lineno=605, col_offset=8), [], [], None, None, lineno=605, col_offset=8), lineno=605, col_offset=8), For(Tuple([Name('K', Store(), lineno=606, col_offset=12), Name('V', Store(), lineno=606, col_offset=14)], Store(), lineno=606, col_offset=12), Name('items', Load(), lineno=606, col_offset=19), [Expr(Call(Attribute(Name('L', Load(), lineno=607, col_offset=12), 'append', Load(), lineno=607, col_offset=12), [BinOp(Str('%s=%s', lineno=607, col_offset=22), Mod(), Tuple([Name('K', Load(), lineno=607, col_offset=33), Call(Name('repr', Load(), lineno=607, col_offset=35), [Attribute(Name('V', Load(), lineno=607, col_offset=40), 'value', Load(), lineno=607, col_offset=40)], [], None, None, lineno=607, col_offset=35)], Load(), lineno=607, col_offset=33), lineno=607, col_offset=22)], [], None, None, lineno=607, col_offset=12), lineno=607, col_offset=12)], [], lineno=606, col_offset=8), Return(BinOp(Str('<%s: %s>', lineno=608, col_offset=15), Mod(), Tuple([Attribute(Attribute(Name('self', Load(), lineno=608, col_offset=29), '__class__', Load(), lineno=608, col_offset=29), '__name__', Load(), lineno=608, col_offset=29), Call(Name('_spacejoin', Load(), lineno=608, col_offset=54), [Name('L', Load(), lineno=608, col_offset=65)], [], None, None, lineno=608, col_offset=54)], Load(), lineno=608, col_offset=29), lineno=608, col_offset=15), lineno=608, col_offset=8)], [], lineno=602, col_offset=4), FunctionDef('js_output', arguments([Name('self', Param(), lineno=610, col_offset=18), Name('attrs', Param(), lineno=610, col_offset=24)], None, None, [Name('None', Load(), lineno=610, col_offset=30)]), [Expr(Str('Return a string suitable for JavaScript.', lineno=611, col_offset=8), lineno=611, col_offset=8), Assign([Name('result', Store(), lineno=612, col_offset=8)], List([], Load(), lineno=612, col_offset=17), lineno=612, col_offset=8), Assign([Name('items', Store(), lineno=613, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=613, col_offset=16), 'items', Load(), lineno=613, col_offset=16), [], [], None, None, lineno=613, col_offset=16), lineno=613, col_offset=8), Expr(Call(Attribute(Name('items', Load(), lineno=614, col_offset=8), 'sort', Load(), lineno=614, col_offset=8), [], [], None, None, lineno=614, col_offset=8), lineno=614, col_offset=8), For(Tuple([Name('K', Store(), lineno=615, col_offset=12), Name('V', Store(), lineno=615, col_offset=14)], Store(), lineno=615, col_offset=12), Name('items', Load(), lineno=615, col_offset=19), [Expr(Call(Attribute(Name('result', Load(), lineno=616, col_offset=12), 'append', Load(), lineno=616, col_offset=12), [Call(Attribute(Name('V', Load(), lineno=616, col_offset=27), 'js_output', Load(), lineno=616, col_offset=27), [Name('attrs', Load(), lineno=616, col_offset=39)], [], None, None, lineno=616, col_offset=27)], [], None, None, lineno=616, col_offset=12), lineno=616, col_offset=12)], [], lineno=615, col_offset=8), Return(Call(Name('_nulljoin', Load(), lineno=617, col_offset=15), [Name('result', Load(), lineno=617, col_offset=25)], [], None, None, lineno=617, col_offset=15), lineno=617, col_offset=8)], [], lineno=610, col_offset=4), FunctionDef('load', arguments([Name('self', Param(), lineno=620, col_offset=13), Name('rawdata', Param(), lineno=620, col_offset=19)], None, None, []), [Expr(Str("Load cookies from a string (presumably HTTP_COOKIE) or\n        from a dictionary.  Loading cookies from a dictionary 'd'\n        is equivalent to calling:\n            map(Cookie.__setitem__, d.keys(), d.values())\n        ", lineno=625, col_offset=-1), lineno=625, col_offset=-1), If(Compare(Call(Name('type', Load(), lineno=626, col_offset=11), [Name('rawdata', Load(), lineno=626, col_offset=16)], [], None, None, lineno=626, col_offset=11), [Eq()], [Call(Name('type', Load(), lineno=626, col_offset=28), [Str('', lineno=626, col_offset=33)], [], None, None, lineno=626, col_offset=28)], lineno=626, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=627, col_offset=12), '__ParseString', Load(), lineno=627, col_offset=12), [Name('rawdata', Load(), lineno=627, col_offset=31)], [], None, None, lineno=627, col_offset=12), lineno=627, col_offset=12)], [For(Tuple([Name('k', Store(), lineno=630, col_offset=16), Name('v', Store(), lineno=630, col_offset=19)], Store(), lineno=630, col_offset=16), Call(Attribute(Name('rawdata', Load(), lineno=630, col_offset=24), 'items', Load(), lineno=630, col_offset=24), [], [], None, None, lineno=630, col_offset=24), [Assign([Subscript(Name('self', Load(), lineno=631, col_offset=16), Index(Name('k', Load(), lineno=631, col_offset=21)), Store(), lineno=631, col_offset=16)], Name('v', Load(), lineno=631, col_offset=26), lineno=631, col_offset=16)], [], lineno=630, col_offset=12)], lineno=626, col_offset=8), Return(None, lineno=632, col_offset=8)], [], lineno=620, col_offset=4), FunctionDef('__ParseString', arguments([Name('self', Param(), lineno=635, col_offset=22), Name('str', Param(), lineno=635, col_offset=28), Name('patt', Param(), lineno=635, col_offset=33)], None, None, [Name('_CookiePattern', Load(), lineno=635, col_offset=38)]), [Assign([Name('i', Store(), lineno=636, col_offset=8)], Num(0, lineno=636, col_offset=12), lineno=636, col_offset=8), Assign([Name('n', Store(), lineno=637, col_offset=8)], Call(Name('len', Load(), lineno=637, col_offset=12), [Name('str', Load(), lineno=637, col_offset=16)], [], None, None, lineno=637, col_offset=12), lineno=637, col_offset=8), Assign([Name('M', Store(), lineno=638, col_offset=8)], Name('None', Load(), lineno=638, col_offset=12), lineno=638, col_offset=8), While(Compare(Num(0, lineno=640, col_offset=14), [LtE(), Lt()], [Name('i', Load(), lineno=640, col_offset=19), Name('n', Load(), lineno=640, col_offset=23)], lineno=640, col_offset=14), [Assign([Name('match', Store(), lineno=642, col_offset=12)], Call(Attribute(Name('patt', Load(), lineno=642, col_offset=20), 'search', Load(), lineno=642, col_offset=20), [Name('str', Load(), lineno=642, col_offset=32), Name('i', Load(), lineno=642, col_offset=37)], [], None, None, lineno=642, col_offset=20), lineno=642, col_offset=12), If(UnaryOp(Not(), Name('match', Load(), lineno=643, col_offset=19), lineno=643, col_offset=15), [Break( lineno=643, col_offset=26)], [], lineno=643, col_offset=12), Assign([Tuple([Name('K', Store(), lineno=645, col_offset=12), Name('V', Store(), lineno=645, col_offset=14)], Store(), lineno=645, col_offset=12)], Tuple([Call(Attribute(Name('match', Load(), lineno=645, col_offset=18), 'group', Load(), lineno=645, col_offset=18), [Str('key', lineno=645, col_offset=30)], [], None, None, lineno=645, col_offset=18), Call(Attribute(Name('match', Load(), lineno=645, col_offset=38), 'group', Load(), lineno=645, col_offset=38), [Str('val', lineno=645, col_offset=50)], [], None, None, lineno=645, col_offset=38)], Load(), lineno=645, col_offset=18), lineno=645, col_offset=12), Assign([Name('i', Store(), lineno=646, col_offset=12)], Call(Attribute(Name('match', Load(), lineno=646, col_offset=16), 'end', Load(), lineno=646, col_offset=16), [Num(0, lineno=646, col_offset=26)], [], None, None, lineno=646, col_offset=16), lineno=646, col_offset=12), If(Compare(Subscript(Name('K', Load(), lineno=649, col_offset=15), Index(Num(0, lineno=649, col_offset=17)), Load(), lineno=649, col_offset=15), [Eq()], [Str('$', lineno=649, col_offset=23)], lineno=649, col_offset=15), [If(Name('M', Load(), lineno=653, col_offset=19), [Assign([Subscript(Name('M', Load(), lineno=654, col_offset=20), Index(Subscript(Name('K', Load(), lineno=654, col_offset=23), Slice(Num(1, lineno=654, col_offset=25), None, None), Load(), lineno=654, col_offset=23)), Store(), lineno=654, col_offset=20)], Name('V', Load(), lineno=654, col_offset=33), lineno=654, col_offset=20)], [], lineno=653, col_offset=16)], [If(Compare(Call(Attribute(Name('K', Load(), lineno=655, col_offset=17), 'lower', Load(), lineno=655, col_offset=17), [], [], None, None, lineno=655, col_offset=17), [In()], [Attribute(Name('Morsel', Load(), lineno=655, col_offset=30), '_reserved', Load(), lineno=655, col_offset=30)], lineno=655, col_offset=17), [If(Name('M', Load(), lineno=656, col_offset=19), [Assign([Subscript(Name('M', Load(), lineno=657, col_offset=20), Index(Name('K', Load(), lineno=657, col_offset=23)), Store(), lineno=657, col_offset=20)], Call(Name('_unquote', Load(), lineno=657, col_offset=29), [Name('V', Load(), lineno=657, col_offset=38)], [], None, None, lineno=657, col_offset=29), lineno=657, col_offset=20)], [], lineno=656, col_offset=16)], [Assign([Tuple([Name('rval', Store(), lineno=659, col_offset=16), Name('cval', Store(), lineno=659, col_offset=22)], Store(), lineno=659, col_offset=16)], Call(Attribute(Name('self', Load(), lineno=659, col_offset=29), 'value_decode', Load(), lineno=659, col_offset=29), [Name('V', Load(), lineno=659, col_offset=47)], [], None, None, lineno=659, col_offset=29), lineno=659, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=660, col_offset=16), '__set', Load(), lineno=660, col_offset=16), [Name('K', Load(), lineno=660, col_offset=27), Name('rval', Load(), lineno=660, col_offset=30), Name('cval', Load(), lineno=660, col_offset=36)], [], None, None, lineno=660, col_offset=16), lineno=660, col_offset=16), Assign([Name('M', Store(), lineno=661, col_offset=16)], Subscript(Name('self', Load(), lineno=661, col_offset=20), Index(Name('K', Load(), lineno=661, col_offset=25)), Load(), lineno=661, col_offset=20), lineno=661, col_offset=16)], lineno=655, col_offset=17)], lineno=649, col_offset=12)], [], lineno=640, col_offset=8)], [], lineno=635, col_offset=4)], [], lineno=549, col_offset=0), ClassDef('SimpleCookie', [Name('BaseCookie', Load(), lineno=665, col_offset=19)], [Expr(Str('SimpleCookie\n    SimpleCookie supports strings as cookie values.  When setting\n    the value using the dictionary assignment notation, SimpleCookie\n    calls the builtin str() to convert the value to a string.  Values\n    received from HTTP are kept as strings.\n    ', lineno=671, col_offset=-1), lineno=671, col_offset=-1), FunctionDef('value_decode', arguments([Name('self', Param(), lineno=672, col_offset=21), Name('val', Param(), lineno=672, col_offset=27)], None, None, []), [Return(Tuple([Call(Name('_unquote', Load(), lineno=673, col_offset=15), [Name('val', Load(), lineno=673, col_offset=25)], [], None, None, lineno=673, col_offset=15), Name('val', Load(), lineno=673, col_offset=32)], Load(), lineno=673, col_offset=15), lineno=673, col_offset=8)], [], lineno=672, col_offset=4), FunctionDef('value_encode', arguments([Name('self', Param(), lineno=674, col_offset=21), Name('val', Param(), lineno=674, col_offset=27)], None, None, []), [Assign([Name('strval', Store(), lineno=675, col_offset=8)], Call(Name('str', Load(), lineno=675, col_offset=17), [Name('val', Load(), lineno=675, col_offset=21)], [], None, None, lineno=675, col_offset=17), lineno=675, col_offset=8), Return(Tuple([Name('strval', Load(), lineno=676, col_offset=15), Call(Name('_quote', Load(), lineno=676, col_offset=23), [Name('strval', Load(), lineno=676, col_offset=31)], [], None, None, lineno=676, col_offset=23)], Load(), lineno=676, col_offset=15), lineno=676, col_offset=8)], [], lineno=674, col_offset=4)], [], lineno=665, col_offset=0), ClassDef('SerialCookie', [Name('BaseCookie', Load(), lineno=679, col_offset=19)], [Expr(Str('SerialCookie\n    SerialCookie supports arbitrary objects as cookie values. All\n    values are serialized (using cPickle) before being sent to the\n    client.  All incoming values are assumed to be valid Pickle\n    representations.  IF AN INCOMING VALUE IS NOT IN A VALID PICKLE\n    FORMAT, THEN AN EXCEPTION WILL BE RAISED.\n\n    Note: Large cookie values add overhead because they must be\n    retransmitted on every HTTP transaction.\n\n    Note: HTTP has a 2k limit on the size of a cookie.  This class\n    does not check for this limit, so be careful!!!\n    ', lineno=692, col_offset=-1), lineno=692, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=693, col_offset=17), Name('input', Param(), lineno=693, col_offset=23)], None, None, [Name('None', Load(), lineno=693, col_offset=29)]), [Expr(Call(Attribute(Name('warnings', Load(), lineno=694, col_offset=8), 'warn', Load(), lineno=694, col_offset=8), [Str('SerialCookie class is insecure; do not use it', lineno=694, col_offset=22), Name('DeprecationWarning', Load(), lineno=695, col_offset=22)], [], None, None, lineno=694, col_offset=8), lineno=694, col_offset=8), Expr(Call(Attribute(Name('BaseCookie', Load(), lineno=696, col_offset=8), '__init__', Load(), lineno=696, col_offset=8), [Name('self', Load(), lineno=696, col_offset=28), Name('input', Load(), lineno=696, col_offset=34)], [], None, None, lineno=696, col_offset=8), lineno=696, col_offset=8)], [], lineno=693, col_offset=4), FunctionDef('value_decode', arguments([Name('self', Param(), lineno=698, col_offset=21), Name('val', Param(), lineno=698, col_offset=27)], None, None, []), [Return(Tuple([Call(Name('loads', Load(), lineno=700, col_offset=15), [Call(Name('_unquote', Load(), lineno=700, col_offset=22), [Name('val', Load(), lineno=700, col_offset=31)], [], None, None, lineno=700, col_offset=22)], [], None, None, lineno=700, col_offset=15), Name('val', Load(), lineno=700, col_offset=39)], Load(), lineno=700, col_offset=15), lineno=700, col_offset=8)], [], lineno=698, col_offset=4), FunctionDef('value_encode', arguments([Name('self', Param(), lineno=701, col_offset=21), Name('val', Param(), lineno=701, col_offset=27)], None, None, []), [Return(Tuple([Name('val', Load(), lineno=702, col_offset=15), Call(Name('_quote', Load(), lineno=702, col_offset=20), [Call(Name('dumps', Load(), lineno=702, col_offset=28), [Name('val', Load(), lineno=702, col_offset=34)], [], None, None, lineno=702, col_offset=28)], [], None, None, lineno=702, col_offset=20)], Load(), lineno=702, col_offset=15), lineno=702, col_offset=8)], [], lineno=701, col_offset=4)], [], lineno=679, col_offset=0), ClassDef('SmartCookie', [Name('BaseCookie', Load(), lineno=705, col_offset=18)], [Expr(Str('SmartCookie\n    SmartCookie supports arbitrary objects as cookie values.  If the\n    object is a string, then it is quoted.  If the object is not a\n    string, however, then SmartCookie will use cPickle to serialize\n    the object into a string representation.\n\n    Note: Large cookie values add overhead because they must be\n    retransmitted on every HTTP transaction.\n\n    Note: HTTP has a 2k limit on the size of a cookie.  This class\n    does not check for this limit, so be careful!!!\n    ', lineno=717, col_offset=-1), lineno=717, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=718, col_offset=17), Name('input', Param(), lineno=718, col_offset=23)], None, None, [Name('None', Load(), lineno=718, col_offset=29)]), [Expr(Call(Attribute(Name('warnings', Load(), lineno=719, col_offset=8), 'warn', Load(), lineno=719, col_offset=8), [Str('Cookie/SmartCookie class is insecure; do not use it', lineno=719, col_offset=22), Name('DeprecationWarning', Load(), lineno=720, col_offset=22)], [], None, None, lineno=719, col_offset=8), lineno=719, col_offset=8), Expr(Call(Attribute(Name('BaseCookie', Load(), lineno=721, col_offset=8), '__init__', Load(), lineno=721, col_offset=8), [Name('self', Load(), lineno=721, col_offset=28), Name('input', Load(), lineno=721, col_offset=34)], [], None, None, lineno=721, col_offset=8), lineno=721, col_offset=8)], [], lineno=718, col_offset=4), FunctionDef('value_decode', arguments([Name('self', Param(), lineno=723, col_offset=21), Name('val', Param(), lineno=723, col_offset=27)], None, None, []), [Assign([Name('strval', Store(), lineno=724, col_offset=8)], Call(Name('_unquote', Load(), lineno=724, col_offset=17), [Name('val', Load(), lineno=724, col_offset=26)], [], None, None, lineno=724, col_offset=17), lineno=724, col_offset=8), TryExcept([Return(Tuple([Call(Name('loads', Load(), lineno=726, col_offset=19), [Name('strval', Load(), lineno=726, col_offset=25)], [], None, None, lineno=726, col_offset=19), Name('val', Load(), lineno=726, col_offset=34)], Load(), lineno=726, col_offset=19), lineno=726, col_offset=12)], [ExceptHandler(None, None, [Return(Tuple([Name('strval', Load(), lineno=728, col_offset=19), Name('val', Load(), lineno=728, col_offset=27)], Load(), lineno=728, col_offset=19), lineno=728, col_offset=12)], lineno=727, col_offset=8)], [], lineno=725, col_offset=8)], [], lineno=723, col_offset=4), FunctionDef('value_encode', arguments([Name('self', Param(), lineno=729, col_offset=21), Name('val', Param(), lineno=729, col_offset=27)], None, None, []), [If(Compare(Call(Name('type', Load(), lineno=730, col_offset=11), [Name('val', Load(), lineno=730, col_offset=16)], [], None, None, lineno=730, col_offset=11), [Eq()], [Call(Name('type', Load(), lineno=730, col_offset=24), [Str('', lineno=730, col_offset=29)], [], None, None, lineno=730, col_offset=24)], lineno=730, col_offset=11), [Return(Tuple([Name('val', Load(), lineno=731, col_offset=19), Call(Name('_quote', Load(), lineno=731, col_offset=24), [Name('val', Load(), lineno=731, col_offset=31)], [], None, None, lineno=731, col_offset=24)], Load(), lineno=731, col_offset=19), lineno=731, col_offset=12)], [Return(Tuple([Name('val', Load(), lineno=733, col_offset=19), Call(Name('_quote', Load(), lineno=733, col_offset=24), [Call(Name('dumps', Load(), lineno=733, col_offset=32), [Name('val', Load(), lineno=733, col_offset=38)], [], None, None, lineno=733, col_offset=32)], [], None, None, lineno=733, col_offset=24)], Load(), lineno=733, col_offset=19), lineno=733, col_offset=12)], lineno=730, col_offset=8)], [], lineno=729, col_offset=4)], [], lineno=705, col_offset=0), Assign([Name('Cookie', Store(), lineno=741, col_offset=0)], Name('SmartCookie', Load(), lineno=741, col_offset=9), lineno=741, col_offset=0), FunctionDef('_test', arguments([], None, None, []), [Import([alias('doctest', None), alias('Cookie', None)], lineno=747, col_offset=4), Return(Call(Attribute(Name('doctest', Load(), lineno=748, col_offset=11), 'testmod', Load(), lineno=748, col_offset=11), [Name('Cookie', Load(), lineno=748, col_offset=27)], [], None, None, lineno=748, col_offset=11), lineno=748, col_offset=4)], [], lineno=746, col_offset=0), If(Compare(Name('__name__', Load(), lineno=750, col_offset=3), [Eq()], [Str('__main__', lineno=750, col_offset=15)], lineno=750, col_offset=3), [Expr(Call(Name('_test', Load(), lineno=751, col_offset=4), [], [], None, None, lineno=751, col_offset=4), lineno=751, col_offset=4)], [], lineno=750, col_offset=0)])
