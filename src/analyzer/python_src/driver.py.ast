Module([Expr(Str('Parser driver.\n\nThis provides a high-level interface to parse a file into a syntax tree.\n\n', lineno=12, col_offset=-1), lineno=12, col_offset=-1), Assign([Name('__author__', Store(), lineno=14, col_offset=0)], Str('Guido van Rossum <guido@python.org>', lineno=14, col_offset=13), lineno=14, col_offset=0), Assign([Name('__all__', Store(), lineno=16, col_offset=0)], List([Str('Driver', lineno=16, col_offset=11), Str('load_grammar', lineno=16, col_offset=21)], Load(), lineno=16, col_offset=10), lineno=16, col_offset=0), Import([alias('codecs', None)], lineno=19, col_offset=0), Import([alias('os', None)], lineno=20, col_offset=0), Import([alias('logging', None)], lineno=21, col_offset=0), Import([alias('sys', None)], lineno=22, col_offset=0), ImportFrom(None, [alias('grammar', None), alias('parse', None), alias('token', None), alias('tokenize', None), alias('pgen', None)], 1, lineno=25, col_offset=0), ClassDef('Driver', [Name('object', Load(), lineno=28, col_offset=13)], [FunctionDef('__init__', arguments([Name('self', Param(), lineno=30, col_offset=17), Name('grammar', Param(), lineno=30, col_offset=23), Name('convert', Param(), lineno=30, col_offset=32), Name('logger', Param(), lineno=30, col_offset=46)], None, None, [Name('None', Load(), lineno=30, col_offset=40), Name('None', Load(), lineno=30, col_offset=53)]), [Assign([Attribute(Name('self', Load(), lineno=31, col_offset=8), 'grammar', Store(), lineno=31, col_offset=8)], Name('grammar', Load(), lineno=31, col_offset=23), lineno=31, col_offset=8), If(Compare(Name('logger', Load(), lineno=32, col_offset=11), [Is()], [Name('None', Load(), lineno=32, col_offset=21)], lineno=32, col_offset=11), [Assign([Name('logger', Store(), lineno=33, col_offset=12)], Call(Attribute(Name('logging', Load(), lineno=33, col_offset=21), 'getLogger', Load(), lineno=33, col_offset=21), [], [], None, None, lineno=33, col_offset=21), lineno=33, col_offset=12)], [], lineno=32, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=34, col_offset=8), 'logger', Store(), lineno=34, col_offset=8)], Name('logger', Load(), lineno=34, col_offset=22), lineno=34, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=35, col_offset=8), 'convert', Store(), lineno=35, col_offset=8)], Name('convert', Load(), lineno=35, col_offset=23), lineno=35, col_offset=8)], [], lineno=30, col_offset=4), FunctionDef('parse_tokens', arguments([Name('self', Param(), lineno=37, col_offset=21), Name('tokens', Param(), lineno=37, col_offset=27), Name('debug', Param(), lineno=37, col_offset=35)], None, None, [Name('False', Load(), lineno=37, col_offset=41)]), [Expr(Str('Parse a series of tokens and return the syntax tree.', lineno=38, col_offset=8), lineno=38, col_offset=8), Assign([Name('p', Store(), lineno=40, col_offset=8)], Call(Attribute(Name('parse', Load(), lineno=40, col_offset=12), 'Parser', Load(), lineno=40, col_offset=12), [Attribute(Name('self', Load(), lineno=40, col_offset=25), 'grammar', Load(), lineno=40, col_offset=25), Attribute(Name('self', Load(), lineno=40, col_offset=39), 'convert', Load(), lineno=40, col_offset=39)], [], None, None, lineno=40, col_offset=12), lineno=40, col_offset=8), Expr(Call(Attribute(Name('p', Load(), lineno=41, col_offset=8), 'setup', Load(), lineno=41, col_offset=8), [], [], None, None, lineno=41, col_offset=8), lineno=41, col_offset=8), Assign([Name('lineno', Store(), lineno=42, col_offset=8)], Num(1, lineno=42, col_offset=17), lineno=42, col_offset=8), Assign([Name('column', Store(), lineno=43, col_offset=8)], Num(0, lineno=43, col_offset=17), lineno=43, col_offset=8), Assign([Name('type', Store(), lineno=44, col_offset=8), Name('value', Store(), lineno=44, col_offset=15), Name('start', Store(), lineno=44, col_offset=23), Name('end', Store(), lineno=44, col_offset=31), Name('line_text', Store(), lineno=44, col_offset=37)], Name('None', Load(), lineno=44, col_offset=49), lineno=44, col_offset=8), Assign([Name('prefix', Store(), lineno=45, col_offset=8)], Str(u'', lineno=45, col_offset=17), lineno=45, col_offset=8), For(Name('quintuple', Store(), lineno=46, col_offset=12), Name('tokens', Load(), lineno=46, col_offset=25), [Assign([Tuple([Name('type', Store(), lineno=47, col_offset=12), Name('value', Store(), lineno=47, col_offset=18), Name('start', Store(), lineno=47, col_offset=25), Name('end', Store(), lineno=47, col_offset=32), Name('line_text', Store(), lineno=47, col_offset=37)], Store(), lineno=47, col_offset=12)], Name('quintuple', Load(), lineno=47, col_offset=49), lineno=47, col_offset=12), If(Compare(Name('start', Load(), lineno=48, col_offset=15), [NotEq()], [Tuple([Name('lineno', Load(), lineno=48, col_offset=25), Name('column', Load(), lineno=48, col_offset=33)], Load(), lineno=48, col_offset=25)], lineno=48, col_offset=15), [Assert(Compare(Tuple([Name('lineno', Load(), lineno=49, col_offset=24), Name('column', Load(), lineno=49, col_offset=32)], Load(), lineno=49, col_offset=24), [LtE()], [Name('start', Load(), lineno=49, col_offset=43)], lineno=49, col_offset=23), Tuple([Tuple([Name('lineno', Load(), lineno=49, col_offset=52), Name('column', Load(), lineno=49, col_offset=60)], Load(), lineno=49, col_offset=52), Name('start', Load(), lineno=49, col_offset=69)], Load(), lineno=49, col_offset=51), lineno=49, col_offset=16), Assign([Tuple([Name('s_lineno', Store(), lineno=50, col_offset=16), Name('s_column', Store(), lineno=50, col_offset=26)], Store(), lineno=50, col_offset=16)], Name('start', Load(), lineno=50, col_offset=37), lineno=50, col_offset=16), If(Compare(Name('lineno', Load(), lineno=51, col_offset=19), [Lt()], [Name('s_lineno', Load(), lineno=51, col_offset=28)], lineno=51, col_offset=19), [AugAssign(Name('prefix', Store(), lineno=52, col_offset=20), Add(), BinOp(Str('\n', lineno=52, col_offset=30), Mult(), BinOp(Name('s_lineno', Load(), lineno=52, col_offset=38), Sub(), Name('lineno', Load(), lineno=52, col_offset=49), lineno=52, col_offset=38), lineno=52, col_offset=30), lineno=52, col_offset=20), Assign([Name('lineno', Store(), lineno=53, col_offset=20)], Name('s_lineno', Load(), lineno=53, col_offset=29), lineno=53, col_offset=20), Assign([Name('column', Store(), lineno=54, col_offset=20)], Num(0, lineno=54, col_offset=29), lineno=54, col_offset=20)], [], lineno=51, col_offset=16), If(Compare(Name('column', Load(), lineno=55, col_offset=19), [Lt()], [Name('s_column', Load(), lineno=55, col_offset=28)], lineno=55, col_offset=19), [AugAssign(Name('prefix', Store(), lineno=56, col_offset=20), Add(), Subscript(Name('line_text', Load(), lineno=56, col_offset=30), Slice(Name('column', Load(), lineno=56, col_offset=40), Name('s_column', Load(), lineno=56, col_offset=47), None), Load(), lineno=56, col_offset=30), lineno=56, col_offset=20), Assign([Name('column', Store(), lineno=57, col_offset=20)], Name('s_column', Load(), lineno=57, col_offset=29), lineno=57, col_offset=20)], [], lineno=55, col_offset=16)], [], lineno=48, col_offset=12), If(Compare(Name('type', Load(), lineno=58, col_offset=15), [In()], [Tuple([Attribute(Name('tokenize', Load(), lineno=58, col_offset=24), 'COMMENT', Load(), lineno=58, col_offset=24), Attribute(Name('tokenize', Load(), lineno=58, col_offset=42), 'NL', Load(), lineno=58, col_offset=42)], Load(), lineno=58, col_offset=24)], lineno=58, col_offset=15), [AugAssign(Name('prefix', Store(), lineno=59, col_offset=16), Add(), Name('value', Load(), lineno=59, col_offset=26), lineno=59, col_offset=16), Assign([Tuple([Name('lineno', Store(), lineno=60, col_offset=16), Name('column', Store(), lineno=60, col_offset=24)], Store(), lineno=60, col_offset=16)], Name('end', Load(), lineno=60, col_offset=33), lineno=60, col_offset=16), If(Call(Attribute(Name('value', Load(), lineno=61, col_offset=19), 'endswith', Load(), lineno=61, col_offset=19), [Str('\n', lineno=61, col_offset=34)], [], None, None, lineno=61, col_offset=19), [AugAssign(Name('lineno', Store(), lineno=62, col_offset=20), Add(), Num(1, lineno=62, col_offset=30), lineno=62, col_offset=20), Assign([Name('column', Store(), lineno=63, col_offset=20)], Num(0, lineno=63, col_offset=29), lineno=63, col_offset=20)], [], lineno=61, col_offset=16), Continue( lineno=64, col_offset=16)], [], lineno=58, col_offset=12), If(Compare(Name('type', Load(), lineno=65, col_offset=15), [Eq()], [Attribute(Name('token', Load(), lineno=65, col_offset=23), 'OP', Load(), lineno=65, col_offset=23)], lineno=65, col_offset=15), [Assign([Name('type', Store(), lineno=66, col_offset=16)], Subscript(Attribute(Name('grammar', Load(), lineno=66, col_offset=23), 'opmap', Load(), lineno=66, col_offset=23), Index(Name('value', Load(), lineno=66, col_offset=37)), Load(), lineno=66, col_offset=23), lineno=66, col_offset=16)], [], lineno=65, col_offset=12), If(Name('debug', Load(), lineno=67, col_offset=15), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=68, col_offset=16), 'logger', Load(), lineno=68, col_offset=16), 'debug', Load(), lineno=68, col_offset=16), [Str('%s %r (prefix=%r)', lineno=68, col_offset=34), Subscript(Attribute(Name('token', Load(), lineno=69, col_offset=34), 'tok_name', Load(), lineno=69, col_offset=34), Index(Name('type', Load(), lineno=69, col_offset=49)), Load(), lineno=69, col_offset=34), Name('value', Load(), lineno=69, col_offset=56), Name('prefix', Load(), lineno=69, col_offset=63)], [], None, None, lineno=68, col_offset=16), lineno=68, col_offset=16)], [], lineno=67, col_offset=12), If(Call(Attribute(Name('p', Load(), lineno=70, col_offset=15), 'addtoken', Load(), lineno=70, col_offset=15), [Name('type', Load(), lineno=70, col_offset=26), Name('value', Load(), lineno=70, col_offset=32), Tuple([Name('prefix', Load(), lineno=70, col_offset=40), Name('start', Load(), lineno=70, col_offset=48)], Load(), lineno=70, col_offset=40)], [], None, None, lineno=70, col_offset=15), [If(Name('debug', Load(), lineno=71, col_offset=19), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=72, col_offset=20), 'logger', Load(), lineno=72, col_offset=20), 'debug', Load(), lineno=72, col_offset=20), [Str('Stop.', lineno=72, col_offset=38)], [], None, None, lineno=72, col_offset=20), lineno=72, col_offset=20)], [], lineno=71, col_offset=16), Break( lineno=73, col_offset=16)], [], lineno=70, col_offset=12), Assign([Name('prefix', Store(), lineno=74, col_offset=12)], Str('', lineno=74, col_offset=21), lineno=74, col_offset=12), Assign([Tuple([Name('lineno', Store(), lineno=75, col_offset=12), Name('column', Store(), lineno=75, col_offset=20)], Store(), lineno=75, col_offset=12)], Name('end', Load(), lineno=75, col_offset=29), lineno=75, col_offset=12), If(Call(Attribute(Name('value', Load(), lineno=76, col_offset=15), 'endswith', Load(), lineno=76, col_offset=15), [Str('\n', lineno=76, col_offset=30)], [], None, None, lineno=76, col_offset=15), [AugAssign(Name('lineno', Store(), lineno=77, col_offset=16), Add(), Num(1, lineno=77, col_offset=26), lineno=77, col_offset=16), Assign([Name('column', Store(), lineno=78, col_offset=16)], Num(0, lineno=78, col_offset=25), lineno=78, col_offset=16)], [], lineno=76, col_offset=12)], [Raise(Call(Attribute(Name('parse', Load(), lineno=81, col_offset=18), 'ParseError', Load(), lineno=81, col_offset=18), [Str('incomplete input', lineno=81, col_offset=35), Name('type', Load(), lineno=82, col_offset=35), Name('value', Load(), lineno=82, col_offset=41), Tuple([Name('prefix', Load(), lineno=82, col_offset=49), Name('start', Load(), lineno=82, col_offset=57)], Load(), lineno=82, col_offset=49)], [], None, None, lineno=81, col_offset=18), None, None, lineno=81, col_offset=12)], lineno=46, col_offset=8), Return(Attribute(Name('p', Load(), lineno=83, col_offset=15), 'rootnode', Load(), lineno=83, col_offset=15), lineno=83, col_offset=8)], [], lineno=37, col_offset=4), FunctionDef('parse_stream_raw', arguments([Name('self', Param(), lineno=85, col_offset=25), Name('stream', Param(), lineno=85, col_offset=31), Name('debug', Param(), lineno=85, col_offset=39)], None, None, [Name('False', Load(), lineno=85, col_offset=45)]), [Expr(Str('Parse a stream and return the syntax tree.', lineno=86, col_offset=8), lineno=86, col_offset=8), Assign([Name('tokens', Store(), lineno=87, col_offset=8)], Call(Attribute(Name('tokenize', Load(), lineno=87, col_offset=17), 'generate_tokens', Load(), lineno=87, col_offset=17), [Attribute(Name('stream', Load(), lineno=87, col_offset=42), 'readline', Load(), lineno=87, col_offset=42)], [], None, None, lineno=87, col_offset=17), lineno=87, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=88, col_offset=15), 'parse_tokens', Load(), lineno=88, col_offset=15), [Name('tokens', Load(), lineno=88, col_offset=33), Name('debug', Load(), lineno=88, col_offset=41)], [], None, None, lineno=88, col_offset=15), lineno=88, col_offset=8)], [], lineno=85, col_offset=4), FunctionDef('parse_stream', arguments([Name('self', Param(), lineno=90, col_offset=21), Name('stream', Param(), lineno=90, col_offset=27), Name('debug', Param(), lineno=90, col_offset=35)], None, None, [Name('False', Load(), lineno=90, col_offset=41)]), [Expr(Str('Parse a stream and return the syntax tree.', lineno=91, col_offset=8), lineno=91, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=92, col_offset=15), 'parse_stream_raw', Load(), lineno=92, col_offset=15), [Name('stream', Load(), lineno=92, col_offset=37), Name('debug', Load(), lineno=92, col_offset=45)], [], None, None, lineno=92, col_offset=15), lineno=92, col_offset=8)], [], lineno=90, col_offset=4), FunctionDef('parse_file', arguments([Name('self', Param(), lineno=94, col_offset=19), Name('filename', Param(), lineno=94, col_offset=25), Name('encoding', Param(), lineno=94, col_offset=35), Name('debug', Param(), lineno=94, col_offset=50)], None, None, [Name('None', Load(), lineno=94, col_offset=44), Name('False', Load(), lineno=94, col_offset=56)]), [Expr(Str('Parse a file and return the syntax tree.', lineno=95, col_offset=8), lineno=95, col_offset=8), Assign([Name('stream', Store(), lineno=96, col_offset=8)], Call(Attribute(Name('codecs', Load(), lineno=96, col_offset=17), 'open', Load(), lineno=96, col_offset=17), [Name('filename', Load(), lineno=96, col_offset=29), Str('r', lineno=96, col_offset=39), Name('encoding', Load(), lineno=96, col_offset=44)], [], None, None, lineno=96, col_offset=17), lineno=96, col_offset=8), TryFinally([Return(Call(Attribute(Name('self', Load(), lineno=98, col_offset=19), 'parse_stream', Load(), lineno=98, col_offset=19), [Name('stream', Load(), lineno=98, col_offset=37), Name('debug', Load(), lineno=98, col_offset=45)], [], None, None, lineno=98, col_offset=19), lineno=98, col_offset=12)], [Expr(Call(Attribute(Name('stream', Load(), lineno=100, col_offset=12), 'close', Load(), lineno=100, col_offset=12), [], [], None, None, lineno=100, col_offset=12), lineno=100, col_offset=12)], lineno=97, col_offset=8)], [], lineno=94, col_offset=4), FunctionDef('parse_string', arguments([Name('self', Param(), lineno=102, col_offset=21), Name('text', Param(), lineno=102, col_offset=27), Name('debug', Param(), lineno=102, col_offset=33)], None, None, [Name('False', Load(), lineno=102, col_offset=39)]), [Expr(Str('Parse a string and return the syntax tree.', lineno=103, col_offset=8), lineno=103, col_offset=8), Assign([Name('tokens', Store(), lineno=104, col_offset=8)], Call(Attribute(Name('tokenize', Load(), lineno=104, col_offset=17), 'generate_tokens', Load(), lineno=104, col_offset=17), [Attribute(Call(Name('generate_lines', Load(), lineno=104, col_offset=42), [Name('text', Load(), lineno=104, col_offset=57)], [], None, None, lineno=104, col_offset=42), 'next', Load(), lineno=104, col_offset=42)], [], None, None, lineno=104, col_offset=17), lineno=104, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=105, col_offset=15), 'parse_tokens', Load(), lineno=105, col_offset=15), [Name('tokens', Load(), lineno=105, col_offset=33), Name('debug', Load(), lineno=105, col_offset=41)], [], None, None, lineno=105, col_offset=15), lineno=105, col_offset=8)], [], lineno=102, col_offset=4)], [], lineno=28, col_offset=0), FunctionDef('generate_lines', arguments([Name('text', Param(), lineno=108, col_offset=19)], None, None, []), [Expr(Str('Generator that behaves like readline without using StringIO.', lineno=109, col_offset=4), lineno=109, col_offset=4), For(Name('line', Store(), lineno=110, col_offset=8), Call(Attribute(Name('text', Load(), lineno=110, col_offset=16), 'splitlines', Load(), lineno=110, col_offset=16), [Name('True', Load(), lineno=110, col_offset=32)], [], None, None, lineno=110, col_offset=16), [Expr(Yield(Name('line', Load(), lineno=111, col_offset=14), lineno=111, col_offset=8), lineno=111, col_offset=8)], [], lineno=110, col_offset=4), While(Name('True', Load(), lineno=112, col_offset=10), [Expr(Yield(Str('', lineno=113, col_offset=14), lineno=113, col_offset=8), lineno=113, col_offset=8)], [], lineno=112, col_offset=4)], [], lineno=108, col_offset=0), FunctionDef('load_grammar', arguments([Name('gt', Param(), lineno=116, col_offset=17), Name('gp', Param(), lineno=116, col_offset=35), Name('save', Param(), lineno=117, col_offset=17), Name('force', Param(), lineno=117, col_offset=28), Name('logger', Param(), lineno=117, col_offset=41)], None, None, [Str('Grammar.txt', lineno=116, col_offset=20), Name('None', Load(), lineno=116, col_offset=38), Name('True', Load(), lineno=117, col_offset=22), Name('False', Load(), lineno=117, col_offset=34), Name('None', Load(), lineno=117, col_offset=48)]), [Expr(Str('Load the grammar (maybe from a pickle).', lineno=118, col_offset=4), lineno=118, col_offset=4), If(Compare(Name('logger', Load(), lineno=119, col_offset=7), [Is()], [Name('None', Load(), lineno=119, col_offset=17)], lineno=119, col_offset=7), [Assign([Name('logger', Store(), lineno=120, col_offset=8)], Call(Attribute(Name('logging', Load(), lineno=120, col_offset=17), 'getLogger', Load(), lineno=120, col_offset=17), [], [], None, None, lineno=120, col_offset=17), lineno=120, col_offset=8)], [], lineno=119, col_offset=4), If(Compare(Name('gp', Load(), lineno=121, col_offset=7), [Is()], [Name('None', Load(), lineno=121, col_offset=13)], lineno=121, col_offset=7), [Assign([Tuple([Name('head', Store(), lineno=122, col_offset=8), Name('tail', Store(), lineno=122, col_offset=14)], Store(), lineno=122, col_offset=8)], Call(Attribute(Attribute(Name('os', Load(), lineno=122, col_offset=21), 'path', Load(), lineno=122, col_offset=21), 'splitext', Load(), lineno=122, col_offset=21), [Name('gt', Load(), lineno=122, col_offset=38)], [], None, None, lineno=122, col_offset=21), lineno=122, col_offset=8), If(Compare(Name('tail', Load(), lineno=123, col_offset=11), [Eq()], [Str('.txt', lineno=123, col_offset=19)], lineno=123, col_offset=11), [Assign([Name('tail', Store(), lineno=124, col_offset=12)], Str('', lineno=124, col_offset=19), lineno=124, col_offset=12)], [], lineno=123, col_offset=8), Assign([Name('gp', Store(), lineno=125, col_offset=8)], BinOp(BinOp(BinOp(Name('head', Load(), lineno=125, col_offset=13), Add(), Name('tail', Load(), lineno=125, col_offset=20), lineno=125, col_offset=13), Add(), Call(Attribute(Str('.', lineno=125, col_offset=27), 'join', Load(), lineno=125, col_offset=27), [Call(Name('map', Load(), lineno=125, col_offset=36), [Name('str', Load(), lineno=125, col_offset=40), Attribute(Name('sys', Load(), lineno=125, col_offset=45), 'version_info', Load(), lineno=125, col_offset=45)], [], None, None, lineno=125, col_offset=36)], [], None, None, lineno=125, col_offset=27), lineno=125, col_offset=25), Add(), Str('.pickle', lineno=125, col_offset=66), lineno=125, col_offset=64), lineno=125, col_offset=8)], [], lineno=121, col_offset=4), If(BoolOp(Or(), [Name('force', Load(), lineno=126, col_offset=7), UnaryOp(Not(), Call(Name('_newer', Load(), lineno=126, col_offset=20), [Name('gp', Load(), lineno=126, col_offset=27), Name('gt', Load(), lineno=126, col_offset=31)], [], None, None, lineno=126, col_offset=20), lineno=126, col_offset=16)], lineno=126, col_offset=7), [Expr(Call(Attribute(Name('logger', Load(), lineno=127, col_offset=8), 'info', Load(), lineno=127, col_offset=8), [Str('Generating grammar tables from %s', lineno=127, col_offset=20), Name('gt', Load(), lineno=127, col_offset=57)], [], None, None, lineno=127, col_offset=8), lineno=127, col_offset=8), Assign([Name('g', Store(), lineno=128, col_offset=8)], Call(Attribute(Name('pgen', Load(), lineno=128, col_offset=12), 'generate_grammar', Load(), lineno=128, col_offset=12), [Name('gt', Load(), lineno=128, col_offset=34)], [], None, None, lineno=128, col_offset=12), lineno=128, col_offset=8), If(Name('save', Load(), lineno=129, col_offset=11), [Expr(Call(Attribute(Name('logger', Load(), lineno=130, col_offset=12), 'info', Load(), lineno=130, col_offset=12), [Str('Writing grammar tables to %s', lineno=130, col_offset=24), Name('gp', Load(), lineno=130, col_offset=56)], [], None, None, lineno=130, col_offset=12), lineno=130, col_offset=12), TryExcept([Expr(Call(Attribute(Name('g', Load(), lineno=132, col_offset=16), 'dump', Load(), lineno=132, col_offset=16), [Name('gp', Load(), lineno=132, col_offset=23)], [], None, None, lineno=132, col_offset=16), lineno=132, col_offset=16)], [ExceptHandler(Name('IOError', Load(), lineno=133, col_offset=19), Name('e', Store(), lineno=133, col_offset=28), [Expr(Call(Attribute(Name('logger', Load(), lineno=134, col_offset=16), 'info', Load(), lineno=134, col_offset=16), [BinOp(Str('Writing failed:', lineno=134, col_offset=28), Add(), Call(Name('str', Load(), lineno=134, col_offset=46), [Name('e', Load(), lineno=134, col_offset=50)], [], None, None, lineno=134, col_offset=46), lineno=134, col_offset=28)], [], None, None, lineno=134, col_offset=16), lineno=134, col_offset=16)], lineno=133, col_offset=12)], [], lineno=131, col_offset=12)], [], lineno=129, col_offset=8)], [Assign([Name('g', Store(), lineno=136, col_offset=8)], Call(Attribute(Name('grammar', Load(), lineno=136, col_offset=12), 'Grammar', Load(), lineno=136, col_offset=12), [], [], None, None, lineno=136, col_offset=12), lineno=136, col_offset=8), Expr(Call(Attribute(Name('g', Load(), lineno=137, col_offset=8), 'load', Load(), lineno=137, col_offset=8), [Name('gp', Load(), lineno=137, col_offset=15)], [], None, None, lineno=137, col_offset=8), lineno=137, col_offset=8)], lineno=126, col_offset=4), Return(Name('g', Load(), lineno=138, col_offset=11), lineno=138, col_offset=4)], [], lineno=116, col_offset=0), FunctionDef('_newer', arguments([Name('a', Param(), lineno=141, col_offset=11), Name('b', Param(), lineno=141, col_offset=14)], None, None, []), [Expr(Str('Inquire whether file a was written since file b.', lineno=142, col_offset=4), lineno=142, col_offset=4), If(UnaryOp(Not(), Call(Attribute(Attribute(Name('os', Load(), lineno=143, col_offset=11), 'path', Load(), lineno=143, col_offset=11), 'exists', Load(), lineno=143, col_offset=11), [Name('a', Load(), lineno=143, col_offset=26)], [], None, None, lineno=143, col_offset=11), lineno=143, col_offset=7), [Return(Name('False', Load(), lineno=144, col_offset=15), lineno=144, col_offset=8)], [], lineno=143, col_offset=4), If(UnaryOp(Not(), Call(Attribute(Attribute(Name('os', Load(), lineno=145, col_offset=11), 'path', Load(), lineno=145, col_offset=11), 'exists', Load(), lineno=145, col_offset=11), [Name('b', Load(), lineno=145, col_offset=26)], [], None, None, lineno=145, col_offset=11), lineno=145, col_offset=7), [Return(Name('True', Load(), lineno=146, col_offset=15), lineno=146, col_offset=8)], [], lineno=145, col_offset=4), Return(Compare(Call(Attribute(Attribute(Name('os', Load(), lineno=147, col_offset=11), 'path', Load(), lineno=147, col_offset=11), 'getmtime', Load(), lineno=147, col_offset=11), [Name('a', Load(), lineno=147, col_offset=28)], [], None, None, lineno=147, col_offset=11), [GtE()], [Call(Attribute(Attribute(Name('os', Load(), lineno=147, col_offset=34), 'path', Load(), lineno=147, col_offset=34), 'getmtime', Load(), lineno=147, col_offset=34), [Name('b', Load(), lineno=147, col_offset=51)], [], None, None, lineno=147, col_offset=34)], lineno=147, col_offset=11), lineno=147, col_offset=4)], [], lineno=141, col_offset=0)])
