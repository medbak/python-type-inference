Module([Expr(Str('Codec for quoted-printable encoding.\n\nLike base64 and rot13, this returns Python strings, not Unicode.\n', lineno=4, col_offset=-1), lineno=4, col_offset=-1), Import([alias('codecs', None), alias('quopri', None)], lineno=6, col_offset=0), TryExcept([ImportFrom('cStringIO', [alias('StringIO', None)], 0, lineno=8, col_offset=4)], [ExceptHandler(Name('ImportError', Load(), lineno=9, col_offset=7), None, [ImportFrom('StringIO', [alias('StringIO', None)], 0, lineno=10, col_offset=4)], lineno=9, col_offset=0)], [], lineno=7, col_offset=0), FunctionDef('quopri_encode', arguments([Name('input', Param(), lineno=12, col_offset=18), Name('errors', Param(), lineno=12, col_offset=25)], None, None, [Str('strict', lineno=12, col_offset=32)]), [Expr(Str("Encode the input, returning a tuple (output object, length consumed).\n\n    errors defines the error handling to apply. It defaults to\n    'strict' handling which is the only currently supported\n    error handling for this codec.\n\n    ", lineno=19, col_offset=-1), lineno=19, col_offset=-1), Assert(Compare(Name('errors', Load(), lineno=20, col_offset=11), [Eq()], [Str('strict', lineno=20, col_offset=21)], lineno=20, col_offset=11), None, lineno=20, col_offset=4), Assign([Name('f', Store(), lineno=22, col_offset=4)], Call(Name('StringIO', Load(), lineno=22, col_offset=8), [Call(Name('str', Load(), lineno=22, col_offset=17), [Name('input', Load(), lineno=22, col_offset=21)], [], None, None, lineno=22, col_offset=17)], [], None, None, lineno=22, col_offset=8), lineno=22, col_offset=4), Assign([Name('g', Store(), lineno=23, col_offset=4)], Call(Name('StringIO', Load(), lineno=23, col_offset=8), [], [], None, None, lineno=23, col_offset=8), lineno=23, col_offset=4), Expr(Call(Attribute(Name('quopri', Load(), lineno=24, col_offset=4), 'encode', Load(), lineno=24, col_offset=4), [Name('f', Load(), lineno=24, col_offset=18), Name('g', Load(), lineno=24, col_offset=21), Num(1, lineno=24, col_offset=24)], [], None, None, lineno=24, col_offset=4), lineno=24, col_offset=4), Assign([Name('output', Store(), lineno=25, col_offset=4)], Call(Attribute(Name('g', Load(), lineno=25, col_offset=13), 'getvalue', Load(), lineno=25, col_offset=13), [], [], None, None, lineno=25, col_offset=13), lineno=25, col_offset=4), Return(Tuple([Name('output', Load(), lineno=26, col_offset=12), Call(Name('len', Load(), lineno=26, col_offset=20), [Name('input', Load(), lineno=26, col_offset=24)], [], None, None, lineno=26, col_offset=20)], Load(), lineno=26, col_offset=12), lineno=26, col_offset=4)], [], lineno=12, col_offset=0), FunctionDef('quopri_decode', arguments([Name('input', Param(), lineno=28, col_offset=18), Name('errors', Param(), lineno=28, col_offset=25)], None, None, [Str('strict', lineno=28, col_offset=32)]), [Expr(Str("Decode the input, returning a tuple (output object, length consumed).\n\n    errors defines the error handling to apply. It defaults to\n    'strict' handling which is the only currently supported\n    error handling for this codec.\n\n    ", lineno=35, col_offset=-1), lineno=35, col_offset=-1), Assert(Compare(Name('errors', Load(), lineno=36, col_offset=11), [Eq()], [Str('strict', lineno=36, col_offset=21)], lineno=36, col_offset=11), None, lineno=36, col_offset=4), Assign([Name('f', Store(), lineno=37, col_offset=4)], Call(Name('StringIO', Load(), lineno=37, col_offset=8), [Call(Name('str', Load(), lineno=37, col_offset=17), [Name('input', Load(), lineno=37, col_offset=21)], [], None, None, lineno=37, col_offset=17)], [], None, None, lineno=37, col_offset=8), lineno=37, col_offset=4), Assign([Name('g', Store(), lineno=38, col_offset=4)], Call(Name('StringIO', Load(), lineno=38, col_offset=8), [], [], None, None, lineno=38, col_offset=8), lineno=38, col_offset=4), Expr(Call(Attribute(Name('quopri', Load(), lineno=39, col_offset=4), 'decode', Load(), lineno=39, col_offset=4), [Name('f', Load(), lineno=39, col_offset=18), Name('g', Load(), lineno=39, col_offset=21)], [], None, None, lineno=39, col_offset=4), lineno=39, col_offset=4), Assign([Name('output', Store(), lineno=40, col_offset=4)], Call(Attribute(Name('g', Load(), lineno=40, col_offset=13), 'getvalue', Load(), lineno=40, col_offset=13), [], [], None, None, lineno=40, col_offset=13), lineno=40, col_offset=4), Return(Tuple([Name('output', Load(), lineno=41, col_offset=12), Call(Name('len', Load(), lineno=41, col_offset=20), [Name('input', Load(), lineno=41, col_offset=24)], [], None, None, lineno=41, col_offset=20)], Load(), lineno=41, col_offset=12), lineno=41, col_offset=4)], [], lineno=28, col_offset=0), ClassDef('Codec', [Attribute(Name('codecs', Load(), lineno=43, col_offset=12), 'Codec', Load(), lineno=43, col_offset=12)], [FunctionDef('encode', arguments([Name('self', Param(), lineno=45, col_offset=15), Name('input', Param(), lineno=45, col_offset=21), Name('errors', Param(), lineno=45, col_offset=27)], None, None, [Str('strict', lineno=45, col_offset=34)]), [Return(Call(Name('quopri_encode', Load(), lineno=46, col_offset=15), [Name('input', Load(), lineno=46, col_offset=29), Name('errors', Load(), lineno=46, col_offset=35)], [], None, None, lineno=46, col_offset=15), lineno=46, col_offset=8)], [], lineno=45, col_offset=4), FunctionDef('decode', arguments([Name('self', Param(), lineno=47, col_offset=15), Name('input', Param(), lineno=47, col_offset=21), Name('errors', Param(), lineno=47, col_offset=27)], None, None, [Str('strict', lineno=47, col_offset=34)]), [Return(Call(Name('quopri_decode', Load(), lineno=48, col_offset=15), [Name('input', Load(), lineno=48, col_offset=29), Name('errors', Load(), lineno=48, col_offset=35)], [], None, None, lineno=48, col_offset=15), lineno=48, col_offset=8)], [], lineno=47, col_offset=4)], [], lineno=43, col_offset=0), ClassDef('IncrementalEncoder', [Attribute(Name('codecs', Load(), lineno=50, col_offset=25), 'IncrementalEncoder', Load(), lineno=50, col_offset=25)], [FunctionDef('encode', arguments([Name('self', Param(), lineno=51, col_offset=15), Name('input', Param(), lineno=51, col_offset=21), Name('final', Param(), lineno=51, col_offset=28)], None, None, [Name('False', Load(), lineno=51, col_offset=34)]), [Return(Subscript(Call(Name('quopri_encode', Load(), lineno=52, col_offset=15), [Name('input', Load(), lineno=52, col_offset=29), Attribute(Name('self', Load(), lineno=52, col_offset=36), 'errors', Load(), lineno=52, col_offset=36)], [], None, None, lineno=52, col_offset=15), Index(Num(0, lineno=52, col_offset=49)), Load(), lineno=52, col_offset=15), lineno=52, col_offset=8)], [], lineno=51, col_offset=4)], [], lineno=50, col_offset=0), ClassDef('IncrementalDecoder', [Attribute(Name('codecs', Load(), lineno=54, col_offset=25), 'IncrementalDecoder', Load(), lineno=54, col_offset=25)], [FunctionDef('decode', arguments([Name('self', Param(), lineno=55, col_offset=15), Name('input', Param(), lineno=55, col_offset=21), Name('final', Param(), lineno=55, col_offset=28)], None, None, [Name('False', Load(), lineno=55, col_offset=34)]), [Return(Subscript(Call(Name('quopri_decode', Load(), lineno=56, col_offset=15), [Name('input', Load(), lineno=56, col_offset=29), Attribute(Name('self', Load(), lineno=56, col_offset=36), 'errors', Load(), lineno=56, col_offset=36)], [], None, None, lineno=56, col_offset=15), Index(Num(0, lineno=56, col_offset=49)), Load(), lineno=56, col_offset=15), lineno=56, col_offset=8)], [], lineno=55, col_offset=4)], [], lineno=54, col_offset=0), ClassDef('StreamWriter', [Name('Codec', Load(), lineno=58, col_offset=19), Attribute(Name('codecs', Load(), lineno=58, col_offset=26), 'StreamWriter', Load(), lineno=58, col_offset=26)], [Pass( lineno=59, col_offset=4)], [], lineno=58, col_offset=0), ClassDef('StreamReader', [Name('Codec', Load(), lineno=61, col_offset=19), Attribute(Name('codecs', Load(), lineno=61, col_offset=25), 'StreamReader', Load(), lineno=61, col_offset=25)], [Pass( lineno=62, col_offset=4)], [], lineno=61, col_offset=0), FunctionDef('getregentry', arguments([], None, None, []), [Return(Call(Attribute(Name('codecs', Load(), lineno=67, col_offset=11), 'CodecInfo', Load(), lineno=67, col_offset=11), [], [keyword('name', Str('quopri', lineno=68, col_offset=13)), keyword('encode', Name('quopri_encode', Load(), lineno=69, col_offset=15)), keyword('decode', Name('quopri_decode', Load(), lineno=70, col_offset=15)), keyword('incrementalencoder', Name('IncrementalEncoder', Load(), lineno=71, col_offset=27)), keyword('incrementaldecoder', Name('IncrementalDecoder', Load(), lineno=72, col_offset=27)), keyword('streamwriter', Name('StreamWriter', Load(), lineno=73, col_offset=21)), keyword('streamreader', Name('StreamReader', Load(), lineno=74, col_offset=21))], None, None, lineno=67, col_offset=11), lineno=67, col_offset=4)], [], lineno=66, col_offset=0)])
