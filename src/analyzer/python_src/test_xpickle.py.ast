Module([Import([alias('cPickle', None)], lineno=8, col_offset=0), Import([alias('os', None)], lineno=9, col_offset=0), Import([alias('os.path', None)], lineno=10, col_offset=0), Import([alias('pickle', None)], lineno=11, col_offset=0), Import([alias('subprocess', None)], lineno=12, col_offset=0), Import([alias('sys', None)], lineno=13, col_offset=0), Import([alias('types', None)], lineno=14, col_offset=0), Import([alias('unittest', None)], lineno=15, col_offset=0), ImportFrom('test', [alias('test_support', None)], 0, lineno=17, col_offset=0), Assign([Name('mod_path', Store(), lineno=25, col_offset=0)], Call(Attribute(Attribute(Name('os', Load(), lineno=25, col_offset=11), 'path', Load(), lineno=25, col_offset=11), 'abspath', Load(), lineno=25, col_offset=11), [Call(Attribute(Attribute(Name('os', Load(), lineno=25, col_offset=27), 'path', Load(), lineno=25, col_offset=27), 'join', Load(), lineno=25, col_offset=27), [Call(Attribute(Attribute(Name('os', Load(), lineno=25, col_offset=40), 'path', Load(), lineno=25, col_offset=40), 'dirname', Load(), lineno=25, col_offset=40), [Name('__file__', Load(), lineno=25, col_offset=56)], [], None, None, lineno=25, col_offset=40), Str('pickletester.py', lineno=26, col_offset=40)], [], None, None, lineno=25, col_offset=27)], [], None, None, lineno=25, col_offset=11), lineno=25, col_offset=0), Assign([Name('pickletester', Store(), lineno=27, col_offset=0)], Call(Attribute(Name('types', Load(), lineno=27, col_offset=15), 'ModuleType', Load(), lineno=27, col_offset=15), [Str('test.pickletester', lineno=27, col_offset=32)], [], None, None, lineno=27, col_offset=15), lineno=27, col_offset=0), Exec(Call(Name('compile', Load(), lineno=28, col_offset=5), [Call(Attribute(Call(Name('open', Load(), lineno=28, col_offset=13), [Name('mod_path', Load(), lineno=28, col_offset=18)], [], None, None, lineno=28, col_offset=13), 'read', Load(), lineno=28, col_offset=13), [], [], None, None, lineno=28, col_offset=13), Name('mod_path', Load(), lineno=28, col_offset=36), Str('exec', lineno=28, col_offset=46)], [], None, None, lineno=28, col_offset=5), Attribute(Name('pickletester', Load(), lineno=28, col_offset=57), '__dict__', Load(), lineno=28, col_offset=57), None, lineno=28, col_offset=0), Assign([Name('AbstractPickleTests', Store(), lineno=29, col_offset=0)], Attribute(Name('pickletester', Load(), lineno=29, col_offset=22), 'AbstractPickleTests', Load(), lineno=29, col_offset=22), lineno=29, col_offset=0), If(Compare(Attribute(Name('pickletester', Load(), lineno=30, col_offset=3), '__name__', Load(), lineno=30, col_offset=3), [In()], [Attribute(Name('sys', Load(), lineno=30, col_offset=28), 'modules', Load(), lineno=30, col_offset=28)], lineno=30, col_offset=3), [Raise(Call(Name('RuntimeError', Load(), lineno=31, col_offset=10), [Str('Did not expect to find test.pickletester loaded', lineno=31, col_offset=23)], [], None, None, lineno=31, col_offset=10), None, None, lineno=31, col_offset=4)], [], lineno=30, col_offset=0), Assign([Subscript(Attribute(Name('sys', Load(), lineno=32, col_offset=0), 'modules', Load(), lineno=32, col_offset=0), Index(Attribute(Name('pickletester', Load(), lineno=32, col_offset=12), '__name__', Load(), lineno=32, col_offset=12)), Store(), lineno=32, col_offset=0)], Name('pickletester', Load(), lineno=32, col_offset=37), lineno=32, col_offset=0), ClassDef('DumpCPickle_LoadPickle', [Name('AbstractPickleTests', Load(), lineno=35, col_offset=29)], [Assign([Name('error', Store(), lineno=37, col_offset=4)], Name('KeyError', Load(), lineno=37, col_offset=12), lineno=37, col_offset=4), FunctionDef('dumps', arguments([Name('self', Param(), lineno=39, col_offset=14), Name('arg', Param(), lineno=39, col_offset=20), Name('proto', Param(), lineno=39, col_offset=25), Name('fast', Param(), lineno=39, col_offset=34)], None, None, [Num(0, lineno=39, col_offset=31), Name('False', Load(), lineno=39, col_offset=39)]), [Return(Call(Attribute(Name('cPickle', Load(), lineno=41, col_offset=15), 'dumps', Load(), lineno=41, col_offset=15), [Name('arg', Load(), lineno=41, col_offset=29), Name('proto', Load(), lineno=41, col_offset=34)], [], None, None, lineno=41, col_offset=15), lineno=41, col_offset=8)], [], lineno=39, col_offset=4), FunctionDef('loads', arguments([Name('self', Param(), lineno=43, col_offset=14), Name('buf', Param(), lineno=43, col_offset=20)], None, None, []), [Return(Call(Attribute(Name('pickle', Load(), lineno=45, col_offset=15), 'loads', Load(), lineno=45, col_offset=15), [Name('buf', Load(), lineno=45, col_offset=28)], [], None, None, lineno=45, col_offset=15), lineno=45, col_offset=8)], [], lineno=43, col_offset=4)], [], lineno=35, col_offset=0), ClassDef('DumpPickle_LoadCPickle', [Name('AbstractPickleTests', Load(), lineno=47, col_offset=29)], [Assign([Name('error', Store(), lineno=49, col_offset=4)], Attribute(Name('cPickle', Load(), lineno=49, col_offset=12), 'BadPickleGet', Load(), lineno=49, col_offset=12), lineno=49, col_offset=4), FunctionDef('dumps', arguments([Name('self', Param(), lineno=51, col_offset=14), Name('arg', Param(), lineno=51, col_offset=20), Name('proto', Param(), lineno=51, col_offset=25), Name('fast', Param(), lineno=51, col_offset=34)], None, None, [Num(0, lineno=51, col_offset=31), Name('False', Load(), lineno=51, col_offset=39)]), [Return(Call(Attribute(Name('pickle', Load(), lineno=53, col_offset=15), 'dumps', Load(), lineno=53, col_offset=15), [Name('arg', Load(), lineno=53, col_offset=28), Name('proto', Load(), lineno=53, col_offset=33)], [], None, None, lineno=53, col_offset=15), lineno=53, col_offset=8)], [], lineno=51, col_offset=4), FunctionDef('loads', arguments([Name('self', Param(), lineno=55, col_offset=14), Name('buf', Param(), lineno=55, col_offset=20)], None, None, []), [Return(Call(Attribute(Name('cPickle', Load(), lineno=57, col_offset=15), 'loads', Load(), lineno=57, col_offset=15), [Name('buf', Load(), lineno=57, col_offset=29)], [], None, None, lineno=57, col_offset=15), lineno=57, col_offset=8)], [], lineno=55, col_offset=4)], [], lineno=47, col_offset=0), FunctionDef('have_python_version', arguments([Name('name', Param(), lineno=59, col_offset=24)], None, None, []), [Expr(Str('Check whether the given name is a valid Python binary and has\n    test.test_support.\n\n    This respects your PATH.\n\n    Args:\n        name: short string name of a Python binary such as "python2.4".\n\n    Returns:\n        True if the name is valid, False otherwise.\n    ', lineno=70, col_offset=-1), lineno=70, col_offset=-1), Return(Compare(Call(Attribute(Name('os', Load(), lineno=71, col_offset=11), 'system', Load(), lineno=71, col_offset=11), [BinOp(Name('name', Load(), lineno=71, col_offset=21), Add(), Str(" -c 'import test.test_support'", lineno=71, col_offset=28), lineno=71, col_offset=21)], [], None, None, lineno=71, col_offset=11), [Eq()], [Num(0, lineno=71, col_offset=65)], lineno=71, col_offset=11), lineno=71, col_offset=4)], [], lineno=59, col_offset=0), ClassDef('AbstractCompatTests', [Name('AbstractPickleTests', Load(), lineno=74, col_offset=26)], [Assign([Name('module', Store(), lineno=76, col_offset=4)], Name('None', Load(), lineno=76, col_offset=13), lineno=76, col_offset=4), Assign([Name('python', Store(), lineno=77, col_offset=4)], Name('None', Load(), lineno=77, col_offset=13), lineno=77, col_offset=4), Assign([Name('error', Store(), lineno=78, col_offset=4)], Name('None', Load(), lineno=78, col_offset=12), lineno=78, col_offset=4), FunctionDef('setUp', arguments([Name('self', Param(), lineno=80, col_offset=14)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=81, col_offset=8), 'assertTrue', Load(), lineno=81, col_offset=8), [Attribute(Name('self', Load(), lineno=81, col_offset=24), 'python', Load(), lineno=81, col_offset=24)], [], None, None, lineno=81, col_offset=8), lineno=81, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=82, col_offset=8), 'assertTrue', Load(), lineno=82, col_offset=8), [Attribute(Name('self', Load(), lineno=82, col_offset=24), 'module', Load(), lineno=82, col_offset=24)], [], None, None, lineno=82, col_offset=8), lineno=82, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=83, col_offset=8), 'assertTrue', Load(), lineno=83, col_offset=8), [Attribute(Name('self', Load(), lineno=83, col_offset=24), 'error', Load(), lineno=83, col_offset=24)], [], None, None, lineno=83, col_offset=8), lineno=83, col_offset=8)], [], lineno=80, col_offset=4), FunctionDef('send_to_worker', arguments([Name('self', Param(), lineno=85, col_offset=23), Name('python', Param(), lineno=85, col_offset=29), Name('obj', Param(), lineno=85, col_offset=37), Name('proto', Param(), lineno=85, col_offset=42)], None, None, []), [Expr(Str('Bounce a pickled object through another version of Python.\n\n        This will pickle the object, send it to a child process where it will be\n        unpickled, then repickled and sent back to the parent process.\n\n        Args:\n            python: the name of the Python binary to start.\n            obj: object to pickle.\n            proto: pickle protocol number to use.\n\n        Returns:\n            The pickled data received from the child process.\n        ', lineno=98, col_offset=-1), lineno=98, col_offset=-1), Assign([Name('target', Store(), lineno=100, col_offset=8)], Name('__file__', Load(), lineno=100, col_offset=17), lineno=100, col_offset=8), If(Compare(Subscript(Name('target', Load(), lineno=101, col_offset=11), Index(Num(-1, lineno=101, col_offset=19)), Load(), lineno=101, col_offset=11), [In()], [Tuple([Str('c', lineno=101, col_offset=26), Str('o', lineno=101, col_offset=31)], Load(), lineno=101, col_offset=26)], lineno=101, col_offset=11), [Assign([Name('target', Store(), lineno=102, col_offset=12)], Subscript(Name('target', Load(), lineno=102, col_offset=21), Slice(None, Num(-1, lineno=102, col_offset=30), None), Load(), lineno=102, col_offset=21), lineno=102, col_offset=12)], [], lineno=101, col_offset=8), Assign([Name('data', Store(), lineno=104, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=104, col_offset=15), 'module', Load(), lineno=104, col_offset=15), 'dumps', Load(), lineno=104, col_offset=15), [Tuple([Name('proto', Load(), lineno=104, col_offset=34), Name('obj', Load(), lineno=104, col_offset=41)], Load(), lineno=104, col_offset=34), Name('proto', Load(), lineno=104, col_offset=47)], [], None, None, lineno=104, col_offset=15), lineno=104, col_offset=8), Assign([Name('worker', Store(), lineno=105, col_offset=8)], Call(Attribute(Name('subprocess', Load(), lineno=105, col_offset=17), 'Popen', Load(), lineno=105, col_offset=17), [List([Name('python', Load(), lineno=105, col_offset=35), Name('target', Load(), lineno=105, col_offset=43), Str('worker', lineno=105, col_offset=51)], Load(), lineno=105, col_offset=34)], [keyword('stdin', Attribute(Name('subprocess', Load(), lineno=106, col_offset=40), 'PIPE', Load(), lineno=106, col_offset=40)), keyword('stdout', Attribute(Name('subprocess', Load(), lineno=107, col_offset=41), 'PIPE', Load(), lineno=107, col_offset=41)), keyword('stderr', Attribute(Name('subprocess', Load(), lineno=108, col_offset=41), 'PIPE', Load(), lineno=108, col_offset=41))], None, None, lineno=105, col_offset=17), lineno=105, col_offset=8), Assign([Tuple([Name('stdout', Store(), lineno=109, col_offset=8), Name('stderr', Store(), lineno=109, col_offset=16)], Store(), lineno=109, col_offset=8)], Call(Attribute(Name('worker', Load(), lineno=109, col_offset=25), 'communicate', Load(), lineno=109, col_offset=25), [Name('data', Load(), lineno=109, col_offset=44)], [], None, None, lineno=109, col_offset=25), lineno=109, col_offset=8), If(Compare(Attribute(Name('worker', Load(), lineno=110, col_offset=11), 'returncode', Load(), lineno=110, col_offset=11), [NotEq()], [Num(0, lineno=110, col_offset=32)], lineno=110, col_offset=11), [Raise(Call(Name('RuntimeError', Load(), lineno=111, col_offset=18), [Name('stderr', Load(), lineno=111, col_offset=31)], [], None, None, lineno=111, col_offset=18), None, None, lineno=111, col_offset=12)], [], lineno=110, col_offset=8), Return(Name('stdout', Load(), lineno=112, col_offset=15), lineno=112, col_offset=8)], [], lineno=85, col_offset=4), FunctionDef('dumps', arguments([Name('self', Param(), lineno=114, col_offset=14), Name('arg', Param(), lineno=114, col_offset=20), Name('proto', Param(), lineno=114, col_offset=25), Name('fast', Param(), lineno=114, col_offset=34)], None, None, [Num(0, lineno=114, col_offset=31), Name('False', Load(), lineno=114, col_offset=39)]), [Return(Call(Attribute(Name('self', Load(), lineno=115, col_offset=15), 'send_to_worker', Load(), lineno=115, col_offset=15), [Attribute(Name('self', Load(), lineno=115, col_offset=35), 'python', Load(), lineno=115, col_offset=35), Name('arg', Load(), lineno=115, col_offset=48), Name('proto', Load(), lineno=115, col_offset=53)], [], None, None, lineno=115, col_offset=15), lineno=115, col_offset=8)], [], lineno=114, col_offset=4), FunctionDef('loads', arguments([Name('self', Param(), lineno=117, col_offset=14), Name('input', Param(), lineno=117, col_offset=20)], None, None, []), [Return(Call(Attribute(Attribute(Name('self', Load(), lineno=118, col_offset=15), 'module', Load(), lineno=118, col_offset=15), 'loads', Load(), lineno=118, col_offset=15), [Name('input', Load(), lineno=118, col_offset=33)], [], None, None, lineno=118, col_offset=15), lineno=118, col_offset=8)], [], lineno=117, col_offset=4), FunctionDef('test_global_ext1', arguments([Name('self', Param(), lineno=122, col_offset=25)], None, None, []), [Pass( lineno=123, col_offset=8)], [], lineno=122, col_offset=4), FunctionDef('test_global_ext2', arguments([Name('self', Param(), lineno=125, col_offset=25)], None, None, []), [Pass( lineno=126, col_offset=8)], [], lineno=125, col_offset=4), FunctionDef('test_global_ext4', arguments([Name('self', Param(), lineno=128, col_offset=25)], None, None, []), [Pass( lineno=129, col_offset=8)], [], lineno=128, col_offset=4), FunctionDef('test_float', arguments([Name('self', Param(), lineno=134, col_offset=19)], None, None, []), [Assign([Name('for_bin_protos', Store(), lineno=135, col_offset=8)], List([Num(5e-324, lineno=135, col_offset=26), Num(1e-310, lineno=135, col_offset=37)], Load(), lineno=135, col_offset=25), lineno=135, col_offset=8), Assign([Name('neg_for_bin_protos', Store(), lineno=136, col_offset=8)], ListComp(UnaryOp(USub(), Name('x', Load(), lineno=136, col_offset=31), lineno=136, col_offset=30), [comprehension(Name('x', Store(), lineno=136, col_offset=37), Name('for_bin_protos', Load(), lineno=136, col_offset=42), [])], lineno=136, col_offset=30), lineno=136, col_offset=8), Assign([Name('test_values', Store(), lineno=137, col_offset=8)], List([Num(0.0, lineno=137, col_offset=23), Num(7e-308, lineno=137, col_offset=28), Num(6.626e-34, lineno=137, col_offset=36), Num(0.1, lineno=137, col_offset=47), Num(0.5, lineno=137, col_offset=52), Num(3.14, lineno=138, col_offset=23), Num(263.44582062374053, lineno=138, col_offset=29), Num(6.022e+23, lineno=138, col_offset=49), Num(1e+30, lineno=138, col_offset=59)], Load(), lineno=137, col_offset=22), lineno=137, col_offset=8), Assign([Name('test_proto0_values', Store(), lineno=139, col_offset=8)], BinOp(Name('test_values', Load(), lineno=139, col_offset=29), Add(), ListComp(UnaryOp(USub(), Name('x', Load(), lineno=139, col_offset=45), lineno=139, col_offset=44), [comprehension(Name('x', Store(), lineno=139, col_offset=51), Name('test_values', Load(), lineno=139, col_offset=56), [])], lineno=139, col_offset=44), lineno=139, col_offset=29), lineno=139, col_offset=8), Assign([Name('test_values', Store(), lineno=140, col_offset=8)], BinOp(BinOp(Name('test_proto0_values', Load(), lineno=140, col_offset=22), Add(), Name('for_bin_protos', Load(), lineno=140, col_offset=43), lineno=140, col_offset=22), Add(), Name('neg_for_bin_protos', Load(), lineno=140, col_offset=60), lineno=140, col_offset=58), lineno=140, col_offset=8), For(Name('value', Store(), lineno=142, col_offset=12), Name('test_proto0_values', Load(), lineno=142, col_offset=21), [Assign([Name('pickle', Store(), lineno=143, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=143, col_offset=21), 'dumps', Load(), lineno=143, col_offset=21), [Name('value', Load(), lineno=143, col_offset=32), Num(0, lineno=143, col_offset=39)], [], None, None, lineno=143, col_offset=21), lineno=143, col_offset=12), Assign([Name('got', Store(), lineno=144, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=144, col_offset=18), 'loads', Load(), lineno=144, col_offset=18), [Name('pickle', Load(), lineno=144, col_offset=29)], [], None, None, lineno=144, col_offset=18), lineno=144, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=145, col_offset=12), 'assertEqual', Load(), lineno=145, col_offset=12), [Name('value', Load(), lineno=145, col_offset=29), Name('got', Load(), lineno=145, col_offset=36)], [], None, None, lineno=145, col_offset=12), lineno=145, col_offset=12)], [], lineno=142, col_offset=8), For(Name('proto', Store(), lineno=147, col_offset=12), Subscript(Attribute(Name('pickletester', Load(), lineno=147, col_offset=21), 'protocols', Load(), lineno=147, col_offset=21), Slice(Num(1, lineno=147, col_offset=44), None, None), Load(), lineno=147, col_offset=21), [For(Name('value', Store(), lineno=148, col_offset=16), Name('test_values', Load(), lineno=148, col_offset=25), [Assign([Name('pickle', Store(), lineno=149, col_offset=16)], Call(Attribute(Name('self', Load(), lineno=149, col_offset=25), 'dumps', Load(), lineno=149, col_offset=25), [Name('value', Load(), lineno=149, col_offset=36), Name('proto', Load(), lineno=149, col_offset=43)], [], None, None, lineno=149, col_offset=25), lineno=149, col_offset=16), Assign([Name('got', Store(), lineno=150, col_offset=16)], Call(Attribute(Name('self', Load(), lineno=150, col_offset=22), 'loads', Load(), lineno=150, col_offset=22), [Name('pickle', Load(), lineno=150, col_offset=33)], [], None, None, lineno=150, col_offset=22), lineno=150, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=151, col_offset=16), 'assertEqual', Load(), lineno=151, col_offset=16), [Name('value', Load(), lineno=151, col_offset=33), Name('got', Load(), lineno=151, col_offset=40)], [], None, None, lineno=151, col_offset=16), lineno=151, col_offset=16)], [], lineno=148, col_offset=12)], [], lineno=147, col_offset=8)], [], lineno=134, col_offset=4), FunctionDef('test_unicode_high_plane', arguments([Name('self', Param(), lineno=154, col_offset=32)], None, None, []), [Pass( lineno=155, col_offset=8)], [], lineno=154, col_offset=4), If(Attribute(Name('test_support', Load(), lineno=157, col_offset=7), 'have_unicode', Load(), lineno=157, col_offset=7), [FunctionDef('test_unicode', arguments([Name('self', Param(), lineno=160, col_offset=25)], None, None, []), [Assign([Name('endcases', Store(), lineno=161, col_offset=12)], List([Str(u'', lineno=161, col_offset=24), Str(u'<\\u>', lineno=161, col_offset=29), Str(u'<\\\u1234>', lineno=161, col_offset=39), Str(u'<\n>', lineno=161, col_offset=54), Str(u'<\\>', lineno=161, col_offset=63)], Load(), lineno=161, col_offset=23), lineno=161, col_offset=12), For(Name('proto', Store(), lineno=162, col_offset=16), Attribute(Name('pickletester', Load(), lineno=162, col_offset=25), 'protocols', Load(), lineno=162, col_offset=25), [For(Name('u', Store(), lineno=163, col_offset=20), Name('endcases', Load(), lineno=163, col_offset=25), [Assign([Name('p', Store(), lineno=164, col_offset=20)], Call(Attribute(Name('self', Load(), lineno=164, col_offset=24), 'dumps', Load(), lineno=164, col_offset=24), [Name('u', Load(), lineno=164, col_offset=35), Name('proto', Load(), lineno=164, col_offset=38)], [], None, None, lineno=164, col_offset=24), lineno=164, col_offset=20), Assign([Name('u2', Store(), lineno=165, col_offset=20)], Call(Attribute(Name('self', Load(), lineno=165, col_offset=25), 'loads', Load(), lineno=165, col_offset=25), [Name('p', Load(), lineno=165, col_offset=36)], [], None, None, lineno=165, col_offset=25), lineno=165, col_offset=20), Expr(Call(Attribute(Name('self', Load(), lineno=166, col_offset=20), 'assertEqual', Load(), lineno=166, col_offset=20), [Name('u2', Load(), lineno=166, col_offset=37), Name('u', Load(), lineno=166, col_offset=41)], [], None, None, lineno=166, col_offset=20), lineno=166, col_offset=20)], [], lineno=163, col_offset=16)], [], lineno=162, col_offset=12)], [], lineno=160, col_offset=8)], [], lineno=157, col_offset=4)], [], lineno=74, col_offset=0), FunctionDef('run_compat_test', arguments([Name('python_name', Param(), lineno=169, col_offset=20)], None, None, []), [Return(BoolOp(And(), [Call(Attribute(Name('test_support', Load(), lineno=170, col_offset=12), 'is_resource_enabled', Load(), lineno=170, col_offset=12), [Str('xpickle', lineno=170, col_offset=45)], [], None, None, lineno=170, col_offset=12), Call(Name('have_python_version', Load(), lineno=171, col_offset=12), [Name('python_name', Load(), lineno=171, col_offset=32)], [], None, None, lineno=171, col_offset=12)], lineno=170, col_offset=12), lineno=170, col_offset=4)], [], lineno=169, col_offset=0), If(UnaryOp(Not(), Call(Name('run_compat_test', Load(), lineno=175, col_offset=7), [Str('python2.4', lineno=175, col_offset=23)], [], None, None, lineno=175, col_offset=7), lineno=175, col_offset=3), [ClassDef('CPicklePython24Compat', [Attribute(Name('unittest', Load(), lineno=176, col_offset=32), 'TestCase', Load(), lineno=176, col_offset=32)], [Pass( lineno=177, col_offset=8)], [], lineno=176, col_offset=4)], [ClassDef('CPicklePython24Compat', [Name('AbstractCompatTests', Load(), lineno=179, col_offset=32)], [Assign([Name('module', Store(), lineno=181, col_offset=8)], Name('cPickle', Load(), lineno=181, col_offset=17), lineno=181, col_offset=8), Assign([Name('python', Store(), lineno=182, col_offset=8)], Str('python2.4', lineno=182, col_offset=17), lineno=182, col_offset=8), Assign([Name('error', Store(), lineno=183, col_offset=8)], Attribute(Name('cPickle', Load(), lineno=183, col_offset=16), 'BadPickleGet', Load(), lineno=183, col_offset=16), lineno=183, col_offset=8), FunctionDef('test_reduce_calls_base', arguments([Name('self', Param(), lineno=187, col_offset=35)], None, None, []), [Pass( lineno=188, col_offset=12)], [], lineno=187, col_offset=8), FunctionDef('test_reduce_ex_calls_base', arguments([Name('self', Param(), lineno=190, col_offset=38)], None, None, []), [Pass( lineno=191, col_offset=12)], [], lineno=190, col_offset=8)], [], lineno=179, col_offset=4)], lineno=175, col_offset=0), ClassDef('PicklePython24Compat', [Name('CPicklePython24Compat', Load(), lineno=193, col_offset=27)], [Assign([Name('module', Store(), lineno=195, col_offset=4)], Name('pickle', Load(), lineno=195, col_offset=13), lineno=195, col_offset=4), Assign([Name('error', Store(), lineno=196, col_offset=4)], Name('KeyError', Load(), lineno=196, col_offset=12), lineno=196, col_offset=4)], [], lineno=193, col_offset=0), If(UnaryOp(Not(), Call(Name('run_compat_test', Load(), lineno=200, col_offset=7), [Str('python2.5', lineno=200, col_offset=23)], [], None, None, lineno=200, col_offset=7), lineno=200, col_offset=3), [ClassDef('CPicklePython25Compat', [Attribute(Name('unittest', Load(), lineno=201, col_offset=32), 'TestCase', Load(), lineno=201, col_offset=32)], [Pass( lineno=202, col_offset=8)], [], lineno=201, col_offset=4)], [ClassDef('CPicklePython25Compat', [Name('AbstractCompatTests', Load(), lineno=204, col_offset=32)], [Assign([Name('module', Store(), lineno=206, col_offset=8)], Name('cPickle', Load(), lineno=206, col_offset=17), lineno=206, col_offset=8), Assign([Name('python', Store(), lineno=207, col_offset=8)], Str('python2.5', lineno=207, col_offset=17), lineno=207, col_offset=8), Assign([Name('error', Store(), lineno=208, col_offset=8)], Attribute(Name('cPickle', Load(), lineno=208, col_offset=16), 'BadPickleGet', Load(), lineno=208, col_offset=16), lineno=208, col_offset=8)], [], lineno=204, col_offset=4)], lineno=200, col_offset=0), ClassDef('PicklePython25Compat', [Name('CPicklePython25Compat', Load(), lineno=210, col_offset=27)], [Assign([Name('module', Store(), lineno=212, col_offset=4)], Name('pickle', Load(), lineno=212, col_offset=13), lineno=212, col_offset=4), Assign([Name('error', Store(), lineno=213, col_offset=4)], Name('KeyError', Load(), lineno=213, col_offset=12), lineno=213, col_offset=4)], [], lineno=210, col_offset=0), If(UnaryOp(Not(), Call(Name('run_compat_test', Load(), lineno=217, col_offset=7), [Str('python2.6', lineno=217, col_offset=23)], [], None, None, lineno=217, col_offset=7), lineno=217, col_offset=3), [ClassDef('CPicklePython26Compat', [Attribute(Name('unittest', Load(), lineno=218, col_offset=32), 'TestCase', Load(), lineno=218, col_offset=32)], [Pass( lineno=219, col_offset=8)], [], lineno=218, col_offset=4)], [ClassDef('CPicklePython26Compat', [Name('AbstractCompatTests', Load(), lineno=221, col_offset=32)], [Assign([Name('module', Store(), lineno=223, col_offset=8)], Name('cPickle', Load(), lineno=223, col_offset=17), lineno=223, col_offset=8), Assign([Name('python', Store(), lineno=224, col_offset=8)], Str('python2.6', lineno=224, col_offset=17), lineno=224, col_offset=8), Assign([Name('error', Store(), lineno=225, col_offset=8)], Attribute(Name('cPickle', Load(), lineno=225, col_offset=16), 'BadPickleGet', Load(), lineno=225, col_offset=16), lineno=225, col_offset=8)], [], lineno=221, col_offset=4)], lineno=217, col_offset=0), ClassDef('PicklePython26Compat', [Name('CPicklePython26Compat', Load(), lineno=227, col_offset=27)], [Assign([Name('module', Store(), lineno=229, col_offset=4)], Name('pickle', Load(), lineno=229, col_offset=13), lineno=229, col_offset=4), Assign([Name('error', Store(), lineno=230, col_offset=4)], Name('KeyError', Load(), lineno=230, col_offset=12), lineno=230, col_offset=4)], [], lineno=227, col_offset=0), FunctionDef('worker_main', arguments([Name('in_stream', Param(), lineno=233, col_offset=16), Name('out_stream', Param(), lineno=233, col_offset=27)], None, None, []), [Assign([Name('message', Store(), lineno=234, col_offset=4)], Call(Attribute(Name('cPickle', Load(), lineno=234, col_offset=14), 'load', Load(), lineno=234, col_offset=14), [Name('in_stream', Load(), lineno=234, col_offset=27)], [], None, None, lineno=234, col_offset=14), lineno=234, col_offset=4), Assign([Tuple([Name('protocol', Store(), lineno=235, col_offset=4), Name('obj', Store(), lineno=235, col_offset=14)], Store(), lineno=235, col_offset=4)], Name('message', Load(), lineno=235, col_offset=20), lineno=235, col_offset=4), Expr(Call(Attribute(Name('cPickle', Load(), lineno=236, col_offset=4), 'dump', Load(), lineno=236, col_offset=4), [Name('obj', Load(), lineno=236, col_offset=17), Name('out_stream', Load(), lineno=236, col_offset=22), Name('protocol', Load(), lineno=236, col_offset=34)], [], None, None, lineno=236, col_offset=4), lineno=236, col_offset=4)], [], lineno=233, col_offset=0), FunctionDef('test_main', arguments([], None, None, []), [If(UnaryOp(Not(), Call(Attribute(Name('test_support', Load(), lineno=240, col_offset=11), 'is_resource_enabled', Load(), lineno=240, col_offset=11), [Str('xpickle', lineno=240, col_offset=44)], [], None, None, lineno=240, col_offset=11), lineno=240, col_offset=7), [Print(Attribute(Name('sys', Load(), lineno=241, col_offset=16), 'stderr', Load(), lineno=241, col_offset=16), [Str('test_xpickle -- skipping backwards compat tests.', lineno=241, col_offset=28)], True, lineno=241, col_offset=8), Print(Attribute(Name('sys', Load(), lineno=242, col_offset=16), 'stderr', Load(), lineno=242, col_offset=16), [Str("Use 'regrtest.py -u xpickle' to run them.", lineno=242, col_offset=28)], True, lineno=242, col_offset=8), Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=243, col_offset=8), 'stderr', Load(), lineno=243, col_offset=8), 'flush', Load(), lineno=243, col_offset=8), [], [], None, None, lineno=243, col_offset=8), lineno=243, col_offset=8)], [], lineno=240, col_offset=4), Expr(Call(Attribute(Name('test_support', Load(), lineno=245, col_offset=4), 'run_unittest', Load(), lineno=245, col_offset=4), [Name('DumpCPickle_LoadPickle', Load(), lineno=246, col_offset=8), Name('DumpPickle_LoadCPickle', Load(), lineno=247, col_offset=8), Name('CPicklePython24Compat', Load(), lineno=248, col_offset=8), Name('CPicklePython25Compat', Load(), lineno=249, col_offset=8), Name('CPicklePython26Compat', Load(), lineno=250, col_offset=8), Name('PicklePython24Compat', Load(), lineno=251, col_offset=8), Name('PicklePython25Compat', Load(), lineno=252, col_offset=8), Name('PicklePython26Compat', Load(), lineno=253, col_offset=8)], [], None, None, lineno=245, col_offset=4), lineno=245, col_offset=4)], [], lineno=239, col_offset=0), If(Compare(Name('__name__', Load(), lineno=256, col_offset=3), [Eq()], [Str('__main__', lineno=256, col_offset=15)], lineno=256, col_offset=3), [If(Compare(Str('worker', lineno=257, col_offset=7), [In()], [Attribute(Name('sys', Load(), lineno=257, col_offset=19), 'argv', Load(), lineno=257, col_offset=19)], lineno=257, col_offset=7), [Expr(Call(Name('worker_main', Load(), lineno=258, col_offset=8), [Attribute(Name('sys', Load(), lineno=258, col_offset=20), 'stdin', Load(), lineno=258, col_offset=20), Attribute(Name('sys', Load(), lineno=258, col_offset=31), 'stdout', Load(), lineno=258, col_offset=31)], [], None, None, lineno=258, col_offset=8), lineno=258, col_offset=8)], [Expr(Call(Name('test_main', Load(), lineno=260, col_offset=8), [], [], None, None, lineno=260, col_offset=8), lineno=260, col_offset=8)], lineno=257, col_offset=4)], [], lineno=256, col_offset=0)])
