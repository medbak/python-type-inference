Module([Expr(Str('\nUse this module to get and run all tk tests.\n\nTkinter tests should live in a package inside the directory where this file\nlives, like test_tkinter.\nExtensions also should live in packages following the same rule as above.\n', lineno=7, col_offset=-1), lineno=7, col_offset=-1), Import([alias('os', None)], lineno=9, col_offset=0), Import([alias('sys', None)], lineno=10, col_offset=0), Import([alias('unittest', None)], lineno=11, col_offset=0), Import([alias('importlib', None)], lineno=12, col_offset=0), Import([alias('test.test_support', None)], lineno=13, col_offset=0), Assign([Name('this_dir_path', Store(), lineno=15, col_offset=0)], Call(Attribute(Attribute(Name('os', Load(), lineno=15, col_offset=16), 'path', Load(), lineno=15, col_offset=16), 'abspath', Load(), lineno=15, col_offset=16), [Call(Attribute(Attribute(Name('os', Load(), lineno=15, col_offset=32), 'path', Load(), lineno=15, col_offset=32), 'dirname', Load(), lineno=15, col_offset=32), [Name('__file__', Load(), lineno=15, col_offset=48)], [], None, None, lineno=15, col_offset=32)], [], None, None, lineno=15, col_offset=16), lineno=15, col_offset=0), FunctionDef('is_package', arguments([Name('path', Param(), lineno=17, col_offset=15)], None, None, []), [For(Name('name', Store(), lineno=18, col_offset=8), Call(Attribute(Name('os', Load(), lineno=18, col_offset=16), 'listdir', Load(), lineno=18, col_offset=16), [Name('path', Load(), lineno=18, col_offset=27)], [], None, None, lineno=18, col_offset=16), [If(Compare(Name('name', Load(), lineno=19, col_offset=11), [In()], [Tuple([Str('__init__.py', lineno=19, col_offset=20), Str('__init__.pyc', lineno=19, col_offset=35), Str('__init.pyo', lineno=19, col_offset=51)], Load(), lineno=19, col_offset=20)], lineno=19, col_offset=11), [Return(Name('True', Load(), lineno=20, col_offset=19), lineno=20, col_offset=12)], [], lineno=19, col_offset=8)], [], lineno=18, col_offset=4), Return(Name('False', Load(), lineno=21, col_offset=11), lineno=21, col_offset=4)], [], lineno=17, col_offset=0), FunctionDef('get_tests_modules', arguments([Name('basepath', Param(), lineno=23, col_offset=22), Name('gui', Param(), lineno=23, col_offset=46), Name('packages', Param(), lineno=23, col_offset=56)], None, None, [Name('this_dir_path', Load(), lineno=23, col_offset=31), Name('True', Load(), lineno=23, col_offset=50), Name('None', Load(), lineno=23, col_offset=65)]), [Expr(Str('This will import and yield modules whose names start with test_\n    and are inside packages found in the path starting at basepath.\n\n    If packages is specified it should contain package names that want\n    their tests colleted.\n    ', lineno=29, col_offset=-1), lineno=29, col_offset=-1), Assign([Name('py_ext', Store(), lineno=30, col_offset=4)], Str('.py', lineno=30, col_offset=13), lineno=30, col_offset=4), For(Tuple([Name('dirpath', Store(), lineno=32, col_offset=8), Name('dirnames', Store(), lineno=32, col_offset=17), Name('filenames', Store(), lineno=32, col_offset=27)], Store(), lineno=32, col_offset=8), Call(Attribute(Name('os', Load(), lineno=32, col_offset=40), 'walk', Load(), lineno=32, col_offset=40), [Name('basepath', Load(), lineno=32, col_offset=48)], [], None, None, lineno=32, col_offset=40), [For(Name('dirname', Store(), lineno=33, col_offset=12), Call(Name('list', Load(), lineno=33, col_offset=23), [Name('dirnames', Load(), lineno=33, col_offset=28)], [], None, None, lineno=33, col_offset=23), [If(Compare(Subscript(Name('dirname', Load(), lineno=34, col_offset=15), Index(Num(0, lineno=34, col_offset=23)), Load(), lineno=34, col_offset=15), [Eq()], [Str('.', lineno=34, col_offset=29)], lineno=34, col_offset=15), [Expr(Call(Attribute(Name('dirnames', Load(), lineno=35, col_offset=16), 'remove', Load(), lineno=35, col_offset=16), [Name('dirname', Load(), lineno=35, col_offset=32)], [], None, None, lineno=35, col_offset=16), lineno=35, col_offset=16)], [], lineno=34, col_offset=12)], [], lineno=33, col_offset=8), If(BoolOp(And(), [Call(Name('is_package', Load(), lineno=37, col_offset=11), [Name('dirpath', Load(), lineno=37, col_offset=22)], [], None, None, lineno=37, col_offset=11), Name('filenames', Load(), lineno=37, col_offset=35)], lineno=37, col_offset=11), [Assign([Name('pkg_name', Store(), lineno=38, col_offset=12)], Call(Attribute(Subscript(Name('dirpath', Load(), lineno=38, col_offset=23), Slice(BinOp(Call(Name('len', Load(), lineno=38, col_offset=31), [Name('basepath', Load(), lineno=38, col_offset=35)], [], None, None, lineno=38, col_offset=31), Add(), Call(Name('len', Load(), lineno=38, col_offset=47), [Attribute(Name('os', Load(), lineno=38, col_offset=51), 'sep', Load(), lineno=38, col_offset=51)], [], None, None, lineno=38, col_offset=47), lineno=38, col_offset=31), None, None), Load(), lineno=38, col_offset=23), 'replace', Load(), lineno=38, col_offset=23), [Str('/', lineno=38, col_offset=69), Str('.', lineno=38, col_offset=74)], [], None, None, lineno=38, col_offset=23), lineno=38, col_offset=12), If(BoolOp(And(), [Name('packages', Load(), lineno=39, col_offset=15), Compare(Name('pkg_name', Load(), lineno=39, col_offset=28), [NotIn()], [Name('packages', Load(), lineno=39, col_offset=44)], lineno=39, col_offset=28)], lineno=39, col_offset=15), [Continue( lineno=40, col_offset=16)], [], lineno=39, col_offset=12), Assign([Name('filenames', Store(), lineno=42, col_offset=12)], Call(Name('filter', Load(), lineno=42, col_offset=24), [Lambda(arguments([Name('x', Param(), lineno=43, col_offset=27)], None, None, []), BoolOp(And(), [Call(Attribute(Name('x', Load(), lineno=43, col_offset=30), 'startswith', Load(), lineno=43, col_offset=30), [Str('test_', lineno=43, col_offset=43)], [], None, None, lineno=43, col_offset=30), Call(Attribute(Name('x', Load(), lineno=43, col_offset=56), 'endswith', Load(), lineno=43, col_offset=56), [Name('py_ext', Load(), lineno=43, col_offset=67)], [], None, None, lineno=43, col_offset=56)], lineno=43, col_offset=30), lineno=43, col_offset=20), Name('filenames', Load(), lineno=44, col_offset=20)], [], None, None, lineno=42, col_offset=24), lineno=42, col_offset=12), For(Name('name', Store(), lineno=46, col_offset=16), Name('filenames', Load(), lineno=46, col_offset=24), [TryExcept([Expr(Yield(Call(Attribute(Name('importlib', Load(), lineno=48, col_offset=26), 'import_module', Load(), lineno=48, col_offset=26), [BinOp(Str('.%s', lineno=49, col_offset=28), Mod(), Subscript(Name('name', Load(), lineno=49, col_offset=36), Slice(None, UnaryOp(USub(), Call(Name('len', Load(), lineno=49, col_offset=43), [Name('py_ext', Load(), lineno=49, col_offset=47)], [], None, None, lineno=49, col_offset=43), lineno=49, col_offset=42), None), Load(), lineno=49, col_offset=36), lineno=49, col_offset=28), Name('pkg_name', Load(), lineno=49, col_offset=57)], [], None, None, lineno=48, col_offset=26), lineno=48, col_offset=20), lineno=48, col_offset=20)], [ExceptHandler(Attribute(Attribute(Name('test', Load(), lineno=50, col_offset=23), 'test_support', Load(), lineno=50, col_offset=23), 'ResourceDenied', Load(), lineno=50, col_offset=23), None, [If(Name('gui', Load(), lineno=51, col_offset=23), [Raise(None, None, None, lineno=52, col_offset=24)], [], lineno=51, col_offset=20)], lineno=50, col_offset=16)], [], lineno=47, col_offset=16)], [], lineno=46, col_offset=12)], [], lineno=37, col_offset=8)], [], lineno=32, col_offset=4)], [], lineno=23, col_offset=0), FunctionDef('get_tests', arguments([Name('text', Param(), lineno=54, col_offset=14), Name('gui', Param(), lineno=54, col_offset=25), Name('packages', Param(), lineno=54, col_offset=35)], None, None, [Name('True', Load(), lineno=54, col_offset=19), Name('True', Load(), lineno=54, col_offset=29), Name('None', Load(), lineno=54, col_offset=44)]), [Expr(Str('Yield all the tests in the modules found by get_tests_modules.\n\n    If nogui is True, only tests that do not require a GUI will be\n    returned.', lineno=58, col_offset=-1), lineno=58, col_offset=-1), Assign([Name('attrs', Store(), lineno=59, col_offset=4)], List([], Load(), lineno=59, col_offset=12), lineno=59, col_offset=4), If(Name('text', Load(), lineno=60, col_offset=7), [Expr(Call(Attribute(Name('attrs', Load(), lineno=61, col_offset=8), 'append', Load(), lineno=61, col_offset=8), [Str('tests_nogui', lineno=61, col_offset=21)], [], None, None, lineno=61, col_offset=8), lineno=61, col_offset=8)], [], lineno=60, col_offset=4), If(Name('gui', Load(), lineno=62, col_offset=7), [Expr(Call(Attribute(Name('attrs', Load(), lineno=63, col_offset=8), 'append', Load(), lineno=63, col_offset=8), [Str('tests_gui', lineno=63, col_offset=21)], [], None, None, lineno=63, col_offset=8), lineno=63, col_offset=8)], [], lineno=62, col_offset=4), For(Name('module', Store(), lineno=64, col_offset=8), Call(Name('get_tests_modules', Load(), lineno=64, col_offset=18), [], [keyword('gui', Name('gui', Load(), lineno=64, col_offset=40)), keyword('packages', Name('packages', Load(), lineno=64, col_offset=54))], None, None, lineno=64, col_offset=18), [For(Name('attr', Store(), lineno=65, col_offset=12), Name('attrs', Load(), lineno=65, col_offset=20), [For(Name('test', Store(), lineno=66, col_offset=16), Call(Name('getattr', Load(), lineno=66, col_offset=24), [Name('module', Load(), lineno=66, col_offset=32), Name('attr', Load(), lineno=66, col_offset=40), Tuple([], Load(), lineno=66, col_offset=46)], [], None, None, lineno=66, col_offset=24), [Expr(Yield(Name('test', Load(), lineno=67, col_offset=22), lineno=67, col_offset=16), lineno=67, col_offset=16)], [], lineno=66, col_offset=12)], [], lineno=65, col_offset=8)], [], lineno=64, col_offset=4)], [], lineno=54, col_offset=0), If(Compare(Name('__name__', Load(), lineno=69, col_offset=3), [Eq()], [Str('__main__', lineno=69, col_offset=15)], lineno=69, col_offset=3), [Assign([Attribute(Attribute(Name('test', Load(), lineno=70, col_offset=4), 'test_support', Load(), lineno=70, col_offset=4), 'use_resources', Store(), lineno=70, col_offset=4)], List([Str('gui', lineno=70, col_offset=39)], Load(), lineno=70, col_offset=38), lineno=70, col_offset=4), Expr(Call(Attribute(Attribute(Name('test', Load(), lineno=71, col_offset=4), 'test_support', Load(), lineno=71, col_offset=4), 'run_unittest', Load(), lineno=71, col_offset=4), [], [], Call(Name('get_tests', Load(), lineno=71, col_offset=36), [], [], None, None, lineno=71, col_offset=36), None, lineno=71, col_offset=4), lineno=71, col_offset=4)], [], lineno=69, col_offset=0)])
