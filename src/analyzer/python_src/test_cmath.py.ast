Module([ImportFrom('test.test_support', [alias('run_unittest', None)],
0, lineno=1, col_offset=0), ImportFrom('test.test_math',
[alias('parse_testfile', None), alias('test_file', None)], 0,
lineno=2, col_offset=0), Import([alias('unittest', None)], lineno=3,
col_offset=0), Import([alias('cmath', None), alias('math', None)],
lineno=4, col_offset=0), ImportFrom('cmath', [alias('phase', None),
alias('polar', None), alias('rect', None), alias('pi', None)], 0,
lineno=5, col_offset=0), Assign([Name('INF', Store(), lineno=7,
col_offset=0)], Call(Name('float', Load(), lineno=7, col_offset=6),
[Str('inf', lineno=7, col_offset=12)], [], None, None, lineno=7,
col_offset=6), lineno=7, col_offset=0), Assign([Name('NAN', Store(),
lineno=8, col_offset=0)], Call(Name('float', Load(), lineno=8,
col_offset=6), [Str('nan', lineno=8, col_offset=12)], [], None, None,
lineno=8, col_offset=6), lineno=8, col_offset=0),
Assign([Name('complex_zeros', Store(), lineno=10, col_offset=0)],
ListComp(Call(Name('complex', Load(), lineno=10, col_offset=17),
[Name('x', Load(), lineno=10, col_offset=25), Name('y', Load(),
lineno=10, col_offset=28)], [], None, None, lineno=10, col_offset=17),
[comprehension(Name('x', Store(), lineno=10, col_offset=35),
List([Num(0.0, lineno=10, col_offset=41), Num(-0.0, lineno=10,
col_offset=47)], Load(), lineno=10, col_offset=40), []),
comprehension(Name('y', Store(), lineno=10, col_offset=56),
List([Num(0.0, lineno=10, col_offset=62), Num(-0.0, lineno=10,
col_offset=68)], Load(), lineno=10, col_offset=61), [])], lineno=10,
col_offset=17), lineno=10, col_offset=0),
Assign([Name('complex_infinities', Store(), lineno=11, col_offset=0)],
ListComp(Call(Name('complex', Load(), lineno=11, col_offset=22),
[Name('x', Load(), lineno=11, col_offset=30), Name('y', Load(),
lineno=11, col_offset=33)], [], None, None, lineno=11, col_offset=22),
[comprehension(Tuple([Name('x', Store(), lineno=11, col_offset=40),
Name('y', Store(), lineno=11, col_offset=43)], Store(), lineno=11,
col_offset=40), List([Tuple([Name('INF', Load(), lineno=12,
col_offset=9), Num(0.0, lineno=12, col_offset=14)], Load(), lineno=12,
col_offset=9), Tuple([Name('INF', Load(), lineno=13, col_offset=9),
Num(2.3, lineno=13, col_offset=14)], Load(), lineno=13, col_offset=9),
Tuple([Name('INF', Load(), lineno=14, col_offset=9), Name('INF',
Load(), lineno=14, col_offset=14)], Load(), lineno=14, col_offset=9),
Tuple([Num(2.3, lineno=15, col_offset=9), Name('INF', Load(),
lineno=15, col_offset=14)], Load(), lineno=15, col_offset=9),
Tuple([Num(0.0, lineno=16, col_offset=9), Name('INF', Load(),
lineno=16, col_offset=14)], Load(), lineno=16, col_offset=9),
Tuple([Num(-0.0, lineno=17, col_offset=10), Name('INF', Load(),
lineno=17, col_offset=15)], Load(), lineno=17, col_offset=9),
Tuple([Num(-2.3, lineno=18, col_offset=10), Name('INF', Load(),
lineno=18, col_offset=15)], Load(), lineno=18, col_offset=9),
Tuple([UnaryOp(USub(), Name('INF', Load(), lineno=19, col_offset=10),
lineno=19, col_offset=9), Name('INF', Load(), lineno=19,
col_offset=15)], Load(), lineno=19, col_offset=9),
Tuple([UnaryOp(USub(), Name('INF', Load(), lineno=20, col_offset=10),
lineno=20, col_offset=9), Num(2.3, lineno=20, col_offset=15)], Load(),
lineno=20, col_offset=9), Tuple([UnaryOp(USub(), Name('INF', Load(),
lineno=21, col_offset=10), lineno=21, col_offset=9), Num(0.0,
lineno=21, col_offset=15)], Load(), lineno=21, col_offset=9),
Tuple([UnaryOp(USub(), Name('INF', Load(), lineno=22, col_offset=10),
lineno=22, col_offset=9), Num(-0.0, lineno=22, col_offset=16)],
Load(), lineno=22, col_offset=9), Tuple([UnaryOp(USub(), Name('INF',
Load(), lineno=23, col_offset=10), lineno=23, col_offset=9), Num(-2.3,
lineno=23, col_offset=16)], Load(), lineno=23, col_offset=9),
Tuple([UnaryOp(USub(), Name('INF', Load(), lineno=24, col_offset=10),
lineno=24, col_offset=9), UnaryOp(USub(), Name('INF', Load(),
lineno=24, col_offset=16), lineno=24, col_offset=15)], Load(),
lineno=24, col_offset=9), Tuple([Num(-2.3, lineno=25, col_offset=10),
UnaryOp(USub(), Name('INF', Load(), lineno=25, col_offset=16),
lineno=25, col_offset=15)], Load(), lineno=25, col_offset=9),
Tuple([Num(-0.0, lineno=26, col_offset=10), UnaryOp(USub(),
Name('INF', Load(), lineno=26, col_offset=16), lineno=26,
col_offset=15)], Load(), lineno=26, col_offset=9), Tuple([Num(0.0,
lineno=27, col_offset=9), UnaryOp(USub(), Name('INF', Load(),
lineno=27, col_offset=15), lineno=27, col_offset=14)], Load(),
lineno=27, col_offset=9), Tuple([Num(2.3, lineno=28, col_offset=9),
UnaryOp(USub(), Name('INF', Load(), lineno=28, col_offset=15),
lineno=28, col_offset=14)], Load(), lineno=28, col_offset=9),
Tuple([Name('INF', Load(), lineno=29, col_offset=9), UnaryOp(USub(),
Name('INF', Load(), lineno=29, col_offset=15), lineno=29,
col_offset=14)], Load(), lineno=29, col_offset=9), Tuple([Name('INF',
Load(), lineno=30, col_offset=9), Num(-2.3, lineno=30,
col_offset=15)], Load(), lineno=30, col_offset=9), Tuple([Name('INF',
Load(), lineno=31, col_offset=9), Num(-0.0, lineno=31,
col_offset=15)], Load(), lineno=31, col_offset=9)], Load(), lineno=11,
col_offset=48), [])], lineno=11, col_offset=22), lineno=11,
col_offset=0), Assign([Name('complex_nans', Store(), lineno=33,
col_offset=0)], ListComp(Call(Name('complex', Load(), lineno=33,
col_offset=16), [Name('x', Load(), lineno=33, col_offset=24),
Name('y', Load(), lineno=33, col_offset=27)], [], None, None,
lineno=33, col_offset=16), [comprehension(Tuple([Name('x', Store(),
lineno=33, col_offset=34), Name('y', Store(), lineno=33,
col_offset=37)], Store(), lineno=33, col_offset=34),
List([Tuple([Name('NAN', Load(), lineno=34, col_offset=9),
UnaryOp(USub(), Name('INF', Load(), lineno=34, col_offset=15),
lineno=34, col_offset=14)], Load(), lineno=34, col_offset=9),
Tuple([Name('NAN', Load(), lineno=35, col_offset=9), Num(-2.3,
lineno=35, col_offset=15)], Load(), lineno=35, col_offset=9),
Tuple([Name('NAN', Load(), lineno=36, col_offset=9), Num(-0.0,
lineno=36, col_offset=15)], Load(), lineno=36, col_offset=9),
Tuple([Name('NAN', Load(), lineno=37, col_offset=9), Num(0.0,
lineno=37, col_offset=14)], Load(), lineno=37, col_offset=9),
Tuple([Name('NAN', Load(), lineno=38, col_offset=9), Num(2.3,
lineno=38, col_offset=14)], Load(), lineno=38, col_offset=9),
Tuple([Name('NAN', Load(), lineno=39, col_offset=9), Name('INF',
Load(), lineno=39, col_offset=14)], Load(), lineno=39, col_offset=9),
Tuple([UnaryOp(USub(), Name('INF', Load(), lineno=40, col_offset=10),
lineno=40, col_offset=9), Name('NAN', Load(), lineno=40,
col_offset=15)], Load(), lineno=40, col_offset=9), Tuple([Num(-2.3,
lineno=41, col_offset=10), Name('NAN', Load(), lineno=41,
col_offset=15)], Load(), lineno=41, col_offset=9), Tuple([Num(-0.0,
lineno=42, col_offset=10), Name('NAN', Load(), lineno=42,
col_offset=15)], Load(), lineno=42, col_offset=9), Tuple([Num(0.0,
lineno=43, col_offset=9), Name('NAN', Load(), lineno=43,
col_offset=14)], Load(), lineno=43, col_offset=9), Tuple([Num(2.3,
lineno=44, col_offset=9), Name('NAN', Load(), lineno=44,
col_offset=14)], Load(), lineno=44, col_offset=9), Tuple([Name('INF',
Load(), lineno=45, col_offset=9), Name('NAN', Load(), lineno=45,
col_offset=14)], Load(), lineno=45, col_offset=9)], Load(), lineno=33,
col_offset=42), [])], lineno=33, col_offset=16), lineno=33,
col_offset=0), ClassDef('CMathTests', [Attribute(Name('unittest',
Load(), lineno=48, col_offset=17), 'TestCase', Load(), lineno=48,
col_offset=17)], [Assign([Name('test_functions', Store(), lineno=50,
col_offset=4)], ListComp(Call(Name('getattr', Load(), lineno=50,
col_offset=22), [Name('cmath', Load(), lineno=50, col_offset=30),
Name('fname', Load(), lineno=50, col_offset=37)], [], None, None,
lineno=50, col_offset=22), [comprehension(Name('fname', Store(),
lineno=50, col_offset=48), List([Str('acos', lineno=51,
col_offset=12), Str('acosh', lineno=51, col_offset=20), Str('asin',
lineno=51, col_offset=29), Str('asinh', lineno=51, col_offset=37),
Str('atan', lineno=51, col_offset=46), Str('atanh', lineno=51,
col_offset=54), Str('cos', lineno=52, col_offset=12), Str('cosh',
lineno=52, col_offset=19), Str('exp', lineno=52, col_offset=27),
Str('log', lineno=52, col_offset=34), Str('log10', lineno=52,
col_offset=41), Str('sin', lineno=52, col_offset=50), Str('sinh',
lineno=52, col_offset=57), Str('sqrt', lineno=53, col_offset=12),
Str('tan', lineno=53, col_offset=20), Str('tanh', lineno=53,
col_offset=27)], Load(), lineno=50, col_offset=57), [])], lineno=50,
col_offset=22), lineno=50, col_offset=4),
Expr(Call(Attribute(Name('test_functions', Load(), lineno=55,
col_offset=4), 'append', Load(), lineno=55, col_offset=4),
[Lambda(arguments([Name('x', Param(), lineno=55, col_offset=33)],
None, None, []), Call(Attribute(Name('cmath', Load(), lineno=55,
col_offset=37), 'log', Load(), lineno=55, col_offset=37), [Name('x',
Load(), lineno=55, col_offset=47), BinOp(Num(1729.0, lineno=55,
col_offset=50), Add(), Num(0j, lineno=55, col_offset=58), lineno=55,
col_offset=50)], [], None, None, lineno=55, col_offset=37), lineno=55,
col_offset=26)], [], None, None, lineno=55, col_offset=4), lineno=55,
col_offset=4), Expr(Call(Attribute(Name('test_functions', Load(),
lineno=56, col_offset=4), 'append', Load(), lineno=56, col_offset=4),
[Lambda(arguments([Name('x', Param(), lineno=56, col_offset=33)],
None, None, []), Call(Attribute(Name('cmath', Load(), lineno=56,
col_offset=37), 'log', Load(), lineno=56, col_offset=37),
[BinOp(Num(14.0, lineno=56, col_offset=47), Sub(), Num(27j, lineno=56,
col_offset=51), lineno=56, col_offset=47), Name('x', Load(),
lineno=56, col_offset=56)], [], None, None, lineno=56, col_offset=37),
lineno=56, col_offset=26)], [], None, None, lineno=56, col_offset=4),
lineno=56, col_offset=4), FunctionDef('setUp', arguments([Name('self',
Param(), lineno=58, col_offset=14)], None, None, []),
[Assign([Attribute(Name('self', Load(), lineno=59, col_offset=8),
'test_values', Store(), lineno=59, col_offset=8)], Call(Name('open',
Load(), lineno=59, col_offset=27), [Name('test_file', Load(),
lineno=59, col_offset=32)], [], None, None, lineno=59, col_offset=27),
lineno=59, col_offset=8)], [], lineno=58, col_offset=4),
FunctionDef('tearDown', arguments([Name('self', Param(), lineno=61,
col_offset=17)], None, None, []),
[Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=62,
col_offset=8), 'test_values', Load(), lineno=62, col_offset=8),
'close', Load(), lineno=62, col_offset=8), [], [], None, None,
lineno=62, col_offset=8), lineno=62, col_offset=8)], [], lineno=61,
col_offset=4), FunctionDef('rAssertAlmostEqual',
arguments([Name('self', Param(), lineno=64, col_offset=27), Name('a',
Param(), lineno=64, col_offset=33), Name('b', Param(), lineno=64,
col_offset=36), Name('rel_err', Param(), lineno=64, col_offset=39),
Name('abs_err', Param(), lineno=64, col_offset=56), Name('msg',
Param(), lineno=65, col_offset=27)], None, None, [Num(2e-15,
lineno=64, col_offset=49), Num(5e-323, lineno=64, col_offset=66),
Name('None', Load(), lineno=65, col_offset=31)]), [Expr(Str('Fail if
the two floating-point numbers are not almost equal.\n\n Determine
whether floating-point values a and b are equal to within\n a (small)
rounding error.  The default values for rel_err and\n abs_err are
chosen to be suitable for platforms where a float is\n represented by
an IEEE 754 double.  They allow an error of between\n 9 and 19 ulps.\n
', lineno=73, col_offset=-1), lineno=73, col_offset=-1),
If(Call(Attribute(Name('math', Load(), lineno=76, col_offset=11),
'isnan', Load(), lineno=76, col_offset=11), [Name('a', Load(),
lineno=76, col_offset=22)], [], None, None, lineno=76, col_offset=11),
[If(Call(Attribute(Name('math', Load(), lineno=77, col_offset=15),
'isnan', Load(), lineno=77, col_offset=15), [Name('b', Load(),
lineno=77, col_offset=26)], [], None, None, lineno=77, col_offset=15),
[Return(None, lineno=78, col_offset=16)], [], lineno=77,
col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=79,
col_offset=12), 'fail', Load(), lineno=79, col_offset=12),
[BoolOp(Or(), [Name('msg', Load(), lineno=79, col_offset=22),
Call(Attribute(Str('{!r} should be nan', lineno=79, col_offset=29),
'format', Load(), lineno=79, col_offset=29), [Name('b', Load(),
lineno=79, col_offset=57)], [], None, None, lineno=79,
col_offset=29)], lineno=79, col_offset=22)], [], None, None,
lineno=79, col_offset=12), lineno=79, col_offset=12)], [], lineno=76,
col_offset=8), If(Call(Attribute(Name('math', Load(), lineno=81,
col_offset=11), 'isinf', Load(), lineno=81, col_offset=11), [Name('a',
Load(), lineno=81, col_offset=22)], [], None, None, lineno=81,
col_offset=11), [If(Compare(Name('a', Load(), lineno=82,
col_offset=15), [Eq()], [Name('b', Load(), lineno=82, col_offset=20)],
lineno=82, col_offset=15), [Return(None, lineno=83, col_offset=16)],
[], lineno=82, col_offset=12), Expr(Call(Attribute(Name('self',
Load(), lineno=84, col_offset=12), 'fail', Load(), lineno=84,
col_offset=12), [BoolOp(Or(), [Name('msg', Load(), lineno=84,
col_offset=22), Call(Attribute(Str('finite result where infinity
expected: expected {!r}, got {!r}', lineno=84, col_offset=29),
'format', Load(), lineno=84, col_offset=29), [Name('a', Load(),
lineno=85, col_offset=55), Name('b', Load(), lineno=85,
col_offset=58)], [], None, None, lineno=84, col_offset=29)],
lineno=84, col_offset=22)], [], None, None, lineno=84, col_offset=12),
lineno=84, col_offset=12)], [], lineno=81, col_offset=8),
If(BoolOp(And(), [UnaryOp(Not(), Name('a', Load(), lineno=91,
col_offset=15), lineno=91, col_offset=11), UnaryOp(Not(), Name('b',
Load(), lineno=91, col_offset=25), lineno=91, col_offset=21)],
lineno=91, col_offset=11), [If(Compare(Call(Attribute(Name('math',
Load(), lineno=92, col_offset=15), 'copysign', Load(), lineno=92,
col_offset=15), [Num(1.0, lineno=92, col_offset=29), Name('a', Load(),
lineno=92, col_offset=33)], [], None, None, lineno=92, col_offset=15),
[NotEq()], [Call(Attribute(Name('math', Load(), lineno=92,
col_offset=39), 'copysign', Load(), lineno=92, col_offset=39),
[Num(1.0, lineno=92, col_offset=53), Name('b', Load(), lineno=92,
col_offset=57)], [], None, None, lineno=92, col_offset=39)],
lineno=92, col_offset=15), [Expr(Call(Attribute(Name('self', Load(),
lineno=93, col_offset=16), 'fail', Load(), lineno=93, col_offset=16),
[BoolOp(Or(), [Name('msg', Load(), lineno=93, col_offset=26),
Call(Attribute(Str('zero has wrong sign: expected {!r}, got {!r}',
lineno=93, col_offset=33), 'format', Load(), lineno=93,
col_offset=33), [Name('a', Load(), lineno=94, col_offset=44),
Name('b', Load(), lineno=94, col_offset=47)], [], None, None,
lineno=93, col_offset=33)], lineno=93, col_offset=26)], [], None,
None, lineno=93, col_offset=16), lineno=93, col_offset=16)], [],
lineno=92, col_offset=12)], [], lineno=91, col_offset=8),
TryExcept([Assign([Name('absolute_error', Store(), lineno=101,
col_offset=12)], Call(Name('abs', Load(), lineno=101, col_offset=29),
[BinOp(Name('b', Load(), lineno=101, col_offset=33), Sub(), Name('a',
Load(), lineno=101, col_offset=35), lineno=101, col_offset=33)], [],
None, None, lineno=101, col_offset=29), lineno=101, col_offset=12)],
[ExceptHandler(Name('OverflowError', Load(), lineno=102,
col_offset=15), None, [Pass( lineno=103, col_offset=12)], lineno=102,
col_offset=8)], [If(Compare(Name('absolute_error', Load(), lineno=109,
col_offset=15), [LtE()], [Call(Name('max', Load(), lineno=109,
col_offset=33), [Name('abs_err', Load(), lineno=109, col_offset=37),
BinOp(Name('rel_err', Load(), lineno=109, col_offset=46), Mult(),
Call(Name('abs', Load(), lineno=109, col_offset=56), [Name('a',
Load(), lineno=109, col_offset=60)], [], None, None, lineno=109,
col_offset=56), lineno=109, col_offset=46)], [], None, None,
lineno=109, col_offset=33)], lineno=109, col_offset=15), [Return(None,
lineno=110, col_offset=16)], [], lineno=109, col_offset=12)],
lineno=100, col_offset=8), Expr(Call(Attribute(Name('self', Load(),
lineno=111, col_offset=8), 'fail', Load(), lineno=111, col_offset=8),
[BoolOp(Or(), [Name('msg', Load(), lineno=111, col_offset=18),
Call(Attribute(Str('{!r} and {!r} are not sufficiently close',
lineno=112, col_offset=18), 'format', Load(), lineno=112,
col_offset=18), [Name('a', Load(), lineno=112, col_offset=68),
Name('b', Load(), lineno=112, col_offset=71)], [], None, None,
lineno=112, col_offset=18)], lineno=111, col_offset=18)], [], None,
None, lineno=111, col_offset=8), lineno=111, col_offset=8)], [],
lineno=64, col_offset=4), FunctionDef('test_constants',
arguments([Name('self', Param(), lineno=114, col_offset=23)], None,
None, []), [Assign([Name('e_expected', Store(), lineno=115,
col_offset=8)], Num(2.718281828459045, lineno=115, col_offset=21),
lineno=115, col_offset=8), Assign([Name('pi_expected', Store(),
lineno=116, col_offset=8)], Num(3.141592653589793, lineno=116,
col_offset=22), lineno=116, col_offset=8),
Expr(Call(Attribute(Name('self', Load(), lineno=117, col_offset=8),
'assertAlmostEqual', Load(), lineno=117, col_offset=8),
[Attribute(Name('cmath', Load(), lineno=117, col_offset=31), 'pi',
Load(), lineno=117, col_offset=31), Name('pi_expected', Load(),
lineno=117, col_offset=41)], [keyword('places', Num(9, lineno=117,
col_offset=61)), keyword('msg', Call(Attribute(Str('cmath.pi is {};
should be {}', lineno=118, col_offset=16), 'format', Load(),
lineno=118, col_offset=16), [Attribute(Name('cmath', Load(),
lineno=118, col_offset=54), 'pi', Load(), lineno=118, col_offset=54),
Name('pi_expected', Load(), lineno=118, col_offset=64)], [], None,
None, lineno=118, col_offset=16))], None, None, lineno=117,
col_offset=8), lineno=117, col_offset=8),
Expr(Call(Attribute(Name('self', Load(), lineno=119, col_offset=8),
'assertAlmostEqual', Load(), lineno=119, col_offset=8),
[Attribute(Name('cmath', Load(), lineno=119, col_offset=31), 'e',
Load(), lineno=119, col_offset=31), Name('e_expected', Load(),
lineno=119, col_offset=40)], [keyword('places', Num(9, lineno=119,
col_offset=59)), keyword('msg', Call(Attribute(Str('cmath.e is {};
should be {}', lineno=120, col_offset=16), 'format', Load(),
lineno=120, col_offset=16), [Attribute(Name('cmath', Load(),
lineno=120, col_offset=53), 'e', Load(), lineno=120, col_offset=53),
Name('e_expected', Load(), lineno=120, col_offset=62)], [], None,
None, lineno=120, col_offset=16))], None, None, lineno=119,
col_offset=8), lineno=119, col_offset=8)], [], lineno=114,
col_offset=4), FunctionDef('test_user_object', arguments([Name('self',
Param(), lineno=122, col_offset=25)], None, None, []),
[Assign([Name('cx_arg', Store(), lineno=129, col_offset=8)],
BinOp(Num(4.419414439, lineno=129, col_offset=17), Add(),
Num(1.497100113j, lineno=129, col_offset=31), lineno=129,
col_offset=17), lineno=129, col_offset=8), Assign([Name('flt_arg',
Store(), lineno=130, col_offset=8)], Num(-6.131677725, lineno=130,
col_offset=19), lineno=130, col_offset=8),
Assign([Name('non_complexes', Store(), lineno=134, col_offset=8)],
List([Str('not complex', lineno=134, col_offset=25), Num(1,
lineno=134, col_offset=40), Num(5L, lineno=134, col_offset=43),
Num(2.0, lineno=134, col_offset=47), Name('None', Load(), lineno=134,
col_offset=51), Call(Name('object', Load(), lineno=135,
col_offset=25), [], [], None, None, lineno=135, col_offset=25),
Name('NotImplemented', Load(), lineno=135, col_offset=35)], Load(),
lineno=134, col_offset=24), lineno=134, col_offset=8),
ClassDef('MyComplex', [Name('object', Load(), lineno=141,
col_offset=24)], [FunctionDef('__init__', arguments([Name('self',
Param(), lineno=142, col_offset=25), Name('value', Param(),
lineno=142, col_offset=31)], None, None, []),
[Assign([Attribute(Name('self', Load(), lineno=143, col_offset=16),
'value', Store(), lineno=143, col_offset=16)], Name('value', Load(),
lineno=143, col_offset=29), lineno=143, col_offset=16)], [],
lineno=142, col_offset=12), FunctionDef('__complex__',
arguments([Name('self', Param(), lineno=144, col_offset=28)], None,
None, []), [Return(Attribute(Name('self', Load(), lineno=145,
col_offset=23), 'value', Load(), lineno=145, col_offset=23),
lineno=145, col_offset=16)], [], lineno=144, col_offset=12)], [],
lineno=141, col_offset=8), ClassDef('MyComplexOS', [],
[FunctionDef('__init__', arguments([Name('self', Param(), lineno=149,
col_offset=25), Name('value', Param(), lineno=149, col_offset=31)],
None, None, []), [Assign([Attribute(Name('self', Load(), lineno=150,
col_offset=16), 'value', Store(), lineno=150, col_offset=16)],
Name('value', Load(), lineno=150, col_offset=29), lineno=150,
col_offset=16)], [], lineno=149, col_offset=12),
FunctionDef('__complex__', arguments([Name('self', Param(),
lineno=151, col_offset=28)], None, None, []),
[Return(Attribute(Name('self', Load(), lineno=152, col_offset=23),
'value', Load(), lineno=152, col_offset=23), lineno=152,
col_offset=16)], [], lineno=151, col_offset=12)], [], lineno=148,
col_offset=8), ClassDef('SomeException', [Name('Exception', Load(),
lineno=155, col_offset=28)], [Pass( lineno=156, col_offset=12)], [],
lineno=155, col_offset=8), ClassDef('MyComplexException',
[Name('object', Load(), lineno=157, col_offset=33)],
[FunctionDef('__complex__', arguments([Name('self', Param(),
lineno=158, col_offset=28)], None, None, []),
[Raise(Name('SomeException', Load(), lineno=159, col_offset=22), None,
None, lineno=159, col_offset=16)], [], lineno=158, col_offset=12)],
[], lineno=157, col_offset=8), ClassDef('MyComplexExceptionOS', [],
[FunctionDef('__complex__', arguments([Name('self', Param(),
lineno=161, col_offset=28)], None, None, []),
[Raise(Name('SomeException', Load(), lineno=162, col_offset=22), None,
None, lineno=162, col_offset=16)], [], lineno=161, col_offset=12)],
[], lineno=160, col_offset=8), ClassDef('NeitherComplexNorFloat',
[Name('object', Load(), lineno=165, col_offset=37)], [Pass(
lineno=166, col_offset=12)], [], lineno=165, col_offset=8),
ClassDef('NeitherComplexNorFloatOS', [], [Pass( lineno=168,
col_offset=12)], [], lineno=167, col_offset=8), ClassDef('MyInt',
[Name('object', Load(), lineno=169, col_offset=20)],
[FunctionDef('__int__', arguments([Name('self', Param(), lineno=170,
col_offset=24)], None, None, []), [Return(Num(2, lineno=170,
col_offset=38), lineno=170, col_offset=31)], [], lineno=170,
col_offset=12), FunctionDef('__long__', arguments([Name('self',
Param(), lineno=171, col_offset=25)], None, None, []), [Return(Num(2L,
lineno=171, col_offset=39), lineno=171, col_offset=32)], [],
lineno=171, col_offset=12), FunctionDef('__index__',
arguments([Name('self', Param(), lineno=172, col_offset=26)], None,
None, []), [Return(Num(2, lineno=172, col_offset=40), lineno=172,
col_offset=33)], [], lineno=172, col_offset=12)], [], lineno=169,
col_offset=8), ClassDef('MyIntOS', [], [FunctionDef('__int__',
arguments([Name('self', Param(), lineno=174, col_offset=24)], None,
None, []), [Return(Num(2, lineno=174, col_offset=38), lineno=174,
col_offset=31)], [], lineno=174, col_offset=12),
FunctionDef('__long__', arguments([Name('self', Param(), lineno=175,
col_offset=25)], None, None, []), [Return(Num(2L, lineno=175,
col_offset=39), lineno=175, col_offset=32)], [], lineno=175,
col_offset=12), FunctionDef('__index__', arguments([Name('self',
Param(), lineno=176, col_offset=26)], None, None, []), [Return(Num(2,
lineno=176, col_offset=40), lineno=176, col_offset=33)], [],
lineno=176, col_offset=12)], [], lineno=173, col_offset=8),
ClassDef('FloatAndComplex', [Name('object', Load(), lineno=180,
col_offset=30)], [FunctionDef('__float__', arguments([Name('self',
Param(), lineno=181, col_offset=26)], None, None, []),
[Return(Name('flt_arg', Load(), lineno=182, col_offset=23),
lineno=182, col_offset=16)], [], lineno=181, col_offset=12),
FunctionDef('__complex__', arguments([Name('self', Param(),
lineno=183, col_offset=28)], None, None, []), [Return(Name('cx_arg',
Load(), lineno=184, col_offset=23), lineno=184, col_offset=16)], [],
lineno=183, col_offset=12)], [], lineno=180, col_offset=8),
ClassDef('FloatAndComplexOS', [], [FunctionDef('__float__',
arguments([Name('self', Param(), lineno=186, col_offset=26)], None,
None, []), [Return(Name('flt_arg', Load(), lineno=187, col_offset=23),
lineno=187, col_offset=16)], [], lineno=186, col_offset=12),
FunctionDef('__complex__', arguments([Name('self', Param(),
lineno=188, col_offset=28)], None, None, []), [Return(Name('cx_arg',
Load(), lineno=189, col_offset=23), lineno=189, col_offset=16)], [],
lineno=188, col_offset=12)], [], lineno=185, col_offset=8),
ClassDef('JustFloat', [Name('object', Load(), lineno=190,
col_offset=24)], [FunctionDef('__float__', arguments([Name('self',
Param(), lineno=191, col_offset=26)], None, None, []),
[Return(Name('flt_arg', Load(), lineno=192, col_offset=23),
lineno=192, col_offset=16)], [], lineno=191, col_offset=12)], [],
lineno=190, col_offset=8), ClassDef('JustFloatOS', [],
[FunctionDef('__float__', arguments([Name('self', Param(), lineno=194,
col_offset=26)], None, None, []), [Return(Name('flt_arg', Load(),
lineno=195, col_offset=23), lineno=195, col_offset=16)], [],
lineno=194, col_offset=12)], [], lineno=193, col_offset=8),
For(Name('f', Store(), lineno=197, col_offset=12),
Attribute(Name('self', Load(), lineno=197, col_offset=17),
'test_functions', Load(), lineno=197, col_offset=17),
[Expr(Call(Attribute(Name('self', Load(), lineno=199, col_offset=12),
'assertEqual', Load(), lineno=199, col_offset=12), [Call(Name('f',
Load(), lineno=199, col_offset=29), [Call(Name('MyComplex', Load(),
lineno=199, col_offset=31), [Name('cx_arg', Load(), lineno=199,
col_offset=41)], [], None, None, lineno=199, col_offset=31)], [],
None, None, lineno=199, col_offset=29), Call(Name('f', Load(),
lineno=199, col_offset=51), [Name('cx_arg', Load(), lineno=199,
col_offset=53)], [], None, None, lineno=199, col_offset=51)], [],
None, None, lineno=199, col_offset=12), lineno=199, col_offset=12),
Expr(Call(Attribute(Name('self', Load(), lineno=200, col_offset=12),
'assertEqual', Load(), lineno=200, col_offset=12), [Call(Name('f',
Load(), lineno=200, col_offset=29), [Call(Name('MyComplexOS', Load(),
lineno=200, col_offset=31), [Name('cx_arg', Load(), lineno=200,
col_offset=43)], [], None, None, lineno=200, col_offset=31)], [],
None, None, lineno=200, col_offset=29), Call(Name('f', Load(),
lineno=200, col_offset=53), [Name('cx_arg', Load(), lineno=200,
col_offset=55)], [], None, None, lineno=200, col_offset=53)], [],
None, None, lineno=200, col_offset=12), lineno=200, col_offset=12),
Expr(Call(Attribute(Name('self', Load(), lineno=202, col_offset=12),
'assertEqual', Load(), lineno=202, col_offset=12), [Call(Name('f',
Load(), lineno=202, col_offset=29), [Call(Name('FloatAndComplex',
Load(), lineno=202, col_offset=31), [], [], None, None, lineno=202,
col_offset=31)], [], None, None, lineno=202, col_offset=29),
Call(Name('f', Load(), lineno=202, col_offset=51), [Name('cx_arg',
Load(), lineno=202, col_offset=53)], [], None, None, lineno=202,
col_offset=51)], [], None, None, lineno=202, col_offset=12),
lineno=202, col_offset=12), Expr(Call(Attribute(Name('self', Load(),
lineno=203, col_offset=12), 'assertEqual', Load(), lineno=203,
col_offset=12), [Call(Name('f', Load(), lineno=203, col_offset=29),
[Call(Name('FloatAndComplexOS', Load(), lineno=203, col_offset=31),
[], [], None, None, lineno=203, col_offset=31)], [], None, None,
lineno=203, col_offset=29), Call(Name('f', Load(), lineno=203,
col_offset=53), [Name('cx_arg', Load(), lineno=203, col_offset=55)],
[], None, None, lineno=203, col_offset=53)], [], None, None,
lineno=203, col_offset=12), lineno=203, col_offset=12),
Expr(Call(Attribute(Name('self', Load(), lineno=204, col_offset=12),
'assertEqual', Load(), lineno=204, col_offset=12), [Call(Name('f',
Load(), lineno=204, col_offset=29), [Call(Name('JustFloat', Load(),
lineno=204, col_offset=31), [], [], None, None, lineno=204,
col_offset=31)], [], None, None, lineno=204, col_offset=29),
Call(Name('f', Load(), lineno=204, col_offset=45), [Name('flt_arg',
Load(), lineno=204, col_offset=47)], [], None, None, lineno=204,
col_offset=45)], [], None, None, lineno=204, col_offset=12),
lineno=204, col_offset=12), Expr(Call(Attribute(Name('self', Load(),
lineno=205, col_offset=12), 'assertEqual', Load(), lineno=205,
col_offset=12), [Call(Name('f', Load(), lineno=205, col_offset=29),
[Call(Name('JustFloatOS', Load(), lineno=205, col_offset=31), [], [],
None, None, lineno=205, col_offset=31)], [], None, None, lineno=205,
col_offset=29), Call(Name('f', Load(), lineno=205, col_offset=47),
[Name('flt_arg', Load(), lineno=205, col_offset=49)], [], None, None,
lineno=205, col_offset=47)], [], None, None, lineno=205,
col_offset=12), lineno=205, col_offset=12),
Expr(Call(Attribute(Name('self', Load(), lineno=211, col_offset=12),
'assertRaises', Load(), lineno=211, col_offset=12), [Name('TypeError',
Load(), lineno=211, col_offset=30), Name('f', Load(), lineno=211,
col_offset=41), Call(Name('NeitherComplexNorFloat', Load(),
lineno=211, col_offset=44), [], [], None, None, lineno=211,
col_offset=44)], [], None, None, lineno=211, col_offset=12),
lineno=211, col_offset=12), Expr(Call(Attribute(Name('self', Load(),
lineno=212, col_offset=12), 'assertRaises', Load(), lineno=212,
col_offset=12), [Name('TypeError', Load(), lineno=212, col_offset=30),
Name('f', Load(), lineno=212, col_offset=41), Call(Name('MyInt',
Load(), lineno=212, col_offset=44), [], [], None, None, lineno=212,
col_offset=44)], [], None, None, lineno=212, col_offset=12),
lineno=212, col_offset=12), Expr(Call(Attribute(Name('self', Load(),
lineno=213, col_offset=12), 'assertRaises', Load(), lineno=213,
col_offset=12), [Name('Exception', Load(), lineno=213, col_offset=30),
Name('f', Load(), lineno=213, col_offset=41),
Call(Name('NeitherComplexNorFloatOS', Load(), lineno=213,
col_offset=44), [], [], None, None, lineno=213, col_offset=44)], [],
None, None, lineno=213, col_offset=12), lineno=213, col_offset=12),
Expr(Call(Attribute(Name('self', Load(), lineno=214, col_offset=12),
'assertRaises', Load(), lineno=214, col_offset=12), [Name('Exception',
Load(), lineno=214, col_offset=30), Name('f', Load(), lineno=214,
col_offset=41), Call(Name('MyIntOS', Load(), lineno=214,
col_offset=44), [], [], None, None, lineno=214, col_offset=44)], [],
None, None, lineno=214, col_offset=12), lineno=214, col_offset=12),
For(Name('bad_complex', Store(), lineno=216, col_offset=16),
Name('non_complexes', Load(), lineno=216, col_offset=31),
[Expr(Call(Attribute(Name('self', Load(), lineno=217, col_offset=16),
'assertRaises', Load(), lineno=217, col_offset=16), [Name('TypeError',
Load(), lineno=217, col_offset=34), Name('f', Load(), lineno=217,
col_offset=45), Call(Name('MyComplex', Load(), lineno=217,
col_offset=48), [Name('bad_complex', Load(), lineno=217,
col_offset=58)], [], None, None, lineno=217, col_offset=48)], [],
None, None, lineno=217, col_offset=16), lineno=217, col_offset=16),
Expr(Call(Attribute(Name('self', Load(), lineno=218, col_offset=16),
'assertRaises', Load(), lineno=218, col_offset=16), [Name('TypeError',
Load(), lineno=218, col_offset=34), Name('f', Load(), lineno=218,
col_offset=45), Call(Name('MyComplexOS', Load(), lineno=218,
col_offset=48), [Name('bad_complex', Load(), lineno=218,
col_offset=60)], [], None, None, lineno=218, col_offset=48)], [],
None, None, lineno=218, col_offset=16), lineno=218, col_offset=16)],
[], lineno=216, col_offset=12), Expr(Call(Attribute(Name('self',
Load(), lineno=220, col_offset=12), 'assertRaises', Load(),
lineno=220, col_offset=12), [Name('SomeException', Load(), lineno=220,
col_offset=30), Name('f', Load(), lineno=220, col_offset=45),
Call(Name('MyComplexException', Load(), lineno=220, col_offset=48),
[], [], None, None, lineno=220, col_offset=48)], [], None, None,
lineno=220, col_offset=12), lineno=220, col_offset=12),
Expr(Call(Attribute(Name('self', Load(), lineno=221, col_offset=12),
'assertRaises', Load(), lineno=221, col_offset=12),
[Name('SomeException', Load(), lineno=221, col_offset=30), Name('f',
Load(), lineno=221, col_offset=45), Call(Name('MyComplexExceptionOS',
Load(), lineno=221, col_offset=48), [], [], None, None, lineno=221,
col_offset=48)], [], None, None, lineno=221, col_offset=12),
lineno=221, col_offset=12)], [], lineno=197, col_offset=8)], [],
lineno=122, col_offset=4), FunctionDef('test_input_type',
arguments([Name('self', Param(), lineno=223, col_offset=24)], None,
None, []), [For(Name('f', Store(), lineno=226, col_offset=12),
Attribute(Name('self', Load(), lineno=226, col_offset=17),
'test_functions', Load(), lineno=226, col_offset=17), [For(Name('arg',
Store(), lineno=227, col_offset=16), List([Num(2, lineno=227,
col_offset=24), Num(2L, lineno=227, col_offset=27), Num(2.0,
lineno=227, col_offset=31)], Load(), lineno=227, col_offset=23),
[Expr(Call(Attribute(Name('self', Load(), lineno=228, col_offset=16),
'assertEqual', Load(), lineno=228, col_offset=16), [Call(Name('f',
Load(), lineno=228, col_offset=33), [Name('arg', Load(), lineno=228,
col_offset=35)], [], None, None, lineno=228, col_offset=33),
Call(Name('f', Load(), lineno=228, col_offset=41),
[Call(Attribute(Name('arg', Load(), lineno=228, col_offset=43),
'__float__', Load(), lineno=228, col_offset=43), [], [], None, None,
lineno=228, col_offset=43)], [], None, None, lineno=228,
col_offset=41)], [], None, None, lineno=228, col_offset=16),
lineno=228, col_offset=16)], [], lineno=227, col_offset=12)], [],
lineno=226, col_offset=8), For(Name('f', Store(), lineno=231,
col_offset=12), Attribute(Name('self', Load(), lineno=231,
col_offset=17), 'test_functions', Load(), lineno=231, col_offset=17),
[For(Name('arg', Store(), lineno=232, col_offset=16), List([Str('a',
lineno=232, col_offset=24), Str('long_string', lineno=232,
col_offset=29), Str('0', lineno=232, col_offset=44), Str('1j',
lineno=232, col_offset=49), Str('', lineno=232, col_offset=55)],
Load(), lineno=232, col_offset=23), [Expr(Call(Attribute(Name('self',
Load(), lineno=233, col_offset=16), 'assertRaises', Load(),
lineno=233, col_offset=16), [Name('TypeError', Load(), lineno=233,
col_offset=34), Name('f', Load(), lineno=233, col_offset=45),
Name('arg', Load(), lineno=233, col_offset=48)], [], None, None,
lineno=233, col_offset=16), lineno=233, col_offset=16)], [],
lineno=232, col_offset=12)], [], lineno=231, col_offset=8)], [],
lineno=223, col_offset=4), FunctionDef('test_cmath_matches_math',
arguments([Name('self', Param(), lineno=235, col_offset=32)], None,
None, []), [Assign([Name('test_values', Store(), lineno=240,
col_offset=8)], List([Num(0.01, lineno=240, col_offset=23), Num(0.1,
lineno=240, col_offset=29), Num(0.2, lineno=240, col_offset=34),
Num(0.5, lineno=240, col_offset=39), Num(0.9, lineno=240,
col_offset=44), Num(0.99, lineno=240, col_offset=49)], Load(),
lineno=240, col_offset=22), lineno=240, col_offset=8),
Assign([Name('unit_interval', Store(), lineno=243, col_offset=8)],
BinOp(BinOp(Name('test_values', Load(), lineno=243, col_offset=24),
Add(), ListComp(UnaryOp(USub(), Name('x', Load(), lineno=243,
col_offset=40), lineno=243, col_offset=39), [comprehension(Name('x',
Store(), lineno=243, col_offset=46), Name('test_values', Load(),
lineno=243, col_offset=51), [])], lineno=243, col_offset=39),
lineno=243, col_offset=24), Add(), List([Num(0.0, lineno=244,
col_offset=13), Num(1.0, lineno=244, col_offset=17), Num(-1.0,
lineno=244, col_offset=22)], Load(), lineno=244, col_offset=12),
lineno=243, col_offset=64), lineno=243, col_offset=8),
Assign([Name('positive', Store(), lineno=247, col_offset=8)],
BinOp(BinOp(Name('test_values', Load(), lineno=247, col_offset=19),
Add(), List([Num(1.0, lineno=247, col_offset=34)], Load(), lineno=247,
col_offset=33), lineno=247, col_offset=19), Add(),
ListComp(BinOp(Num(1.0, lineno=247, col_offset=41), Div(), Name('x',
Load(), lineno=247, col_offset=44), lineno=247, col_offset=41),
[comprehension(Name('x', Store(), lineno=247, col_offset=50),
Name('test_values', Load(), lineno=247, col_offset=55), [])],
lineno=247, col_offset=41), lineno=247, col_offset=38), lineno=247,
col_offset=8), Assign([Name('nonnegative', Store(), lineno=248,
col_offset=8)], BinOp(List([Num(0.0, lineno=248, col_offset=23)],
Load(), lineno=248, col_offset=22), Add(), Name('positive', Load(),
lineno=248, col_offset=29), lineno=248, col_offset=22), lineno=248,
col_offset=8), Assign([Name('real_line', Store(), lineno=251,
col_offset=8)], BinOp(BinOp(List([Num(0.0, lineno=251,
col_offset=21)], Load(), lineno=251, col_offset=20), Add(),
Name('positive', Load(), lineno=251, col_offset=27), lineno=251,
col_offset=20), Add(), ListComp(UnaryOp(USub(), Name('x', Load(),
lineno=251, col_offset=40), lineno=251, col_offset=39),
[comprehension(Name('x', Store(), lineno=251, col_offset=46),
Name('positive', Load(), lineno=251, col_offset=51), [])], lineno=251,
col_offset=39), lineno=251, col_offset=36), lineno=251, col_offset=8),
Assign([Name('test_functions', Store(), lineno=253, col_offset=8)],
Dict([Str('acos', lineno=254, col_offset=12), Str('asin', lineno=255,
col_offset=12), Str('atan', lineno=256, col_offset=12), Str('cos',
lineno=257, col_offset=12), Str('cosh', lineno=258, col_offset=12),
Str('exp', lineno=259, col_offset=12), Str('log', lineno=260,
col_offset=12), Str('log10', lineno=261, col_offset=12), Str('sin',
lineno=262, col_offset=12), Str('sinh', lineno=263, col_offset=12),
Str('sqrt', lineno=264, col_offset=12), Str('tan', lineno=265,
col_offset=12), Str('tanh', lineno=266, col_offset=12)],
[Name('unit_interval', Load(), lineno=254, col_offset=21),
Name('unit_interval', Load(), lineno=255, col_offset=21),
Name('real_line', Load(), lineno=256, col_offset=21),
Name('real_line', Load(), lineno=257, col_offset=20),
Name('real_line', Load(), lineno=258, col_offset=21),
Name('real_line', Load(), lineno=259, col_offset=20), Name('positive',
Load(), lineno=260, col_offset=20), Name('positive', Load(),
lineno=261, col_offset=22), Name('real_line', Load(), lineno=262,
col_offset=20), Name('real_line', Load(), lineno=263, col_offset=21),
Name('nonnegative', Load(), lineno=264, col_offset=21),
Name('real_line', Load(), lineno=265, col_offset=20),
Name('real_line', Load(), lineno=266, col_offset=21)], lineno=253,
col_offset=25), lineno=253, col_offset=8), For(Tuple([Name('fn',
Store(), lineno=268, col_offset=12), Name('values', Store(),
lineno=268, col_offset=16)], Store(), lineno=268, col_offset=12),
Call(Attribute(Name('test_functions', Load(), lineno=268,
col_offset=26), 'items', Load(), lineno=268, col_offset=26), [], [],
None, None, lineno=268, col_offset=26), [Assign([Name('float_fn',
Store(), lineno=269, col_offset=12)], Call(Name('getattr', Load(),
lineno=269, col_offset=23), [Name('math', Load(), lineno=269,
col_offset=31), Name('fn', Load(), lineno=269, col_offset=37)], [],
None, None, lineno=269, col_offset=23), lineno=269, col_offset=12),
Assign([Name('complex_fn', Store(), lineno=270, col_offset=12)],
Call(Name('getattr', Load(), lineno=270, col_offset=25),
[Name('cmath', Load(), lineno=270, col_offset=33), Name('fn', Load(),
lineno=270, col_offset=40)], [], None, None, lineno=270,
col_offset=25), lineno=270, col_offset=12), For(Name('v', Store(),
lineno=271, col_offset=16), Name('values', Load(), lineno=271,
col_offset=21), [Assign([Name('z', Store(), lineno=272,
col_offset=16)], Call(Name('complex_fn', Load(), lineno=272,
col_offset=20), [Name('v', Load(), lineno=272, col_offset=31)], [],
None, None, lineno=272, col_offset=20), lineno=272, col_offset=16),
Expr(Call(Attribute(Name('self', Load(), lineno=273, col_offset=16),
'rAssertAlmostEqual', Load(), lineno=273, col_offset=16),
[Call(Name('float_fn', Load(), lineno=273, col_offset=40), [Name('v',
Load(), lineno=273, col_offset=49)], [], None, None, lineno=273,
col_offset=40), Attribute(Name('z', Load(), lineno=273,
col_offset=53), 'real', Load(), lineno=273, col_offset=53)], [], None,
None, lineno=273, col_offset=16), lineno=273, col_offset=16),
Expr(Call(Attribute(Name('self', Load(), lineno=274, col_offset=16),
'assertEqual', Load(), lineno=274, col_offset=16), [Num(0.0,
lineno=274, col_offset=33), Attribute(Name('z', Load(), lineno=274,
col_offset=37), 'imag', Load(), lineno=274, col_offset=37)], [], None,
None, lineno=274, col_offset=16), lineno=274, col_offset=16)], [],
lineno=271, col_offset=12)], [], lineno=268, col_offset=8),
For(Name('base', Store(), lineno=277, col_offset=12), List([Num(0.5,
lineno=277, col_offset=21), Num(2.0, lineno=277, col_offset=26),
Num(10.0, lineno=277, col_offset=30)], Load(), lineno=277,
col_offset=20), [For(Name('v', Store(), lineno=278, col_offset=16),
Name('positive', Load(), lineno=278, col_offset=21),
[Assign([Name('z', Store(), lineno=279, col_offset=16)],
Call(Attribute(Name('cmath', Load(), lineno=279, col_offset=20),
'log', Load(), lineno=279, col_offset=20), [Name('v', Load(),
lineno=279, col_offset=30), Name('base', Load(), lineno=279,
col_offset=33)], [], None, None, lineno=279, col_offset=20),
lineno=279, col_offset=16), Expr(Call(Attribute(Name('self', Load(),
lineno=280, col_offset=16), 'rAssertAlmostEqual', Load(), lineno=280,
col_offset=16), [Call(Attribute(Name('math', Load(), lineno=280,
col_offset=40), 'log', Load(), lineno=280, col_offset=40), [Name('v',
Load(), lineno=280, col_offset=49), Name('base', Load(), lineno=280,
col_offset=52)], [], None, None, lineno=280, col_offset=40),
Attribute(Name('z', Load(), lineno=280, col_offset=59), 'real',
Load(), lineno=280, col_offset=59)], [], None, None, lineno=280,
col_offset=16), lineno=280, col_offset=16),
Expr(Call(Attribute(Name('self', Load(), lineno=281, col_offset=16),
'assertEqual', Load(), lineno=281, col_offset=16), [Num(0.0,
lineno=281, col_offset=33), Attribute(Name('z', Load(), lineno=281,
col_offset=37), 'imag', Load(), lineno=281, col_offset=37)], [], None,
None, lineno=281, col_offset=16), lineno=281, col_offset=16)], [],
lineno=278, col_offset=12)], [], lineno=277, col_offset=8)], [],
lineno=235, col_offset=4), FunctionDef('test_specific_values',
arguments([Name('self', Param(), lineno=283, col_offset=29)], None,
None, []), [If(UnaryOp(Not(),
Call(Attribute(Call(Attribute(Name('float', Load(), lineno=284,
col_offset=15), '__getformat__', Load(), lineno=284, col_offset=15),
[Str('double', lineno=284, col_offset=35)], [], None, None,
lineno=284, col_offset=15), 'startswith', Load(), lineno=284,
col_offset=15), [Str('IEEE', lineno=284, col_offset=56)], [], None,
None, lineno=284, col_offset=15), lineno=284, col_offset=11),
[Return(None, lineno=285, col_offset=12)], [], lineno=284,
col_offset=8), FunctionDef('rect_complex', arguments([Name('z',
Param(), lineno=287, col_offset=25)], None, None, []),
[Expr(Str('Wrapped version of rect that accepts a complex number
instead of\n two float arguments.', lineno=289, col_offset=-1),
lineno=289, col_offset=-1), Return(Call(Attribute(Name('cmath',
Load(), lineno=290, col_offset=19), 'rect', Load(), lineno=290,
col_offset=19), [Attribute(Name('z', Load(), lineno=290,
col_offset=30), 'real', Load(), lineno=290, col_offset=30),
Attribute(Name('z', Load(), lineno=290, col_offset=38), 'imag',
Load(), lineno=290, col_offset=38)], [], None, None, lineno=290,
col_offset=19), lineno=290, col_offset=12)], [], lineno=287,
col_offset=8), FunctionDef('polar_complex', arguments([Name('z',
Param(), lineno=292, col_offset=26)], None, None, []),
[Expr(Str('Wrapped version of polar that returns a complex number
instead of\n two floats.', lineno=294, col_offset=-1), lineno=294,
col_offset=-1), Return(Call(Name('complex', Load(), lineno=295,
col_offset=19), [], [], Call(Name('polar', Load(), lineno=295,
col_offset=28), [Name('z', Load(), lineno=295, col_offset=34)], [],
None, None, lineno=295, col_offset=28), None, lineno=295,
col_offset=19), lineno=295, col_offset=12)], [], lineno=292,
col_offset=8), For(Tuple([Name('id', Store(), lineno=297,
col_offset=12), Name('fn', Store(), lineno=297, col_offset=16),
Name('ar', Store(), lineno=297, col_offset=20), Name('ai', Store(),
lineno=297, col_offset=24), Name('er', Store(), lineno=297,
col_offset=28), Name('ei', Store(), lineno=297, col_offset=32),
Name('flags', Store(), lineno=297, col_offset=36)], Store(),
lineno=297, col_offset=12), Call(Name('parse_testfile', Load(),
lineno=297, col_offset=45), [Name('test_file', Load(), lineno=297,
col_offset=60)], [], None, None, lineno=297, col_offset=45),
[Assign([Name('arg', Store(), lineno=298, col_offset=12)],
Call(Name('complex', Load(), lineno=298, col_offset=18), [Name('ar',
Load(), lineno=298, col_offset=26), Name('ai', Load(), lineno=298,
col_offset=30)], [], None, None, lineno=298, col_offset=18),
lineno=298, col_offset=12), Assign([Name('expected', Store(),
lineno=299, col_offset=12)], Call(Name('complex', Load(), lineno=299,
col_offset=23), [Name('er', Load(), lineno=299, col_offset=31),
Name('ei', Load(), lineno=299, col_offset=35)], [], None, None,
lineno=299, col_offset=23), lineno=299, col_offset=12),
If(Compare(Name('fn', Load(), lineno=300, col_offset=15), [Eq()],
[Str('rect', lineno=300, col_offset=21)], lineno=300, col_offset=15),
[Assign([Name('function', Store(), lineno=301, col_offset=16)],
Name('rect_complex', Load(), lineno=301, col_offset=27), lineno=301,
col_offset=16)], [If(Compare(Name('fn', Load(), lineno=302,
col_offset=17), [Eq()], [Str('polar', lineno=302, col_offset=23)],
lineno=302, col_offset=17), [Assign([Name('function', Store(),
lineno=303, col_offset=16)], Name('polar_complex', Load(), lineno=303,
col_offset=27), lineno=303, col_offset=16)], [Assign([Name('function',
Store(), lineno=305, col_offset=16)], Call(Name('getattr', Load(),
lineno=305, col_offset=27), [Name('cmath', Load(), lineno=305,
col_offset=35), Name('fn', Load(), lineno=305, col_offset=42)], [],
None, None, lineno=305, col_offset=27), lineno=305, col_offset=16)],
lineno=302, col_offset=17)], lineno=300, col_offset=12),
If(BoolOp(Or(), [Compare(Str('divide-by-zero', lineno=306,
col_offset=15), [In()], [Name('flags', Load(), lineno=306,
col_offset=35)], lineno=306, col_offset=15), Compare(Str('invalid',
lineno=306, col_offset=44), [In()], [Name('flags', Load(), lineno=306,
col_offset=57)], lineno=306, col_offset=44)], lineno=306,
col_offset=15), [TryExcept([Assign([Name('actual', Store(),
lineno=308, col_offset=20)], Call(Name('function', Load(), lineno=308,
col_offset=29), [Name('arg', Load(), lineno=308, col_offset=38)], [],
None, None, lineno=308, col_offset=29), lineno=308, col_offset=20)],
[ExceptHandler(Name('ValueError', Load(), lineno=309, col_offset=23),
None, [Continue( lineno=310, col_offset=20)], lineno=309,
col_offset=16)], [Expr(Call(Attribute(Name('self', Load(), lineno=312,
col_offset=20), 'fail', Load(), lineno=312, col_offset=20),
[Call(Attribute(Str('ValueError not raised in test {}:
{}(complex({!r}, {!r}))', lineno=312, col_offset=30), 'format',
Load(), lineno=312, col_offset=30), [Name('id', Load(), lineno=313,
col_offset=63), Name('fn', Load(), lineno=313, col_offset=67),
Name('ar', Load(), lineno=313, col_offset=71), Name('ai', Load(),
lineno=313, col_offset=75)], [], None, None, lineno=312,
col_offset=30)], [], None, None, lineno=312, col_offset=20),
lineno=312, col_offset=20)], lineno=307, col_offset=16)], [],
lineno=306, col_offset=12), If(Compare(Str('overflow', lineno=315,
col_offset=15), [In()], [Name('flags', Load(), lineno=315,
col_offset=29)], lineno=315, col_offset=15),
[TryExcept([Assign([Name('actual', Store(), lineno=317,
col_offset=20)], Call(Name('function', Load(), lineno=317,
col_offset=29), [Name('arg', Load(), lineno=317, col_offset=38)], [],
None, None, lineno=317, col_offset=29), lineno=317, col_offset=20)],
[ExceptHandler(Name('OverflowError', Load(), lineno=318,
col_offset=23), None, [Continue( lineno=319, col_offset=20)],
lineno=318, col_offset=16)], [Expr(Call(Attribute(Name('self', Load(),
lineno=321, col_offset=20), 'fail', Load(), lineno=321,
col_offset=20), [Call(Attribute(Str('OverflowError not raised in test
{}: {}(complex({!r}, {!r}))', lineno=321, col_offset=30), 'format',
Load(), lineno=321, col_offset=30), [Name('id', Load(), lineno=322,
col_offset=63), Name('fn', Load(), lineno=322, col_offset=67),
Name('ar', Load(), lineno=322, col_offset=71), Name('ai', Load(),
lineno=322, col_offset=75)], [], None, None, lineno=321,
col_offset=30)], [], None, None, lineno=321, col_offset=20),
lineno=321, col_offset=20)], lineno=316, col_offset=16)], [],
lineno=315, col_offset=12), Assign([Name('actual', Store(),
lineno=324, col_offset=12)], Call(Name('function', Load(), lineno=324,
col_offset=21), [Name('arg', Load(), lineno=324, col_offset=30)], [],
None, None, lineno=324, col_offset=21), lineno=324, col_offset=12),
If(Compare(Str('ignore-real-sign', lineno=326, col_offset=15), [In()],
[Name('flags', Load(), lineno=326, col_offset=37)], lineno=326,
col_offset=15), [Assign([Name('actual', Store(), lineno=327,
col_offset=16)], Call(Name('complex', Load(), lineno=327,
col_offset=25), [Call(Name('abs', Load(), lineno=327, col_offset=33),
[Attribute(Name('actual', Load(), lineno=327, col_offset=37), 'real',
Load(), lineno=327, col_offset=37)], [], None, None, lineno=327,
col_offset=33), Attribute(Name('actual', Load(), lineno=327,
col_offset=51), 'imag', Load(), lineno=327, col_offset=51)], [], None,
None, lineno=327, col_offset=25), lineno=327, col_offset=16),
Assign([Name('expected', Store(), lineno=328, col_offset=16)],
Call(Name('complex', Load(), lineno=328, col_offset=27),
[Call(Name('abs', Load(), lineno=328, col_offset=35),
[Attribute(Name('expected', Load(), lineno=328, col_offset=39),
'real', Load(), lineno=328, col_offset=39)], [], None, None,
lineno=328, col_offset=35), Attribute(Name('expected', Load(),
lineno=328, col_offset=55), 'imag', Load(), lineno=328,
col_offset=55)], [], None, None, lineno=328, col_offset=27),
lineno=328, col_offset=16)], [], lineno=326, col_offset=12),
If(Compare(Str('ignore-imag-sign', lineno=329, col_offset=15), [In()],
[Name('flags', Load(), lineno=329, col_offset=37)], lineno=329,
col_offset=15), [Assign([Name('actual', Store(), lineno=330,
col_offset=16)], Call(Name('complex', Load(), lineno=330,
col_offset=25), [Attribute(Name('actual', Load(), lineno=330,
col_offset=33), 'real', Load(), lineno=330, col_offset=33),
Call(Name('abs', Load(), lineno=330, col_offset=46),
[Attribute(Name('actual', Load(), lineno=330, col_offset=50), 'imag',
Load(), lineno=330, col_offset=50)], [], None, None, lineno=330,
col_offset=46)], [], None, None, lineno=330, col_offset=25),
lineno=330, col_offset=16), Assign([Name('expected', Store(),
lineno=331, col_offset=16)], Call(Name('complex', Load(), lineno=331,
col_offset=27), [Attribute(Name('expected', Load(), lineno=331,
col_offset=35), 'real', Load(), lineno=331, col_offset=35),
Call(Name('abs', Load(), lineno=331, col_offset=50),
[Attribute(Name('expected', Load(), lineno=331, col_offset=54),
'imag', Load(), lineno=331, col_offset=54)], [], None, None,
lineno=331, col_offset=50)], [], None, None, lineno=331,
col_offset=27), lineno=331, col_offset=16)], [], lineno=329,
col_offset=12), If(Compare(Name('fn', Load(), lineno=335,
col_offset=15), [In()], [Tuple([Str('log', lineno=335, col_offset=22),
Str('log10', lineno=335, col_offset=29)], Load(), lineno=335,
col_offset=22)], lineno=335, col_offset=15),
[Assign([Name('real_abs_err', Store(), lineno=336, col_offset=16)],
Num(2e-15, lineno=336, col_offset=31), lineno=336, col_offset=16)],
[Assign([Name('real_abs_err', Store(), lineno=338, col_offset=16)],
Num(5e-323, lineno=338, col_offset=31), lineno=338, col_offset=16)],
lineno=335, col_offset=12), Assign([Name('error_message', Store(),
lineno=340, col_offset=12)], Call(Attribute(Str('{}: {}(complex({!r},
{!r}))\nExpected: complex({!r}, {!r})\nReceived: complex({!r},
{!r})\nReceived value insufficiently close to expected value.',
lineno=341, col_offset=16), 'format', Load(), lineno=341,
col_offset=16), [Name('id', Load(), lineno=345, col_offset=25),
Name('fn', Load(), lineno=345, col_offset=29), Name('ar', Load(),
lineno=345, col_offset=33), Name('ai', Load(), lineno=345,
col_offset=37), Attribute(Name('expected', Load(), lineno=346,
col_offset=21), 'real', Load(), lineno=346, col_offset=21),
Attribute(Name('expected', Load(), lineno=346, col_offset=36), 'imag',
Load(), lineno=346, col_offset=36), Attribute(Name('actual', Load(),
lineno=347, col_offset=21), 'real', Load(), lineno=347,
col_offset=21), Attribute(Name('actual', Load(), lineno=347,
col_offset=34), 'imag', Load(), lineno=347, col_offset=34)], [], None,
None, lineno=341, col_offset=16), lineno=340, col_offset=12),
Expr(Call(Attribute(Name('self', Load(), lineno=348, col_offset=12),
'rAssertAlmostEqual', Load(), lineno=348, col_offset=12),
[Attribute(Name('expected', Load(), lineno=348, col_offset=36),
'real', Load(), lineno=348, col_offset=36), Attribute(Name('actual',
Load(), lineno=348, col_offset=51), 'real', Load(), lineno=348,
col_offset=51)], [keyword('abs_err', Name('real_abs_err', Load(),
lineno=349, col_offset=48)), keyword('msg', Name('error_message',
Load(), lineno=350, col_offset=44))], None, None, lineno=348,
col_offset=12), lineno=348, col_offset=12),
Expr(Call(Attribute(Name('self', Load(), lineno=351, col_offset=12),
'rAssertAlmostEqual', Load(), lineno=351, col_offset=12),
[Attribute(Name('expected', Load(), lineno=351, col_offset=36),
'imag', Load(), lineno=351, col_offset=36), Attribute(Name('actual',
Load(), lineno=351, col_offset=51), 'imag', Load(), lineno=351,
col_offset=51)], [keyword('msg', Name('error_message', Load(),
lineno=352, col_offset=44))], None, None, lineno=351, col_offset=12),
lineno=351, col_offset=12)], [], lineno=297, col_offset=8)], [],
lineno=283, col_offset=4), FunctionDef('assertCISEqual',
arguments([Name('self', Param(), lineno=354, col_offset=23), Name('a',
Param(), lineno=354, col_offset=29), Name('b', Param(), lineno=354,
col_offset=32)], None, None, []), [Assign([Name('eps', Store(),
lineno=355, col_offset=8)], Num(1e-07, lineno=355, col_offset=14),
lineno=355, col_offset=8), If(BoolOp(Or(), [Compare(Call(Name('abs',
Load(), lineno=356, col_offset=11), [BinOp(Subscript(Name('a', Load(),
lineno=356, col_offset=15), Index(Num(0, lineno=356, col_offset=17)),
Load(), lineno=356, col_offset=15), Sub(), Subscript(Name('b', Load(),
lineno=356, col_offset=22), Index(Num(0, lineno=356, col_offset=24)),
Load(), lineno=356, col_offset=22), lineno=356, col_offset=15)], [],
None, None, lineno=356, col_offset=11), [Gt()], [Name('eps', Load(),
lineno=356, col_offset=30)], lineno=356, col_offset=11),
Compare(Call(Name('abs', Load(), lineno=356, col_offset=37),
[BinOp(Subscript(Name('a', Load(), lineno=356, col_offset=41),
Index(Num(1, lineno=356, col_offset=43)), Load(), lineno=356,
col_offset=41), Sub(), Subscript(Name('b', Load(), lineno=356,
col_offset=48), Index(Num(1, lineno=356, col_offset=50)), Load(),
lineno=356, col_offset=48), lineno=356, col_offset=41)], [], None,
None, lineno=356, col_offset=37), [Gt()], [Name('eps', Load(),
lineno=356, col_offset=56)], lineno=356, col_offset=37)], lineno=356,
col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=357,
col_offset=12), 'fail', Load(), lineno=357, col_offset=12),
[Tuple([Name('a', Load(), lineno=357, col_offset=23), Name('b',
Load(), lineno=357, col_offset=26)], Load(), lineno=357,
col_offset=23)], [], None, None, lineno=357, col_offset=12),
lineno=357, col_offset=12)], [], lineno=356, col_offset=8)], [],
lineno=354, col_offset=4), FunctionDef('test_polar',
arguments([Name('self', Param(), lineno=359, col_offset=19)], None,
None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=360,
col_offset=8), 'assertCISEqual', Load(), lineno=360, col_offset=8),
[Call(Name('polar', Load(), lineno=360, col_offset=28), [Num(0,
lineno=360, col_offset=34)], [], None, None, lineno=360,
col_offset=28), Tuple([Num(0.0, lineno=360, col_offset=39), Num(0.0,
lineno=360, col_offset=43)], Load(), lineno=360, col_offset=39)], [],
None, None, lineno=360, col_offset=8), lineno=360, col_offset=8),
Expr(Call(Attribute(Name('self', Load(), lineno=361, col_offset=8),
'assertCISEqual', Load(), lineno=361, col_offset=8),
[Call(Name('polar', Load(), lineno=361, col_offset=28), [Num(1.0,
lineno=361, col_offset=34)], [], None, None, lineno=361,
col_offset=28), Tuple([Num(1.0, lineno=361, col_offset=40), Num(0.0,
lineno=361, col_offset=44)], Load(), lineno=361, col_offset=40)], [],
None, None, lineno=361, col_offset=8), lineno=361, col_offset=8),
Expr(Call(Attribute(Name('self', Load(), lineno=362, col_offset=8),
'assertCISEqual', Load(), lineno=362, col_offset=8),
[Call(Name('polar', Load(), lineno=362, col_offset=28), [Num(-1.0,
lineno=362, col_offset=35)], [], None, None, lineno=362,
col_offset=28), Tuple([Num(1.0, lineno=362, col_offset=41), Name('pi',
Load(), lineno=362, col_offset=45)], Load(), lineno=362,
col_offset=41)], [], None, None, lineno=362, col_offset=8),
lineno=362, col_offset=8), Expr(Call(Attribute(Name('self', Load(),
lineno=363, col_offset=8), 'assertCISEqual', Load(), lineno=363,
col_offset=8), [Call(Name('polar', Load(), lineno=363, col_offset=28),
[Num(1j, lineno=363, col_offset=34)], [], None, None, lineno=363,
col_offset=28), Tuple([Num(1.0, lineno=363, col_offset=40),
BinOp(Name('pi', Load(), lineno=363, col_offset=44), Div(), Num(2,
lineno=363, col_offset=47), lineno=363, col_offset=44)], Load(),
lineno=363, col_offset=40)], [], None, None, lineno=363,
col_offset=8), lineno=363, col_offset=8),
Expr(Call(Attribute(Name('self', Load(), lineno=364, col_offset=8),
'assertCISEqual', Load(), lineno=364, col_offset=8),
[Call(Name('polar', Load(), lineno=364, col_offset=28), [Num(-1j,
lineno=364, col_offset=35)], [], None, None, lineno=364,
col_offset=28), Tuple([Num(1.0, lineno=364, col_offset=41),
BinOp(UnaryOp(USub(), Name('pi', Load(), lineno=364, col_offset=46),
lineno=364, col_offset=45), Div(), Num(2, lineno=364, col_offset=49),
lineno=364, col_offset=45)], Load(), lineno=364, col_offset=41)], [],
None, None, lineno=364, col_offset=8), lineno=364, col_offset=8)], [],
lineno=359, col_offset=4), FunctionDef('test_phase',
arguments([Name('self', Param(), lineno=366, col_offset=19)], None,
None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=367,
col_offset=8), 'assertAlmostEqual', Load(), lineno=367, col_offset=8),
[Call(Name('phase', Load(), lineno=367, col_offset=31), [Num(0,
lineno=367, col_offset=37)], [], None, None, lineno=367,
col_offset=31), Num(0.0, lineno=367, col_offset=41)], [], None, None,
lineno=367, col_offset=8), lineno=367, col_offset=8),
Expr(Call(Attribute(Name('self', Load(), lineno=368, col_offset=8),
'assertAlmostEqual', Load(), lineno=368, col_offset=8),
[Call(Name('phase', Load(), lineno=368, col_offset=31), [Num(1.0,
lineno=368, col_offset=37)], [], None, None, lineno=368,
col_offset=31), Num(0.0, lineno=368, col_offset=42)], [], None, None,
lineno=368, col_offset=8), lineno=368, col_offset=8),
Expr(Call(Attribute(Name('self', Load(), lineno=369, col_offset=8),
'assertAlmostEqual', Load(), lineno=369, col_offset=8),
[Call(Name('phase', Load(), lineno=369, col_offset=31), [Num(-1.0,
lineno=369, col_offset=38)], [], None, None, lineno=369,
col_offset=31), Name('pi', Load(), lineno=369, col_offset=43)], [],
None, None, lineno=369, col_offset=8), lineno=369, col_offset=8),
Expr(Call(Attribute(Name('self', Load(), lineno=370, col_offset=8),
'assertAlmostEqual', Load(), lineno=370, col_offset=8),
[Call(Name('phase', Load(), lineno=370, col_offset=31),
[BinOp(Num(-1.0, lineno=370, col_offset=38), Add(), Num(1e-300j,
lineno=370, col_offset=41), lineno=370, col_offset=37)], [], None,
None, lineno=370, col_offset=31), Name('pi', Load(), lineno=370,
col_offset=51)], [], None, None, lineno=370, col_offset=8),
lineno=370, col_offset=8), Expr(Call(Attribute(Name('self', Load(),
lineno=371, col_offset=8), 'assertAlmostEqual', Load(), lineno=371,
col_offset=8), [Call(Name('phase', Load(), lineno=371, col_offset=31),
[BinOp(Num(-1.0, lineno=371, col_offset=38), Sub(), Num(1e-300j,
lineno=371, col_offset=41), lineno=371, col_offset=37)], [], None,
None, lineno=371, col_offset=31), UnaryOp(USub(), Name('pi', Load(),
lineno=371, col_offset=52), lineno=371, col_offset=51)], [], None,
None, lineno=371, col_offset=8), lineno=371, col_offset=8),
Expr(Call(Attribute(Name('self', Load(), lineno=372, col_offset=8),
'assertAlmostEqual', Load(), lineno=372, col_offset=8),
[Call(Name('phase', Load(), lineno=372, col_offset=31), [Num(1j,
lineno=372, col_offset=37)], [], None, None, lineno=372,
col_offset=31), BinOp(Name('pi', Load(), lineno=372, col_offset=42),
Div(), Num(2, lineno=372, col_offset=45), lineno=372, col_offset=42)],
[], None, None, lineno=372, col_offset=8), lineno=372, col_offset=8),
Expr(Call(Attribute(Name('self', Load(), lineno=373, col_offset=8),
'assertAlmostEqual', Load(), lineno=373, col_offset=8),
[Call(Name('phase', Load(), lineno=373, col_offset=31), [Num(-1j,
lineno=373, col_offset=38)], [], None, None, lineno=373,
col_offset=31), BinOp(UnaryOp(USub(), Name('pi', Load(), lineno=373,
col_offset=44), lineno=373, col_offset=43), Div(), Num(2, lineno=373,
col_offset=47), lineno=373, col_offset=43)], [], None, None,
lineno=373, col_offset=8), lineno=373, col_offset=8),
Expr(Call(Attribute(Name('self', Load(), lineno=376, col_offset=8),
'assertEqual', Load(), lineno=376, col_offset=8), [Call(Name('phase',
Load(), lineno=376, col_offset=25), [Call(Name('complex', Load(),
lineno=376, col_offset=31), [Num(0.0, lineno=376, col_offset=39),
Num(0.0, lineno=376, col_offset=44)], [], None, None, lineno=376,
col_offset=31)], [], None, None, lineno=376, col_offset=25), Num(0.0,
lineno=376, col_offset=51)], [], None, None, lineno=376,
col_offset=8), lineno=376, col_offset=8),
Expr(Call(Attribute(Name('self', Load(), lineno=377, col_offset=8),
'assertEqual', Load(), lineno=377, col_offset=8), [Call(Name('phase',
Load(), lineno=377, col_offset=25), [Call(Name('complex', Load(),
lineno=377, col_offset=31), [Num(0.0, lineno=377, col_offset=39),
Num(-0.0, lineno=377, col_offset=45)], [], None, None, lineno=377,
col_offset=31)], [], None, None, lineno=377, col_offset=25), Num(-0.0,
lineno=377, col_offset=53)], [], None, None, lineno=377,
col_offset=8), lineno=377, col_offset=8),
Expr(Call(Attribute(Name('self', Load(), lineno=378, col_offset=8),
'assertEqual', Load(), lineno=378, col_offset=8), [Call(Name('phase',
Load(), lineno=378, col_offset=25), [Call(Name('complex', Load(),
lineno=378, col_offset=31), [Num(-0.0, lineno=378, col_offset=40),
Num(0.0, lineno=378, col_offset=45)], [], None, None, lineno=378,
col_offset=31)], [], None, None, lineno=378, col_offset=25),
Name('pi', Load(), lineno=378, col_offset=52)], [], None, None,
lineno=378, col_offset=8), lineno=378, col_offset=8),
Expr(Call(Attribute(Name('self', Load(), lineno=379, col_offset=8),
'assertEqual', Load(), lineno=379, col_offset=8), [Call(Name('phase',
Load(), lineno=379, col_offset=25), [Call(Name('complex', Load(),
lineno=379, col_offset=31), [Num(-0.0, lineno=379, col_offset=40),
Num(-0.0, lineno=379, col_offset=46)], [], None, None, lineno=379,
col_offset=31)], [], None, None, lineno=379, col_offset=25),
UnaryOp(USub(), Name('pi', Load(), lineno=379, col_offset=54),
lineno=379, col_offset=53)], [], None, None, lineno=379,
col_offset=8), lineno=379, col_offset=8),
Expr(Call(Attribute(Name('self', Load(), lineno=382, col_offset=8),
'assertAlmostEqual', Load(), lineno=382, col_offset=8),
[Call(Name('phase', Load(), lineno=382, col_offset=31),
[Call(Name('complex', Load(), lineno=382, col_offset=37),
[UnaryOp(USub(), Name('INF', Load(), lineno=382, col_offset=46),
lineno=382, col_offset=45), Num(-0.0, lineno=382, col_offset=52)], [],
None, None, lineno=382, col_offset=37)], [], None, None, lineno=382,
col_offset=31), UnaryOp(USub(), Name('pi', Load(), lineno=382,
col_offset=60), lineno=382, col_offset=59)], [], None, None,
lineno=382, col_offset=8), lineno=382, col_offset=8),
Expr(Call(Attribute(Name('self', Load(), lineno=383, col_offset=8),
'assertAlmostEqual', Load(), lineno=383, col_offset=8),
[Call(Name('phase', Load(), lineno=383, col_offset=31),
[Call(Name('complex', Load(), lineno=383, col_offset=37),
[UnaryOp(USub(), Name('INF', Load(), lineno=383, col_offset=46),
lineno=383, col_offset=45), Num(-2.3, lineno=383, col_offset=52)], [],
None, None, lineno=383, col_offset=37)], [], None, None, lineno=383,
col_offset=31), UnaryOp(USub(), Name('pi', Load(), lineno=383,
col_offset=60), lineno=383, col_offset=59)], [], None, None,
lineno=383, col_offset=8), lineno=383, col_offset=8),
Expr(Call(Attribute(Name('self', Load(), lineno=384, col_offset=8),
'assertAlmostEqual', Load(), lineno=384, col_offset=8),
[Call(Name('phase', Load(), lineno=384, col_offset=31),
[Call(Name('complex', Load(), lineno=384, col_offset=37),
[UnaryOp(USub(), Name('INF', Load(), lineno=384, col_offset=46),
lineno=384, col_offset=45), UnaryOp(USub(), Name('INF', Load(),
lineno=384, col_offset=52), lineno=384, col_offset=51)], [], None,
None, lineno=384, col_offset=37)], [], None, None, lineno=384,
col_offset=31), BinOp(Num(-0.75, lineno=384, col_offset=60), Mult(),
Name('pi', Load(), lineno=384, col_offset=65), lineno=384,
col_offset=59)], [], None, None, lineno=384, col_offset=8),
lineno=384, col_offset=8), Expr(Call(Attribute(Name('self', Load(),
lineno=385, col_offset=8), 'assertAlmostEqual', Load(), lineno=385,
col_offset=8), [Call(Name('phase', Load(), lineno=385, col_offset=31),
[Call(Name('complex', Load(), lineno=385, col_offset=37), [Num(-2.3,
lineno=385, col_offset=46), UnaryOp(USub(), Name('INF', Load(),
lineno=385, col_offset=52), lineno=385, col_offset=51)], [], None,
None, lineno=385, col_offset=37)], [], None, None, lineno=385,
col_offset=31), BinOp(UnaryOp(USub(), Name('pi', Load(), lineno=385,
col_offset=60), lineno=385, col_offset=59), Div(), Num(2, lineno=385,
col_offset=63), lineno=385, col_offset=59)], [], None, None,
lineno=385, col_offset=8), lineno=385, col_offset=8),
Expr(Call(Attribute(Name('self', Load(), lineno=386, col_offset=8),
'assertAlmostEqual', Load(), lineno=386, col_offset=8),
[Call(Name('phase', Load(), lineno=386, col_offset=31),
[Call(Name('complex', Load(), lineno=386, col_offset=37), [Num(-0.0,
lineno=386, col_offset=46), UnaryOp(USub(), Name('INF', Load(),
lineno=386, col_offset=52), lineno=386, col_offset=51)], [], None,
None, lineno=386, col_offset=37)], [], None, None, lineno=386,
col_offset=31), BinOp(UnaryOp(USub(), Name('pi', Load(), lineno=386,
col_offset=60), lineno=386, col_offset=59), Div(), Num(2, lineno=386,
col_offset=63), lineno=386, col_offset=59)], [], None, None,
lineno=386, col_offset=8), lineno=386, col_offset=8),
Expr(Call(Attribute(Name('self', Load(), lineno=387, col_offset=8),
'assertAlmostEqual', Load(), lineno=387, col_offset=8),
[Call(Name('phase', Load(), lineno=387, col_offset=31),
[Call(Name('complex', Load(), lineno=387, col_offset=37), [Num(0.0,
lineno=387, col_offset=45), UnaryOp(USub(), Name('INF', Load(),
lineno=387, col_offset=51), lineno=387, col_offset=50)], [], None,
None, lineno=387, col_offset=37)], [], None, None, lineno=387,
col_offset=31), BinOp(UnaryOp(USub(), Name('pi', Load(), lineno=387,
col_offset=59), lineno=387, col_offset=58), Div(), Num(2, lineno=387,
col_offset=62), lineno=387, col_offset=58)], [], None, None,
lineno=387, col_offset=8), lineno=387, col_offset=8),
Expr(Call(Attribute(Name('self', Load(), lineno=388, col_offset=8),
'assertAlmostEqual', Load(), lineno=388, col_offset=8),
[Call(Name('phase', Load(), lineno=388, col_offset=31),
[Call(Name('complex', Load(), lineno=388, col_offset=37), [Num(2.3,
lineno=388, col_offset=45), UnaryOp(USub(), Name('INF', Load(),
lineno=388, col_offset=51), lineno=388, col_offset=50)], [], None,
None, lineno=388, col_offset=37)], [], None, None, lineno=388,
col_offset=31), BinOp(UnaryOp(USub(), Name('pi', Load(), lineno=388,
col_offset=59), lineno=388, col_offset=58), Div(), Num(2, lineno=388,
col_offset=62), lineno=388, col_offset=58)], [], None, None,
lineno=388, col_offset=8), lineno=388, col_offset=8),
Expr(Call(Attribute(Name('self', Load(), lineno=389, col_offset=8),
'assertAlmostEqual', Load(), lineno=389, col_offset=8),
[Call(Name('phase', Load(), lineno=389, col_offset=31),
[Call(Name('complex', Load(), lineno=389, col_offset=37), [Name('INF',
Load(), lineno=389, col_offset=45), UnaryOp(USub(), Name('INF',
Load(), lineno=389, col_offset=51), lineno=389, col_offset=50)], [],
None, None, lineno=389, col_offset=37)], [], None, None, lineno=389,
col_offset=31), BinOp(UnaryOp(USub(), Name('pi', Load(), lineno=389,
col_offset=59), lineno=389, col_offset=58), Div(), Num(4, lineno=389,
col_offset=62), lineno=389, col_offset=58)], [], None, None,
lineno=389, col_offset=8), lineno=389, col_offset=8),
Expr(Call(Attribute(Name('self', Load(), lineno=390, col_offset=8),
'assertEqual', Load(), lineno=390, col_offset=8), [Call(Name('phase',
Load(), lineno=390, col_offset=25), [Call(Name('complex', Load(),
lineno=390, col_offset=31), [Name('INF', Load(), lineno=390,
col_offset=39), Num(-2.3, lineno=390, col_offset=45)], [], None, None,
lineno=390, col_offset=31)], [], None, None, lineno=390,
col_offset=25), Num(-0.0, lineno=390, col_offset=53)], [], None, None,
lineno=390, col_offset=8), lineno=390, col_offset=8),
Expr(Call(Attribute(Name('self', Load(), lineno=391, col_offset=8),
'assertEqual', Load(), lineno=391, col_offset=8), [Call(Name('phase',
Load(), lineno=391, col_offset=25), [Call(Name('complex', Load(),
lineno=391, col_offset=31), [Name('INF', Load(), lineno=391,
col_offset=39), Num(-0.0, lineno=391, col_offset=45)], [], None, None,
lineno=391, col_offset=31)], [], None, None, lineno=391,
col_offset=25), Num(-0.0, lineno=391, col_offset=53)], [], None, None,
lineno=391, col_offset=8), lineno=391, col_offset=8),
Expr(Call(Attribute(Name('self', Load(), lineno=392, col_offset=8),
'assertEqual', Load(), lineno=392, col_offset=8), [Call(Name('phase',
Load(), lineno=392, col_offset=25), [Call(Name('complex', Load(),
lineno=392, col_offset=31), [Name('INF', Load(), lineno=392,
col_offset=39), Num(0.0, lineno=392, col_offset=44)], [], None, None,
lineno=392, col_offset=31)], [], None, None, lineno=392,
col_offset=25), Num(0.0, lineno=392, col_offset=51)], [], None, None,
lineno=392, col_offset=8), lineno=392, col_offset=8),
Expr(Call(Attribute(Name('self', Load(), lineno=393, col_offset=8),
'assertEqual', Load(), lineno=393, col_offset=8), [Call(Name('phase',
Load(), lineno=393, col_offset=25), [Call(Name('complex', Load(),
lineno=393, col_offset=31), [Name('INF', Load(), lineno=393,
col_offset=39), Num(2.3, lineno=393, col_offset=44)], [], None, None,
lineno=393, col_offset=31)], [], None, None, lineno=393,
col_offset=25), Num(0.0, lineno=393, col_offset=51)], [], None, None,
lineno=393, col_offset=8), lineno=393, col_offset=8),
Expr(Call(Attribute(Name('self', Load(), lineno=394, col_offset=8),
'assertAlmostEqual', Load(), lineno=394, col_offset=8),
[Call(Name('phase', Load(), lineno=394, col_offset=31),
[Call(Name('complex', Load(), lineno=394, col_offset=37), [Name('INF',
Load(), lineno=394, col_offset=45), Name('INF', Load(), lineno=394,
col_offset=50)], [], None, None, lineno=394, col_offset=37)], [],
None, None, lineno=394, col_offset=31), BinOp(Name('pi', Load(),
lineno=394, col_offset=57), Div(), Num(4, lineno=394, col_offset=60),
lineno=394, col_offset=57)], [], None, None, lineno=394,
col_offset=8), lineno=394, col_offset=8),
Expr(Call(Attribute(Name('self', Load(), lineno=395, col_offset=8),
'assertAlmostEqual', Load(), lineno=395, col_offset=8),
[Call(Name('phase', Load(), lineno=395, col_offset=31),
[Call(Name('complex', Load(), lineno=395, col_offset=37), [Num(2.3,
lineno=395, col_offset=45), Name('INF', Load(), lineno=395,
col_offset=50)], [], None, None, lineno=395, col_offset=37)], [],
None, None, lineno=395, col_offset=31), BinOp(Name('pi', Load(),
lineno=395, col_offset=57), Div(), Num(2, lineno=395, col_offset=60),
lineno=395, col_offset=57)], [], None, None, lineno=395,
col_offset=8), lineno=395, col_offset=8),
Expr(Call(Attribute(Name('self', Load(), lineno=396, col_offset=8),
'assertAlmostEqual', Load(), lineno=396, col_offset=8),
[Call(Name('phase', Load(), lineno=396, col_offset=31),
[Call(Name('complex', Load(), lineno=396, col_offset=37), [Num(0.0,
lineno=396, col_offset=45), Name('INF', Load(), lineno=396,
col_offset=50)], [], None, None, lineno=396, col_offset=37)], [],
None, None, lineno=396, col_offset=31), BinOp(Name('pi', Load(),
lineno=396, col_offset=57), Div(), Num(2, lineno=396, col_offset=60),
lineno=396, col_offset=57)], [], None, None, lineno=396,
col_offset=8), lineno=396, col_offset=8),
Expr(Call(Attribute(Name('self', Load(), lineno=397, col_offset=8),
'assertAlmostEqual', Load(), lineno=397, col_offset=8),
[Call(Name('phase', Load(), lineno=397, col_offset=31),
[Call(Name('complex', Load(), lineno=397, col_offset=37), [Num(-0.0,
lineno=397, col_offset=46), Name('INF', Load(), lineno=397,
col_offset=51)], [], None, None, lineno=397, col_offset=37)], [],
None, None, lineno=397, col_offset=31), BinOp(Name('pi', Load(),
lineno=397, col_offset=58), Div(), Num(2, lineno=397, col_offset=61),
lineno=397, col_offset=58)], [], None, None, lineno=397,
col_offset=8), lineno=397, col_offset=8),
Expr(Call(Attribute(Name('self', Load(), lineno=398, col_offset=8),
'assertAlmostEqual', Load(), lineno=398, col_offset=8),
[Call(Name('phase', Load(), lineno=398, col_offset=31),
[Call(Name('complex', Load(), lineno=398, col_offset=37), [Num(-2.3,
lineno=398, col_offset=46), Name('INF', Load(), lineno=398,
col_offset=51)], [], None, None, lineno=398, col_offset=37)], [],
None, None, lineno=398, col_offset=31), BinOp(Name('pi', Load(),
lineno=398, col_offset=58), Div(), Num(2, lineno=398, col_offset=61),
lineno=398, col_offset=58)], [], None, None, lineno=398,
col_offset=8), lineno=398, col_offset=8),
Expr(Call(Attribute(Name('self', Load(), lineno=399, col_offset=8),
'assertAlmostEqual', Load(), lineno=399, col_offset=8),
[Call(Name('phase', Load(), lineno=399, col_offset=31),
[Call(Name('complex', Load(), lineno=399, col_offset=37),
[UnaryOp(USub(), Name('INF', Load(), lineno=399, col_offset=46),
lineno=399, col_offset=45), Name('INF', Load(), lineno=399,
col_offset=51)], [], None, None, lineno=399, col_offset=37)], [],
None, None, lineno=399, col_offset=31), BinOp(Num(0.75, lineno=399,
col_offset=58), Mult(), Name('pi', Load(), lineno=399, col_offset=63),
lineno=399, col_offset=58)], [], None, None, lineno=399,
col_offset=8), lineno=399, col_offset=8),
Expr(Call(Attribute(Name('self', Load(), lineno=400, col_offset=8),
'assertAlmostEqual', Load(), lineno=400, col_offset=8),
[Call(Name('phase', Load(), lineno=400, col_offset=31),
[Call(Name('complex', Load(), lineno=400, col_offset=37),
[UnaryOp(USub(), Name('INF', Load(), lineno=400, col_offset=46),
lineno=400, col_offset=45), Num(2.3, lineno=400, col_offset=51)], [],
None, None, lineno=400, col_offset=37)], [], None, None, lineno=400,
col_offset=31), Name('pi', Load(), lineno=400, col_offset=58)], [],
None, None, lineno=400, col_offset=8), lineno=400, col_offset=8),
Expr(Call(Attribute(Name('self', Load(), lineno=401, col_offset=8),
'assertAlmostEqual', Load(), lineno=401, col_offset=8),
[Call(Name('phase', Load(), lineno=401, col_offset=31),
[Call(Name('complex', Load(), lineno=401, col_offset=37),
[UnaryOp(USub(), Name('INF', Load(), lineno=401, col_offset=46),
lineno=401, col_offset=45), Num(0.0, lineno=401, col_offset=51)], [],
None, None, lineno=401, col_offset=37)], [], None, None, lineno=401,
col_offset=31), Name('pi', Load(), lineno=401, col_offset=58)], [],
None, None, lineno=401, col_offset=8), lineno=401, col_offset=8),
For(Name('z', Store(), lineno=404, col_offset=12),
Name('complex_nans', Load(), lineno=404, col_offset=17),
[Expr(Call(Attribute(Name('self', Load(), lineno=405, col_offset=12),
'assertTrue', Load(), lineno=405, col_offset=12),
[Call(Attribute(Name('math', Load(), lineno=405, col_offset=28),
'isnan', Load(), lineno=405, col_offset=28), [Call(Name('phase',
Load(), lineno=405, col_offset=39), [Name('z', Load(), lineno=405,
col_offset=45)], [], None, None, lineno=405, col_offset=39)], [],
None, None, lineno=405, col_offset=28)], [], None, None, lineno=405,
col_offset=12), lineno=405, col_offset=12)], [], lineno=404,
col_offset=8)], [], lineno=366, col_offset=4), FunctionDef('test_abs',
arguments([Name('self', Param(), lineno=407, col_offset=17)], None,
None, []), [For(Name('z', Store(), lineno=409, col_offset=12),
Name('complex_zeros', Load(), lineno=409, col_offset=17),
[Expr(Call(Attribute(Name('self', Load(), lineno=410, col_offset=12),
'assertEqual', Load(), lineno=410, col_offset=12), [Call(Name('abs',
Load(), lineno=410, col_offset=29), [Name('z', Load(), lineno=410,
col_offset=33)], [], None, None, lineno=410, col_offset=29), Num(0.0,
lineno=410, col_offset=37)], [], None, None, lineno=410,
col_offset=12), lineno=410, col_offset=12)], [], lineno=409,
col_offset=8), For(Name('z', Store(), lineno=413, col_offset=12),
Name('complex_infinities', Load(), lineno=413, col_offset=17),
[Expr(Call(Attribute(Name('self', Load(), lineno=414, col_offset=12),
'assertEqual', Load(), lineno=414, col_offset=12), [Call(Name('abs',
Load(), lineno=414, col_offset=29), [Name('z', Load(), lineno=414,
col_offset=33)], [], None, None, lineno=414, col_offset=29),
Name('INF', Load(), lineno=414, col_offset=37)], [], None, None,
lineno=414, col_offset=12), lineno=414, col_offset=12)], [],
lineno=413, col_offset=8), Expr(Call(Attribute(Name('self', Load(),
lineno=417, col_offset=8), 'assertEqual', Load(), lineno=417,
col_offset=8), [Call(Name('abs', Load(), lineno=417, col_offset=25),
[Call(Name('complex', Load(), lineno=417, col_offset=29), [Name('NAN',
Load(), lineno=417, col_offset=37), UnaryOp(USub(), Name('INF',
Load(), lineno=417, col_offset=43), lineno=417, col_offset=42)], [],
None, None, lineno=417, col_offset=29)], [], None, None, lineno=417,
col_offset=25), Name('INF', Load(), lineno=417, col_offset=50)], [],
None, None, lineno=417, col_offset=8), lineno=417, col_offset=8),
Expr(Call(Attribute(Name('self', Load(), lineno=418, col_offset=8),
'assertTrue', Load(), lineno=418, col_offset=8),
[Call(Attribute(Name('math', Load(), lineno=418, col_offset=24),
'isnan', Load(), lineno=418, col_offset=24), [Call(Name('abs', Load(),
lineno=418, col_offset=35), [Call(Name('complex', Load(), lineno=418,
col_offset=39), [Name('NAN', Load(), lineno=418, col_offset=47),
Num(-2.3, lineno=418, col_offset=53)], [], None, None, lineno=418,
col_offset=39)], [], None, None, lineno=418, col_offset=35)], [],
None, None, lineno=418, col_offset=24)], [], None, None, lineno=418,
col_offset=8), lineno=418, col_offset=8),
Expr(Call(Attribute(Name('self', Load(), lineno=419, col_offset=8),
'assertTrue', Load(), lineno=419, col_offset=8),
[Call(Attribute(Name('math', Load(), lineno=419, col_offset=24),
'isnan', Load(), lineno=419, col_offset=24), [Call(Name('abs', Load(),
lineno=419, col_offset=35), [Call(Name('complex', Load(), lineno=419,
col_offset=39), [Name('NAN', Load(), lineno=419, col_offset=47),
Num(-0.0, lineno=419, col_offset=53)], [], None, None, lineno=419,
col_offset=39)], [], None, None, lineno=419, col_offset=35)], [],
None, None, lineno=419, col_offset=24)], [], None, None, lineno=419,
col_offset=8), lineno=419, col_offset=8),
Expr(Call(Attribute(Name('self', Load(), lineno=420, col_offset=8),
'assertTrue', Load(), lineno=420, col_offset=8),
[Call(Attribute(Name('math', Load(), lineno=420, col_offset=24),
'isnan', Load(), lineno=420, col_offset=24), [Call(Name('abs', Load(),
lineno=420, col_offset=35), [Call(Name('complex', Load(), lineno=420,
col_offset=39), [Name('NAN', Load(), lineno=420, col_offset=47),
Num(0.0, lineno=420, col_offset=52)], [], None, None, lineno=420,
col_offset=39)], [], None, None, lineno=420, col_offset=35)], [],
None, None, lineno=420, col_offset=24)], [], None, None, lineno=420,
col_offset=8), lineno=420, col_offset=8),
Expr(Call(Attribute(Name('self', Load(), lineno=421, col_offset=8),
'assertTrue', Load(), lineno=421, col_offset=8),
[Call(Attribute(Name('math', Load(), lineno=421, col_offset=24),
'isnan', Load(), lineno=421, col_offset=24), [Call(Name('abs', Load(),
lineno=421, col_offset=35), [Call(Name('complex', Load(), lineno=421,
col_offset=39), [Name('NAN', Load(), lineno=421, col_offset=47),
Num(2.3, lineno=421, col_offset=52)], [], None, None, lineno=421,
col_offset=39)], [], None, None, lineno=421, col_offset=35)], [],
None, None, lineno=421, col_offset=24)], [], None, None, lineno=421,
col_offset=8), lineno=421, col_offset=8),
Expr(Call(Attribute(Name('self', Load(), lineno=422, col_offset=8),
'assertEqual', Load(), lineno=422, col_offset=8), [Call(Name('abs',
Load(), lineno=422, col_offset=25), [Call(Name('complex', Load(),
lineno=422, col_offset=29), [Name('NAN', Load(), lineno=422,
col_offset=37), Name('INF', Load(), lineno=422, col_offset=42)], [],
None, None, lineno=422, col_offset=29)], [], None, None, lineno=422,
col_offset=25), Name('INF', Load(), lineno=422, col_offset=49)], [],
None, None, lineno=422, col_offset=8), lineno=422, col_offset=8),
Expr(Call(Attribute(Name('self', Load(), lineno=423, col_offset=8),
'assertEqual', Load(), lineno=423, col_offset=8), [Call(Name('abs',
Load(), lineno=423, col_offset=25), [Call(Name('complex', Load(),
lineno=423, col_offset=29), [UnaryOp(USub(), Name('INF', Load(),
lineno=423, col_offset=38), lineno=423, col_offset=37), Name('NAN',
Load(), lineno=423, col_offset=43)], [], None, None, lineno=423,
col_offset=29)], [], None, None, lineno=423, col_offset=25),
Name('INF', Load(), lineno=423, col_offset=50)], [], None, None,
lineno=423, col_offset=8), lineno=423, col_offset=8),
Expr(Call(Attribute(Name('self', Load(), lineno=424, col_offset=8),
'assertTrue', Load(), lineno=424, col_offset=8),
[Call(Attribute(Name('math', Load(), lineno=424, col_offset=24),
'isnan', Load(), lineno=424, col_offset=24), [Call(Name('abs', Load(),
lineno=424, col_offset=35), [Call(Name('complex', Load(), lineno=424,
col_offset=39), [Num(-2.3, lineno=424, col_offset=48), Name('NAN',
Load(), lineno=424, col_offset=53)], [], None, None, lineno=424,
col_offset=39)], [], None, None, lineno=424, col_offset=35)], [],
None, None, lineno=424, col_offset=24)], [], None, None, lineno=424,
col_offset=8), lineno=424, col_offset=8),
Expr(Call(Attribute(Name('self', Load(), lineno=425, col_offset=8),
'assertTrue', Load(), lineno=425, col_offset=8),
[Call(Attribute(Name('math', Load(), lineno=425, col_offset=24),
'isnan', Load(), lineno=425, col_offset=24), [Call(Name('abs', Load(),
lineno=425, col_offset=35), [Call(Name('complex', Load(), lineno=425,
col_offset=39), [Num(-0.0, lineno=425, col_offset=48), Name('NAN',
Load(), lineno=425, col_offset=53)], [], None, None, lineno=425,
col_offset=39)], [], None, None, lineno=425, col_offset=35)], [],
None, None, lineno=425, col_offset=24)], [], None, None, lineno=425,
col_offset=8), lineno=425, col_offset=8),
Expr(Call(Attribute(Name('self', Load(), lineno=426, col_offset=8),
'assertTrue', Load(), lineno=426, col_offset=8),
[Call(Attribute(Name('math', Load(), lineno=426, col_offset=24),
'isnan', Load(), lineno=426, col_offset=24), [Call(Name('abs', Load(),
lineno=426, col_offset=35), [Call(Name('complex', Load(), lineno=426,
col_offset=39), [Num(0.0, lineno=426, col_offset=47), Name('NAN',
Load(), lineno=426, col_offset=52)], [], None, None, lineno=426,
col_offset=39)], [], None, None, lineno=426, col_offset=35)], [],
None, None, lineno=426, col_offset=24)], [], None, None, lineno=426,
col_offset=8), lineno=426, col_offset=8),
Expr(Call(Attribute(Name('self', Load(), lineno=427, col_offset=8),
'assertTrue', Load(), lineno=427, col_offset=8),
[Call(Attribute(Name('math', Load(), lineno=427, col_offset=24),
'isnan', Load(), lineno=427, col_offset=24), [Call(Name('abs', Load(),
lineno=427, col_offset=35), [Call(Name('complex', Load(), lineno=427,
col_offset=39), [Num(2.3, lineno=427, col_offset=47), Name('NAN',
Load(), lineno=427, col_offset=52)], [], None, None, lineno=427,
col_offset=39)], [], None, None, lineno=427, col_offset=35)], [],
None, None, lineno=427, col_offset=24)], [], None, None, lineno=427,
col_offset=8), lineno=427, col_offset=8),
Expr(Call(Attribute(Name('self', Load(), lineno=428, col_offset=8),
'assertEqual', Load(), lineno=428, col_offset=8), [Call(Name('abs',
Load(), lineno=428, col_offset=25), [Call(Name('complex', Load(),
lineno=428, col_offset=29), [Name('INF', Load(), lineno=428,
col_offset=37), Name('NAN', Load(), lineno=428, col_offset=42)], [],
None, None, lineno=428, col_offset=29)], [], None, None, lineno=428,
col_offset=25), Name('INF', Load(), lineno=428, col_offset=49)], [],
None, None, lineno=428, col_offset=8), lineno=428, col_offset=8),
Expr(Call(Attribute(Name('self', Load(), lineno=429, col_offset=8),
'assertTrue', Load(), lineno=429, col_offset=8),
[Call(Attribute(Name('math', Load(), lineno=429, col_offset=24),
'isnan', Load(), lineno=429, col_offset=24), [Call(Name('abs', Load(),
lineno=429, col_offset=35), [Call(Name('complex', Load(), lineno=429,
col_offset=39), [Name('NAN', Load(), lineno=429, col_offset=47),
Name('NAN', Load(), lineno=429, col_offset=52)], [], None, None,
lineno=429, col_offset=39)], [], None, None, lineno=429,
col_offset=35)], [], None, None, lineno=429, col_offset=24)], [],
None, None, lineno=429, col_offset=8), lineno=429, col_offset=8),
If(Call(Attribute(Call(Attribute(Name('float', Load(), lineno=432,
col_offset=11), '__getformat__', Load(), lineno=432, col_offset=11),
[Str('double', lineno=432, col_offset=31)], [], None, None,
lineno=432, col_offset=11), 'startswith', Load(), lineno=432,
col_offset=11), [Str('IEEE', lineno=432, col_offset=52)], [], None,
None, lineno=432, col_offset=11), [Expr(Call(Attribute(Name('self',
Load(), lineno=433, col_offset=12), 'assertRaises', Load(),
lineno=433, col_offset=12), [Name('OverflowError', Load(), lineno=433,
col_offset=30), Name('abs', Load(), lineno=433, col_offset=45),
Call(Name('complex', Load(), lineno=433, col_offset=50),
[Num(1.4e+308, lineno=433, col_offset=58), Num(1.4e+308, lineno=433,
col_offset=67)], [], None, None, lineno=433, col_offset=50)], [],
None, None, lineno=433, col_offset=12), lineno=433, col_offset=12)],
[], lineno=432, col_offset=8)], [], lineno=407, col_offset=4),
FunctionDef('assertCEqual', arguments([Name('self', Param(),
lineno=435, col_offset=21), Name('a', Param(), lineno=435,
col_offset=27), Name('b', Param(), lineno=435, col_offset=30)], None,
None, []), [Assign([Name('eps', Store(), lineno=436, col_offset=8)],
Num(1e-07, lineno=436, col_offset=14), lineno=436, col_offset=8),
If(BoolOp(Or(), [Compare(Call(Name('abs', Load(), lineno=437,
col_offset=11), [BinOp(Attribute(Name('a', Load(), lineno=437,
col_offset=15), 'real', Load(), lineno=437, col_offset=15), Sub(),
Subscript(Name('b', Load(), lineno=437, col_offset=24), Index(Num(0,
lineno=437, col_offset=26)), Load(), lineno=437, col_offset=24),
lineno=437, col_offset=15)], [], None, None, lineno=437,
col_offset=11), [Gt()], [Name('eps', Load(), lineno=437,
col_offset=32)], lineno=437, col_offset=11), Compare(Call(Name('abs',
Load(), lineno=437, col_offset=39), [BinOp(Attribute(Name('a', Load(),
lineno=437, col_offset=43), 'imag', Load(), lineno=437,
col_offset=43), Sub(), Subscript(Name('b', Load(), lineno=437,
col_offset=52), Index(Num(1, lineno=437, col_offset=54)), Load(),
lineno=437, col_offset=52), lineno=437, col_offset=43)], [], None,
None, lineno=437, col_offset=39), [Gt()], [Name('eps', Load(),
lineno=437, col_offset=60)], lineno=437, col_offset=39)], lineno=437,
col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=438,
col_offset=12), 'fail', Load(), lineno=438, col_offset=12),
[Tuple([Name('a', Load(), lineno=438, col_offset=23), Name('b',
Load(), lineno=438, col_offset=26)], Load(), lineno=438,
col_offset=23)], [], None, None, lineno=438, col_offset=12),
lineno=438, col_offset=12)], [], lineno=437, col_offset=8)], [],
lineno=435, col_offset=4), FunctionDef('test_rect',
arguments([Name('self', Param(), lineno=440, col_offset=18)], None,
None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=441,
col_offset=8), 'assertCEqual', Load(), lineno=441, col_offset=8),
[Call(Name('rect', Load(), lineno=441, col_offset=26), [Num(0,
lineno=441, col_offset=31), Num(0, lineno=441, col_offset=34)], [],
None, None, lineno=441, col_offset=26), Tuple([Num(0, lineno=441,
col_offset=39), Num(0, lineno=441, col_offset=42)], Load(),
lineno=441, col_offset=39)], [], None, None, lineno=441,
col_offset=8), lineno=441, col_offset=8),
Expr(Call(Attribute(Name('self', Load(), lineno=442, col_offset=8),
'assertCEqual', Load(), lineno=442, col_offset=8), [Call(Name('rect',
Load(), lineno=442, col_offset=26), [Num(1, lineno=442,
col_offset=31), Num(0, lineno=442, col_offset=34)], [], None, None,
lineno=442, col_offset=26), Tuple([Num(1.0, lineno=442,
col_offset=39), Num(0, lineno=442, col_offset=43)], Load(),
lineno=442, col_offset=39)], [], None, None, lineno=442,
col_offset=8), lineno=442, col_offset=8),
Expr(Call(Attribute(Name('self', Load(), lineno=443, col_offset=8),
'assertCEqual', Load(), lineno=443, col_offset=8), [Call(Name('rect',
Load(), lineno=443, col_offset=26), [Num(1, lineno=443,
col_offset=31), UnaryOp(USub(), Name('pi', Load(), lineno=443,
col_offset=35), lineno=443, col_offset=34)], [], None, None,
lineno=443, col_offset=26), Tuple([Num(-1.0, lineno=443,
col_offset=42), Num(0, lineno=443, col_offset=46)], Load(),
lineno=443, col_offset=41)], [], None, None, lineno=443,
col_offset=8), lineno=443, col_offset=8),
Expr(Call(Attribute(Name('self', Load(), lineno=444, col_offset=8),
'assertCEqual', Load(), lineno=444, col_offset=8), [Call(Name('rect',
Load(), lineno=444, col_offset=26), [Num(1, lineno=444,
col_offset=31), BinOp(Name('pi', Load(), lineno=444, col_offset=34),
Div(), Num(2, lineno=444, col_offset=37), lineno=444, col_offset=34)],
[], None, None, lineno=444, col_offset=26), Tuple([Num(0, lineno=444,
col_offset=42), Num(1.0, lineno=444, col_offset=45)], Load(),
lineno=444, col_offset=42)], [], None, None, lineno=444,
col_offset=8), lineno=444, col_offset=8),
Expr(Call(Attribute(Name('self', Load(), lineno=445, col_offset=8),
'assertCEqual', Load(), lineno=445, col_offset=8), [Call(Name('rect',
Load(), lineno=445, col_offset=26), [Num(1, lineno=445,
col_offset=31), BinOp(UnaryOp(USub(), Name('pi', Load(), lineno=445,
col_offset=35), lineno=445, col_offset=34), Div(), Num(2, lineno=445,
col_offset=38), lineno=445, col_offset=34)], [], None, None,
lineno=445, col_offset=26), Tuple([Num(0, lineno=445, col_offset=43),
Num(-1.0, lineno=445, col_offset=47)], Load(), lineno=445,
col_offset=43)], [], None, None, lineno=445, col_offset=8),
lineno=445, col_offset=8)], [], lineno=440, col_offset=4),
FunctionDef('test_isnan', arguments([Name('self', Param(), lineno=447,
col_offset=19)], None, None, []), [Expr(Call(Attribute(Name('self',
Load(), lineno=448, col_offset=8), 'assertFalse', Load(), lineno=448,
col_offset=8), [Call(Attribute(Name('cmath', Load(), lineno=448,
col_offset=25), 'isnan', Load(), lineno=448, col_offset=25), [Num(1,
lineno=448, col_offset=37)], [], None, None, lineno=448,
col_offset=25)], [], None, None, lineno=448, col_offset=8),
lineno=448, col_offset=8), Expr(Call(Attribute(Name('self', Load(),
lineno=449, col_offset=8), 'assertFalse', Load(), lineno=449,
col_offset=8), [Call(Attribute(Name('cmath', Load(), lineno=449,
col_offset=25), 'isnan', Load(), lineno=449, col_offset=25), [Num(1j,
lineno=449, col_offset=37)], [], None, None, lineno=449,
col_offset=25)], [], None, None, lineno=449, col_offset=8),
lineno=449, col_offset=8), Expr(Call(Attribute(Name('self', Load(),
lineno=450, col_offset=8), 'assertFalse', Load(), lineno=450,
col_offset=8), [Call(Attribute(Name('cmath', Load(), lineno=450,
col_offset=25), 'isnan', Load(), lineno=450, col_offset=25),
[Name('INF', Load(), lineno=450, col_offset=37)], [], None, None,
lineno=450, col_offset=25)], [], None, None, lineno=450,
col_offset=8), lineno=450, col_offset=8),
Expr(Call(Attribute(Name('self', Load(), lineno=451, col_offset=8),
'assertTrue', Load(), lineno=451, col_offset=8),
[Call(Attribute(Name('cmath', Load(), lineno=451, col_offset=24),
'isnan', Load(), lineno=451, col_offset=24), [Name('NAN', Load(),
lineno=451, col_offset=36)], [], None, None, lineno=451,
col_offset=24)], [], None, None, lineno=451, col_offset=8),
lineno=451, col_offset=8), Expr(Call(Attribute(Name('self', Load(),
lineno=452, col_offset=8), 'assertTrue', Load(), lineno=452,
col_offset=8), [Call(Attribute(Name('cmath', Load(), lineno=452,
col_offset=24), 'isnan', Load(), lineno=452, col_offset=24),
[Call(Name('complex', Load(), lineno=452, col_offset=36), [Name('NAN',
Load(), lineno=452, col_offset=44), Num(0, lineno=452,
col_offset=49)], [], None, None, lineno=452, col_offset=36)], [],
None, None, lineno=452, col_offset=24)], [], None, None, lineno=452,
col_offset=8), lineno=452, col_offset=8),
Expr(Call(Attribute(Name('self', Load(), lineno=453, col_offset=8),
'assertTrue', Load(), lineno=453, col_offset=8),
[Call(Attribute(Name('cmath', Load(), lineno=453, col_offset=24),
'isnan', Load(), lineno=453, col_offset=24), [Call(Name('complex',
Load(), lineno=453, col_offset=36), [Num(0, lineno=453,
col_offset=44), Name('NAN', Load(), lineno=453, col_offset=47)], [],
None, None, lineno=453, col_offset=36)], [], None, None, lineno=453,
col_offset=24)], [], None, None, lineno=453, col_offset=8),
lineno=453, col_offset=8), Expr(Call(Attribute(Name('self', Load(),
lineno=454, col_offset=8), 'assertTrue', Load(), lineno=454,
col_offset=8), [Call(Attribute(Name('cmath', Load(), lineno=454,
col_offset=24), 'isnan', Load(), lineno=454, col_offset=24),
[Call(Name('complex', Load(), lineno=454, col_offset=36), [Name('NAN',
Load(), lineno=454, col_offset=44), Name('NAN', Load(), lineno=454,
col_offset=49)], [], None, None, lineno=454, col_offset=36)], [],
None, None, lineno=454, col_offset=24)], [], None, None, lineno=454,
col_offset=8), lineno=454, col_offset=8),
Expr(Call(Attribute(Name('self', Load(), lineno=455, col_offset=8),
'assertTrue', Load(), lineno=455, col_offset=8),
[Call(Attribute(Name('cmath', Load(), lineno=455, col_offset=24),
'isnan', Load(), lineno=455, col_offset=24), [Call(Name('complex',
Load(), lineno=455, col_offset=36), [Name('NAN', Load(), lineno=455,
col_offset=44), Name('INF', Load(), lineno=455, col_offset=49)], [],
None, None, lineno=455, col_offset=36)], [], None, None, lineno=455,
col_offset=24)], [], None, None, lineno=455, col_offset=8),
lineno=455, col_offset=8), Expr(Call(Attribute(Name('self', Load(),
lineno=456, col_offset=8), 'assertTrue', Load(), lineno=456,
col_offset=8), [Call(Attribute(Name('cmath', Load(), lineno=456,
col_offset=24), 'isnan', Load(), lineno=456, col_offset=24),
[Call(Name('complex', Load(), lineno=456, col_offset=36), [Name('INF',
Load(), lineno=456, col_offset=44), Name('NAN', Load(), lineno=456,
col_offset=49)], [], None, None, lineno=456, col_offset=36)], [],
None, None, lineno=456, col_offset=24)], [], None, None, lineno=456,
col_offset=8), lineno=456, col_offset=8)], [], lineno=447,
col_offset=4), FunctionDef('test_isinf', arguments([Name('self',
Param(), lineno=458, col_offset=19)], None, None, []),
[Expr(Call(Attribute(Name('self', Load(), lineno=459, col_offset=8),
'assertFalse', Load(), lineno=459, col_offset=8),
[Call(Attribute(Name('cmath', Load(), lineno=459, col_offset=25),
'isinf', Load(), lineno=459, col_offset=25), [Num(1, lineno=459,
col_offset=37)], [], None, None, lineno=459, col_offset=25)], [],
None, None, lineno=459, col_offset=8), lineno=459, col_offset=8),
Expr(Call(Attribute(Name('self', Load(), lineno=460, col_offset=8),
'assertFalse', Load(), lineno=460, col_offset=8),
[Call(Attribute(Name('cmath', Load(), lineno=460, col_offset=25),
'isinf', Load(), lineno=460, col_offset=25), [Num(1j, lineno=460,
col_offset=37)], [], None, None, lineno=460, col_offset=25)], [],
None, None, lineno=460, col_offset=8), lineno=460, col_offset=8),
Expr(Call(Attribute(Name('self', Load(), lineno=461, col_offset=8),
'assertFalse', Load(), lineno=461, col_offset=8),
[Call(Attribute(Name('cmath', Load(), lineno=461, col_offset=25),
'isinf', Load(), lineno=461, col_offset=25), [Name('NAN', Load(),
lineno=461, col_offset=37)], [], None, None, lineno=461,
col_offset=25)], [], None, None, lineno=461, col_offset=8),
lineno=461, col_offset=8), Expr(Call(Attribute(Name('self', Load(),
lineno=462, col_offset=8), 'assertTrue', Load(), lineno=462,
col_offset=8), [Call(Attribute(Name('cmath', Load(), lineno=462,
col_offset=24), 'isinf', Load(), lineno=462, col_offset=24),
[Name('INF', Load(), lineno=462, col_offset=36)], [], None, None,
lineno=462, col_offset=24)], [], None, None, lineno=462,
col_offset=8), lineno=462, col_offset=8),
Expr(Call(Attribute(Name('self', Load(), lineno=463, col_offset=8),
'assertTrue', Load(), lineno=463, col_offset=8),
[Call(Attribute(Name('cmath', Load(), lineno=463, col_offset=24),
'isinf', Load(), lineno=463, col_offset=24), [Call(Name('complex',
Load(), lineno=463, col_offset=36), [Name('INF', Load(), lineno=463,
col_offset=44), Num(0, lineno=463, col_offset=49)], [], None, None,
lineno=463, col_offset=36)], [], None, None, lineno=463,
col_offset=24)], [], None, None, lineno=463, col_offset=8),
lineno=463, col_offset=8), Expr(Call(Attribute(Name('self', Load(),
lineno=464, col_offset=8), 'assertTrue', Load(), lineno=464,
col_offset=8), [Call(Attribute(Name('cmath', Load(), lineno=464,
col_offset=24), 'isinf', Load(), lineno=464, col_offset=24),
[Call(Name('complex', Load(), lineno=464, col_offset=36), [Num(0,
lineno=464, col_offset=44), Name('INF', Load(), lineno=464,
col_offset=47)], [], None, None, lineno=464, col_offset=36)], [],
None, None, lineno=464, col_offset=24)], [], None, None, lineno=464,
col_offset=8), lineno=464, col_offset=8),
Expr(Call(Attribute(Name('self', Load(), lineno=465, col_offset=8),
'assertTrue', Load(), lineno=465, col_offset=8),
[Call(Attribute(Name('cmath', Load(), lineno=465, col_offset=24),
'isinf', Load(), lineno=465, col_offset=24), [Call(Name('complex',
Load(), lineno=465, col_offset=36), [Name('INF', Load(), lineno=465,
col_offset=44), Name('INF', Load(), lineno=465, col_offset=49)], [],
None, None, lineno=465, col_offset=36)], [], None, None, lineno=465,
col_offset=24)], [], None, None, lineno=465, col_offset=8),
lineno=465, col_offset=8), Expr(Call(Attribute(Name('self', Load(),
lineno=466, col_offset=8), 'assertTrue', Load(), lineno=466,
col_offset=8), [Call(Attribute(Name('cmath', Load(), lineno=466,
col_offset=24), 'isinf', Load(), lineno=466, col_offset=24),
[Call(Name('complex', Load(), lineno=466, col_offset=36), [Name('NAN',
Load(), lineno=466, col_offset=44), Name('INF', Load(), lineno=466,
col_offset=49)], [], None, None, lineno=466, col_offset=36)], [],
None, None, lineno=466, col_offset=24)], [], None, None, lineno=466,
col_offset=8), lineno=466, col_offset=8),
Expr(Call(Attribute(Name('self', Load(), lineno=467, col_offset=8),
'assertTrue', Load(), lineno=467, col_offset=8),
[Call(Attribute(Name('cmath', Load(), lineno=467, col_offset=24),
'isinf', Load(), lineno=467, col_offset=24), [Call(Name('complex',
Load(), lineno=467, col_offset=36), [Name('INF', Load(), lineno=467,
col_offset=44), Name('NAN', Load(), lineno=467, col_offset=49)], [],
None, None, lineno=467, col_offset=36)], [], None, None, lineno=467,
col_offset=24)], [], None, None, lineno=467, col_offset=8),
lineno=467, col_offset=8)], [], lineno=458, col_offset=4)], [],
lineno=48, col_offset=0), FunctionDef('test_main', arguments([], None,
None, []), [Expr(Call(Name('run_unittest', Load(), lineno=471,
col_offset=4), [Name('CMathTests', Load(), lineno=471,
col_offset=17)], [], None, None, lineno=471, col_offset=4),
lineno=471, col_offset=4)], [], lineno=470, col_offset=0),
If(Compare(Name('__name__', Load(), lineno=473, col_offset=3), [Eq()],
[Str('__main__', lineno=473, col_offset=15)], lineno=473,
col_offset=3), [Expr(Call(Name('test_main', Load(), lineno=474,
col_offset=4), [], [], None, None, lineno=474, col_offset=4),
lineno=474, col_offset=4)], [], lineno=473, col_offset=0)])
