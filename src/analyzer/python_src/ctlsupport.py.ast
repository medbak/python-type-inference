Module([Import([alias('string', None)], lineno=6, col_offset=0), Assign([Name('MACHEADERFILE', Store(), lineno=9, col_offset=0)], Str('Controls.h', lineno=9, col_offset=16), lineno=9, col_offset=0), Assign([Name('MODNAME', Store(), lineno=10, col_offset=0)], Str('_Ctl', lineno=10, col_offset=10), lineno=10, col_offset=0), Assign([Name('OBJECTNAME', Store(), lineno=11, col_offset=0)], Str('Control', lineno=11, col_offset=13), lineno=11, col_offset=0), Assign([Name('MODPREFIX', Store(), lineno=14, col_offset=0)], Str('Ctl', lineno=14, col_offset=12), lineno=14, col_offset=0), Assign([Name('OBJECTTYPE', Store(), lineno=15, col_offset=0)], BinOp(Name('OBJECTNAME', Load(), lineno=15, col_offset=13), Add(), Str('Handle', lineno=15, col_offset=26), lineno=15, col_offset=13), lineno=15, col_offset=0), Assign([Name('OBJECTPREFIX', Store(), lineno=16, col_offset=0)], BinOp(Name('MODPREFIX', Load(), lineno=16, col_offset=15), Add(), Str('Obj', lineno=16, col_offset=27), lineno=16, col_offset=15), lineno=16, col_offset=0), Assign([Name('INPUTFILE', Store(), lineno=17, col_offset=0)], BinOp(Call(Attribute(Name('string', Load(), lineno=17, col_offset=12), 'lower', Load(), lineno=17, col_offset=12), [Name('MODPREFIX', Load(), lineno=17, col_offset=25)], [], None, None, lineno=17, col_offset=12), Add(), Str('gen.py', lineno=17, col_offset=38), lineno=17, col_offset=12), lineno=17, col_offset=0), Assign([Name('OUTPUTFILE', Store(), lineno=18, col_offset=0)], BinOp(Name('MODNAME', Load(), lineno=18, col_offset=13), Add(), Str('module.c', lineno=18, col_offset=23), lineno=18, col_offset=13), lineno=18, col_offset=0), ImportFrom('macsupport', [alias('*', None)], 0, lineno=20, col_offset=0), Assign([Name('ControlHandle', Store(), lineno=24, col_offset=0)], Call(Name('OpaqueByValueType', Load(), lineno=24, col_offset=16), [Name('OBJECTTYPE', Load(), lineno=24, col_offset=34), Name('OBJECTPREFIX', Load(), lineno=24, col_offset=46)], [], None, None, lineno=24, col_offset=16), lineno=24, col_offset=0), Assign([Name('ControlRef', Store(), lineno=25, col_offset=0)], Name('ControlHandle', Load(), lineno=25, col_offset=13), lineno=25, col_offset=0), Assign([Name('ExistingControlHandle', Store(), lineno=26, col_offset=0)], Call(Name('OpaqueByValueType', Load(), lineno=26, col_offset=24), [Name('OBJECTTYPE', Load(), lineno=26, col_offset=42), Str('CtlObj_WhichControl', lineno=26, col_offset=54), Str('BUG', lineno=26, col_offset=77)], [], None, None, lineno=26, col_offset=24), lineno=26, col_offset=0), Assign([Name('RgnHandle', Store(), lineno=28, col_offset=0)], Call(Name('OpaqueByValueType', Load(), lineno=28, col_offset=12), [Str('RgnHandle', lineno=28, col_offset=30), Str('ResObj', lineno=28, col_offset=43)], [], None, None, lineno=28, col_offset=12), lineno=28, col_offset=0), Assign([Name('CCTabHandle', Store(), lineno=29, col_offset=0)], Call(Name('OpaqueByValueType', Load(), lineno=29, col_offset=14), [Str('CCTabHandle', lineno=29, col_offset=32), Str('ResObj', lineno=29, col_offset=47)], [], None, None, lineno=29, col_offset=14), lineno=29, col_offset=0), Assign([Name('AuxCtlHandle', Store(), lineno=30, col_offset=0)], Call(Name('OpaqueByValueType', Load(), lineno=30, col_offset=15), [Str('AuxCtlHandle', lineno=30, col_offset=33), Str('ResObj', lineno=30, col_offset=49)], [], None, None, lineno=30, col_offset=15), lineno=30, col_offset=0), Assign([Name('ControlPartCode', Store(), lineno=31, col_offset=0)], Call(Name('Type', Load(), lineno=31, col_offset=18), [Str('ControlPartCode', lineno=31, col_offset=23), Str('h', lineno=31, col_offset=42)], [], None, None, lineno=31, col_offset=18), lineno=31, col_offset=0), Assign([Name('DragConstraint', Store(), lineno=32, col_offset=0)], Call(Name('Type', Load(), lineno=32, col_offset=17), [Str('DragConstraint', lineno=32, col_offset=22), Str('H', lineno=32, col_offset=40)], [], None, None, lineno=32, col_offset=17), lineno=32, col_offset=0), Assign([Name('ControlVariant', Store(), lineno=33, col_offset=0)], Call(Name('Type', Load(), lineno=33, col_offset=17), [Str('ControlVariant', lineno=33, col_offset=22), Str('h', lineno=33, col_offset=40)], [], None, None, lineno=33, col_offset=17), lineno=33, col_offset=0), Assign([Name('IconTransformType', Store(), lineno=34, col_offset=0)], Call(Name('Type', Load(), lineno=34, col_offset=20), [Str('IconTransformType', lineno=34, col_offset=25), Str('h', lineno=34, col_offset=46)], [], None, None, lineno=34, col_offset=20), lineno=34, col_offset=0), Assign([Name('EventModifiers', Store(), lineno=35, col_offset=0)], Call(Name('Type', Load(), lineno=35, col_offset=17), [Str('EventModifiers', lineno=35, col_offset=22), Str('H', lineno=35, col_offset=40)], [], None, None, lineno=35, col_offset=17), lineno=35, col_offset=0), Assign([Name('ClickActivationResult', Store(), lineno=36, col_offset=0)], Call(Name('Type', Load(), lineno=36, col_offset=24), [Str('ClickActivationResult', lineno=36, col_offset=29), Str('l', lineno=36, col_offset=54)], [], None, None, lineno=36, col_offset=24), lineno=36, col_offset=0), Assign([Name('ControlButtonGraphicAlignment', Store(), lineno=37, col_offset=0)], Call(Name('Type', Load(), lineno=37, col_offset=32), [Str('ControlButtonGraphicAlignment', lineno=37, col_offset=37), Str('h', lineno=37, col_offset=70)], [], None, None, lineno=37, col_offset=32), lineno=37, col_offset=0), Assign([Name('ControlButtonTextAlignment', Store(), lineno=38, col_offset=0)], Call(Name('Type', Load(), lineno=38, col_offset=29), [Str('ControlButtonTextAlignment', lineno=38, col_offset=34), Str('h', lineno=38, col_offset=64)], [], None, None, lineno=38, col_offset=29), lineno=38, col_offset=0), Assign([Name('ControlButtonTextPlacement', Store(), lineno=39, col_offset=0)], Call(Name('Type', Load(), lineno=39, col_offset=29), [Str('ControlButtonTextPlacement', lineno=39, col_offset=34), Str('h', lineno=39, col_offset=64)], [], None, None, lineno=39, col_offset=29), lineno=39, col_offset=0), Assign([Name('ControlContentType', Store(), lineno=40, col_offset=0)], Call(Name('Type', Load(), lineno=40, col_offset=21), [Str('ControlContentType', lineno=40, col_offset=26), Str('h', lineno=40, col_offset=48)], [], None, None, lineno=40, col_offset=21), lineno=40, col_offset=0), Assign([Name('ControlFocusPart', Store(), lineno=41, col_offset=0)], Call(Name('Type', Load(), lineno=41, col_offset=19), [Str('ControlFocusPart', lineno=41, col_offset=24), Str('h', lineno=41, col_offset=44)], [], None, None, lineno=41, col_offset=19), lineno=41, col_offset=0), Assign([Name('ControlFontStyleRec', Store(), lineno=43, col_offset=0)], Call(Name('OpaqueType', Load(), lineno=43, col_offset=22), [Str('ControlFontStyleRec', lineno=43, col_offset=33), Str('ControlFontStyle', lineno=43, col_offset=56)], [], None, None, lineno=43, col_offset=22), lineno=43, col_offset=0), Assign([Name('ControlFontStyleRec_ptr', Store(), lineno=44, col_offset=0)], Name('ControlFontStyleRec', Load(), lineno=44, col_offset=26), lineno=44, col_offset=0), Assign([Name('ControlID', Store(), lineno=45, col_offset=0)], Call(Name('OpaqueType', Load(), lineno=45, col_offset=12), [Str('ControlID', lineno=45, col_offset=23), Str('PyControlID', lineno=45, col_offset=36)], [], None, None, lineno=45, col_offset=12), lineno=45, col_offset=0), Assign([Name('ControlID_ptr', Store(), lineno=46, col_offset=0)], Name('ControlID', Load(), lineno=46, col_offset=16), lineno=46, col_offset=0), Assign([Name('DragTrackingMessage', Store(), lineno=48, col_offset=0)], Call(Name('Type', Load(), lineno=48, col_offset=22), [Str('DragTrackingMessage', lineno=48, col_offset=27), Str('h', lineno=48, col_offset=50)], [], None, None, lineno=48, col_offset=22), lineno=48, col_offset=0), Assign([Name('DragReference', Store(), lineno=49, col_offset=0)], Call(Name('OpaqueByValueType', Load(), lineno=49, col_offset=16), [Str('DragReference', lineno=49, col_offset=34), Str('DragObj', lineno=49, col_offset=51)], [], None, None, lineno=49, col_offset=16), lineno=49, col_offset=0), Assign([Name('CFStringRef', Store(), lineno=51, col_offset=0)], Call(Name('OpaqueByValueType', Load(), lineno=51, col_offset=14), [Str('CFStringRef', lineno=51, col_offset=32), Str('CFStringRefObj', lineno=51, col_offset=47)], [], None, None, lineno=51, col_offset=14), lineno=51, col_offset=0), Assign([Name('CFMutableStringRef', Store(), lineno=52, col_offset=0)], Call(Name('OpaqueByValueType', Load(), lineno=52, col_offset=21), [Str('CFMutableStringRef', lineno=52, col_offset=39), Str('CFMutableStringRefObj', lineno=52, col_offset=61)], [], None, None, lineno=52, col_offset=21), lineno=52, col_offset=0), Assign([Name('CFDataRef', Store(), lineno=53, col_offset=0)], Call(Name('OpaqueByValueType', Load(), lineno=53, col_offset=12), [Str('CFDataRef', lineno=53, col_offset=30), Str('CFDataRefObj', lineno=53, col_offset=43)], [], None, None, lineno=53, col_offset=12), lineno=53, col_offset=0), Assign([Name('ControlTabSize', Store(), lineno=55, col_offset=0)], Name('UInt16', Load(), lineno=55, col_offset=17), lineno=55, col_offset=0), Assign([Name('ControlTabDirection', Store(), lineno=56, col_offset=0)], Name('UInt16', Load(), lineno=56, col_offset=22), lineno=56, col_offset=0), Assign([Name('ControlPopupArrowOrientation', Store(), lineno=57, col_offset=0)], Name('UInt16', Load(), lineno=57, col_offset=31), lineno=57, col_offset=0), Assign([Name('ControlPopupArrowSize', Store(), lineno=58, col_offset=0)], Name('UInt16', Load(), lineno=58, col_offset=24), lineno=58, col_offset=0), Assign([Name('ControlClockType', Store(), lineno=59, col_offset=0)], Name('UInt16', Load(), lineno=59, col_offset=19), lineno=59, col_offset=0), Assign([Name('ControlClockFlags', Store(), lineno=60, col_offset=0)], Name('UInt32', Load(), lineno=60, col_offset=20), lineno=60, col_offset=0), Assign([Name('ControlRoundButtonSize', Store(), lineno=61, col_offset=0)], Name('SInt16', Load(), lineno=61, col_offset=25), lineno=61, col_offset=0), Assign([Name('DataBrowserViewStyle', Store(), lineno=62, col_offset=0)], Name('OSType', Load(), lineno=62, col_offset=23), lineno=62, col_offset=0), Assign([Name('DataBrowserItemID', Store(), lineno=63, col_offset=0)], Name('UInt32', Load(), lineno=63, col_offset=20), lineno=63, col_offset=0), Assign([Name('DataBrowserEditCommand', Store(), lineno=64, col_offset=0)], Name('UInt32', Load(), lineno=64, col_offset=25), lineno=64, col_offset=0), Assign([Name('DataBrowserSelectionAnchorDirection', Store(), lineno=65, col_offset=0)], Name('UInt32', Load(), lineno=65, col_offset=38), lineno=65, col_offset=0), Assign([Name('DataBrowserItemState', Store(), lineno=66, col_offset=0)], Name('UInt32', Load(), lineno=66, col_offset=23), lineno=66, col_offset=0), Assign([Name('DataBrowserPropertyID', Store(), lineno=67, col_offset=0)], Name('UInt32', Load(), lineno=67, col_offset=24), lineno=67, col_offset=0), Assign([Name('DataBrowserRevealOptions', Store(), lineno=68, col_offset=0)], Name('UInt8', Load(), lineno=68, col_offset=27), lineno=68, col_offset=0), Assign([Name('DataBrowserSortOrder', Store(), lineno=69, col_offset=0)], Name('UInt16', Load(), lineno=69, col_offset=23), lineno=69, col_offset=0), Assign([Name('DataBrowserSelectionFlags', Store(), lineno=70, col_offset=0)], Name('UInt32', Load(), lineno=70, col_offset=28), lineno=70, col_offset=0), Assign([Name('DataBrowserPropertyFlags', Store(), lineno=71, col_offset=0)], Name('UInt32', Load(), lineno=71, col_offset=27), lineno=71, col_offset=0), Assign([Name('DataBrowserPropertyPart', Store(), lineno=72, col_offset=0)], Name('OSType', Load(), lineno=72, col_offset=26), lineno=72, col_offset=0), Assign([Name('DataBrowserTableViewColumnID', Store(), lineno=73, col_offset=0)], Name('DataBrowserPropertyID', Load(), lineno=73, col_offset=31), lineno=73, col_offset=0), Assign([Name('DataBrowserTableViewHiliteStyle', Store(), lineno=75, col_offset=0)], Name('UInt32', Load(), lineno=75, col_offset=34), lineno=75, col_offset=0), Assign([Name('DataBrowserTableViewRowIndex', Store(), lineno=76, col_offset=0)], Name('UInt32', Load(), lineno=76, col_offset=31), lineno=76, col_offset=0), Assign([Name('DataBrowserTableViewColumnIndex', Store(), lineno=77, col_offset=0)], Name('UInt32', Load(), lineno=77, col_offset=34), lineno=77, col_offset=0), Assign([Name('DataBrowserPropertyType', Store(), lineno=78, col_offset=0)], Name('OSType', Load(), lineno=78, col_offset=26), lineno=78, col_offset=0), Assign([Name('ControlDisclosureTriangleOrientation', Store(), lineno=79, col_offset=0)], Name('UInt16', Load(), lineno=79, col_offset=39), lineno=79, col_offset=0), Assign([Name('DataBrowserTableViewColumnDesc', Store(), lineno=81, col_offset=0)], Call(Name('OpaqueType', Load(), lineno=81, col_offset=33), [Str('DataBrowserTableViewColumnDesc', lineno=81, col_offset=44), Str('DataBrowserTableViewColumnDesc', lineno=82, col_offset=16)], [], None, None, lineno=81, col_offset=33), lineno=81, col_offset=0), Assign([Name('DataBrowserListViewColumnDesc', Store(), lineno=83, col_offset=0)], Call(Name('OpaqueType', Load(), lineno=83, col_offset=32), [Str('DataBrowserListViewColumnDesc', lineno=83, col_offset=43), Str('DataBrowserListViewColumnDesc', lineno=84, col_offset=16)], [], None, None, lineno=83, col_offset=32), lineno=83, col_offset=0), Assign([Name('ControlButtonContentInfo', Store(), lineno=85, col_offset=0)], Call(Name('OpaqueType', Load(), lineno=85, col_offset=27), [Str('ControlButtonContentInfo', lineno=85, col_offset=38), Str('ControlButtonContentInfo', lineno=86, col_offset=16)], [], None, None, lineno=85, col_offset=27), lineno=85, col_offset=0), Assign([Name('ControlButtonContentInfoPtr', Store(), lineno=87, col_offset=0), Name('ControlButtonContentInfo_ptr', Store(), lineno=87, col_offset=30)], Name('ControlButtonContentInfo', Load(), lineno=87, col_offset=61), lineno=87, col_offset=0), Assign([Name('ControlTabEntry_ptr', Store(), lineno=89, col_offset=0)], Call(Name('OpaqueType', Load(), lineno=89, col_offset=22), [Str('ControlTabEntry', lineno=89, col_offset=33), Str('ControlTabEntry', lineno=89, col_offset=52)], [], None, None, lineno=89, col_offset=22), lineno=89, col_offset=0), Assign([Name('ControlBevelThickness', Store(), lineno=91, col_offset=0)], Name('UInt16', Load(), lineno=91, col_offset=24), lineno=91, col_offset=0), Assign([Name('ControlBevelButtonBehavior', Store(), lineno=92, col_offset=0)], Name('UInt16', Load(), lineno=92, col_offset=29), lineno=92, col_offset=0), Assign([Name('ControlBevelButtonMenuBehavior', Store(), lineno=93, col_offset=0)], Name('UInt16', Load(), lineno=93, col_offset=33), lineno=93, col_offset=0), Assign([Name('ControlBevelButtonMenuPlacement', Store(), lineno=94, col_offset=0)], Name('UInt16', Load(), lineno=94, col_offset=34), lineno=94, col_offset=0), Assign([Name('ControlPushButtonIconAlignment', Store(), lineno=95, col_offset=0)], Name('UInt16', Load(), lineno=95, col_offset=33), lineno=95, col_offset=0), ClassDef('ControlActionDefinition', [Name('Type', Load(), lineno=97, col_offset=30)], [FunctionDef('declare', arguments([Name('self', Param(), lineno=98, col_offset=16), Name('name', Param(), lineno=98, col_offset=22)], None, None, []), [Expr(Call(Name('Output', Load(), lineno=99, col_offset=8), [Str('%s %s;', lineno=99, col_offset=15), Attribute(Name('self', Load(), lineno=99, col_offset=25), 'typeName', Load(), lineno=99, col_offset=25), Name('name', Load(), lineno=99, col_offset=40)], [], None, None, lineno=99, col_offset=8), lineno=99, col_offset=8), Expr(Call(Name('Output', Load(), lineno=100, col_offset=8), [Str('UniversalProcPtr c_callback;', lineno=100, col_offset=15)], [], None, None, lineno=100, col_offset=8), lineno=100, col_offset=8)], [], lineno=98, col_offset=4), FunctionDef('passInput', arguments([Name('self', Param(), lineno=101, col_offset=18), Name('name', Param(), lineno=101, col_offset=24)], None, None, []), [Return(Str('myactionproc_upp', lineno=102, col_offset=15), lineno=102, col_offset=8)], [], lineno=101, col_offset=4), FunctionDef('cleanup', arguments([Name('self', Param(), lineno=103, col_offset=16), Name('name', Param(), lineno=103, col_offset=22)], None, None, []), [Expr(Call(Name('Output', Load(), lineno=104, col_offset=8), [Str('setcallback((PyObject*)_self, kMyControlActionProcTag, actionProc, &c_callback);', lineno=104, col_offset=15)], [], None, None, lineno=104, col_offset=8), lineno=104, col_offset=8)], [], lineno=103, col_offset=4)], [], lineno=97, col_offset=0), ClassDef('ControlActionDefinitionNewControl', [Name('ControlActionDefinition', Load(), lineno=106, col_offset=40)], [FunctionDef('cleanup', arguments([Name('self', Param(), lineno=107, col_offset=16), Name('name', Param(), lineno=107, col_offset=22)], None, None, []), [Expr(Call(Name('Output', Load(), lineno=108, col_offset=8), [Str('setcallback(_res, kMyControlActionProcTag, liveTrackingProc, &c_callback);', lineno=108, col_offset=15)], [], None, None, lineno=108, col_offset=8), lineno=108, col_offset=8)], [], lineno=107, col_offset=4)], [], lineno=106, col_offset=0), Assign([Name('ControlActionUPP', Store(), lineno=110, col_offset=0)], Call(Name('ControlActionDefinition', Load(), lineno=110, col_offset=19), [Str('PyObject*', lineno=110, col_offset=43), Str('O', lineno=110, col_offset=56)], [], None, None, lineno=110, col_offset=19), lineno=110, col_offset=0), Assign([Name('ControlActionUPPNewControl', Store(), lineno=111, col_offset=0)], Call(Name('ControlActionDefinitionNewControl', Load(), lineno=111, col_offset=29), [Str('PyObject*', lineno=111, col_offset=63), Str('O', lineno=111, col_offset=76)], [], None, None, lineno=111, col_offset=29), lineno=111, col_offset=0), Assign([Name('ControlSliderOrientation', Store(), lineno=112, col_offset=0)], Name('UInt16', Load(), lineno=112, col_offset=27), lineno=112, col_offset=0), Assign([Name('includestuff', Store(), lineno=115, col_offset=0)], BinOp(Name('includestuff', Load(), lineno=115, col_offset=15), Add(), Str('\n#include <Carbon/Carbon.h>\n\n#ifdef USE_TOOLBOX_OBJECT_GLUE\nextern PyObject *_CtlObj_New(ControlHandle);\nextern int _CtlObj_Convert(PyObject *, ControlHandle *);\n\n#define CtlObj_New _CtlObj_New\n#define CtlObj_Convert _CtlObj_Convert\n#endif\n\nstatic PyObject *CtlObj_WhichControl(ControlHandle);\n\n#define as_Control(h) ((ControlHandle)h)\n#define as_Resource(ctl) ((Handle)ctl)\n#define GetControlRect(ctl, rectp) GetControlBounds(ctl, rectp)\n\n#define MAXTABS 32  /* maximum number of tabs that we support in a tabs control */\n/*\n** Parse/generate ControlFontStyleRec records\n*/\n#if 0 /* Not needed */\nstatic PyObject *\nControlFontStyle_New(ControlFontStyleRec *itself)\n{\n\n        return Py_BuildValue("hhhhhhO&O&", itself->flags, itself->font,\n                itself->size, itself->style, itself->mode, itself->just,\n                QdRGB_New, &itself->foreColor, QdRGB_New, &itself->backColor);\n}\n#endif\n\nstatic int\nControlFontStyle_Convert(PyObject *v, ControlFontStyleRec *itself)\n{\n        return PyArg_Parse(v, "(hhhhhhO&O&)", &itself->flags,\n                &itself->font, &itself->size, &itself->style, &itself->mode,\n                &itself->just, QdRGB_Convert, &itself->foreColor,\n                QdRGB_Convert, &itself->backColor);\n}\n\n/*\n** Parse/generate ControlID records\n*/\nstatic PyObject *\nPyControlID_New(ControlID *itself)\n{\n\n        return Py_BuildValue("O&l", PyMac_BuildOSType, itself->signature, itself->id);\n}\n\nstatic int\nPyControlID_Convert(PyObject *v, ControlID *itself)\n{\n        return PyArg_Parse(v, "(O&l)", PyMac_GetOSType, &itself->signature, &itself->id);\n}\n\n/*\n** generate DataBrowserListViewColumnDesc records\n*/\nstatic int\nDataBrowserTableViewColumnDesc_Convert(PyObject *v, DataBrowserTableViewColumnDesc *itself)\n{\n        return PyArg_Parse(v, "(lO&l)",\n                           &itself->propertyID,\n                           PyMac_GetOSType, &itself->propertyType,\n                           &itself->propertyFlags);\n}\n\nstatic int\nControlButtonContentInfo_Convert(PyObject *v, ControlButtonContentInfo *itself)\n{\n        return PyArg_Parse(v, "(hO&)",\n                           &itself->contentType,\n                           OptResObj_Convert, &itself->u.iconSuite);\n}\n\nstatic int\nDataBrowserListViewHeaderDesc_Convert(PyObject *v, DataBrowserListViewHeaderDesc *itself)\n{\n        itself->version = kDataBrowserListViewLatestHeaderDesc;\n        return PyArg_Parse(v, "(HHhO&HO&O&)",\n                           &itself->minimumWidth,\n                           &itself->maximumWidth,\n                           &itself->titleOffset,\n                           CFStringRefObj_Convert, &itself->titleString,\n                           &itself->initialOrder,\n                           ControlFontStyle_Convert, &itself->btnFontStyle,\n                           ControlButtonContentInfo_Convert, &itself->btnContentInfo);\n}\n\nstatic int\nDataBrowserListViewColumnDesc_Convert(PyObject *v, DataBrowserListViewColumnDesc *itself)\n{\n        return PyArg_Parse(v, "(O&O&)",\n                           DataBrowserTableViewColumnDesc_Convert, &itself->propertyDesc,\n                           DataBrowserListViewHeaderDesc_Convert, &itself->headerBtnDesc);\n}\n\n/* TrackControl and HandleControlClick callback support */\n#define kMyControlActionProcTag \'ACTN\'  /* not an official tag, only for internal use */\nstatic PyObject *tracker;\nstatic ControlActionUPP mytracker_upp;\nstatic ControlActionUPP myactionproc_upp;\nstatic ControlUserPaneKeyDownUPP mykeydownproc_upp;\nstatic ControlUserPaneFocusUPP myfocusproc_upp;\nstatic ControlUserPaneDrawUPP mydrawproc_upp;\nstatic ControlUserPaneIdleUPP myidleproc_upp;\nstatic ControlUserPaneHitTestUPP myhittestproc_upp;\nstatic ControlUserPaneTrackingUPP mytrackingproc_upp;\n\nstatic int settrackfunc(PyObject *);    /* forward */\nstatic void clrtrackfunc(void); /* forward */\nstatic int setcallback(PyObject *, OSType, PyObject *, UniversalProcPtr *);\n', lineno=229, col_offset=-1), lineno=115, col_offset=15), lineno=115, col_offset=0), Assign([Name('finalstuff', Store(), lineno=231, col_offset=0)], BinOp(Name('finalstuff', Load(), lineno=231, col_offset=13), Add(), Str('\nstatic PyObject *\nCtlObj_NewUnmanaged(ControlHandle itself)\n{\n        ControlObject *it;\n        if (itself == NULL) return PyMac_Error(resNotFound);\n        it = PyObject_NEW(ControlObject, &Control_Type);\n        if (it == NULL) return NULL;\n        it->ob_itself = itself;\n        it->ob_callbackdict = NULL;\n        return (PyObject *)it;\n}\n\nstatic PyObject *\nCtlObj_WhichControl(ControlHandle c)\n{\n        PyObject *it;\n\n        if (c == NULL)\n                it = Py_None;\n        else {\n                it = (PyObject *) GetControlReference(c);\n                /*\n                ** If the refcon is zero or doesn\'t point back to the Python object\n                ** the control is not ours. Return a temporary object.\n                */\n                if (it == NULL || ((ControlObject *)it)->ob_itself != c)\n                        return CtlObj_NewUnmanaged(c);\n        }\n        Py_INCREF(it);\n        return it;\n}\n\nstatic int\nsettrackfunc(PyObject *obj)\n{\n        if (tracker) {\n                PyErr_SetString(Ctl_Error, "Tracker function in use");\n                return 0;\n        }\n        tracker = obj;\n        Py_INCREF(tracker);\n        return 1;\n}\n\nstatic void\nclrtrackfunc(void)\n{\n        Py_XDECREF(tracker);\n        tracker = 0;\n}\n\nstatic pascal void\nmytracker(ControlHandle ctl, short part)\n{\n        PyObject *args, *rv=0;\n\n        args = Py_BuildValue("(O&i)", CtlObj_WhichControl, ctl, (int)part);\n        if (args && tracker) {\n                rv = PyEval_CallObject(tracker, args);\n                Py_DECREF(args);\n        }\n        if (rv)\n                Py_DECREF(rv);\n        else {\n                PySys_WriteStderr("TrackControl or HandleControlClick: exception in tracker function\\n");\n                PyErr_Print();\n        }\n}\n\nstatic int\nsetcallback(PyObject *myself, OSType which, PyObject *callback, UniversalProcPtr *uppp)\n{\n        ControlObject *self = (ControlObject *)myself;\n        char keybuf[9];\n\n        if ( which == kMyControlActionProcTag )\n                *uppp = (UniversalProcPtr)myactionproc_upp;\n        else if ( which == kControlUserPaneKeyDownProcTag )\n                *uppp = (UniversalProcPtr)mykeydownproc_upp;\n        else if ( which == kControlUserPaneFocusProcTag )\n                *uppp = (UniversalProcPtr)myfocusproc_upp;\n        else if ( which == kControlUserPaneDrawProcTag )\n                *uppp = (UniversalProcPtr)mydrawproc_upp;\n        else if ( which == kControlUserPaneIdleProcTag )\n                *uppp = (UniversalProcPtr)myidleproc_upp;\n        else if ( which == kControlUserPaneHitTestProcTag )\n                *uppp = (UniversalProcPtr)myhittestproc_upp;\n        else if ( which == kControlUserPaneTrackingProcTag )\n                *uppp = (UniversalProcPtr)mytrackingproc_upp;\n        else\n                return -1;\n        /* Only now do we test for clearing of the callback: */\n        if ( callback == Py_None )\n                *uppp = NULL;\n        /* Create the dict if it doesn\'t exist yet (so we don\'t get such a dict for every control) */\n        if ( self->ob_callbackdict == NULL )\n                if ( (self->ob_callbackdict = PyDict_New()) == NULL )\n                        return -1;\n        /* And store the Python callback */\n        sprintf(keybuf, "%x", (unsigned)which);\n        if (PyDict_SetItemString(self->ob_callbackdict, keybuf, callback) < 0)\n                return -1;\n        return 0;\n}\n\nstatic PyObject *\ncallcallback(ControlObject *self, OSType which, PyObject *arglist)\n{\n        char keybuf[9];\n        PyObject *func, *rv;\n\n        sprintf(keybuf, "%x", (unsigned)which);\n        if ( self->ob_callbackdict == NULL ||\n                        (func = PyDict_GetItemString(self->ob_callbackdict, keybuf)) == NULL ) {\n                PySys_WriteStderr("Control callback %x without callback object\\n", (unsigned)which);\n                return NULL;\n        }\n        rv = PyEval_CallObject(func, arglist);\n        if ( rv == NULL ) {\n                PySys_WriteStderr("Exception in control callback %x handler\\n", (unsigned)which);\n                PyErr_Print();\n        }\n        return rv;\n}\n\nstatic pascal void\nmyactionproc(ControlHandle control, SInt16 part)\n{\n        ControlObject *ctl_obj;\n        PyObject *arglist, *rv;\n\n        ctl_obj = (ControlObject *)CtlObj_WhichControl(control);\n        arglist = Py_BuildValue("Oh", ctl_obj, part);\n        rv = callcallback(ctl_obj, kMyControlActionProcTag, arglist);\n        Py_XDECREF(arglist);\n        Py_XDECREF(rv);\n}\n\nstatic pascal ControlPartCode\nmykeydownproc(ControlHandle control, SInt16 keyCode, SInt16 charCode, SInt16 modifiers)\n{\n        ControlObject *ctl_obj;\n        PyObject *arglist, *rv;\n        short c_rv = 0;\n\n        ctl_obj = (ControlObject *)CtlObj_WhichControl(control);\n        arglist = Py_BuildValue("Ohhh", ctl_obj, keyCode, charCode, modifiers);\n        rv = callcallback(ctl_obj, kControlUserPaneKeyDownProcTag, arglist);\n        Py_XDECREF(arglist);\n        if ( rv )\n                if (!PyArg_Parse(rv, "h", &c_rv))\n                        PyErr_Clear();\n        Py_XDECREF(rv);\n        return (ControlPartCode)c_rv;\n}\n\nstatic pascal ControlPartCode\nmyfocusproc(ControlHandle control, ControlPartCode part)\n{\n        ControlObject *ctl_obj;\n        PyObject *arglist, *rv;\n        short c_rv = kControlFocusNoPart;\n\n        ctl_obj = (ControlObject *)CtlObj_WhichControl(control);\n        arglist = Py_BuildValue("Oh", ctl_obj, part);\n        rv = callcallback(ctl_obj, kControlUserPaneFocusProcTag, arglist);\n        Py_XDECREF(arglist);\n        if ( rv )\n                if (!PyArg_Parse(rv, "h", &c_rv))\n                        PyErr_Clear();\n        Py_XDECREF(rv);\n        return (ControlPartCode)c_rv;\n}\n\nstatic pascal void\nmydrawproc(ControlHandle control, SInt16 part)\n{\n        ControlObject *ctl_obj;\n        PyObject *arglist, *rv;\n\n        ctl_obj = (ControlObject *)CtlObj_WhichControl(control);\n        arglist = Py_BuildValue("Oh", ctl_obj, part);\n        rv = callcallback(ctl_obj, kControlUserPaneDrawProcTag, arglist);\n        Py_XDECREF(arglist);\n        Py_XDECREF(rv);\n}\n\nstatic pascal void\nmyidleproc(ControlHandle control)\n{\n        ControlObject *ctl_obj;\n        PyObject *arglist, *rv;\n\n        ctl_obj = (ControlObject *)CtlObj_WhichControl(control);\n        arglist = Py_BuildValue("O", ctl_obj);\n        rv = callcallback(ctl_obj, kControlUserPaneIdleProcTag, arglist);\n        Py_XDECREF(arglist);\n        Py_XDECREF(rv);\n}\n\nstatic pascal ControlPartCode\nmyhittestproc(ControlHandle control, Point where)\n{\n        ControlObject *ctl_obj;\n        PyObject *arglist, *rv;\n        short c_rv = -1;\n\n        ctl_obj = (ControlObject *)CtlObj_WhichControl(control);\n        arglist = Py_BuildValue("OO&", ctl_obj, PyMac_BuildPoint, where);\n        rv = callcallback(ctl_obj, kControlUserPaneHitTestProcTag, arglist);\n        Py_XDECREF(arglist);\n        /* Ignore errors, nothing we can do about them */\n        if ( rv )\n                if (!PyArg_Parse(rv, "h", &c_rv))\n                        PyErr_Clear();\n        Py_XDECREF(rv);\n        return (ControlPartCode)c_rv;\n}\n\nstatic pascal ControlPartCode\nmytrackingproc(ControlHandle control, Point startPt, ControlActionUPP actionProc)\n{\n        ControlObject *ctl_obj;\n        PyObject *arglist, *rv;\n        short c_rv = -1;\n\n        ctl_obj = (ControlObject *)CtlObj_WhichControl(control);\n        /* We cannot pass the actionProc without lots of work */\n        arglist = Py_BuildValue("OO&", ctl_obj, PyMac_BuildPoint, startPt);\n        rv = callcallback(ctl_obj, kControlUserPaneTrackingProcTag, arglist);\n        Py_XDECREF(arglist);\n        if ( rv )\n                if (!PyArg_Parse(rv, "h", &c_rv))\n                        PyErr_Clear();\n        Py_XDECREF(rv);\n        return (ControlPartCode)c_rv;\n}\n', lineno=469, col_offset=-1), lineno=231, col_offset=13), lineno=231, col_offset=0), Assign([Name('initstuff', Store(), lineno=471, col_offset=0)], BinOp(Name('initstuff', Load(), lineno=471, col_offset=12), Add(), Str('\nmytracker_upp = NewControlActionUPP(mytracker);\nmyactionproc_upp = NewControlActionUPP(myactionproc);\nmykeydownproc_upp = NewControlUserPaneKeyDownUPP(mykeydownproc);\nmyfocusproc_upp = NewControlUserPaneFocusUPP(myfocusproc);\nmydrawproc_upp = NewControlUserPaneDrawUPP(mydrawproc);\nmyidleproc_upp = NewControlUserPaneIdleUPP(myidleproc);\nmyhittestproc_upp = NewControlUserPaneHitTestUPP(myhittestproc);\nmytrackingproc_upp = NewControlUserPaneTrackingUPP(mytrackingproc);\nPyMac_INIT_TOOLBOX_OBJECT_NEW(ControlHandle, CtlObj_New);\nPyMac_INIT_TOOLBOX_OBJECT_CONVERT(ControlHandle, CtlObj_Convert);\n', lineno=482, col_offset=-1), lineno=471, col_offset=12), lineno=471, col_offset=0), ClassDef('MyObjectDefinition', [Name('PEP253Mixin', Load(), lineno=484, col_offset=25), Name('ObjectIdentityMixin', Load(), lineno=484, col_offset=38), Name('GlobalObjectDefinition', Load(), lineno=484, col_offset=59)], [FunctionDef('outputStructMembers', arguments([Name('self', Param(), lineno=485, col_offset=28)], None, None, []), [Expr(Call(Attribute(Name('GlobalObjectDefinition', Load(), lineno=486, col_offset=8), 'outputStructMembers', Load(), lineno=486, col_offset=8), [Name('self', Load(), lineno=486, col_offset=51)], [], None, None, lineno=486, col_offset=8), lineno=486, col_offset=8), Expr(Call(Name('Output', Load(), lineno=487, col_offset=8), [Str('PyObject *ob_callbackdict;', lineno=487, col_offset=15)], [], None, None, lineno=487, col_offset=8), lineno=487, col_offset=8)], [], lineno=485, col_offset=4), FunctionDef('outputCheckNewArg', arguments([Name('self', Param(), lineno=488, col_offset=26)], None, None, []), [Expr(Call(Name('Output', Load(), lineno=489, col_offset=8), [Str('if (itself == NULL) return PyMac_Error(resNotFound);', lineno=489, col_offset=15)], [], None, None, lineno=489, col_offset=8), lineno=489, col_offset=8)], [], lineno=488, col_offset=4), FunctionDef('outputInitStructMembers', arguments([Name('self', Param(), lineno=490, col_offset=32)], None, None, []), [Expr(Call(Attribute(Name('GlobalObjectDefinition', Load(), lineno=491, col_offset=8), 'outputInitStructMembers', Load(), lineno=491, col_offset=8), [Name('self', Load(), lineno=491, col_offset=55)], [], None, None, lineno=491, col_offset=8), lineno=491, col_offset=8), Expr(Call(Name('Output', Load(), lineno=492, col_offset=8), [Str('SetControlReference(itself, (long)it);', lineno=492, col_offset=15)], [], None, None, lineno=492, col_offset=8), lineno=492, col_offset=8), Expr(Call(Name('Output', Load(), lineno=493, col_offset=8), [Str('it->ob_callbackdict = NULL;', lineno=493, col_offset=15)], [], None, None, lineno=493, col_offset=8), lineno=493, col_offset=8)], [], lineno=490, col_offset=4), FunctionDef('outputCleanupStructMembers', arguments([Name('self', Param(), lineno=494, col_offset=35)], None, None, []), [Expr(Call(Name('Output', Load(), lineno=495, col_offset=8), [Str('Py_XDECREF(self->ob_callbackdict);', lineno=495, col_offset=15)], [], None, None, lineno=495, col_offset=8), lineno=495, col_offset=8), Expr(Call(Name('Output', Load(), lineno=496, col_offset=8), [Str('if (self->ob_itself)SetControlReference(self->ob_itself, (long)0); /* Make it forget about us */', lineno=496, col_offset=15)], [], None, None, lineno=496, col_offset=8), lineno=496, col_offset=8)], [], lineno=494, col_offset=4)], [], lineno=484, col_offset=0), Assign([Name('module', Store(), lineno=499, col_offset=0)], Call(Name('MacModule', Load(), lineno=499, col_offset=9), [Name('MODNAME', Load(), lineno=499, col_offset=19), Name('MODPREFIX', Load(), lineno=499, col_offset=28), Name('includestuff', Load(), lineno=499, col_offset=39), Name('finalstuff', Load(), lineno=499, col_offset=53), Name('initstuff', Load(), lineno=499, col_offset=65)], [], None, None, lineno=499, col_offset=9), lineno=499, col_offset=0), Assign([Name('object', Store(), lineno=500, col_offset=0)], Call(Name('MyObjectDefinition', Load(), lineno=500, col_offset=9), [Name('OBJECTNAME', Load(), lineno=500, col_offset=28), Name('OBJECTPREFIX', Load(), lineno=500, col_offset=40), Name('OBJECTTYPE', Load(), lineno=500, col_offset=54)], [], None, None, lineno=500, col_offset=9), lineno=500, col_offset=0), Expr(Call(Attribute(Name('module', Load(), lineno=501, col_offset=0), 'addobject', Load(), lineno=501, col_offset=0), [Name('object', Load(), lineno=501, col_offset=17)], [], None, None, lineno=501, col_offset=0), lineno=501, col_offset=0), Assign([Name('Function', Store(), lineno=504, col_offset=0)], Name('OSErrWeakLinkFunctionGenerator', Load(), lineno=504, col_offset=11), lineno=504, col_offset=0), Assign([Name('Method', Store(), lineno=505, col_offset=0)], Name('OSErrWeakLinkMethodGenerator', Load(), lineno=505, col_offset=9), lineno=505, col_offset=0), Assign([Name('functions', Store(), lineno=508, col_offset=0)], List([], Load(), lineno=508, col_offset=12), lineno=508, col_offset=0), Assign([Name('methods', Store(), lineno=509, col_offset=0)], List([], Load(), lineno=509, col_offset=10), lineno=509, col_offset=0), Expr(Call(Name('execfile', Load(), lineno=510, col_offset=0), [Name('INPUTFILE', Load(), lineno=510, col_offset=9)], [], None, None, lineno=510, col_offset=0), lineno=510, col_offset=0), Expr(Call(Name('execfile', Load(), lineno=511, col_offset=0), [Str('ctledit.py', lineno=511, col_offset=9)], [], None, None, lineno=511, col_offset=0), lineno=511, col_offset=0), For(Name('f', Store(), lineno=514, col_offset=4), Name('functions', Load(), lineno=514, col_offset=9), [Expr(Call(Attribute(Name('module', Load(), lineno=514, col_offset=20), 'add', Load(), lineno=514, col_offset=20), [Name('f', Load(), lineno=514, col_offset=31)], [], None, None, lineno=514, col_offset=20), lineno=514, col_offset=20)], [], lineno=514, col_offset=0), For(Name('f', Store(), lineno=515, col_offset=4), Name('methods', Load(), lineno=515, col_offset=9), [Expr(Call(Attribute(Name('object', Load(), lineno=515, col_offset=18), 'add', Load(), lineno=515, col_offset=18), [Name('f', Load(), lineno=515, col_offset=29)], [], None, None, lineno=515, col_offset=18), lineno=515, col_offset=18)], [], lineno=515, col_offset=0), Assign([Name('trackcontrol_body', Store(), lineno=518, col_offset=0)], Str('\nControlPartCode _rv;\nPoint startPoint;\nControlActionUPP upp = 0;\nPyObject *callback = 0;\n\nif (!PyArg_ParseTuple(_args, "O&|O",\n                      PyMac_GetPoint, &startPoint, &callback))\n        return NULL;\nif (callback && callback != Py_None) {\n        if (PyInt_Check(callback) && PyInt_AS_LONG(callback) == -1)\n                upp = (ControlActionUPP)-1;\n        else {\n                settrackfunc(callback);\n                upp = mytracker_upp;\n        }\n}\n_rv = TrackControl(_self->ob_itself,\n                   startPoint,\n                   upp);\nclrtrackfunc();\n_res = Py_BuildValue("h",\n                     _rv);\nreturn _res;\n', lineno=542, col_offset=-1), lineno=518, col_offset=0), Assign([Name('f', Store(), lineno=544, col_offset=0)], Call(Name('ManualGenerator', Load(), lineno=544, col_offset=4), [Str('TrackControl', lineno=544, col_offset=20), Name('trackcontrol_body', Load(), lineno=544, col_offset=36)], [], None, None, lineno=544, col_offset=4), lineno=544, col_offset=0), Assign([Attribute(Name('f', Load(), lineno=545, col_offset=0), 'docstring', Store(), lineno=545, col_offset=0)], Lambda(arguments([], None, None, []), Str('(Point startPoint [,trackercallback]) -> (ControlPartCode _rv)', lineno=545, col_offset=22), lineno=545, col_offset=14), lineno=545, col_offset=0), Expr(Call(Attribute(Name('object', Load(), lineno=546, col_offset=0), 'add', Load(), lineno=546, col_offset=0), [Name('f', Load(), lineno=546, col_offset=11)], [], None, None, lineno=546, col_offset=0), lineno=546, col_offset=0), Assign([Name('handlecontrolclick_body', Store(), lineno=550, col_offset=0)], Str('\nControlPartCode _rv;\nPoint startPoint;\nSInt16 modifiers;\nControlActionUPP upp = 0;\nPyObject *callback = 0;\n\nif (!PyArg_ParseTuple(_args, "O&h|O",\n                      PyMac_GetPoint, &startPoint,\n                      &modifiers,\n                      &callback))\n        return NULL;\nif (callback && callback != Py_None) {\n        if (PyInt_Check(callback) && PyInt_AS_LONG(callback) == -1)\n                upp = (ControlActionUPP)-1;\n        else {\n                settrackfunc(callback);\n                upp = mytracker_upp;\n        }\n}\n_rv = HandleControlClick(_self->ob_itself,\n                   startPoint,\n                   modifiers,\n                   upp);\nclrtrackfunc();\n_res = Py_BuildValue("h",\n                     _rv);\nreturn _res;\n', lineno=578, col_offset=-1), lineno=550, col_offset=0), Assign([Name('f', Store(), lineno=580, col_offset=0)], Call(Name('ManualGenerator', Load(), lineno=580, col_offset=4), [Str('HandleControlClick', lineno=580, col_offset=20), Name('handlecontrolclick_body', Load(), lineno=580, col_offset=42)], [], None, None, lineno=580, col_offset=4), lineno=580, col_offset=0), Assign([Attribute(Name('f', Load(), lineno=581, col_offset=0), 'docstring', Store(), lineno=581, col_offset=0)], Lambda(arguments([], None, None, []), Str('(Point startPoint, Integer modifiers, [,trackercallback]) -> (ControlPartCode _rv)', lineno=581, col_offset=22), lineno=581, col_offset=14), lineno=581, col_offset=0), Expr(Call(Attribute(Name('object', Load(), lineno=582, col_offset=0), 'add', Load(), lineno=582, col_offset=0), [Name('f', Load(), lineno=582, col_offset=11)], [], None, None, lineno=582, col_offset=0), lineno=582, col_offset=0), Assign([Name('setcontroldata_body', Store(), lineno=585, col_offset=0)], Str('\nOSErr _err;\nControlPartCode inPart;\nResType inTagName;\nSize bufferSize;\nPtr buffer;\n\nif (!PyArg_ParseTuple(_args, "hO&s#",\n                      &inPart,\n                      PyMac_GetOSType, &inTagName,\n                      &buffer, &bufferSize))\n        return NULL;\n\n_err = SetControlData(_self->ob_itself,\n                      inPart,\n                      inTagName,\n                      bufferSize,\n                      buffer);\n\nif (_err != noErr)\n        return PyMac_Error(_err);\n_res = Py_None;\nreturn _res;\n', lineno=608, col_offset=-1), lineno=585, col_offset=0), Assign([Name('f', Store(), lineno=610, col_offset=0)], Call(Name('ManualGenerator', Load(), lineno=610, col_offset=4), [Str('SetControlData', lineno=610, col_offset=20), Name('setcontroldata_body', Load(), lineno=610, col_offset=38)], [], None, None, lineno=610, col_offset=4), lineno=610, col_offset=0), Assign([Attribute(Name('f', Load(), lineno=611, col_offset=0), 'docstring', Store(), lineno=611, col_offset=0)], Lambda(arguments([], None, None, []), Str('(stuff) -> None', lineno=611, col_offset=22), lineno=611, col_offset=14), lineno=611, col_offset=0), Expr(Call(Attribute(Name('object', Load(), lineno=612, col_offset=0), 'add', Load(), lineno=612, col_offset=0), [Name('f', Load(), lineno=612, col_offset=11)], [], None, None, lineno=612, col_offset=0), lineno=612, col_offset=0), Assign([Name('getcontroldata_body', Store(), lineno=615, col_offset=0)], Str('\nOSErr _err;\nControlPartCode inPart;\nResType inTagName;\nSize bufferSize;\nPtr buffer;\nSize outSize;\n\nif (!PyArg_ParseTuple(_args, "hO&",\n                      &inPart,\n                      PyMac_GetOSType, &inTagName))\n        return NULL;\n\n/* allocate a buffer for the data */\n_err = GetControlDataSize(_self->ob_itself,\n                          inPart,\n                          inTagName,\n                          &bufferSize);\nif (_err != noErr)\n        return PyMac_Error(_err);\nbuffer = PyMem_NEW(char, bufferSize);\nif (buffer == NULL)\n        return PyErr_NoMemory();\n\n_err = GetControlData(_self->ob_itself,\n                      inPart,\n                      inTagName,\n                      bufferSize,\n                      buffer,\n                      &outSize);\n\nif (_err != noErr) {\n        PyMem_DEL(buffer);\n        return PyMac_Error(_err);\n}\n_res = Py_BuildValue("s#", buffer, outSize);\nPyMem_DEL(buffer);\nreturn _res;\n', lineno=653, col_offset=-1), lineno=615, col_offset=0), Assign([Name('f', Store(), lineno=655, col_offset=0)], Call(Name('ManualGenerator', Load(), lineno=655, col_offset=4), [Str('GetControlData', lineno=655, col_offset=20), Name('getcontroldata_body', Load(), lineno=655, col_offset=38)], [], None, None, lineno=655, col_offset=4), lineno=655, col_offset=0), Assign([Attribute(Name('f', Load(), lineno=656, col_offset=0), 'docstring', Store(), lineno=656, col_offset=0)], Lambda(arguments([], None, None, []), Str('(part, type) -> String', lineno=656, col_offset=22), lineno=656, col_offset=14), lineno=656, col_offset=0), Expr(Call(Attribute(Name('object', Load(), lineno=657, col_offset=0), 'add', Load(), lineno=657, col_offset=0), [Name('f', Load(), lineno=657, col_offset=11)], [], None, None, lineno=657, col_offset=0), lineno=657, col_offset=0), Assign([Name('setcontroldata_handle_body', Store(), lineno=660, col_offset=0)], Str('\nOSErr _err;\nControlPartCode inPart;\nResType inTagName;\nHandle buffer;\n\nif (!PyArg_ParseTuple(_args, "hO&O&",\n                      &inPart,\n                      PyMac_GetOSType, &inTagName,\n                      OptResObj_Convert, &buffer))\n        return NULL;\n\n_err = SetControlData(_self->ob_itself,\n                      inPart,\n                      inTagName,\n                      sizeof(buffer),\n                      (Ptr)&buffer);\n\nif (_err != noErr)\n        return PyMac_Error(_err);\n_res = Py_None;\nreturn _res;\n', lineno=682, col_offset=-1), lineno=660, col_offset=0), Assign([Name('f', Store(), lineno=684, col_offset=0)], Call(Name('ManualGenerator', Load(), lineno=684, col_offset=4), [Str('SetControlData_Handle', lineno=684, col_offset=20), Name('setcontroldata_handle_body', Load(), lineno=684, col_offset=45)], [], None, None, lineno=684, col_offset=4), lineno=684, col_offset=0), Assign([Attribute(Name('f', Load(), lineno=685, col_offset=0), 'docstring', Store(), lineno=685, col_offset=0)], Lambda(arguments([], None, None, []), Str('(ResObj) -> None', lineno=685, col_offset=22), lineno=685, col_offset=14), lineno=685, col_offset=0), Expr(Call(Attribute(Name('object', Load(), lineno=686, col_offset=0), 'add', Load(), lineno=686, col_offset=0), [Name('f', Load(), lineno=686, col_offset=11)], [], None, None, lineno=686, col_offset=0), lineno=686, col_offset=0), Assign([Name('getcontroldata_handle_body', Store(), lineno=689, col_offset=0)], Str('\nOSErr _err;\nControlPartCode inPart;\nResType inTagName;\nSize bufferSize;\nHandle hdl;\n\nif (!PyArg_ParseTuple(_args, "hO&",\n                      &inPart,\n                      PyMac_GetOSType, &inTagName))\n        return NULL;\n\n/* Check it is handle-sized */\n_err = GetControlDataSize(_self->ob_itself,\n                          inPart,\n                          inTagName,\n                          &bufferSize);\nif (_err != noErr)\n        return PyMac_Error(_err);\nif (bufferSize != sizeof(Handle)) {\n        PyErr_SetString(Ctl_Error, "GetControlDataSize() != sizeof(Handle)");\n        return NULL;\n}\n\n_err = GetControlData(_self->ob_itself,\n                      inPart,\n                      inTagName,\n                      sizeof(Handle),\n                      (Ptr)&hdl,\n                      &bufferSize);\n\nif (_err != noErr) {\n        return PyMac_Error(_err);\n}\n_res = Py_BuildValue("O&", OptResObj_New, hdl);\nreturn _res;\n', lineno=725, col_offset=-1), lineno=689, col_offset=0), Assign([Name('f', Store(), lineno=727, col_offset=0)], Call(Name('ManualGenerator', Load(), lineno=727, col_offset=4), [Str('GetControlData_Handle', lineno=727, col_offset=20), Name('getcontroldata_handle_body', Load(), lineno=727, col_offset=45)], [], None, None, lineno=727, col_offset=4), lineno=727, col_offset=0), Assign([Attribute(Name('f', Load(), lineno=728, col_offset=0), 'docstring', Store(), lineno=728, col_offset=0)], Lambda(arguments([], None, None, []), Str('(part, type) -> ResObj', lineno=728, col_offset=22), lineno=728, col_offset=14), lineno=728, col_offset=0), Expr(Call(Attribute(Name('object', Load(), lineno=729, col_offset=0), 'add', Load(), lineno=729, col_offset=0), [Name('f', Load(), lineno=729, col_offset=11)], [], None, None, lineno=729, col_offset=0), lineno=729, col_offset=0), Assign([Name('setcontroldata_callback_body', Store(), lineno=732, col_offset=0)], Str('\nOSErr _err;\nControlPartCode inPart;\nResType inTagName;\nPyObject *callback;\nUniversalProcPtr c_callback;\n\nif (!PyArg_ParseTuple(_args, "hO&O",\n                      &inPart,\n                      PyMac_GetOSType, &inTagName,\n                      &callback))\n        return NULL;\n\nif ( setcallback((PyObject *)_self, inTagName, callback, &c_callback) < 0 )\n        return NULL;\n_err = SetControlData(_self->ob_itself,\n                      inPart,\n                      inTagName,\n                      sizeof(c_callback),\n                      (Ptr)&c_callback);\n\nif (_err != noErr)\n        return PyMac_Error(_err);\n_res = Py_None;\nreturn _res;\n', lineno=757, col_offset=-1), lineno=732, col_offset=0), Assign([Name('f', Store(), lineno=759, col_offset=0)], Call(Name('ManualGenerator', Load(), lineno=759, col_offset=4), [Str('SetControlData_Callback', lineno=759, col_offset=20), Name('setcontroldata_callback_body', Load(), lineno=759, col_offset=47)], [], None, None, lineno=759, col_offset=4), lineno=759, col_offset=0), Assign([Attribute(Name('f', Load(), lineno=760, col_offset=0), 'docstring', Store(), lineno=760, col_offset=0)], Lambda(arguments([], None, None, []), Str('(callbackfunc) -> None', lineno=760, col_offset=22), lineno=760, col_offset=14), lineno=760, col_offset=0), Expr(Call(Attribute(Name('object', Load(), lineno=761, col_offset=0), 'add', Load(), lineno=761, col_offset=0), [Name('f', Load(), lineno=761, col_offset=11)], [], None, None, lineno=761, col_offset=0), lineno=761, col_offset=0), Assign([Name('createtabscontrol_body', Store(), lineno=765, col_offset=0)], Str('OSStatus _err;\nWindowPtr window;\nRect boundsRect;\nUInt16 size;\nUInt16 direction;\nint i;\nUInt16 numTabs;\nControlTabEntry tabArray[MAXTABS];\nControlHandle outControl;\nPyObject *tabArrayObj, *tabEntry;\n\n#ifndef CreateTabsControl\nPyMac_PRECHECK(CreateTabsControl);\n#endif\nif (!PyArg_ParseTuple(_args, "O&O&HHO",\n                      WinObj_Convert, &window,\n                      PyMac_GetRect, &boundsRect,\n                      &size,\n                      &direction,\n                      &tabArrayObj))\n        return NULL;\n\ni = PySequence_Length(tabArrayObj);\nif (i == -1)\n        return NULL;\nif (i > MAXTABS) {\n        PyErr_SetString(Ctl_Error, "Too many tabs");\n        return NULL;\n}\nnumTabs = i;\nfor (i=0; i<numTabs; i++) {\n        tabEntry = PySequence_GetItem(tabArrayObj, i);\n        if (tabEntry == NULL)\n                return NULL;\n        if (!PyArg_Parse(tabEntry, "(O&O&B)",\n                         ControlButtonContentInfo_Convert, &tabArray[i].icon,\n                         CFStringRefObj_Convert, &tabArray[i].name,\n                         &tabArray[i].enabled\n                         ))\n                return NULL;\n}\n\n_err = CreateTabsControl(window,\n                         &boundsRect,\n                         size,\n                         direction,\n                         numTabs,\n                         tabArray,\n                         &outControl);\nif (_err != noErr) return PyMac_Error(_err);\n_res = Py_BuildValue("O&",\n                     CtlObj_New, outControl);\nreturn _res;', lineno=818, col_offset=-1), lineno=765, col_offset=0), Assign([Name('f', Store(), lineno=820, col_offset=0)], Call(Name('ManualGenerator', Load(), lineno=820, col_offset=4), [Str('CreateTabsControl', lineno=820, col_offset=20), Name('createtabscontrol_body', Load(), lineno=820, col_offset=41)], [], None, None, lineno=820, col_offset=4), lineno=820, col_offset=0), Assign([Attribute(Name('f', Load(), lineno=821, col_offset=0), 'docstring', Store(), lineno=821, col_offset=0)], Lambda(arguments([], None, None, []), Str('(WindowPtr window, Rect boundsRect, UInt16 size, UInt16 direction, ControlTabEntry tabArray) -> (ControlHandle outControl)', lineno=821, col_offset=22), lineno=821, col_offset=14), lineno=821, col_offset=0), Expr(Call(Attribute(Name('module', Load(), lineno=822, col_offset=0), 'add', Load(), lineno=822, col_offset=0), [Name('f', Load(), lineno=822, col_offset=11)], [], None, None, lineno=822, col_offset=0), lineno=822, col_offset=0), Expr(Call(Name('SetOutputFileName', Load(), lineno=825, col_offset=0), [Name('OUTPUTFILE', Load(), lineno=825, col_offset=18)], [], None, None, lineno=825, col_offset=0), lineno=825, col_offset=0), Expr(Call(Attribute(Name('module', Load(), lineno=826, col_offset=0), 'generate', Load(), lineno=826, col_offset=0), [], [], None, None, lineno=826, col_offset=0), lineno=826, col_offset=0)])
