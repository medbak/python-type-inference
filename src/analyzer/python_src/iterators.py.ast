Module([Expr(Str('Various types of useful iterators and generators.', lineno=5, col_offset=0), lineno=5, col_offset=0), Assign([Name('__all__', Store(), lineno=7, col_offset=0)], List([Str('body_line_iterator', lineno=8, col_offset=4), Str('typed_subpart_iterator', lineno=9, col_offset=4), Str('walk', lineno=10, col_offset=4)], Load(), lineno=7, col_offset=10), lineno=7, col_offset=0), Import([alias('sys', None)], lineno=14, col_offset=0), ImportFrom('cStringIO', [alias('StringIO', None)], 0, lineno=15, col_offset=0), FunctionDef('walk', arguments([Name('self', Param(), lineno=20, col_offset=9)], None, None, []), [Expr(Str('Walk over the message tree, yielding each subpart.\n\n    The walk is performed in depth-first order.  This method is a\n    generator.\n    ', lineno=25, col_offset=-1), lineno=25, col_offset=-1), Expr(Yield(Name('self', Load(), lineno=26, col_offset=10), lineno=26, col_offset=4), lineno=26, col_offset=4), If(Call(Attribute(Name('self', Load(), lineno=27, col_offset=7), 'is_multipart', Load(), lineno=27, col_offset=7), [], [], None, None, lineno=27, col_offset=7), [For(Name('subpart', Store(), lineno=28, col_offset=12), Call(Attribute(Name('self', Load(), lineno=28, col_offset=23), 'get_payload', Load(), lineno=28, col_offset=23), [], [], None, None, lineno=28, col_offset=23), [For(Name('subsubpart', Store(), lineno=29, col_offset=16), Call(Attribute(Name('subpart', Load(), lineno=29, col_offset=30), 'walk', Load(), lineno=29, col_offset=30), [], [], None, None, lineno=29, col_offset=30), [Expr(Yield(Name('subsubpart', Load(), lineno=30, col_offset=22), lineno=30, col_offset=16), lineno=30, col_offset=16)], [], lineno=29, col_offset=12)], [], lineno=28, col_offset=8)], [], lineno=27, col_offset=4)], [], lineno=20, col_offset=0), FunctionDef('body_line_iterator', arguments([Name('msg', Param(), lineno=35, col_offset=23), Name('decode', Param(), lineno=35, col_offset=28)], None, None, [Name('False', Load(), lineno=35, col_offset=35)]), [Expr(Str('Iterate over the parts, returning string payloads line-by-line.\n\n    Optional decode (default False) is passed through to .get_payload().\n    ', lineno=39, col_offset=-1), lineno=39, col_offset=-1), For(Name('subpart', Store(), lineno=40, col_offset=8), Call(Attribute(Name('msg', Load(), lineno=40, col_offset=19), 'walk', Load(), lineno=40, col_offset=19), [], [], None, None, lineno=40, col_offset=19), [Assign([Name('payload', Store(), lineno=41, col_offset=8)], Call(Attribute(Name('subpart', Load(), lineno=41, col_offset=18), 'get_payload', Load(), lineno=41, col_offset=18), [], [keyword('decode', Name('decode', Load(), lineno=41, col_offset=45))], None, None, lineno=41, col_offset=18), lineno=41, col_offset=8), If(Call(Name('isinstance', Load(), lineno=42, col_offset=11), [Name('payload', Load(), lineno=42, col_offset=22), Name('basestring', Load(), lineno=42, col_offset=31)], [], None, None, lineno=42, col_offset=11), [For(Name('line', Store(), lineno=43, col_offset=16), Call(Name('StringIO', Load(), lineno=43, col_offset=24), [Name('payload', Load(), lineno=43, col_offset=33)], [], None, None, lineno=43, col_offset=24), [Expr(Yield(Name('line', Load(), lineno=44, col_offset=22), lineno=44, col_offset=16), lineno=44, col_offset=16)], [], lineno=43, col_offset=12)], [], lineno=42, col_offset=8)], [], lineno=40, col_offset=4)], [], lineno=35, col_offset=0), FunctionDef('typed_subpart_iterator', arguments([Name('msg', Param(), lineno=47, col_offset=27), Name('maintype', Param(), lineno=47, col_offset=32), Name('subtype', Param(), lineno=47, col_offset=49)], None, None, [Str('text', lineno=47, col_offset=41), Name('None', Load(), lineno=47, col_offset=57)]), [Expr(Str('Iterate over the subparts with a given MIME type.\n\n    Use `maintype\' as the main MIME type to match against; this defaults to\n    "text".  Optional `subtype\' is the MIME subtype to match against; if\n    omitted, only the main type is matched.\n    ', lineno=53, col_offset=-1), lineno=53, col_offset=-1), For(Name('subpart', Store(), lineno=54, col_offset=8), Call(Attribute(Name('msg', Load(), lineno=54, col_offset=19), 'walk', Load(), lineno=54, col_offset=19), [], [], None, None, lineno=54, col_offset=19), [If(Compare(Call(Attribute(Name('subpart', Load(), lineno=55, col_offset=11), 'get_content_maintype', Load(), lineno=55, col_offset=11), [], [], None, None, lineno=55, col_offset=11), [Eq()], [Name('maintype', Load(), lineno=55, col_offset=45)], lineno=55, col_offset=11), [If(BoolOp(Or(), [Compare(Name('subtype', Load(), lineno=56, col_offset=15), [Is()], [Name('None', Load(), lineno=56, col_offset=26)], lineno=56, col_offset=15), Compare(Call(Attribute(Name('subpart', Load(), lineno=56, col_offset=34), 'get_content_subtype', Load(), lineno=56, col_offset=34), [], [], None, None, lineno=56, col_offset=34), [Eq()], [Name('subtype', Load(), lineno=56, col_offset=67)], lineno=56, col_offset=34)], lineno=56, col_offset=15), [Expr(Yield(Name('subpart', Load(), lineno=57, col_offset=22), lineno=57, col_offset=16), lineno=57, col_offset=16)], [], lineno=56, col_offset=12)], [], lineno=55, col_offset=8)], [], lineno=54, col_offset=4)], [], lineno=47, col_offset=0), FunctionDef('_structure', arguments([Name('msg', Param(), lineno=61, col_offset=15), Name('fp', Param(), lineno=61, col_offset=20), Name('level', Param(), lineno=61, col_offset=29), Name('include_default', Param(), lineno=61, col_offset=38)], None, None, [Name('None', Load(), lineno=61, col_offset=23), Num(0, lineno=61, col_offset=35), Name('False', Load(), lineno=61, col_offset=54)]), [Expr(Str('A handy debugging aid', lineno=62, col_offset=4), lineno=62, col_offset=4), If(Compare(Name('fp', Load(), lineno=63, col_offset=7), [Is()], [Name('None', Load(), lineno=63, col_offset=13)], lineno=63, col_offset=7), [Assign([Name('fp', Store(), lineno=64, col_offset=8)], Attribute(Name('sys', Load(), lineno=64, col_offset=13), 'stdout', Load(), lineno=64, col_offset=13), lineno=64, col_offset=8)], [], lineno=63, col_offset=4), Assign([Name('tab', Store(), lineno=65, col_offset=4)], BinOp(Str(' ', lineno=65, col_offset=10), Mult(), BinOp(Name('level', Load(), lineno=65, col_offset=17), Mult(), Num(4, lineno=65, col_offset=25), lineno=65, col_offset=17), lineno=65, col_offset=10), lineno=65, col_offset=4), Print(Name('fp', Load(), lineno=66, col_offset=13), [BinOp(Name('tab', Load(), lineno=66, col_offset=17), Add(), Call(Attribute(Name('msg', Load(), lineno=66, col_offset=23), 'get_content_type', Load(), lineno=66, col_offset=23), [], [], None, None, lineno=66, col_offset=23), lineno=66, col_offset=17)], False, lineno=66, col_offset=4), If(Name('include_default', Load(), lineno=67, col_offset=7), [Print(Name('fp', Load(), lineno=68, col_offset=17), [BinOp(Str('[%s]', lineno=68, col_offset=21), Mod(), Call(Attribute(Name('msg', Load(), lineno=68, col_offset=30), 'get_default_type', Load(), lineno=68, col_offset=30), [], [], None, None, lineno=68, col_offset=30), lineno=68, col_offset=21)], True, lineno=68, col_offset=8)], [Print(Name('fp', Load(), lineno=70, col_offset=17), [], True, lineno=70, col_offset=8)], lineno=67, col_offset=4), If(Call(Attribute(Name('msg', Load(), lineno=71, col_offset=7), 'is_multipart', Load(), lineno=71, col_offset=7), [], [], None, None, lineno=71, col_offset=7), [For(Name('subpart', Store(), lineno=72, col_offset=12), Call(Attribute(Name('msg', Load(), lineno=72, col_offset=23), 'get_payload', Load(), lineno=72, col_offset=23), [], [], None, None, lineno=72, col_offset=23), [Expr(Call(Name('_structure', Load(), lineno=73, col_offset=12), [Name('subpart', Load(), lineno=73, col_offset=23), Name('fp', Load(), lineno=73, col_offset=32), BinOp(Name('level', Load(), lineno=73, col_offset=36), Add(), Num(1, lineno=73, col_offset=42), lineno=73, col_offset=36), Name('include_default', Load(), lineno=73, col_offset=45)], [], None, None, lineno=73, col_offset=12), lineno=73, col_offset=12)], [], lineno=72, col_offset=8)], [], lineno=71, col_offset=4)], [], lineno=61, col_offset=0)])
