Module([Expr(Str("Ttk wrapper.\n\nThis module provides classes to allow using Tk themed widget set.\n\nTtk is based on a revised and enhanced version of\nTIP #48 (http://tip.tcl.tk/48) specified style engine.\n\nIts basic idea is to separate, to the extent possible, the code\nimplementing a widget's behavior from the code implementing its\nappearance. Widget class bindings are primarily responsible for\nmaintaining the widget state and invoking callbacks, all aspects\nof the widgets appearance lies at Themes.\n", lineno=13, col_offset=-1), lineno=13, col_offset=-1), Assign([Name('__version__', Store(), lineno=15, col_offset=0)], Str('0.3.1', lineno=15, col_offset=14), lineno=15, col_offset=0), Assign([Name('__author__', Store(), lineno=17, col_offset=0)], Str('Guilherme Polo <ggpolo@gmail.com>', lineno=17, col_offset=13), lineno=17, col_offset=0), Assign([Name('__all__', Store(), lineno=19, col_offset=0)], List([Str('Button', lineno=19, col_offset=11), Str('Checkbutton', lineno=19, col_offset=21), Str('Combobox', lineno=19, col_offset=36), Str('Entry', lineno=19, col_offset=48), Str('Frame', lineno=19, col_offset=57), Str('Label', lineno=19, col_offset=66), Str('Labelframe', lineno=20, col_offset=11), Str('LabelFrame', lineno=20, col_offset=25), Str('Menubutton', lineno=20, col_offset=39), Str('Notebook', lineno=20, col_offset=53), Str('Panedwindow', lineno=20, col_offset=65), Str('PanedWindow', lineno=21, col_offset=11), Str('Progressbar', lineno=21, col_offset=26), Str('Radiobutton', lineno=21, col_offset=41), Str('Scale', lineno=21, col_offset=56), Str('Scrollbar', lineno=21, col_offset=65), Str('Separator', lineno=22, col_offset=11), Str('Sizegrip', lineno=22, col_offset=24), Str('Style', lineno=22, col_offset=36), Str('Treeview', lineno=22, col_offset=45), Str('LabeledScale', lineno=24, col_offset=11), Str('OptionMenu', lineno=24, col_offset=27), Str('tclobjs_to_py', lineno=26, col_offset=11), Str('setup_master', lineno=26, col_offset=28)], Load(), lineno=19, col_offset=10), lineno=19, col_offset=0), Import([alias('Tkinter', None)], lineno=28, col_offset=0), Assign([Name('_flatten', Store(), lineno=30, col_offset=0)], Attribute(Name('Tkinter', Load(), lineno=30, col_offset=11), '_flatten', Load(), lineno=30, col_offset=11), lineno=30, col_offset=0), Assign([Name('_REQUIRE_TILE', Store(), lineno=33, col_offset=0)], IfExp(Compare(Attribute(Name('Tkinter', Load(), lineno=33, col_offset=24), 'TkVersion', Load(), lineno=33, col_offset=24), [Lt()], [Num(8.5, lineno=33, col_offset=44)], lineno=33, col_offset=24), Name('True', Load(), lineno=33, col_offset=16), Name('False', Load(), lineno=33, col_offset=53), lineno=33, col_offset=16), lineno=33, col_offset=0), FunctionDef('_load_tile', arguments([Name('master', Param(), lineno=35, col_offset=15)], None, None, []), [If(Name('_REQUIRE_TILE', Load(), lineno=36, col_offset=7), [Import([alias('os', None)], lineno=37, col_offset=8), Assign([Name('tilelib', Store(), lineno=38, col_offset=8)], Call(Attribute(Attribute(Name('os', Load(), lineno=38, col_offset=18), 'environ', Load(), lineno=38, col_offset=18), 'get', Load(), lineno=38, col_offset=18), [Str('TILE_LIBRARY', lineno=38, col_offset=33)], [], None, None, lineno=38, col_offset=18), lineno=38, col_offset=8), If(Name('tilelib', Load(), lineno=39, col_offset=11), [Expr(Call(Attribute(Attribute(Name('master', Load(), lineno=43, col_offset=12), 'tk', Load(), lineno=43, col_offset=12), 'eval', Load(), lineno=43, col_offset=12), [BinOp(Str('global auto_path; lappend auto_path {%s}', lineno=44, col_offset=20), Mod(), Name('tilelib', Load(), lineno=45, col_offset=47), lineno=44, col_offset=20)], [], None, None, lineno=43, col_offset=12), lineno=43, col_offset=12)], [], lineno=39, col_offset=8), Expr(Call(Attribute(Attribute(Name('master', Load(), lineno=47, col_offset=8), 'tk', Load(), lineno=47, col_offset=8), 'eval', Load(), lineno=47, col_offset=8), [Str('package require tile', lineno=47, col_offset=23)], [], None, None, lineno=47, col_offset=8), lineno=47, col_offset=8), Assign([Attribute(Name('master', Load(), lineno=48, col_offset=8), '_tile_loaded', Store(), lineno=48, col_offset=8)], Name('True', Load(), lineno=48, col_offset=30), lineno=48, col_offset=8)], [], lineno=36, col_offset=4)], [], lineno=35, col_offset=0), FunctionDef('_format_optdict', arguments([Name('optdict', Param(), lineno=50, col_offset=20), Name('script', Param(), lineno=50, col_offset=29), Name('ignore', Param(), lineno=50, col_offset=43)], None, None, [Name('False', Load(), lineno=50, col_offset=36), Name('None', Load(), lineno=50, col_offset=50)]), [Expr(Str("Formats optdict to a tuple to pass it to tk.call.\n\n    E.g. (script=False):\n      {'foreground': 'blue', 'padding': [1, 2, 3, 4]} returns:\n      ('-foreground', 'blue', '-padding', '1 2 3 4')", lineno=55, col_offset=-1), lineno=55, col_offset=-1), Assign([Name('format', Store(), lineno=56, col_offset=4)], IfExp(UnaryOp(Not(), Name('script', Load(), lineno=56, col_offset=25), lineno=56, col_offset=21), Str('%s', lineno=56, col_offset=13), Str('{%s}', lineno=56, col_offset=37), lineno=56, col_offset=13), lineno=56, col_offset=4), Assign([Name('opts', Store(), lineno=58, col_offset=4)], List([], Load(), lineno=58, col_offset=11), lineno=58, col_offset=4), For(Tuple([Name('opt', Store(), lineno=59, col_offset=8), Name('value', Store(), lineno=59, col_offset=13)], Store(), lineno=59, col_offset=8), Call(Attribute(Name('optdict', Load(), lineno=59, col_offset=22), 'iteritems', Load(), lineno=59, col_offset=22), [], [], None, None, lineno=59, col_offset=22), [If(BoolOp(And(), [Name('ignore', Load(), lineno=60, col_offset=11), Compare(Name('opt', Load(), lineno=60, col_offset=22), [In()], [Name('ignore', Load(), lineno=60, col_offset=29)], lineno=60, col_offset=22)], lineno=60, col_offset=11), [Continue( lineno=61, col_offset=12)], [], lineno=60, col_offset=8), If(Call(Name('isinstance', Load(), lineno=63, col_offset=11), [Name('value', Load(), lineno=63, col_offset=22), Tuple([Name('list', Load(), lineno=63, col_offset=30), Name('tuple', Load(), lineno=63, col_offset=36)], Load(), lineno=63, col_offset=30)], [], None, None, lineno=63, col_offset=11), [Assign([Name('v', Store(), lineno=64, col_offset=12)], List([], Load(), lineno=64, col_offset=16), lineno=64, col_offset=12), For(Name('val', Store(), lineno=65, col_offset=16), Name('value', Load(), lineno=65, col_offset=23), [If(Call(Name('isinstance', Load(), lineno=66, col_offset=19), [Name('val', Load(), lineno=66, col_offset=30), Name('basestring', Load(), lineno=66, col_offset=35)], [], None, None, lineno=66, col_offset=19), [Expr(Call(Attribute(Name('v', Load(), lineno=67, col_offset=20), 'append', Load(), lineno=67, col_offset=20), [IfExp(Name('val', Load(), lineno=67, col_offset=45), Call(Name('unicode', Load(), lineno=67, col_offset=29), [Name('val', Load(), lineno=67, col_offset=37)], [], None, None, lineno=67, col_offset=29), Str('{}', lineno=67, col_offset=54), lineno=67, col_offset=29)], [], None, None, lineno=67, col_offset=20), lineno=67, col_offset=20)], [Expr(Call(Attribute(Name('v', Load(), lineno=69, col_offset=20), 'append', Load(), lineno=69, col_offset=20), [Call(Name('str', Load(), lineno=69, col_offset=29), [Name('val', Load(), lineno=69, col_offset=33)], [], None, None, lineno=69, col_offset=29)], [], None, None, lineno=69, col_offset=20), lineno=69, col_offset=20)], lineno=66, col_offset=16)], [], lineno=65, col_offset=12), Assign([Name('value', Store(), lineno=73, col_offset=12)], BinOp(Name('format', Load(), lineno=73, col_offset=20), Mod(), Call(Attribute(Str(' ', lineno=73, col_offset=29), 'join', Load(), lineno=73, col_offset=29), [GeneratorExp(BinOp(IfExp(Compare(Str(' ', lineno=74, col_offset=27), [In()], [Name('val', Load(), lineno=74, col_offset=34)], lineno=74, col_offset=27), Str('{%s}', lineno=74, col_offset=17), Str('%s', lineno=74, col_offset=43), lineno=74, col_offset=17), Mod(), Name('val', Load(), lineno=74, col_offset=51), lineno=74, col_offset=16), [comprehension(Name('val', Store(), lineno=74, col_offset=59), Name('v', Load(), lineno=74, col_offset=66), [])], lineno=74, col_offset=16)], [], None, None, lineno=73, col_offset=29), lineno=73, col_offset=20), lineno=73, col_offset=12)], [], lineno=63, col_offset=8), If(BoolOp(And(), [Name('script', Load(), lineno=76, col_offset=11), Compare(Name('value', Load(), lineno=76, col_offset=22), [Eq()], [Str('', lineno=76, col_offset=31)], lineno=76, col_offset=22)], lineno=76, col_offset=11), [Assign([Name('value', Store(), lineno=77, col_offset=12)], Str('{}', lineno=77, col_offset=20), lineno=77, col_offset=12)], [], lineno=76, col_offset=8), Expr(Call(Attribute(Name('opts', Load(), lineno=79, col_offset=8), 'append', Load(), lineno=79, col_offset=8), [Tuple([BinOp(Str('-%s', lineno=79, col_offset=21), Mod(), Name('opt', Load(), lineno=79, col_offset=29), lineno=79, col_offset=21), Name('value', Load(), lineno=79, col_offset=34)], Load(), lineno=79, col_offset=21)], [], None, None, lineno=79, col_offset=8), lineno=79, col_offset=8)], [], lineno=59, col_offset=4), Return(Call(Name('_flatten', Load(), lineno=82, col_offset=11), [Name('opts', Load(), lineno=82, col_offset=20)], [], None, None, lineno=82, col_offset=11), lineno=82, col_offset=4)], [], lineno=50, col_offset=0), FunctionDef('_format_mapdict', arguments([Name('mapdict', Param(), lineno=84, col_offset=20), Name('script', Param(), lineno=84, col_offset=29)], None, None, [Name('False', Load(), lineno=84, col_offset=36)]), [Expr(Str("Formats mapdict to pass it to tk.call.\n\n    E.g. (script=False):\n      {'expand': [('active', 'selected', 'grey'), ('focus', [1, 2, 3, 4])]}\n\n      returns:\n\n      ('-expand', '{active selected} grey focus {1, 2, 3, 4}')", lineno=92, col_offset=-1), lineno=92, col_offset=-1), Assign([Name('format', Store(), lineno=95, col_offset=4)], IfExp(UnaryOp(Not(), Name('script', Load(), lineno=95, col_offset=25), lineno=95, col_offset=21), Str('%s', lineno=95, col_offset=13), Str('{%s}', lineno=95, col_offset=37), lineno=95, col_offset=13), lineno=95, col_offset=4), Assign([Name('opts', Store(), lineno=97, col_offset=4)], List([], Load(), lineno=97, col_offset=11), lineno=97, col_offset=4), For(Tuple([Name('opt', Store(), lineno=98, col_offset=8), Name('value', Store(), lineno=98, col_offset=13)], Store(), lineno=98, col_offset=8), Call(Attribute(Name('mapdict', Load(), lineno=98, col_offset=22), 'iteritems', Load(), lineno=98, col_offset=22), [], [], None, None, lineno=98, col_offset=22), [Assign([Name('opt_val', Store(), lineno=100, col_offset=8)], List([], Load(), lineno=100, col_offset=18), lineno=100, col_offset=8), For(Name('statespec', Store(), lineno=103, col_offset=12), Name('value', Load(), lineno=103, col_offset=25), [Assign([Tuple([Name('state', Store(), lineno=104, col_offset=12), Name('val', Store(), lineno=104, col_offset=19)], Store(), lineno=104, col_offset=12)], Tuple([Subscript(Name('statespec', Load(), lineno=104, col_offset=25), Slice(None, Num(-1, lineno=104, col_offset=37), None), Load(), lineno=104, col_offset=25), Subscript(Name('statespec', Load(), lineno=104, col_offset=41), Index(Num(-1, lineno=104, col_offset=52)), Load(), lineno=104, col_offset=41)], Load(), lineno=104, col_offset=25), lineno=104, col_offset=12), If(Compare(Call(Name('len', Load(), lineno=106, col_offset=15), [Name('state', Load(), lineno=106, col_offset=19)], [], None, None, lineno=106, col_offset=15), [Gt()], [Num(1, lineno=106, col_offset=28)], lineno=106, col_offset=15), [Assign([Name('state', Store(), lineno=107, col_offset=16)], BinOp(Str('{%s}', lineno=107, col_offset=24), Mod(), Call(Attribute(Str(' ', lineno=107, col_offset=33), 'join', Load(), lineno=107, col_offset=33), [Name('state', Load(), lineno=107, col_offset=42)], [], None, None, lineno=107, col_offset=33), lineno=107, col_offset=24), lineno=107, col_offset=16)], [Assign([Name('state', Store(), lineno=111, col_offset=16)], BoolOp(Or(), [Subscript(Name('state', Load(), lineno=111, col_offset=24), Index(Num(0, lineno=111, col_offset=30)), Load(), lineno=111, col_offset=24), Str('{}', lineno=111, col_offset=36)], lineno=111, col_offset=24), lineno=111, col_offset=16)], lineno=106, col_offset=12), If(Call(Name('isinstance', Load(), lineno=113, col_offset=15), [Name('val', Load(), lineno=113, col_offset=26), Tuple([Name('list', Load(), lineno=113, col_offset=32), Name('tuple', Load(), lineno=113, col_offset=38)], Load(), lineno=113, col_offset=32)], [], None, None, lineno=113, col_offset=15), [Assign([Name('val', Store(), lineno=114, col_offset=16)], BinOp(Str('{%s}', lineno=114, col_offset=22), Mod(), Call(Attribute(Str(' ', lineno=114, col_offset=31), 'join', Load(), lineno=114, col_offset=31), [Call(Name('map', Load(), lineno=114, col_offset=40), [Name('str', Load(), lineno=114, col_offset=44), Name('val', Load(), lineno=114, col_offset=49)], [], None, None, lineno=114, col_offset=40)], [], None, None, lineno=114, col_offset=31), lineno=114, col_offset=22), lineno=114, col_offset=16)], [], lineno=113, col_offset=12), Expr(Call(Attribute(Name('opt_val', Load(), lineno=116, col_offset=12), 'append', Load(), lineno=116, col_offset=12), [BinOp(Str('%s %s', lineno=116, col_offset=27), Mod(), Tuple([Name('state', Load(), lineno=116, col_offset=38), Name('val', Load(), lineno=116, col_offset=45)], Load(), lineno=116, col_offset=38), lineno=116, col_offset=27)], [], None, None, lineno=116, col_offset=12), lineno=116, col_offset=12)], [], lineno=103, col_offset=8), Expr(Call(Attribute(Name('opts', Load(), lineno=118, col_offset=8), 'append', Load(), lineno=118, col_offset=8), [Tuple([BinOp(Str('-%s', lineno=118, col_offset=21), Mod(), Name('opt', Load(), lineno=118, col_offset=29), lineno=118, col_offset=21), BinOp(Name('format', Load(), lineno=118, col_offset=34), Mod(), Call(Attribute(Str(' ', lineno=118, col_offset=43), 'join', Load(), lineno=118, col_offset=43), [Name('opt_val', Load(), lineno=118, col_offset=52)], [], None, None, lineno=118, col_offset=43), lineno=118, col_offset=34)], Load(), lineno=118, col_offset=21)], [], None, None, lineno=118, col_offset=8), lineno=118, col_offset=8)], [], lineno=98, col_offset=4), Return(Call(Name('_flatten', Load(), lineno=120, col_offset=11), [Name('opts', Load(), lineno=120, col_offset=20)], [], None, None, lineno=120, col_offset=11), lineno=120, col_offset=4)], [], lineno=84, col_offset=0), FunctionDef('_format_elemcreate', arguments([Name('etype', Param(), lineno=122, col_offset=23), Name('script', Param(), lineno=122, col_offset=30)], 'args', 'kw', [Name('False', Load(), lineno=122, col_offset=37)]), [Expr(Str('Formats args and kw according to the given element factory etype.', lineno=123, col_offset=4), lineno=123, col_offset=4), Assign([Name('spec', Store(), lineno=124, col_offset=4)], Name('None', Load(), lineno=124, col_offset=11), lineno=124, col_offset=4), Assign([Name('opts', Store(), lineno=125, col_offset=4)], Tuple([], Load(), lineno=125, col_offset=11), lineno=125, col_offset=4), If(Compare(Name('etype', Load(), lineno=126, col_offset=7), [In()], [Tuple([Str('image', lineno=126, col_offset=17), Str('vsapi', lineno=126, col_offset=26)], Load(), lineno=126, col_offset=17)], lineno=126, col_offset=7), [If(Compare(Name('etype', Load(), lineno=127, col_offset=11), [Eq()], [Str('image', lineno=127, col_offset=20)], lineno=127, col_offset=11), [Assign([Name('iname', Store(), lineno=129, col_offset=12)], Subscript(Name('args', Load(), lineno=129, col_offset=20), Index(Num(0, lineno=129, col_offset=25)), Load(), lineno=129, col_offset=20), lineno=129, col_offset=12), Assign([Name('imagespec', Store(), lineno=132, col_offset=12)], Subscript(Call(Name('_format_mapdict', Load(), lineno=132, col_offset=24), [Dict([Name('None', Load(), lineno=132, col_offset=41)], [Subscript(Name('args', Load(), lineno=132, col_offset=47), Slice(Num(1, lineno=132, col_offset=52), None, None), Load(), lineno=132, col_offset=47)], lineno=132, col_offset=40)], [], None, None, lineno=132, col_offset=24), Index(Num(1, lineno=132, col_offset=58)), Load(), lineno=132, col_offset=24), lineno=132, col_offset=12), Assign([Name('spec', Store(), lineno=133, col_offset=12)], BinOp(Str('%s %s', lineno=133, col_offset=19), Mod(), Tuple([Name('iname', Load(), lineno=133, col_offset=30), Name('imagespec', Load(), lineno=133, col_offset=37)], Load(), lineno=133, col_offset=30), lineno=133, col_offset=19), lineno=133, col_offset=12)], [Assign([Tuple([Name('class_name', Store(), lineno=140, col_offset=12), Name('part_id', Store(), lineno=140, col_offset=24)], Store(), lineno=140, col_offset=12)], Subscript(Name('args', Load(), lineno=140, col_offset=34), Slice(None, Num(2, lineno=140, col_offset=40), None), Load(), lineno=140, col_offset=34), lineno=140, col_offset=12), Assign([Name('statemap', Store(), lineno=141, col_offset=12)], Subscript(Call(Name('_format_mapdict', Load(), lineno=141, col_offset=23), [Dict([Name('None', Load(), lineno=141, col_offset=40)], [Subscript(Name('args', Load(), lineno=141, col_offset=46), Slice(Num(2, lineno=141, col_offset=51), None, None), Load(), lineno=141, col_offset=46)], lineno=141, col_offset=39)], [], None, None, lineno=141, col_offset=23), Index(Num(1, lineno=141, col_offset=57)), Load(), lineno=141, col_offset=23), lineno=141, col_offset=12), Assign([Name('spec', Store(), lineno=142, col_offset=12)], BinOp(Str('%s %s %s', lineno=142, col_offset=19), Mod(), Tuple([Name('class_name', Load(), lineno=142, col_offset=33), Name('part_id', Load(), lineno=142, col_offset=45), Name('statemap', Load(), lineno=142, col_offset=54)], Load(), lineno=142, col_offset=33), lineno=142, col_offset=19), lineno=142, col_offset=12)], lineno=127, col_offset=8), Assign([Name('opts', Store(), lineno=144, col_offset=8)], Call(Name('_format_optdict', Load(), lineno=144, col_offset=15), [Name('kw', Load(), lineno=144, col_offset=31), Name('script', Load(), lineno=144, col_offset=35)], [], None, None, lineno=144, col_offset=15), lineno=144, col_offset=8)], [If(Compare(Name('etype', Load(), lineno=146, col_offset=9), [Eq()], [Str('from', lineno=146, col_offset=18)], lineno=146, col_offset=9), [Assign([Name('spec', Store(), lineno=149, col_offset=8)], Subscript(Name('args', Load(), lineno=149, col_offset=15), Index(Num(0, lineno=149, col_offset=20)), Load(), lineno=149, col_offset=15), lineno=149, col_offset=8), If(Compare(Call(Name('len', Load(), lineno=150, col_offset=11), [Name('args', Load(), lineno=150, col_offset=15)], [], None, None, lineno=150, col_offset=11), [Gt()], [Num(1, lineno=150, col_offset=23)], lineno=150, col_offset=11), [Assign([Name('opts', Store(), lineno=151, col_offset=12)], Tuple([Subscript(Name('args', Load(), lineno=151, col_offset=20), Index(Num(1, lineno=151, col_offset=25)), Load(), lineno=151, col_offset=20)], Load(), lineno=151, col_offset=20), lineno=151, col_offset=12)], [], lineno=150, col_offset=8)], [], lineno=146, col_offset=9)], lineno=126, col_offset=4), If(Name('script', Load(), lineno=153, col_offset=7), [Assign([Name('spec', Store(), lineno=154, col_offset=8)], BinOp(Str('{%s}', lineno=154, col_offset=15), Mod(), Name('spec', Load(), lineno=154, col_offset=24), lineno=154, col_offset=15), lineno=154, col_offset=8), Assign([Name('opts', Store(), lineno=155, col_offset=8)], Call(Attribute(Str(' ', lineno=155, col_offset=15), 'join', Load(), lineno=155, col_offset=15), [Call(Name('map', Load(), lineno=155, col_offset=24), [Name('str', Load(), lineno=155, col_offset=28), Name('opts', Load(), lineno=155, col_offset=33)], [], None, None, lineno=155, col_offset=24)], [], None, None, lineno=155, col_offset=15), lineno=155, col_offset=8)], [], lineno=153, col_offset=4), Return(Tuple([Name('spec', Load(), lineno=157, col_offset=11), Name('opts', Load(), lineno=157, col_offset=17)], Load(), lineno=157, col_offset=11), lineno=157, col_offset=4)], [], lineno=122, col_offset=0), FunctionDef('_format_layoutlist', arguments([Name('layout', Param(), lineno=159, col_offset=23), Name('indent', Param(), lineno=159, col_offset=31), Name('indent_size', Param(), lineno=159, col_offset=41)], None, None, [Num(0, lineno=159, col_offset=38), Num(2, lineno=159, col_offset=53)]), [Expr(Str('Formats a layout list so we can pass the result to ttk::style\n    layout and ttk::style settings. Note that the layout doesn\'t has to\n    be a list necessarily.\n\n    E.g.:\n      [("Menubutton.background", None),\n       ("Menubutton.button", {"children":\n           [("Menubutton.focus", {"children":\n               [("Menubutton.padding", {"children":\n                [("Menubutton.label", {"side": "left", "expand": 1})]\n               })]\n           })]\n       }),\n       ("Menubutton.indicator", {"side": "right"})\n      ]\n\n      returns:\n\n      Menubutton.background\n      Menubutton.button -children {\n        Menubutton.focus -children {\n          Menubutton.padding -children {\n            Menubutton.label -side left -expand 1\n          }\n        }\n      }\n      Menubutton.indicator -side right', lineno=186, col_offset=-1), lineno=186, col_offset=-1), Assign([Name('script', Store(), lineno=187, col_offset=4)], List([], Load(), lineno=187, col_offset=13), lineno=187, col_offset=4), For(Name('layout_elem', Store(), lineno=189, col_offset=8), Name('layout', Load(), lineno=189, col_offset=23), [Assign([Tuple([Name('elem', Store(), lineno=190, col_offset=8), Name('opts', Store(), lineno=190, col_offset=14)], Store(), lineno=190, col_offset=8)], Name('layout_elem', Load(), lineno=190, col_offset=21), lineno=190, col_offset=8), Assign([Name('opts', Store(), lineno=191, col_offset=8)], BoolOp(Or(), [Name('opts', Load(), lineno=191, col_offset=15), Dict([], [], lineno=191, col_offset=23)], lineno=191, col_offset=15), lineno=191, col_offset=8), Assign([Name('fopts', Store(), lineno=192, col_offset=8)], Call(Attribute(Str(' ', lineno=192, col_offset=16), 'join', Load(), lineno=192, col_offset=16), [Call(Name('map', Load(), lineno=192, col_offset=25), [Name('str', Load(), lineno=192, col_offset=29), Call(Name('_format_optdict', Load(), lineno=192, col_offset=34), [Name('opts', Load(), lineno=192, col_offset=50), Name('True', Load(), lineno=192, col_offset=56), Str('children', lineno=192, col_offset=62)], [], None, None, lineno=192, col_offset=34)], [], None, None, lineno=192, col_offset=25)], [], None, None, lineno=192, col_offset=16), lineno=192, col_offset=8), Assign([Name('head', Store(), lineno=193, col_offset=8)], BinOp(Str('%s%s%s', lineno=193, col_offset=15), Mod(), Tuple([BinOp(Str(' ', lineno=193, col_offset=27), Mult(), Name('indent', Load(), lineno=193, col_offset=33), lineno=193, col_offset=27), Name('elem', Load(), lineno=193, col_offset=41), IfExp(Name('fopts', Load(), lineno=193, col_offset=66), BinOp(Str(' %s', lineno=193, col_offset=48), Mod(), Name('fopts', Load(), lineno=193, col_offset=56), lineno=193, col_offset=48), Str('', lineno=193, col_offset=77), lineno=193, col_offset=47)], Load(), lineno=193, col_offset=27), lineno=193, col_offset=15), lineno=193, col_offset=8), If(Compare(Str('children', lineno=195, col_offset=11), [In()], [Name('opts', Load(), lineno=195, col_offset=25)], lineno=195, col_offset=11), [Expr(Call(Attribute(Name('script', Load(), lineno=196, col_offset=12), 'append', Load(), lineno=196, col_offset=12), [BinOp(Name('head', Load(), lineno=196, col_offset=26), Add(), Str(' -children {', lineno=196, col_offset=33), lineno=196, col_offset=26)], [], None, None, lineno=196, col_offset=12), lineno=196, col_offset=12), AugAssign(Name('indent', Store(), lineno=197, col_offset=12), Add(), Name('indent_size', Load(), lineno=197, col_offset=22), lineno=197, col_offset=12), Assign([Tuple([Name('newscript', Store(), lineno=198, col_offset=12), Name('indent', Store(), lineno=198, col_offset=23)], Store(), lineno=198, col_offset=12)], Call(Name('_format_layoutlist', Load(), lineno=198, col_offset=32), [Subscript(Name('opts', Load(), lineno=198, col_offset=51), Index(Str('children', lineno=198, col_offset=56)), Load(), lineno=198, col_offset=51), Name('indent', Load(), lineno=198, col_offset=69), Name('indent_size', Load(), lineno=199, col_offset=16)], [], None, None, lineno=198, col_offset=32), lineno=198, col_offset=12), Expr(Call(Attribute(Name('script', Load(), lineno=200, col_offset=12), 'append', Load(), lineno=200, col_offset=12), [Name('newscript', Load(), lineno=200, col_offset=26)], [], None, None, lineno=200, col_offset=12), lineno=200, col_offset=12), AugAssign(Name('indent', Store(), lineno=201, col_offset=12), Sub(), Name('indent_size', Load(), lineno=201, col_offset=22), lineno=201, col_offset=12), Expr(Call(Attribute(Name('script', Load(), lineno=202, col_offset=12), 'append', Load(), lineno=202, col_offset=12), [BinOp(Str('%s}', lineno=202, col_offset=26), Mod(), BinOp(Str(' ', lineno=202, col_offset=35), Mult(), Name('indent', Load(), lineno=202, col_offset=41), lineno=202, col_offset=35), lineno=202, col_offset=26)], [], None, None, lineno=202, col_offset=12), lineno=202, col_offset=12)], [Expr(Call(Attribute(Name('script', Load(), lineno=204, col_offset=12), 'append', Load(), lineno=204, col_offset=12), [Name('head', Load(), lineno=204, col_offset=26)], [], None, None, lineno=204, col_offset=12), lineno=204, col_offset=12)], lineno=195, col_offset=8)], [], lineno=189, col_offset=4), Return(Tuple([Call(Attribute(Str('\n', lineno=206, col_offset=11), 'join', Load(), lineno=206, col_offset=11), [Name('script', Load(), lineno=206, col_offset=21)], [], None, None, lineno=206, col_offset=11), Name('indent', Load(), lineno=206, col_offset=30)], Load(), lineno=206, col_offset=11), lineno=206, col_offset=4)], [], lineno=159, col_offset=0), FunctionDef('_script_from_settings', arguments([Name('settings', Param(), lineno=208, col_offset=26)], None, None, []), [Expr(Str('Returns an appropriate script, based on settings, according to\n    theme_settings definition to be used by theme_settings and\n    theme_create.', lineno=211, col_offset=-1), lineno=211, col_offset=-1), Assign([Name('script', Store(), lineno=212, col_offset=4)], List([], Load(), lineno=212, col_offset=13), lineno=212, col_offset=4), For(Tuple([Name('name', Store(), lineno=215, col_offset=8), Name('opts', Store(), lineno=215, col_offset=14)], Store(), lineno=215, col_offset=8), Call(Attribute(Name('settings', Load(), lineno=215, col_offset=22), 'iteritems', Load(), lineno=215, col_offset=22), [], [], None, None, lineno=215, col_offset=22), [If(Call(Attribute(Name('opts', Load(), lineno=217, col_offset=11), 'get', Load(), lineno=217, col_offset=11), [Str('configure', lineno=217, col_offset=20)], [], None, None, lineno=217, col_offset=11), [Assign([Name('s', Store(), lineno=218, col_offset=12)], Call(Attribute(Str(' ', lineno=218, col_offset=16), 'join', Load(), lineno=218, col_offset=16), [Call(Name('map', Load(), lineno=218, col_offset=25), [Name('unicode', Load(), lineno=218, col_offset=29), Call(Name('_format_optdict', Load(), lineno=218, col_offset=38), [Subscript(Name('opts', Load(), lineno=218, col_offset=54), Index(Str('configure', lineno=218, col_offset=59)), Load(), lineno=218, col_offset=54), Name('True', Load(), lineno=218, col_offset=73)], [], None, None, lineno=218, col_offset=38)], [], None, None, lineno=218, col_offset=25)], [], None, None, lineno=218, col_offset=16), lineno=218, col_offset=12), Expr(Call(Attribute(Name('script', Load(), lineno=219, col_offset=12), 'append', Load(), lineno=219, col_offset=12), [BinOp(Str('ttk::style configure %s %s;', lineno=219, col_offset=26), Mod(), Tuple([Name('name', Load(), lineno=219, col_offset=59), Name('s', Load(), lineno=219, col_offset=65)], Load(), lineno=219, col_offset=59), lineno=219, col_offset=26)], [], None, None, lineno=219, col_offset=12), lineno=219, col_offset=12)], [], lineno=217, col_offset=8), If(Call(Attribute(Name('opts', Load(), lineno=221, col_offset=11), 'get', Load(), lineno=221, col_offset=11), [Str('map', lineno=221, col_offset=20)], [], None, None, lineno=221, col_offset=11), [Assign([Name('s', Store(), lineno=222, col_offset=12)], Call(Attribute(Str(' ', lineno=222, col_offset=16), 'join', Load(), lineno=222, col_offset=16), [Call(Name('map', Load(), lineno=222, col_offset=25), [Name('unicode', Load(), lineno=222, col_offset=29), Call(Name('_format_mapdict', Load(), lineno=222, col_offset=38), [Subscript(Name('opts', Load(), lineno=222, col_offset=54), Index(Str('map', lineno=222, col_offset=59)), Load(), lineno=222, col_offset=54), Name('True', Load(), lineno=222, col_offset=67)], [], None, None, lineno=222, col_offset=38)], [], None, None, lineno=222, col_offset=25)], [], None, None, lineno=222, col_offset=16), lineno=222, col_offset=12), Expr(Call(Attribute(Name('script', Load(), lineno=223, col_offset=12), 'append', Load(), lineno=223, col_offset=12), [BinOp(Str('ttk::style map %s %s;', lineno=223, col_offset=26), Mod(), Tuple([Name('name', Load(), lineno=223, col_offset=53), Name('s', Load(), lineno=223, col_offset=59)], Load(), lineno=223, col_offset=53), lineno=223, col_offset=26)], [], None, None, lineno=223, col_offset=12), lineno=223, col_offset=12)], [], lineno=221, col_offset=8), If(Compare(Str('layout', lineno=225, col_offset=11), [In()], [Name('opts', Load(), lineno=225, col_offset=23)], lineno=225, col_offset=11), [If(UnaryOp(Not(), Subscript(Name('opts', Load(), lineno=226, col_offset=19), Index(Str('layout', lineno=226, col_offset=24)), Load(), lineno=226, col_offset=19), lineno=226, col_offset=15), [Assign([Name('s', Store(), lineno=227, col_offset=16)], Str('null', lineno=227, col_offset=20), lineno=227, col_offset=16)], [Assign([Tuple([Name('s', Store(), lineno=229, col_offset=16), Name('_', Store(), lineno=229, col_offset=19)], Store(), lineno=229, col_offset=16)], Call(Name('_format_layoutlist', Load(), lineno=229, col_offset=23), [Subscript(Name('opts', Load(), lineno=229, col_offset=42), Index(Str('layout', lineno=229, col_offset=47)), Load(), lineno=229, col_offset=42)], [], None, None, lineno=229, col_offset=23), lineno=229, col_offset=16)], lineno=226, col_offset=12), Expr(Call(Attribute(Name('script', Load(), lineno=230, col_offset=12), 'append', Load(), lineno=230, col_offset=12), [BinOp(Str('ttk::style layout %s {\n%s\n}', lineno=230, col_offset=26), Mod(), Tuple([Name('name', Load(), lineno=230, col_offset=61), Name('s', Load(), lineno=230, col_offset=67)], Load(), lineno=230, col_offset=61), lineno=230, col_offset=26)], [], None, None, lineno=230, col_offset=12), lineno=230, col_offset=12)], [], lineno=225, col_offset=8), If(Call(Attribute(Name('opts', Load(), lineno=232, col_offset=11), 'get', Load(), lineno=232, col_offset=11), [Str('element create', lineno=232, col_offset=20)], [], None, None, lineno=232, col_offset=11), [Assign([Name('eopts', Store(), lineno=233, col_offset=12)], Subscript(Name('opts', Load(), lineno=233, col_offset=20), Index(Str('element create', lineno=233, col_offset=25)), Load(), lineno=233, col_offset=20), lineno=233, col_offset=12), Assign([Name('etype', Store(), lineno=234, col_offset=12)], Subscript(Name('eopts', Load(), lineno=234, col_offset=20), Index(Num(0, lineno=234, col_offset=26)), Load(), lineno=234, col_offset=20), lineno=234, col_offset=12), Assign([Name('argc', Store(), lineno=237, col_offset=12)], Num(1, lineno=237, col_offset=19), lineno=237, col_offset=12), While(BoolOp(And(), [Compare(Name('argc', Load(), lineno=238, col_offset=18), [Lt()], [Call(Name('len', Load(), lineno=238, col_offset=25), [Name('eopts', Load(), lineno=238, col_offset=29)], [], None, None, lineno=238, col_offset=25)], lineno=238, col_offset=18), UnaryOp(Not(), Call(Name('hasattr', Load(), lineno=238, col_offset=44), [Subscript(Name('eopts', Load(), lineno=238, col_offset=52), Index(Name('argc', Load(), lineno=238, col_offset=58)), Load(), lineno=238, col_offset=52), Str('iteritems', lineno=238, col_offset=65)], [], None, None, lineno=238, col_offset=44), lineno=238, col_offset=40)], lineno=238, col_offset=18), [AugAssign(Name('argc', Store(), lineno=239, col_offset=16), Add(), Num(1, lineno=239, col_offset=24), lineno=239, col_offset=16)], [], lineno=238, col_offset=12), Assign([Name('elemargs', Store(), lineno=241, col_offset=12)], Subscript(Name('eopts', Load(), lineno=241, col_offset=23), Slice(Num(1, lineno=241, col_offset=29), Name('argc', Load(), lineno=241, col_offset=31), None), Load(), lineno=241, col_offset=23), lineno=241, col_offset=12), Assign([Name('elemkw', Store(), lineno=242, col_offset=12)], IfExp(BoolOp(And(), [Compare(Name('argc', Load(), lineno=242, col_offset=36), [Lt()], [Call(Name('len', Load(), lineno=242, col_offset=43), [Name('eopts', Load(), lineno=242, col_offset=47)], [], None, None, lineno=242, col_offset=43)], lineno=242, col_offset=36), Subscript(Name('eopts', Load(), lineno=242, col_offset=58), Index(Name('argc', Load(), lineno=242, col_offset=64)), Load(), lineno=242, col_offset=58)], lineno=242, col_offset=36), Subscript(Name('eopts', Load(), lineno=242, col_offset=21), Index(Name('argc', Load(), lineno=242, col_offset=27)), Load(), lineno=242, col_offset=21), Dict([], [], lineno=242, col_offset=75), lineno=242, col_offset=21), lineno=242, col_offset=12), Assign([Tuple([Name('spec', Store(), lineno=243, col_offset=12), Name('opts', Store(), lineno=243, col_offset=18)], Store(), lineno=243, col_offset=12)], Call(Name('_format_elemcreate', Load(), lineno=243, col_offset=25), [Name('etype', Load(), lineno=243, col_offset=44), Name('True', Load(), lineno=243, col_offset=51)], [], Name('elemargs', Load(), lineno=243, col_offset=58), Name('elemkw', Load(), lineno=243, col_offset=70), lineno=243, col_offset=25), lineno=243, col_offset=12), Expr(Call(Attribute(Name('script', Load(), lineno=245, col_offset=12), 'append', Load(), lineno=245, col_offset=12), [BinOp(Str('ttk::style element create %s %s %s %s', lineno=245, col_offset=26), Mod(), Tuple([Name('name', Load(), lineno=246, col_offset=16), Name('etype', Load(), lineno=246, col_offset=22), Name('spec', Load(), lineno=246, col_offset=29), Name('opts', Load(), lineno=246, col_offset=35)], Load(), lineno=246, col_offset=16), lineno=245, col_offset=26)], [], None, None, lineno=245, col_offset=12), lineno=245, col_offset=12)], [], lineno=232, col_offset=8)], [], lineno=215, col_offset=4), Return(Call(Attribute(Str('\n', lineno=248, col_offset=11), 'join', Load(), lineno=248, col_offset=11), [Name('script', Load(), lineno=248, col_offset=21)], [], None, None, lineno=248, col_offset=11), lineno=248, col_offset=4)], [], lineno=208, col_offset=0), FunctionDef('_dict_from_tcltuple', arguments([Name('ttuple', Param(), lineno=250, col_offset=24), Name('cut_minus', Param(), lineno=250, col_offset=32)], None, None, [Name('True', Load(), lineno=250, col_offset=42)]), [Expr(Str("Break tuple in pairs, format it properly, then build the return\n    dict. If cut_minus is True, the supposed '-' prefixing options will\n    be removed.\n\n    ttuple is expected to contain an even number of elements.", lineno=255, col_offset=-1), lineno=255, col_offset=-1), Assign([Name('opt_start', Store(), lineno=256, col_offset=4)], IfExp(Name('cut_minus', Load(), lineno=256, col_offset=21), Num(1, lineno=256, col_offset=16), Num(0, lineno=256, col_offset=36), lineno=256, col_offset=16), lineno=256, col_offset=4), Assign([Name('retdict', Store(), lineno=258, col_offset=4)], Dict([], [], lineno=258, col_offset=14), lineno=258, col_offset=4), Assign([Name('it', Store(), lineno=259, col_offset=4)], Call(Name('iter', Load(), lineno=259, col_offset=9), [Name('ttuple', Load(), lineno=259, col_offset=14)], [], None, None, lineno=259, col_offset=9), lineno=259, col_offset=4), For(Tuple([Name('opt', Store(), lineno=260, col_offset=8), Name('val', Store(), lineno=260, col_offset=13)], Store(), lineno=260, col_offset=8), Call(Name('zip', Load(), lineno=260, col_offset=20), [Name('it', Load(), lineno=260, col_offset=24), Name('it', Load(), lineno=260, col_offset=28)], [], None, None, lineno=260, col_offset=20), [Assign([Subscript(Name('retdict', Load(), lineno=261, col_offset=8), Index(Subscript(Call(Name('str', Load(), lineno=261, col_offset=16), [Name('opt', Load(), lineno=261, col_offset=20)], [], None, None, lineno=261, col_offset=16), Slice(Name('opt_start', Load(), lineno=261, col_offset=25), None, None), Load(), lineno=261, col_offset=16)), Store(), lineno=261, col_offset=8)], Name('val', Load(), lineno=261, col_offset=40), lineno=261, col_offset=8)], [], lineno=260, col_offset=4), Return(Call(Name('tclobjs_to_py', Load(), lineno=263, col_offset=11), [Name('retdict', Load(), lineno=263, col_offset=25)], [], None, None, lineno=263, col_offset=11), lineno=263, col_offset=4)], [], lineno=250, col_offset=0), FunctionDef('_list_from_statespec', arguments([Name('stuple', Param(), lineno=265, col_offset=25)], None, None, []), [Expr(Str('Construct a list from the given statespec tuple according to the\n    accepted statespec accepted by _format_mapdict.', lineno=267, col_offset=-1), lineno=267, col_offset=-1), Assign([Name('nval', Store(), lineno=268, col_offset=4)], List([], Load(), lineno=268, col_offset=11), lineno=268, col_offset=4), For(Name('val', Store(), lineno=269, col_offset=8), Name('stuple', Load(), lineno=269, col_offset=15), [Assign([Name('typename', Store(), lineno=270, col_offset=8)], Call(Name('getattr', Load(), lineno=270, col_offset=19), [Name('val', Load(), lineno=270, col_offset=27), Str('typename', lineno=270, col_offset=32), Name('None', Load(), lineno=270, col_offset=44)], [], None, None, lineno=270, col_offset=19), lineno=270, col_offset=8), If(Compare(Name('typename', Load(), lineno=271, col_offset=11), [Is()], [Name('None', Load(), lineno=271, col_offset=23)], lineno=271, col_offset=11), [Expr(Call(Attribute(Name('nval', Load(), lineno=272, col_offset=12), 'append', Load(), lineno=272, col_offset=12), [Name('val', Load(), lineno=272, col_offset=24)], [], None, None, lineno=272, col_offset=12), lineno=272, col_offset=12)], [Assign([Name('val', Store(), lineno=274, col_offset=12)], Call(Name('str', Load(), lineno=274, col_offset=18), [Name('val', Load(), lineno=274, col_offset=22)], [], None, None, lineno=274, col_offset=18), lineno=274, col_offset=12), If(Compare(Name('typename', Load(), lineno=275, col_offset=15), [Eq()], [Str('StateSpec', lineno=275, col_offset=27)], lineno=275, col_offset=15), [Assign([Name('val', Store(), lineno=276, col_offset=16)], Call(Attribute(Name('val', Load(), lineno=276, col_offset=22), 'split', Load(), lineno=276, col_offset=22), [], [], None, None, lineno=276, col_offset=22), lineno=276, col_offset=16)], [], lineno=275, col_offset=12), Expr(Call(Attribute(Name('nval', Load(), lineno=277, col_offset=12), 'append', Load(), lineno=277, col_offset=12), [Name('val', Load(), lineno=277, col_offset=24)], [], None, None, lineno=277, col_offset=12), lineno=277, col_offset=12)], lineno=271, col_offset=8)], [], lineno=269, col_offset=4), Assign([Name('it', Store(), lineno=279, col_offset=4)], Call(Name('iter', Load(), lineno=279, col_offset=9), [Name('nval', Load(), lineno=279, col_offset=14)], [], None, None, lineno=279, col_offset=9), lineno=279, col_offset=4), Return(ListComp(Call(Name('_flatten', Load(), lineno=280, col_offset=12), [Name('spec', Load(), lineno=280, col_offset=21)], [], None, None, lineno=280, col_offset=12), [comprehension(Name('spec', Store(), lineno=280, col_offset=31), Call(Name('zip', Load(), lineno=280, col_offset=39), [Name('it', Load(), lineno=280, col_offset=43), Name('it', Load(), lineno=280, col_offset=47)], [], None, None, lineno=280, col_offset=39), [])], lineno=280, col_offset=12), lineno=280, col_offset=4)], [], lineno=265, col_offset=0), FunctionDef('_list_from_layouttuple', arguments([Name('ltuple', Param(), lineno=282, col_offset=27)], None, None, []), [Expr(Str('Construct a list from the tuple returned by ttk::layout, this is\n    somewhat the reverse of _format_layoutlist.', lineno=284, col_offset=-1), lineno=284, col_offset=-1), Assign([Name('res', Store(), lineno=285, col_offset=4)], List([], Load(), lineno=285, col_offset=10), lineno=285, col_offset=4), Assign([Name('indx', Store(), lineno=287, col_offset=4)], Num(0, lineno=287, col_offset=11), lineno=287, col_offset=4), While(Compare(Name('indx', Load(), lineno=288, col_offset=10), [Lt()], [Call(Name('len', Load(), lineno=288, col_offset=17), [Name('ltuple', Load(), lineno=288, col_offset=21)], [], None, None, lineno=288, col_offset=17)], lineno=288, col_offset=10), [Assign([Name('name', Store(), lineno=289, col_offset=8)], Subscript(Name('ltuple', Load(), lineno=289, col_offset=15), Index(Name('indx', Load(), lineno=289, col_offset=22)), Load(), lineno=289, col_offset=15), lineno=289, col_offset=8), Assign([Name('opts', Store(), lineno=290, col_offset=8)], Dict([], [], lineno=290, col_offset=15), lineno=290, col_offset=8), Expr(Call(Attribute(Name('res', Load(), lineno=291, col_offset=8), 'append', Load(), lineno=291, col_offset=8), [Tuple([Name('name', Load(), lineno=291, col_offset=20), Name('opts', Load(), lineno=291, col_offset=26)], Load(), lineno=291, col_offset=20)], [], None, None, lineno=291, col_offset=8), lineno=291, col_offset=8), AugAssign(Name('indx', Store(), lineno=292, col_offset=8), Add(), Num(1, lineno=292, col_offset=16), lineno=292, col_offset=8), While(Compare(Name('indx', Load(), lineno=294, col_offset=14), [Lt()], [Call(Name('len', Load(), lineno=294, col_offset=21), [Name('ltuple', Load(), lineno=294, col_offset=25)], [], None, None, lineno=294, col_offset=21)], lineno=294, col_offset=14), [Assign([Tuple([Name('opt', Store(), lineno=295, col_offset=12), Name('val', Store(), lineno=295, col_offset=17)], Store(), lineno=295, col_offset=12)], Subscript(Name('ltuple', Load(), lineno=295, col_offset=23), Slice(Name('indx', Load(), lineno=295, col_offset=30), BinOp(Name('indx', Load(), lineno=295, col_offset=35), Add(), Num(2, lineno=295, col_offset=42), lineno=295, col_offset=35), None), Load(), lineno=295, col_offset=23), lineno=295, col_offset=12), If(UnaryOp(Not(), Call(Attribute(Name('opt', Load(), lineno=296, col_offset=19), 'startswith', Load(), lineno=296, col_offset=19), [Str('-', lineno=296, col_offset=34)], [], None, None, lineno=296, col_offset=19), lineno=296, col_offset=15), [Break( lineno=297, col_offset=16)], [], lineno=296, col_offset=12), Assign([Name('opt', Store(), lineno=299, col_offset=12)], Subscript(Name('opt', Load(), lineno=299, col_offset=18), Slice(Num(1, lineno=299, col_offset=22), None, None), Load(), lineno=299, col_offset=18), lineno=299, col_offset=12), AugAssign(Name('indx', Store(), lineno=300, col_offset=12), Add(), Num(2, lineno=300, col_offset=20), lineno=300, col_offset=12), If(Compare(Name('opt', Load(), lineno=302, col_offset=15), [Eq()], [Str('children', lineno=302, col_offset=22)], lineno=302, col_offset=15), [Assign([Name('val', Store(), lineno=303, col_offset=16)], Call(Name('_list_from_layouttuple', Load(), lineno=303, col_offset=22), [Name('val', Load(), lineno=303, col_offset=45)], [], None, None, lineno=303, col_offset=22), lineno=303, col_offset=16)], [], lineno=302, col_offset=12), Assign([Subscript(Name('opts', Load(), lineno=305, col_offset=12), Index(Name('opt', Load(), lineno=305, col_offset=17)), Store(), lineno=305, col_offset=12)], Name('val', Load(), lineno=305, col_offset=24), lineno=305, col_offset=12)], [], lineno=294, col_offset=8)], [], lineno=288, col_offset=4), Return(Name('res', Load(), lineno=307, col_offset=11), lineno=307, col_offset=4)], [], lineno=282, col_offset=0), FunctionDef('_val_or_dict', arguments([Name('options', Param(), lineno=309, col_offset=17), Name('func', Param(), lineno=309, col_offset=26)], 'args', None, []), [Expr(Str("Format options then call func with args and options and return\n    the appropriate result.\n\n    If no option is specified, a dict is returned. If a option is\n    specified with the None value, the value for that option is returned.\n    Otherwise, the function just sets the passed options and the caller\n    shouldn't be expecting a return value anyway.", lineno=316, col_offset=-1), lineno=316, col_offset=-1), Assign([Name('options', Store(), lineno=317, col_offset=4)], Call(Name('_format_optdict', Load(), lineno=317, col_offset=14), [Name('options', Load(), lineno=317, col_offset=30)], [], None, None, lineno=317, col_offset=14), lineno=317, col_offset=4), Assign([Name('res', Store(), lineno=318, col_offset=4)], Call(Name('func', Load(), lineno=318, col_offset=10), [], [], BinOp(Name('args', Load(), lineno=318, col_offset=17), Add(), Name('options', Load(), lineno=318, col_offset=24), lineno=318, col_offset=17), None, lineno=318, col_offset=10), lineno=318, col_offset=4), If(BinOp(Call(Name('len', Load(), lineno=320, col_offset=7), [Name('options', Load(), lineno=320, col_offset=11)], [], None, None, lineno=320, col_offset=7), Mod(), Num(2, lineno=320, col_offset=22), lineno=320, col_offset=7), [Return(Name('res', Load(), lineno=321, col_offset=15), lineno=321, col_offset=8)], [], lineno=320, col_offset=4), Return(Call(Name('_dict_from_tcltuple', Load(), lineno=323, col_offset=11), [Name('res', Load(), lineno=323, col_offset=31)], [], None, None, lineno=323, col_offset=11), lineno=323, col_offset=4)], [], lineno=309, col_offset=0), FunctionDef('_convert_stringval', arguments([Name('value', Param(), lineno=325, col_offset=23)], None, None, []), [Expr(Str('Converts a value to, hopefully, a more appropriate Python object.', lineno=326, col_offset=4), lineno=326, col_offset=4), Assign([Name('value', Store(), lineno=327, col_offset=4)], Call(Name('unicode', Load(), lineno=327, col_offset=12), [Name('value', Load(), lineno=327, col_offset=20)], [], None, None, lineno=327, col_offset=12), lineno=327, col_offset=4), TryExcept([Assign([Name('value', Store(), lineno=329, col_offset=8)], Call(Name('int', Load(), lineno=329, col_offset=16), [Name('value', Load(), lineno=329, col_offset=20)], [], None, None, lineno=329, col_offset=16), lineno=329, col_offset=8)], [ExceptHandler(Tuple([Name('ValueError', Load(), lineno=330, col_offset=12), Name('TypeError', Load(), lineno=330, col_offset=24)], Load(), lineno=330, col_offset=12), None, [Pass( lineno=331, col_offset=8)], lineno=330, col_offset=4)], [], lineno=328, col_offset=4), Return(Name('value', Load(), lineno=333, col_offset=11), lineno=333, col_offset=4)], [], lineno=325, col_offset=0), FunctionDef('tclobjs_to_py', arguments([Name('adict', Param(), lineno=335, col_offset=18)], None, None, []), [Expr(Str('Returns adict with its values converted from Tcl objects to Python\n    objects.', lineno=337, col_offset=-1), lineno=337, col_offset=-1), For(Tuple([Name('opt', Store(), lineno=338, col_offset=8), Name('val', Store(), lineno=338, col_offset=13)], Store(), lineno=338, col_offset=8), Call(Attribute(Name('adict', Load(), lineno=338, col_offset=20), 'iteritems', Load(), lineno=338, col_offset=20), [], [], None, None, lineno=338, col_offset=20), [If(BoolOp(And(), [Name('val', Load(), lineno=339, col_offset=11), Call(Name('hasattr', Load(), lineno=339, col_offset=19), [Name('val', Load(), lineno=339, col_offset=27), Str('__len__', lineno=339, col_offset=32)], [], None, None, lineno=339, col_offset=19), UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=339, col_offset=51), [Name('val', Load(), lineno=339, col_offset=62), Name('basestring', Load(), lineno=339, col_offset=67)], [], None, None, lineno=339, col_offset=51), lineno=339, col_offset=47)], lineno=339, col_offset=11), [If(Compare(Call(Name('getattr', Load(), lineno=340, col_offset=15), [Subscript(Name('val', Load(), lineno=340, col_offset=23), Index(Num(0, lineno=340, col_offset=27)), Load(), lineno=340, col_offset=23), Str('typename', lineno=340, col_offset=31), Name('None', Load(), lineno=340, col_offset=43)], [], None, None, lineno=340, col_offset=15), [Eq()], [Str('StateSpec', lineno=340, col_offset=52)], lineno=340, col_offset=15), [Assign([Name('val', Store(), lineno=341, col_offset=16)], Call(Name('_list_from_statespec', Load(), lineno=341, col_offset=22), [Name('val', Load(), lineno=341, col_offset=43)], [], None, None, lineno=341, col_offset=22), lineno=341, col_offset=16)], [Assign([Name('val', Store(), lineno=343, col_offset=16)], Call(Name('map', Load(), lineno=343, col_offset=22), [Name('_convert_stringval', Load(), lineno=343, col_offset=26), Name('val', Load(), lineno=343, col_offset=46)], [], None, None, lineno=343, col_offset=22), lineno=343, col_offset=16)], lineno=340, col_offset=12)], [If(Call(Name('hasattr', Load(), lineno=345, col_offset=13), [Name('val', Load(), lineno=345, col_offset=21), Str('typename', lineno=345, col_offset=26)], [], None, None, lineno=345, col_offset=13), [Assign([Name('val', Store(), lineno=346, col_offset=12)], Call(Name('_convert_stringval', Load(), lineno=346, col_offset=18), [Name('val', Load(), lineno=346, col_offset=37)], [], None, None, lineno=346, col_offset=18), lineno=346, col_offset=12)], [], lineno=345, col_offset=13)], lineno=339, col_offset=8), Assign([Subscript(Name('adict', Load(), lineno=348, col_offset=8), Index(Name('opt', Load(), lineno=348, col_offset=14)), Store(), lineno=348, col_offset=8)], Name('val', Load(), lineno=348, col_offset=21), lineno=348, col_offset=8)], [], lineno=338, col_offset=4), Return(Name('adict', Load(), lineno=350, col_offset=11), lineno=350, col_offset=4)], [], lineno=335, col_offset=0), FunctionDef('setup_master', arguments([Name('master', Param(), lineno=352, col_offset=17)], None, None, [Name('None', Load(), lineno=352, col_offset=24)]), [Expr(Str('If master is not None, itself is returned. If master is None,\n    the default master is returned if there is one, otherwise a new\n    master is created and returned.\n\n    If it is not allowed to use the default root and master is None,\n    RuntimeError is raised.', lineno=358, col_offset=-1), lineno=358, col_offset=-1), If(Compare(Name('master', Load(), lineno=359, col_offset=7), [Is()], [Name('None', Load(), lineno=359, col_offset=17)], lineno=359, col_offset=7), [If(Attribute(Name('Tkinter', Load(), lineno=360, col_offset=11), '_support_default_root', Load(), lineno=360, col_offset=11), [Assign([Name('master', Store(), lineno=361, col_offset=12)], BoolOp(Or(), [Attribute(Name('Tkinter', Load(), lineno=361, col_offset=21), '_default_root', Load(), lineno=361, col_offset=21), Call(Attribute(Name('Tkinter', Load(), lineno=361, col_offset=46), 'Tk', Load(), lineno=361, col_offset=46), [], [], None, None, lineno=361, col_offset=46)], lineno=361, col_offset=21), lineno=361, col_offset=12)], [Raise(Call(Name('RuntimeError', Load(), lineno=363, col_offset=18), [Str('No master specified and Tkinter is configured to not support default root', lineno=364, col_offset=20)], [], None, None, lineno=363, col_offset=18), None, None, lineno=363, col_offset=12)], lineno=360, col_offset=8)], [], lineno=359, col_offset=4), Return(Name('master', Load(), lineno=366, col_offset=11), lineno=366, col_offset=4)], [], lineno=352, col_offset=0), ClassDef('Style', [Name('object', Load(), lineno=369, col_offset=12)], [Expr(Str('Manipulate style database.', lineno=370, col_offset=4), lineno=370, col_offset=4), Assign([Name('_name', Store(), lineno=372, col_offset=4)], Str('ttk::style', lineno=372, col_offset=12), lineno=372, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=374, col_offset=17), Name('master', Param(), lineno=374, col_offset=23)], None, None, [Name('None', Load(), lineno=374, col_offset=30)]), [Assign([Name('master', Store(), lineno=375, col_offset=8)], Call(Name('setup_master', Load(), lineno=375, col_offset=17), [Name('master', Load(), lineno=375, col_offset=30)], [], None, None, lineno=375, col_offset=17), lineno=375, col_offset=8), If(UnaryOp(Not(), Call(Name('getattr', Load(), lineno=377, col_offset=15), [Name('master', Load(), lineno=377, col_offset=23), Str('_tile_loaded', lineno=377, col_offset=31), Name('False', Load(), lineno=377, col_offset=47)], [], None, None, lineno=377, col_offset=15), lineno=377, col_offset=11), [Expr(Call(Name('_load_tile', Load(), lineno=379, col_offset=12), [Name('master', Load(), lineno=379, col_offset=23)], [], None, None, lineno=379, col_offset=12), lineno=379, col_offset=12)], [], lineno=377, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=381, col_offset=8), 'master', Store(), lineno=381, col_offset=8)], Name('master', Load(), lineno=381, col_offset=22), lineno=381, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=382, col_offset=8), 'tk', Store(), lineno=382, col_offset=8)], Attribute(Attribute(Name('self', Load(), lineno=382, col_offset=18), 'master', Load(), lineno=382, col_offset=18), 'tk', Load(), lineno=382, col_offset=18), lineno=382, col_offset=8)], [], lineno=374, col_offset=4), FunctionDef('configure', arguments([Name('self', Param(), lineno=385, col_offset=18), Name('style', Param(), lineno=385, col_offset=24), Name('query_opt', Param(), lineno=385, col_offset=31)], None, 'kw', [Name('None', Load(), lineno=385, col_offset=41)]), [Expr(Str('Query or sets the default value of the specified option(s) in\n        style.\n\n        Each key in kw is an option and each value is either a string or\n        a sequence identifying the value for that option.', lineno=390, col_offset=-1), lineno=390, col_offset=-1), If(Compare(Name('query_opt', Load(), lineno=391, col_offset=11), [IsNot()], [Name('None', Load(), lineno=391, col_offset=28)], lineno=391, col_offset=11), [Assign([Subscript(Name('kw', Load(), lineno=392, col_offset=12), Index(Name('query_opt', Load(), lineno=392, col_offset=15)), Store(), lineno=392, col_offset=12)], Name('None', Load(), lineno=392, col_offset=28), lineno=392, col_offset=12)], [], lineno=391, col_offset=8), Return(Call(Name('_val_or_dict', Load(), lineno=393, col_offset=15), [Name('kw', Load(), lineno=393, col_offset=28), Attribute(Attribute(Name('self', Load(), lineno=393, col_offset=32), 'tk', Load(), lineno=393, col_offset=32), 'call', Load(), lineno=393, col_offset=32), Attribute(Name('self', Load(), lineno=393, col_offset=46), '_name', Load(), lineno=393, col_offset=46), Str('configure', lineno=393, col_offset=58), Name('style', Load(), lineno=393, col_offset=71)], [], None, None, lineno=393, col_offset=15), lineno=393, col_offset=8)], [], lineno=385, col_offset=4), FunctionDef('map', arguments([Name('self', Param(), lineno=396, col_offset=12), Name('style', Param(), lineno=396, col_offset=18), Name('query_opt', Param(), lineno=396, col_offset=25)], None, 'kw', [Name('None', Load(), lineno=396, col_offset=35)]), [Expr(Str('Query or sets dynamic values of the specified option(s) in\n        style.\n\n        Each key in kw is an option and each value should be a list or a\n        tuple (usually) containing statespecs grouped in tuples, or list,\n        or something else of your preference. A statespec is compound of\n        one or more states and then a value.', lineno=403, col_offset=-1), lineno=403, col_offset=-1), If(Compare(Name('query_opt', Load(), lineno=404, col_offset=11), [IsNot()], [Name('None', Load(), lineno=404, col_offset=28)], lineno=404, col_offset=11), [Return(Call(Name('_list_from_statespec', Load(), lineno=405, col_offset=19), [Call(Attribute(Attribute(Name('self', Load(), lineno=406, col_offset=16), 'tk', Load(), lineno=406, col_offset=16), 'call', Load(), lineno=406, col_offset=16), [Attribute(Name('self', Load(), lineno=406, col_offset=29), '_name', Load(), lineno=406, col_offset=29), Str('map', lineno=406, col_offset=41), Name('style', Load(), lineno=406, col_offset=48), BinOp(Str('-%s', lineno=406, col_offset=55), Mod(), Name('query_opt', Load(), lineno=406, col_offset=63), lineno=406, col_offset=55)], [], None, None, lineno=406, col_offset=16)], [], None, None, lineno=405, col_offset=19), lineno=405, col_offset=12)], [], lineno=404, col_offset=8), Return(Call(Name('_dict_from_tcltuple', Load(), lineno=408, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=409, col_offset=12), 'tk', Load(), lineno=409, col_offset=12), 'call', Load(), lineno=409, col_offset=12), [Attribute(Name('self', Load(), lineno=409, col_offset=25), '_name', Load(), lineno=409, col_offset=25), Str('map', lineno=409, col_offset=37), Name('style', Load(), lineno=409, col_offset=44)], [], Call(Name('_format_mapdict', Load(), lineno=409, col_offset=53), [Name('kw', Load(), lineno=409, col_offset=69)], [], None, None, lineno=409, col_offset=53), None, lineno=409, col_offset=12)], [], None, None, lineno=408, col_offset=15), lineno=408, col_offset=8)], [], lineno=396, col_offset=4), FunctionDef('lookup', arguments([Name('self', Param(), lineno=412, col_offset=15), Name('style', Param(), lineno=412, col_offset=21), Name('option', Param(), lineno=412, col_offset=28), Name('state', Param(), lineno=412, col_offset=36), Name('default', Param(), lineno=412, col_offset=48)], None, None, [Name('None', Load(), lineno=412, col_offset=42), Name('None', Load(), lineno=412, col_offset=56)]), [Expr(Str('Returns the value specified for option in style.\n\n        If state is specified it is expected to be a sequence of one\n        or more states. If the default argument is set, it is used as\n        a fallback value in case no specification for option is found.', lineno=417, col_offset=-1), lineno=417, col_offset=-1), Assign([Name('state', Store(), lineno=418, col_offset=8)], IfExp(Name('state', Load(), lineno=418, col_offset=35), Call(Attribute(Str(' ', lineno=418, col_offset=16), 'join', Load(), lineno=418, col_offset=16), [Name('state', Load(), lineno=418, col_offset=25)], [], None, None, lineno=418, col_offset=16), Str('', lineno=418, col_offset=46), lineno=418, col_offset=16), lineno=418, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=420, col_offset=15), 'tk', Load(), lineno=420, col_offset=15), 'call', Load(), lineno=420, col_offset=15), [Attribute(Name('self', Load(), lineno=420, col_offset=28), '_name', Load(), lineno=420, col_offset=28), Str('lookup', lineno=420, col_offset=40), Name('style', Load(), lineno=420, col_offset=50), BinOp(Str('-%s', lineno=420, col_offset=57), Mod(), Name('option', Load(), lineno=420, col_offset=65), lineno=420, col_offset=57), Name('state', Load(), lineno=421, col_offset=12), Name('default', Load(), lineno=421, col_offset=19)], [], None, None, lineno=420, col_offset=15), lineno=420, col_offset=8)], [], lineno=412, col_offset=4), FunctionDef('layout', arguments([Name('self', Param(), lineno=424, col_offset=15), Name('style', Param(), lineno=424, col_offset=21), Name('layoutspec', Param(), lineno=424, col_offset=28)], None, None, [Name('None', Load(), lineno=424, col_offset=39)]), [Expr(Str('Define the widget layout for given style. If layoutspec is\n        omitted, return the layout specification for given style.\n\n        layoutspec is expected to be a list or an object different than\n        None that evaluates to False if you want to "turn off" that style.\n        If it is a list (or tuple, or something else), each item should be\n        a tuple where the first item is the layout name and the second item\n        should have the format described below:\n\n        LAYOUTS\n\n            A layout can contain the value None, if takes no options, or\n            a dict of options specifying how to arrange the element.\n            The layout mechanism uses a simplified version of the pack\n            geometry manager: given an initial cavity, each element is\n            allocated a parcel. Valid options/values are:\n\n                side: whichside\n                    Specifies which side of the cavity to place the\n                    element; one of top, right, bottom or left. If\n                    omitted, the element occupies the entire cavity.\n\n                sticky: nswe\n                    Specifies where the element is placed inside its\n                    allocated parcel.\n\n                children: [sublayout... ]\n                    Specifies a list of elements to place inside the\n                    element. Each element is a tuple (or other sequence)\n                    where the first item is the layout name, and the other\n                    is a LAYOUT.', lineno=455, col_offset=-1), lineno=455, col_offset=-1), Assign([Name('lspec', Store(), lineno=456, col_offset=8)], Name('None', Load(), lineno=456, col_offset=16), lineno=456, col_offset=8), If(Name('layoutspec', Load(), lineno=457, col_offset=11), [Assign([Name('lspec', Store(), lineno=458, col_offset=12)], Subscript(Call(Name('_format_layoutlist', Load(), lineno=458, col_offset=20), [Name('layoutspec', Load(), lineno=458, col_offset=39)], [], None, None, lineno=458, col_offset=20), Index(Num(0, lineno=458, col_offset=51)), Load(), lineno=458, col_offset=20), lineno=458, col_offset=12)], [If(Compare(Name('layoutspec', Load(), lineno=459, col_offset=13), [IsNot()], [Name('None', Load(), lineno=459, col_offset=31)], lineno=459, col_offset=13), [Assign([Name('lspec', Store(), lineno=460, col_offset=12)], Str('null', lineno=460, col_offset=20), lineno=460, col_offset=12)], [], lineno=459, col_offset=13)], lineno=457, col_offset=8), Return(Call(Name('_list_from_layouttuple', Load(), lineno=463, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=464, col_offset=12), 'tk', Load(), lineno=464, col_offset=12), 'call', Load(), lineno=464, col_offset=12), [Attribute(Name('self', Load(), lineno=464, col_offset=25), '_name', Load(), lineno=464, col_offset=25), Str('layout', lineno=464, col_offset=37), Name('style', Load(), lineno=464, col_offset=47), Name('lspec', Load(), lineno=464, col_offset=54)], [], None, None, lineno=464, col_offset=12)], [], None, None, lineno=463, col_offset=15), lineno=463, col_offset=8)], [], lineno=424, col_offset=4), FunctionDef('element_create', arguments([Name('self', Param(), lineno=467, col_offset=23), Name('elementname', Param(), lineno=467, col_offset=29), Name('etype', Param(), lineno=467, col_offset=42)], 'args', 'kw', []), [Expr(Str('Create a new element in the current theme of given etype.', lineno=468, col_offset=8), lineno=468, col_offset=8), Assign([Tuple([Name('spec', Store(), lineno=469, col_offset=8), Name('opts', Store(), lineno=469, col_offset=14)], Store(), lineno=469, col_offset=8)], Call(Name('_format_elemcreate', Load(), lineno=469, col_offset=21), [Name('etype', Load(), lineno=469, col_offset=40), Name('False', Load(), lineno=469, col_offset=47)], [], Name('args', Load(), lineno=469, col_offset=55), Name('kw', Load(), lineno=469, col_offset=63), lineno=469, col_offset=21), lineno=469, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=470, col_offset=8), 'tk', Load(), lineno=470, col_offset=8), 'call', Load(), lineno=470, col_offset=8), [Attribute(Name('self', Load(), lineno=470, col_offset=21), '_name', Load(), lineno=470, col_offset=21), Str('element', lineno=470, col_offset=33), Str('create', lineno=470, col_offset=44), Name('elementname', Load(), lineno=470, col_offset=54), Name('etype', Load(), lineno=470, col_offset=67), Name('spec', Load(), lineno=471, col_offset=12)], [], Name('opts', Load(), lineno=471, col_offset=19), None, lineno=470, col_offset=8), lineno=470, col_offset=8)], [], lineno=467, col_offset=4), FunctionDef('element_names', arguments([Name('self', Param(), lineno=474, col_offset=22)], None, None, []), [Expr(Str('Returns the list of elements defined in the current theme.', lineno=475, col_offset=8), lineno=475, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=476, col_offset=15), 'tk', Load(), lineno=476, col_offset=15), 'call', Load(), lineno=476, col_offset=15), [Attribute(Name('self', Load(), lineno=476, col_offset=28), '_name', Load(), lineno=476, col_offset=28), Str('element', lineno=476, col_offset=40), Str('names', lineno=476, col_offset=51)], [], None, None, lineno=476, col_offset=15), lineno=476, col_offset=8)], [], lineno=474, col_offset=4), FunctionDef('element_options', arguments([Name('self', Param(), lineno=479, col_offset=24), Name('elementname', Param(), lineno=479, col_offset=30)], None, None, []), [Expr(Str("Return the list of elementname's options.", lineno=480, col_offset=8), lineno=480, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=481, col_offset=15), 'tk', Load(), lineno=481, col_offset=15), 'call', Load(), lineno=481, col_offset=15), [Attribute(Name('self', Load(), lineno=481, col_offset=28), '_name', Load(), lineno=481, col_offset=28), Str('element', lineno=481, col_offset=40), Str('options', lineno=481, col_offset=51), Name('elementname', Load(), lineno=481, col_offset=62)], [], None, None, lineno=481, col_offset=15), lineno=481, col_offset=8)], [], lineno=479, col_offset=4), FunctionDef('theme_create', arguments([Name('self', Param(), lineno=484, col_offset=21), Name('themename', Param(), lineno=484, col_offset=27), Name('parent', Param(), lineno=484, col_offset=38), Name('settings', Param(), lineno=484, col_offset=51)], None, None, [Name('None', Load(), lineno=484, col_offset=45), Name('None', Load(), lineno=484, col_offset=60)]), [Expr(Str('Creates a new theme.\n\n        It is an error if themename already exists. If parent is\n        specified, the new theme will inherit styles, elements and\n        layouts from the specified parent theme. If settings are present,\n        they are expected to have the same syntax used for theme_settings.', lineno=490, col_offset=-1), lineno=490, col_offset=-1), Assign([Name('script', Store(), lineno=491, col_offset=8)], IfExp(Name('settings', Load(), lineno=491, col_offset=52), Call(Name('_script_from_settings', Load(), lineno=491, col_offset=17), [Name('settings', Load(), lineno=491, col_offset=39)], [], None, None, lineno=491, col_offset=17), Str('', lineno=491, col_offset=66), lineno=491, col_offset=17), lineno=491, col_offset=8), If(Name('parent', Load(), lineno=493, col_offset=11), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=494, col_offset=12), 'tk', Load(), lineno=494, col_offset=12), 'call', Load(), lineno=494, col_offset=12), [Attribute(Name('self', Load(), lineno=494, col_offset=25), '_name', Load(), lineno=494, col_offset=25), Str('theme', lineno=494, col_offset=37), Str('create', lineno=494, col_offset=46), Name('themename', Load(), lineno=494, col_offset=56), Str('-parent', lineno=495, col_offset=16), Name('parent', Load(), lineno=495, col_offset=27), Str('-settings', lineno=495, col_offset=35), Name('script', Load(), lineno=495, col_offset=48)], [], None, None, lineno=494, col_offset=12), lineno=494, col_offset=12)], [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=497, col_offset=12), 'tk', Load(), lineno=497, col_offset=12), 'call', Load(), lineno=497, col_offset=12), [Attribute(Name('self', Load(), lineno=497, col_offset=25), '_name', Load(), lineno=497, col_offset=25), Str('theme', lineno=497, col_offset=37), Str('create', lineno=497, col_offset=46), Name('themename', Load(), lineno=497, col_offset=56), Str('-settings', lineno=498, col_offset=16), Name('script', Load(), lineno=498, col_offset=29)], [], None, None, lineno=497, col_offset=12), lineno=497, col_offset=12)], lineno=493, col_offset=8)], [], lineno=484, col_offset=4), FunctionDef('theme_settings', arguments([Name('self', Param(), lineno=501, col_offset=23), Name('themename', Param(), lineno=501, col_offset=29), Name('settings', Param(), lineno=501, col_offset=40)], None, None, []), [Expr(Str("Temporarily sets the current theme to themename, apply specified\n        settings and then restore the previous theme.\n\n        Each key in settings is a style and each value may contain the\n        keys 'configure', 'map', 'layout' and 'element create' and they\n        are expected to have the same format as specified by the methods\n        configure, map, layout and element_create respectively.", lineno=508, col_offset=-1), lineno=508, col_offset=-1), Assign([Name('script', Store(), lineno=509, col_offset=8)], Call(Name('_script_from_settings', Load(), lineno=509, col_offset=17), [Name('settings', Load(), lineno=509, col_offset=39)], [], None, None, lineno=509, col_offset=17), lineno=509, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=510, col_offset=8), 'tk', Load(), lineno=510, col_offset=8), 'call', Load(), lineno=510, col_offset=8), [Attribute(Name('self', Load(), lineno=510, col_offset=21), '_name', Load(), lineno=510, col_offset=21), Str('theme', lineno=510, col_offset=33), Str('settings', lineno=510, col_offset=42), Name('themename', Load(), lineno=510, col_offset=54), Name('script', Load(), lineno=510, col_offset=65)], [], None, None, lineno=510, col_offset=8), lineno=510, col_offset=8)], [], lineno=501, col_offset=4), FunctionDef('theme_names', arguments([Name('self', Param(), lineno=513, col_offset=20)], None, None, []), [Expr(Str('Returns a list of all known themes.', lineno=514, col_offset=8), lineno=514, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=515, col_offset=15), 'tk', Load(), lineno=515, col_offset=15), 'call', Load(), lineno=515, col_offset=15), [Attribute(Name('self', Load(), lineno=515, col_offset=28), '_name', Load(), lineno=515, col_offset=28), Str('theme', lineno=515, col_offset=40), Str('names', lineno=515, col_offset=49)], [], None, None, lineno=515, col_offset=15), lineno=515, col_offset=8)], [], lineno=513, col_offset=4), FunctionDef('theme_use', arguments([Name('self', Param(), lineno=518, col_offset=18), Name('themename', Param(), lineno=518, col_offset=24)], None, None, [Name('None', Load(), lineno=518, col_offset=34)]), [Expr(Str('If themename is None, returns the theme in use, otherwise, set\n        the current theme to themename, refreshes all widgets and emits\n        a <<ThemeChanged>> event.', lineno=521, col_offset=-1), lineno=521, col_offset=-1), If(Compare(Name('themename', Load(), lineno=522, col_offset=11), [Is()], [Name('None', Load(), lineno=522, col_offset=24)], lineno=522, col_offset=11), [Return(Call(Attribute(Attribute(Name('self', Load(), lineno=525, col_offset=19), 'tk', Load(), lineno=525, col_offset=19), 'eval', Load(), lineno=525, col_offset=19), [Str('return $ttk::currentTheme', lineno=525, col_offset=32)], [], None, None, lineno=525, col_offset=19), lineno=525, col_offset=12)], [], lineno=522, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=530, col_offset=8), 'tk', Load(), lineno=530, col_offset=8), 'call', Load(), lineno=530, col_offset=8), [Str('ttk::setTheme', lineno=530, col_offset=21), Name('themename', Load(), lineno=530, col_offset=38)], [], None, None, lineno=530, col_offset=8), lineno=530, col_offset=8)], [], lineno=518, col_offset=4)], [], lineno=369, col_offset=0), ClassDef('Widget', [Attribute(Name('Tkinter', Load(), lineno=533, col_offset=13), 'Widget', Load(), lineno=533, col_offset=13)], [Expr(Str('Base class for Tk themed widgets.', lineno=534, col_offset=4), lineno=534, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=536, col_offset=17), Name('master', Param(), lineno=536, col_offset=23), Name('widgetname', Param(), lineno=536, col_offset=31), Name('kw', Param(), lineno=536, col_offset=43)], None, None, [Name('None', Load(), lineno=536, col_offset=46)]), [Expr(Str('Constructs a Ttk Widget with the parent master.\n\n        STANDARD OPTIONS\n\n            class, cursor, takefocus, style\n\n        SCROLLABLE WIDGET OPTIONS\n\n            xscrollcommand, yscrollcommand\n\n        LABEL WIDGET OPTIONS\n\n            text, textvariable, underline, image, compound, width\n\n        WIDGET STATES\n\n            active, disabled, focus, pressed, selected, background,\n            readonly, alternate, invalid\n        ', lineno=555, col_offset=-1), lineno=555, col_offset=-1), Assign([Name('master', Store(), lineno=556, col_offset=8)], Call(Name('setup_master', Load(), lineno=556, col_offset=17), [Name('master', Load(), lineno=556, col_offset=30)], [], None, None, lineno=556, col_offset=17), lineno=556, col_offset=8), If(UnaryOp(Not(), Call(Name('getattr', Load(), lineno=557, col_offset=15), [Name('master', Load(), lineno=557, col_offset=23), Str('_tile_loaded', lineno=557, col_offset=31), Name('False', Load(), lineno=557, col_offset=47)], [], None, None, lineno=557, col_offset=15), lineno=557, col_offset=11), [Expr(Call(Name('_load_tile', Load(), lineno=559, col_offset=12), [Name('master', Load(), lineno=559, col_offset=23)], [], None, None, lineno=559, col_offset=12), lineno=559, col_offset=12)], [], lineno=557, col_offset=8), Expr(Call(Attribute(Attribute(Name('Tkinter', Load(), lineno=560, col_offset=8), 'Widget', Load(), lineno=560, col_offset=8), '__init__', Load(), lineno=560, col_offset=8), [Name('self', Load(), lineno=560, col_offset=32), Name('master', Load(), lineno=560, col_offset=38), Name('widgetname', Load(), lineno=560, col_offset=46)], [keyword('kw', Name('kw', Load(), lineno=560, col_offset=61))], None, None, lineno=560, col_offset=8), lineno=560, col_offset=8)], [], lineno=536, col_offset=4), FunctionDef('identify', arguments([Name('self', Param(), lineno=563, col_offset=17), Name('x', Param(), lineno=563, col_offset=23), Name('y', Param(), lineno=563, col_offset=26)], None, None, []), [Expr(Str('Returns the name of the element at position x, y, or the empty\n        string if the point does not lie within any element.\n\n        x and y are pixel coordinates relative to the widget.', lineno=567, col_offset=-1), lineno=567, col_offset=-1), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=568, col_offset=15), 'tk', Load(), lineno=568, col_offset=15), 'call', Load(), lineno=568, col_offset=15), [Attribute(Name('self', Load(), lineno=568, col_offset=28), '_w', Load(), lineno=568, col_offset=28), Str('identify', lineno=568, col_offset=37), Name('x', Load(), lineno=568, col_offset=49), Name('y', Load(), lineno=568, col_offset=52)], [], None, None, lineno=568, col_offset=15), lineno=568, col_offset=8)], [], lineno=563, col_offset=4), FunctionDef('instate', arguments([Name('self', Param(), lineno=571, col_offset=16), Name('statespec', Param(), lineno=571, col_offset=22), Name('callback', Param(), lineno=571, col_offset=33)], 'args', 'kw', [Name('None', Load(), lineno=571, col_offset=42)]), [Expr(Str("Test the widget's state.\n\n        If callback is not specified, returns True if the widget state\n        matches statespec and False otherwise. If callback is specified,\n        then it will be invoked with *args, **kw if the widget state\n        matches statespec. statespec is expected to be a sequence.", lineno=577, col_offset=-1), lineno=577, col_offset=-1), Assign([Name('ret', Store(), lineno=578, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=578, col_offset=14), 'tk', Load(), lineno=578, col_offset=14), 'call', Load(), lineno=578, col_offset=14), [Attribute(Name('self', Load(), lineno=578, col_offset=27), '_w', Load(), lineno=578, col_offset=27), Str('instate', lineno=578, col_offset=36), Call(Attribute(Str(' ', lineno=578, col_offset=47), 'join', Load(), lineno=578, col_offset=47), [Name('statespec', Load(), lineno=578, col_offset=56)], [], None, None, lineno=578, col_offset=47)], [], None, None, lineno=578, col_offset=14), lineno=578, col_offset=8), If(BoolOp(And(), [Name('ret', Load(), lineno=579, col_offset=11), Name('callback', Load(), lineno=579, col_offset=19)], lineno=579, col_offset=11), [Return(Call(Name('callback', Load(), lineno=580, col_offset=19), [], [], Name('args', Load(), lineno=580, col_offset=29), Name('kw', Load(), lineno=580, col_offset=37), lineno=580, col_offset=19), lineno=580, col_offset=12)], [], lineno=579, col_offset=8), Return(Call(Name('bool', Load(), lineno=582, col_offset=15), [Name('ret', Load(), lineno=582, col_offset=20)], [], None, None, lineno=582, col_offset=15), lineno=582, col_offset=8)], [], lineno=571, col_offset=4), FunctionDef('state', arguments([Name('self', Param(), lineno=585, col_offset=14), Name('statespec', Param(), lineno=585, col_offset=20)], None, None, [Name('None', Load(), lineno=585, col_offset=30)]), [Expr(Str('Modify or inquire widget state.\n\n        Widget state is returned if statespec is None, otherwise it is\n        set according to the statespec flags and then a new state spec\n        is returned indicating which flags were changed. statespec is\n        expected to be a sequence.', lineno=591, col_offset=-1), lineno=591, col_offset=-1), If(Compare(Name('statespec', Load(), lineno=592, col_offset=11), [IsNot()], [Name('None', Load(), lineno=592, col_offset=28)], lineno=592, col_offset=11), [Assign([Name('statespec', Store(), lineno=593, col_offset=12)], Call(Attribute(Str(' ', lineno=593, col_offset=24), 'join', Load(), lineno=593, col_offset=24), [Name('statespec', Load(), lineno=593, col_offset=33)], [], None, None, lineno=593, col_offset=24), lineno=593, col_offset=12)], [], lineno=592, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=595, col_offset=15), 'tk', Load(), lineno=595, col_offset=15), 'splitlist', Load(), lineno=595, col_offset=15), [Call(Name('str', Load(), lineno=595, col_offset=33), [Call(Attribute(Attribute(Name('self', Load(), lineno=595, col_offset=37), 'tk', Load(), lineno=595, col_offset=37), 'call', Load(), lineno=595, col_offset=37), [Attribute(Name('self', Load(), lineno=595, col_offset=50), '_w', Load(), lineno=595, col_offset=50), Str('state', lineno=595, col_offset=59), Name('statespec', Load(), lineno=595, col_offset=68)], [], None, None, lineno=595, col_offset=37)], [], None, None, lineno=595, col_offset=33)], [], None, None, lineno=595, col_offset=15), lineno=595, col_offset=8)], [], lineno=585, col_offset=4)], [], lineno=533, col_offset=0), ClassDef('Button', [Name('Widget', Load(), lineno=598, col_offset=13)], [Expr(Str('Ttk Button widget, displays a textual label and/or image, and\n    evaluates a command when pressed.', lineno=600, col_offset=-1), lineno=600, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=602, col_offset=17), Name('master', Param(), lineno=602, col_offset=23)], None, 'kw', [Name('None', Load(), lineno=602, col_offset=30)]), [Expr(Str('Construct a Ttk Button widget with the parent master.\n\n        STANDARD OPTIONS\n\n            class, compound, cursor, image, state, style, takefocus,\n            text, textvariable, underline, width\n\n        WIDGET-SPECIFIC OPTIONS\n\n            command, default, width\n        ', lineno=613, col_offset=-1), lineno=613, col_offset=-1), Expr(Call(Attribute(Name('Widget', Load(), lineno=614, col_offset=8), '__init__', Load(), lineno=614, col_offset=8), [Name('self', Load(), lineno=614, col_offset=24), Name('master', Load(), lineno=614, col_offset=30), Str('ttk::button', lineno=614, col_offset=38), Name('kw', Load(), lineno=614, col_offset=53)], [], None, None, lineno=614, col_offset=8), lineno=614, col_offset=8)], [], lineno=602, col_offset=4), FunctionDef('invoke', arguments([Name('self', Param(), lineno=617, col_offset=15)], None, None, []), [Expr(Str('Invokes the command associated with the button.', lineno=618, col_offset=8), lineno=618, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=619, col_offset=15), 'tk', Load(), lineno=619, col_offset=15), 'call', Load(), lineno=619, col_offset=15), [Attribute(Name('self', Load(), lineno=619, col_offset=28), '_w', Load(), lineno=619, col_offset=28), Str('invoke', lineno=619, col_offset=37)], [], None, None, lineno=619, col_offset=15), lineno=619, col_offset=8)], [], lineno=617, col_offset=4)], [], lineno=598, col_offset=0), ClassDef('Checkbutton', [Name('Widget', Load(), lineno=622, col_offset=18)], [Expr(Str('Ttk Checkbutton widget which is either in on- or off-state.', lineno=623, col_offset=4), lineno=623, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=625, col_offset=17), Name('master', Param(), lineno=625, col_offset=23)], None, 'kw', [Name('None', Load(), lineno=625, col_offset=30)]), [Expr(Str('Construct a Ttk Checkbutton widget with the parent master.\n\n        STANDARD OPTIONS\n\n            class, compound, cursor, image, state, style, takefocus,\n            text, textvariable, underline, width\n\n        WIDGET-SPECIFIC OPTIONS\n\n            command, offvalue, onvalue, variable\n        ', lineno=636, col_offset=-1), lineno=636, col_offset=-1), Expr(Call(Attribute(Name('Widget', Load(), lineno=637, col_offset=8), '__init__', Load(), lineno=637, col_offset=8), [Name('self', Load(), lineno=637, col_offset=24), Name('master', Load(), lineno=637, col_offset=30), Str('ttk::checkbutton', lineno=637, col_offset=38), Name('kw', Load(), lineno=637, col_offset=58)], [], None, None, lineno=637, col_offset=8), lineno=637, col_offset=8)], [], lineno=625, col_offset=4), FunctionDef('invoke', arguments([Name('self', Param(), lineno=640, col_offset=15)], None, None, []), [Expr(Str('Toggles between the selected and deselected states and\n        invokes the associated command. If the widget is currently\n        selected, sets the option variable to the offvalue option\n        and deselects the widget; otherwise, sets the option variable\n        to the option onvalue.\n\n        Returns the result of the associated command.', lineno=647, col_offset=-1), lineno=647, col_offset=-1), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=648, col_offset=15), 'tk', Load(), lineno=648, col_offset=15), 'call', Load(), lineno=648, col_offset=15), [Attribute(Name('self', Load(), lineno=648, col_offset=28), '_w', Load(), lineno=648, col_offset=28), Str('invoke', lineno=648, col_offset=37)], [], None, None, lineno=648, col_offset=15), lineno=648, col_offset=8)], [], lineno=640, col_offset=4)], [], lineno=622, col_offset=0), ClassDef('Entry', [Name('Widget', Load(), lineno=651, col_offset=12), Attribute(Name('Tkinter', Load(), lineno=651, col_offset=20), 'Entry', Load(), lineno=651, col_offset=20)], [Expr(Str('Ttk Entry widget displays a one-line text string and allows that\n    string to be edited by the user.', lineno=653, col_offset=-1), lineno=653, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=655, col_offset=17), Name('master', Param(), lineno=655, col_offset=23), Name('widget', Param(), lineno=655, col_offset=36)], None, 'kw', [Name('None', Load(), lineno=655, col_offset=30), Name('None', Load(), lineno=655, col_offset=43)]), [Expr(Str('Constructs a Ttk Entry widget with the parent master.\n\n        STANDARD OPTIONS\n\n            class, cursor, style, takefocus, xscrollcommand\n\n        WIDGET-SPECIFIC OPTIONS\n\n            exportselection, invalidcommand, justify, show, state,\n            textvariable, validate, validatecommand, width\n\n        VALIDATION MODES\n\n            none, key, focus, focusin, focusout, all\n        ', lineno=670, col_offset=-1), lineno=670, col_offset=-1), Expr(Call(Attribute(Name('Widget', Load(), lineno=671, col_offset=8), '__init__', Load(), lineno=671, col_offset=8), [Name('self', Load(), lineno=671, col_offset=24), Name('master', Load(), lineno=671, col_offset=30), BoolOp(Or(), [Name('widget', Load(), lineno=671, col_offset=38), Str('ttk::entry', lineno=671, col_offset=48)], lineno=671, col_offset=38), Name('kw', Load(), lineno=671, col_offset=62)], [], None, None, lineno=671, col_offset=8), lineno=671, col_offset=8)], [], lineno=655, col_offset=4), FunctionDef('bbox', arguments([Name('self', Param(), lineno=674, col_offset=13), Name('index', Param(), lineno=674, col_offset=19)], None, None, []), [Expr(Str('Return a tuple of (x, y, width, height) which describes the\n        bounding box of the character given by index.', lineno=676, col_offset=-1), lineno=676, col_offset=-1), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=677, col_offset=15), 'tk', Load(), lineno=677, col_offset=15), 'call', Load(), lineno=677, col_offset=15), [Attribute(Name('self', Load(), lineno=677, col_offset=28), '_w', Load(), lineno=677, col_offset=28), Str('bbox', lineno=677, col_offset=37), Name('index', Load(), lineno=677, col_offset=45)], [], None, None, lineno=677, col_offset=15), lineno=677, col_offset=8)], [], lineno=674, col_offset=4), FunctionDef('identify', arguments([Name('self', Param(), lineno=680, col_offset=17), Name('x', Param(), lineno=680, col_offset=23), Name('y', Param(), lineno=680, col_offset=26)], None, None, []), [Expr(Str('Returns the name of the element at position x, y, or the\n        empty string if the coordinates are outside the window.', lineno=682, col_offset=-1), lineno=682, col_offset=-1), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=683, col_offset=15), 'tk', Load(), lineno=683, col_offset=15), 'call', Load(), lineno=683, col_offset=15), [Attribute(Name('self', Load(), lineno=683, col_offset=28), '_w', Load(), lineno=683, col_offset=28), Str('identify', lineno=683, col_offset=37), Name('x', Load(), lineno=683, col_offset=49), Name('y', Load(), lineno=683, col_offset=52)], [], None, None, lineno=683, col_offset=15), lineno=683, col_offset=8)], [], lineno=680, col_offset=4), FunctionDef('validate', arguments([Name('self', Param(), lineno=686, col_offset=17)], None, None, []), [Expr(Str('Force revalidation, independent of the conditions specified\n        by the validate option. Returns False if validation fails, True\n        if it succeeds. Sets or clears the invalid state accordingly.', lineno=689, col_offset=-1), lineno=689, col_offset=-1), Return(Call(Name('bool', Load(), lineno=690, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=690, col_offset=20), 'tk', Load(), lineno=690, col_offset=20), 'call', Load(), lineno=690, col_offset=20), [Attribute(Name('self', Load(), lineno=690, col_offset=33), '_w', Load(), lineno=690, col_offset=33), Str('validate', lineno=690, col_offset=42)], [], None, None, lineno=690, col_offset=20)], [], None, None, lineno=690, col_offset=15), lineno=690, col_offset=8)], [], lineno=686, col_offset=4)], [], lineno=651, col_offset=0), ClassDef('Combobox', [Name('Entry', Load(), lineno=693, col_offset=15)], [Expr(Str('Ttk Combobox widget combines a text field with a pop-down list of\n    values.', lineno=695, col_offset=-1), lineno=695, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=697, col_offset=17), Name('master', Param(), lineno=697, col_offset=23)], None, 'kw', [Name('None', Load(), lineno=697, col_offset=30)]), [Expr(Str('Construct a Ttk Combobox widget with the parent master.\n\n        STANDARD OPTIONS\n\n            class, cursor, style, takefocus\n\n        WIDGET-SPECIFIC OPTIONS\n\n            exportselection, justify, height, postcommand, state,\n            textvariable, values, width\n        ', lineno=708, col_offset=-1), lineno=708, col_offset=-1), If(Compare(Str('values', lineno=711, col_offset=11), [In()], [Name('kw', Load(), lineno=711, col_offset=23)], lineno=711, col_offset=11), [Assign([Subscript(Name('kw', Load(), lineno=712, col_offset=12), Index(Str('values', lineno=712, col_offset=15)), Store(), lineno=712, col_offset=12)], Subscript(Call(Name('_format_optdict', Load(), lineno=712, col_offset=27), [Dict([Str('v', lineno=712, col_offset=44)], [Subscript(Name('kw', Load(), lineno=712, col_offset=49), Index(Str('values', lineno=712, col_offset=52)), Load(), lineno=712, col_offset=49)], lineno=712, col_offset=43)], [], None, None, lineno=712, col_offset=27), Index(Num(1, lineno=712, col_offset=64)), Load(), lineno=712, col_offset=27), lineno=712, col_offset=12)], [], lineno=711, col_offset=8), Expr(Call(Attribute(Name('Entry', Load(), lineno=714, col_offset=8), '__init__', Load(), lineno=714, col_offset=8), [Name('self', Load(), lineno=714, col_offset=23), Name('master', Load(), lineno=714, col_offset=29), Str('ttk::combobox', lineno=714, col_offset=37)], [], None, Name('kw', Load(), lineno=714, col_offset=56), lineno=714, col_offset=8), lineno=714, col_offset=8)], [], lineno=697, col_offset=4), FunctionDef('__setitem__', arguments([Name('self', Param(), lineno=717, col_offset=20), Name('item', Param(), lineno=717, col_offset=26), Name('value', Param(), lineno=717, col_offset=32)], None, None, []), [If(Compare(Name('item', Load(), lineno=718, col_offset=11), [Eq()], [Str('values', lineno=718, col_offset=19)], lineno=718, col_offset=11), [Assign([Name('value', Store(), lineno=719, col_offset=12)], Subscript(Call(Name('_format_optdict', Load(), lineno=719, col_offset=20), [Dict([Name('item', Load(), lineno=719, col_offset=37)], [Name('value', Load(), lineno=719, col_offset=43)], lineno=719, col_offset=36)], [], None, None, lineno=719, col_offset=20), Index(Num(1, lineno=719, col_offset=51)), Load(), lineno=719, col_offset=20), lineno=719, col_offset=12)], [], lineno=718, col_offset=8), Expr(Call(Attribute(Name('Entry', Load(), lineno=721, col_offset=8), '__setitem__', Load(), lineno=721, col_offset=8), [Name('self', Load(), lineno=721, col_offset=26), Name('item', Load(), lineno=721, col_offset=32), Name('value', Load(), lineno=721, col_offset=38)], [], None, None, lineno=721, col_offset=8), lineno=721, col_offset=8)], [], lineno=717, col_offset=4), FunctionDef('configure', arguments([Name('self', Param(), lineno=724, col_offset=18), Name('cnf', Param(), lineno=724, col_offset=24)], None, 'kw', [Name('None', Load(), lineno=724, col_offset=28)]), [Expr(Str('Custom Combobox configure, created to properly format the values\n        option.', lineno=726, col_offset=-1), lineno=726, col_offset=-1), If(Compare(Str('values', lineno=727, col_offset=11), [In()], [Name('kw', Load(), lineno=727, col_offset=23)], lineno=727, col_offset=11), [Assign([Subscript(Name('kw', Load(), lineno=728, col_offset=12), Index(Str('values', lineno=728, col_offset=15)), Store(), lineno=728, col_offset=12)], Subscript(Call(Name('_format_optdict', Load(), lineno=728, col_offset=27), [Dict([Str('v', lineno=728, col_offset=44)], [Subscript(Name('kw', Load(), lineno=728, col_offset=49), Index(Str('values', lineno=728, col_offset=52)), Load(), lineno=728, col_offset=49)], lineno=728, col_offset=43)], [], None, None, lineno=728, col_offset=27), Index(Num(1, lineno=728, col_offset=64)), Load(), lineno=728, col_offset=27), lineno=728, col_offset=12)], [], lineno=727, col_offset=8), Return(Call(Attribute(Name('Entry', Load(), lineno=730, col_offset=15), 'configure', Load(), lineno=730, col_offset=15), [Name('self', Load(), lineno=730, col_offset=31), Name('cnf', Load(), lineno=730, col_offset=37)], [], None, Name('kw', Load(), lineno=730, col_offset=44), lineno=730, col_offset=15), lineno=730, col_offset=8)], [], lineno=724, col_offset=4), FunctionDef('current', arguments([Name('self', Param(), lineno=733, col_offset=16), Name('newindex', Param(), lineno=733, col_offset=22)], None, None, [Name('None', Load(), lineno=733, col_offset=31)]), [Expr(Str('If newindex is supplied, sets the combobox value to the\n        element at position newindex in the list of values. Otherwise,\n        returns the index of the current value in the list of values\n        or -1 if the current value does not appear in the list.', lineno=737, col_offset=-1), lineno=737, col_offset=-1), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=738, col_offset=15), 'tk', Load(), lineno=738, col_offset=15), 'call', Load(), lineno=738, col_offset=15), [Attribute(Name('self', Load(), lineno=738, col_offset=28), '_w', Load(), lineno=738, col_offset=28), Str('current', lineno=738, col_offset=37), Name('newindex', Load(), lineno=738, col_offset=48)], [], None, None, lineno=738, col_offset=15), lineno=738, col_offset=8)], [], lineno=733, col_offset=4), FunctionDef('set', arguments([Name('self', Param(), lineno=741, col_offset=12), Name('value', Param(), lineno=741, col_offset=18)], None, None, []), [Expr(Str('Sets the value of the combobox to value.', lineno=742, col_offset=8), lineno=742, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=743, col_offset=8), 'tk', Load(), lineno=743, col_offset=8), 'call', Load(), lineno=743, col_offset=8), [Attribute(Name('self', Load(), lineno=743, col_offset=21), '_w', Load(), lineno=743, col_offset=21), Str('set', lineno=743, col_offset=30), Name('value', Load(), lineno=743, col_offset=37)], [], None, None, lineno=743, col_offset=8), lineno=743, col_offset=8)], [], lineno=741, col_offset=4)], [], lineno=693, col_offset=0), ClassDef('Frame', [Name('Widget', Load(), lineno=746, col_offset=12)], [Expr(Str('Ttk Frame widget is a container, used to group other widgets\n    together.', lineno=748, col_offset=-1), lineno=748, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=750, col_offset=17), Name('master', Param(), lineno=750, col_offset=23)], None, 'kw', [Name('None', Load(), lineno=750, col_offset=30)]), [Expr(Str('Construct a Ttk Frame with parent master.\n\n        STANDARD OPTIONS\n\n            class, cursor, style, takefocus\n\n        WIDGET-SPECIFIC OPTIONS\n\n            borderwidth, relief, padding, width, height\n        ', lineno=760, col_offset=-1), lineno=760, col_offset=-1), Expr(Call(Attribute(Name('Widget', Load(), lineno=761, col_offset=8), '__init__', Load(), lineno=761, col_offset=8), [Name('self', Load(), lineno=761, col_offset=24), Name('master', Load(), lineno=761, col_offset=30), Str('ttk::frame', lineno=761, col_offset=38), Name('kw', Load(), lineno=761, col_offset=52)], [], None, None, lineno=761, col_offset=8), lineno=761, col_offset=8)], [], lineno=750, col_offset=4)], [], lineno=746, col_offset=0), ClassDef('Label', [Name('Widget', Load(), lineno=764, col_offset=12)], [Expr(Str('Ttk Label widget displays a textual label and/or image.', lineno=765, col_offset=4), lineno=765, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=767, col_offset=17), Name('master', Param(), lineno=767, col_offset=23)], None, 'kw', [Name('None', Load(), lineno=767, col_offset=30)]), [Expr(Str('Construct a Ttk Label with parent master.\n\n        STANDARD OPTIONS\n\n            class, compound, cursor, image, style, takefocus, text,\n            textvariable, underline, width\n\n        WIDGET-SPECIFIC OPTIONS\n\n            anchor, background, font, foreground, justify, padding,\n            relief, text, wraplength\n        ', lineno=779, col_offset=-1), lineno=779, col_offset=-1), Expr(Call(Attribute(Name('Widget', Load(), lineno=780, col_offset=8), '__init__', Load(), lineno=780, col_offset=8), [Name('self', Load(), lineno=780, col_offset=24), Name('master', Load(), lineno=780, col_offset=30), Str('ttk::label', lineno=780, col_offset=38), Name('kw', Load(), lineno=780, col_offset=52)], [], None, None, lineno=780, col_offset=8), lineno=780, col_offset=8)], [], lineno=767, col_offset=4)], [], lineno=764, col_offset=0), ClassDef('Labelframe', [Name('Widget', Load(), lineno=783, col_offset=17)], [Expr(Str('Ttk Labelframe widget is a container used to group other widgets\n    together. It has an optional label, which may be a plain text string\n    or another widget.', lineno=786, col_offset=-1), lineno=786, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=788, col_offset=17), Name('master', Param(), lineno=788, col_offset=23)], None, 'kw', [Name('None', Load(), lineno=788, col_offset=30)]), [Expr(Str('Construct a Ttk Labelframe with parent master.\n\n        STANDARD OPTIONS\n\n            class, cursor, style, takefocus\n\n        WIDGET-SPECIFIC OPTIONS\n            labelanchor, text, underline, padding, labelwidget, width,\n            height\n        ', lineno=798, col_offset=-1), lineno=798, col_offset=-1), Expr(Call(Attribute(Name('Widget', Load(), lineno=799, col_offset=8), '__init__', Load(), lineno=799, col_offset=8), [Name('self', Load(), lineno=799, col_offset=24), Name('master', Load(), lineno=799, col_offset=30), Str('ttk::labelframe', lineno=799, col_offset=38), Name('kw', Load(), lineno=799, col_offset=57)], [], None, None, lineno=799, col_offset=8), lineno=799, col_offset=8)], [], lineno=788, col_offset=4)], [], lineno=783, col_offset=0), Assign([Name('LabelFrame', Store(), lineno=801, col_offset=0)], Name('Labelframe', Load(), lineno=801, col_offset=13), lineno=801, col_offset=0), ClassDef('Menubutton', [Name('Widget', Load(), lineno=804, col_offset=17)], [Expr(Str('Ttk Menubutton widget displays a textual label and/or image, and\n    displays a menu when pressed.', lineno=806, col_offset=-1), lineno=806, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=808, col_offset=17), Name('master', Param(), lineno=808, col_offset=23)], None, 'kw', [Name('None', Load(), lineno=808, col_offset=30)]), [Expr(Str('Construct a Ttk Menubutton with parent master.\n\n        STANDARD OPTIONS\n\n            class, compound, cursor, image, state, style, takefocus,\n            text, textvariable, underline, width\n\n        WIDGET-SPECIFIC OPTIONS\n\n            direction, menu\n        ', lineno=819, col_offset=-1), lineno=819, col_offset=-1), Expr(Call(Attribute(Name('Widget', Load(), lineno=820, col_offset=8), '__init__', Load(), lineno=820, col_offset=8), [Name('self', Load(), lineno=820, col_offset=24), Name('master', Load(), lineno=820, col_offset=30), Str('ttk::menubutton', lineno=820, col_offset=38), Name('kw', Load(), lineno=820, col_offset=57)], [], None, None, lineno=820, col_offset=8), lineno=820, col_offset=8)], [], lineno=808, col_offset=4)], [], lineno=804, col_offset=0), ClassDef('Notebook', [Name('Widget', Load(), lineno=823, col_offset=15)], [Expr(Str('Ttk Notebook widget manages a collection of windows and displays\n    a single one at a time. Each child window is associated with a tab,\n    which the user may select to change the currently-displayed window.', lineno=826, col_offset=-1), lineno=826, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=828, col_offset=17), Name('master', Param(), lineno=828, col_offset=23)], None, 'kw', [Name('None', Load(), lineno=828, col_offset=30)]), [Expr(Str('Construct a Ttk Notebook with parent master.\n\n        STANDARD OPTIONS\n\n            class, cursor, style, takefocus\n\n        WIDGET-SPECIFIC OPTIONS\n\n            height, padding, width\n\n        TAB OPTIONS\n\n            state, sticky, padding, text, image, compound, underline\n\n        TAB IDENTIFIERS (tab_id)\n\n            The tab_id argument found in several methods may take any of\n            the following forms:\n\n                * An integer between zero and the number of tabs\n                * The name of a child window\n                * A positional specification of the form "@x,y", which\n                  defines the tab\n                * The string "current", which identifies the\n                  currently-selected tab\n                * The string "end", which returns the number of tabs (only\n                  valid for method index)\n        ', lineno=856, col_offset=-1), lineno=856, col_offset=-1), Expr(Call(Attribute(Name('Widget', Load(), lineno=857, col_offset=8), '__init__', Load(), lineno=857, col_offset=8), [Name('self', Load(), lineno=857, col_offset=24), Name('master', Load(), lineno=857, col_offset=30), Str('ttk::notebook', lineno=857, col_offset=38), Name('kw', Load(), lineno=857, col_offset=55)], [], None, None, lineno=857, col_offset=8), lineno=857, col_offset=8)], [], lineno=828, col_offset=4), FunctionDef('add', arguments([Name('self', Param(), lineno=860, col_offset=12), Name('child', Param(), lineno=860, col_offset=18)], None, 'kw', []), [Expr(Str('Adds a new tab to the notebook.\n\n        If window is currently managed by the notebook but hidden, it is\n        restored to its previous position.', lineno=864, col_offset=-1), lineno=864, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=865, col_offset=8), 'tk', Load(), lineno=865, col_offset=8), 'call', Load(), lineno=865, col_offset=8), [Attribute(Name('self', Load(), lineno=865, col_offset=21), '_w', Load(), lineno=865, col_offset=21), Str('add', lineno=865, col_offset=30), Name('child', Load(), lineno=865, col_offset=37)], [], Call(Name('_format_optdict', Load(), lineno=865, col_offset=46), [Name('kw', Load(), lineno=865, col_offset=62)], [], None, None, lineno=865, col_offset=46), None, lineno=865, col_offset=8), lineno=865, col_offset=8)], [], lineno=860, col_offset=4), FunctionDef('forget', arguments([Name('self', Param(), lineno=868, col_offset=15), Name('tab_id', Param(), lineno=868, col_offset=21)], None, None, []), [Expr(Str('Removes the tab specified by tab_id, unmaps and unmanages the\n        associated window.', lineno=870, col_offset=-1), lineno=870, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=871, col_offset=8), 'tk', Load(), lineno=871, col_offset=8), 'call', Load(), lineno=871, col_offset=8), [Attribute(Name('self', Load(), lineno=871, col_offset=21), '_w', Load(), lineno=871, col_offset=21), Str('forget', lineno=871, col_offset=30), Name('tab_id', Load(), lineno=871, col_offset=40)], [], None, None, lineno=871, col_offset=8), lineno=871, col_offset=8)], [], lineno=868, col_offset=4), FunctionDef('hide', arguments([Name('self', Param(), lineno=874, col_offset=13), Name('tab_id', Param(), lineno=874, col_offset=19)], None, None, []), [Expr(Str('Hides the tab specified by tab_id.\n\n        The tab will not be displayed, but the associated window remains\n        managed by the notebook and its configuration remembered. Hidden\n        tabs may be restored with the add command.', lineno=879, col_offset=-1), lineno=879, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=880, col_offset=8), 'tk', Load(), lineno=880, col_offset=8), 'call', Load(), lineno=880, col_offset=8), [Attribute(Name('self', Load(), lineno=880, col_offset=21), '_w', Load(), lineno=880, col_offset=21), Str('hide', lineno=880, col_offset=30), Name('tab_id', Load(), lineno=880, col_offset=38)], [], None, None, lineno=880, col_offset=8), lineno=880, col_offset=8)], [], lineno=874, col_offset=4), FunctionDef('identify', arguments([Name('self', Param(), lineno=883, col_offset=17), Name('x', Param(), lineno=883, col_offset=23), Name('y', Param(), lineno=883, col_offset=26)], None, None, []), [Expr(Str('Returns the name of the tab element at position x, y, or the\n        empty string if none.', lineno=885, col_offset=-1), lineno=885, col_offset=-1), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=886, col_offset=15), 'tk', Load(), lineno=886, col_offset=15), 'call', Load(), lineno=886, col_offset=15), [Attribute(Name('self', Load(), lineno=886, col_offset=28), '_w', Load(), lineno=886, col_offset=28), Str('identify', lineno=886, col_offset=37), Name('x', Load(), lineno=886, col_offset=49), Name('y', Load(), lineno=886, col_offset=52)], [], None, None, lineno=886, col_offset=15), lineno=886, col_offset=8)], [], lineno=883, col_offset=4), FunctionDef('index', arguments([Name('self', Param(), lineno=889, col_offset=14), Name('tab_id', Param(), lineno=889, col_offset=20)], None, None, []), [Expr(Str('Returns the numeric index of the tab specified by tab_id, or\n        the total number of tabs if tab_id is the string "end".', lineno=891, col_offset=-1), lineno=891, col_offset=-1), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=892, col_offset=15), 'tk', Load(), lineno=892, col_offset=15), 'call', Load(), lineno=892, col_offset=15), [Attribute(Name('self', Load(), lineno=892, col_offset=28), '_w', Load(), lineno=892, col_offset=28), Str('index', lineno=892, col_offset=37), Name('tab_id', Load(), lineno=892, col_offset=46)], [], None, None, lineno=892, col_offset=15), lineno=892, col_offset=8)], [], lineno=889, col_offset=4), FunctionDef('insert', arguments([Name('self', Param(), lineno=895, col_offset=15), Name('pos', Param(), lineno=895, col_offset=21), Name('child', Param(), lineno=895, col_offset=26)], None, 'kw', []), [Expr(Str('Inserts a pane at the specified position.\n\n        pos is either the string end, an integer index, or the name of\n        a managed child. If child is already managed by the notebook,\n        moves it to the specified position.', lineno=900, col_offset=-1), lineno=900, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=901, col_offset=8), 'tk', Load(), lineno=901, col_offset=8), 'call', Load(), lineno=901, col_offset=8), [Attribute(Name('self', Load(), lineno=901, col_offset=21), '_w', Load(), lineno=901, col_offset=21), Str('insert', lineno=901, col_offset=30), Name('pos', Load(), lineno=901, col_offset=40), Name('child', Load(), lineno=901, col_offset=45)], [], Call(Name('_format_optdict', Load(), lineno=901, col_offset=54), [Name('kw', Load(), lineno=901, col_offset=70)], [], None, None, lineno=901, col_offset=54), None, lineno=901, col_offset=8), lineno=901, col_offset=8)], [], lineno=895, col_offset=4), FunctionDef('select', arguments([Name('self', Param(), lineno=904, col_offset=15), Name('tab_id', Param(), lineno=904, col_offset=21)], None, None, [Name('None', Load(), lineno=904, col_offset=28)]), [Expr(Str('Selects the specified tab.\n\n        The associated child window will be displayed, and the\n        previously-selected window (if different) is unmapped. If tab_id\n        is omitted, returns the widget name of the currently selected\n        pane.', lineno=910, col_offset=-1), lineno=910, col_offset=-1), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=911, col_offset=15), 'tk', Load(), lineno=911, col_offset=15), 'call', Load(), lineno=911, col_offset=15), [Attribute(Name('self', Load(), lineno=911, col_offset=28), '_w', Load(), lineno=911, col_offset=28), Str('select', lineno=911, col_offset=37), Name('tab_id', Load(), lineno=911, col_offset=47)], [], None, None, lineno=911, col_offset=15), lineno=911, col_offset=8)], [], lineno=904, col_offset=4), FunctionDef('tab', arguments([Name('self', Param(), lineno=914, col_offset=12), Name('tab_id', Param(), lineno=914, col_offset=18), Name('option', Param(), lineno=914, col_offset=26)], None, 'kw', [Name('None', Load(), lineno=914, col_offset=33)]), [Expr(Str('Query or modify the options of the specific tab_id.\n\n        If kw is not given, returns a dict of the tab option values. If option\n        is specified, returns the value of that option. Otherwise, sets the\n        options to the corresponding values.', lineno=919, col_offset=-1), lineno=919, col_offset=-1), If(Compare(Name('option', Load(), lineno=920, col_offset=11), [IsNot()], [Name('None', Load(), lineno=920, col_offset=25)], lineno=920, col_offset=11), [Assign([Subscript(Name('kw', Load(), lineno=921, col_offset=12), Index(Name('option', Load(), lineno=921, col_offset=15)), Store(), lineno=921, col_offset=12)], Name('None', Load(), lineno=921, col_offset=25), lineno=921, col_offset=12)], [], lineno=920, col_offset=8), Return(Call(Name('_val_or_dict', Load(), lineno=922, col_offset=15), [Name('kw', Load(), lineno=922, col_offset=28), Attribute(Attribute(Name('self', Load(), lineno=922, col_offset=32), 'tk', Load(), lineno=922, col_offset=32), 'call', Load(), lineno=922, col_offset=32), Attribute(Name('self', Load(), lineno=922, col_offset=46), '_w', Load(), lineno=922, col_offset=46), Str('tab', lineno=922, col_offset=55), Name('tab_id', Load(), lineno=922, col_offset=62)], [], None, None, lineno=922, col_offset=15), lineno=922, col_offset=8)], [], lineno=914, col_offset=4), FunctionDef('tabs', arguments([Name('self', Param(), lineno=925, col_offset=13)], None, None, []), [Expr(Str('Returns a list of windows managed by the notebook.', lineno=926, col_offset=8), lineno=926, col_offset=8), Return(BoolOp(Or(), [Call(Attribute(Attribute(Name('self', Load(), lineno=927, col_offset=15), 'tk', Load(), lineno=927, col_offset=15), 'call', Load(), lineno=927, col_offset=15), [Attribute(Name('self', Load(), lineno=927, col_offset=28), '_w', Load(), lineno=927, col_offset=28), Str('tabs', lineno=927, col_offset=37)], [], None, None, lineno=927, col_offset=15), Tuple([], Load(), lineno=927, col_offset=48)], lineno=927, col_offset=15), lineno=927, col_offset=8)], [], lineno=925, col_offset=4), FunctionDef('enable_traversal', arguments([Name('self', Param(), lineno=930, col_offset=25)], None, None, []), [Expr(Str('Enable keyboard traversal for a toplevel window containing\n        this notebook.\n\n        This will extend the bindings for the toplevel window containing\n        this notebook as follows:\n\n            Control-Tab: selects the tab following the currently selected\n                         one\n\n            Shift-Control-Tab: selects the tab preceding the currently\n                               selected one\n\n            Alt-K: where K is the mnemonic (underlined) character of any\n                   tab, will select that tab.\n\n        Multiple notebooks in a single toplevel may be enabled for\n        traversal, including nested notebooks. However, notebook traversal\n        only works properly if all panes are direct children of the\n        notebook.', lineno=949, col_offset=-1), lineno=949, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=953, col_offset=8), 'tk', Load(), lineno=953, col_offset=8), 'call', Load(), lineno=953, col_offset=8), [Str('ttk::notebook::enableTraversal', lineno=953, col_offset=21), Attribute(Name('self', Load(), lineno=953, col_offset=55), '_w', Load(), lineno=953, col_offset=55)], [], None, None, lineno=953, col_offset=8), lineno=953, col_offset=8)], [], lineno=930, col_offset=4)], [], lineno=823, col_offset=0), ClassDef('Panedwindow', [Name('Widget', Load(), lineno=956, col_offset=18), Attribute(Name('Tkinter', Load(), lineno=956, col_offset=26), 'PanedWindow', Load(), lineno=956, col_offset=26)], [Expr(Str('Ttk Panedwindow widget displays a number of subwindows, stacked\n    either vertically or horizontally.', lineno=958, col_offset=-1), lineno=958, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=960, col_offset=17), Name('master', Param(), lineno=960, col_offset=23)], None, 'kw', [Name('None', Load(), lineno=960, col_offset=30)]), [Expr(Str('Construct a Ttk Panedwindow with parent master.\n\n        STANDARD OPTIONS\n\n            class, cursor, style, takefocus\n\n        WIDGET-SPECIFIC OPTIONS\n\n            orient, width, height\n\n        PANE OPTIONS\n\n            weight\n        ', lineno=974, col_offset=-1), lineno=974, col_offset=-1), Expr(Call(Attribute(Name('Widget', Load(), lineno=975, col_offset=8), '__init__', Load(), lineno=975, col_offset=8), [Name('self', Load(), lineno=975, col_offset=24), Name('master', Load(), lineno=975, col_offset=30), Str('ttk::panedwindow', lineno=975, col_offset=38), Name('kw', Load(), lineno=975, col_offset=58)], [], None, None, lineno=975, col_offset=8), lineno=975, col_offset=8)], [], lineno=960, col_offset=4), Assign([Name('forget', Store(), lineno=978, col_offset=4)], Attribute(Attribute(Name('Tkinter', Load(), lineno=978, col_offset=13), 'PanedWindow', Load(), lineno=978, col_offset=13), 'forget', Load(), lineno=978, col_offset=13), lineno=978, col_offset=4), FunctionDef('insert', arguments([Name('self', Param(), lineno=981, col_offset=15), Name('pos', Param(), lineno=981, col_offset=21), Name('child', Param(), lineno=981, col_offset=26)], None, 'kw', []), [Expr(Str('Inserts a pane at the specified positions.\n\n        pos is either the string end, and integer index, or the name\n        of a child. If child is already managed by the paned window,\n        moves it to the specified position.', lineno=986, col_offset=-1), lineno=986, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=987, col_offset=8), 'tk', Load(), lineno=987, col_offset=8), 'call', Load(), lineno=987, col_offset=8), [Attribute(Name('self', Load(), lineno=987, col_offset=21), '_w', Load(), lineno=987, col_offset=21), Str('insert', lineno=987, col_offset=30), Name('pos', Load(), lineno=987, col_offset=40), Name('child', Load(), lineno=987, col_offset=45)], [], Call(Name('_format_optdict', Load(), lineno=987, col_offset=54), [Name('kw', Load(), lineno=987, col_offset=70)], [], None, None, lineno=987, col_offset=54), None, lineno=987, col_offset=8), lineno=987, col_offset=8)], [], lineno=981, col_offset=4), FunctionDef('pane', arguments([Name('self', Param(), lineno=990, col_offset=13), Name('pane', Param(), lineno=990, col_offset=19), Name('option', Param(), lineno=990, col_offset=25)], None, 'kw', [Name('None', Load(), lineno=990, col_offset=32)]), [Expr(Str('Query or modify the options of the specified pane.\n\n        pane is either an integer index or the name of a managed subwindow.\n        If kw is not given, returns a dict of the pane option values. If\n        option is specified then the value for that option is returned.\n        Otherwise, sets the options to the correspoding values.', lineno=996, col_offset=-1), lineno=996, col_offset=-1), If(Compare(Name('option', Load(), lineno=997, col_offset=11), [IsNot()], [Name('None', Load(), lineno=997, col_offset=25)], lineno=997, col_offset=11), [Assign([Subscript(Name('kw', Load(), lineno=998, col_offset=12), Index(Name('option', Load(), lineno=998, col_offset=15)), Store(), lineno=998, col_offset=12)], Name('None', Load(), lineno=998, col_offset=25), lineno=998, col_offset=12)], [], lineno=997, col_offset=8), Return(Call(Name('_val_or_dict', Load(), lineno=999, col_offset=15), [Name('kw', Load(), lineno=999, col_offset=28), Attribute(Attribute(Name('self', Load(), lineno=999, col_offset=32), 'tk', Load(), lineno=999, col_offset=32), 'call', Load(), lineno=999, col_offset=32), Attribute(Name('self', Load(), lineno=999, col_offset=46), '_w', Load(), lineno=999, col_offset=46), Str('pane', lineno=999, col_offset=55), Name('pane', Load(), lineno=999, col_offset=63)], [], None, None, lineno=999, col_offset=15), lineno=999, col_offset=8)], [], lineno=990, col_offset=4), FunctionDef('sashpos', arguments([Name('self', Param(), lineno=1002, col_offset=16), Name('index', Param(), lineno=1002, col_offset=22), Name('newpos', Param(), lineno=1002, col_offset=29)], None, None, [Name('None', Load(), lineno=1002, col_offset=36)]), [Expr(Str('If newpos is specified, sets the position of sash number index.\n\n        May adjust the positions of adjacent sashes to ensure that\n        positions are monotonically increasing. Sash positions are further\n        constrained to be between 0 and the total size of the widget.\n\n        Returns the new position of sash number index.', lineno=1009, col_offset=-1), lineno=1009, col_offset=-1), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=1010, col_offset=15), 'tk', Load(), lineno=1010, col_offset=15), 'call', Load(), lineno=1010, col_offset=15), [Attribute(Name('self', Load(), lineno=1010, col_offset=28), '_w', Load(), lineno=1010, col_offset=28), Str('sashpos', lineno=1010, col_offset=37), Name('index', Load(), lineno=1010, col_offset=48), Name('newpos', Load(), lineno=1010, col_offset=55)], [], None, None, lineno=1010, col_offset=15), lineno=1010, col_offset=8)], [], lineno=1002, col_offset=4)], [], lineno=956, col_offset=0), Assign([Name('PanedWindow', Store(), lineno=1012, col_offset=0)], Name('Panedwindow', Load(), lineno=1012, col_offset=14), lineno=1012, col_offset=0), ClassDef('Progressbar', [Name('Widget', Load(), lineno=1015, col_offset=18)], [Expr(Str('Ttk Progressbar widget shows the status of a long-running\n    operation. They can operate in two modes: determinate mode shows the\n    amount completed relative to the total amount of work to be done, and\n    indeterminate mode provides an animated display to let the user know\n    that something is happening.', lineno=1020, col_offset=-1), lineno=1020, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=1022, col_offset=17), Name('master', Param(), lineno=1022, col_offset=23)], None, 'kw', [Name('None', Load(), lineno=1022, col_offset=30)]), [Expr(Str('Construct a Ttk Progressbar with parent master.\n\n        STANDARD OPTIONS\n\n            class, cursor, style, takefocus\n\n        WIDGET-SPECIFIC OPTIONS\n\n            orient, length, mode, maximum, value, variable, phase\n        ', lineno=1032, col_offset=-1), lineno=1032, col_offset=-1), Expr(Call(Attribute(Name('Widget', Load(), lineno=1033, col_offset=8), '__init__', Load(), lineno=1033, col_offset=8), [Name('self', Load(), lineno=1033, col_offset=24), Name('master', Load(), lineno=1033, col_offset=30), Str('ttk::progressbar', lineno=1033, col_offset=38), Name('kw', Load(), lineno=1033, col_offset=58)], [], None, None, lineno=1033, col_offset=8), lineno=1033, col_offset=8)], [], lineno=1022, col_offset=4), FunctionDef('start', arguments([Name('self', Param(), lineno=1036, col_offset=14), Name('interval', Param(), lineno=1036, col_offset=20)], None, None, [Name('None', Load(), lineno=1036, col_offset=29)]), [Expr(Str('Begin autoincrement mode: schedules a recurring timer event\n        that calls method step every interval milliseconds.\n\n        interval defaults to 50 milliseconds (20 steps/second) if ommited.', lineno=1040, col_offset=-1), lineno=1040, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1041, col_offset=8), 'tk', Load(), lineno=1041, col_offset=8), 'call', Load(), lineno=1041, col_offset=8), [Attribute(Name('self', Load(), lineno=1041, col_offset=21), '_w', Load(), lineno=1041, col_offset=21), Str('start', lineno=1041, col_offset=30), Name('interval', Load(), lineno=1041, col_offset=39)], [], None, None, lineno=1041, col_offset=8), lineno=1041, col_offset=8)], [], lineno=1036, col_offset=4), FunctionDef('step', arguments([Name('self', Param(), lineno=1044, col_offset=13), Name('amount', Param(), lineno=1044, col_offset=19)], None, None, [Name('None', Load(), lineno=1044, col_offset=26)]), [Expr(Str('Increments the value option by amount.\n\n        amount defaults to 1.0 if omitted.', lineno=1047, col_offset=-1), lineno=1047, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1048, col_offset=8), 'tk', Load(), lineno=1048, col_offset=8), 'call', Load(), lineno=1048, col_offset=8), [Attribute(Name('self', Load(), lineno=1048, col_offset=21), '_w', Load(), lineno=1048, col_offset=21), Str('step', lineno=1048, col_offset=30), Name('amount', Load(), lineno=1048, col_offset=38)], [], None, None, lineno=1048, col_offset=8), lineno=1048, col_offset=8)], [], lineno=1044, col_offset=4), FunctionDef('stop', arguments([Name('self', Param(), lineno=1051, col_offset=13)], None, None, []), [Expr(Str('Stop autoincrement mode: cancels any recurring timer event\n        initiated by start.', lineno=1053, col_offset=-1), lineno=1053, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1054, col_offset=8), 'tk', Load(), lineno=1054, col_offset=8), 'call', Load(), lineno=1054, col_offset=8), [Attribute(Name('self', Load(), lineno=1054, col_offset=21), '_w', Load(), lineno=1054, col_offset=21), Str('stop', lineno=1054, col_offset=30)], [], None, None, lineno=1054, col_offset=8), lineno=1054, col_offset=8)], [], lineno=1051, col_offset=4)], [], lineno=1015, col_offset=0), ClassDef('Radiobutton', [Name('Widget', Load(), lineno=1057, col_offset=18)], [Expr(Str('Ttk Radiobutton widgets are used in groups to show or change a\n    set of mutually-exclusive options.', lineno=1059, col_offset=-1), lineno=1059, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=1061, col_offset=17), Name('master', Param(), lineno=1061, col_offset=23)], None, 'kw', [Name('None', Load(), lineno=1061, col_offset=30)]), [Expr(Str('Construct a Ttk Radiobutton with parent master.\n\n        STANDARD OPTIONS\n\n            class, compound, cursor, image, state, style, takefocus,\n            text, textvariable, underline, width\n\n        WIDGET-SPECIFIC OPTIONS\n\n            command, value, variable\n        ', lineno=1072, col_offset=-1), lineno=1072, col_offset=-1), Expr(Call(Attribute(Name('Widget', Load(), lineno=1073, col_offset=8), '__init__', Load(), lineno=1073, col_offset=8), [Name('self', Load(), lineno=1073, col_offset=24), Name('master', Load(), lineno=1073, col_offset=30), Str('ttk::radiobutton', lineno=1073, col_offset=38), Name('kw', Load(), lineno=1073, col_offset=58)], [], None, None, lineno=1073, col_offset=8), lineno=1073, col_offset=8)], [], lineno=1061, col_offset=4), FunctionDef('invoke', arguments([Name('self', Param(), lineno=1076, col_offset=15)], None, None, []), [Expr(Str('Sets the option variable to the option value, selects the\n        widget, and invokes the associated command.\n\n        Returns the result of the command, or an empty string if\n        no command is specified.', lineno=1081, col_offset=-1), lineno=1081, col_offset=-1), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=1082, col_offset=15), 'tk', Load(), lineno=1082, col_offset=15), 'call', Load(), lineno=1082, col_offset=15), [Attribute(Name('self', Load(), lineno=1082, col_offset=28), '_w', Load(), lineno=1082, col_offset=28), Str('invoke', lineno=1082, col_offset=37)], [], None, None, lineno=1082, col_offset=15), lineno=1082, col_offset=8)], [], lineno=1076, col_offset=4)], [], lineno=1057, col_offset=0), ClassDef('Scale', [Name('Widget', Load(), lineno=1085, col_offset=12), Attribute(Name('Tkinter', Load(), lineno=1085, col_offset=20), 'Scale', Load(), lineno=1085, col_offset=20)], [Expr(Str('Ttk Scale widget is typically used to control the numeric value of\n    a linked variable that varies uniformly over some range.', lineno=1087, col_offset=-1), lineno=1087, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=1089, col_offset=17), Name('master', Param(), lineno=1089, col_offset=23)], None, 'kw', [Name('None', Load(), lineno=1089, col_offset=30)]), [Expr(Str('Construct a Ttk Scale with parent master.\n\n        STANDARD OPTIONS\n\n            class, cursor, style, takefocus\n\n        WIDGET-SPECIFIC OPTIONS\n\n            command, from, length, orient, to, value, variable\n        ', lineno=1099, col_offset=-1), lineno=1099, col_offset=-1), Expr(Call(Attribute(Name('Widget', Load(), lineno=1100, col_offset=8), '__init__', Load(), lineno=1100, col_offset=8), [Name('self', Load(), lineno=1100, col_offset=24), Name('master', Load(), lineno=1100, col_offset=30), Str('ttk::scale', lineno=1100, col_offset=38), Name('kw', Load(), lineno=1100, col_offset=52)], [], None, None, lineno=1100, col_offset=8), lineno=1100, col_offset=8)], [], lineno=1089, col_offset=4), FunctionDef('configure', arguments([Name('self', Param(), lineno=1103, col_offset=18), Name('cnf', Param(), lineno=1103, col_offset=24)], None, 'kw', [Name('None', Load(), lineno=1103, col_offset=28)]), [Expr(Str('Modify or query scale options.\n\n        Setting a value for any of the "from", "from_" or "to" options\n        generates a <<RangeChanged>> event.', lineno=1107, col_offset=-1), lineno=1107, col_offset=-1), If(Name('cnf', Load(), lineno=1108, col_offset=11), [Expr(Call(Attribute(Name('kw', Load(), lineno=1109, col_offset=12), 'update', Load(), lineno=1109, col_offset=12), [Name('cnf', Load(), lineno=1109, col_offset=22)], [], None, None, lineno=1109, col_offset=12), lineno=1109, col_offset=12)], [], lineno=1108, col_offset=8), Expr(Call(Attribute(Name('Widget', Load(), lineno=1110, col_offset=8), 'configure', Load(), lineno=1110, col_offset=8), [Name('self', Load(), lineno=1110, col_offset=25)], [], None, Name('kw', Load(), lineno=1110, col_offset=33), lineno=1110, col_offset=8), lineno=1110, col_offset=8), If(Call(Name('any', Load(), lineno=1111, col_offset=11), [List([Compare(Str('from', lineno=1111, col_offset=16), [In()], [Name('kw', Load(), lineno=1111, col_offset=26)], lineno=1111, col_offset=16), Compare(Str('from_', lineno=1111, col_offset=30), [In()], [Name('kw', Load(), lineno=1111, col_offset=41)], lineno=1111, col_offset=30), Compare(Str('to', lineno=1111, col_offset=45), [In()], [Name('kw', Load(), lineno=1111, col_offset=53)], lineno=1111, col_offset=45)], Load(), lineno=1111, col_offset=15)], [], None, None, lineno=1111, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=1112, col_offset=12), 'event_generate', Load(), lineno=1112, col_offset=12), [Str('<<RangeChanged>>', lineno=1112, col_offset=32)], [], None, None, lineno=1112, col_offset=12), lineno=1112, col_offset=12)], [], lineno=1111, col_offset=8)], [], lineno=1103, col_offset=4), FunctionDef('get', arguments([Name('self', Param(), lineno=1115, col_offset=12), Name('x', Param(), lineno=1115, col_offset=18), Name('y', Param(), lineno=1115, col_offset=26)], None, None, [Name('None', Load(), lineno=1115, col_offset=20), Name('None', Load(), lineno=1115, col_offset=28)]), [Expr(Str('Get the current value of the value option, or the value\n        corresponding to the coordinates x, y if they are specified.\n\n        x and y are pixel coordinates relative to the scale widget\n        origin.', lineno=1120, col_offset=-1), lineno=1120, col_offset=-1), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=1121, col_offset=15), 'tk', Load(), lineno=1121, col_offset=15), 'call', Load(), lineno=1121, col_offset=15), [Attribute(Name('self', Load(), lineno=1121, col_offset=28), '_w', Load(), lineno=1121, col_offset=28), Str('get', lineno=1121, col_offset=37), Name('x', Load(), lineno=1121, col_offset=44), Name('y', Load(), lineno=1121, col_offset=47)], [], None, None, lineno=1121, col_offset=15), lineno=1121, col_offset=8)], [], lineno=1115, col_offset=4)], [], lineno=1085, col_offset=0), ClassDef('Scrollbar', [Name('Widget', Load(), lineno=1124, col_offset=16), Attribute(Name('Tkinter', Load(), lineno=1124, col_offset=24), 'Scrollbar', Load(), lineno=1124, col_offset=24)], [Expr(Str('Ttk Scrollbar controls the viewport of a scrollable widget.', lineno=1125, col_offset=4), lineno=1125, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=1127, col_offset=17), Name('master', Param(), lineno=1127, col_offset=23)], None, 'kw', [Name('None', Load(), lineno=1127, col_offset=30)]), [Expr(Str('Construct a Ttk Scrollbar with parent master.\n\n        STANDARD OPTIONS\n\n            class, cursor, style, takefocus\n\n        WIDGET-SPECIFIC OPTIONS\n\n            command, orient\n        ', lineno=1137, col_offset=-1), lineno=1137, col_offset=-1), Expr(Call(Attribute(Name('Widget', Load(), lineno=1138, col_offset=8), '__init__', Load(), lineno=1138, col_offset=8), [Name('self', Load(), lineno=1138, col_offset=24), Name('master', Load(), lineno=1138, col_offset=30), Str('ttk::scrollbar', lineno=1138, col_offset=38), Name('kw', Load(), lineno=1138, col_offset=56)], [], None, None, lineno=1138, col_offset=8), lineno=1138, col_offset=8)], [], lineno=1127, col_offset=4)], [], lineno=1124, col_offset=0), ClassDef('Separator', [Name('Widget', Load(), lineno=1141, col_offset=16)], [Expr(Str('Ttk Separator widget displays a horizontal or vertical separator\n    bar.', lineno=1143, col_offset=-1), lineno=1143, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=1145, col_offset=17), Name('master', Param(), lineno=1145, col_offset=23)], None, 'kw', [Name('None', Load(), lineno=1145, col_offset=30)]), [Expr(Str('Construct a Ttk Separator with parent master.\n\n        STANDARD OPTIONS\n\n            class, cursor, style, takefocus\n\n        WIDGET-SPECIFIC OPTIONS\n\n            orient\n        ', lineno=1155, col_offset=-1), lineno=1155, col_offset=-1), Expr(Call(Attribute(Name('Widget', Load(), lineno=1156, col_offset=8), '__init__', Load(), lineno=1156, col_offset=8), [Name('self', Load(), lineno=1156, col_offset=24), Name('master', Load(), lineno=1156, col_offset=30), Str('ttk::separator', lineno=1156, col_offset=38), Name('kw', Load(), lineno=1156, col_offset=56)], [], None, None, lineno=1156, col_offset=8), lineno=1156, col_offset=8)], [], lineno=1145, col_offset=4)], [], lineno=1141, col_offset=0), ClassDef('Sizegrip', [Name('Widget', Load(), lineno=1159, col_offset=15)], [Expr(Str('Ttk Sizegrip allows the user to resize the containing toplevel\n    window by pressing and dragging the grip.', lineno=1161, col_offset=-1), lineno=1161, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=1163, col_offset=17), Name('master', Param(), lineno=1163, col_offset=23)], None, 'kw', [Name('None', Load(), lineno=1163, col_offset=30)]), [Expr(Str('Construct a Ttk Sizegrip with parent master.\n\n        STANDARD OPTIONS\n\n            class, cursor, state, style, takefocus\n        ', lineno=1169, col_offset=-1), lineno=1169, col_offset=-1), Expr(Call(Attribute(Name('Widget', Load(), lineno=1170, col_offset=8), '__init__', Load(), lineno=1170, col_offset=8), [Name('self', Load(), lineno=1170, col_offset=24), Name('master', Load(), lineno=1170, col_offset=30), Str('ttk::sizegrip', lineno=1170, col_offset=38), Name('kw', Load(), lineno=1170, col_offset=55)], [], None, None, lineno=1170, col_offset=8), lineno=1170, col_offset=8)], [], lineno=1163, col_offset=4)], [], lineno=1159, col_offset=0), ClassDef('Treeview', [Name('Widget', Load(), lineno=1173, col_offset=15), Attribute(Name('Tkinter', Load(), lineno=1173, col_offset=23), 'XView', Load(), lineno=1173, col_offset=23), Attribute(Name('Tkinter', Load(), lineno=1173, col_offset=38), 'YView', Load(), lineno=1173, col_offset=38)], [Expr(Str('Ttk Treeview widget displays a hierarchical collection of items.\n\n    Each item has a textual label, an optional image, and an optional list\n    of data values. The data values are displayed in successive columns\n    after the tree label.', lineno=1178, col_offset=-1), lineno=1178, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=1180, col_offset=17), Name('master', Param(), lineno=1180, col_offset=23)], None, 'kw', [Name('None', Load(), lineno=1180, col_offset=30)]), [Expr(Str('Construct a Ttk Treeview with parent master.\n\n        STANDARD OPTIONS\n\n            class, cursor, style, takefocus, xscrollcommand,\n            yscrollcommand\n\n        WIDGET-SPECIFIC OPTIONS\n\n            columns, displaycolumns, height, padding, selectmode, show\n\n        ITEM OPTIONS\n\n            text, image, values, open, tags\n\n        TAG OPTIONS\n\n            foreground, background, font, image\n        ', lineno=1199, col_offset=-1), lineno=1199, col_offset=-1), Expr(Call(Attribute(Name('Widget', Load(), lineno=1200, col_offset=8), '__init__', Load(), lineno=1200, col_offset=8), [Name('self', Load(), lineno=1200, col_offset=24), Name('master', Load(), lineno=1200, col_offset=30), Str('ttk::treeview', lineno=1200, col_offset=38), Name('kw', Load(), lineno=1200, col_offset=55)], [], None, None, lineno=1200, col_offset=8), lineno=1200, col_offset=8)], [], lineno=1180, col_offset=4), FunctionDef('bbox', arguments([Name('self', Param(), lineno=1203, col_offset=13), Name('item', Param(), lineno=1203, col_offset=19), Name('column', Param(), lineno=1203, col_offset=25)], None, None, [Name('None', Load(), lineno=1203, col_offset=32)]), [Expr(Str("Returns the bounding box (relative to the treeview widget's\n        window) of the specified item in the form x y width height.\n\n        If column is specified, returns the bounding box of that cell.\n        If the item is not visible (i.e., if it is a descendant of a\n        closed item or is scrolled offscreen), returns an empty string.", lineno=1209, col_offset=-1), lineno=1209, col_offset=-1), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=1210, col_offset=15), 'tk', Load(), lineno=1210, col_offset=15), 'call', Load(), lineno=1210, col_offset=15), [Attribute(Name('self', Load(), lineno=1210, col_offset=28), '_w', Load(), lineno=1210, col_offset=28), Str('bbox', lineno=1210, col_offset=37), Name('item', Load(), lineno=1210, col_offset=45), Name('column', Load(), lineno=1210, col_offset=51)], [], None, None, lineno=1210, col_offset=15), lineno=1210, col_offset=8)], [], lineno=1203, col_offset=4), FunctionDef('get_children', arguments([Name('self', Param(), lineno=1213, col_offset=21), Name('item', Param(), lineno=1213, col_offset=27)], None, None, [Name('None', Load(), lineno=1213, col_offset=32)]), [Expr(Str('Returns a tuple of children belonging to item.\n\n        If item is not specified, returns root children.', lineno=1216, col_offset=-1), lineno=1216, col_offset=-1), Return(BoolOp(Or(), [Call(Attribute(Attribute(Name('self', Load(), lineno=1217, col_offset=15), 'tk', Load(), lineno=1217, col_offset=15), 'call', Load(), lineno=1217, col_offset=15), [Attribute(Name('self', Load(), lineno=1217, col_offset=28), '_w', Load(), lineno=1217, col_offset=28), Str('children', lineno=1217, col_offset=37), BoolOp(Or(), [Name('item', Load(), lineno=1217, col_offset=49), Str('', lineno=1217, col_offset=57)], lineno=1217, col_offset=49)], [], None, None, lineno=1217, col_offset=15), Tuple([], Load(), lineno=1217, col_offset=64)], lineno=1217, col_offset=15), lineno=1217, col_offset=8)], [], lineno=1213, col_offset=4), FunctionDef('set_children', arguments([Name('self', Param(), lineno=1220, col_offset=21), Name('item', Param(), lineno=1220, col_offset=27)], 'newchildren', None, []), [Expr(Str("Replaces item's child with newchildren.\n\n        Children present in item that are not present in newchildren\n        are detached from tree. No items in newchildren may be an\n        ancestor of item.", lineno=1225, col_offset=-1), lineno=1225, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1226, col_offset=8), 'tk', Load(), lineno=1226, col_offset=8), 'call', Load(), lineno=1226, col_offset=8), [Attribute(Name('self', Load(), lineno=1226, col_offset=21), '_w', Load(), lineno=1226, col_offset=21), Str('children', lineno=1226, col_offset=30), Name('item', Load(), lineno=1226, col_offset=42), Name('newchildren', Load(), lineno=1226, col_offset=48)], [], None, None, lineno=1226, col_offset=8), lineno=1226, col_offset=8)], [], lineno=1220, col_offset=4), FunctionDef('column', arguments([Name('self', Param(), lineno=1229, col_offset=15), Name('column', Param(), lineno=1229, col_offset=21), Name('option', Param(), lineno=1229, col_offset=29)], None, 'kw', [Name('None', Load(), lineno=1229, col_offset=36)]), [Expr(Str('Query or modify the options for the specified column.\n\n        If kw is not given, returns a dict of the column option values. If\n        option is specified then the value for that option is returned.\n        Otherwise, sets the options to the corresponding values.', lineno=1234, col_offset=-1), lineno=1234, col_offset=-1), If(Compare(Name('option', Load(), lineno=1235, col_offset=11), [IsNot()], [Name('None', Load(), lineno=1235, col_offset=25)], lineno=1235, col_offset=11), [Assign([Subscript(Name('kw', Load(), lineno=1236, col_offset=12), Index(Name('option', Load(), lineno=1236, col_offset=15)), Store(), lineno=1236, col_offset=12)], Name('None', Load(), lineno=1236, col_offset=25), lineno=1236, col_offset=12)], [], lineno=1235, col_offset=8), Return(Call(Name('_val_or_dict', Load(), lineno=1237, col_offset=15), [Name('kw', Load(), lineno=1237, col_offset=28), Attribute(Attribute(Name('self', Load(), lineno=1237, col_offset=32), 'tk', Load(), lineno=1237, col_offset=32), 'call', Load(), lineno=1237, col_offset=32), Attribute(Name('self', Load(), lineno=1237, col_offset=46), '_w', Load(), lineno=1237, col_offset=46), Str('column', lineno=1237, col_offset=55), Name('column', Load(), lineno=1237, col_offset=65)], [], None, None, lineno=1237, col_offset=15), lineno=1237, col_offset=8)], [], lineno=1229, col_offset=4), FunctionDef('delete', arguments([Name('self', Param(), lineno=1240, col_offset=15)], 'items', None, []), [Expr(Str('Delete all specified items and all their descendants. The root\n        item may not be deleted.', lineno=1242, col_offset=-1), lineno=1242, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1243, col_offset=8), 'tk', Load(), lineno=1243, col_offset=8), 'call', Load(), lineno=1243, col_offset=8), [Attribute(Name('self', Load(), lineno=1243, col_offset=21), '_w', Load(), lineno=1243, col_offset=21), Str('delete', lineno=1243, col_offset=30), Name('items', Load(), lineno=1243, col_offset=40)], [], None, None, lineno=1243, col_offset=8), lineno=1243, col_offset=8)], [], lineno=1240, col_offset=4), FunctionDef('detach', arguments([Name('self', Param(), lineno=1246, col_offset=15)], 'items', None, []), [Expr(Str('Unlinks all of the specified items from the tree.\n\n        The items and all of their descendants are still present, and may\n        be reinserted at another point in the tree, but will not be\n        displayed. The root item may not be detached.', lineno=1251, col_offset=-1), lineno=1251, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1252, col_offset=8), 'tk', Load(), lineno=1252, col_offset=8), 'call', Load(), lineno=1252, col_offset=8), [Attribute(Name('self', Load(), lineno=1252, col_offset=21), '_w', Load(), lineno=1252, col_offset=21), Str('detach', lineno=1252, col_offset=30), Name('items', Load(), lineno=1252, col_offset=40)], [], None, None, lineno=1252, col_offset=8), lineno=1252, col_offset=8)], [], lineno=1246, col_offset=4), FunctionDef('exists', arguments([Name('self', Param(), lineno=1255, col_offset=15), Name('item', Param(), lineno=1255, col_offset=21)], None, None, []), [Expr(Str('Returns True if the specified item is present in the three,\n        False otherwise.', lineno=1257, col_offset=-1), lineno=1257, col_offset=-1), Return(Call(Name('bool', Load(), lineno=1258, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=1258, col_offset=20), 'tk', Load(), lineno=1258, col_offset=20), 'call', Load(), lineno=1258, col_offset=20), [Attribute(Name('self', Load(), lineno=1258, col_offset=33), '_w', Load(), lineno=1258, col_offset=33), Str('exists', lineno=1258, col_offset=42), Name('item', Load(), lineno=1258, col_offset=52)], [], None, None, lineno=1258, col_offset=20)], [], None, None, lineno=1258, col_offset=15), lineno=1258, col_offset=8)], [], lineno=1255, col_offset=4), FunctionDef('focus', arguments([Name('self', Param(), lineno=1261, col_offset=14), Name('item', Param(), lineno=1261, col_offset=20)], None, None, [Name('None', Load(), lineno=1261, col_offset=25)]), [Expr(Str("If item is specified, sets the focus item to item. Otherwise,\n        returns the current focus item, or '' if there is none.", lineno=1263, col_offset=-1), lineno=1263, col_offset=-1), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=1264, col_offset=15), 'tk', Load(), lineno=1264, col_offset=15), 'call', Load(), lineno=1264, col_offset=15), [Attribute(Name('self', Load(), lineno=1264, col_offset=28), '_w', Load(), lineno=1264, col_offset=28), Str('focus', lineno=1264, col_offset=37), Name('item', Load(), lineno=1264, col_offset=46)], [], None, None, lineno=1264, col_offset=15), lineno=1264, col_offset=8)], [], lineno=1261, col_offset=4), FunctionDef('heading', arguments([Name('self', Param(), lineno=1267, col_offset=16), Name('column', Param(), lineno=1267, col_offset=22), Name('option', Param(), lineno=1267, col_offset=30)], None, 'kw', [Name('None', Load(), lineno=1267, col_offset=37)]), [Expr(Str('Query or modify the heading options for the specified column.\n\n        If kw is not given, returns a dict of the heading option values. If\n        option is specified then the value for that option is returned.\n        Otherwise, sets the options to the corresponding values.\n\n        Valid options/values are:\n            text: text\n                The text to display in the column heading\n            image: image_name\n                Specifies an image to display to the right of the column\n                heading\n            anchor: anchor\n                Specifies how the heading text should be aligned. One of\n                the standard Tk anchor values\n            command: callback\n                A callback to be invoked when the heading label is\n                pressed.\n\n        To configure the tree column heading, call this with column = "#0" ', lineno=1287, col_offset=-1), lineno=1287, col_offset=-1), Assign([Name('cmd', Store(), lineno=1288, col_offset=8)], Call(Attribute(Name('kw', Load(), lineno=1288, col_offset=14), 'get', Load(), lineno=1288, col_offset=14), [Str('command', lineno=1288, col_offset=21)], [], None, None, lineno=1288, col_offset=14), lineno=1288, col_offset=8), If(BoolOp(And(), [Name('cmd', Load(), lineno=1289, col_offset=11), UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=1289, col_offset=23), [Name('cmd', Load(), lineno=1289, col_offset=34), Name('basestring', Load(), lineno=1289, col_offset=39)], [], None, None, lineno=1289, col_offset=23), lineno=1289, col_offset=19)], lineno=1289, col_offset=11), [Assign([Subscript(Name('kw', Load(), lineno=1291, col_offset=12), Index(Str('command', lineno=1291, col_offset=15)), Store(), lineno=1291, col_offset=12)], Call(Attribute(Attribute(Name('self', Load(), lineno=1291, col_offset=28), 'master', Load(), lineno=1291, col_offset=28), 'register', Load(), lineno=1291, col_offset=28), [Name('cmd', Load(), lineno=1291, col_offset=49), Attribute(Name('self', Load(), lineno=1291, col_offset=54), '_substitute', Load(), lineno=1291, col_offset=54)], [], None, None, lineno=1291, col_offset=28), lineno=1291, col_offset=12)], [], lineno=1289, col_offset=8), If(Compare(Name('option', Load(), lineno=1293, col_offset=11), [IsNot()], [Name('None', Load(), lineno=1293, col_offset=25)], lineno=1293, col_offset=11), [Assign([Subscript(Name('kw', Load(), lineno=1294, col_offset=12), Index(Name('option', Load(), lineno=1294, col_offset=15)), Store(), lineno=1294, col_offset=12)], Name('None', Load(), lineno=1294, col_offset=25), lineno=1294, col_offset=12)], [], lineno=1293, col_offset=8), Return(Call(Name('_val_or_dict', Load(), lineno=1296, col_offset=15), [Name('kw', Load(), lineno=1296, col_offset=28), Attribute(Attribute(Name('self', Load(), lineno=1296, col_offset=32), 'tk', Load(), lineno=1296, col_offset=32), 'call', Load(), lineno=1296, col_offset=32), Attribute(Name('self', Load(), lineno=1296, col_offset=46), '_w', Load(), lineno=1296, col_offset=46), Str('heading', lineno=1296, col_offset=55), Name('column', Load(), lineno=1296, col_offset=66)], [], None, None, lineno=1296, col_offset=15), lineno=1296, col_offset=8)], [], lineno=1267, col_offset=4), FunctionDef('identify', arguments([Name('self', Param(), lineno=1299, col_offset=17), Name('component', Param(), lineno=1299, col_offset=23), Name('x', Param(), lineno=1299, col_offset=34), Name('y', Param(), lineno=1299, col_offset=37)], None, None, []), [Expr(Str('Returns a description of the specified component under the\n        point given by x and y, or the empty string if no such component\n        is present at that position.', lineno=1302, col_offset=-1), lineno=1302, col_offset=-1), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=1303, col_offset=15), 'tk', Load(), lineno=1303, col_offset=15), 'call', Load(), lineno=1303, col_offset=15), [Attribute(Name('self', Load(), lineno=1303, col_offset=28), '_w', Load(), lineno=1303, col_offset=28), Str('identify', lineno=1303, col_offset=37), Name('component', Load(), lineno=1303, col_offset=49), Name('x', Load(), lineno=1303, col_offset=60), Name('y', Load(), lineno=1303, col_offset=63)], [], None, None, lineno=1303, col_offset=15), lineno=1303, col_offset=8)], [], lineno=1299, col_offset=4), FunctionDef('identify_row', arguments([Name('self', Param(), lineno=1306, col_offset=21), Name('y', Param(), lineno=1306, col_offset=27)], None, None, []), [Expr(Str('Returns the item ID of the item at position y.', lineno=1307, col_offset=8), lineno=1307, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=1308, col_offset=15), 'identify', Load(), lineno=1308, col_offset=15), [Str('row', lineno=1308, col_offset=29), Num(0, lineno=1308, col_offset=36), Name('y', Load(), lineno=1308, col_offset=39)], [], None, None, lineno=1308, col_offset=15), lineno=1308, col_offset=8)], [], lineno=1306, col_offset=4), FunctionDef('identify_column', arguments([Name('self', Param(), lineno=1311, col_offset=24), Name('x', Param(), lineno=1311, col_offset=30)], None, None, []), [Expr(Str('Returns the data column identifier of the cell at position x.\n\n        The tree column has ID #0.', lineno=1314, col_offset=-1), lineno=1314, col_offset=-1), Return(Call(Attribute(Name('self', Load(), lineno=1315, col_offset=15), 'identify', Load(), lineno=1315, col_offset=15), [Str('column', lineno=1315, col_offset=29), Name('x', Load(), lineno=1315, col_offset=39), Num(0, lineno=1315, col_offset=42)], [], None, None, lineno=1315, col_offset=15), lineno=1315, col_offset=8)], [], lineno=1311, col_offset=4), FunctionDef('identify_region', arguments([Name('self', Param(), lineno=1318, col_offset=24), Name('x', Param(), lineno=1318, col_offset=30), Name('y', Param(), lineno=1318, col_offset=33)], None, None, []), [Expr(Str('Returns one of:\n\n        heading: Tree heading area.\n        separator: Space between two columns headings;\n        tree: The tree area.\n        cell: A data cell.\n\n        * Availability: Tk 8.6', lineno=1326, col_offset=-1), lineno=1326, col_offset=-1), Return(Call(Attribute(Name('self', Load(), lineno=1327, col_offset=15), 'identify', Load(), lineno=1327, col_offset=15), [Str('region', lineno=1327, col_offset=29), Name('x', Load(), lineno=1327, col_offset=39), Name('y', Load(), lineno=1327, col_offset=42)], [], None, None, lineno=1327, col_offset=15), lineno=1327, col_offset=8)], [], lineno=1318, col_offset=4), FunctionDef('identify_element', arguments([Name('self', Param(), lineno=1330, col_offset=25), Name('x', Param(), lineno=1330, col_offset=31), Name('y', Param(), lineno=1330, col_offset=34)], None, None, []), [Expr(Str('Returns the element at position x, y.\n\n        * Availability: Tk 8.6', lineno=1333, col_offset=-1), lineno=1333, col_offset=-1), Return(Call(Attribute(Name('self', Load(), lineno=1334, col_offset=15), 'identify', Load(), lineno=1334, col_offset=15), [Str('element', lineno=1334, col_offset=29), Name('x', Load(), lineno=1334, col_offset=40), Name('y', Load(), lineno=1334, col_offset=43)], [], None, None, lineno=1334, col_offset=15), lineno=1334, col_offset=8)], [], lineno=1330, col_offset=4), FunctionDef('index', arguments([Name('self', Param(), lineno=1337, col_offset=14), Name('item', Param(), lineno=1337, col_offset=20)], None, None, []), [Expr(Str("Returns the integer index of item within its parent's list\n        of children.", lineno=1339, col_offset=-1), lineno=1339, col_offset=-1), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=1340, col_offset=15), 'tk', Load(), lineno=1340, col_offset=15), 'call', Load(), lineno=1340, col_offset=15), [Attribute(Name('self', Load(), lineno=1340, col_offset=28), '_w', Load(), lineno=1340, col_offset=28), Str('index', lineno=1340, col_offset=37), Name('item', Load(), lineno=1340, col_offset=46)], [], None, None, lineno=1340, col_offset=15), lineno=1340, col_offset=8)], [], lineno=1337, col_offset=4), FunctionDef('insert', arguments([Name('self', Param(), lineno=1343, col_offset=15), Name('parent', Param(), lineno=1343, col_offset=21), Name('index', Param(), lineno=1343, col_offset=29), Name('iid', Param(), lineno=1343, col_offset=36)], None, 'kw', [Name('None', Load(), lineno=1343, col_offset=40)]), [Expr(Str("Creates a new item and return the item identifier of the newly\n        created item.\n\n        parent is the item ID of the parent item, or the empty string\n        to create a new top-level item. index is an integer, or the value\n        end, specifying where in the list of parent's children to insert\n        the new item. If index is less than or equal to zero, the new node\n        is inserted at the beginning, if index is greater than or equal to\n        the current number of children, it is inserted at the end. If iid\n        is specified, it is used as the item identifier, iid must not\n        already exist in the tree. Otherwise, a new unique identifier\n        is generated.", lineno=1355, col_offset=-1), lineno=1355, col_offset=-1), Assign([Name('opts', Store(), lineno=1356, col_offset=8)], Call(Name('_format_optdict', Load(), lineno=1356, col_offset=15), [Name('kw', Load(), lineno=1356, col_offset=31)], [], None, None, lineno=1356, col_offset=15), lineno=1356, col_offset=8), If(Name('iid', Load(), lineno=1357, col_offset=11), [Assign([Name('res', Store(), lineno=1358, col_offset=12)], Call(Attribute(Attribute(Name('self', Load(), lineno=1358, col_offset=18), 'tk', Load(), lineno=1358, col_offset=18), 'call', Load(), lineno=1358, col_offset=18), [Attribute(Name('self', Load(), lineno=1358, col_offset=31), '_w', Load(), lineno=1358, col_offset=31), Str('insert', lineno=1358, col_offset=40), Name('parent', Load(), lineno=1358, col_offset=50), Name('index', Load(), lineno=1358, col_offset=58), Str('-id', lineno=1359, col_offset=16), Name('iid', Load(), lineno=1359, col_offset=23)], [], Name('opts', Load(), lineno=1359, col_offset=29), None, lineno=1358, col_offset=18), lineno=1358, col_offset=12)], [Assign([Name('res', Store(), lineno=1361, col_offset=12)], Call(Attribute(Attribute(Name('self', Load(), lineno=1361, col_offset=18), 'tk', Load(), lineno=1361, col_offset=18), 'call', Load(), lineno=1361, col_offset=18), [Attribute(Name('self', Load(), lineno=1361, col_offset=31), '_w', Load(), lineno=1361, col_offset=31), Str('insert', lineno=1361, col_offset=40), Name('parent', Load(), lineno=1361, col_offset=50), Name('index', Load(), lineno=1361, col_offset=58)], [], Name('opts', Load(), lineno=1361, col_offset=66), None, lineno=1361, col_offset=18), lineno=1361, col_offset=12)], lineno=1357, col_offset=8), Return(Name('res', Load(), lineno=1363, col_offset=15), lineno=1363, col_offset=8)], [], lineno=1343, col_offset=4), FunctionDef('item', arguments([Name('self', Param(), lineno=1366, col_offset=13), Name('item', Param(), lineno=1366, col_offset=19), Name('option', Param(), lineno=1366, col_offset=25)], None, 'kw', [Name('None', Load(), lineno=1366, col_offset=32)]), [Expr(Str('Query or modify the options for the specified item.\n\n        If no options are given, a dict with options/values for the item\n        is returned. If option is specified then the value for that option\n        is returned. Otherwise, sets the options to the corresponding\n        values as given by kw.', lineno=1372, col_offset=-1), lineno=1372, col_offset=-1), If(Compare(Name('option', Load(), lineno=1373, col_offset=11), [IsNot()], [Name('None', Load(), lineno=1373, col_offset=25)], lineno=1373, col_offset=11), [Assign([Subscript(Name('kw', Load(), lineno=1374, col_offset=12), Index(Name('option', Load(), lineno=1374, col_offset=15)), Store(), lineno=1374, col_offset=12)], Name('None', Load(), lineno=1374, col_offset=25), lineno=1374, col_offset=12)], [], lineno=1373, col_offset=8), Return(Call(Name('_val_or_dict', Load(), lineno=1375, col_offset=15), [Name('kw', Load(), lineno=1375, col_offset=28), Attribute(Attribute(Name('self', Load(), lineno=1375, col_offset=32), 'tk', Load(), lineno=1375, col_offset=32), 'call', Load(), lineno=1375, col_offset=32), Attribute(Name('self', Load(), lineno=1375, col_offset=46), '_w', Load(), lineno=1375, col_offset=46), Str('item', lineno=1375, col_offset=55), Name('item', Load(), lineno=1375, col_offset=63)], [], None, None, lineno=1375, col_offset=15), lineno=1375, col_offset=8)], [], lineno=1366, col_offset=4), FunctionDef('move', arguments([Name('self', Param(), lineno=1378, col_offset=13), Name('item', Param(), lineno=1378, col_offset=19), Name('parent', Param(), lineno=1378, col_offset=25), Name('index', Param(), lineno=1378, col_offset=33)], None, None, []), [Expr(Str("Moves item to position index in parent's list of children.\n\n        It is illegal to move an item under one of its descendants. If\n        index is less than or equal to zero, item is moved to the\n        beginning, if greater than or equal to the number of children,\n        it is moved to the end. If item was detached it is reattached.", lineno=1384, col_offset=-1), lineno=1384, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1385, col_offset=8), 'tk', Load(), lineno=1385, col_offset=8), 'call', Load(), lineno=1385, col_offset=8), [Attribute(Name('self', Load(), lineno=1385, col_offset=21), '_w', Load(), lineno=1385, col_offset=21), Str('move', lineno=1385, col_offset=30), Name('item', Load(), lineno=1385, col_offset=38), Name('parent', Load(), lineno=1385, col_offset=44), Name('index', Load(), lineno=1385, col_offset=52)], [], None, None, lineno=1385, col_offset=8), lineno=1385, col_offset=8)], [], lineno=1378, col_offset=4), Assign([Name('reattach', Store(), lineno=1387, col_offset=4)], Name('move', Load(), lineno=1387, col_offset=15), lineno=1387, col_offset=4), FunctionDef('next', arguments([Name('self', Param(), lineno=1390, col_offset=13), Name('item', Param(), lineno=1390, col_offset=19)], None, None, []), [Expr(Str("Returns the identifier of item's next sibling, or '' if item\n        is the last child of its parent.", lineno=1392, col_offset=-1), lineno=1392, col_offset=-1), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=1393, col_offset=15), 'tk', Load(), lineno=1393, col_offset=15), 'call', Load(), lineno=1393, col_offset=15), [Attribute(Name('self', Load(), lineno=1393, col_offset=28), '_w', Load(), lineno=1393, col_offset=28), Str('next', lineno=1393, col_offset=37), Name('item', Load(), lineno=1393, col_offset=45)], [], None, None, lineno=1393, col_offset=15), lineno=1393, col_offset=8)], [], lineno=1390, col_offset=4), FunctionDef('parent', arguments([Name('self', Param(), lineno=1396, col_offset=15), Name('item', Param(), lineno=1396, col_offset=21)], None, None, []), [Expr(Str("Returns the ID of the parent of item, or '' if item is at the\n        top level of the hierarchy.", lineno=1398, col_offset=-1), lineno=1398, col_offset=-1), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=1399, col_offset=15), 'tk', Load(), lineno=1399, col_offset=15), 'call', Load(), lineno=1399, col_offset=15), [Attribute(Name('self', Load(), lineno=1399, col_offset=28), '_w', Load(), lineno=1399, col_offset=28), Str('parent', lineno=1399, col_offset=37), Name('item', Load(), lineno=1399, col_offset=47)], [], None, None, lineno=1399, col_offset=15), lineno=1399, col_offset=8)], [], lineno=1396, col_offset=4), FunctionDef('prev', arguments([Name('self', Param(), lineno=1402, col_offset=13), Name('item', Param(), lineno=1402, col_offset=19)], None, None, []), [Expr(Str("Returns the identifier of item's previous sibling, or '' if\n        item is the first child of its parent.", lineno=1404, col_offset=-1), lineno=1404, col_offset=-1), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=1405, col_offset=15), 'tk', Load(), lineno=1405, col_offset=15), 'call', Load(), lineno=1405, col_offset=15), [Attribute(Name('self', Load(), lineno=1405, col_offset=28), '_w', Load(), lineno=1405, col_offset=28), Str('prev', lineno=1405, col_offset=37), Name('item', Load(), lineno=1405, col_offset=45)], [], None, None, lineno=1405, col_offset=15), lineno=1405, col_offset=8)], [], lineno=1402, col_offset=4), FunctionDef('see', arguments([Name('self', Param(), lineno=1408, col_offset=12), Name('item', Param(), lineno=1408, col_offset=18)], None, None, []), [Expr(Str("Ensure that item is visible.\n\n        Sets all of item's ancestors open option to True, and scrolls\n        the widget if necessary so that item is within the visible\n        portion of the tree.", lineno=1413, col_offset=-1), lineno=1413, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1414, col_offset=8), 'tk', Load(), lineno=1414, col_offset=8), 'call', Load(), lineno=1414, col_offset=8), [Attribute(Name('self', Load(), lineno=1414, col_offset=21), '_w', Load(), lineno=1414, col_offset=21), Str('see', lineno=1414, col_offset=30), Name('item', Load(), lineno=1414, col_offset=37)], [], None, None, lineno=1414, col_offset=8), lineno=1414, col_offset=8)], [], lineno=1408, col_offset=4), FunctionDef('selection', arguments([Name('self', Param(), lineno=1417, col_offset=18), Name('selop', Param(), lineno=1417, col_offset=24), Name('items', Param(), lineno=1417, col_offset=36)], None, None, [Name('None', Load(), lineno=1417, col_offset=30), Name('None', Load(), lineno=1417, col_offset=42)]), [Expr(Str('If selop is not specified, returns selected items.', lineno=1418, col_offset=8), lineno=1418, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=1419, col_offset=15), 'tk', Load(), lineno=1419, col_offset=15), 'call', Load(), lineno=1419, col_offset=15), [Attribute(Name('self', Load(), lineno=1419, col_offset=28), '_w', Load(), lineno=1419, col_offset=28), Str('selection', lineno=1419, col_offset=37), Name('selop', Load(), lineno=1419, col_offset=50), Name('items', Load(), lineno=1419, col_offset=57)], [], None, None, lineno=1419, col_offset=15), lineno=1419, col_offset=8)], [], lineno=1417, col_offset=4), FunctionDef('selection_set', arguments([Name('self', Param(), lineno=1422, col_offset=22), Name('items', Param(), lineno=1422, col_offset=28)], None, None, []), [Expr(Str('items becomes the new selection.', lineno=1423, col_offset=8), lineno=1423, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=1424, col_offset=8), 'selection', Load(), lineno=1424, col_offset=8), [Str('set', lineno=1424, col_offset=23), Name('items', Load(), lineno=1424, col_offset=30)], [], None, None, lineno=1424, col_offset=8), lineno=1424, col_offset=8)], [], lineno=1422, col_offset=4), FunctionDef('selection_add', arguments([Name('self', Param(), lineno=1427, col_offset=22), Name('items', Param(), lineno=1427, col_offset=28)], None, None, []), [Expr(Str('Add items to the selection.', lineno=1428, col_offset=8), lineno=1428, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=1429, col_offset=8), 'selection', Load(), lineno=1429, col_offset=8), [Str('add', lineno=1429, col_offset=23), Name('items', Load(), lineno=1429, col_offset=30)], [], None, None, lineno=1429, col_offset=8), lineno=1429, col_offset=8)], [], lineno=1427, col_offset=4), FunctionDef('selection_remove', arguments([Name('self', Param(), lineno=1432, col_offset=25), Name('items', Param(), lineno=1432, col_offset=31)], None, None, []), [Expr(Str('Remove items from the selection.', lineno=1433, col_offset=8), lineno=1433, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=1434, col_offset=8), 'selection', Load(), lineno=1434, col_offset=8), [Str('remove', lineno=1434, col_offset=23), Name('items', Load(), lineno=1434, col_offset=33)], [], None, None, lineno=1434, col_offset=8), lineno=1434, col_offset=8)], [], lineno=1432, col_offset=4), FunctionDef('selection_toggle', arguments([Name('self', Param(), lineno=1437, col_offset=25), Name('items', Param(), lineno=1437, col_offset=31)], None, None, []), [Expr(Str('Toggle the selection state of each item in items.', lineno=1438, col_offset=8), lineno=1438, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=1439, col_offset=8), 'selection', Load(), lineno=1439, col_offset=8), [Str('toggle', lineno=1439, col_offset=23), Name('items', Load(), lineno=1439, col_offset=33)], [], None, None, lineno=1439, col_offset=8), lineno=1439, col_offset=8)], [], lineno=1437, col_offset=4), FunctionDef('set', arguments([Name('self', Param(), lineno=1442, col_offset=12), Name('item', Param(), lineno=1442, col_offset=18), Name('column', Param(), lineno=1442, col_offset=24), Name('value', Param(), lineno=1442, col_offset=37)], None, None, [Name('None', Load(), lineno=1442, col_offset=31), Name('None', Load(), lineno=1442, col_offset=43)]), [Expr(Str('With one argument, returns a dictionary of column/value pairs\n        for the specified item. With two arguments, returns the current\n        value of the specified column. With three arguments, sets the\n        value of given column in given item to the specified value.', lineno=1446, col_offset=-1), lineno=1446, col_offset=-1), Assign([Name('res', Store(), lineno=1447, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=1447, col_offset=14), 'tk', Load(), lineno=1447, col_offset=14), 'call', Load(), lineno=1447, col_offset=14), [Attribute(Name('self', Load(), lineno=1447, col_offset=27), '_w', Load(), lineno=1447, col_offset=27), Str('set', lineno=1447, col_offset=36), Name('item', Load(), lineno=1447, col_offset=43), Name('column', Load(), lineno=1447, col_offset=49), Name('value', Load(), lineno=1447, col_offset=57)], [], None, None, lineno=1447, col_offset=14), lineno=1447, col_offset=8), If(BoolOp(And(), [Compare(Name('column', Load(), lineno=1448, col_offset=11), [Is()], [Name('None', Load(), lineno=1448, col_offset=21)], lineno=1448, col_offset=11), Compare(Name('value', Load(), lineno=1448, col_offset=30), [Is()], [Name('None', Load(), lineno=1448, col_offset=39)], lineno=1448, col_offset=30)], lineno=1448, col_offset=11), [Return(Call(Name('_dict_from_tcltuple', Load(), lineno=1449, col_offset=19), [Name('res', Load(), lineno=1449, col_offset=39), Name('False', Load(), lineno=1449, col_offset=44)], [], None, None, lineno=1449, col_offset=19), lineno=1449, col_offset=12)], [Return(Name('res', Load(), lineno=1451, col_offset=19), lineno=1451, col_offset=12)], lineno=1448, col_offset=8)], [], lineno=1442, col_offset=4), FunctionDef('tag_bind', arguments([Name('self', Param(), lineno=1454, col_offset=17), Name('tagname', Param(), lineno=1454, col_offset=23), Name('sequence', Param(), lineno=1454, col_offset=32), Name('callback', Param(), lineno=1454, col_offset=47)], None, None, [Name('None', Load(), lineno=1454, col_offset=41), Name('None', Load(), lineno=1454, col_offset=56)]), [Expr(Str("Bind a callback for the given event sequence to the tag tagname.\n        When an event is delivered to an item, the callbacks for each\n        of the item's tags option are called.", lineno=1457, col_offset=-1), lineno=1457, col_offset=-1), Expr(Call(Attribute(Name('self', Load(), lineno=1458, col_offset=8), '_bind', Load(), lineno=1458, col_offset=8), [Tuple([Attribute(Name('self', Load(), lineno=1458, col_offset=20), '_w', Load(), lineno=1458, col_offset=20), Str('tag', lineno=1458, col_offset=29), Str('bind', lineno=1458, col_offset=36), Name('tagname', Load(), lineno=1458, col_offset=44)], Load(), lineno=1458, col_offset=20), Name('sequence', Load(), lineno=1458, col_offset=54), Name('callback', Load(), lineno=1458, col_offset=64)], [keyword('add', Num(0, lineno=1458, col_offset=78))], None, None, lineno=1458, col_offset=8), lineno=1458, col_offset=8)], [], lineno=1454, col_offset=4), FunctionDef('tag_configure', arguments([Name('self', Param(), lineno=1461, col_offset=22), Name('tagname', Param(), lineno=1461, col_offset=28), Name('option', Param(), lineno=1461, col_offset=37)], None, 'kw', [Name('None', Load(), lineno=1461, col_offset=44)]), [Expr(Str('Query or modify the options for the specified tagname.\n\n        If kw is not given, returns a dict of the option settings for tagname.\n        If option is specified, returns the value for that option for the\n        specified tagname. Otherwise, sets the options to the corresponding\n        values for the given tagname.', lineno=1467, col_offset=-1), lineno=1467, col_offset=-1), If(Compare(Name('option', Load(), lineno=1468, col_offset=11), [IsNot()], [Name('None', Load(), lineno=1468, col_offset=25)], lineno=1468, col_offset=11), [Assign([Subscript(Name('kw', Load(), lineno=1469, col_offset=12), Index(Name('option', Load(), lineno=1469, col_offset=15)), Store(), lineno=1469, col_offset=12)], Name('None', Load(), lineno=1469, col_offset=25), lineno=1469, col_offset=12)], [], lineno=1468, col_offset=8), Return(Call(Name('_val_or_dict', Load(), lineno=1470, col_offset=15), [Name('kw', Load(), lineno=1470, col_offset=28), Attribute(Attribute(Name('self', Load(), lineno=1470, col_offset=32), 'tk', Load(), lineno=1470, col_offset=32), 'call', Load(), lineno=1470, col_offset=32), Attribute(Name('self', Load(), lineno=1470, col_offset=46), '_w', Load(), lineno=1470, col_offset=46), Str('tag', lineno=1470, col_offset=55), Str('configure', lineno=1470, col_offset=62), Name('tagname', Load(), lineno=1471, col_offset=12)], [], None, None, lineno=1470, col_offset=15), lineno=1470, col_offset=8)], [], lineno=1461, col_offset=4), FunctionDef('tag_has', arguments([Name('self', Param(), lineno=1474, col_offset=16), Name('tagname', Param(), lineno=1474, col_offset=22), Name('item', Param(), lineno=1474, col_offset=31)], None, None, [Name('None', Load(), lineno=1474, col_offset=36)]), [Expr(Str('If item is specified, returns 1 or 0 depending on whether the\n        specified item has the given tagname. Otherwise, returns a list of\n        all items which have the specified tag.\n\n        * Availability: Tk 8.6', lineno=1479, col_offset=-1), lineno=1479, col_offset=-1), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=1480, col_offset=15), 'tk', Load(), lineno=1480, col_offset=15), 'call', Load(), lineno=1480, col_offset=15), [Attribute(Name('self', Load(), lineno=1480, col_offset=28), '_w', Load(), lineno=1480, col_offset=28), Str('tag', lineno=1480, col_offset=37), Str('has', lineno=1480, col_offset=44), Name('tagname', Load(), lineno=1480, col_offset=51), Name('item', Load(), lineno=1480, col_offset=60)], [], None, None, lineno=1480, col_offset=15), lineno=1480, col_offset=8)], [], lineno=1474, col_offset=4)], [], lineno=1173, col_offset=0), ClassDef('LabeledScale', [Name('Frame', Load(), lineno=1485, col_offset=19), Name('object', Load(), lineno=1485, col_offset=26)], [Expr(Str('A Ttk Scale widget with a Ttk Label widget indicating its\n    current value.\n\n    The Ttk Scale can be accessed through instance.scale, and Ttk Label\n    can be accessed through instance.label', lineno=1490, col_offset=-1), lineno=1490, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=1492, col_offset=17), Name('master', Param(), lineno=1492, col_offset=23), Name('variable', Param(), lineno=1492, col_offset=36), Name('from_', Param(), lineno=1492, col_offset=51), Name('to', Param(), lineno=1492, col_offset=60)], None, 'kw', [Name('None', Load(), lineno=1492, col_offset=30), Name('None', Load(), lineno=1492, col_offset=45), Num(0, lineno=1492, col_offset=57), Num(10, lineno=1492, col_offset=63)]), [Expr(Str("Construct an horizontal LabeledScale with parent master, a\n        variable to be associated with the Ttk Scale widget and its range.\n        If variable is not specified, a Tkinter.IntVar is created.\n\n        WIDGET-SPECIFIC OPTIONS\n\n            compound: 'top' or 'bottom'\n                Specifies how to display the label relative to the scale.\n                Defaults to 'top'.\n        ", lineno=1502, col_offset=-1), lineno=1502, col_offset=-1), Assign([Attribute(Name('self', Load(), lineno=1503, col_offset=8), '_label_top', Store(), lineno=1503, col_offset=8)], Compare(Call(Attribute(Name('kw', Load(), lineno=1503, col_offset=26), 'pop', Load(), lineno=1503, col_offset=26), [Str('compound', lineno=1503, col_offset=33), Str('top', lineno=1503, col_offset=45)], [], None, None, lineno=1503, col_offset=26), [Eq()], [Str('top', lineno=1503, col_offset=55)], lineno=1503, col_offset=26), lineno=1503, col_offset=8), Expr(Call(Attribute(Name('Frame', Load(), lineno=1505, col_offset=8), '__init__', Load(), lineno=1505, col_offset=8), [Name('self', Load(), lineno=1505, col_offset=23), Name('master', Load(), lineno=1505, col_offset=29)], [], None, Name('kw', Load(), lineno=1505, col_offset=39), lineno=1505, col_offset=8), lineno=1505, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1506, col_offset=8), '_variable', Store(), lineno=1506, col_offset=8)], BoolOp(Or(), [Name('variable', Load(), lineno=1506, col_offset=25), Call(Attribute(Name('Tkinter', Load(), lineno=1506, col_offset=37), 'IntVar', Load(), lineno=1506, col_offset=37), [Name('master', Load(), lineno=1506, col_offset=52)], [], None, None, lineno=1506, col_offset=37)], lineno=1506, col_offset=25), lineno=1506, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1507, col_offset=8), '_variable', Load(), lineno=1507, col_offset=8), 'set', Load(), lineno=1507, col_offset=8), [Name('from_', Load(), lineno=1507, col_offset=27)], [], None, None, lineno=1507, col_offset=8), lineno=1507, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1508, col_offset=8), '_last_valid', Store(), lineno=1508, col_offset=8)], Name('from_', Load(), lineno=1508, col_offset=27), lineno=1508, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1510, col_offset=8), 'label', Store(), lineno=1510, col_offset=8)], Call(Name('Label', Load(), lineno=1510, col_offset=21), [Name('self', Load(), lineno=1510, col_offset=27)], [], None, None, lineno=1510, col_offset=21), lineno=1510, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1511, col_offset=8), 'scale', Store(), lineno=1511, col_offset=8)], Call(Name('Scale', Load(), lineno=1511, col_offset=21), [Name('self', Load(), lineno=1511, col_offset=27)], [keyword('variable', Attribute(Name('self', Load(), lineno=1511, col_offset=42), '_variable', Load(), lineno=1511, col_offset=42)), keyword('from_', Name('from_', Load(), lineno=1511, col_offset=64)), keyword('to', Name('to', Load(), lineno=1511, col_offset=74))], None, None, lineno=1511, col_offset=21), lineno=1511, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1512, col_offset=8), 'scale', Load(), lineno=1512, col_offset=8), 'bind', Load(), lineno=1512, col_offset=8), [Str('<<RangeChanged>>', lineno=1512, col_offset=24), Attribute(Name('self', Load(), lineno=1512, col_offset=44), '_adjust', Load(), lineno=1512, col_offset=44)], [], None, None, lineno=1512, col_offset=8), lineno=1512, col_offset=8), Assign([Name('scale_side', Store(), lineno=1515, col_offset=8)], IfExp(Attribute(Name('self', Load(), lineno=1515, col_offset=33), '_label_top', Load(), lineno=1515, col_offset=33), Str('bottom', lineno=1515, col_offset=21), Str('top', lineno=1515, col_offset=54), lineno=1515, col_offset=21), lineno=1515, col_offset=8), Assign([Name('label_side', Store(), lineno=1516, col_offset=8)], IfExp(Compare(Name('scale_side', Load(), lineno=1516, col_offset=30), [Eq()], [Str('bottom', lineno=1516, col_offset=44)], lineno=1516, col_offset=30), Str('top', lineno=1516, col_offset=21), Str('bottom', lineno=1516, col_offset=58), lineno=1516, col_offset=21), lineno=1516, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1517, col_offset=8), 'scale', Load(), lineno=1517, col_offset=8), 'pack', Load(), lineno=1517, col_offset=8), [], [keyword('side', Name('scale_side', Load(), lineno=1517, col_offset=29)), keyword('fill', Str('x', lineno=1517, col_offset=46))], None, None, lineno=1517, col_offset=8), lineno=1517, col_offset=8), Assign([Name('tmp', Store(), lineno=1518, col_offset=8)], Call(Attribute(Call(Name('Label', Load(), lineno=1518, col_offset=14), [Name('self', Load(), lineno=1518, col_offset=20)], [], None, None, lineno=1518, col_offset=14), 'pack', Load(), lineno=1518, col_offset=14), [], [keyword('side', Name('label_side', Load(), lineno=1518, col_offset=36))], None, None, lineno=1518, col_offset=14), lineno=1518, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1519, col_offset=8), 'label', Load(), lineno=1519, col_offset=8), 'place', Load(), lineno=1519, col_offset=8), [], [keyword('anchor', IfExp(Compare(Name('label_side', Load(), lineno=1519, col_offset=39), [Eq()], [Str('top', lineno=1519, col_offset=53)], lineno=1519, col_offset=39), Str('n', lineno=1519, col_offset=32), Str('s', lineno=1519, col_offset=64), lineno=1519, col_offset=32))], None, None, lineno=1519, col_offset=8), lineno=1519, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1522, col_offset=8), '__tracecb', Store(), lineno=1522, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=1522, col_offset=25), '_variable', Load(), lineno=1522, col_offset=25), 'trace_variable', Load(), lineno=1522, col_offset=25), [Str('w', lineno=1522, col_offset=55), Attribute(Name('self', Load(), lineno=1522, col_offset=60), '_adjust', Load(), lineno=1522, col_offset=60)], [], None, None, lineno=1522, col_offset=25), lineno=1522, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=1523, col_offset=8), 'bind', Load(), lineno=1523, col_offset=8), [Str('<Configure>', lineno=1523, col_offset=18), Attribute(Name('self', Load(), lineno=1523, col_offset=33), '_adjust', Load(), lineno=1523, col_offset=33)], [], None, None, lineno=1523, col_offset=8), lineno=1523, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=1524, col_offset=8), 'bind', Load(), lineno=1524, col_offset=8), [Str('<Map>', lineno=1524, col_offset=18), Attribute(Name('self', Load(), lineno=1524, col_offset=27), '_adjust', Load(), lineno=1524, col_offset=27)], [], None, None, lineno=1524, col_offset=8), lineno=1524, col_offset=8)], [], lineno=1492, col_offset=4), FunctionDef('destroy', arguments([Name('self', Param(), lineno=1527, col_offset=16)], None, None, []), [Expr(Str('Destroy this widget and possibly its associated variable.', lineno=1528, col_offset=8), lineno=1528, col_offset=8), TryExcept([Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1530, col_offset=12), '_variable', Load(), lineno=1530, col_offset=12), 'trace_vdelete', Load(), lineno=1530, col_offset=12), [Str('w', lineno=1530, col_offset=41), Attribute(Name('self', Load(), lineno=1530, col_offset=46), '__tracecb', Load(), lineno=1530, col_offset=46)], [], None, None, lineno=1530, col_offset=12), lineno=1530, col_offset=12)], [ExceptHandler(Name('AttributeError', Load(), lineno=1531, col_offset=15), None, [Pass( lineno=1533, col_offset=12)], lineno=1531, col_offset=8)], [Delete([Attribute(Name('self', Load(), lineno=1535, col_offset=16), '_variable', Del(), lineno=1535, col_offset=16)], lineno=1535, col_offset=12), Expr(Call(Attribute(Name('Frame', Load(), lineno=1536, col_offset=12), 'destroy', Load(), lineno=1536, col_offset=12), [Name('self', Load(), lineno=1536, col_offset=26)], [], None, None, lineno=1536, col_offset=12), lineno=1536, col_offset=12)], lineno=1529, col_offset=8)], [], lineno=1527, col_offset=4), FunctionDef('_adjust', arguments([Name('self', Param(), lineno=1539, col_offset=16)], 'args', None, []), [Expr(Str('Adjust the label position according to the scale.', lineno=1540, col_offset=8), lineno=1540, col_offset=8), FunctionDef('adjust_label', arguments([], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=1542, col_offset=12), 'update_idletasks', Load(), lineno=1542, col_offset=12), [], [], None, None, lineno=1542, col_offset=12), lineno=1542, col_offset=12), Assign([Tuple([Name('x', Store(), lineno=1544, col_offset=12), Name('y', Store(), lineno=1544, col_offset=15)], Store(), lineno=1544, col_offset=12)], Call(Attribute(Attribute(Name('self', Load(), lineno=1544, col_offset=19), 'scale', Load(), lineno=1544, col_offset=19), 'coords', Load(), lineno=1544, col_offset=19), [], [], None, None, lineno=1544, col_offset=19), lineno=1544, col_offset=12), If(Attribute(Name('self', Load(), lineno=1545, col_offset=15), '_label_top', Load(), lineno=1545, col_offset=15), [Assign([Name('y', Store(), lineno=1546, col_offset=16)], BinOp(Call(Attribute(Attribute(Name('self', Load(), lineno=1546, col_offset=20), 'scale', Load(), lineno=1546, col_offset=20), 'winfo_y', Load(), lineno=1546, col_offset=20), [], [], None, None, lineno=1546, col_offset=20), Sub(), Call(Attribute(Attribute(Name('self', Load(), lineno=1546, col_offset=43), 'label', Load(), lineno=1546, col_offset=43), 'winfo_reqheight', Load(), lineno=1546, col_offset=43), [], [], None, None, lineno=1546, col_offset=43), lineno=1546, col_offset=20), lineno=1546, col_offset=16)], [Assign([Name('y', Store(), lineno=1548, col_offset=16)], BinOp(Call(Attribute(Attribute(Name('self', Load(), lineno=1548, col_offset=20), 'scale', Load(), lineno=1548, col_offset=20), 'winfo_reqheight', Load(), lineno=1548, col_offset=20), [], [], None, None, lineno=1548, col_offset=20), Add(), Call(Attribute(Attribute(Name('self', Load(), lineno=1548, col_offset=51), 'label', Load(), lineno=1548, col_offset=51), 'winfo_reqheight', Load(), lineno=1548, col_offset=51), [], [], None, None, lineno=1548, col_offset=51), lineno=1548, col_offset=20), lineno=1548, col_offset=16)], lineno=1545, col_offset=12), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1550, col_offset=12), 'label', Load(), lineno=1550, col_offset=12), 'place_configure', Load(), lineno=1550, col_offset=12), [], [keyword('x', Name('x', Load(), lineno=1550, col_offset=41)), keyword('y', Name('y', Load(), lineno=1550, col_offset=46))], None, None, lineno=1550, col_offset=12), lineno=1550, col_offset=12)], [], lineno=1541, col_offset=8), Assign([Tuple([Name('from_', Store(), lineno=1552, col_offset=8), Name('to', Store(), lineno=1552, col_offset=15)], Store(), lineno=1552, col_offset=8)], Tuple([Subscript(Attribute(Name('self', Load(), lineno=1552, col_offset=20), 'scale', Load(), lineno=1552, col_offset=20), Index(Str('from', lineno=1552, col_offset=31)), Load(), lineno=1552, col_offset=20), Subscript(Attribute(Name('self', Load(), lineno=1552, col_offset=40), 'scale', Load(), lineno=1552, col_offset=40), Index(Str('to', lineno=1552, col_offset=51)), Load(), lineno=1552, col_offset=40)], Load(), lineno=1552, col_offset=20), lineno=1552, col_offset=8), If(Compare(Name('to', Load(), lineno=1553, col_offset=11), [Lt()], [Name('from_', Load(), lineno=1553, col_offset=16)], lineno=1553, col_offset=11), [Assign([Tuple([Name('from_', Store(), lineno=1554, col_offset=12), Name('to', Store(), lineno=1554, col_offset=19)], Store(), lineno=1554, col_offset=12)], Tuple([Name('to', Load(), lineno=1554, col_offset=24), Name('from_', Load(), lineno=1554, col_offset=28)], Load(), lineno=1554, col_offset=24), lineno=1554, col_offset=12)], [], lineno=1553, col_offset=8), Assign([Name('newval', Store(), lineno=1555, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=1555, col_offset=17), '_variable', Load(), lineno=1555, col_offset=17), 'get', Load(), lineno=1555, col_offset=17), [], [], None, None, lineno=1555, col_offset=17), lineno=1555, col_offset=8), If(UnaryOp(Not(), Compare(Name('from_', Load(), lineno=1556, col_offset=15), [LtE(), LtE()], [Name('newval', Load(), lineno=1556, col_offset=24), Name('to', Load(), lineno=1556, col_offset=34)], lineno=1556, col_offset=15), lineno=1556, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=1558, col_offset=12), 'value', Store(), lineno=1558, col_offset=12)], Attribute(Name('self', Load(), lineno=1558, col_offset=25), '_last_valid', Load(), lineno=1558, col_offset=25), lineno=1558, col_offset=12), Return(None, lineno=1559, col_offset=12)], [], lineno=1556, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1561, col_offset=8), '_last_valid', Store(), lineno=1561, col_offset=8)], Name('newval', Load(), lineno=1561, col_offset=27), lineno=1561, col_offset=8), Assign([Subscript(Attribute(Name('self', Load(), lineno=1562, col_offset=8), 'label', Load(), lineno=1562, col_offset=8), Index(Str('text', lineno=1562, col_offset=19)), Store(), lineno=1562, col_offset=8)], Name('newval', Load(), lineno=1562, col_offset=29), lineno=1562, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=1563, col_offset=8), 'after_idle', Load(), lineno=1563, col_offset=8), [Name('adjust_label', Load(), lineno=1563, col_offset=24)], [], None, None, lineno=1563, col_offset=8), lineno=1563, col_offset=8)], [], lineno=1539, col_offset=4), FunctionDef('_get_value', arguments([Name('self', Param(), lineno=1566, col_offset=19)], None, None, []), [Expr(Str('Return current scale value.', lineno=1567, col_offset=8), lineno=1567, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=1568, col_offset=15), '_variable', Load(), lineno=1568, col_offset=15), 'get', Load(), lineno=1568, col_offset=15), [], [], None, None, lineno=1568, col_offset=15), lineno=1568, col_offset=8)], [], lineno=1566, col_offset=4), FunctionDef('_set_value', arguments([Name('self', Param(), lineno=1571, col_offset=19), Name('val', Param(), lineno=1571, col_offset=25)], None, None, []), [Expr(Str('Set new scale value.', lineno=1572, col_offset=8), lineno=1572, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1573, col_offset=8), '_variable', Load(), lineno=1573, col_offset=8), 'set', Load(), lineno=1573, col_offset=8), [Name('val', Load(), lineno=1573, col_offset=27)], [], None, None, lineno=1573, col_offset=8), lineno=1573, col_offset=8)], [], lineno=1571, col_offset=4), Assign([Name('value', Store(), lineno=1576, col_offset=4)], Call(Name('property', Load(), lineno=1576, col_offset=12), [Name('_get_value', Load(), lineno=1576, col_offset=21), Name('_set_value', Load(), lineno=1576, col_offset=33)], [], None, None, lineno=1576, col_offset=12), lineno=1576, col_offset=4)], [], lineno=1485, col_offset=0), ClassDef('OptionMenu', [Name('Menubutton', Load(), lineno=1579, col_offset=17)], [Expr(Str("Themed OptionMenu, based after Tkinter's OptionMenu, which allows\n    the user to select a value from a menu.", lineno=1581, col_offset=-1), lineno=1581, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=1583, col_offset=17), Name('master', Param(), lineno=1583, col_offset=23), Name('variable', Param(), lineno=1583, col_offset=31), Name('default', Param(), lineno=1583, col_offset=41)], 'values', 'kwargs', [Name('None', Load(), lineno=1583, col_offset=49)]), [Expr(Str("Construct a themed OptionMenu widget with master as the parent,\n        the resource textvariable set to variable, the initially selected\n        value specified by the default parameter, the menu values given by\n        *values and additional keywords.\n\n        WIDGET-SPECIFIC OPTIONS\n\n            style: stylename\n                Menubutton style.\n            direction: 'above', 'below', 'left', 'right', or 'flush'\n                Menubutton direction.\n            command: callback\n                A callback that will be invoked after selecting an item.\n        ", lineno=1597, col_offset=-1), lineno=1597, col_offset=-1), Assign([Name('kw', Store(), lineno=1598, col_offset=8)], Dict([Str('textvariable', lineno=1598, col_offset=14), Str('style', lineno=1598, col_offset=40), Str('direction', lineno=1599, col_offset=14)], [Name('variable', Load(), lineno=1598, col_offset=30), Call(Attribute(Name('kwargs', Load(), lineno=1598, col_offset=49), 'pop', Load(), lineno=1598, col_offset=49), [Str('style', lineno=1598, col_offset=60), Name('None', Load(), lineno=1598, col_offset=69)], [], None, None, lineno=1598, col_offset=49), Call(Attribute(Name('kwargs', Load(), lineno=1599, col_offset=27), 'pop', Load(), lineno=1599, col_offset=27), [Str('direction', lineno=1599, col_offset=38), Name('None', Load(), lineno=1599, col_offset=51)], [], None, None, lineno=1599, col_offset=27)], lineno=1598, col_offset=13), lineno=1598, col_offset=8), Expr(Call(Attribute(Name('Menubutton', Load(), lineno=1600, col_offset=8), '__init__', Load(), lineno=1600, col_offset=8), [Name('self', Load(), lineno=1600, col_offset=28), Name('master', Load(), lineno=1600, col_offset=34)], [], None, Name('kw', Load(), lineno=1600, col_offset=44), lineno=1600, col_offset=8), lineno=1600, col_offset=8), Assign([Subscript(Name('self', Load(), lineno=1601, col_offset=8), Index(Str('menu', lineno=1601, col_offset=13)), Store(), lineno=1601, col_offset=8)], Call(Attribute(Name('Tkinter', Load(), lineno=1601, col_offset=23), 'Menu', Load(), lineno=1601, col_offset=23), [Name('self', Load(), lineno=1601, col_offset=36)], [keyword('tearoff', Name('False', Load(), lineno=1601, col_offset=50))], None, None, lineno=1601, col_offset=23), lineno=1601, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1603, col_offset=8), '_variable', Store(), lineno=1603, col_offset=8)], Name('variable', Load(), lineno=1603, col_offset=25), lineno=1603, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1604, col_offset=8), '_callback', Store(), lineno=1604, col_offset=8)], Call(Attribute(Name('kwargs', Load(), lineno=1604, col_offset=25), 'pop', Load(), lineno=1604, col_offset=25), [Str('command', lineno=1604, col_offset=36), Name('None', Load(), lineno=1604, col_offset=47)], [], None, None, lineno=1604, col_offset=25), lineno=1604, col_offset=8), If(Name('kwargs', Load(), lineno=1605, col_offset=11), [Raise(Call(Attribute(Name('Tkinter', Load(), lineno=1606, col_offset=18), 'TclError', Load(), lineno=1606, col_offset=18), [BinOp(Str('unknown option -%s', lineno=1606, col_offset=35), Mod(), Call(Attribute(Call(Attribute(Name('kwargs', Load(), lineno=1607, col_offset=16), 'iterkeys', Load(), lineno=1607, col_offset=16), [], [], None, None, lineno=1607, col_offset=16), 'next', Load(), lineno=1607, col_offset=16), [], [], None, None, lineno=1607, col_offset=16), lineno=1606, col_offset=35)], [], None, None, lineno=1606, col_offset=18), None, None, lineno=1606, col_offset=12)], [], lineno=1605, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=1609, col_offset=8), 'set_menu', Load(), lineno=1609, col_offset=8), [Name('default', Load(), lineno=1609, col_offset=22)], [], Name('values', Load(), lineno=1609, col_offset=32), None, lineno=1609, col_offset=8), lineno=1609, col_offset=8)], [], lineno=1583, col_offset=4), FunctionDef('__getitem__', arguments([Name('self', Param(), lineno=1612, col_offset=20), Name('item', Param(), lineno=1612, col_offset=26)], None, None, []), [If(Compare(Name('item', Load(), lineno=1613, col_offset=11), [Eq()], [Str('menu', lineno=1613, col_offset=19)], lineno=1613, col_offset=11), [Return(Call(Attribute(Name('self', Load(), lineno=1614, col_offset=19), 'nametowidget', Load(), lineno=1614, col_offset=19), [Call(Attribute(Name('Menubutton', Load(), lineno=1614, col_offset=37), '__getitem__', Load(), lineno=1614, col_offset=37), [Name('self', Load(), lineno=1614, col_offset=60), Name('item', Load(), lineno=1614, col_offset=66)], [], None, None, lineno=1614, col_offset=37)], [], None, None, lineno=1614, col_offset=19), lineno=1614, col_offset=12)], [], lineno=1613, col_offset=8), Return(Call(Attribute(Name('Menubutton', Load(), lineno=1616, col_offset=15), '__getitem__', Load(), lineno=1616, col_offset=15), [Name('self', Load(), lineno=1616, col_offset=38), Name('item', Load(), lineno=1616, col_offset=44)], [], None, None, lineno=1616, col_offset=15), lineno=1616, col_offset=8)], [], lineno=1612, col_offset=4), FunctionDef('set_menu', arguments([Name('self', Param(), lineno=1619, col_offset=17), Name('default', Param(), lineno=1619, col_offset=23)], 'values', None, [Name('None', Load(), lineno=1619, col_offset=31)]), [Expr(Str('Build a new menu of radiobuttons with *values and optionally\n        a default value.', lineno=1621, col_offset=-1), lineno=1621, col_offset=-1), Assign([Name('menu', Store(), lineno=1622, col_offset=8)], Subscript(Name('self', Load(), lineno=1622, col_offset=15), Index(Str('menu', lineno=1622, col_offset=20)), Load(), lineno=1622, col_offset=15), lineno=1622, col_offset=8), Expr(Call(Attribute(Name('menu', Load(), lineno=1623, col_offset=8), 'delete', Load(), lineno=1623, col_offset=8), [Num(0, lineno=1623, col_offset=20), Str('end', lineno=1623, col_offset=23)], [], None, None, lineno=1623, col_offset=8), lineno=1623, col_offset=8), For(Name('val', Store(), lineno=1624, col_offset=12), Name('values', Load(), lineno=1624, col_offset=19), [Expr(Call(Attribute(Name('menu', Load(), lineno=1625, col_offset=12), 'add_radiobutton', Load(), lineno=1625, col_offset=12), [], [keyword('label', Name('val', Load(), lineno=1625, col_offset=39)), keyword('command', Call(Attribute(Name('Tkinter', Load(), lineno=1626, col_offset=24), '_setit', Load(), lineno=1626, col_offset=24), [Attribute(Name('self', Load(), lineno=1626, col_offset=39), '_variable', Load(), lineno=1626, col_offset=39), Name('val', Load(), lineno=1626, col_offset=55), Attribute(Name('self', Load(), lineno=1626, col_offset=60), '_callback', Load(), lineno=1626, col_offset=60)], [], None, None, lineno=1626, col_offset=24))], None, None, lineno=1625, col_offset=12), lineno=1625, col_offset=12)], [], lineno=1624, col_offset=8), If(Name('default', Load(), lineno=1628, col_offset=11), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1629, col_offset=12), '_variable', Load(), lineno=1629, col_offset=12), 'set', Load(), lineno=1629, col_offset=12), [Name('default', Load(), lineno=1629, col_offset=31)], [], None, None, lineno=1629, col_offset=12), lineno=1629, col_offset=12)], [], lineno=1628, col_offset=8)], [], lineno=1619, col_offset=4), FunctionDef('destroy', arguments([Name('self', Param(), lineno=1632, col_offset=16)], None, None, []), [Expr(Str('Destroy this widget and its associated variable.', lineno=1633, col_offset=8), lineno=1633, col_offset=8), Delete([Attribute(Name('self', Load(), lineno=1634, col_offset=12), '_variable', Del(), lineno=1634, col_offset=12)], lineno=1634, col_offset=8), Expr(Call(Attribute(Name('Menubutton', Load(), lineno=1635, col_offset=8), 'destroy', Load(), lineno=1635, col_offset=8), [Name('self', Load(), lineno=1635, col_offset=27)], [], None, None, lineno=1635, col_offset=8), lineno=1635, col_offset=8)], [], lineno=1632, col_offset=4)], [], lineno=1579, col_offset=0)])
