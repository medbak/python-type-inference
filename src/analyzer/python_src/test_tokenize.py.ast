Module([Assign([Name('doctests', Store(), lineno=1, col_offset=0)], Str('\nTests for the tokenize module.\n\n    >>> import glob, random, sys\n\nThe tests can be really simple. Given a small fragment of source\ncode, print out a table with tokens. The ENDMARK is omitted for\nbrevity.\n\n    >>> dump_tokens("1 + 1")\n    NUMBER     \'1\'           (1, 0) (1, 1)\n    OP         \'+\'           (1, 2) (1, 3)\n    NUMBER     \'1\'           (1, 4) (1, 5)\n\n    >>> dump_tokens("if False:\\n"\n    ...             "    # NL\\n"\n    ...             "    True = False # NEWLINE\\n")\n    NAME       \'if\'          (1, 0) (1, 2)\n    NAME       \'False\'       (1, 3) (1, 8)\n    OP         \':\'           (1, 8) (1, 9)\n    NEWLINE    \'\\n\'          (1, 9) (1, 10)\n    COMMENT    \'# NL\'        (2, 4) (2, 8)\n    NL         \'\\n\'          (2, 8) (2, 9)\n    INDENT     \'    \'        (3, 0) (3, 4)\n    NAME       \'True\'        (3, 4) (3, 8)\n    OP         \'=\'           (3, 9) (3, 10)\n    NAME       \'False\'       (3, 11) (3, 16)\n    COMMENT    \'# NEWLINE\'   (3, 17) (3, 26)\n    NEWLINE    \'\\n\'          (3, 26) (3, 27)\n    DEDENT     \'\'            (4, 0) (4, 0)\n\n    >>> indent_error_file = """\n    ... def k(x):\n    ...     x += 2\n    ...   x += 5\n    ... """\n\n    >>> for tok in generate_tokens(StringIO(indent_error_file).readline): pass\n    Traceback (most recent call last):\n        ...\n    IndentationError: unindent does not match any outer indentation level\n\nTest roundtrip for `untokenize`. `f` is an open file or a string. The source\ncode in f is tokenized, converted back to source code via tokenize.untokenize(),\nand tokenized again from the latter. The test fails if the second tokenization\ndoesn\'t match the first.\n\n    >>> def roundtrip(f):\n    ...     if isinstance(f, str): f = StringIO(f)\n    ...     token_list = list(generate_tokens(f.readline))\n    ...     f.close()\n    ...     tokens1 = [tok[:2] for tok in token_list]\n    ...     new_text = untokenize(tokens1)\n    ...     readline = iter(new_text.splitlines(1)).next\n    ...     tokens2 = [tok[:2] for tok in generate_tokens(readline)]\n    ...     return tokens1 == tokens2\n    ...\n\nThere are some standard formatting practices that are easy to get right.\n\n    >>> roundtrip("if x == 1:\\n"\n    ...           "    print x\\n")\n    True\n\n    >>> roundtrip("# This is a comment\\n# This also")\n    True\n\nSome people use different formatting conventions, which makes\nuntokenize a little trickier. Note that this test involves trailing\nwhitespace after the colon. Note that we use hex escapes to make the\ntwo trailing blanks apperant in the expected output.\n\n    >>> roundtrip("if x == 1 : \\n"\n    ...           "  print x\\n")\n    True\n\n    >>> f = test_support.findfile("tokenize_tests" + os.extsep + "txt")\n    >>> roundtrip(open(f))\n    True\n\n    >>> roundtrip("if x == 1:\\n"\n    ...           "    # A comment by itself.\\n"\n    ...           "    print x # Comment here, too.\\n"\n    ...           "    # Another comment.\\n"\n    ...           "after_if = True\\n")\n    True\n\n    >>> roundtrip("if (x # The comments need to go in the right place\\n"\n    ...           "    == 1):\\n"\n    ...           "    print \'x==1\'\\n")\n    True\n\n    >>> roundtrip("class Test: # A comment here\\n"\n    ...           "  # A comment with weird indent\\n"\n    ...           "  after_com = 5\\n"\n    ...           "  def x(m): return m*5 # a one liner\\n"\n    ...           "  def y(m): # A whitespace after the colon\\n"\n    ...           "     return y*4 # 3-space indent\\n")\n    True\n\nSome error-handling code\n\n    >>> roundtrip("try: import somemodule\\n"\n    ...           "except ImportError: # comment\\n"\n    ...           "    print \'Can not import\' # comment2\\n"\n    ...           "else:   print \'Loaded\'\\n")\n    True\n\nBalancing continuation\n\n    >>> roundtrip("a = (3,4, \\n"\n    ...           "5,6)\\n"\n    ...           "y = [3, 4,\\n"\n    ...           "5]\\n"\n    ...           "z = {\'a\': 5,\\n"\n    ...           "\'b\':15, \'c\':True}\\n"\n    ...           "x = len(y) + 5 - a[\\n"\n    ...           "3] - a[2]\\n"\n    ...           "+ len(z) - z[\\n"\n    ...           "\'b\']\\n")\n    True\n\nOrdinary integers and binary operators\n\n    >>> dump_tokens("0xff <= 255")\n    NUMBER     \'0xff\'        (1, 0) (1, 4)\n    OP         \'<=\'          (1, 5) (1, 7)\n    NUMBER     \'255\'         (1, 8) (1, 11)\n    >>> dump_tokens("0b10 <= 255")\n    NUMBER     \'0b10\'        (1, 0) (1, 4)\n    OP         \'<=\'          (1, 5) (1, 7)\n    NUMBER     \'255\'         (1, 8) (1, 11)\n    >>> dump_tokens("0o123 <= 0123")\n    NUMBER     \'0o123\'       (1, 0) (1, 5)\n    OP         \'<=\'          (1, 6) (1, 8)\n    NUMBER     \'0123\'        (1, 9) (1, 13)\n    >>> dump_tokens("01234567 > ~0x15")\n    NUMBER     \'01234567\'    (1, 0) (1, 8)\n    OP         \'>\'           (1, 9) (1, 10)\n    OP         \'~\'           (1, 11) (1, 12)\n    NUMBER     \'0x15\'        (1, 12) (1, 16)\n    >>> dump_tokens("2134568 != 01231515")\n    NUMBER     \'2134568\'     (1, 0) (1, 7)\n    OP         \'!=\'          (1, 8) (1, 10)\n    NUMBER     \'01231515\'    (1, 11) (1, 19)\n    >>> dump_tokens("(-124561-1) & 0200000000")\n    OP         \'(\'           (1, 0) (1, 1)\n    OP         \'-\'           (1, 1) (1, 2)\n    NUMBER     \'124561\'      (1, 2) (1, 8)\n    OP         \'-\'           (1, 8) (1, 9)\n    NUMBER     \'1\'           (1, 9) (1, 10)\n    OP         \')\'           (1, 10) (1, 11)\n    OP         \'&\'           (1, 12) (1, 13)\n    NUMBER     \'0200000000\'  (1, 14) (1, 24)\n    >>> dump_tokens("0xdeadbeef != -1")\n    NUMBER     \'0xdeadbeef\'  (1, 0) (1, 10)\n    OP         \'!=\'          (1, 11) (1, 13)\n    OP         \'-\'           (1, 14) (1, 15)\n    NUMBER     \'1\'           (1, 15) (1, 16)\n    >>> dump_tokens("0xdeadc0de & 012345")\n    NUMBER     \'0xdeadc0de\'  (1, 0) (1, 10)\n    OP         \'&\'           (1, 11) (1, 12)\n    NUMBER     \'012345\'      (1, 13) (1, 19)\n    >>> dump_tokens("0xFF & 0x15 | 1234")\n    NUMBER     \'0xFF\'        (1, 0) (1, 4)\n    OP         \'&\'           (1, 5) (1, 6)\n    NUMBER     \'0x15\'        (1, 7) (1, 11)\n    OP         \'|\'           (1, 12) (1, 13)\n    NUMBER     \'1234\'        (1, 14) (1, 18)\n\nLong integers\n\n    >>> dump_tokens("x = 0L")\n    NAME       \'x\'           (1, 0) (1, 1)\n    OP         \'=\'           (1, 2) (1, 3)\n    NUMBER     \'0L\'          (1, 4) (1, 6)\n    >>> dump_tokens("x = 0xfffffffffff")\n    NAME       \'x\'           (1, 0) (1, 1)\n    OP         \'=\'           (1, 2) (1, 3)\n    NUMBER     \'0xffffffffff (1, 4) (1, 17)\n    >>> dump_tokens("x = 123141242151251616110l")\n    NAME       \'x\'           (1, 0) (1, 1)\n    OP         \'=\'           (1, 2) (1, 3)\n    NUMBER     \'123141242151 (1, 4) (1, 26)\n    >>> dump_tokens("x = -15921590215012591L")\n    NAME       \'x\'           (1, 0) (1, 1)\n    OP         \'=\'           (1, 2) (1, 3)\n    OP         \'-\'           (1, 4) (1, 5)\n    NUMBER     \'159215902150 (1, 5) (1, 23)\n\nFloating point numbers\n\n    >>> dump_tokens("x = 3.14159")\n    NAME       \'x\'           (1, 0) (1, 1)\n    OP         \'=\'           (1, 2) (1, 3)\n    NUMBER     \'3.14159\'     (1, 4) (1, 11)\n    >>> dump_tokens("x = 314159.")\n    NAME       \'x\'           (1, 0) (1, 1)\n    OP         \'=\'           (1, 2) (1, 3)\n    NUMBER     \'314159.\'     (1, 4) (1, 11)\n    >>> dump_tokens("x = .314159")\n    NAME       \'x\'           (1, 0) (1, 1)\n    OP         \'=\'           (1, 2) (1, 3)\n    NUMBER     \'.314159\'     (1, 4) (1, 11)\n    >>> dump_tokens("x = 3e14159")\n    NAME       \'x\'           (1, 0) (1, 1)\n    OP         \'=\'           (1, 2) (1, 3)\n    NUMBER     \'3e14159\'     (1, 4) (1, 11)\n    >>> dump_tokens("x = 3E123")\n    NAME       \'x\'           (1, 0) (1, 1)\n    OP         \'=\'           (1, 2) (1, 3)\n    NUMBER     \'3E123\'       (1, 4) (1, 9)\n    >>> dump_tokens("x+y = 3e-1230")\n    NAME       \'x\'           (1, 0) (1, 1)\n    OP         \'+\'           (1, 1) (1, 2)\n    NAME       \'y\'           (1, 2) (1, 3)\n    OP         \'=\'           (1, 4) (1, 5)\n    NUMBER     \'3e-1230\'     (1, 6) (1, 13)\n    >>> dump_tokens("x = 3.14e159")\n    NAME       \'x\'           (1, 0) (1, 1)\n    OP         \'=\'           (1, 2) (1, 3)\n    NUMBER     \'3.14e159\'    (1, 4) (1, 12)\n\nString literals\n\n    >>> dump_tokens("x = \'\'; y = \\"\\"")\n    NAME       \'x\'           (1, 0) (1, 1)\n    OP         \'=\'           (1, 2) (1, 3)\n    STRING     "\'\'"          (1, 4) (1, 6)\n    OP         \';\'           (1, 6) (1, 7)\n    NAME       \'y\'           (1, 8) (1, 9)\n    OP         \'=\'           (1, 10) (1, 11)\n    STRING     \'""\'          (1, 12) (1, 14)\n    >>> dump_tokens("x = \'\\"\'; y = \\"\'\\"")\n    NAME       \'x\'           (1, 0) (1, 1)\n    OP         \'=\'           (1, 2) (1, 3)\n    STRING     \'\\\'"\\\'\'       (1, 4) (1, 7)\n    OP         \';\'           (1, 7) (1, 8)\n    NAME       \'y\'           (1, 9) (1, 10)\n    OP         \'=\'           (1, 11) (1, 12)\n    STRING     \'"\\\'"\'        (1, 13) (1, 16)\n    >>> dump_tokens("x = \\"doesn\'t \\"shrink\\", does it\\"")\n    NAME       \'x\'           (1, 0) (1, 1)\n    OP         \'=\'           (1, 2) (1, 3)\n    STRING     \'"doesn\\\'t "\' (1, 4) (1, 14)\n    NAME       \'shrink\'      (1, 14) (1, 20)\n    STRING     \'", does it"\' (1, 20) (1, 31)\n    >>> dump_tokens("x = u\'abc\' + U\'ABC\'")\n    NAME       \'x\'           (1, 0) (1, 1)\n    OP         \'=\'           (1, 2) (1, 3)\n    STRING     "u\'abc\'"      (1, 4) (1, 10)\n    OP         \'+\'           (1, 11) (1, 12)\n    STRING     "U\'ABC\'"      (1, 13) (1, 19)\n    >>> dump_tokens(\'y = u"ABC" + U"ABC"\')\n    NAME       \'y\'           (1, 0) (1, 1)\n    OP         \'=\'           (1, 2) (1, 3)\n    STRING     \'u"ABC"\'      (1, 4) (1, 10)\n    OP         \'+\'           (1, 11) (1, 12)\n    STRING     \'U"ABC"\'      (1, 13) (1, 19)\n    >>> dump_tokens("x = ur\'abc\' + Ur\'ABC\' + uR\'ABC\' + UR\'ABC\'")\n    NAME       \'x\'           (1, 0) (1, 1)\n    OP         \'=\'           (1, 2) (1, 3)\n    STRING     "ur\'abc\'"     (1, 4) (1, 11)\n    OP         \'+\'           (1, 12) (1, 13)\n    STRING     "Ur\'ABC\'"     (1, 14) (1, 21)\n    OP         \'+\'           (1, 22) (1, 23)\n    STRING     "uR\'ABC\'"     (1, 24) (1, 31)\n    OP         \'+\'           (1, 32) (1, 33)\n    STRING     "UR\'ABC\'"     (1, 34) (1, 41)\n    >>> dump_tokens(\'y = ur"abc" + Ur"ABC" + uR"ABC" + UR"ABC"\')\n    NAME       \'y\'           (1, 0) (1, 1)\n    OP         \'=\'           (1, 2) (1, 3)\n    STRING     \'ur"abc"\'     (1, 4) (1, 11)\n    OP         \'+\'           (1, 12) (1, 13)\n    STRING     \'Ur"ABC"\'     (1, 14) (1, 21)\n    OP         \'+\'           (1, 22) (1, 23)\n    STRING     \'uR"ABC"\'     (1, 24) (1, 31)\n    OP         \'+\'           (1, 32) (1, 33)\n    STRING     \'UR"ABC"\'     (1, 34) (1, 41)\n\nOperators\n\n    >>> dump_tokens("def d22(a, b, c=2, d=2, *k): pass")\n    NAME       \'def\'         (1, 0) (1, 3)\n    NAME       \'d22\'         (1, 4) (1, 7)\n    OP         \'(\'           (1, 7) (1, 8)\n    NAME       \'a\'           (1, 8) (1, 9)\n    OP         \',\'           (1, 9) (1, 10)\n    NAME       \'b\'           (1, 11) (1, 12)\n    OP         \',\'           (1, 12) (1, 13)\n    NAME       \'c\'           (1, 14) (1, 15)\n    OP         \'=\'           (1, 15) (1, 16)\n    NUMBER     \'2\'           (1, 16) (1, 17)\n    OP         \',\'           (1, 17) (1, 18)\n    NAME       \'d\'           (1, 19) (1, 20)\n    OP         \'=\'           (1, 20) (1, 21)\n    NUMBER     \'2\'           (1, 21) (1, 22)\n    OP         \',\'           (1, 22) (1, 23)\n    OP         \'*\'           (1, 24) (1, 25)\n    NAME       \'k\'           (1, 25) (1, 26)\n    OP         \')\'           (1, 26) (1, 27)\n    OP         \':\'           (1, 27) (1, 28)\n    NAME       \'pass\'        (1, 29) (1, 33)\n    >>> dump_tokens("def d01v_(a=1, *k, **w): pass")\n    NAME       \'def\'         (1, 0) (1, 3)\n    NAME       \'d01v_\'       (1, 4) (1, 9)\n    OP         \'(\'           (1, 9) (1, 10)\n    NAME       \'a\'           (1, 10) (1, 11)\n    OP         \'=\'           (1, 11) (1, 12)\n    NUMBER     \'1\'           (1, 12) (1, 13)\n    OP         \',\'           (1, 13) (1, 14)\n    OP         \'*\'           (1, 15) (1, 16)\n    NAME       \'k\'           (1, 16) (1, 17)\n    OP         \',\'           (1, 17) (1, 18)\n    OP         \'**\'          (1, 19) (1, 21)\n    NAME       \'w\'           (1, 21) (1, 22)\n    OP         \')\'           (1, 22) (1, 23)\n    OP         \':\'           (1, 23) (1, 24)\n    NAME       \'pass\'        (1, 25) (1, 29)\n\nComparison\n\n    >>> dump_tokens("if 1 < 1 > 1 == 1 >= 5 <= 0x15 <= 0x12 != " +\n    ...             "1 and 5 in 1 not in 1 is 1 or 5 is not 1: pass")\n    NAME       \'if\'          (1, 0) (1, 2)\n    NUMBER     \'1\'           (1, 3) (1, 4)\n    OP         \'<\'           (1, 5) (1, 6)\n    NUMBER     \'1\'           (1, 7) (1, 8)\n    OP         \'>\'           (1, 9) (1, 10)\n    NUMBER     \'1\'           (1, 11) (1, 12)\n    OP         \'==\'          (1, 13) (1, 15)\n    NUMBER     \'1\'           (1, 16) (1, 17)\n    OP         \'>=\'          (1, 18) (1, 20)\n    NUMBER     \'5\'           (1, 21) (1, 22)\n    OP         \'<=\'          (1, 23) (1, 25)\n    NUMBER     \'0x15\'        (1, 26) (1, 30)\n    OP         \'<=\'          (1, 31) (1, 33)\n    NUMBER     \'0x12\'        (1, 34) (1, 38)\n    OP         \'!=\'          (1, 39) (1, 41)\n    NUMBER     \'1\'           (1, 42) (1, 43)\n    NAME       \'and\'         (1, 44) (1, 47)\n    NUMBER     \'5\'           (1, 48) (1, 49)\n    NAME       \'in\'          (1, 50) (1, 52)\n    NUMBER     \'1\'           (1, 53) (1, 54)\n    NAME       \'not\'         (1, 55) (1, 58)\n    NAME       \'in\'          (1, 59) (1, 61)\n    NUMBER     \'1\'           (1, 62) (1, 63)\n    NAME       \'is\'          (1, 64) (1, 66)\n    NUMBER     \'1\'           (1, 67) (1, 68)\n    NAME       \'or\'          (1, 69) (1, 71)\n    NUMBER     \'5\'           (1, 72) (1, 73)\n    NAME       \'is\'          (1, 74) (1, 76)\n    NAME       \'not\'         (1, 77) (1, 80)\n    NUMBER     \'1\'           (1, 81) (1, 82)\n    OP         \':\'           (1, 82) (1, 83)\n    NAME       \'pass\'        (1, 84) (1, 88)\n\nShift\n\n    >>> dump_tokens("x = 1 << 1 >> 5")\n    NAME       \'x\'           (1, 0) (1, 1)\n    OP         \'=\'           (1, 2) (1, 3)\n    NUMBER     \'1\'           (1, 4) (1, 5)\n    OP         \'<<\'          (1, 6) (1, 8)\n    NUMBER     \'1\'           (1, 9) (1, 10)\n    OP         \'>>\'          (1, 11) (1, 13)\n    NUMBER     \'5\'           (1, 14) (1, 15)\n\nAdditive\n\n    >>> dump_tokens("x = 1 - y + 15 - 01 + 0x124 + z + a[5]")\n    NAME       \'x\'           (1, 0) (1, 1)\n    OP         \'=\'           (1, 2) (1, 3)\n    NUMBER     \'1\'           (1, 4) (1, 5)\n    OP         \'-\'           (1, 6) (1, 7)\n    NAME       \'y\'           (1, 8) (1, 9)\n    OP         \'+\'           (1, 10) (1, 11)\n    NUMBER     \'15\'          (1, 12) (1, 14)\n    OP         \'-\'           (1, 15) (1, 16)\n    NUMBER     \'01\'          (1, 17) (1, 19)\n    OP         \'+\'           (1, 20) (1, 21)\n    NUMBER     \'0x124\'       (1, 22) (1, 27)\n    OP         \'+\'           (1, 28) (1, 29)\n    NAME       \'z\'           (1, 30) (1, 31)\n    OP         \'+\'           (1, 32) (1, 33)\n    NAME       \'a\'           (1, 34) (1, 35)\n    OP         \'[\'           (1, 35) (1, 36)\n    NUMBER     \'5\'           (1, 36) (1, 37)\n    OP         \']\'           (1, 37) (1, 38)\n\nMultiplicative\n\n    >>> dump_tokens("x = 1//1*1/5*12%0x12")\n    NAME       \'x\'           (1, 0) (1, 1)\n    OP         \'=\'           (1, 2) (1, 3)\n    NUMBER     \'1\'           (1, 4) (1, 5)\n    OP         \'//\'          (1, 5) (1, 7)\n    NUMBER     \'1\'           (1, 7) (1, 8)\n    OP         \'*\'           (1, 8) (1, 9)\n    NUMBER     \'1\'           (1, 9) (1, 10)\n    OP         \'/\'           (1, 10) (1, 11)\n    NUMBER     \'5\'           (1, 11) (1, 12)\n    OP         \'*\'           (1, 12) (1, 13)\n    NUMBER     \'12\'          (1, 13) (1, 15)\n    OP         \'%\'           (1, 15) (1, 16)\n    NUMBER     \'0x12\'        (1, 16) (1, 20)\n\nUnary\n\n    >>> dump_tokens("~1 ^ 1 & 1 |1 ^ -1")\n    OP         \'~\'           (1, 0) (1, 1)\n    NUMBER     \'1\'           (1, 1) (1, 2)\n    OP         \'^\'           (1, 3) (1, 4)\n    NUMBER     \'1\'           (1, 5) (1, 6)\n    OP         \'&\'           (1, 7) (1, 8)\n    NUMBER     \'1\'           (1, 9) (1, 10)\n    OP         \'|\'           (1, 11) (1, 12)\n    NUMBER     \'1\'           (1, 12) (1, 13)\n    OP         \'^\'           (1, 14) (1, 15)\n    OP         \'-\'           (1, 16) (1, 17)\n    NUMBER     \'1\'           (1, 17) (1, 18)\n    >>> dump_tokens("-1*1/1+1*1//1 - ---1**1")\n    OP         \'-\'           (1, 0) (1, 1)\n    NUMBER     \'1\'           (1, 1) (1, 2)\n    OP         \'*\'           (1, 2) (1, 3)\n    NUMBER     \'1\'           (1, 3) (1, 4)\n    OP         \'/\'           (1, 4) (1, 5)\n    NUMBER     \'1\'           (1, 5) (1, 6)\n    OP         \'+\'           (1, 6) (1, 7)\n    NUMBER     \'1\'           (1, 7) (1, 8)\n    OP         \'*\'           (1, 8) (1, 9)\n    NUMBER     \'1\'           (1, 9) (1, 10)\n    OP         \'//\'          (1, 10) (1, 12)\n    NUMBER     \'1\'           (1, 12) (1, 13)\n    OP         \'-\'           (1, 14) (1, 15)\n    OP         \'-\'           (1, 16) (1, 17)\n    OP         \'-\'           (1, 17) (1, 18)\n    OP         \'-\'           (1, 18) (1, 19)\n    NUMBER     \'1\'           (1, 19) (1, 20)\n    OP         \'**\'          (1, 20) (1, 22)\n    NUMBER     \'1\'           (1, 22) (1, 23)\n\nSelector\n\n    >>> dump_tokens("import sys, time\\nx = sys.modules[\'time\'].time()")\n    NAME       \'import\'      (1, 0) (1, 6)\n    NAME       \'sys\'         (1, 7) (1, 10)\n    OP         \',\'           (1, 10) (1, 11)\n    NAME       \'time\'        (1, 12) (1, 16)\n    NEWLINE    \'\\n\'          (1, 16) (1, 17)\n    NAME       \'x\'           (2, 0) (2, 1)\n    OP         \'=\'           (2, 2) (2, 3)\n    NAME       \'sys\'         (2, 4) (2, 7)\n    OP         \'.\'           (2, 7) (2, 8)\n    NAME       \'modules\'     (2, 8) (2, 15)\n    OP         \'[\'           (2, 15) (2, 16)\n    STRING     "\'time\'"      (2, 16) (2, 22)\n    OP         \']\'           (2, 22) (2, 23)\n    OP         \'.\'           (2, 23) (2, 24)\n    NAME       \'time\'        (2, 24) (2, 28)\n    OP         \'(\'           (2, 28) (2, 29)\n    OP         \')\'           (2, 29) (2, 30)\n\nMethods\n\n    >>> dump_tokens("@staticmethod\\ndef foo(x,y): pass")\n    OP         \'@\'           (1, 0) (1, 1)\n    NAME       \'staticmethod (1, 1) (1, 13)\n    NEWLINE    \'\\n\'          (1, 13) (1, 14)\n    NAME       \'def\'         (2, 0) (2, 3)\n    NAME       \'foo\'         (2, 4) (2, 7)\n    OP         \'(\'           (2, 7) (2, 8)\n    NAME       \'x\'           (2, 8) (2, 9)\n    OP         \',\'           (2, 9) (2, 10)\n    NAME       \'y\'           (2, 10) (2, 11)\n    OP         \')\'           (2, 11) (2, 12)\n    OP         \':\'           (2, 12) (2, 13)\n    NAME       \'pass\'        (2, 14) (2, 18)\n\nBackslash means line continuation, except for comments\n\n    >>> roundtrip("x=1+\\\\n"\n    ...           "1\\n"\n    ...           "# This is a comment\\\\n"\n    ...           "# This also\\n")\n    True\n    >>> roundtrip("# Comment \\\\nx = 0")\n    True\n\nTwo string literals on the same line\n\n    >>> roundtrip("\'\' \'\'")\n    True\n\nTest roundtrip on random python modules.\npass the \'-ucpu\' option to process the full directory.\n\n    >>>\n    >>> tempdir = os.path.dirname(f) or os.curdir\n    >>> testfiles = glob.glob(os.path.join(tempdir, "test*.py"))\n\n    >>> if not test_support.is_resource_enabled("cpu"):\n    ...     testfiles = random.sample(testfiles, 10)\n    ...\n    >>> for testfile in testfiles:\n    ...     if not roundtrip(open(testfile)):\n    ...         print "Roundtrip failed for file %s" % testfile\n    ...         break\n    ... else: True\n    True\n\nEvil tabs\n    >>> dump_tokens("def f():\\n\\tif x\\n        \\tpass")\n    NAME       \'def\'         (1, 0) (1, 3)\n    NAME       \'f\'           (1, 4) (1, 5)\n    OP         \'(\'           (1, 5) (1, 6)\n    OP         \')\'           (1, 6) (1, 7)\n    OP         \':\'           (1, 7) (1, 8)\n    NEWLINE    \'\\n\'          (1, 8) (1, 9)\n    INDENT     \'\\t\'          (2, 0) (2, 1)\n    NAME       \'if\'          (2, 1) (2, 3)\n    NAME       \'x\'           (2, 4) (2, 5)\n    NEWLINE    \'\\n\'          (2, 5) (2, 6)\n    INDENT     \'        \\t\'  (3, 0) (3, 9)\n    NAME       \'pass\'        (3, 9) (3, 13)\n    DEDENT     \'\'            (4, 0) (4, 0)\n    DEDENT     \'\'            (4, 0) (4, 0)\n', lineno=528, col_offset=-1), lineno=1, col_offset=0), ImportFrom('test', [alias('test_support', None)], 0, lineno=531, col_offset=0), ImportFrom('tokenize', [alias('untokenize', None), alias('generate_tokens', None), alias('NUMBER', None), alias('NAME', None), alias('OP', None), alias('STRING', None), alias('ENDMARKER', None), alias('tok_name', None)], 0, lineno=532, col_offset=0), ImportFrom('StringIO', [alias('StringIO', None)], 0, lineno=534, col_offset=0), Import([alias('os', None)], lineno=535, col_offset=0), FunctionDef('dump_tokens', arguments([Name('s', Param(), lineno=537, col_offset=16)], None, None, []), [Expr(Str('Print out the tokens in s in a table format.\n\n    The ENDMARKER is omitted.\n    ', lineno=541, col_offset=-1), lineno=541, col_offset=-1), Assign([Name('f', Store(), lineno=542, col_offset=4)], Call(Name('StringIO', Load(), lineno=542, col_offset=8), [Name('s', Load(), lineno=542, col_offset=17)], [], None, None, lineno=542, col_offset=8), lineno=542, col_offset=4), For(Tuple([Name('type', Store(), lineno=543, col_offset=8), Name('token', Store(), lineno=543, col_offset=14), Name('start', Store(), lineno=543, col_offset=21), Name('end', Store(), lineno=543, col_offset=28), Name('line', Store(), lineno=543, col_offset=33)], Store(), lineno=543, col_offset=8), Call(Name('generate_tokens', Load(), lineno=543, col_offset=41), [Attribute(Name('f', Load(), lineno=543, col_offset=57), 'readline', Load(), lineno=543, col_offset=57)], [], None, None, lineno=543, col_offset=41), [If(Compare(Name('type', Load(), lineno=544, col_offset=11), [Eq()], [Name('ENDMARKER', Load(), lineno=544, col_offset=19)], lineno=544, col_offset=11), [Break( lineno=545, col_offset=12)], [], lineno=544, col_offset=8), Assign([Name('type', Store(), lineno=546, col_offset=8)], Subscript(Name('tok_name', Load(), lineno=546, col_offset=15), Index(Name('type', Load(), lineno=546, col_offset=24)), Load(), lineno=546, col_offset=15), lineno=546, col_offset=8), Print(None, [BinOp(Str('%(type)-10.10s %(token)-13.13r %(start)s %(end)s', lineno=547, col_offset=14), Mod(), Call(Name('locals', Load(), lineno=547, col_offset=67), [], [], None, None, lineno=547, col_offset=67), lineno=547, col_offset=14)], True, lineno=547, col_offset=8)], [], lineno=543, col_offset=4)], [], lineno=537, col_offset=0), FunctionDef('decistmt', arguments([Name('s', Param(), lineno=550, col_offset=13)], None, None, []), [Expr(Str('Substitute Decimals for floats in a string of statements.\n\n    >>> from decimal import Decimal\n    >>> s = \'print +21.3e-5*-.1234/81.7\'\n    >>> decistmt(s)\n    "print +Decimal (\'21.3e-5\')*-Decimal (\'.1234\')/Decimal (\'81.7\')"\n\n    The format of the exponent is inherited from the platform C library.\n    Known cases are "e-007" (Windows) and "e-07" (not Windows).  Since\n    we\'re only showing 12 digits, and the 13th isn\'t close to 5, the\n    rest of the output should be platform-independent.\n\n    >>> exec(s) #doctest: +ELLIPSIS\n    -3.21716034272e-0...7\n\n    Output from calculations with Decimal should be identical across all\n    platforms.\n\n    >>> exec(decistmt(s))\n    -3.217160342717258261933904529E-7\n    ', lineno=571, col_offset=-1), lineno=571, col_offset=-1), Assign([Name('result', Store(), lineno=573, col_offset=4)], List([], Load(), lineno=573, col_offset=13), lineno=573, col_offset=4), Assign([Name('g', Store(), lineno=574, col_offset=4)], Call(Name('generate_tokens', Load(), lineno=574, col_offset=8), [Attribute(Call(Name('StringIO', Load(), lineno=574, col_offset=24), [Name('s', Load(), lineno=574, col_offset=33)], [], None, None, lineno=574, col_offset=24), 'readline', Load(), lineno=574, col_offset=24)], [], None, None, lineno=574, col_offset=8), lineno=574, col_offset=4), For(Tuple([Name('toknum', Store(), lineno=575, col_offset=8), Name('tokval', Store(), lineno=575, col_offset=16), Name('_', Store(), lineno=575, col_offset=24), Name('_', Store(), lineno=575, col_offset=27), Name('_', Store(), lineno=575, col_offset=30)], Store(), lineno=575, col_offset=8), Name('g', Load(), lineno=575, col_offset=36), [If(BoolOp(And(), [Compare(Name('toknum', Load(), lineno=576, col_offset=11), [Eq()], [Name('NUMBER', Load(), lineno=576, col_offset=21)], lineno=576, col_offset=11), Compare(Str('.', lineno=576, col_offset=32), [In()], [Name('tokval', Load(), lineno=576, col_offset=39)], lineno=576, col_offset=32)], lineno=576, col_offset=11), [Expr(Call(Attribute(Name('result', Load(), lineno=577, col_offset=12), 'extend', Load(), lineno=577, col_offset=12), [List([Tuple([Name('NAME', Load(), lineno=578, col_offset=17), Str('Decimal', lineno=578, col_offset=23)], Load(), lineno=578, col_offset=17), Tuple([Name('OP', Load(), lineno=579, col_offset=17), Str('(', lineno=579, col_offset=21)], Load(), lineno=579, col_offset=17), Tuple([Name('STRING', Load(), lineno=580, col_offset=17), Call(Name('repr', Load(), lineno=580, col_offset=25), [Name('tokval', Load(), lineno=580, col_offset=30)], [], None, None, lineno=580, col_offset=25)], Load(), lineno=580, col_offset=17), Tuple([Name('OP', Load(), lineno=581, col_offset=17), Str(')', lineno=581, col_offset=21)], Load(), lineno=581, col_offset=17)], Load(), lineno=577, col_offset=26)], [], None, None, lineno=577, col_offset=12), lineno=577, col_offset=12)], [Expr(Call(Attribute(Name('result', Load(), lineno=584, col_offset=12), 'append', Load(), lineno=584, col_offset=12), [Tuple([Name('toknum', Load(), lineno=584, col_offset=27), Name('tokval', Load(), lineno=584, col_offset=35)], Load(), lineno=584, col_offset=27)], [], None, None, lineno=584, col_offset=12), lineno=584, col_offset=12)], lineno=576, col_offset=8)], [], lineno=575, col_offset=4), Return(Call(Name('untokenize', Load(), lineno=585, col_offset=11), [Name('result', Load(), lineno=585, col_offset=22)], [], None, None, lineno=585, col_offset=11), lineno=585, col_offset=4)], [], lineno=550, col_offset=0), Assign([Name('__test__', Store(), lineno=588, col_offset=0)], Dict([Str('doctests', lineno=588, col_offset=12), Str('decistmt', lineno=588, col_offset=35)], [Name('doctests', Load(), lineno=588, col_offset=25), Name('decistmt', Load(), lineno=588, col_offset=47)], lineno=588, col_offset=11), lineno=588, col_offset=0), FunctionDef('test_main', arguments([], None, None, []), [ImportFrom('test', [alias('test_tokenize', None)], 0, lineno=592, col_offset=4), Expr(Call(Attribute(Name('test_support', Load(), lineno=593, col_offset=4), 'run_doctest', Load(), lineno=593, col_offset=4), [Name('test_tokenize', Load(), lineno=593, col_offset=29), Name('True', Load(), lineno=593, col_offset=44)], [], None, None, lineno=593, col_offset=4), lineno=593, col_offset=4)], [], lineno=591, col_offset=0), If(Compare(Name('__name__', Load(), lineno=595, col_offset=3), [Eq()], [Str('__main__', lineno=595, col_offset=15)], lineno=595, col_offset=3), [Expr(Call(Name('test_main', Load(), lineno=596, col_offset=4), [], [], None, None, lineno=596, col_offset=4), lineno=596, col_offset=4)], [], lineno=595, col_offset=0)])
