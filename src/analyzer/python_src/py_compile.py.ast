Module([Expr(Str('Routine to "compile" a .py file to a .pyc (or .pyo) file.\n\nThis module has intimate knowledge of the format of .pyc files.\n', lineno=4, col_offset=-1), lineno=4, col_offset=-1), Import([alias('__builtin__', None)], lineno=6, col_offset=0), Import([alias('imp', None)], lineno=7, col_offset=0), Import([alias('marshal', None)], lineno=8, col_offset=0), Import([alias('os', None)], lineno=9, col_offset=0), Import([alias('sys', None)], lineno=10, col_offset=0), Import([alias('traceback', None)], lineno=11, col_offset=0), Assign([Name('MAGIC', Store(), lineno=13, col_offset=0)], Call(Attribute(Name('imp', Load(), lineno=13, col_offset=8), 'get_magic', Load(), lineno=13, col_offset=8), [], [], None, None, lineno=13, col_offset=8), lineno=13, col_offset=0), Assign([Name('__all__', Store(), lineno=15, col_offset=0)], List([Str('compile', lineno=15, col_offset=11), Str('main', lineno=15, col_offset=22), Str('PyCompileError', lineno=15, col_offset=30)], Load(), lineno=15, col_offset=10), lineno=15, col_offset=0), ClassDef('PyCompileError', [Name('Exception', Load(), lineno=18, col_offset=21)], [Expr(Str("Exception raised when an error occurs while attempting to\n    compile the file.\n\n    To raise this exception, use\n\n        raise PyCompileError(exc_type,exc_value,file[,msg])\n\n    where\n\n        exc_type:   exception type to be used in error message\n                    type name can be accesses as class variable\n                    'exc_type_name'\n\n        exc_value:  exception value to be used in error message\n                    can be accesses as class variable 'exc_value'\n\n        file:       name of file being compiled to be used in error message\n                    can be accesses as class variable 'file'\n\n        msg:        string message to be written as error message\n                    If no value is given, a default exception message will be given,\n                    consistent with 'standard' py_compile output.\n                    message (or default) can be accesses as class variable 'msg'\n\n    ", lineno=43, col_offset=-1), lineno=43, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=45, col_offset=17), Name('exc_type', Param(), lineno=45, col_offset=23), Name('exc_value', Param(), lineno=45, col_offset=33), Name('file', Param(), lineno=45, col_offset=44), Name('msg', Param(), lineno=45, col_offset=50)], None, None, [Str('', lineno=45, col_offset=54)]), [Assign([Name('exc_type_name', Store(), lineno=46, col_offset=8)], Attribute(Name('exc_type', Load(), lineno=46, col_offset=24), '__name__', Load(), lineno=46, col_offset=24), lineno=46, col_offset=8), If(Compare(Name('exc_type', Load(), lineno=47, col_offset=11), [Is()], [Name('SyntaxError', Load(), lineno=47, col_offset=23)], lineno=47, col_offset=11), [Assign([Name('tbtext', Store(), lineno=48, col_offset=12)], Call(Attribute(Str('', lineno=48, col_offset=21), 'join', Load(), lineno=48, col_offset=21), [Call(Attribute(Name('traceback', Load(), lineno=48, col_offset=29), 'format_exception_only', Load(), lineno=48, col_offset=29), [Name('exc_type', Load(), lineno=48, col_offset=61), Name('exc_value', Load(), lineno=48, col_offset=71)], [], None, None, lineno=48, col_offset=29)], [], None, None, lineno=48, col_offset=21), lineno=48, col_offset=12), Assign([Name('errmsg', Store(), lineno=49, col_offset=12)], Call(Attribute(Name('tbtext', Load(), lineno=49, col_offset=21), 'replace', Load(), lineno=49, col_offset=21), [Str('File "<string>"', lineno=49, col_offset=36), BinOp(Str('File "%s"', lineno=49, col_offset=55), Mod(), Name('file', Load(), lineno=49, col_offset=69), lineno=49, col_offset=55)], [], None, None, lineno=49, col_offset=21), lineno=49, col_offset=12)], [Assign([Name('errmsg', Store(), lineno=51, col_offset=12)], BinOp(Str('Sorry: %s: %s', lineno=51, col_offset=21), Mod(), Tuple([Name('exc_type_name', Load(), lineno=51, col_offset=40), Name('exc_value', Load(), lineno=51, col_offset=54)], Load(), lineno=51, col_offset=40), lineno=51, col_offset=21), lineno=51, col_offset=12)], lineno=47, col_offset=8), Expr(Call(Attribute(Name('Exception', Load(), lineno=53, col_offset=8), '__init__', Load(), lineno=53, col_offset=8), [Name('self', Load(), lineno=53, col_offset=27), BoolOp(Or(), [Name('msg', Load(), lineno=53, col_offset=32), Name('errmsg', Load(), lineno=53, col_offset=39)], lineno=53, col_offset=32), Name('exc_type_name', Load(), lineno=53, col_offset=46), Name('exc_value', Load(), lineno=53, col_offset=60), Name('file', Load(), lineno=53, col_offset=70)], [], None, None, lineno=53, col_offset=8), lineno=53, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=55, col_offset=8), 'exc_type_name', Store(), lineno=55, col_offset=8)], Name('exc_type_name', Load(), lineno=55, col_offset=29), lineno=55, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=56, col_offset=8), 'exc_value', Store(), lineno=56, col_offset=8)], Name('exc_value', Load(), lineno=56, col_offset=25), lineno=56, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=57, col_offset=8), 'file', Store(), lineno=57, col_offset=8)], Name('file', Load(), lineno=57, col_offset=20), lineno=57, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=58, col_offset=8), 'msg', Store(), lineno=58, col_offset=8)], BoolOp(Or(), [Name('msg', Load(), lineno=58, col_offset=19), Name('errmsg', Load(), lineno=58, col_offset=26)], lineno=58, col_offset=19), lineno=58, col_offset=8)], [], lineno=45, col_offset=4), FunctionDef('__str__', arguments([Name('self', Param(), lineno=60, col_offset=16)], None, None, []), [Return(Attribute(Name('self', Load(), lineno=61, col_offset=15), 'msg', Load(), lineno=61, col_offset=15), lineno=61, col_offset=8)], [], lineno=60, col_offset=4)], [], lineno=18, col_offset=0), FunctionDef('wr_long', arguments([Name('f', Param(), lineno=64, col_offset=12), Name('x', Param(), lineno=64, col_offset=15)], None, None, []), [Expr(Str('Internal; write a 32-bit int to a file in little-endian order.', lineno=65, col_offset=4), lineno=65, col_offset=4), Expr(Call(Attribute(Name('f', Load(), lineno=66, col_offset=4), 'write', Load(), lineno=66, col_offset=4), [Call(Name('chr', Load(), lineno=66, col_offset=12), [BinOp(Name('x', Load(), lineno=66, col_offset=17), BitAnd(), Num(255, lineno=66, col_offset=28), lineno=66, col_offset=17)], [], None, None, lineno=66, col_offset=12)], [], None, None, lineno=66, col_offset=4), lineno=66, col_offset=4), Expr(Call(Attribute(Name('f', Load(), lineno=67, col_offset=4), 'write', Load(), lineno=67, col_offset=4), [Call(Name('chr', Load(), lineno=67, col_offset=12), [BinOp(BinOp(Name('x', Load(), lineno=67, col_offset=17), RShift(), Num(8, lineno=67, col_offset=22), lineno=67, col_offset=17), BitAnd(), Num(255, lineno=67, col_offset=28), lineno=67, col_offset=16)], [], None, None, lineno=67, col_offset=12)], [], None, None, lineno=67, col_offset=4), lineno=67, col_offset=4), Expr(Call(Attribute(Name('f', Load(), lineno=68, col_offset=4), 'write', Load(), lineno=68, col_offset=4), [Call(Name('chr', Load(), lineno=68, col_offset=12), [BinOp(BinOp(Name('x', Load(), lineno=68, col_offset=17), RShift(), Num(16, lineno=68, col_offset=22), lineno=68, col_offset=17), BitAnd(), Num(255, lineno=68, col_offset=28), lineno=68, col_offset=16)], [], None, None, lineno=68, col_offset=12)], [], None, None, lineno=68, col_offset=4), lineno=68, col_offset=4), Expr(Call(Attribute(Name('f', Load(), lineno=69, col_offset=4), 'write', Load(), lineno=69, col_offset=4), [Call(Name('chr', Load(), lineno=69, col_offset=12), [BinOp(BinOp(Name('x', Load(), lineno=69, col_offset=17), RShift(), Num(24, lineno=69, col_offset=22), lineno=69, col_offset=17), BitAnd(), Num(255, lineno=69, col_offset=28), lineno=69, col_offset=16)], [], None, None, lineno=69, col_offset=12)], [], None, None, lineno=69, col_offset=4), lineno=69, col_offset=4)], [], lineno=64, col_offset=0), FunctionDef('compile', arguments([Name('file', Param(), lineno=71, col_offset=12), Name('cfile', Param(), lineno=71, col_offset=18), Name('dfile', Param(), lineno=71, col_offset=30), Name('doraise', Param(), lineno=71, col_offset=42)], None, None, [Name('None', Load(), lineno=71, col_offset=24), Name('None', Load(), lineno=71, col_offset=36), Name('False', Load(), lineno=71, col_offset=50)]), [Expr(Str("Byte-compile one Python source file to Python bytecode.\n\n    Arguments:\n\n    file:    source filename\n    cfile:   target filename; defaults to source with 'c' or 'o' appended\n             ('c' normally, 'o' in optimizing mode, giving .pyc or .pyo)\n    dfile:   purported filename; defaults to source (this is the filename\n             that will show up in error messages)\n    doraise: flag indicating whether or not an exception should be\n             raised when a compile error is found. If an exception\n             occurs and this flag is set to False, a string\n             indicating the nature of the exception will be printed,\n             and the function will return to the caller. If an\n             exception occurs and this flag is set to True, a\n             PyCompileError exception will be raised.\n\n    Note that it isn't necessary to byte-compile Python modules for\n    execution efficiency -- Python itself byte-compiles a module when\n    it is loaded, and if it can, writes out the bytecode to the\n    corresponding .pyc (or .pyo) file.\n\n    However, if a Python installation is shared between users, it is a\n    good idea to byte-compile all modules upon installation, since\n    other users may not be able to write in the source directories,\n    and thus they won't be able to write the .pyc/.pyo file, and then\n    they would be byte-compiling every module each time it is loaded.\n    This can slow down program start-up considerably.\n\n    See compileall.py for a script/module that uses this module to\n    byte-compile all installed files (or all files in selected\n    directories).\n\n    ", lineno=105, col_offset=-1), lineno=105, col_offset=-1), With(Call(Name('open', Load(), lineno=106, col_offset=9), [Name('file', Load(), lineno=106, col_offset=14), Str('U', lineno=106, col_offset=20)], [], None, None, lineno=106, col_offset=9), Name('f', Store(), lineno=106, col_offset=28), [TryExcept([Assign([Name('timestamp', Store(), lineno=108, col_offset=12)], Call(Name('long', Load(), lineno=108, col_offset=24), [Attribute(Call(Attribute(Name('os', Load(), lineno=108, col_offset=29), 'fstat', Load(), lineno=108, col_offset=29), [Call(Attribute(Name('f', Load(), lineno=108, col_offset=38), 'fileno', Load(), lineno=108, col_offset=38), [], [], None, None, lineno=108, col_offset=38)], [], None, None, lineno=108, col_offset=29), 'st_mtime', Load(), lineno=108, col_offset=29)], [], None, None, lineno=108, col_offset=24), lineno=108, col_offset=12)], [ExceptHandler(Name('AttributeError', Load(), lineno=109, col_offset=15), None, [Assign([Name('timestamp', Store(), lineno=110, col_offset=12)], Call(Name('long', Load(), lineno=110, col_offset=24), [Attribute(Call(Attribute(Name('os', Load(), lineno=110, col_offset=29), 'stat', Load(), lineno=110, col_offset=29), [Name('file', Load(), lineno=110, col_offset=37)], [], None, None, lineno=110, col_offset=29), 'st_mtime', Load(), lineno=110, col_offset=29)], [], None, None, lineno=110, col_offset=24), lineno=110, col_offset=12)], lineno=109, col_offset=8)], [], lineno=107, col_offset=8), Assign([Name('codestring', Store(), lineno=111, col_offset=8)], Call(Attribute(Name('f', Load(), lineno=111, col_offset=21), 'read', Load(), lineno=111, col_offset=21), [], [], None, None, lineno=111, col_offset=21), lineno=111, col_offset=8)], lineno=106, col_offset=9), TryExcept([Assign([Name('codeobject', Store(), lineno=113, col_offset=8)], Call(Attribute(Name('__builtin__', Load(), lineno=113, col_offset=21), 'compile', Load(), lineno=113, col_offset=21), [Name('codestring', Load(), lineno=113, col_offset=41), BoolOp(Or(), [Name('dfile', Load(), lineno=113, col_offset=53), Name('file', Load(), lineno=113, col_offset=62)], lineno=113, col_offset=53), Str('exec', lineno=113, col_offset=67)], [], None, None, lineno=113, col_offset=21), lineno=113, col_offset=8)], [ExceptHandler(Name('Exception', Load(), lineno=114, col_offset=11), Name('err', Store(), lineno=114, col_offset=21), [Assign([Name('py_exc', Store(), lineno=115, col_offset=8)], Call(Name('PyCompileError', Load(), lineno=115, col_offset=17), [Attribute(Name('err', Load(), lineno=115, col_offset=32), '__class__', Load(), lineno=115, col_offset=32), Attribute(Name('err', Load(), lineno=115, col_offset=46), 'args', Load(), lineno=115, col_offset=46), BoolOp(Or(), [Name('dfile', Load(), lineno=115, col_offset=55), Name('file', Load(), lineno=115, col_offset=64)], lineno=115, col_offset=55)], [], None, None, lineno=115, col_offset=17), lineno=115, col_offset=8), If(Name('doraise', Load(), lineno=116, col_offset=11), [Raise(Name('py_exc', Load(), lineno=117, col_offset=18), None, None, lineno=117, col_offset=12)], [Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=119, col_offset=12), 'stderr', Load(), lineno=119, col_offset=12), 'write', Load(), lineno=119, col_offset=12), [BinOp(Attribute(Name('py_exc', Load(), lineno=119, col_offset=29), 'msg', Load(), lineno=119, col_offset=29), Add(), Str('\n', lineno=119, col_offset=42), lineno=119, col_offset=29)], [], None, None, lineno=119, col_offset=12), lineno=119, col_offset=12), Return(None, lineno=120, col_offset=12)], lineno=116, col_offset=8)], lineno=114, col_offset=4)], [], lineno=112, col_offset=4), If(Compare(Name('cfile', Load(), lineno=121, col_offset=7), [Is()], [Name('None', Load(), lineno=121, col_offset=16)], lineno=121, col_offset=7), [Assign([Name('cfile', Store(), lineno=122, col_offset=8)], BinOp(Name('file', Load(), lineno=122, col_offset=16), Add(), BoolOp(Or(), [BoolOp(And(), [Name('__debug__', Load(), lineno=122, col_offset=24), Str('c', lineno=122, col_offset=38)], lineno=122, col_offset=24), Str('o', lineno=122, col_offset=45)], lineno=122, col_offset=24), lineno=122, col_offset=16), lineno=122, col_offset=8)], [], lineno=121, col_offset=4), With(Call(Name('open', Load(), lineno=123, col_offset=9), [Name('cfile', Load(), lineno=123, col_offset=14), Str('wb', lineno=123, col_offset=21)], [], None, None, lineno=123, col_offset=9), Name('fc', Store(), lineno=123, col_offset=30), [Expr(Call(Attribute(Name('fc', Load(), lineno=124, col_offset=8), 'write', Load(), lineno=124, col_offset=8), [Str('\x00\x00\x00\x00', lineno=124, col_offset=17)], [], None, None, lineno=124, col_offset=8), lineno=124, col_offset=8), Expr(Call(Name('wr_long', Load(), lineno=125, col_offset=8), [Name('fc', Load(), lineno=125, col_offset=16), Name('timestamp', Load(), lineno=125, col_offset=20)], [], None, None, lineno=125, col_offset=8), lineno=125, col_offset=8), Expr(Call(Attribute(Name('marshal', Load(), lineno=126, col_offset=8), 'dump', Load(), lineno=126, col_offset=8), [Name('codeobject', Load(), lineno=126, col_offset=21), Name('fc', Load(), lineno=126, col_offset=33)], [], None, None, lineno=126, col_offset=8), lineno=126, col_offset=8), Expr(Call(Attribute(Name('fc', Load(), lineno=127, col_offset=8), 'flush', Load(), lineno=127, col_offset=8), [], [], None, None, lineno=127, col_offset=8), lineno=127, col_offset=8), Expr(Call(Attribute(Name('fc', Load(), lineno=128, col_offset=8), 'seek', Load(), lineno=128, col_offset=8), [Num(0, lineno=128, col_offset=16), Num(0, lineno=128, col_offset=19)], [], None, None, lineno=128, col_offset=8), lineno=128, col_offset=8), Expr(Call(Attribute(Name('fc', Load(), lineno=129, col_offset=8), 'write', Load(), lineno=129, col_offset=8), [Name('MAGIC', Load(), lineno=129, col_offset=17)], [], None, None, lineno=129, col_offset=8), lineno=129, col_offset=8)], lineno=123, col_offset=9)], [], lineno=71, col_offset=0), FunctionDef('main', arguments([Name('args', Param(), lineno=131, col_offset=9)], None, None, [Name('None', Load(), lineno=131, col_offset=14)]), [Expr(Str("Compile several source files.\n\n    The files named in 'args' (or on the command line, if 'args' is\n    not specified) are compiled and the resulting bytecode is cached\n    in the normal manner.  This function does not search a directory\n    structure to locate source files; it only compiles files named\n    explicitly.  If '-' is the only parameter in args, the list of\n    files is taken from standard input.\n\n    ", lineno=141, col_offset=-1), lineno=141, col_offset=-1), If(Compare(Name('args', Load(), lineno=142, col_offset=7), [Is()], [Name('None', Load(), lineno=142, col_offset=15)], lineno=142, col_offset=7), [Assign([Name('args', Store(), lineno=143, col_offset=8)], Subscript(Attribute(Name('sys', Load(), lineno=143, col_offset=15), 'argv', Load(), lineno=143, col_offset=15), Slice(Num(1, lineno=143, col_offset=24), None, None), Load(), lineno=143, col_offset=15), lineno=143, col_offset=8)], [], lineno=142, col_offset=4), Assign([Name('rv', Store(), lineno=144, col_offset=4)], Num(0, lineno=144, col_offset=9), lineno=144, col_offset=4), If(Compare(Name('args', Load(), lineno=145, col_offset=7), [Eq()], [List([Str('-', lineno=145, col_offset=16)], Load(), lineno=145, col_offset=15)], lineno=145, col_offset=7), [While(Name('True', Load(), lineno=146, col_offset=14), [Assign([Name('filename', Store(), lineno=147, col_offset=12)], Call(Attribute(Attribute(Name('sys', Load(), lineno=147, col_offset=23), 'stdin', Load(), lineno=147, col_offset=23), 'readline', Load(), lineno=147, col_offset=23), [], [], None, None, lineno=147, col_offset=23), lineno=147, col_offset=12), If(UnaryOp(Not(), Name('filename', Load(), lineno=148, col_offset=19), lineno=148, col_offset=15), [Break( lineno=149, col_offset=16)], [], lineno=148, col_offset=12), Assign([Name('filename', Store(), lineno=150, col_offset=12)], Call(Attribute(Name('filename', Load(), lineno=150, col_offset=23), 'rstrip', Load(), lineno=150, col_offset=23), [Str('\n', lineno=150, col_offset=39)], [], None, None, lineno=150, col_offset=23), lineno=150, col_offset=12), TryExcept([Expr(Call(Name('compile', Load(), lineno=152, col_offset=16), [Name('filename', Load(), lineno=152, col_offset=24)], [keyword('doraise', Name('True', Load(), lineno=152, col_offset=42))], None, None, lineno=152, col_offset=16), lineno=152, col_offset=16)], [ExceptHandler(Name('PyCompileError', Load(), lineno=153, col_offset=19), Name('error', Store(), lineno=153, col_offset=37), [Assign([Name('rv', Store(), lineno=154, col_offset=16)], Num(1, lineno=154, col_offset=21), lineno=154, col_offset=16), Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=155, col_offset=16), 'stderr', Load(), lineno=155, col_offset=16), 'write', Load(), lineno=155, col_offset=16), [BinOp(Str('%s\n', lineno=155, col_offset=33), Mod(), Attribute(Name('error', Load(), lineno=155, col_offset=42), 'msg', Load(), lineno=155, col_offset=42), lineno=155, col_offset=33)], [], None, None, lineno=155, col_offset=16), lineno=155, col_offset=16)], lineno=153, col_offset=12), ExceptHandler(Name('IOError', Load(), lineno=156, col_offset=19), Name('error', Store(), lineno=156, col_offset=30), [Assign([Name('rv', Store(), lineno=157, col_offset=16)], Num(1, lineno=157, col_offset=21), lineno=157, col_offset=16), Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=158, col_offset=16), 'stderr', Load(), lineno=158, col_offset=16), 'write', Load(), lineno=158, col_offset=16), [BinOp(Str('%s\n', lineno=158, col_offset=33), Mod(), Name('error', Load(), lineno=158, col_offset=42), lineno=158, col_offset=33)], [], None, None, lineno=158, col_offset=16), lineno=158, col_offset=16)], lineno=156, col_offset=12)], [], lineno=151, col_offset=12)], [], lineno=146, col_offset=8)], [For(Name('filename', Store(), lineno=160, col_offset=12), Name('args', Load(), lineno=160, col_offset=24), [TryExcept([Expr(Call(Name('compile', Load(), lineno=162, col_offset=16), [Name('filename', Load(), lineno=162, col_offset=24)], [keyword('doraise', Name('True', Load(), lineno=162, col_offset=42))], None, None, lineno=162, col_offset=16), lineno=162, col_offset=16)], [ExceptHandler(Name('PyCompileError', Load(), lineno=163, col_offset=19), Name('error', Store(), lineno=163, col_offset=37), [Assign([Name('rv', Store(), lineno=165, col_offset=16)], Num(1, lineno=165, col_offset=21), lineno=165, col_offset=16), Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=166, col_offset=16), 'stderr', Load(), lineno=166, col_offset=16), 'write', Load(), lineno=166, col_offset=16), [Attribute(Name('error', Load(), lineno=166, col_offset=33), 'msg', Load(), lineno=166, col_offset=33)], [], None, None, lineno=166, col_offset=16), lineno=166, col_offset=16)], lineno=163, col_offset=12)], [], lineno=161, col_offset=12)], [], lineno=160, col_offset=8)], lineno=145, col_offset=4), Return(Name('rv', Load(), lineno=167, col_offset=11), lineno=167, col_offset=4)], [], lineno=131, col_offset=0), If(Compare(Name('__name__', Load(), lineno=169, col_offset=3), [Eq()], [Str('__main__', lineno=169, col_offset=15)], lineno=169, col_offset=3), [Expr(Call(Attribute(Name('sys', Load(), lineno=170, col_offset=4), 'exit', Load(), lineno=170, col_offset=4), [Call(Name('main', Load(), lineno=170, col_offset=13), [], [], None, None, lineno=170, col_offset=13)], [], None, None, lineno=170, col_offset=4), lineno=170, col_offset=4)], [], lineno=169, col_offset=0)])
