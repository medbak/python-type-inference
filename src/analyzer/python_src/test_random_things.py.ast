Module([ImportFrom('ctypes', [alias('*', None)], 0, lineno=1, col_offset=0), Import([alias('unittest', None), alias('sys', None)], lineno=2, col_offset=0), FunctionDef('callback_func', arguments([Name('arg', Param(), lineno=4, col_offset=18)], None, None, []), [Expr(BinOp(Num(42, lineno=5, col_offset=4), FloorDiv(), Name('arg', Load(), lineno=5, col_offset=10), lineno=5, col_offset=4), lineno=5, col_offset=4), Raise(Call(Name('ValueError', Load(), lineno=6, col_offset=10), [Name('arg', Load(), lineno=6, col_offset=21)], [], None, None, lineno=6, col_offset=10), None, None, lineno=6, col_offset=4)], [], lineno=4, col_offset=0), If(Compare(Attribute(Name('sys', Load(), lineno=8, col_offset=3), 'platform', Load(), lineno=8, col_offset=3), [Eq()], [Str('win32', lineno=8, col_offset=19)], lineno=8, col_offset=3), [ClassDef('call_function_TestCase', [Attribute(Name('unittest', Load(), lineno=10, col_offset=33), 'TestCase', Load(), lineno=10, col_offset=33)], [FunctionDef('test', arguments([Name('self', Param(), lineno=14, col_offset=17)], None, None, []), [ImportFrom('_ctypes', [alias('call_function', None)], 0, lineno=15, col_offset=12), Assign([Attribute(Attribute(Attribute(Name('windll', Load(), lineno=16, col_offset=12), 'kernel32', Load(), lineno=16, col_offset=12), 'LoadLibraryA', Load(), lineno=16, col_offset=12), 'restype', Store(), lineno=16, col_offset=12)], Name('c_void_p', Load(), lineno=16, col_offset=51), lineno=16, col_offset=12), Assign([Attribute(Attribute(Attribute(Name('windll', Load(), lineno=17, col_offset=12), 'kernel32', Load(), lineno=17, col_offset=12), 'GetProcAddress', Load(), lineno=17, col_offset=12), 'argtypes', Store(), lineno=17, col_offset=12)], Tuple([Name('c_void_p', Load(), lineno=17, col_offset=54), Name('c_char_p', Load(), lineno=17, col_offset=64)], Load(), lineno=17, col_offset=54), lineno=17, col_offset=12), Assign([Attribute(Attribute(Attribute(Name('windll', Load(), lineno=18, col_offset=12), 'kernel32', Load(), lineno=18, col_offset=12), 'GetProcAddress', Load(), lineno=18, col_offset=12), 'restype', Store(), lineno=18, col_offset=12)], Name('c_void_p', Load(), lineno=18, col_offset=53), lineno=18, col_offset=12), Assign([Name('hdll', Store(), lineno=20, col_offset=12)], Call(Attribute(Attribute(Name('windll', Load(), lineno=20, col_offset=19), 'kernel32', Load(), lineno=20, col_offset=19), 'LoadLibraryA', Load(), lineno=20, col_offset=19), [Str('kernel32', lineno=20, col_offset=48)], [], None, None, lineno=20, col_offset=19), lineno=20, col_offset=12), Assign([Name('funcaddr', Store(), lineno=21, col_offset=12)], Call(Attribute(Attribute(Name('windll', Load(), lineno=21, col_offset=23), 'kernel32', Load(), lineno=21, col_offset=23), 'GetProcAddress', Load(), lineno=21, col_offset=23), [Name('hdll', Load(), lineno=21, col_offset=54), Str('GetModuleHandleA', lineno=21, col_offset=60)], [], None, None, lineno=21, col_offset=23), lineno=21, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=23, col_offset=12), 'assertEqual', Load(), lineno=23, col_offset=12), [Call(Name('call_function', Load(), lineno=23, col_offset=29), [Name('funcaddr', Load(), lineno=23, col_offset=43), Tuple([Name('None', Load(), lineno=23, col_offset=54)], Load(), lineno=23, col_offset=54)], [], None, None, lineno=23, col_offset=29), Call(Attribute(Attribute(Name('windll', Load(), lineno=24, col_offset=33), 'kernel32', Load(), lineno=24, col_offset=33), 'GetModuleHandleA', Load(), lineno=24, col_offset=33), [Name('None', Load(), lineno=24, col_offset=66)], [], None, None, lineno=24, col_offset=33)], [], None, None, lineno=23, col_offset=12), lineno=23, col_offset=12)], [], lineno=14, col_offset=8)], [], lineno=10, col_offset=4)], [], lineno=8, col_offset=0), ClassDef('CallbackTracbackTestCase', [Attribute(Name('unittest', Load(), lineno=26, col_offset=31), 'TestCase', Load(), lineno=26, col_offset=31)], [FunctionDef('capture_stderr', arguments([Name('self', Param(), lineno=38, col_offset=23), Name('func', Param(), lineno=38, col_offset=29)], 'args', 'kw', []), [Import([alias('StringIO', None)], lineno=40, col_offset=8), Assign([Name('old_stderr', Store(), lineno=41, col_offset=8)], Attribute(Name('sys', Load(), lineno=41, col_offset=21), 'stderr', Load(), lineno=41, col_offset=21), lineno=41, col_offset=8), Assign([Name('logger', Store(), lineno=42, col_offset=8), Attribute(Name('sys', Load(), lineno=42, col_offset=17), 'stderr', Store(), lineno=42, col_offset=17)], Call(Attribute(Name('StringIO', Load(), lineno=42, col_offset=30), 'StringIO', Load(), lineno=42, col_offset=30), [], [], None, None, lineno=42, col_offset=30), lineno=42, col_offset=8), TryFinally([Expr(Call(Name('func', Load(), lineno=44, col_offset=12), [], [], Name('args', Load(), lineno=44, col_offset=18), Name('kw', Load(), lineno=44, col_offset=26), lineno=44, col_offset=12), lineno=44, col_offset=12)], [Assign([Attribute(Name('sys', Load(), lineno=46, col_offset=12), 'stderr', Store(), lineno=46, col_offset=12)], Name('old_stderr', Load(), lineno=46, col_offset=25), lineno=46, col_offset=12)], lineno=43, col_offset=8), Return(Call(Attribute(Name('logger', Load(), lineno=47, col_offset=15), 'getvalue', Load(), lineno=47, col_offset=15), [], [], None, None, lineno=47, col_offset=15), lineno=47, col_offset=8)], [], lineno=38, col_offset=4), FunctionDef('test_ValueError', arguments([Name('self', Param(), lineno=49, col_offset=24)], None, None, []), [Assign([Name('cb', Store(), lineno=50, col_offset=8)], Call(Call(Name('CFUNCTYPE', Load(), lineno=50, col_offset=13), [Name('c_int', Load(), lineno=50, col_offset=23), Name('c_int', Load(), lineno=50, col_offset=30)], [], None, None, lineno=50, col_offset=13), [Name('callback_func', Load(), lineno=50, col_offset=37)], [], None, None, lineno=50, col_offset=13), lineno=50, col_offset=8), Assign([Name('out', Store(), lineno=51, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=51, col_offset=14), 'capture_stderr', Load(), lineno=51, col_offset=14), [Name('cb', Load(), lineno=51, col_offset=34), Num(42, lineno=51, col_offset=38)], [], None, None, lineno=51, col_offset=14), lineno=51, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=52, col_offset=8), 'assertEqual', Load(), lineno=52, col_offset=8), [Subscript(Call(Attribute(Name('out', Load(), lineno=52, col_offset=25), 'splitlines', Load(), lineno=52, col_offset=25), [], [], None, None, lineno=52, col_offset=25), Index(Num(-1, lineno=52, col_offset=43)), Load(), lineno=52, col_offset=25), Str('ValueError: 42', lineno=53, col_offset=29)], [], None, None, lineno=52, col_offset=8), lineno=52, col_offset=8)], [], lineno=49, col_offset=4), FunctionDef('test_IntegerDivisionError', arguments([Name('self', Param(), lineno=55, col_offset=34)], None, None, []), [Assign([Name('cb', Store(), lineno=56, col_offset=8)], Call(Call(Name('CFUNCTYPE', Load(), lineno=56, col_offset=13), [Name('c_int', Load(), lineno=56, col_offset=23), Name('c_int', Load(), lineno=56, col_offset=30)], [], None, None, lineno=56, col_offset=13), [Name('callback_func', Load(), lineno=56, col_offset=37)], [], None, None, lineno=56, col_offset=13), lineno=56, col_offset=8), Assign([Name('out', Store(), lineno=57, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=57, col_offset=14), 'capture_stderr', Load(), lineno=57, col_offset=14), [Name('cb', Load(), lineno=57, col_offset=34), Num(0, lineno=57, col_offset=38)], [], None, None, lineno=57, col_offset=14), lineno=57, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=58, col_offset=8), 'assertEqual', Load(), lineno=58, col_offset=8), [Subscript(Subscript(Call(Attribute(Name('out', Load(), lineno=58, col_offset=25), 'splitlines', Load(), lineno=58, col_offset=25), [], [], None, None, lineno=58, col_offset=25), Index(Num(-1, lineno=58, col_offset=43)), Load(), lineno=58, col_offset=25), Slice(None, Num(19, lineno=58, col_offset=47), None), Load(), lineno=58, col_offset=25), Str('ZeroDivisionError: ', lineno=59, col_offset=29)], [], None, None, lineno=58, col_offset=8), lineno=58, col_offset=8)], [], lineno=55, col_offset=4), FunctionDef('test_FloatDivisionError', arguments([Name('self', Param(), lineno=61, col_offset=32)], None, None, []), [Assign([Name('cb', Store(), lineno=62, col_offset=8)], Call(Call(Name('CFUNCTYPE', Load(), lineno=62, col_offset=13), [Name('c_int', Load(), lineno=62, col_offset=23), Name('c_double', Load(), lineno=62, col_offset=30)], [], None, None, lineno=62, col_offset=13), [Name('callback_func', Load(), lineno=62, col_offset=40)], [], None, None, lineno=62, col_offset=13), lineno=62, col_offset=8), Assign([Name('out', Store(), lineno=63, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=63, col_offset=14), 'capture_stderr', Load(), lineno=63, col_offset=14), [Name('cb', Load(), lineno=63, col_offset=34), Num(0.0, lineno=63, col_offset=38)], [], None, None, lineno=63, col_offset=14), lineno=63, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=64, col_offset=8), 'assertEqual', Load(), lineno=64, col_offset=8), [Subscript(Subscript(Call(Attribute(Name('out', Load(), lineno=64, col_offset=25), 'splitlines', Load(), lineno=64, col_offset=25), [], [], None, None, lineno=64, col_offset=25), Index(Num(-1, lineno=64, col_offset=43)), Load(), lineno=64, col_offset=25), Slice(None, Num(19, lineno=64, col_offset=47), None), Load(), lineno=64, col_offset=25), Str('ZeroDivisionError: ', lineno=65, col_offset=29)], [], None, None, lineno=64, col_offset=8), lineno=64, col_offset=8)], [], lineno=61, col_offset=4), FunctionDef('test_TypeErrorDivisionError', arguments([Name('self', Param(), lineno=67, col_offset=36)], None, None, []), [Assign([Name('cb', Store(), lineno=68, col_offset=8)], Call(Call(Name('CFUNCTYPE', Load(), lineno=68, col_offset=13), [Name('c_int', Load(), lineno=68, col_offset=23), Name('c_char_p', Load(), lineno=68, col_offset=30)], [], None, None, lineno=68, col_offset=13), [Name('callback_func', Load(), lineno=68, col_offset=40)], [], None, None, lineno=68, col_offset=13), lineno=68, col_offset=8), Assign([Name('out', Store(), lineno=69, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=69, col_offset=14), 'capture_stderr', Load(), lineno=69, col_offset=14), [Name('cb', Load(), lineno=69, col_offset=34), Str('spam', lineno=69, col_offset=38)], [], None, None, lineno=69, col_offset=14), lineno=69, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=70, col_offset=8), 'assertEqual', Load(), lineno=70, col_offset=8), [Subscript(Call(Attribute(Name('out', Load(), lineno=70, col_offset=25), 'splitlines', Load(), lineno=70, col_offset=25), [], [], None, None, lineno=70, col_offset=25), Index(Num(-1, lineno=70, col_offset=43)), Load(), lineno=70, col_offset=25), Str("TypeError: unsupported operand type(s) for //: 'int' and 'str'", lineno=71, col_offset=29)], [], None, None, lineno=70, col_offset=8), lineno=70, col_offset=8)], [], lineno=67, col_offset=4)], [], lineno=26, col_offset=0), If(Compare(Name('__name__', Load(), lineno=74, col_offset=3), [Eq()], [Str('__main__', lineno=74, col_offset=15)], lineno=74, col_offset=3), [Expr(Call(Attribute(Name('unittest', Load(), lineno=75, col_offset=4), 'main', Load(), lineno=75, col_offset=4), [], [], None, None, lineno=75, col_offset=4), lineno=75, col_offset=4)], [], lineno=74, col_offset=0)])
