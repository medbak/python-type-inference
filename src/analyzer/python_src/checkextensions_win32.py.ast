Module([Expr(Str('Extension management for Windows.\n\nUnder Windows it is unlikely the .obj files are of use, as special compiler options\nare needed (primarily to toggle the behavior of "public" symbols.\n\nI dont consider it worth parsing the MSVC makefiles for compiler options.  Even if\nwe get it just right, a specific freeze application may have specific compiler\noptions anyway (eg, to enable or disable specific functionality)\n\nSo my basic stragtegy is:\n\n* Have some Windows INI files which "describe" one or more extension modules.\n  (Freeze comes with a default one for all known modules - but you can specify\n  your own).\n* This description can include:\n  - The MSVC .dsp file for the extension.  The .c source file names\n    are extraced from there.\n  - Specific compiler/linker options\n  - Flag to indicate if Unicode compilation is expected.\n\nAt the moment the name and location of this INI file is hardcoded,\nbut an obvious enhancement would be to provide command line options.\n', lineno=23, col_offset=-1), lineno=23, col_offset=-1), Import([alias('os', None), alias('sys', None)], lineno=25, col_offset=0), TryExcept([Import([alias('win32api', None)], lineno=27, col_offset=4)], [ExceptHandler(Name('ImportError', Load(), lineno=28, col_offset=7), None, [Assign([Name('win32api', Store(), lineno=29, col_offset=4)], Name('None', Load(), lineno=29, col_offset=15), lineno=29, col_offset=4)], lineno=28, col_offset=0)], [], lineno=26, col_offset=0), ClassDef('CExtension', [], [Expr(Str('An abstraction of an extension implemented in C/C++\n    ', lineno=33, col_offset=-1), lineno=33, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=34, col_offset=17), Name('name', Param(), lineno=34, col_offset=23), Name('sourceFiles', Param(), lineno=34, col_offset=29)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=35, col_offset=8), 'name', Store(), lineno=35, col_offset=8)], Name('name', Load(), lineno=35, col_offset=20), lineno=35, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=37, col_offset=8), 'sourceFiles', Store(), lineno=37, col_offset=8)], Name('sourceFiles', Load(), lineno=37, col_offset=27), lineno=37, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=40, col_offset=8), 'compilerOptions', Store(), lineno=40, col_offset=8)], List([], Load(), lineno=40, col_offset=31), lineno=40, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=42, col_offset=8), 'linkerLibs', Store(), lineno=42, col_offset=8)], List([], Load(), lineno=42, col_offset=26), lineno=42, col_offset=8)], [], lineno=34, col_offset=4), FunctionDef('GetSourceFiles', arguments([Name('self', Param(), lineno=44, col_offset=23)], None, None, []), [Return(Attribute(Name('self', Load(), lineno=45, col_offset=15), 'sourceFiles', Load(), lineno=45, col_offset=15), lineno=45, col_offset=8)], [], lineno=44, col_offset=4), FunctionDef('AddCompilerOption', arguments([Name('self', Param(), lineno=47, col_offset=26), Name('option', Param(), lineno=47, col_offset=32)], None, None, []), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=48, col_offset=8), 'compilerOptions', Load(), lineno=48, col_offset=8), 'append', Load(), lineno=48, col_offset=8), [Name('option', Load(), lineno=48, col_offset=36)], [], None, None, lineno=48, col_offset=8), lineno=48, col_offset=8)], [], lineno=47, col_offset=4), FunctionDef('GetCompilerOptions', arguments([Name('self', Param(), lineno=49, col_offset=27)], None, None, []), [Return(Attribute(Name('self', Load(), lineno=50, col_offset=15), 'compilerOptions', Load(), lineno=50, col_offset=15), lineno=50, col_offset=8)], [], lineno=49, col_offset=4), FunctionDef('AddLinkerLib', arguments([Name('self', Param(), lineno=52, col_offset=21), Name('lib', Param(), lineno=52, col_offset=27)], None, None, []), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=53, col_offset=8), 'linkerLibs', Load(), lineno=53, col_offset=8), 'append', Load(), lineno=53, col_offset=8), [Name('lib', Load(), lineno=53, col_offset=31)], [], None, None, lineno=53, col_offset=8), lineno=53, col_offset=8)], [], lineno=52, col_offset=4), FunctionDef('GetLinkerLibs', arguments([Name('self', Param(), lineno=54, col_offset=22)], None, None, []), [Return(Attribute(Name('self', Load(), lineno=55, col_offset=15), 'linkerLibs', Load(), lineno=55, col_offset=15), lineno=55, col_offset=8)], [], lineno=54, col_offset=4)], [], lineno=31, col_offset=0), FunctionDef('checkextensions', arguments([Name('unknown', Param(), lineno=57, col_offset=20), Name('extra_inis', Param(), lineno=57, col_offset=29), Name('prefix', Param(), lineno=57, col_offset=41)], None, None, []), [Assign([Name('defaultMapName', Store(), lineno=60, col_offset=4)], Call(Attribute(Attribute(Name('os', Load(), lineno=60, col_offset=21), 'path', Load(), lineno=60, col_offset=21), 'join', Load(), lineno=60, col_offset=21), [Subscript(Call(Attribute(Attribute(Name('os', Load(), lineno=60, col_offset=35), 'path', Load(), lineno=60, col_offset=35), 'split', Load(), lineno=60, col_offset=35), [Subscript(Attribute(Name('sys', Load(), lineno=60, col_offset=49), 'argv', Load(), lineno=60, col_offset=49), Index(Num(0, lineno=60, col_offset=58)), Load(), lineno=60, col_offset=49)], [], None, None, lineno=60, col_offset=35), Index(Num(0, lineno=60, col_offset=62)), Load(), lineno=60, col_offset=35), Str('extensions_win32.ini', lineno=60, col_offset=66)], [], None, None, lineno=60, col_offset=21), lineno=60, col_offset=4), If(UnaryOp(Not(), Call(Attribute(Attribute(Name('os', Load(), lineno=61, col_offset=11), 'path', Load(), lineno=61, col_offset=11), 'isfile', Load(), lineno=61, col_offset=11), [Name('defaultMapName', Load(), lineno=61, col_offset=26)], [], None, None, lineno=61, col_offset=11), lineno=61, col_offset=7), [Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=62, col_offset=8), 'stderr', Load(), lineno=62, col_offset=8), 'write', Load(), lineno=62, col_offset=8), [BinOp(Str('WARNING: %s can not be found - standard extensions may not be found\n', lineno=62, col_offset=25), Mod(), Name('defaultMapName', Load(), lineno=62, col_offset=99), lineno=62, col_offset=25)], [], None, None, lineno=62, col_offset=8), lineno=62, col_offset=8)], [Expr(Call(Attribute(Name('extra_inis', Load(), lineno=65, col_offset=8), 'append', Load(), lineno=65, col_offset=8), [Name('defaultMapName', Load(), lineno=65, col_offset=26)], [], None, None, lineno=65, col_offset=8), lineno=65, col_offset=8)], lineno=61, col_offset=4), Assign([Name('ret', Store(), lineno=67, col_offset=4)], List([], Load(), lineno=67, col_offset=10), lineno=67, col_offset=4), For(Name('mod', Store(), lineno=68, col_offset=8), Name('unknown', Load(), lineno=68, col_offset=15), [For(Name('ini', Store(), lineno=69, col_offset=12), Name('extra_inis', Load(), lineno=69, col_offset=19), [Assign([Name('defn', Store(), lineno=71, col_offset=12)], Call(Name('get_extension_defn', Load(), lineno=71, col_offset=19), [Name('mod', Load(), lineno=71, col_offset=39), Name('ini', Load(), lineno=71, col_offset=44), Name('prefix', Load(), lineno=71, col_offset=49)], [], None, None, lineno=71, col_offset=19), lineno=71, col_offset=12), If(Compare(Name('defn', Load(), lineno=72, col_offset=15), [IsNot()], [Name('None', Load(), lineno=72, col_offset=27)], lineno=72, col_offset=15), [Expr(Call(Attribute(Name('ret', Load(), lineno=74, col_offset=16), 'append', Load(), lineno=74, col_offset=16), [Name('defn', Load(), lineno=74, col_offset=28)], [], None, None, lineno=74, col_offset=16), lineno=74, col_offset=16), Break( lineno=75, col_offset=16)], [], lineno=72, col_offset=12)], [Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=78, col_offset=12), 'stderr', Load(), lineno=78, col_offset=12), 'write', Load(), lineno=78, col_offset=12), [BinOp(Str('No definition of module %s in any specified map file.\n', lineno=78, col_offset=29), Mod(), Name('mod', Load(), lineno=78, col_offset=90), lineno=78, col_offset=29)], [], None, None, lineno=78, col_offset=12), lineno=78, col_offset=12)], lineno=69, col_offset=8)], [], lineno=68, col_offset=4), Return(Name('ret', Load(), lineno=80, col_offset=11), lineno=80, col_offset=4)], [], lineno=57, col_offset=0), FunctionDef('get_extension_defn', arguments([Name('moduleName', Param(), lineno=82, col_offset=23), Name('mapFileName', Param(), lineno=82, col_offset=35), Name('prefix', Param(), lineno=82, col_offset=48)], None, None, []), [If(Compare(Name('win32api', Load(), lineno=83, col_offset=7), [Is()], [Name('None', Load(), lineno=83, col_offset=19)], lineno=83, col_offset=7), [Return(Name('None', Load(), lineno=83, col_offset=32), lineno=83, col_offset=25)], [], lineno=83, col_offset=4), Assign([Subscript(Attribute(Name('os', Load(), lineno=84, col_offset=4), 'environ', Load(), lineno=84, col_offset=4), Index(Str('PYTHONPREFIX', lineno=84, col_offset=15)), Store(), lineno=84, col_offset=4)], Name('prefix', Load(), lineno=84, col_offset=33), lineno=84, col_offset=4), Assign([Name('dsp', Store(), lineno=85, col_offset=4)], Call(Attribute(Name('win32api', Load(), lineno=85, col_offset=10), 'GetProfileVal', Load(), lineno=85, col_offset=10), [Name('moduleName', Load(), lineno=85, col_offset=33), Str('dsp', lineno=85, col_offset=45), Str('', lineno=85, col_offset=52), Name('mapFileName', Load(), lineno=85, col_offset=56)], [], None, None, lineno=85, col_offset=10), lineno=85, col_offset=4), If(Compare(Name('dsp', Load(), lineno=86, col_offset=7), [Eq()], [Str('', lineno=86, col_offset=12)], lineno=86, col_offset=7), [Return(Name('None', Load(), lineno=87, col_offset=15), lineno=87, col_offset=8)], [], lineno=86, col_offset=4), Assign([Name('dsp', Store(), lineno=90, col_offset=4)], Call(Attribute(Name('win32api', Load(), lineno=90, col_offset=10), 'ExpandEnvironmentStrings', Load(), lineno=90, col_offset=10), [Name('dsp', Load(), lineno=90, col_offset=44)], [], None, None, lineno=90, col_offset=10), lineno=90, col_offset=4), If(UnaryOp(Not(), Call(Attribute(Attribute(Name('os', Load(), lineno=93, col_offset=11), 'path', Load(), lineno=93, col_offset=11), 'isabs', Load(), lineno=93, col_offset=11), [Name('dsp', Load(), lineno=93, col_offset=25)], [], None, None, lineno=93, col_offset=11), lineno=93, col_offset=7), [Assign([Name('dsp', Store(), lineno=94, col_offset=8)], Call(Attribute(Attribute(Name('os', Load(), lineno=94, col_offset=14), 'path', Load(), lineno=94, col_offset=14), 'join', Load(), lineno=94, col_offset=14), [Subscript(Call(Attribute(Attribute(Name('os', Load(), lineno=94, col_offset=28), 'path', Load(), lineno=94, col_offset=28), 'split', Load(), lineno=94, col_offset=28), [Name('mapFileName', Load(), lineno=94, col_offset=42)], [], None, None, lineno=94, col_offset=28), Index(Num(0, lineno=94, col_offset=55)), Load(), lineno=94, col_offset=28), Name('dsp', Load(), lineno=94, col_offset=59)], [], None, None, lineno=94, col_offset=14), lineno=94, col_offset=8)], [], lineno=93, col_offset=4), Assign([Name('sourceFiles', Store(), lineno=96, col_offset=4)], Call(Name('parse_dsp', Load(), lineno=96, col_offset=18), [Name('dsp', Load(), lineno=96, col_offset=28)], [], None, None, lineno=96, col_offset=18), lineno=96, col_offset=4), If(Compare(Name('sourceFiles', Load(), lineno=97, col_offset=7), [Is()], [Name('None', Load(), lineno=97, col_offset=22)], lineno=97, col_offset=7), [Return(Name('None', Load(), lineno=98, col_offset=15), lineno=98, col_offset=8)], [], lineno=97, col_offset=4), Assign([Name('module', Store(), lineno=100, col_offset=4)], Call(Name('CExtension', Load(), lineno=100, col_offset=13), [Name('moduleName', Load(), lineno=100, col_offset=24), Name('sourceFiles', Load(), lineno=100, col_offset=36)], [], None, None, lineno=100, col_offset=13), lineno=100, col_offset=4), Assign([Subscript(Attribute(Name('os', Load(), lineno=102, col_offset=4), 'environ', Load(), lineno=102, col_offset=4), Index(Str('dsp_path', lineno=102, col_offset=15)), Store(), lineno=102, col_offset=4)], Subscript(Call(Attribute(Attribute(Name('os', Load(), lineno=102, col_offset=29), 'path', Load(), lineno=102, col_offset=29), 'split', Load(), lineno=102, col_offset=29), [Name('dsp', Load(), lineno=102, col_offset=43)], [], None, None, lineno=102, col_offset=29), Index(Num(0, lineno=102, col_offset=48)), Load(), lineno=102, col_offset=29), lineno=102, col_offset=4), Assign([Subscript(Attribute(Name('os', Load(), lineno=103, col_offset=4), 'environ', Load(), lineno=103, col_offset=4), Index(Str('ini_path', lineno=103, col_offset=15)), Store(), lineno=103, col_offset=4)], Subscript(Call(Attribute(Attribute(Name('os', Load(), lineno=103, col_offset=29), 'path', Load(), lineno=103, col_offset=29), 'split', Load(), lineno=103, col_offset=29), [Name('mapFileName', Load(), lineno=103, col_offset=43)], [], None, None, lineno=103, col_offset=29), Index(Num(0, lineno=103, col_offset=56)), Load(), lineno=103, col_offset=29), lineno=103, col_offset=4), Assign([Name('cl_options', Store(), lineno=105, col_offset=4)], Call(Attribute(Name('win32api', Load(), lineno=105, col_offset=17), 'GetProfileVal', Load(), lineno=105, col_offset=17), [Name('moduleName', Load(), lineno=105, col_offset=40), Str('cl', lineno=105, col_offset=52), Str('', lineno=105, col_offset=58), Name('mapFileName', Load(), lineno=105, col_offset=62)], [], None, None, lineno=105, col_offset=17), lineno=105, col_offset=4), If(Name('cl_options', Load(), lineno=106, col_offset=7), [Expr(Call(Attribute(Name('module', Load(), lineno=107, col_offset=8), 'AddCompilerOption', Load(), lineno=107, col_offset=8), [Call(Attribute(Name('win32api', Load(), lineno=107, col_offset=33), 'ExpandEnvironmentStrings', Load(), lineno=107, col_offset=33), [Name('cl_options', Load(), lineno=107, col_offset=67)], [], None, None, lineno=107, col_offset=33)], [], None, None, lineno=107, col_offset=8), lineno=107, col_offset=8)], [], lineno=106, col_offset=4), Assign([Name('exclude', Store(), lineno=109, col_offset=4)], Call(Attribute(Name('win32api', Load(), lineno=109, col_offset=14), 'GetProfileVal', Load(), lineno=109, col_offset=14), [Name('moduleName', Load(), lineno=109, col_offset=37), Str('exclude', lineno=109, col_offset=49), Str('', lineno=109, col_offset=60), Name('mapFileName', Load(), lineno=109, col_offset=64)], [], None, None, lineno=109, col_offset=14), lineno=109, col_offset=4), Assign([Name('exclude', Store(), lineno=110, col_offset=4)], Call(Attribute(Name('exclude', Load(), lineno=110, col_offset=14), 'split', Load(), lineno=110, col_offset=14), [], [], None, None, lineno=110, col_offset=14), lineno=110, col_offset=4), If(Call(Attribute(Name('win32api', Load(), lineno=112, col_offset=7), 'GetProfileVal', Load(), lineno=112, col_offset=7), [Name('moduleName', Load(), lineno=112, col_offset=30), Str('Unicode', lineno=112, col_offset=42), Num(0, lineno=112, col_offset=53), Name('mapFileName', Load(), lineno=112, col_offset=56)], [], None, None, lineno=112, col_offset=7), [Expr(Call(Attribute(Name('module', Load(), lineno=113, col_offset=8), 'AddCompilerOption', Load(), lineno=113, col_offset=8), [Str('/D UNICODE /D _UNICODE', lineno=113, col_offset=33)], [], None, None, lineno=113, col_offset=8), lineno=113, col_offset=8)], [], lineno=112, col_offset=4), Assign([Name('libs', Store(), lineno=115, col_offset=4)], Call(Attribute(Call(Attribute(Name('win32api', Load(), lineno=115, col_offset=11), 'GetProfileVal', Load(), lineno=115, col_offset=11), [Name('moduleName', Load(), lineno=115, col_offset=34), Str('libs', lineno=115, col_offset=46), Str('', lineno=115, col_offset=54), Name('mapFileName', Load(), lineno=115, col_offset=58)], [], None, None, lineno=115, col_offset=11), 'split', Load(), lineno=115, col_offset=11), [], [], None, None, lineno=115, col_offset=11), lineno=115, col_offset=4), For(Name('lib', Store(), lineno=116, col_offset=8), Name('libs', Load(), lineno=116, col_offset=15), [Expr(Call(Attribute(Name('module', Load(), lineno=117, col_offset=8), 'AddLinkerLib', Load(), lineno=117, col_offset=8), [Call(Attribute(Name('win32api', Load(), lineno=117, col_offset=28), 'ExpandEnvironmentStrings', Load(), lineno=117, col_offset=28), [Name('lib', Load(), lineno=117, col_offset=62)], [], None, None, lineno=117, col_offset=28)], [], None, None, lineno=117, col_offset=8), lineno=117, col_offset=8)], [], lineno=116, col_offset=4), For(Name('exc', Store(), lineno=119, col_offset=8), Name('exclude', Load(), lineno=119, col_offset=15), [If(Compare(Name('exc', Load(), lineno=120, col_offset=11), [In()], [Attribute(Name('module', Load(), lineno=120, col_offset=18), 'sourceFiles', Load(), lineno=120, col_offset=18)], lineno=120, col_offset=11), [Expr(Call(Attribute(Attribute(Name('modules', Load(), lineno=121, col_offset=12), 'sourceFiles', Load(), lineno=121, col_offset=12), 'remove', Load(), lineno=121, col_offset=12), [Name('exc', Load(), lineno=121, col_offset=39)], [], None, None, lineno=121, col_offset=12), lineno=121, col_offset=12)], [], lineno=120, col_offset=8)], [], lineno=119, col_offset=4), Return(Name('module', Load(), lineno=123, col_offset=11), lineno=123, col_offset=4)], [], lineno=82, col_offset=0), FunctionDef('parse_dsp', arguments([Name('dsp', Param(), lineno=127, col_offset=14)], None, None, []), [Assign([Name('ret', Store(), lineno=130, col_offset=4)], List([], Load(), lineno=130, col_offset=10), lineno=130, col_offset=4), Assign([Tuple([Name('dsp_path', Store(), lineno=131, col_offset=4), Name('dsp_name', Store(), lineno=131, col_offset=14)], Store(), lineno=131, col_offset=4)], Call(Attribute(Attribute(Name('os', Load(), lineno=131, col_offset=25), 'path', Load(), lineno=131, col_offset=25), 'split', Load(), lineno=131, col_offset=25), [Name('dsp', Load(), lineno=131, col_offset=39)], [], None, None, lineno=131, col_offset=25), lineno=131, col_offset=4), TryExcept([Assign([Name('lines', Store(), lineno=133, col_offset=8)], Call(Attribute(Call(Name('open', Load(), lineno=133, col_offset=16), [Name('dsp', Load(), lineno=133, col_offset=21), Str('r', lineno=133, col_offset=26)], [], None, None, lineno=133, col_offset=16), 'readlines', Load(), lineno=133, col_offset=16), [], [], None, None, lineno=133, col_offset=16), lineno=133, col_offset=8)], [ExceptHandler(Name('IOError', Load(), lineno=134, col_offset=11), Name('msg', Store(), lineno=134, col_offset=20), [Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=135, col_offset=8), 'stderr', Load(), lineno=135, col_offset=8), 'write', Load(), lineno=135, col_offset=8), [BinOp(Str('%s: %s\n', lineno=135, col_offset=25), Mod(), Tuple([Name('dsp', Load(), lineno=135, col_offset=39), Name('msg', Load(), lineno=135, col_offset=44)], Load(), lineno=135, col_offset=39), lineno=135, col_offset=25)], [], None, None, lineno=135, col_offset=8), lineno=135, col_offset=8), Return(Name('None', Load(), lineno=136, col_offset=15), lineno=136, col_offset=8)], lineno=134, col_offset=4)], [], lineno=132, col_offset=4), For(Name('line', Store(), lineno=137, col_offset=8), Name('lines', Load(), lineno=137, col_offset=16), [Assign([Name('fields', Store(), lineno=138, col_offset=8)], Call(Attribute(Call(Attribute(Name('line', Load(), lineno=138, col_offset=17), 'strip', Load(), lineno=138, col_offset=17), [], [], None, None, lineno=138, col_offset=17), 'split', Load(), lineno=138, col_offset=17), [Str('=', lineno=138, col_offset=36), Num(2, lineno=138, col_offset=41)], [], None, None, lineno=138, col_offset=17), lineno=138, col_offset=8), If(Compare(Subscript(Name('fields', Load(), lineno=139, col_offset=11), Index(Num(0, lineno=139, col_offset=18)), Load(), lineno=139, col_offset=11), [Eq()], [Str('SOURCE', lineno=139, col_offset=22)], lineno=139, col_offset=11), [If(Compare(Call(Attribute(Subscript(Call(Attribute(Attribute(Name('os', Load(), lineno=140, col_offset=15), 'path', Load(), lineno=140, col_offset=15), 'splitext', Load(), lineno=140, col_offset=15), [Subscript(Name('fields', Load(), lineno=140, col_offset=32), Index(Num(1, lineno=140, col_offset=39)), Load(), lineno=140, col_offset=32)], [], None, None, lineno=140, col_offset=15), Index(Num(1, lineno=140, col_offset=43)), Load(), lineno=140, col_offset=15), 'lower', Load(), lineno=140, col_offset=15), [], [], None, None, lineno=140, col_offset=15), [In()], [List([Str('.cpp', lineno=140, col_offset=58), Str('.c', lineno=140, col_offset=66)], Load(), lineno=140, col_offset=57)], lineno=140, col_offset=15), [Expr(Call(Attribute(Name('ret', Load(), lineno=141, col_offset=16), 'append', Load(), lineno=141, col_offset=16), [Call(Attribute(Name('win32api', Load(), lineno=141, col_offset=28), 'GetFullPathName', Load(), lineno=141, col_offset=28), [Call(Attribute(Attribute(Name('os', Load(), lineno=141, col_offset=53), 'path', Load(), lineno=141, col_offset=53), 'join', Load(), lineno=141, col_offset=53), [Name('dsp_path', Load(), lineno=141, col_offset=66), Subscript(Name('fields', Load(), lineno=141, col_offset=76), Index(Num(1, lineno=141, col_offset=83)), Load(), lineno=141, col_offset=76)], [], None, None, lineno=141, col_offset=53)], [], None, None, lineno=141, col_offset=28)], [], None, None, lineno=141, col_offset=16), lineno=141, col_offset=16)], [], lineno=140, col_offset=12)], [], lineno=139, col_offset=8)], [], lineno=137, col_offset=4), Return(Name('ret', Load(), lineno=142, col_offset=11), lineno=142, col_offset=4)], [], lineno=127, col_offset=0), FunctionDef('write_extension_table', arguments([Name('fname', Param(), lineno=144, col_offset=26), Name('modules', Param(), lineno=144, col_offset=33)], None, None, []), [Assign([Name('fp', Store(), lineno=145, col_offset=4)], Call(Name('open', Load(), lineno=145, col_offset=9), [Name('fname', Load(), lineno=145, col_offset=14), Str('w', lineno=145, col_offset=21)], [], None, None, lineno=145, col_offset=9), lineno=145, col_offset=4), TryFinally([Expr(Call(Attribute(Name('fp', Load(), lineno=147, col_offset=8), 'write', Load(), lineno=147, col_offset=8), [Name('ext_src_header', Load(), lineno=147, col_offset=18)], [], None, None, lineno=147, col_offset=8), lineno=147, col_offset=8), For(Name('module', Store(), lineno=149, col_offset=12), Name('modules', Load(), lineno=149, col_offset=22), [Assign([Name('name', Store(), lineno=151, col_offset=12)], Subscript(Call(Attribute(Attribute(Name('module', Load(), lineno=151, col_offset=19), 'name', Load(), lineno=151, col_offset=19), 'split', Load(), lineno=151, col_offset=19), [Str('.', lineno=151, col_offset=37)], [], None, None, lineno=151, col_offset=19), Index(Num(-1, lineno=151, col_offset=43)), Load(), lineno=151, col_offset=19), lineno=151, col_offset=12), Expr(Call(Attribute(Name('fp', Load(), lineno=152, col_offset=12), 'write', Load(), lineno=152, col_offset=12), [BinOp(Str('extern void init%s(void);\n', lineno=152, col_offset=21), Mod(), Name('name', Load(), lineno=152, col_offset=54), lineno=152, col_offset=21)], [], None, None, lineno=152, col_offset=12), lineno=152, col_offset=12)], [], lineno=149, col_offset=8), Expr(Call(Attribute(Name('fp', Load(), lineno=154, col_offset=8), 'write', Load(), lineno=154, col_offset=8), [Name('ext_tab_header', Load(), lineno=154, col_offset=18)], [], None, None, lineno=154, col_offset=8), lineno=154, col_offset=8), For(Name('module', Store(), lineno=155, col_offset=12), Name('modules', Load(), lineno=155, col_offset=22), [Assign([Name('name', Store(), lineno=156, col_offset=12)], Subscript(Call(Attribute(Attribute(Name('module', Load(), lineno=156, col_offset=19), 'name', Load(), lineno=156, col_offset=19), 'split', Load(), lineno=156, col_offset=19), [Str('.', lineno=156, col_offset=37)], [], None, None, lineno=156, col_offset=19), Index(Num(-1, lineno=156, col_offset=43)), Load(), lineno=156, col_offset=19), lineno=156, col_offset=12), Expr(Call(Attribute(Name('fp', Load(), lineno=157, col_offset=12), 'write', Load(), lineno=157, col_offset=12), [BinOp(Str('\t{"%s", init%s},\n', lineno=157, col_offset=21), Mod(), Tuple([Name('name', Load(), lineno=157, col_offset=46), Name('name', Load(), lineno=157, col_offset=52)], Load(), lineno=157, col_offset=46), lineno=157, col_offset=21)], [], None, None, lineno=157, col_offset=12), lineno=157, col_offset=12)], [], lineno=155, col_offset=8), Expr(Call(Attribute(Name('fp', Load(), lineno=159, col_offset=8), 'write', Load(), lineno=159, col_offset=8), [Name('ext_tab_footer', Load(), lineno=159, col_offset=18)], [], None, None, lineno=159, col_offset=8), lineno=159, col_offset=8), Expr(Call(Attribute(Name('fp', Load(), lineno=160, col_offset=8), 'write', Load(), lineno=160, col_offset=8), [Name('ext_src_footer', Load(), lineno=160, col_offset=17)], [], None, None, lineno=160, col_offset=8), lineno=160, col_offset=8)], [Expr(Call(Attribute(Name('fp', Load(), lineno=162, col_offset=8), 'close', Load(), lineno=162, col_offset=8), [], [], None, None, lineno=162, col_offset=8), lineno=162, col_offset=8)], lineno=146, col_offset=4)], [], lineno=144, col_offset=0), Assign([Name('ext_src_header', Store(), lineno=165, col_offset=0)], Str('#include "Python.h"\n', lineno=167, col_offset=-1), lineno=165, col_offset=0), Assign([Name('ext_tab_header', Store(), lineno=169, col_offset=0)], Str('\nstatic struct _inittab extensions[] = {\n', lineno=172, col_offset=-1), lineno=169, col_offset=0), Assign([Name('ext_tab_footer', Store(), lineno=174, col_offset=0)], Str('        /* Sentinel */\n        {0, 0}\n};\n', lineno=178, col_offset=-1), lineno=174, col_offset=0), Assign([Name('ext_src_footer', Store(), lineno=180, col_offset=0)], Str('extern DL_IMPORT(int) PyImport_ExtendInittab(struct _inittab *newtab);\n\nint PyInitFrozenExtensions()\n{\n        return PyImport_ExtendInittab(extensions);\n}\n\n', lineno=188, col_offset=-1), lineno=180, col_offset=0)])
