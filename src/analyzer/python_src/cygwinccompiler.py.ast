Module([Expr(Str('distutils.cygwinccompiler\n\nProvides the CygwinCCompiler class, a subclass of UnixCCompiler that\nhandles the Cygwin port of the GNU C compiler to Windows.  It also contains\nthe Mingw32CCompiler class which handles the mingw32 port of GCC (same as\ncygwin in no-cygwin mode).\n', lineno=7, col_offset=-1), lineno=7, col_offset=-1), Assign([Name('__revision__', Store(), lineno=50, col_offset=0)], Str('$Id: cygwinccompiler.py 86238 2010-11-06 04:06:18Z eric.araujo $', lineno=50, col_offset=15), lineno=50, col_offset=0), Import([alias('os', None), alias('sys', None), alias('copy', None)], lineno=52, col_offset=0), ImportFrom('distutils.ccompiler', [alias('gen_preprocess_options', None), alias('gen_lib_options', None)], 0, lineno=53, col_offset=0), ImportFrom('distutils.unixccompiler', [alias('UnixCCompiler', None)], 0, lineno=54, col_offset=0), ImportFrom('distutils.file_util', [alias('write_file', None)], 0, lineno=55, col_offset=0), ImportFrom('distutils.errors', [alias('DistutilsExecError', None), alias('CompileError', None), alias('UnknownFileError', None)], 0, lineno=56, col_offset=0), ImportFrom('distutils', [alias('log', None)], 0, lineno=57, col_offset=0), FunctionDef('get_msvcr', arguments([], None, None, []), [Expr(Str('Include the appropriate MSVC runtime library if Python was built\n    with MSVC 7.0 or later.\n    ', lineno=62, col_offset=-1), lineno=62, col_offset=-1), Assign([Name('msc_pos', Store(), lineno=63, col_offset=4)], Call(Attribute(Attribute(Name('sys', Load(), lineno=63, col_offset=14), 'version', Load(), lineno=63, col_offset=14), 'find', Load(), lineno=63, col_offset=14), [Str('MSC v.', lineno=63, col_offset=31)], [], None, None, lineno=63, col_offset=14), lineno=63, col_offset=4), If(Compare(Name('msc_pos', Load(), lineno=64, col_offset=7), [NotEq()], [Num(-1, lineno=64, col_offset=19)], lineno=64, col_offset=7), [Assign([Name('msc_ver', Store(), lineno=65, col_offset=8)], Subscript(Attribute(Name('sys', Load(), lineno=65, col_offset=18), 'version', Load(), lineno=65, col_offset=18), Slice(BinOp(Name('msc_pos', Load(), lineno=65, col_offset=30), Add(), Num(6, lineno=65, col_offset=38), lineno=65, col_offset=30), BinOp(Name('msc_pos', Load(), lineno=65, col_offset=40), Add(), Num(10, lineno=65, col_offset=48), lineno=65, col_offset=40), None), Load(), lineno=65, col_offset=18), lineno=65, col_offset=8), If(Compare(Name('msc_ver', Load(), lineno=66, col_offset=11), [Eq()], [Str('1300', lineno=66, col_offset=22)], lineno=66, col_offset=11), [Return(List([Str('msvcr70', lineno=68, col_offset=20)], Load(), lineno=68, col_offset=19), lineno=68, col_offset=12)], [If(Compare(Name('msc_ver', Load(), lineno=69, col_offset=13), [Eq()], [Str('1310', lineno=69, col_offset=24)], lineno=69, col_offset=13), [Return(List([Str('msvcr71', lineno=71, col_offset=20)], Load(), lineno=71, col_offset=19), lineno=71, col_offset=12)], [If(Compare(Name('msc_ver', Load(), lineno=72, col_offset=13), [Eq()], [Str('1400', lineno=72, col_offset=24)], lineno=72, col_offset=13), [Return(List([Str('msvcr80', lineno=74, col_offset=20)], Load(), lineno=74, col_offset=19), lineno=74, col_offset=12)], [If(Compare(Name('msc_ver', Load(), lineno=75, col_offset=13), [Eq()], [Str('1500', lineno=75, col_offset=24)], lineno=75, col_offset=13), [Return(List([Str('msvcr90', lineno=77, col_offset=20)], Load(), lineno=77, col_offset=19), lineno=77, col_offset=12)], [Raise(Call(Name('ValueError', Load(), lineno=79, col_offset=18), [BinOp(Str('Unknown MS Compiler version %s ', lineno=79, col_offset=29), Mod(), Name('msc_ver', Load(), lineno=79, col_offset=65), lineno=79, col_offset=29)], [], None, None, lineno=79, col_offset=18), None, None, lineno=79, col_offset=12)], lineno=75, col_offset=13)], lineno=72, col_offset=13)], lineno=69, col_offset=13)], lineno=66, col_offset=8)], [], lineno=64, col_offset=4)], [], lineno=59, col_offset=0), ClassDef('CygwinCCompiler', [Name('UnixCCompiler', Load(), lineno=82, col_offset=23)], [Assign([Name('compiler_type', Store(), lineno=84, col_offset=4)], Str('cygwin', lineno=84, col_offset=20), lineno=84, col_offset=4), Assign([Name('obj_extension', Store(), lineno=85, col_offset=4)], Str('.o', lineno=85, col_offset=20), lineno=85, col_offset=4), Assign([Name('static_lib_extension', Store(), lineno=86, col_offset=4)], Str('.a', lineno=86, col_offset=27), lineno=86, col_offset=4), Assign([Name('shared_lib_extension', Store(), lineno=87, col_offset=4)], Str('.dll', lineno=87, col_offset=27), lineno=87, col_offset=4), Assign([Name('static_lib_format', Store(), lineno=88, col_offset=4)], Str('lib%s%s', lineno=88, col_offset=24), lineno=88, col_offset=4), Assign([Name('shared_lib_format', Store(), lineno=89, col_offset=4)], Str('%s%s', lineno=89, col_offset=24), lineno=89, col_offset=4), Assign([Name('exe_extension', Store(), lineno=90, col_offset=4)], Str('.exe', lineno=90, col_offset=20), lineno=90, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=92, col_offset=18), Name('verbose', Param(), lineno=92, col_offset=24), Name('dry_run', Param(), lineno=92, col_offset=35), Name('force', Param(), lineno=92, col_offset=46)], None, None, [Num(0, lineno=92, col_offset=32), Num(0, lineno=92, col_offset=43), Num(0, lineno=92, col_offset=52)]), [Expr(Call(Attribute(Name('UnixCCompiler', Load(), lineno=94, col_offset=8), '__init__', Load(), lineno=94, col_offset=8), [Name('self', Load(), lineno=94, col_offset=32), Name('verbose', Load(), lineno=94, col_offset=38), Name('dry_run', Load(), lineno=94, col_offset=47), Name('force', Load(), lineno=94, col_offset=56)], [], None, None, lineno=94, col_offset=8), lineno=94, col_offset=8), Assign([Tuple([Name('status', Store(), lineno=96, col_offset=9), Name('details', Store(), lineno=96, col_offset=17)], Store(), lineno=96, col_offset=9)], Call(Name('check_config_h', Load(), lineno=96, col_offset=28), [], [], None, None, lineno=96, col_offset=28), lineno=96, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=97, col_offset=8), 'debug_print', Load(), lineno=97, col_offset=8), [BinOp(Str("Python's GCC status: %s (details: %s)", lineno=97, col_offset=25), Mod(), Tuple([Name('status', Load(), lineno=98, col_offset=26), Name('details', Load(), lineno=98, col_offset=34)], Load(), lineno=98, col_offset=26), lineno=97, col_offset=25)], [], None, None, lineno=97, col_offset=8), lineno=97, col_offset=8), If(Compare(Name('status', Load(), lineno=99, col_offset=11), [IsNot()], [Name('CONFIG_H_OK', Load(), lineno=99, col_offset=25)], lineno=99, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=100, col_offset=12), 'warn', Load(), lineno=100, col_offset=12), [BinOp(Str("Python's pyconfig.h doesn't seem to support your compiler. Reason: %s. Compiling may fail because of undefined preprocessor macros.", lineno=101, col_offset=16), Mod(), Name('details', Load(), lineno=104, col_offset=18), lineno=101, col_offset=16)], [], None, None, lineno=100, col_offset=12), lineno=100, col_offset=12)], [], lineno=99, col_offset=8), Assign([Tuple([Attribute(Name('self', Load(), lineno=106, col_offset=8), 'gcc_version', Store(), lineno=106, col_offset=8), Attribute(Name('self', Load(), lineno=106, col_offset=26), 'ld_version', Store(), lineno=106, col_offset=26), Attribute(Name('self', Load(), lineno=106, col_offset=43), 'dllwrap_version', Store(), lineno=106, col_offset=43)], Store(), lineno=106, col_offset=8)], Call(Name('get_versions', Load(), lineno=107, col_offset=12), [], [], None, None, lineno=107, col_offset=12), lineno=106, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=108, col_offset=8), 'debug_print', Load(), lineno=108, col_offset=8), [BinOp(Attribute(Name('self', Load(), lineno=108, col_offset=25), 'compiler_type', Load(), lineno=108, col_offset=25), Add(), BinOp(Str(': gcc %s, ld %s, dllwrap %s\n', lineno=108, col_offset=46), Mod(), Tuple([Attribute(Name('self', Load(), lineno=109, col_offset=26), 'gcc_version', Load(), lineno=109, col_offset=26), Attribute(Name('self', Load(), lineno=110, col_offset=26), 'ld_version', Load(), lineno=110, col_offset=26), Attribute(Name('self', Load(), lineno=111, col_offset=26), 'dllwrap_version', Load(), lineno=111, col_offset=26)], Load(), lineno=109, col_offset=26), lineno=108, col_offset=46), lineno=108, col_offset=25)], [], None, None, lineno=108, col_offset=8), lineno=108, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=118, col_offset=11), 'ld_version', Load(), lineno=118, col_offset=11), [GtE()], [Str('2.10.90', lineno=118, col_offset=30)], lineno=118, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=119, col_offset=12), 'linker_dll', Store(), lineno=119, col_offset=12)], Str('gcc', lineno=119, col_offset=30), lineno=119, col_offset=12)], [Assign([Attribute(Name('self', Load(), lineno=121, col_offset=12), 'linker_dll', Store(), lineno=121, col_offset=12)], Str('dllwrap', lineno=121, col_offset=30), lineno=121, col_offset=12)], lineno=118, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=125, col_offset=11), 'ld_version', Load(), lineno=125, col_offset=11), [GtE()], [Str('2.13', lineno=125, col_offset=30)], lineno=125, col_offset=11), [Assign([Name('shared_option', Store(), lineno=126, col_offset=12)], Str('-shared', lineno=126, col_offset=28), lineno=126, col_offset=12)], [Assign([Name('shared_option', Store(), lineno=128, col_offset=12)], Str('-mdll -static', lineno=128, col_offset=28), lineno=128, col_offset=12)], lineno=125, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=132, col_offset=8), 'set_executables', Load(), lineno=132, col_offset=8), [], [keyword('compiler', Str('gcc -mcygwin -O -Wall', lineno=132, col_offset=38)), keyword('compiler_so', Str('gcc -mcygwin -mdll -O -Wall', lineno=133, col_offset=41)), keyword('compiler_cxx', Str('g++ -mcygwin -O -Wall', lineno=134, col_offset=42)), keyword('linker_exe', Str('gcc -mcygwin', lineno=135, col_offset=40)), keyword('linker_so', BinOp(Str('%s -mcygwin %s', lineno=136, col_offset=40), Mod(), Tuple([Attribute(Name('self', Load(), lineno=137, col_offset=41), 'linker_dll', Load(), lineno=137, col_offset=41), Name('shared_option', Load(), lineno=137, col_offset=58)], Load(), lineno=137, col_offset=41), lineno=136, col_offset=40))], None, None, lineno=132, col_offset=8), lineno=132, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=140, col_offset=11), 'gcc_version', Load(), lineno=140, col_offset=11), [Eq()], [Str('2.91.57', lineno=140, col_offset=31)], lineno=140, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=143, col_offset=12), 'dll_libraries', Store(), lineno=143, col_offset=12)], List([Str('msvcrt', lineno=143, col_offset=32)], Load(), lineno=143, col_offset=31), lineno=143, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=144, col_offset=12), 'warn', Load(), lineno=144, col_offset=12), [Str('Consider upgrading to a newer version of gcc', lineno=145, col_offset=16)], [], None, None, lineno=144, col_offset=12), lineno=144, col_offset=12)], [Assign([Attribute(Name('self', Load(), lineno=149, col_offset=12), 'dll_libraries', Store(), lineno=149, col_offset=12)], Call(Name('get_msvcr', Load(), lineno=149, col_offset=33), [], [], None, None, lineno=149, col_offset=33), lineno=149, col_offset=12)], lineno=140, col_offset=8)], [], lineno=92, col_offset=4), FunctionDef('_compile', arguments([Name('self', Param(), lineno=154, col_offset=17), Name('obj', Param(), lineno=154, col_offset=23), Name('src', Param(), lineno=154, col_offset=28), Name('ext', Param(), lineno=154, col_offset=33), Name('cc_args', Param(), lineno=154, col_offset=38), Name('extra_postargs', Param(), lineno=154, col_offset=47), Name('pp_opts', Param(), lineno=154, col_offset=63)], None, None, []), [If(BoolOp(Or(), [Compare(Name('ext', Load(), lineno=155, col_offset=11), [Eq()], [Str('.rc', lineno=155, col_offset=18)], lineno=155, col_offset=11), Compare(Name('ext', Load(), lineno=155, col_offset=27), [Eq()], [Str('.res', lineno=155, col_offset=34)], lineno=155, col_offset=27)], lineno=155, col_offset=11), [TryExcept([Expr(Call(Attribute(Name('self', Load(), lineno=158, col_offset=16), 'spawn', Load(), lineno=158, col_offset=16), [List([Str('windres', lineno=158, col_offset=28), Str('-i', lineno=158, col_offset=39), Name('src', Load(), lineno=158, col_offset=45), Str('-o', lineno=158, col_offset=50), Name('obj', Load(), lineno=158, col_offset=56)], Load(), lineno=158, col_offset=27)], [], None, None, lineno=158, col_offset=16), lineno=158, col_offset=16)], [ExceptHandler(Name('DistutilsExecError', Load(), lineno=159, col_offset=19), Name('msg', Store(), lineno=159, col_offset=39), [Raise(Name('CompileError', Load(), lineno=160, col_offset=22), Name('msg', Load(), lineno=160, col_offset=36), None, lineno=160, col_offset=16)], lineno=159, col_offset=12)], [], lineno=157, col_offset=12)], [TryExcept([Expr(Call(Attribute(Name('self', Load(), lineno=163, col_offset=16), 'spawn', Load(), lineno=163, col_offset=16), [BinOp(BinOp(BinOp(Attribute(Name('self', Load(), lineno=163, col_offset=27), 'compiler_so', Load(), lineno=163, col_offset=27), Add(), Name('cc_args', Load(), lineno=163, col_offset=46), lineno=163, col_offset=27), Add(), List([Name('src', Load(), lineno=163, col_offset=57), Str('-o', lineno=163, col_offset=62), Name('obj', Load(), lineno=163, col_offset=68)], Load(), lineno=163, col_offset=56), lineno=163, col_offset=54), Add(), Name('extra_postargs', Load(), lineno=164, col_offset=27), lineno=163, col_offset=73)], [], None, None, lineno=163, col_offset=16), lineno=163, col_offset=16)], [ExceptHandler(Name('DistutilsExecError', Load(), lineno=165, col_offset=19), Name('msg', Store(), lineno=165, col_offset=39), [Raise(Name('CompileError', Load(), lineno=166, col_offset=22), Name('msg', Load(), lineno=166, col_offset=36), None, lineno=166, col_offset=16)], lineno=165, col_offset=12)], [], lineno=162, col_offset=12)], lineno=155, col_offset=8)], [], lineno=154, col_offset=4), FunctionDef('link', arguments([Name('self', Param(), lineno=168, col_offset=14), Name('target_desc', Param(), lineno=169, col_offset=14), Name('objects', Param(), lineno=170, col_offset=14), Name('output_filename', Param(), lineno=171, col_offset=14), Name('output_dir', Param(), lineno=172, col_offset=14), Name('libraries', Param(), lineno=173, col_offset=14), Name('library_dirs', Param(), lineno=174, col_offset=14), Name('runtime_library_dirs', Param(), lineno=175, col_offset=14), Name('export_symbols', Param(), lineno=176, col_offset=14), Name('debug', Param(), lineno=177, col_offset=14), Name('extra_preargs', Param(), lineno=178, col_offset=14), Name('extra_postargs', Param(), lineno=179, col_offset=14), Name('build_temp', Param(), lineno=180, col_offset=14), Name('target_lang', Param(), lineno=181, col_offset=14)], None, None, [Name('None', Load(), lineno=172, col_offset=25), Name('None', Load(), lineno=173, col_offset=24), Name('None', Load(), lineno=174, col_offset=27), Name('None', Load(), lineno=175, col_offset=35), Name('None', Load(), lineno=176, col_offset=29), Num(0, lineno=177, col_offset=20), Name('None', Load(), lineno=178, col_offset=28), Name('None', Load(), lineno=179, col_offset=29), Name('None', Load(), lineno=180, col_offset=25), Name('None', Load(), lineno=181, col_offset=26)]), [Assign([Name('extra_preargs', Store(), lineno=184, col_offset=8)], Call(Attribute(Name('copy', Load(), lineno=184, col_offset=24), 'copy', Load(), lineno=184, col_offset=24), [BoolOp(Or(), [Name('extra_preargs', Load(), lineno=184, col_offset=34), List([], Load(), lineno=184, col_offset=51)], lineno=184, col_offset=34)], [], None, None, lineno=184, col_offset=24), lineno=184, col_offset=8), Assign([Name('libraries', Store(), lineno=185, col_offset=8)], Call(Attribute(Name('copy', Load(), lineno=185, col_offset=20), 'copy', Load(), lineno=185, col_offset=20), [BoolOp(Or(), [Name('libraries', Load(), lineno=185, col_offset=30), List([], Load(), lineno=185, col_offset=43)], lineno=185, col_offset=30)], [], None, None, lineno=185, col_offset=20), lineno=185, col_offset=8), Assign([Name('objects', Store(), lineno=186, col_offset=8)], Call(Attribute(Name('copy', Load(), lineno=186, col_offset=18), 'copy', Load(), lineno=186, col_offset=18), [BoolOp(Or(), [Name('objects', Load(), lineno=186, col_offset=28), List([], Load(), lineno=186, col_offset=39)], lineno=186, col_offset=28)], [], None, None, lineno=186, col_offset=18), lineno=186, col_offset=8), Expr(Call(Attribute(Name('libraries', Load(), lineno=189, col_offset=8), 'extend', Load(), lineno=189, col_offset=8), [Attribute(Name('self', Load(), lineno=189, col_offset=25), 'dll_libraries', Load(), lineno=189, col_offset=25)], [], None, None, lineno=189, col_offset=8), lineno=189, col_offset=8), If(BoolOp(And(), [Compare(Name('export_symbols', Load(), lineno=193, col_offset=13), [IsNot()], [Name('None', Load(), lineno=193, col_offset=35)], lineno=193, col_offset=13), BoolOp(Or(), [Compare(Name('target_desc', Load(), lineno=194, col_offset=13), [NotEq()], [Attribute(Name('self', Load(), lineno=194, col_offset=28), 'EXECUTABLE', Load(), lineno=194, col_offset=28)], lineno=194, col_offset=13), Compare(Attribute(Name('self', Load(), lineno=194, col_offset=47), 'linker_dll', Load(), lineno=194, col_offset=47), [Eq()], [Str('gcc', lineno=194, col_offset=66)], lineno=194, col_offset=47)], lineno=194, col_offset=13)], lineno=193, col_offset=12), [Assign([Name('temp_dir', Store(), lineno=203, col_offset=12)], Call(Attribute(Attribute(Name('os', Load(), lineno=203, col_offset=23), 'path', Load(), lineno=203, col_offset=23), 'dirname', Load(), lineno=203, col_offset=23), [Subscript(Name('objects', Load(), lineno=203, col_offset=39), Index(Num(0, lineno=203, col_offset=47)), Load(), lineno=203, col_offset=39)], [], None, None, lineno=203, col_offset=23), lineno=203, col_offset=12), Assign([Tuple([Name('dll_name', Store(), lineno=205, col_offset=13), Name('dll_extension', Store(), lineno=205, col_offset=23)], Store(), lineno=205, col_offset=13)], Call(Attribute(Attribute(Name('os', Load(), lineno=205, col_offset=40), 'path', Load(), lineno=205, col_offset=40), 'splitext', Load(), lineno=205, col_offset=40), [Call(Attribute(Attribute(Name('os', Load(), lineno=206, col_offset=16), 'path', Load(), lineno=206, col_offset=16), 'basename', Load(), lineno=206, col_offset=16), [Name('output_filename', Load(), lineno=206, col_offset=33)], [], None, None, lineno=206, col_offset=16)], [], None, None, lineno=205, col_offset=40), lineno=205, col_offset=12), Assign([Name('def_file', Store(), lineno=209, col_offset=12)], Call(Attribute(Attribute(Name('os', Load(), lineno=209, col_offset=23), 'path', Load(), lineno=209, col_offset=23), 'join', Load(), lineno=209, col_offset=23), [Name('temp_dir', Load(), lineno=209, col_offset=36), BinOp(Name('dll_name', Load(), lineno=209, col_offset=46), Add(), Str('.def', lineno=209, col_offset=57), lineno=209, col_offset=46)], [], None, None, lineno=209, col_offset=23), lineno=209, col_offset=12), Assign([Name('lib_file', Store(), lineno=210, col_offset=12)], Call(Attribute(Attribute(Name('os', Load(), lineno=210, col_offset=23), 'path', Load(), lineno=210, col_offset=23), 'join', Load(), lineno=210, col_offset=23), [Name('temp_dir', Load(), lineno=210, col_offset=36), BinOp(BinOp(Str('lib', lineno=210, col_offset=46), Add(), Name('dll_name', Load(), lineno=210, col_offset=54), lineno=210, col_offset=46), Add(), Str('.a', lineno=210, col_offset=65), lineno=210, col_offset=63)], [], None, None, lineno=210, col_offset=23), lineno=210, col_offset=12), Assign([Name('contents', Store(), lineno=213, col_offset=12)], List([BinOp(Str('LIBRARY %s', lineno=214, col_offset=16), Mod(), Call(Attribute(Attribute(Name('os', Load(), lineno=214, col_offset=31), 'path', Load(), lineno=214, col_offset=31), 'basename', Load(), lineno=214, col_offset=31), [Name('output_filename', Load(), lineno=214, col_offset=48)], [], None, None, lineno=214, col_offset=31), lineno=214, col_offset=16), Str('EXPORTS', lineno=215, col_offset=16)], Load(), lineno=213, col_offset=23), lineno=213, col_offset=12), For(Name('sym', Store(), lineno=216, col_offset=16), Name('export_symbols', Load(), lineno=216, col_offset=23), [Expr(Call(Attribute(Name('contents', Load(), lineno=217, col_offset=16), 'append', Load(), lineno=217, col_offset=16), [Name('sym', Load(), lineno=217, col_offset=32)], [], None, None, lineno=217, col_offset=16), lineno=217, col_offset=16)], [], lineno=216, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=218, col_offset=12), 'execute', Load(), lineno=218, col_offset=12), [Name('write_file', Load(), lineno=218, col_offset=25), Tuple([Name('def_file', Load(), lineno=218, col_offset=38), Name('contents', Load(), lineno=218, col_offset=48)], Load(), lineno=218, col_offset=38), BinOp(Str('writing %s', lineno=219, col_offset=25), Mod(), Name('def_file', Load(), lineno=219, col_offset=40), lineno=219, col_offset=25)], [], None, None, lineno=218, col_offset=12), lineno=218, col_offset=12), If(Compare(Attribute(Name('self', Load(), lineno=224, col_offset=15), 'linker_dll', Load(), lineno=224, col_offset=15), [Eq()], [Str('dllwrap', lineno=224, col_offset=34)], lineno=224, col_offset=15), [Expr(Call(Attribute(Name('extra_preargs', Load(), lineno=225, col_offset=16), 'extend', Load(), lineno=225, col_offset=16), [List([Str('--output-lib', lineno=225, col_offset=38), Name('lib_file', Load(), lineno=225, col_offset=54)], Load(), lineno=225, col_offset=37)], [], None, None, lineno=225, col_offset=16), lineno=225, col_offset=16), Expr(Call(Attribute(Name('extra_preargs', Load(), lineno=227, col_offset=16), 'extend', Load(), lineno=227, col_offset=16), [List([Str('--def', lineno=227, col_offset=38), Name('def_file', Load(), lineno=227, col_offset=47)], Load(), lineno=227, col_offset=37)], [], None, None, lineno=227, col_offset=16), lineno=227, col_offset=16)], [Expr(Call(Attribute(Name('objects', Load(), lineno=233, col_offset=16), 'append', Load(), lineno=233, col_offset=16), [Name('def_file', Load(), lineno=233, col_offset=31)], [], None, None, lineno=233, col_offset=16), lineno=233, col_offset=16)], lineno=224, col_offset=12)], [], lineno=193, col_offset=8), If(UnaryOp(Not(), Name('debug', Load(), lineno=244, col_offset=15), lineno=244, col_offset=11), [Expr(Call(Attribute(Name('extra_preargs', Load(), lineno=245, col_offset=12), 'append', Load(), lineno=245, col_offset=12), [Str('-s', lineno=245, col_offset=33)], [], None, None, lineno=245, col_offset=12), lineno=245, col_offset=12)], [], lineno=244, col_offset=8), Expr(Call(Attribute(Name('UnixCCompiler', Load(), lineno=247, col_offset=8), 'link', Load(), lineno=247, col_offset=8), [Name('self', Load(), lineno=247, col_offset=27), Name('target_desc', Load(), lineno=248, col_offset=27), Name('objects', Load(), lineno=249, col_offset=27), Name('output_filename', Load(), lineno=250, col_offset=27), Name('output_dir', Load(), lineno=251, col_offset=27), Name('libraries', Load(), lineno=252, col_offset=27), Name('library_dirs', Load(), lineno=253, col_offset=27), Name('runtime_library_dirs', Load(), lineno=254, col_offset=27), Name('None', Load(), lineno=255, col_offset=27), Name('debug', Load(), lineno=256, col_offset=27), Name('extra_preargs', Load(), lineno=257, col_offset=27), Name('extra_postargs', Load(), lineno=258, col_offset=27), Name('build_temp', Load(), lineno=259, col_offset=27), Name('target_lang', Load(), lineno=260, col_offset=27)], [], None, None, lineno=247, col_offset=8), lineno=247, col_offset=8)], [], lineno=168, col_offset=4), FunctionDef('object_filenames', arguments([Name('self', Param(), lineno=267, col_offset=26), Name('source_filenames', Param(), lineno=268, col_offset=26), Name('strip_dir', Param(), lineno=269, col_offset=26), Name('output_dir', Param(), lineno=270, col_offset=26)], None, None, [Num(0, lineno=269, col_offset=36), Str('', lineno=270, col_offset=37)]), [If(Compare(Name('output_dir', Load(), lineno=271, col_offset=11), [Is()], [Name('None', Load(), lineno=271, col_offset=25)], lineno=271, col_offset=11), [Assign([Name('output_dir', Store(), lineno=271, col_offset=31)], Str('', lineno=271, col_offset=44), lineno=271, col_offset=31)], [], lineno=271, col_offset=8), Assign([Name('obj_names', Store(), lineno=272, col_offset=8)], List([], Load(), lineno=272, col_offset=20), lineno=272, col_offset=8), For(Name('src_name', Store(), lineno=273, col_offset=12), Name('source_filenames', Load(), lineno=273, col_offset=24), [Assign([Tuple([Name('base', Store(), lineno=275, col_offset=13), Name('ext', Store(), lineno=275, col_offset=19)], Store(), lineno=275, col_offset=13)], Call(Attribute(Attribute(Name('os', Load(), lineno=275, col_offset=26), 'path', Load(), lineno=275, col_offset=26), 'splitext', Load(), lineno=275, col_offset=26), [Call(Attribute(Attribute(Name('os', Load(), lineno=275, col_offset=44), 'path', Load(), lineno=275, col_offset=44), 'normcase', Load(), lineno=275, col_offset=44), [Name('src_name', Load(), lineno=275, col_offset=61)], [], None, None, lineno=275, col_offset=44)], [], None, None, lineno=275, col_offset=26), lineno=275, col_offset=12), If(Compare(Name('ext', Load(), lineno=276, col_offset=15), [NotIn()], [BinOp(Attribute(Name('self', Load(), lineno=276, col_offset=27), 'src_extensions', Load(), lineno=276, col_offset=27), Add(), List([Str('.rc', lineno=276, col_offset=50), Str('.res', lineno=276, col_offset=56)], Load(), lineno=276, col_offset=49), lineno=276, col_offset=27)], lineno=276, col_offset=15), [Raise(Name('UnknownFileError', Load(), lineno=277, col_offset=22), BinOp(Str("unknown file type '%s' (from '%s')", lineno=278, col_offset=22), Mod(), Tuple([Name('ext', Load(), lineno=279, col_offset=23), Name('src_name', Load(), lineno=279, col_offset=28)], Load(), lineno=279, col_offset=23), lineno=278, col_offset=22), None, lineno=277, col_offset=16)], [], lineno=276, col_offset=12), If(Name('strip_dir', Load(), lineno=280, col_offset=15), [Assign([Name('base', Store(), lineno=281, col_offset=16)], Call(Attribute(Attribute(Name('os', Load(), lineno=281, col_offset=23), 'path', Load(), lineno=281, col_offset=23), 'basename', Load(), lineno=281, col_offset=23), [Name('base', Load(), lineno=281, col_offset=41)], [], None, None, lineno=281, col_offset=23), lineno=281, col_offset=16)], [], lineno=280, col_offset=12), If(BoolOp(Or(), [Compare(Name('ext', Load(), lineno=282, col_offset=15), [Eq()], [Str('.res', lineno=282, col_offset=22)], lineno=282, col_offset=15), Compare(Name('ext', Load(), lineno=282, col_offset=32), [Eq()], [Str('.rc', lineno=282, col_offset=39)], lineno=282, col_offset=32)], lineno=282, col_offset=15), [Expr(Call(Attribute(Name('obj_names', Load(), lineno=284, col_offset=16), 'append', Load(), lineno=284, col_offset=16), [Call(Attribute(Attribute(Name('os', Load(), lineno=284, col_offset=34), 'path', Load(), lineno=284, col_offset=34), 'join', Load(), lineno=284, col_offset=34), [Name('output_dir', Load(), lineno=284, col_offset=48), BinOp(BinOp(Name('base', Load(), lineno=285, col_offset=44), Add(), Name('ext', Load(), lineno=285, col_offset=51), lineno=285, col_offset=44), Add(), Attribute(Name('self', Load(), lineno=285, col_offset=57), 'obj_extension', Load(), lineno=285, col_offset=57), lineno=285, col_offset=55)], [], None, None, lineno=284, col_offset=34)], [], None, None, lineno=284, col_offset=16), lineno=284, col_offset=16)], [Expr(Call(Attribute(Name('obj_names', Load(), lineno=287, col_offset=16), 'append', Load(), lineno=287, col_offset=16), [Call(Attribute(Attribute(Name('os', Load(), lineno=287, col_offset=34), 'path', Load(), lineno=287, col_offset=34), 'join', Load(), lineno=287, col_offset=34), [Name('output_dir', Load(), lineno=287, col_offset=48), BinOp(Name('base', Load(), lineno=288, col_offset=44), Add(), Attribute(Name('self', Load(), lineno=288, col_offset=51), 'obj_extension', Load(), lineno=288, col_offset=51), lineno=288, col_offset=44)], [], None, None, lineno=287, col_offset=34)], [], None, None, lineno=287, col_offset=16), lineno=287, col_offset=16)], lineno=282, col_offset=12)], [], lineno=273, col_offset=8), Return(Name('obj_names', Load(), lineno=289, col_offset=15), lineno=289, col_offset=8)], [], lineno=267, col_offset=4)], [], lineno=82, col_offset=0), ClassDef('Mingw32CCompiler', [Name('CygwinCCompiler', Load(), lineno=297, col_offset=24)], [Assign([Name('compiler_type', Store(), lineno=299, col_offset=4)], Str('mingw32', lineno=299, col_offset=20), lineno=299, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=301, col_offset=18), Name('verbose', Param(), lineno=302, col_offset=18), Name('dry_run', Param(), lineno=303, col_offset=18), Name('force', Param(), lineno=304, col_offset=18)], None, None, [Num(0, lineno=302, col_offset=26), Num(0, lineno=303, col_offset=26), Num(0, lineno=304, col_offset=24)]), [Expr(Call(Attribute(Name('CygwinCCompiler', Load(), lineno=306, col_offset=8), '__init__', Load(), lineno=306, col_offset=8), [Name('self', Load(), lineno=306, col_offset=34), Name('verbose', Load(), lineno=306, col_offset=40), Name('dry_run', Load(), lineno=306, col_offset=49), Name('force', Load(), lineno=306, col_offset=58)], [], None, None, lineno=306, col_offset=8), lineno=306, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=310, col_offset=11), 'ld_version', Load(), lineno=310, col_offset=11), [GtE()], [Str('2.13', lineno=310, col_offset=30)], lineno=310, col_offset=11), [Assign([Name('shared_option', Store(), lineno=311, col_offset=12)], Str('-shared', lineno=311, col_offset=28), lineno=311, col_offset=12)], [Assign([Name('shared_option', Store(), lineno=313, col_offset=12)], Str('-mdll -static', lineno=313, col_offset=28), lineno=313, col_offset=12)], lineno=310, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=317, col_offset=11), 'gcc_version', Load(), lineno=317, col_offset=11), [LtE()], [Str('2.91.57', lineno=317, col_offset=31)], lineno=317, col_offset=11), [Assign([Name('entry_point', Store(), lineno=318, col_offset=12)], Str('--entry _DllMain@12', lineno=318, col_offset=26), lineno=318, col_offset=12)], [Assign([Name('entry_point', Store(), lineno=320, col_offset=12)], Str('', lineno=320, col_offset=26), lineno=320, col_offset=12)], lineno=317, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=322, col_offset=8), 'set_executables', Load(), lineno=322, col_offset=8), [], [keyword('compiler', Str('gcc -mno-cygwin -O -Wall', lineno=322, col_offset=38)), keyword('compiler_so', Str('gcc -mno-cygwin -mdll -O -Wall', lineno=323, col_offset=41)), keyword('compiler_cxx', Str('g++ -mno-cygwin -O -Wall', lineno=324, col_offset=42)), keyword('linker_exe', Str('gcc -mno-cygwin', lineno=325, col_offset=40)), keyword('linker_so', BinOp(Str('%s -mno-cygwin %s %s', lineno=326, col_offset=39), Mod(), Tuple([Attribute(Name('self', Load(), lineno=327, col_offset=43), 'linker_dll', Load(), lineno=327, col_offset=43), Name('shared_option', Load(), lineno=327, col_offset=60), Name('entry_point', Load(), lineno=328, col_offset=43)], Load(), lineno=327, col_offset=43), lineno=326, col_offset=39))], None, None, lineno=322, col_offset=8), lineno=322, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=334, col_offset=8), 'dll_libraries', Store(), lineno=334, col_offset=8)], List([], Load(), lineno=334, col_offset=27), lineno=334, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=338, col_offset=8), 'dll_libraries', Store(), lineno=338, col_offset=8)], Call(Name('get_msvcr', Load(), lineno=338, col_offset=29), [], [], None, None, lineno=338, col_offset=29), lineno=338, col_offset=8)], [], lineno=301, col_offset=4)], [], lineno=297, col_offset=0), Assign([Name('CONFIG_H_OK', Store(), lineno=348, col_offset=0)], Str('ok', lineno=348, col_offset=14), lineno=348, col_offset=0), Assign([Name('CONFIG_H_NOTOK', Store(), lineno=349, col_offset=0)], Str('not ok', lineno=349, col_offset=17), lineno=349, col_offset=0), Assign([Name('CONFIG_H_UNCERTAIN', Store(), lineno=350, col_offset=0)], Str('uncertain', lineno=350, col_offset=21), lineno=350, col_offset=0), FunctionDef('check_config_h', arguments([], None, None, []), [Expr(Str('Check if the current Python installation (specifically, pyconfig.h)\n    appears amenable to building extensions with GCC.  Returns a tuple\n    (status, details), where \'status\' is one of the following constants:\n      CONFIG_H_OK\n        all is well, go ahead and compile\n      CONFIG_H_NOTOK\n        doesn\'t look good\n      CONFIG_H_UNCERTAIN\n        not sure -- unable to read pyconfig.h\n    \'details\' is a human-readable string explaining the situation.\n\n    Note there are two ways to conclude "OK": either \'sys.version\' contains\n    the string "GCC" (implying that this Python was built with GCC), or the\n    installed "pyconfig.h" contains the string "__GNUC__".\n    ', lineno=368, col_offset=-1), lineno=368, col_offset=-1), ImportFrom('distutils', [alias('sysconfig', None)], 0, lineno=373, col_offset=4), Import([alias('string', None)], lineno=374, col_offset=4), If(Compare(Call(Attribute(Name('string', Load(), lineno=377, col_offset=7), 'find', Load(), lineno=377, col_offset=7), [Attribute(Name('sys', Load(), lineno=377, col_offset=19), 'version', Load(), lineno=377, col_offset=19), Str('GCC', lineno=377, col_offset=31)], [], None, None, lineno=377, col_offset=7), [GtE()], [Num(0, lineno=377, col_offset=41)], lineno=377, col_offset=7), [Return(Tuple([Name('CONFIG_H_OK', Load(), lineno=378, col_offset=16), Str("sys.version mentions 'GCC'", lineno=378, col_offset=29)], Load(), lineno=378, col_offset=16), lineno=378, col_offset=8)], [], lineno=377, col_offset=4), Assign([Name('fn', Store(), lineno=380, col_offset=4)], Call(Attribute(Name('sysconfig', Load(), lineno=380, col_offset=9), 'get_config_h_filename', Load(), lineno=380, col_offset=9), [], [], None, None, lineno=380, col_offset=9), lineno=380, col_offset=4), TryExcept([Assign([Name('f', Store(), lineno=384, col_offset=8)], Call(Name('open', Load(), lineno=384, col_offset=12), [Name('fn', Load(), lineno=384, col_offset=17)], [], None, None, lineno=384, col_offset=12), lineno=384, col_offset=8), TryFinally([Assign([Name('s', Store(), lineno=386, col_offset=12)], Call(Attribute(Name('f', Load(), lineno=386, col_offset=16), 'read', Load(), lineno=386, col_offset=16), [], [], None, None, lineno=386, col_offset=16), lineno=386, col_offset=12)], [Expr(Call(Attribute(Name('f', Load(), lineno=388, col_offset=12), 'close', Load(), lineno=388, col_offset=12), [], [], None, None, lineno=388, col_offset=12), lineno=388, col_offset=12)], lineno=385, col_offset=8)], [ExceptHandler(Name('IOError', Load(), lineno=390, col_offset=11), Name('exc', Store(), lineno=390, col_offset=20), [Return(Tuple([Name('CONFIG_H_UNCERTAIN', Load(), lineno=393, col_offset=16), BinOp(Str("couldn't read '%s': %s", lineno=394, col_offset=16), Mod(), Tuple([Name('fn', Load(), lineno=394, col_offset=44), Attribute(Name('exc', Load(), lineno=394, col_offset=48), 'strerror', Load(), lineno=394, col_offset=48)], Load(), lineno=394, col_offset=44), lineno=394, col_offset=16)], Load(), lineno=393, col_offset=16), lineno=393, col_offset=8)], lineno=390, col_offset=4)], [If(Compare(Call(Attribute(Name('string', Load(), lineno=398, col_offset=11), 'find', Load(), lineno=398, col_offset=11), [Name('s', Load(), lineno=398, col_offset=23), Str('__GNUC__', lineno=398, col_offset=25)], [], None, None, lineno=398, col_offset=11), [GtE()], [Num(0, lineno=398, col_offset=40)], lineno=398, col_offset=11), [Return(Tuple([Name('CONFIG_H_OK', Load(), lineno=399, col_offset=20), BinOp(Str("'%s' mentions '__GNUC__'", lineno=399, col_offset=33), Mod(), Name('fn', Load(), lineno=399, col_offset=62), lineno=399, col_offset=33)], Load(), lineno=399, col_offset=20), lineno=399, col_offset=12)], [Return(Tuple([Name('CONFIG_H_NOTOK', Load(), lineno=401, col_offset=20), BinOp(Str("'%s' does not mention '__GNUC__'", lineno=401, col_offset=36), Mod(), Name('fn', Load(), lineno=401, col_offset=73), lineno=401, col_offset=36)], Load(), lineno=401, col_offset=20), lineno=401, col_offset=12)], lineno=398, col_offset=8)], lineno=381, col_offset=4)], [], lineno=352, col_offset=0), FunctionDef('get_versions', arguments([], None, None, []), [Expr(Str(' Try to find out the versions of gcc, ld and dllwrap.\n        If not possible it returns None for it.\n    ', lineno=408, col_offset=-1), lineno=408, col_offset=-1), ImportFrom('distutils.version', [alias('LooseVersion', None)], 0, lineno=409, col_offset=4), ImportFrom('distutils.spawn', [alias('find_executable', None)], 0, lineno=410, col_offset=4), Import([alias('re', None)], lineno=411, col_offset=4), Assign([Name('gcc_exe', Store(), lineno=413, col_offset=4)], Call(Name('find_executable', Load(), lineno=413, col_offset=14), [Str('gcc', lineno=413, col_offset=30)], [], None, None, lineno=413, col_offset=14), lineno=413, col_offset=4), If(Name('gcc_exe', Load(), lineno=414, col_offset=7), [Assign([Name('out', Store(), lineno=415, col_offset=8)], Call(Attribute(Name('os', Load(), lineno=415, col_offset=14), 'popen', Load(), lineno=415, col_offset=14), [BinOp(Name('gcc_exe', Load(), lineno=415, col_offset=23), Add(), Str(' -dumpversion', lineno=415, col_offset=33), lineno=415, col_offset=23), Str('r', lineno=415, col_offset=49)], [], None, None, lineno=415, col_offset=14), lineno=415, col_offset=8), Assign([Name('out_string', Store(), lineno=416, col_offset=8)], Call(Attribute(Name('out', Load(), lineno=416, col_offset=21), 'read', Load(), lineno=416, col_offset=21), [], [], None, None, lineno=416, col_offset=21), lineno=416, col_offset=8), Expr(Call(Attribute(Name('out', Load(), lineno=417, col_offset=8), 'close', Load(), lineno=417, col_offset=8), [], [], None, None, lineno=417, col_offset=8), lineno=417, col_offset=8), Assign([Name('result', Store(), lineno=418, col_offset=8)], Call(Attribute(Name('re', Load(), lineno=418, col_offset=17), 'search', Load(), lineno=418, col_offset=17), [Str('(\\d+\\.\\d+(\\.\\d+)*)', lineno=418, col_offset=27), Name('out_string', Load(), lineno=418, col_offset=48)], [], None, None, lineno=418, col_offset=17), lineno=418, col_offset=8), If(Name('result', Load(), lineno=419, col_offset=11), [Assign([Name('gcc_version', Store(), lineno=420, col_offset=12)], Call(Name('LooseVersion', Load(), lineno=420, col_offset=26), [Call(Attribute(Name('result', Load(), lineno=420, col_offset=39), 'group', Load(), lineno=420, col_offset=39), [Num(1, lineno=420, col_offset=52)], [], None, None, lineno=420, col_offset=39)], [], None, None, lineno=420, col_offset=26), lineno=420, col_offset=12)], [Assign([Name('gcc_version', Store(), lineno=422, col_offset=12)], Name('None', Load(), lineno=422, col_offset=26), lineno=422, col_offset=12)], lineno=419, col_offset=8)], [Assign([Name('gcc_version', Store(), lineno=424, col_offset=8)], Name('None', Load(), lineno=424, col_offset=22), lineno=424, col_offset=8)], lineno=414, col_offset=4), Assign([Name('ld_exe', Store(), lineno=425, col_offset=4)], Call(Name('find_executable', Load(), lineno=425, col_offset=13), [Str('ld', lineno=425, col_offset=29)], [], None, None, lineno=425, col_offset=13), lineno=425, col_offset=4), If(Name('ld_exe', Load(), lineno=426, col_offset=7), [Assign([Name('out', Store(), lineno=427, col_offset=8)], Call(Attribute(Name('os', Load(), lineno=427, col_offset=14), 'popen', Load(), lineno=427, col_offset=14), [BinOp(Name('ld_exe', Load(), lineno=427, col_offset=23), Add(), Str(' -v', lineno=427, col_offset=32), lineno=427, col_offset=23), Str('r', lineno=427, col_offset=38)], [], None, None, lineno=427, col_offset=14), lineno=427, col_offset=8), Assign([Name('out_string', Store(), lineno=428, col_offset=8)], Call(Attribute(Name('out', Load(), lineno=428, col_offset=21), 'read', Load(), lineno=428, col_offset=21), [], [], None, None, lineno=428, col_offset=21), lineno=428, col_offset=8), Expr(Call(Attribute(Name('out', Load(), lineno=429, col_offset=8), 'close', Load(), lineno=429, col_offset=8), [], [], None, None, lineno=429, col_offset=8), lineno=429, col_offset=8), Assign([Name('result', Store(), lineno=430, col_offset=8)], Call(Attribute(Name('re', Load(), lineno=430, col_offset=17), 'search', Load(), lineno=430, col_offset=17), [Str('(\\d+\\.\\d+(\\.\\d+)*)', lineno=430, col_offset=27), Name('out_string', Load(), lineno=430, col_offset=48)], [], None, None, lineno=430, col_offset=17), lineno=430, col_offset=8), If(Name('result', Load(), lineno=431, col_offset=11), [Assign([Name('ld_version', Store(), lineno=432, col_offset=12)], Call(Name('LooseVersion', Load(), lineno=432, col_offset=25), [Call(Attribute(Name('result', Load(), lineno=432, col_offset=38), 'group', Load(), lineno=432, col_offset=38), [Num(1, lineno=432, col_offset=51)], [], None, None, lineno=432, col_offset=38)], [], None, None, lineno=432, col_offset=25), lineno=432, col_offset=12)], [Assign([Name('ld_version', Store(), lineno=434, col_offset=12)], Name('None', Load(), lineno=434, col_offset=25), lineno=434, col_offset=12)], lineno=431, col_offset=8)], [Assign([Name('ld_version', Store(), lineno=436, col_offset=8)], Name('None', Load(), lineno=436, col_offset=21), lineno=436, col_offset=8)], lineno=426, col_offset=4), Assign([Name('dllwrap_exe', Store(), lineno=437, col_offset=4)], Call(Name('find_executable', Load(), lineno=437, col_offset=18), [Str('dllwrap', lineno=437, col_offset=34)], [], None, None, lineno=437, col_offset=18), lineno=437, col_offset=4), If(Name('dllwrap_exe', Load(), lineno=438, col_offset=7), [Assign([Name('out', Store(), lineno=439, col_offset=8)], Call(Attribute(Name('os', Load(), lineno=439, col_offset=14), 'popen', Load(), lineno=439, col_offset=14), [BinOp(Name('dllwrap_exe', Load(), lineno=439, col_offset=23), Add(), Str(' --version', lineno=439, col_offset=37), lineno=439, col_offset=23), Str('r', lineno=439, col_offset=50)], [], None, None, lineno=439, col_offset=14), lineno=439, col_offset=8), Assign([Name('out_string', Store(), lineno=440, col_offset=8)], Call(Attribute(Name('out', Load(), lineno=440, col_offset=21), 'read', Load(), lineno=440, col_offset=21), [], [], None, None, lineno=440, col_offset=21), lineno=440, col_offset=8), Expr(Call(Attribute(Name('out', Load(), lineno=441, col_offset=8), 'close', Load(), lineno=441, col_offset=8), [], [], None, None, lineno=441, col_offset=8), lineno=441, col_offset=8), Assign([Name('result', Store(), lineno=442, col_offset=8)], Call(Attribute(Name('re', Load(), lineno=442, col_offset=17), 'search', Load(), lineno=442, col_offset=17), [Str(' (\\d+\\.\\d+(\\.\\d+)*)', lineno=442, col_offset=27), Name('out_string', Load(), lineno=442, col_offset=49)], [], None, None, lineno=442, col_offset=17), lineno=442, col_offset=8), If(Name('result', Load(), lineno=443, col_offset=11), [Assign([Name('dllwrap_version', Store(), lineno=444, col_offset=12)], Call(Name('LooseVersion', Load(), lineno=444, col_offset=30), [Call(Attribute(Name('result', Load(), lineno=444, col_offset=43), 'group', Load(), lineno=444, col_offset=43), [Num(1, lineno=444, col_offset=56)], [], None, None, lineno=444, col_offset=43)], [], None, None, lineno=444, col_offset=30), lineno=444, col_offset=12)], [Assign([Name('dllwrap_version', Store(), lineno=446, col_offset=12)], Name('None', Load(), lineno=446, col_offset=30), lineno=446, col_offset=12)], lineno=443, col_offset=8)], [Assign([Name('dllwrap_version', Store(), lineno=448, col_offset=8)], Name('None', Load(), lineno=448, col_offset=26), lineno=448, col_offset=8)], lineno=438, col_offset=4), Return(Tuple([Name('gcc_version', Load(), lineno=449, col_offset=12), Name('ld_version', Load(), lineno=449, col_offset=25), Name('dllwrap_version', Load(), lineno=449, col_offset=37)], Load(), lineno=449, col_offset=12), lineno=449, col_offset=4)], [], lineno=405, col_offset=0)])
