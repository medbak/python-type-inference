Module([Expr(Str('framer\'s C code templates.\n\nTemplates use the following variables:\n\nFileName: name of the file that contains the C source code\nModuleName: name of the module, as in "import ModuleName"\nModuleDocstring: C string containing the module doc string\n', lineno=8, col_offset=-1), lineno=8, col_offset=-1), Assign([Name('module_start', Store(), lineno=10, col_offset=0)], Str('#include "Python.h"', lineno=10, col_offset=15), lineno=10, col_offset=0), Assign([Name('member_include', Store(), lineno=11, col_offset=0)], Str('#include "structmember.h"', lineno=11, col_offset=17), lineno=11, col_offset=0), Assign([Name('module_doc', Store(), lineno=13, col_offset=0)], Str('PyDoc_STRVAR(%(ModuleName)s_doc,\n%(ModuleDocstring)s);\n', lineno=16, col_offset=-1), lineno=13, col_offset=0), Assign([Name('methoddef_start', Store(), lineno=18, col_offset=0)], Str('static struct PyMethodDef %(MethodDefName)s[] = {', lineno=19, col_offset=-1), lineno=18, col_offset=0), Assign([Name('methoddef_def', Store(), lineno=21, col_offset=0)], Str('        {"%(PythonName)s", (PyCFunction)%(CName)s, %(MethType)s},', lineno=22, col_offset=-1), lineno=21, col_offset=0), Assign([Name('methoddef_def_doc', Store(), lineno=24, col_offset=0)], Str('        {"%(PythonName)s", (PyCFunction)%(CName)s, %(MethType)s,\n         %(DocstringVar)s},', lineno=26, col_offset=-1), lineno=24, col_offset=0), Assign([Name('methoddef_end', Store(), lineno=28, col_offset=0)], Str('        {NULL, NULL}\n};\n', lineno=31, col_offset=-1), lineno=28, col_offset=0), Assign([Name('memberdef_start', Store(), lineno=33, col_offset=0)], Str('#define OFF(X) offsetof(%(StructName)s, X)\n\nstatic struct PyMemberDef %(MemberDefName)s[] = {', lineno=36, col_offset=-1), lineno=33, col_offset=0), Assign([Name('memberdef_def_doc', Store(), lineno=38, col_offset=0)], Str('        {"%(PythonName)s", %(Type)s, OFF(%(CName)s), %(Flags)s,\n         %(Docstring)s},', lineno=40, col_offset=-1), lineno=38, col_offset=0), Assign([Name('memberdef_def', Store(), lineno=42, col_offset=0)], Str('        {"%(PythonName)s", %(Type)s, OFF(%(CName)s), %(Flags)s},', lineno=43, col_offset=-1), lineno=42, col_offset=0), Assign([Name('memberdef_end', Store(), lineno=45, col_offset=0)], Str('        {NULL}\n};\n\n#undef OFF\n', lineno=50, col_offset=-1), lineno=45, col_offset=0), Assign([Name('dealloc_func', Store(), lineno=52, col_offset=0)], Str('static void\n%(name)s(PyObject *ob)\n{\n}\n', lineno=56, col_offset=-1), lineno=52, col_offset=0), Assign([Name('docstring', Store(), lineno=58, col_offset=0)], Str('PyDoc_STRVAR(%(DocstringVar)s,\n%(Docstring)s);\n', lineno=61, col_offset=-1), lineno=58, col_offset=0), Assign([Name('funcdef_start', Store(), lineno=63, col_offset=0)], Str('static PyObject *\n%(name)s(%(args)s)\n{', lineno=66, col_offset=-1), lineno=63, col_offset=0), Assign([Name('funcdef_end', Store(), lineno=68, col_offset=0)], Str('}\n', lineno=70, col_offset=-1), lineno=68, col_offset=0), Assign([Name('varargs', Store(), lineno=72, col_offset=0)], Str('        if (!PyArg_ParseTuple(args, "%(ArgParse)s:%(PythonName)s",\n                              %(ArgTargets)s))\n                return NULL;', lineno=75, col_offset=-1), lineno=72, col_offset=0), Assign([Name('module_init_start', Store(), lineno=77, col_offset=0)], Str('PyMODINIT_FUNC\ninit%(ModuleName)s(void)\n{\n        PyObject *mod;\n\n        mod = Py_InitModule3("%(ModuleName)s", %(MethodDefName)s,\n                             %(ModuleName)s_doc);\n        if (mod == NULL)\n                return;\n', lineno=87, col_offset=-1), lineno=77, col_offset=0), Assign([Name('type_init_type', Store(), lineno=89, col_offset=0)], Str('        %(CTypeName)s.ob_type = &PyType_Type;', lineno=89, col_offset=17), lineno=89, col_offset=0), Assign([Name('module_add_type', Store(), lineno=90, col_offset=0)], Str('        if (!PyObject_SetAttrString(mod, "%(TypeName)s",\n                                    (PyObject *)&%(CTypeName)s))\n                return;\n', lineno=94, col_offset=-1), lineno=90, col_offset=0), Assign([Name('type_struct_start', Store(), lineno=96, col_offset=0)], Str('static PyTypeObject %(CTypeName)s = {\n        PyObject_HEAD_INIT(0)', lineno=98, col_offset=-1), lineno=96, col_offset=0), Assign([Name('type_struct_end', Store(), lineno=100, col_offset=0)], Str('};\n', lineno=102, col_offset=-1), lineno=100, col_offset=0)])
