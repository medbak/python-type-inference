Module([Expr(Str('Output primitives for the binding generator classes.\n\nThis should really be a class, but then everybody would be passing\nthe output object to each other.  I chose for the simpler approach\nof a module with a global variable.  Use SetOutputFile() or\nSetOutputFileName() to change the output file.\n', lineno=7, col_offset=-1), lineno=7, col_offset=-1), Assign([Name('_NeedClose', Store(), lineno=9, col_offset=0)], Num(0, lineno=9, col_offset=13), lineno=9, col_offset=0), FunctionDef('SetOutputFile', arguments([Name('file', Param(), lineno=11, col_offset=18), Name('needclose', Param(), lineno=11, col_offset=31)], None, None, [Name('None', Load(), lineno=11, col_offset=25), Num(0, lineno=11, col_offset=43)]), [Expr(Str('Call this with an open file object to make it the output file.\n\n    Call it without arguments to close the current file (if necessary)\n    and reset it to sys.stdout.\n    If the second argument is true, the new file will be explicitly closed\n    on a subsequence call.\n    ', lineno=18, col_offset=-1), lineno=18, col_offset=-1), Global(['_File', '_NeedClose'], lineno=19, col_offset=4), If(Name('_NeedClose', Load(), lineno=20, col_offset=7), [Assign([Name('tmp', Store(), lineno=21, col_offset=8)], Name('_File', Load(), lineno=21, col_offset=14), lineno=21, col_offset=8), Assign([Name('_NeedClose', Store(), lineno=22, col_offset=8)], Num(0, lineno=22, col_offset=21), lineno=22, col_offset=8), Assign([Name('_File', Store(), lineno=23, col_offset=8)], Name('None', Load(), lineno=23, col_offset=16), lineno=23, col_offset=8), Expr(Call(Attribute(Name('tmp', Load(), lineno=24, col_offset=8), 'close', Load(), lineno=24, col_offset=8), [], [], None, None, lineno=24, col_offset=8), lineno=24, col_offset=8)], [], lineno=20, col_offset=4), If(Compare(Name('file', Load(), lineno=25, col_offset=7), [Is()], [Name('None', Load(), lineno=25, col_offset=15)], lineno=25, col_offset=7), [Import([alias('sys', None)], lineno=26, col_offset=8), Assign([Name('file', Store(), lineno=27, col_offset=8)], Attribute(Name('sys', Load(), lineno=27, col_offset=15), 'stdout', Load(), lineno=27, col_offset=15), lineno=27, col_offset=8)], [], lineno=25, col_offset=4), Assign([Name('_File', Store(), lineno=28, col_offset=4)], Name('file', Load(), lineno=28, col_offset=12), lineno=28, col_offset=4), Assign([Name('_NeedClose', Store(), lineno=29, col_offset=4)], BoolOp(And(), [Name('file', Load(), lineno=29, col_offset=17), Name('needclose', Load(), lineno=29, col_offset=26)], lineno=29, col_offset=17), lineno=29, col_offset=4)], [], lineno=11, col_offset=0), FunctionDef('SetOutputFileName', arguments([Name('filename', Param(), lineno=31, col_offset=22)], None, None, [Name('None', Load(), lineno=31, col_offset=33)]), [Expr(Str('Call this with a filename to make it the output file.\n\n    Call it without arguments to close the current file (if necessary)\n    and reset it to sys.stdout.\n    ', lineno=36, col_offset=-1), lineno=36, col_offset=-1), Expr(Call(Name('SetOutputFile', Load(), lineno=37, col_offset=4), [], [], None, None, lineno=37, col_offset=4), lineno=37, col_offset=4), If(Name('filename', Load(), lineno=38, col_offset=7), [Expr(Call(Name('SetOutputFile', Load(), lineno=39, col_offset=8), [Call(Name('open', Load(), lineno=39, col_offset=22), [Name('filename', Load(), lineno=39, col_offset=27), Str('w', lineno=39, col_offset=37)], [], None, None, lineno=39, col_offset=22), Num(1, lineno=39, col_offset=43)], [], None, None, lineno=39, col_offset=8), lineno=39, col_offset=8)], [], lineno=38, col_offset=4)], [], lineno=31, col_offset=0), Expr(Call(Name('SetOutputFile', Load(), lineno=41, col_offset=0), [], [], None, None, lineno=41, col_offset=0), lineno=41, col_offset=0), Assign([Name('_Level', Store(), lineno=43, col_offset=0)], Num(0, lineno=43, col_offset=9), lineno=43, col_offset=0), FunctionDef('GetLevel', arguments([], None, None, []), [Expr(Str('Return the current indentation level.', lineno=46, col_offset=4), lineno=46, col_offset=4), Return(Name('_Level', Load(), lineno=47, col_offset=11), lineno=47, col_offset=4)], [], lineno=45, col_offset=0), FunctionDef('SetLevel', arguments([Name('level', Param(), lineno=49, col_offset=13)], None, None, []), [Expr(Str('Set the current indentation level.\n\n    This does no type or range checking -- use at own risk.\n    ', lineno=53, col_offset=-1), lineno=53, col_offset=-1), Global(['_Level'], lineno=54, col_offset=4), Assign([Name('_Level', Store(), lineno=55, col_offset=4)], Name('level', Load(), lineno=55, col_offset=13), lineno=55, col_offset=4)], [], lineno=49, col_offset=0), FunctionDef('Output', arguments([Name('format', Param(), lineno=57, col_offset=11)], 'args', None, [Str('', lineno=57, col_offset=20)]), [Expr(Call(Name('VaOutput', Load(), lineno=58, col_offset=4), [Name('format', Load(), lineno=58, col_offset=13), Name('args', Load(), lineno=58, col_offset=21)], [], None, None, lineno=58, col_offset=4), lineno=58, col_offset=4)], [], lineno=57, col_offset=0), FunctionDef('VaOutput', arguments([Name('format', Param(), lineno=60, col_offset=13), Name('args', Param(), lineno=60, col_offset=21)], None, None, []), [Expr(Str("Call this with a format string and argument tuple for the format.\n\n    A newline is always added.  Each line in the output is indented\n    to the proper indentation level -- even if the result of the\n    format expansion contains embedded newlines.  Exception: lines\n    beginning with '#' are not indented -- these are assumed to be\n    C preprprocessor lines.\n    ", lineno=68, col_offset=-1), lineno=68, col_offset=-1), Assign([Name('text', Store(), lineno=69, col_offset=4)], BinOp(Name('format', Load(), lineno=69, col_offset=11), Mod(), Name('args', Load(), lineno=69, col_offset=20), lineno=69, col_offset=11), lineno=69, col_offset=4), If(Compare(Name('_Level', Load(), lineno=70, col_offset=7), [Gt()], [Num(0, lineno=70, col_offset=16)], lineno=70, col_offset=7), [Assign([Name('indent', Store(), lineno=71, col_offset=8)], BinOp(Str('\t', lineno=71, col_offset=17), Mult(), Name('_Level', Load(), lineno=71, col_offset=24), lineno=71, col_offset=17), lineno=71, col_offset=8), Assign([Name('lines', Store(), lineno=72, col_offset=8)], Call(Attribute(Name('text', Load(), lineno=72, col_offset=16), 'split', Load(), lineno=72, col_offset=16), [Str('\n', lineno=72, col_offset=27)], [], None, None, lineno=72, col_offset=16), lineno=72, col_offset=8), For(Name('i', Store(), lineno=73, col_offset=12), Call(Name('range', Load(), lineno=73, col_offset=17), [Call(Name('len', Load(), lineno=73, col_offset=23), [Name('lines', Load(), lineno=73, col_offset=27)], [], None, None, lineno=73, col_offset=23)], [], None, None, lineno=73, col_offset=17), [If(BoolOp(And(), [Subscript(Name('lines', Load(), lineno=74, col_offset=15), Index(Name('i', Load(), lineno=74, col_offset=21)), Load(), lineno=74, col_offset=15), Compare(Subscript(Subscript(Name('lines', Load(), lineno=74, col_offset=28), Index(Name('i', Load(), lineno=74, col_offset=34)), Load(), lineno=74, col_offset=28), Index(Num(0, lineno=74, col_offset=37)), Load(), lineno=74, col_offset=28), [NotEq()], [Str('#', lineno=74, col_offset=43)], lineno=74, col_offset=28)], lineno=74, col_offset=15), [Assign([Subscript(Name('lines', Load(), lineno=75, col_offset=16), Index(Name('i', Load(), lineno=75, col_offset=22)), Store(), lineno=75, col_offset=16)], BinOp(Name('indent', Load(), lineno=75, col_offset=27), Add(), Subscript(Name('lines', Load(), lineno=75, col_offset=36), Index(Name('i', Load(), lineno=75, col_offset=42)), Load(), lineno=75, col_offset=36), lineno=75, col_offset=27), lineno=75, col_offset=16)], [], lineno=74, col_offset=12)], [], lineno=73, col_offset=8), Assign([Name('text', Store(), lineno=76, col_offset=8)], Call(Attribute(Str('\n', lineno=76, col_offset=15), 'join', Load(), lineno=76, col_offset=15), [Name('lines', Load(), lineno=76, col_offset=25)], [], None, None, lineno=76, col_offset=15), lineno=76, col_offset=8)], [], lineno=70, col_offset=4), Expr(Call(Attribute(Name('_File', Load(), lineno=77, col_offset=4), 'write', Load(), lineno=77, col_offset=4), [BinOp(Name('text', Load(), lineno=77, col_offset=16), Add(), Str('\n', lineno=77, col_offset=23), lineno=77, col_offset=16)], [], None, None, lineno=77, col_offset=4), lineno=77, col_offset=4)], [], lineno=60, col_offset=0), FunctionDef('IndentLevel', arguments([Name('by', Param(), lineno=79, col_offset=16)], None, None, [Num(1, lineno=79, col_offset=21)]), [Expr(Str('Increment the indentation level by one.\n\n    When called with an argument, adds it to the indentation level.\n    ', lineno=83, col_offset=-1), lineno=83, col_offset=-1), Global(['_Level'], lineno=84, col_offset=4), If(Compare(BinOp(Name('_Level', Load(), lineno=85, col_offset=7), Add(), Name('by', Load(), lineno=85, col_offset=14), lineno=85, col_offset=7), [Lt()], [Num(0, lineno=85, col_offset=19)], lineno=85, col_offset=7), [Raise(Name('Error', Load(), lineno=86, col_offset=14), Str('indentation underflow (internal error)', lineno=86, col_offset=21), None, lineno=86, col_offset=8)], [], lineno=85, col_offset=4), Assign([Name('_Level', Store(), lineno=87, col_offset=4)], BinOp(Name('_Level', Load(), lineno=87, col_offset=13), Add(), Name('by', Load(), lineno=87, col_offset=22), lineno=87, col_offset=13), lineno=87, col_offset=4)], [], lineno=79, col_offset=0), FunctionDef('DedentLevel', arguments([Name('by', Param(), lineno=89, col_offset=16)], None, None, [Num(1, lineno=89, col_offset=21)]), [Expr(Str('Decrement the indentation level by one.\n\n    When called with an argument, subtracts it from the indentation level.\n    ', lineno=93, col_offset=-1), lineno=93, col_offset=-1), Expr(Call(Name('IndentLevel', Load(), lineno=94, col_offset=4), [UnaryOp(USub(), Name('by', Load(), lineno=94, col_offset=17), lineno=94, col_offset=16)], [], None, None, lineno=94, col_offset=4), lineno=94, col_offset=4)], [], lineno=89, col_offset=0), FunctionDef('OutIndent', arguments([Name('format', Param(), lineno=96, col_offset=14)], 'args', None, [Str('', lineno=96, col_offset=23)]), [Expr(Str('Combine Output() followed by IndentLevel().\n\n    If no text is given, acts like lone IndentLevel().\n    ', lineno=100, col_offset=-1), lineno=100, col_offset=-1), If(Name('format', Load(), lineno=101, col_offset=7), [Expr(Call(Name('VaOutput', Load(), lineno=101, col_offset=15), [Name('format', Load(), lineno=101, col_offset=24), Name('args', Load(), lineno=101, col_offset=32)], [], None, None, lineno=101, col_offset=15), lineno=101, col_offset=15)], [], lineno=101, col_offset=4), Expr(Call(Name('IndentLevel', Load(), lineno=102, col_offset=4), [], [], None, None, lineno=102, col_offset=4), lineno=102, col_offset=4)], [], lineno=96, col_offset=0), FunctionDef('OutDedent', arguments([Name('format', Param(), lineno=104, col_offset=14)], 'args', None, [Str('', lineno=104, col_offset=23)]), [Expr(Str('Combine Output() followed by DedentLevel().\n\n    If no text is given, acts like loneDedentLevel().\n    ', lineno=108, col_offset=-1), lineno=108, col_offset=-1), If(Name('format', Load(), lineno=109, col_offset=7), [Expr(Call(Name('VaOutput', Load(), lineno=109, col_offset=15), [Name('format', Load(), lineno=109, col_offset=24), Name('args', Load(), lineno=109, col_offset=32)], [], None, None, lineno=109, col_offset=15), lineno=109, col_offset=15)], [], lineno=109, col_offset=4), Expr(Call(Name('DedentLevel', Load(), lineno=110, col_offset=4), [], [], None, None, lineno=110, col_offset=4), lineno=110, col_offset=4)], [], lineno=104, col_offset=0), FunctionDef('OutLbrace', arguments([Name('format', Param(), lineno=112, col_offset=14)], 'args', None, [Str('', lineno=112, col_offset=23)]), [Expr(Str("Like Output, but add a '{' and increase the indentation level.\n\n    If no text is given a lone '{' is output.\n    ", lineno=116, col_offset=-1), lineno=116, col_offset=-1), If(Name('format', Load(), lineno=117, col_offset=7), [Assign([Name('format', Store(), lineno=118, col_offset=8)], BinOp(Name('format', Load(), lineno=118, col_offset=17), Add(), Str(' {', lineno=118, col_offset=26), lineno=118, col_offset=17), lineno=118, col_offset=8)], [Assign([Name('format', Store(), lineno=120, col_offset=8)], Str('{', lineno=120, col_offset=17), lineno=120, col_offset=8)], lineno=117, col_offset=4), Expr(Call(Name('VaOutput', Load(), lineno=121, col_offset=4), [Name('format', Load(), lineno=121, col_offset=13), Name('args', Load(), lineno=121, col_offset=21)], [], None, None, lineno=121, col_offset=4), lineno=121, col_offset=4), Expr(Call(Name('IndentLevel', Load(), lineno=122, col_offset=4), [], [], None, None, lineno=122, col_offset=4), lineno=122, col_offset=4)], [], lineno=112, col_offset=0), FunctionDef('OutRbrace', arguments([], None, None, []), [Expr(Str("Decrease the indentation level and output a '}' on a line by itself.", lineno=125, col_offset=4), lineno=125, col_offset=4), Expr(Call(Name('DedentLevel', Load(), lineno=126, col_offset=4), [], [], None, None, lineno=126, col_offset=4), lineno=126, col_offset=4), Expr(Call(Name('Output', Load(), lineno=127, col_offset=4), [Str('}', lineno=127, col_offset=11)], [], None, None, lineno=127, col_offset=4), lineno=127, col_offset=4)], [], lineno=124, col_offset=0), FunctionDef('OutHeader', arguments([Name('text', Param(), lineno=129, col_offset=14), Name('dash', Param(), lineno=129, col_offset=20)], None, None, []), [Expr(Str('Output a header comment using a given dash character.', lineno=130, col_offset=4), lineno=130, col_offset=4), Assign([Name('n', Store(), lineno=131, col_offset=4)], BinOp(Num(64, lineno=131, col_offset=8), Sub(), Call(Name('len', Load(), lineno=131, col_offset=13), [Name('text', Load(), lineno=131, col_offset=17)], [], None, None, lineno=131, col_offset=13), lineno=131, col_offset=8), lineno=131, col_offset=4), Expr(Call(Name('Output', Load(), lineno=132, col_offset=4), [], [], None, None, lineno=132, col_offset=4), lineno=132, col_offset=4), Expr(Call(Name('Output', Load(), lineno=133, col_offset=4), [Str('/* %s %s %s */', lineno=133, col_offset=11), BinOp(Name('dash', Load(), lineno=133, col_offset=29), Mult(), BinOp(Name('n', Load(), lineno=133, col_offset=37), Div(), Num(2, lineno=133, col_offset=39), lineno=133, col_offset=37), lineno=133, col_offset=29), Name('text', Load(), lineno=133, col_offset=43), BinOp(Name('dash', Load(), lineno=133, col_offset=49), Mult(), BinOp(Name('n', Load(), lineno=133, col_offset=57), Sub(), BinOp(Name('n', Load(), lineno=133, col_offset=61), Div(), Num(2, lineno=133, col_offset=63), lineno=133, col_offset=61), lineno=133, col_offset=57), lineno=133, col_offset=49)], [], None, None, lineno=133, col_offset=4), lineno=133, col_offset=4), Expr(Call(Name('Output', Load(), lineno=134, col_offset=4), [], [], None, None, lineno=134, col_offset=4), lineno=134, col_offset=4)], [], lineno=129, col_offset=0), FunctionDef('OutHeader1', arguments([Name('text', Param(), lineno=136, col_offset=15)], None, None, []), [Expr(Str("Output a level 1 header comment (uses '=' dashes).", lineno=137, col_offset=4), lineno=137, col_offset=4), Expr(Call(Name('OutHeader', Load(), lineno=138, col_offset=4), [Name('text', Load(), lineno=138, col_offset=14), Str('=', lineno=138, col_offset=20)], [], None, None, lineno=138, col_offset=4), lineno=138, col_offset=4)], [], lineno=136, col_offset=0), FunctionDef('OutHeader2', arguments([Name('text', Param(), lineno=140, col_offset=15)], None, None, []), [Expr(Str("Output a level 2 header comment (uses '-' dashes).", lineno=141, col_offset=4), lineno=141, col_offset=4), Expr(Call(Name('OutHeader', Load(), lineno=142, col_offset=4), [Name('text', Load(), lineno=142, col_offset=14), Str('-', lineno=142, col_offset=20)], [], None, None, lineno=142, col_offset=4), lineno=142, col_offset=4)], [], lineno=140, col_offset=0), FunctionDef('Out', arguments([Name('text', Param(), lineno=144, col_offset=8)], None, None, []), [Expr(Str('Output multiline text that\'s internally indented.\n\n    Pass this a multiline character string.  The whitespace before the\n    first nonblank line of the string will be subtracted from all lines.\n    The lines are then output using Output(), but without interpretation\n    of formatting (if you need formatting you can do it before the call).\n    Recommended use:\n\n        Out(\'\'\'\n            int main(argc, argv)\n                int argc;\n                char *argv;\n            {\n                printf("Hello, world\\n");\n                exit(0);\n            }\n        \'\'\')\n\n    Caveat: the indentation must be consistent -- if you use three tabs\n    in the first line, (up to) three tabs are removed from following lines,\n    but a line beginning with 24 spaces is not trimmed at all.  Don\'t use\n    this as a feature.\n    ', lineno=167, col_offset=-1), lineno=167, col_offset=-1), Assign([Name('lines', Store(), lineno=170, col_offset=4)], Call(Attribute(Name('text', Load(), lineno=170, col_offset=12), 'split', Load(), lineno=170, col_offset=12), [Str('\n', lineno=170, col_offset=23)], [], None, None, lineno=170, col_offset=12), lineno=170, col_offset=4), Assign([Name('indent', Store(), lineno=171, col_offset=4)], Str('', lineno=171, col_offset=13), lineno=171, col_offset=4), For(Name('line', Store(), lineno=172, col_offset=8), Name('lines', Load(), lineno=172, col_offset=16), [If(Call(Attribute(Name('line', Load(), lineno=173, col_offset=11), 'strip', Load(), lineno=173, col_offset=11), [], [], None, None, lineno=173, col_offset=11), [For(Name('c', Store(), lineno=174, col_offset=16), Name('line', Load(), lineno=174, col_offset=21), [If(UnaryOp(Not(), Call(Attribute(Name('c', Load(), lineno=175, col_offset=23), 'isspace', Load(), lineno=175, col_offset=23), [], [], None, None, lineno=175, col_offset=23), lineno=175, col_offset=19), [Break( lineno=176, col_offset=20)], [], lineno=175, col_offset=16), Assign([Name('indent', Store(), lineno=177, col_offset=16)], BinOp(Name('indent', Load(), lineno=177, col_offset=25), Add(), Name('c', Load(), lineno=177, col_offset=34), lineno=177, col_offset=25), lineno=177, col_offset=16)], [], lineno=174, col_offset=12), Break( lineno=178, col_offset=12)], [], lineno=173, col_offset=8)], [], lineno=172, col_offset=4), Assign([Name('n', Store(), lineno=179, col_offset=4)], Call(Name('len', Load(), lineno=179, col_offset=8), [Name('indent', Load(), lineno=179, col_offset=12)], [], None, None, lineno=179, col_offset=8), lineno=179, col_offset=4), For(Name('line', Store(), lineno=180, col_offset=8), Name('lines', Load(), lineno=180, col_offset=16), [If(Compare(Subscript(Name('line', Load(), lineno=181, col_offset=11), Slice(None, Name('n', Load(), lineno=181, col_offset=17), None), Load(), lineno=181, col_offset=11), [Eq()], [Name('indent', Load(), lineno=181, col_offset=23)], lineno=181, col_offset=11), [Assign([Name('line', Store(), lineno=182, col_offset=12)], Subscript(Name('line', Load(), lineno=182, col_offset=19), Slice(Name('n', Load(), lineno=182, col_offset=24), None, None), Load(), lineno=182, col_offset=19), lineno=182, col_offset=12)], [For(Name('c', Store(), lineno=184, col_offset=16), Name('indent', Load(), lineno=184, col_offset=21), [If(Compare(Subscript(Name('line', Load(), lineno=185, col_offset=19), Slice(None, Num(1, lineno=185, col_offset=25), None), Load(), lineno=185, col_offset=19), [NotEq()], [Name('c', Load(), lineno=185, col_offset=31)], lineno=185, col_offset=19), [Break( lineno=185, col_offset=34)], [], lineno=185, col_offset=16), Assign([Name('line', Store(), lineno=186, col_offset=16)], Subscript(Name('line', Load(), lineno=186, col_offset=23), Slice(Num(1, lineno=186, col_offset=28), None, None), Load(), lineno=186, col_offset=23), lineno=186, col_offset=16)], [], lineno=184, col_offset=12)], lineno=181, col_offset=8), Expr(Call(Name('VaOutput', Load(), lineno=187, col_offset=8), [Str('%s', lineno=187, col_offset=17), Name('line', Load(), lineno=187, col_offset=23)], [], None, None, lineno=187, col_offset=8), lineno=187, col_offset=8)], [], lineno=180, col_offset=4)], [], lineno=144, col_offset=0), FunctionDef('_test', arguments([], None, None, []), [Expr(Str('Test program.  Run when the module is run as a script.', lineno=191, col_offset=4), lineno=191, col_offset=4), Expr(Call(Name('OutHeader1', Load(), lineno=192, col_offset=4), [Str('test bgenOutput', lineno=192, col_offset=15)], [], None, None, lineno=192, col_offset=4), lineno=192, col_offset=4), Expr(Call(Name('Out', Load(), lineno=193, col_offset=4), [Str('\n        #include <Python.h>\n        #include <stdio.h>\n\n        main(argc, argv)\n            int argc;\n            char **argv;\n        {\n            int i;\n    ', lineno=202, col_offset=-1)], [], None, None, lineno=193, col_offset=4), lineno=193, col_offset=4), Expr(Call(Name('IndentLevel', Load(), lineno=203, col_offset=4), [], [], None, None, lineno=203, col_offset=4), lineno=203, col_offset=4), Expr(Call(Name('Output', Load(), lineno=204, col_offset=4), [Str('/* Here are a few comment lines.\n   Just to test indenting multiple lines.\n\n   End of the comment lines. */\n', lineno=209, col_offset=-1)], [], None, None, lineno=204, col_offset=4), lineno=204, col_offset=4), Expr(Call(Name('Output', Load(), lineno=210, col_offset=4), [Str('for (i = 0; i < argc; i++)', lineno=210, col_offset=11)], [], None, None, lineno=210, col_offset=4), lineno=210, col_offset=4), Expr(Call(Name('OutLbrace', Load(), lineno=211, col_offset=4), [], [], None, None, lineno=211, col_offset=4), lineno=211, col_offset=4), Expr(Call(Name('Output', Load(), lineno=212, col_offset=4), [Str('printf("argv[%%d] = %%s\\n", i, argv[i]);', lineno=212, col_offset=11)], [], None, None, lineno=212, col_offset=4), lineno=212, col_offset=4), Expr(Call(Name('OutRbrace', Load(), lineno=213, col_offset=4), [], [], None, None, lineno=213, col_offset=4), lineno=213, col_offset=4), Expr(Call(Name('Output', Load(), lineno=214, col_offset=4), [Str('exit(0)', lineno=214, col_offset=11)], [], None, None, lineno=214, col_offset=4), lineno=214, col_offset=4), Expr(Call(Name('OutRbrace', Load(), lineno=215, col_offset=4), [], [], None, None, lineno=215, col_offset=4), lineno=215, col_offset=4), Expr(Call(Name('OutHeader2', Load(), lineno=216, col_offset=4), [Str('end test', lineno=216, col_offset=15)], [], None, None, lineno=216, col_offset=4), lineno=216, col_offset=4)], [], lineno=190, col_offset=0), If(Compare(Name('__name__', Load(), lineno=218, col_offset=3), [Eq()], [Str('__main__', lineno=218, col_offset=15)], lineno=218, col_offset=3), [Expr(Call(Name('_test', Load(), lineno=219, col_offset=4), [], [], None, None, lineno=219, col_offset=4), lineno=219, col_offset=4)], [], lineno=218, col_offset=0)])
