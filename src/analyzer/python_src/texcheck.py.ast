Module([Expr(Str(' TeXcheck.py -- rough syntax checking on Python style LaTeX documents.\n\n   Written by Raymond D. Hettinger <python at rcn.com>\n   Copyright (c) 2003 Python Software Foundation.  All rights reserved.\n\nDesigned to catch common markup errors including:\n* Unbalanced or mismatched parenthesis, brackets, and braces.\n* Unbalanced or mismatched \\begin and \\end blocks.\n* Misspelled or invalid LaTeX commands.\n* Use of forward slashes instead of backslashes for commands.\n* Table line size mismatches.\n\nSample command line usage:\n    python texcheck.py -k chapterheading -m lib/librandomtex *.tex\n\nOptions:\n    -m          Munge parenthesis and brackets. [0,n) would normally mismatch.\n    -k keyword: Keyword is a valid LaTeX command. Do not include the backslash.\n    -d:         Delimiter check only (useful for non-LaTeX files).\n    -h:         Help\n    -s lineno:  Start at lineno (useful for skipping complex sections).\n    -v:         Verbose.  Trace the matching of //begin and //end blocks.\n', lineno=23, col_offset=-1), lineno=23, col_offset=-1), Import([alias('re', None)], lineno=25, col_offset=0), Import([alias('sys', None)], lineno=26, col_offset=0), Import([alias('getopt', None)], lineno=27, col_offset=0), ImportFrom('itertools', [alias('izip', None), alias('count', None), alias('islice', None)], 0, lineno=28, col_offset=0), Import([alias('glob', None)], lineno=29, col_offset=0), Assign([Name('cmdstr', Store(), lineno=31, col_offset=0)], Str('\n    \\section \\module \\declaremodule \\modulesynopsis \\moduleauthor\n    \\sectionauthor \\versionadded \\code \\class \\method \\begin\n    \\optional \\var \\ref \\end \\subsection \\lineiii \\hline \\label\n    \\indexii \\textrm \\ldots \\keyword \\stindex \\index \\item \\note\n    \\withsubitem \\ttindex \\footnote \\citetitle \\samp \\opindex\n    \\noindent \\exception \\strong \\dfn \\ctype \\obindex \\character\n    \\indexiii \\function \\bifuncindex \\refmodule \\refbimodindex\n    \\subsubsection \\nodename \\member \\chapter \\emph \\ASCII \\UNIX\n    \\regexp \\program \\production \\token \\productioncont \\term\n    \\grammartoken \\lineii \\seemodule \\file \\EOF \\documentclass\n    \\usepackage \\title \\input \\maketitle \\ifhtml \\fi \\url \\Cpp\n    \\tableofcontents \\kbd \\programopt \\envvar \\refstmodindex\n    \\cfunction \\constant \\NULL \\moreargs \\cfuncline \\cdata\n    \\textasciicircum \\n \\ABC \\setindexsubitem \\versionchanged\n    \\deprecated \\seetext \\newcommand \\POSIX \\pep \\warning \\rfc\n    \\verbatiminput \\methodline \\textgreater \\seetitle \\lineiv\n    \\funclineni \\ulink \\manpage \\funcline \\dataline \\unspecified\n    \\textbackslash \\mimetype \\mailheader \\seepep \\textunderscore\n    \\longprogramopt \\infinity \\plusminus \\shortversion \\version\n    \\refmodindex \\seerfc \\makeindex \\makemodindex \\renewcommand\n    \\indexname \\appendix \\protect \\indexiv \\mbox \\textasciitilde\n    \\platform \\seeurl \\leftmargin \\labelwidth \\localmoduletable\n    \\LaTeX \\copyright \\memberline \\backslash \\pi \\centerline\n    \\caption \\vspace \\textwidth \\menuselection \\textless\n    \\makevar \\csimplemacro \\menuselection \\bfcode \\sub \\release\n    \\email \\kwindex \\refexmodindex \\filenq \\e \\menuselection\n    \\exindex \\linev \\newsgroup \\verbatim \\setshortversion\n    \\author \\authoraddress \\paragraph \\subparagraph \\cmemberline\n    \\textbar \\C \\seelink\n', lineno=61, col_offset=-1), lineno=31, col_offset=0), FunctionDef('matchclose', arguments([Name('c_lineno', Param(), lineno=63, col_offset=15), Name('c_symbol', Param(), lineno=63, col_offset=25), Name('openers', Param(), lineno=63, col_offset=35), Name('pairmap', Param(), lineno=63, col_offset=44)], None, None, []), [Expr(Str('Verify that closing delimiter matches most recent opening delimiter', lineno=64, col_offset=4), lineno=64, col_offset=4), TryExcept([Assign([Tuple([Name('o_lineno', Store(), lineno=66, col_offset=8), Name('o_symbol', Store(), lineno=66, col_offset=18)], Store(), lineno=66, col_offset=8)], Call(Attribute(Name('openers', Load(), lineno=66, col_offset=29), 'pop', Load(), lineno=66, col_offset=29), [], [], None, None, lineno=66, col_offset=29), lineno=66, col_offset=8)], [ExceptHandler(Name('IndexError', Load(), lineno=67, col_offset=11), None, [Print(None, [BinOp(Str("\nDelimiter mismatch.  On line %d, encountered closing '%s' without corresponding open", lineno=68, col_offset=14), Mod(), Tuple([Name('c_lineno', Load(), lineno=68, col_offset=106), Name('c_symbol', Load(), lineno=68, col_offset=116)], Load(), lineno=68, col_offset=106), lineno=68, col_offset=14)], True, lineno=68, col_offset=8), Return(None, lineno=69, col_offset=8)], lineno=67, col_offset=4)], [], lineno=65, col_offset=4), If(Compare(Name('o_symbol', Load(), lineno=70, col_offset=7), [In()], [Call(Attribute(Name('pairmap', Load(), lineno=70, col_offset=19), 'get', Load(), lineno=70, col_offset=19), [Name('c_symbol', Load(), lineno=70, col_offset=31), List([Name('c_symbol', Load(), lineno=70, col_offset=42)], Load(), lineno=70, col_offset=41)], [], None, None, lineno=70, col_offset=19)], lineno=70, col_offset=7), [Return(None, lineno=70, col_offset=54)], [], lineno=70, col_offset=4), Print(None, [BinOp(Str("\nOpener '%s' on line %d was not closed before encountering '%s' on line %d", lineno=71, col_offset=10), Mod(), Tuple([Name('o_symbol', Load(), lineno=71, col_offset=91), Name('o_lineno', Load(), lineno=71, col_offset=101), Name('c_symbol', Load(), lineno=71, col_offset=111), Name('c_lineno', Load(), lineno=71, col_offset=121)], Load(), lineno=71, col_offset=91), lineno=71, col_offset=10)], True, lineno=71, col_offset=4), Return(None, lineno=72, col_offset=4)], [], lineno=63, col_offset=0), FunctionDef('checkit', arguments([Name('source', Param(), lineno=74, col_offset=12), Name('opts', Param(), lineno=74, col_offset=20), Name('morecmds', Param(), lineno=74, col_offset=26)], None, None, [List([], Load(), lineno=74, col_offset=35)]), [Expr(Str('Check the LaTeX formatting in a sequence of lines.\n\n    Opts is a mapping of options to option values if any:\n        -m          munge parenthesis and brackets\n        -d          delimiters only checking\n        -v          verbose trace of delimiter matching\n        -s lineno:  linenumber to start scan (default is 1).\n\n    Morecmds is a sequence of LaTeX commands (without backslashes) that\n    are to be considered valid in the scan.\n    ', lineno=85, col_offset=-1), lineno=85, col_offset=-1), Assign([Name('texcmd', Store(), lineno=87, col_offset=4)], Call(Attribute(Name('re', Load(), lineno=87, col_offset=13), 'compile', Load(), lineno=87, col_offset=13), [Str('\\\\[A-Za-z]+', lineno=87, col_offset=24)], [], None, None, lineno=87, col_offset=13), lineno=87, col_offset=4), Assign([Name('falsetexcmd', Store(), lineno=88, col_offset=4)], Call(Attribute(Name('re', Load(), lineno=88, col_offset=18), 'compile', Load(), lineno=88, col_offset=18), [Str('\\/([A-Za-z]+)', lineno=88, col_offset=29)], [], None, None, lineno=88, col_offset=18), lineno=88, col_offset=4), Assign([Name('validcmds', Store(), lineno=90, col_offset=4)], Call(Name('set', Load(), lineno=90, col_offset=16), [Call(Attribute(Name('cmdstr', Load(), lineno=90, col_offset=20), 'split', Load(), lineno=90, col_offset=20), [], [], None, None, lineno=90, col_offset=20)], [], None, None, lineno=90, col_offset=16), lineno=90, col_offset=4), For(Name('cmd', Store(), lineno=91, col_offset=8), Name('morecmds', Load(), lineno=91, col_offset=15), [Expr(Call(Attribute(Name('validcmds', Load(), lineno=92, col_offset=8), 'add', Load(), lineno=92, col_offset=8), [BinOp(Str('\\', lineno=92, col_offset=22), Add(), Name('cmd', Load(), lineno=92, col_offset=29), lineno=92, col_offset=22)], [], None, None, lineno=92, col_offset=8), lineno=92, col_offset=8)], [], lineno=91, col_offset=4), If(Compare(Str('-m', lineno=94, col_offset=7), [In()], [Name('opts', Load(), lineno=94, col_offset=15)], lineno=94, col_offset=7), [Assign([Name('pairmap', Store(), lineno=95, col_offset=8)], Dict([Str(']', lineno=95, col_offset=19), Str(')', lineno=95, col_offset=29)], [Str('[(', lineno=95, col_offset=23), Str('([', lineno=95, col_offset=33)], lineno=95, col_offset=18), lineno=95, col_offset=8)], [Assign([Name('pairmap', Store(), lineno=97, col_offset=8)], Dict([Str(']', lineno=97, col_offset=19), Str(')', lineno=97, col_offset=28)], [Str('[', lineno=97, col_offset=23), Str('(', lineno=97, col_offset=32)], lineno=97, col_offset=18), lineno=97, col_offset=8)], lineno=94, col_offset=4), Assign([Name('openpunct', Store(), lineno=98, col_offset=4)], Call(Name('set', Load(), lineno=98, col_offset=16), [Str('([', lineno=98, col_offset=20)], [], None, None, lineno=98, col_offset=16), lineno=98, col_offset=4), Assign([Name('delimiters', Store(), lineno=100, col_offset=4)], Call(Attribute(Name('re', Load(), lineno=100, col_offset=17), 'compile', Load(), lineno=100, col_offset=17), [Str('\\\\(begin|end){([_a-zA-Z]+)}|([()\\[\\]])', lineno=100, col_offset=28)], [], None, None, lineno=100, col_offset=17), lineno=100, col_offset=4), Assign([Name('braces', Store(), lineno=101, col_offset=4)], Call(Attribute(Name('re', Load(), lineno=101, col_offset=13), 'compile', Load(), lineno=101, col_offset=13), [Str('({)|(})', lineno=101, col_offset=24)], [], None, None, lineno=101, col_offset=13), lineno=101, col_offset=4), Assign([Name('doubledwords', Store(), lineno=102, col_offset=4)], Call(Attribute(Name('re', Load(), lineno=102, col_offset=19), 'compile', Load(), lineno=102, col_offset=19), [Str('(\\b[A-za-z]+\\b) \\b\\1\\b', lineno=102, col_offset=30)], [], None, None, lineno=102, col_offset=19), lineno=102, col_offset=4), Assign([Name('spacingmarkup', Store(), lineno=103, col_offset=4)], Call(Attribute(Name('re', Load(), lineno=103, col_offset=20), 'compile', Load(), lineno=103, col_offset=20), [Str('\\\\(ABC|ASCII|C|Cpp|EOF|infinity|NULL|plusminus|POSIX|UNIX)\\s', lineno=103, col_offset=31)], [], None, None, lineno=103, col_offset=20), lineno=103, col_offset=4), Assign([Name('openers', Store(), lineno=105, col_offset=4)], List([], Load(), lineno=105, col_offset=14), lineno=105, col_offset=4), Assign([Name('bracestack', Store(), lineno=106, col_offset=4)], List([], Load(), lineno=106, col_offset=17), lineno=106, col_offset=4), Assign([Name('tablestart', Store(), lineno=108, col_offset=4)], Call(Attribute(Name('re', Load(), lineno=108, col_offset=17), 'compile', Load(), lineno=108, col_offset=17), [Str('\\\\begin{(?:long)?table([iv]+)}', lineno=108, col_offset=28)], [], None, None, lineno=108, col_offset=17), lineno=108, col_offset=4), Assign([Name('tableline', Store(), lineno=109, col_offset=4)], Call(Attribute(Name('re', Load(), lineno=109, col_offset=16), 'compile', Load(), lineno=109, col_offset=16), [Str('\\\\line([iv]+){', lineno=109, col_offset=27)], [], None, None, lineno=109, col_offset=16), lineno=109, col_offset=4), Assign([Name('tableend', Store(), lineno=110, col_offset=4)], Call(Attribute(Name('re', Load(), lineno=110, col_offset=15), 'compile', Load(), lineno=110, col_offset=15), [Str('\\\\end{(?:long)?table([iv]+)}', lineno=110, col_offset=26)], [], None, None, lineno=110, col_offset=15), lineno=110, col_offset=4), Assign([Name('tablelevel', Store(), lineno=111, col_offset=4)], Str('', lineno=111, col_offset=17), lineno=111, col_offset=4), Assign([Name('tablestartline', Store(), lineno=112, col_offset=4)], Num(0, lineno=112, col_offset=21), lineno=112, col_offset=4), Assign([Name('startline', Store(), lineno=114, col_offset=4)], Call(Name('int', Load(), lineno=114, col_offset=16), [Call(Attribute(Name('opts', Load(), lineno=114, col_offset=20), 'get', Load(), lineno=114, col_offset=20), [Str('-s', lineno=114, col_offset=29), Str('1', lineno=114, col_offset=35)], [], None, None, lineno=114, col_offset=20)], [], None, None, lineno=114, col_offset=16), lineno=114, col_offset=4), Assign([Name('lineno', Store(), lineno=115, col_offset=4)], Num(0, lineno=115, col_offset=13), lineno=115, col_offset=4), For(Tuple([Name('lineno', Store(), lineno=117, col_offset=8), Name('line', Store(), lineno=117, col_offset=16)], Store(), lineno=117, col_offset=8), Call(Name('izip', Load(), lineno=117, col_offset=24), [Call(Name('count', Load(), lineno=117, col_offset=29), [Name('startline', Load(), lineno=117, col_offset=35)], [], None, None, lineno=117, col_offset=29), Call(Name('islice', Load(), lineno=117, col_offset=47), [Name('source', Load(), lineno=117, col_offset=54), BinOp(Name('startline', Load(), lineno=117, col_offset=62), Sub(), Num(1, lineno=117, col_offset=72), lineno=117, col_offset=62), Name('None', Load(), lineno=117, col_offset=75)], [], None, None, lineno=117, col_offset=47)], [], None, None, lineno=117, col_offset=24), [Assign([Name('line', Store(), lineno=118, col_offset=8)], Call(Attribute(Name('line', Load(), lineno=118, col_offset=15), 'rstrip', Load(), lineno=118, col_offset=15), [], [], None, None, lineno=118, col_offset=15), lineno=118, col_offset=8), For(Tuple([Name('begend', Store(), lineno=121, col_offset=12), Name('name', Store(), lineno=121, col_offset=20), Name('punct', Store(), lineno=121, col_offset=26)], Store(), lineno=121, col_offset=12), Call(Attribute(Name('delimiters', Load(), lineno=121, col_offset=35), 'findall', Load(), lineno=121, col_offset=35), [Name('line', Load(), lineno=121, col_offset=54)], [], None, None, lineno=121, col_offset=35), [If(Compare(Str('-v', lineno=122, col_offset=15), [In()], [Name('opts', Load(), lineno=122, col_offset=23)], lineno=122, col_offset=15), [Print(None, [Name('lineno', Load(), lineno=123, col_offset=22), Str('|', lineno=123, col_offset=30), Name('begend', Load(), lineno=123, col_offset=35), Name('name', Load(), lineno=123, col_offset=43), Name('punct', Load(), lineno=123, col_offset=49)], False, lineno=123, col_offset=16)], [], lineno=122, col_offset=12), If(BoolOp(And(), [Compare(Name('begend', Load(), lineno=124, col_offset=15), [Eq()], [Str('begin', lineno=124, col_offset=25)], lineno=124, col_offset=15), Compare(Str('-d', lineno=124, col_offset=37), [NotIn()], [Name('opts', Load(), lineno=124, col_offset=49)], lineno=124, col_offset=37)], lineno=124, col_offset=15), [Expr(Call(Attribute(Name('openers', Load(), lineno=125, col_offset=16), 'append', Load(), lineno=125, col_offset=16), [Tuple([Name('lineno', Load(), lineno=125, col_offset=32), Name('name', Load(), lineno=125, col_offset=40)], Load(), lineno=125, col_offset=32)], [], None, None, lineno=125, col_offset=16), lineno=125, col_offset=16)], [If(Compare(Name('punct', Load(), lineno=126, col_offset=17), [In()], [Name('openpunct', Load(), lineno=126, col_offset=26)], lineno=126, col_offset=17), [Expr(Call(Attribute(Name('openers', Load(), lineno=127, col_offset=16), 'append', Load(), lineno=127, col_offset=16), [Tuple([Name('lineno', Load(), lineno=127, col_offset=32), Name('punct', Load(), lineno=127, col_offset=40)], Load(), lineno=127, col_offset=32)], [], None, None, lineno=127, col_offset=16), lineno=127, col_offset=16)], [If(BoolOp(And(), [Compare(Name('begend', Load(), lineno=128, col_offset=17), [Eq()], [Str('end', lineno=128, col_offset=27)], lineno=128, col_offset=17), Compare(Str('-d', lineno=128, col_offset=37), [NotIn()], [Name('opts', Load(), lineno=128, col_offset=49)], lineno=128, col_offset=37)], lineno=128, col_offset=17), [Expr(Call(Name('matchclose', Load(), lineno=129, col_offset=16), [Name('lineno', Load(), lineno=129, col_offset=27), Name('name', Load(), lineno=129, col_offset=35), Name('openers', Load(), lineno=129, col_offset=41), Name('pairmap', Load(), lineno=129, col_offset=50)], [], None, None, lineno=129, col_offset=16), lineno=129, col_offset=16)], [If(Compare(Name('punct', Load(), lineno=130, col_offset=17), [In()], [Name('pairmap', Load(), lineno=130, col_offset=26)], lineno=130, col_offset=17), [Expr(Call(Name('matchclose', Load(), lineno=131, col_offset=16), [Name('lineno', Load(), lineno=131, col_offset=27), Name('punct', Load(), lineno=131, col_offset=35), Name('openers', Load(), lineno=131, col_offset=42), Name('pairmap', Load(), lineno=131, col_offset=51)], [], None, None, lineno=131, col_offset=16), lineno=131, col_offset=16)], [], lineno=130, col_offset=17)], lineno=128, col_offset=17)], lineno=126, col_offset=17)], lineno=124, col_offset=12), If(Compare(Str('-v', lineno=132, col_offset=15), [In()], [Name('opts', Load(), lineno=132, col_offset=23)], lineno=132, col_offset=15), [Print(None, [Str('   --> ', lineno=133, col_offset=22), Name('openers', Load(), lineno=133, col_offset=33)], True, lineno=133, col_offset=16)], [], lineno=132, col_offset=12)], [], lineno=121, col_offset=8), For(Tuple([Name('open', Store(), lineno=136, col_offset=12), Name('close', Store(), lineno=136, col_offset=18)], Store(), lineno=136, col_offset=12), Call(Attribute(Name('braces', Load(), lineno=136, col_offset=27), 'findall', Load(), lineno=136, col_offset=27), [Name('line', Load(), lineno=136, col_offset=42)], [], None, None, lineno=136, col_offset=27), [If(Compare(Name('open', Load(), lineno=137, col_offset=15), [Eq()], [Str('{', lineno=137, col_offset=23)], lineno=137, col_offset=15), [Expr(Call(Attribute(Name('bracestack', Load(), lineno=138, col_offset=16), 'append', Load(), lineno=138, col_offset=16), [Name('lineno', Load(), lineno=138, col_offset=34)], [], None, None, lineno=138, col_offset=16), lineno=138, col_offset=16)], [], lineno=137, col_offset=12), If(Compare(Name('close', Load(), lineno=139, col_offset=15), [Eq()], [Str('}', lineno=139, col_offset=24)], lineno=139, col_offset=15), [TryExcept([Expr(Call(Attribute(Name('bracestack', Load(), lineno=141, col_offset=20), 'pop', Load(), lineno=141, col_offset=20), [], [], None, None, lineno=141, col_offset=20), lineno=141, col_offset=20)], [ExceptHandler(Name('IndexError', Load(), lineno=142, col_offset=23), None, [Print(None, [BinOp(Str('Warning, unmatched } on line %s.', lineno=143, col_offset=26), Mod(), Tuple([Name('lineno', Load(), lineno=143, col_offset=65)], Load(), lineno=143, col_offset=65), lineno=143, col_offset=26)], True, lineno=143, col_offset=20)], lineno=142, col_offset=16)], [], lineno=140, col_offset=16)], [], lineno=139, col_offset=12)], [], lineno=136, col_offset=8), If(Compare(Str('-d', lineno=146, col_offset=11), [In()], [Name('opts', Load(), lineno=146, col_offset=19)], lineno=146, col_offset=11), [Continue( lineno=147, col_offset=12)], [], lineno=146, col_offset=8), For(Name('cmd', Store(), lineno=150, col_offset=12), Call(Attribute(Name('falsetexcmd', Load(), lineno=150, col_offset=19), 'findall', Load(), lineno=150, col_offset=19), [Name('line', Load(), lineno=150, col_offset=39)], [], None, None, lineno=150, col_offset=19), [If(BoolOp(Or(), [Compare(Str('822', lineno=151, col_offset=15), [In()], [Name('line', Load(), lineno=151, col_offset=24)], lineno=151, col_offset=15), Compare(Str('.html', lineno=151, col_offset=32), [In()], [Name('line', Load(), lineno=151, col_offset=43)], lineno=151, col_offset=32)], lineno=151, col_offset=15), [Continue( lineno=152, col_offset=16)], [], lineno=151, col_offset=12), If(Compare(BinOp(Str('\\', lineno=153, col_offset=15), Add(), Name('cmd', Load(), lineno=153, col_offset=22), lineno=153, col_offset=15), [In()], [Name('validcmds', Load(), lineno=153, col_offset=29)], lineno=153, col_offset=15), [Print(None, [BinOp(Str('Warning, forward slash used on line %d with cmd: /%s', lineno=154, col_offset=22), Mod(), Tuple([Name('lineno', Load(), lineno=154, col_offset=80), Name('cmd', Load(), lineno=154, col_offset=88)], Load(), lineno=154, col_offset=80), lineno=154, col_offset=22)], True, lineno=154, col_offset=16)], [], lineno=153, col_offset=12)], [], lineno=150, col_offset=8), For(Name('cmd', Store(), lineno=157, col_offset=12), Call(Attribute(Name('spacingmarkup', Load(), lineno=157, col_offset=19), 'findall', Load(), lineno=157, col_offset=19), [Name('line', Load(), lineno=157, col_offset=41)], [], None, None, lineno=157, col_offset=19), [Print(None, [BinOp(Str('Warning, \\%s should be written as \\%s{} on line %d', lineno=158, col_offset=18), Mod(), Tuple([Name('cmd', Load(), lineno=158, col_offset=75), Name('cmd', Load(), lineno=158, col_offset=80), Name('lineno', Load(), lineno=158, col_offset=85)], Load(), lineno=158, col_offset=75), lineno=158, col_offset=18)], True, lineno=158, col_offset=12)], [], lineno=157, col_offset=8), Assign([Name('nc', Store(), lineno=161, col_offset=8)], Call(Attribute(Name('line', Load(), lineno=161, col_offset=13), 'find', Load(), lineno=161, col_offset=13), [Str('\\newcommand', lineno=161, col_offset=23)], [], None, None, lineno=161, col_offset=13), lineno=161, col_offset=8), If(Compare(Name('nc', Load(), lineno=162, col_offset=11), [NotEq()], [Num(-1, lineno=162, col_offset=18)], lineno=162, col_offset=11), [Assign([Name('start', Store(), lineno=163, col_offset=12)], Call(Attribute(Name('line', Load(), lineno=163, col_offset=20), 'find', Load(), lineno=163, col_offset=20), [Str('{', lineno=163, col_offset=30), Name('nc', Load(), lineno=163, col_offset=35)], [], None, None, lineno=163, col_offset=20), lineno=163, col_offset=12), Assign([Name('end', Store(), lineno=164, col_offset=12)], Call(Attribute(Name('line', Load(), lineno=164, col_offset=18), 'find', Load(), lineno=164, col_offset=18), [Str('}', lineno=164, col_offset=28), Name('start', Load(), lineno=164, col_offset=33)], [], None, None, lineno=164, col_offset=18), lineno=164, col_offset=12), Expr(Call(Attribute(Name('validcmds', Load(), lineno=165, col_offset=12), 'add', Load(), lineno=165, col_offset=12), [Subscript(Name('line', Load(), lineno=165, col_offset=26), Slice(BinOp(Name('start', Load(), lineno=165, col_offset=31), Add(), Num(1, lineno=165, col_offset=37), lineno=165, col_offset=31), Name('end', Load(), lineno=165, col_offset=39), None), Load(), lineno=165, col_offset=26)], [], None, None, lineno=165, col_offset=12), lineno=165, col_offset=12)], [], lineno=162, col_offset=8), For(Name('cmd', Store(), lineno=166, col_offset=12), Call(Attribute(Name('texcmd', Load(), lineno=166, col_offset=19), 'findall', Load(), lineno=166, col_offset=19), [Name('line', Load(), lineno=166, col_offset=34)], [], None, None, lineno=166, col_offset=19), [If(Compare(Name('cmd', Load(), lineno=167, col_offset=15), [NotIn()], [Name('validcmds', Load(), lineno=167, col_offset=26)], lineno=167, col_offset=15), [Print(None, [BinOp(Str('Warning, unknown tex cmd on line %d: \\%s', lineno=168, col_offset=22), Mod(), Tuple([Name('lineno', Load(), lineno=168, col_offset=69), Name('cmd', Load(), lineno=168, col_offset=77)], Load(), lineno=168, col_offset=69), lineno=168, col_offset=22)], True, lineno=168, col_offset=16)], [], lineno=167, col_offset=12)], [], lineno=166, col_offset=8), Assign([Name('m', Store(), lineno=171, col_offset=8)], Call(Attribute(Name('tablestart', Load(), lineno=171, col_offset=12), 'search', Load(), lineno=171, col_offset=12), [Name('line', Load(), lineno=171, col_offset=30)], [], None, None, lineno=171, col_offset=12), lineno=171, col_offset=8), If(Name('m', Load(), lineno=172, col_offset=11), [Assign([Name('tablelevel', Store(), lineno=173, col_offset=12)], Call(Attribute(Name('m', Load(), lineno=173, col_offset=25), 'group', Load(), lineno=173, col_offset=25), [Num(1, lineno=173, col_offset=33)], [], None, None, lineno=173, col_offset=25), lineno=173, col_offset=12), Assign([Name('tablestartline', Store(), lineno=174, col_offset=12)], Name('lineno', Load(), lineno=174, col_offset=29), lineno=174, col_offset=12)], [], lineno=172, col_offset=8), Assign([Name('m', Store(), lineno=175, col_offset=8)], Call(Attribute(Name('tableline', Load(), lineno=175, col_offset=12), 'search', Load(), lineno=175, col_offset=12), [Name('line', Load(), lineno=175, col_offset=29)], [], None, None, lineno=175, col_offset=12), lineno=175, col_offset=8), If(BoolOp(And(), [Name('m', Load(), lineno=176, col_offset=11), Compare(Call(Attribute(Name('m', Load(), lineno=176, col_offset=17), 'group', Load(), lineno=176, col_offset=17), [Num(1, lineno=176, col_offset=25)], [], None, None, lineno=176, col_offset=17), [NotEq()], [Name('tablelevel', Load(), lineno=176, col_offset=31)], lineno=176, col_offset=17)], lineno=176, col_offset=11), [Print(None, [BinOp(Str('Warning, \\line%s on line %d does not match \\table%s on line %d', lineno=177, col_offset=18), Mod(), Tuple([Call(Attribute(Name('m', Load(), lineno=177, col_offset=87), 'group', Load(), lineno=177, col_offset=87), [Num(1, lineno=177, col_offset=95)], [], None, None, lineno=177, col_offset=87), Name('lineno', Load(), lineno=177, col_offset=99), Name('tablelevel', Load(), lineno=177, col_offset=107), Name('tablestartline', Load(), lineno=177, col_offset=119)], Load(), lineno=177, col_offset=87), lineno=177, col_offset=18)], True, lineno=177, col_offset=12)], [], lineno=176, col_offset=8), If(Call(Attribute(Name('tableend', Load(), lineno=178, col_offset=11), 'search', Load(), lineno=178, col_offset=11), [Name('line', Load(), lineno=178, col_offset=27)], [], None, None, lineno=178, col_offset=11), [Assign([Name('tablelevel', Store(), lineno=179, col_offset=12)], Str('', lineno=179, col_offset=25), lineno=179, col_offset=12)], [], lineno=178, col_offset=8), If(BoolOp(Or(), [Compare(Str('e.g.', lineno=182, col_offset=11), [In()], [Name('line', Load(), lineno=182, col_offset=21)], lineno=182, col_offset=11), Compare(Str('i.e.', lineno=182, col_offset=29), [In()], [Name('line', Load(), lineno=182, col_offset=39)], lineno=182, col_offset=29)], lineno=182, col_offset=11), [Print(None, [BinOp(Str('Style warning, avoid use of i.e or e.g. on line %d', lineno=183, col_offset=18), Mod(), Tuple([Name('lineno', Load(), lineno=183, col_offset=75)], Load(), lineno=183, col_offset=75), lineno=183, col_offset=18)], True, lineno=183, col_offset=12)], [], lineno=182, col_offset=8), For(Name('dw', Store(), lineno=185, col_offset=12), Call(Attribute(Name('doubledwords', Load(), lineno=185, col_offset=18), 'findall', Load(), lineno=185, col_offset=18), [Name('line', Load(), lineno=185, col_offset=39)], [], None, None, lineno=185, col_offset=18), [Print(None, [BinOp(Str('Doubled word warning.  "%s" on line %d', lineno=186, col_offset=18), Mod(), Tuple([Name('dw', Load(), lineno=186, col_offset=63), Name('lineno', Load(), lineno=186, col_offset=67)], Load(), lineno=186, col_offset=63), lineno=186, col_offset=18)], True, lineno=186, col_offset=12)], [], lineno=185, col_offset=8)], [], lineno=117, col_offset=4), Assign([Name('lastline', Store(), lineno=188, col_offset=4)], Name('lineno', Load(), lineno=188, col_offset=15), lineno=188, col_offset=4), For(Tuple([Name('lineno', Store(), lineno=189, col_offset=8), Name('symbol', Store(), lineno=189, col_offset=16)], Store(), lineno=189, col_offset=8), Name('openers', Load(), lineno=189, col_offset=26), [Print(None, [BinOp(Str("Unmatched open delimiter '%s' on line %d", lineno=190, col_offset=14), Mod(), Tuple([Name('symbol', Load(), lineno=190, col_offset=60), Name('lineno', Load(), lineno=190, col_offset=68)], Load(), lineno=190, col_offset=60), lineno=190, col_offset=14)], True, lineno=190, col_offset=8)], [], lineno=189, col_offset=4), For(Name('lineno', Store(), lineno=191, col_offset=8), Name('bracestack', Load(), lineno=191, col_offset=18), [Print(None, [BinOp(Str('Unmatched { on line %d', lineno=192, col_offset=14), Mod(), Tuple([Name('lineno', Load(), lineno=192, col_offset=42)], Load(), lineno=192, col_offset=42), lineno=192, col_offset=14)], True, lineno=192, col_offset=8)], [], lineno=191, col_offset=4), Print(None, [BinOp(Str('Done checking %d lines.', lineno=193, col_offset=10), Mod(), Tuple([Name('lastline', Load(), lineno=193, col_offset=39)], Load(), lineno=193, col_offset=39), lineno=193, col_offset=10)], True, lineno=193, col_offset=4), Return(Num(0, lineno=194, col_offset=11), lineno=194, col_offset=4)], [], lineno=74, col_offset=0), FunctionDef('main', arguments([Name('args', Param(), lineno=196, col_offset=9)], None, None, [Name('None', Load(), lineno=196, col_offset=14)]), [If(Compare(Name('args', Load(), lineno=197, col_offset=7), [Is()], [Name('None', Load(), lineno=197, col_offset=15)], lineno=197, col_offset=7), [Assign([Name('args', Store(), lineno=198, col_offset=8)], Subscript(Attribute(Name('sys', Load(), lineno=198, col_offset=15), 'argv', Load(), lineno=198, col_offset=15), Slice(Num(1, lineno=198, col_offset=24), None, None), Load(), lineno=198, col_offset=15), lineno=198, col_offset=8)], [], lineno=197, col_offset=4), Assign([Tuple([Name('optitems', Store(), lineno=199, col_offset=4), Name('arglist', Store(), lineno=199, col_offset=14)], Store(), lineno=199, col_offset=4)], Call(Attribute(Name('getopt', Load(), lineno=199, col_offset=24), 'getopt', Load(), lineno=199, col_offset=24), [Name('args', Load(), lineno=199, col_offset=38), Str('k:mdhs:v', lineno=199, col_offset=44)], [], None, None, lineno=199, col_offset=24), lineno=199, col_offset=4), Assign([Name('opts', Store(), lineno=200, col_offset=4)], Call(Name('dict', Load(), lineno=200, col_offset=11), [Name('optitems', Load(), lineno=200, col_offset=16)], [], None, None, lineno=200, col_offset=11), lineno=200, col_offset=4), If(BoolOp(Or(), [Compare(Str('-h', lineno=201, col_offset=7), [In()], [Name('opts', Load(), lineno=201, col_offset=15)], lineno=201, col_offset=7), Compare(Name('args', Load(), lineno=201, col_offset=23), [Eq()], [List([], Load(), lineno=201, col_offset=29)], lineno=201, col_offset=23)], lineno=201, col_offset=7), [Print(None, [Name('__doc__', Load(), lineno=202, col_offset=14)], True, lineno=202, col_offset=8), Return(Num(0, lineno=203, col_offset=15), lineno=203, col_offset=8)], [], lineno=201, col_offset=4), If(Compare(Call(Name('len', Load(), lineno=205, col_offset=7), [Name('arglist', Load(), lineno=205, col_offset=11)], [], None, None, lineno=205, col_offset=7), [Lt()], [Num(1, lineno=205, col_offset=22)], lineno=205, col_offset=7), [Print(None, [Str('Please specify a file to be checked', lineno=206, col_offset=14)], True, lineno=206, col_offset=8), Return(Num(1, lineno=207, col_offset=15), lineno=207, col_offset=8)], [], lineno=205, col_offset=4), For(Tuple([Name('i', Store(), lineno=209, col_offset=8), Name('filespec', Store(), lineno=209, col_offset=11)], Store(), lineno=209, col_offset=8), Call(Name('enumerate', Load(), lineno=209, col_offset=23), [Name('arglist', Load(), lineno=209, col_offset=33)], [], None, None, lineno=209, col_offset=23), [If(BoolOp(Or(), [Compare(Str('*', lineno=210, col_offset=11), [In()], [Name('filespec', Load(), lineno=210, col_offset=18)], lineno=210, col_offset=11), Compare(Str('?', lineno=210, col_offset=30), [In()], [Name('filespec', Load(), lineno=210, col_offset=37)], lineno=210, col_offset=30)], lineno=210, col_offset=11), [Assign([Subscript(Name('arglist', Load(), lineno=211, col_offset=12), Slice(Name('i', Load(), lineno=211, col_offset=20), BinOp(Name('i', Load(), lineno=211, col_offset=22), Add(), Num(1, lineno=211, col_offset=24), lineno=211, col_offset=22), None), Store(), lineno=211, col_offset=12)], Call(Attribute(Name('glob', Load(), lineno=211, col_offset=29), 'glob', Load(), lineno=211, col_offset=29), [Name('filespec', Load(), lineno=211, col_offset=39)], [], None, None, lineno=211, col_offset=29), lineno=211, col_offset=12)], [], lineno=210, col_offset=8)], [], lineno=209, col_offset=4), Assign([Name('morecmds', Store(), lineno=213, col_offset=4)], ListComp(Name('v', Load(), lineno=213, col_offset=16), [comprehension(Tuple([Name('k', Store(), lineno=213, col_offset=22), Name('v', Store(), lineno=213, col_offset=24)], Store(), lineno=213, col_offset=22), Name('optitems', Load(), lineno=213, col_offset=29), [Compare(Name('k', Load(), lineno=213, col_offset=41), [Eq()], [Str('-k', lineno=213, col_offset=44)], lineno=213, col_offset=41)])], lineno=213, col_offset=16), lineno=213, col_offset=4), Assign([Name('err', Store(), lineno=214, col_offset=4)], List([], Load(), lineno=214, col_offset=10), lineno=214, col_offset=4), For(Name('filename', Store(), lineno=216, col_offset=8), Name('arglist', Load(), lineno=216, col_offset=20), [Print(None, [BinOp(Str('=', lineno=217, col_offset=14), Mult(), Num(30, lineno=217, col_offset=20), lineno=217, col_offset=14)], True, lineno=217, col_offset=8), Print(None, [Str('Checking', lineno=218, col_offset=14), Name('filename', Load(), lineno=218, col_offset=26)], True, lineno=218, col_offset=8), TryExcept([Assign([Name('f', Store(), lineno=220, col_offset=12)], Call(Name('open', Load(), lineno=220, col_offset=16), [Name('filename', Load(), lineno=220, col_offset=21)], [], None, None, lineno=220, col_offset=16), lineno=220, col_offset=12)], [ExceptHandler(Name('IOError', Load(), lineno=221, col_offset=15), None, [Print(None, [BinOp(Str('Cannot open file %s.', lineno=222, col_offset=18), Mod(), Subscript(Name('arglist', Load(), lineno=222, col_offset=43), Index(Num(0, lineno=222, col_offset=51)), Load(), lineno=222, col_offset=43), lineno=222, col_offset=18)], True, lineno=222, col_offset=12), Return(Num(2, lineno=223, col_offset=19), lineno=223, col_offset=12)], lineno=221, col_offset=8)], [], lineno=219, col_offset=8), TryFinally([Expr(Call(Attribute(Name('err', Load(), lineno=226, col_offset=12), 'append', Load(), lineno=226, col_offset=12), [Call(Name('checkit', Load(), lineno=226, col_offset=23), [Name('f', Load(), lineno=226, col_offset=31), Name('opts', Load(), lineno=226, col_offset=34), Name('morecmds', Load(), lineno=226, col_offset=40)], [], None, None, lineno=226, col_offset=23)], [], None, None, lineno=226, col_offset=12), lineno=226, col_offset=12)], [Expr(Call(Attribute(Name('f', Load(), lineno=228, col_offset=12), 'close', Load(), lineno=228, col_offset=12), [], [], None, None, lineno=228, col_offset=12), lineno=228, col_offset=12)], lineno=225, col_offset=8)], [], lineno=216, col_offset=4), Return(Call(Name('max', Load(), lineno=230, col_offset=11), [Name('err', Load(), lineno=230, col_offset=15)], [], None, None, lineno=230, col_offset=11), lineno=230, col_offset=4)], [], lineno=196, col_offset=0), If(Compare(Name('__name__', Load(), lineno=232, col_offset=3), [Eq()], [Str('__main__', lineno=232, col_offset=15)], lineno=232, col_offset=3), [Expr(Call(Attribute(Name('sys', Load(), lineno=233, col_offset=4), 'exit', Load(), lineno=233, col_offset=4), [Call(Name('main', Load(), lineno=233, col_offset=13), [], [], None, None, lineno=233, col_offset=13)], [], None, None, lineno=233, col_offset=4), lineno=233, col_offset=4)], [], lineno=232, col_offset=0)])
