Module([Import([alias('sys', None)], lineno=3, col_offset=0), ImportFrom('bgenlocations', [alias('TOOLBOXDIR', None), alias('BGENDIR', None)], 0, lineno=4, col_offset=0), Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=5, col_offset=0), 'path', Load(), lineno=5, col_offset=0), 'append', Load(), lineno=5, col_offset=0), [Name('BGENDIR', Load(), lineno=5, col_offset=16)], [], None, None, lineno=5, col_offset=0), lineno=5, col_offset=0), ImportFrom('scantools', [alias('Scanner', None)], 0, lineno=6, col_offset=0), Assign([Name('LONG', Store(), lineno=8, col_offset=0)], Str('Components', lineno=8, col_offset=7), lineno=8, col_offset=0), Assign([Name('SHORT', Store(), lineno=9, col_offset=0)], Str('cm', lineno=9, col_offset=8), lineno=9, col_offset=0), FunctionDef('main', arguments([], None, None, []), [Assign([Name('input', Store(), lineno=12, col_offset=4)], Str('Components.h', lineno=12, col_offset=12), lineno=12, col_offset=4), Assign([Name('output', Store(), lineno=13, col_offset=4)], BinOp(Name('SHORT', Load(), lineno=13, col_offset=13), Add(), Str('gen.py', lineno=13, col_offset=21), lineno=13, col_offset=13), lineno=13, col_offset=4), Assign([Name('defsoutput', Store(), lineno=14, col_offset=4)], BinOp(BinOp(Name('TOOLBOXDIR', Load(), lineno=14, col_offset=17), Add(), Name('LONG', Load(), lineno=14, col_offset=30), lineno=14, col_offset=17), Add(), Str('.py', lineno=14, col_offset=37), lineno=14, col_offset=35), lineno=14, col_offset=4), Assign([Name('scanner', Store(), lineno=15, col_offset=4)], Call(Name('MyScanner', Load(), lineno=15, col_offset=14), [Name('input', Load(), lineno=15, col_offset=24), Name('output', Load(), lineno=15, col_offset=31), Name('defsoutput', Load(), lineno=15, col_offset=39)], [], None, None, lineno=15, col_offset=14), lineno=15, col_offset=4), Expr(Call(Attribute(Name('scanner', Load(), lineno=16, col_offset=4), 'scan', Load(), lineno=16, col_offset=4), [], [], None, None, lineno=16, col_offset=4), lineno=16, col_offset=4), Expr(Call(Attribute(Name('scanner', Load(), lineno=17, col_offset=4), 'close', Load(), lineno=17, col_offset=4), [], [], None, None, lineno=17, col_offset=4), lineno=17, col_offset=4), Print(None, [Str('=== Testing definitions output code ===', lineno=18, col_offset=10)], True, lineno=18, col_offset=4), Expr(Call(Name('execfile', Load(), lineno=19, col_offset=4), [Name('defsoutput', Load(), lineno=19, col_offset=13), Dict([], [], lineno=19, col_offset=25), Dict([], [], lineno=19, col_offset=29)], [], None, None, lineno=19, col_offset=4), lineno=19, col_offset=4), Print(None, [Str('=== Done scanning and generating, now importing the generated code... ===', lineno=20, col_offset=10)], True, lineno=20, col_offset=4), Exec(BinOp(BinOp(Str('import ', lineno=21, col_offset=9), Add(), Name('SHORT', Load(), lineno=21, col_offset=21), lineno=21, col_offset=9), Add(), Str('support', lineno=21, col_offset=29), lineno=21, col_offset=27), None, None, lineno=21, col_offset=4), Print(None, [Str("=== Done.  It's up to you to compile it now! ===", lineno=22, col_offset=10)], True, lineno=22, col_offset=4)], [], lineno=11, col_offset=0), ClassDef('MyScanner', [Name('Scanner', Load(), lineno=24, col_offset=16)], [FunctionDef('destination', arguments([Name('self', Param(), lineno=26, col_offset=20), Name('type', Param(), lineno=26, col_offset=26), Name('name', Param(), lineno=26, col_offset=32), Name('arglist', Param(), lineno=26, col_offset=38)], None, None, []), [Assign([Name('classname', Store(), lineno=27, col_offset=8)], Str('Function', lineno=27, col_offset=20), lineno=27, col_offset=8), Assign([Name('listname', Store(), lineno=28, col_offset=8)], Str('functions', lineno=28, col_offset=19), lineno=28, col_offset=8), If(Name('arglist', Load(), lineno=29, col_offset=11), [Assign([Tuple([Name('t', Store(), lineno=30, col_offset=12), Name('n', Store(), lineno=30, col_offset=15), Name('m', Store(), lineno=30, col_offset=18)], Store(), lineno=30, col_offset=12)], Subscript(Name('arglist', Load(), lineno=30, col_offset=22), Index(Num(0, lineno=30, col_offset=30)), Load(), lineno=30, col_offset=22), lineno=30, col_offset=12), If(BoolOp(And(), [Compare(Name('t', Load(), lineno=35, col_offset=15), [Eq()], [Str('Component', lineno=35, col_offset=20)], lineno=35, col_offset=15), Compare(Name('m', Load(), lineno=35, col_offset=36), [Eq()], [Str('InMode', lineno=35, col_offset=41)], lineno=35, col_offset=36), Compare(Name('name', Load(), lineno=35, col_offset=54), [NotEq()], [Str('FindNextComponent', lineno=35, col_offset=62)], lineno=35, col_offset=54)], lineno=35, col_offset=15), [Assign([Name('classname', Store(), lineno=36, col_offset=16)], Str('Method', lineno=36, col_offset=28), lineno=36, col_offset=16), Assign([Name('listname', Store(), lineno=37, col_offset=16)], Str('c_methods', lineno=37, col_offset=27), lineno=37, col_offset=16)], [If(BoolOp(And(), [Compare(Name('t', Load(), lineno=38, col_offset=17), [Eq()], [Str('ComponentInstance', lineno=38, col_offset=22)], lineno=38, col_offset=17), Compare(Name('m', Load(), lineno=38, col_offset=46), [Eq()], [Str('InMode', lineno=38, col_offset=51)], lineno=38, col_offset=46)], lineno=38, col_offset=17), [Assign([Name('classname', Store(), lineno=39, col_offset=16)], Str('Method', lineno=39, col_offset=28), lineno=39, col_offset=16), Assign([Name('listname', Store(), lineno=40, col_offset=16)], Str('ci_methods', lineno=40, col_offset=27), lineno=40, col_offset=16)], [], lineno=38, col_offset=17)], lineno=35, col_offset=12)], [], lineno=29, col_offset=8), Return(Tuple([Name('classname', Load(), lineno=41, col_offset=15), Name('listname', Load(), lineno=41, col_offset=26)], Load(), lineno=41, col_offset=15), lineno=41, col_offset=8)], [], lineno=26, col_offset=4), FunctionDef('writeinitialdefs', arguments([Name('self', Param(), lineno=43, col_offset=25)], None, None, []), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=44, col_offset=8), 'defsfile', Load(), lineno=44, col_offset=8), 'write', Load(), lineno=44, col_offset=8), [Str('def FOUR_CHAR_CODE(x): return x\n', lineno=44, col_offset=28)], [], None, None, lineno=44, col_offset=8), lineno=44, col_offset=8)], [], lineno=43, col_offset=4), FunctionDef('makeblacklistnames', arguments([Name('self', Param(), lineno=46, col_offset=27)], None, None, []), [Return(List([Str('OpenADefaultComponent', lineno=48, col_offset=16), Str('GetComponentTypeModSeed', lineno=49, col_offset=16), Str('OpenAComponentResFile', lineno=50, col_offset=16), Str('CallComponentUnregister', lineno=51, col_offset=16), Str('CallComponentTarget', lineno=52, col_offset=16), Str('CallComponentRegister', lineno=53, col_offset=16), Str('CallComponentVersion', lineno=54, col_offset=16), Str('CallComponentCanDo', lineno=55, col_offset=16), Str('CallComponentClose', lineno=56, col_offset=16), Str('CallComponentOpen', lineno=57, col_offset=16), Str('OpenAComponent', lineno=58, col_offset=16), Str('GetComponentPublicResource', lineno=59, col_offset=16), Str('CallComponentGetPublicResource', lineno=60, col_offset=16), Str('SetComponentInstanceA5', lineno=61, col_offset=16), Str('GetComponentInstanceA5', lineno=62, col_offset=16)], Load(), lineno=47, col_offset=15), lineno=47, col_offset=8)], [], lineno=46, col_offset=4), FunctionDef('makeblacklisttypes', arguments([Name('self', Param(), lineno=65, col_offset=27)], None, None, []), [Return(List([Str('ResourceSpec', lineno=67, col_offset=16), Str('ComponentResource', lineno=68, col_offset=16), Str('ComponentPlatformInfo', lineno=69, col_offset=16), Str('ComponentResourceExtension', lineno=70, col_offset=16), Str('ComponentPlatformInfoArray', lineno=71, col_offset=16), Str('ExtComponentResource', lineno=72, col_offset=16), Str('ComponentParameters', lineno=73, col_offset=16), Str('ComponentRoutineUPP', lineno=75, col_offset=16), Str('ComponentMPWorkFunctionUPP', lineno=76, col_offset=16), Str('ComponentFunctionUPP', lineno=77, col_offset=16), Str('GetMissingComponentResourceUPP', lineno=78, col_offset=16)], Load(), lineno=66, col_offset=15), lineno=66, col_offset=8)], [], lineno=65, col_offset=4), FunctionDef('makerepairinstructions', arguments([Name('self', Param(), lineno=81, col_offset=31)], None, None, []), [Return(List([Tuple([List([Tuple([Str('ComponentDescription', lineno=83, col_offset=19), Str('looking', lineno=83, col_offset=43), Str('OutMode', lineno=83, col_offset=54)], Load(), lineno=83, col_offset=19)], Load(), lineno=83, col_offset=17), List([Tuple([Str('ComponentDescription', lineno=84, col_offset=19), Str('*', lineno=84, col_offset=43), Str('InMode', lineno=84, col_offset=48)], Load(), lineno=84, col_offset=19)], Load(), lineno=84, col_offset=17)], Load(), lineno=83, col_offset=17)], Load(), lineno=82, col_offset=15), lineno=82, col_offset=8)], [], lineno=81, col_offset=4)], [], lineno=24, col_offset=0), If(Compare(Name('__name__', Load(), lineno=87, col_offset=3), [Eq()], [Str('__main__', lineno=87, col_offset=15)], lineno=87, col_offset=3), [Expr(Call(Name('main', Load(), lineno=88, col_offset=4), [], [], None, None, lineno=88, col_offset=4), lineno=88, col_offset=4)], [], lineno=87, col_offset=0)])
