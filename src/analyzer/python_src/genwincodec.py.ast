Module([Expr(Str('This script generates a Python codec module from a Windows Code Page.\n\nIt uses the function MultiByteToWideChar to generate a decoding table.\n', lineno=4, col_offset=-1), lineno=4, col_offset=-1), Import([alias('ctypes', None)], lineno=6, col_offset=0), ImportFrom('ctypes', [alias('wintypes', None)], 0, lineno=7, col_offset=0), ImportFrom('gencodec', [alias('codegen', None)], 0, lineno=8, col_offset=0), Import([alias('unicodedata', None)], lineno=9, col_offset=0), FunctionDef('genwinmap', arguments([Name('codepage', Param(), lineno=11, col_offset=14)], None, None, []), [Assign([Name('MultiByteToWideChar', Store(), lineno=12, col_offset=4)], Attribute(Attribute(Attribute(Name('ctypes', Load(), lineno=12, col_offset=26), 'windll', Load(), lineno=12, col_offset=26), 'kernel32', Load(), lineno=12, col_offset=26), 'MultiByteToWideChar', Load(), lineno=12, col_offset=26), lineno=12, col_offset=4), Assign([Attribute(Name('MultiByteToWideChar', Load(), lineno=13, col_offset=4), 'argtypes', Store(), lineno=13, col_offset=4)], List([Attribute(Name('wintypes', Load(), lineno=13, col_offset=36), 'UINT', Load(), lineno=13, col_offset=36), Attribute(Name('wintypes', Load(), lineno=13, col_offset=51), 'DWORD', Load(), lineno=13, col_offset=51), Attribute(Name('wintypes', Load(), lineno=14, col_offset=36), 'LPCSTR', Load(), lineno=14, col_offset=36), Attribute(Name('ctypes', Load(), lineno=14, col_offset=53), 'c_int', Load(), lineno=14, col_offset=53), Attribute(Name('wintypes', Load(), lineno=15, col_offset=36), 'LPWSTR', Load(), lineno=15, col_offset=36), Attribute(Name('ctypes', Load(), lineno=15, col_offset=53), 'c_int', Load(), lineno=15, col_offset=53)], Load(), lineno=13, col_offset=35), lineno=13, col_offset=4), Assign([Attribute(Name('MultiByteToWideChar', Load(), lineno=16, col_offset=4), 'restype', Store(), lineno=16, col_offset=4)], Attribute(Name('ctypes', Load(), lineno=16, col_offset=34), 'c_int', Load(), lineno=16, col_offset=34), lineno=16, col_offset=4), Assign([Name('enc2uni', Store(), lineno=18, col_offset=4)], Dict([], [], lineno=18, col_offset=14), lineno=18, col_offset=4), For(Name('i', Store(), lineno=20, col_offset=8), BinOp(Call(Name('range', Load(), lineno=20, col_offset=13), [Num(32, lineno=20, col_offset=19)], [], None, None, lineno=20, col_offset=13), Add(), List([Num(127, lineno=20, col_offset=26)], Load(), lineno=20, col_offset=25), lineno=20, col_offset=13), [Assign([Subscript(Name('enc2uni', Load(), lineno=21, col_offset=8), Index(Name('i', Load(), lineno=21, col_offset=16)), Store(), lineno=21, col_offset=8)], Tuple([Name('i', Load(), lineno=21, col_offset=22), Str('CONTROL CHARACTER', lineno=21, col_offset=25)], Load(), lineno=21, col_offset=22), lineno=21, col_offset=8)], [], lineno=20, col_offset=4), For(Name('i', Store(), lineno=23, col_offset=8), Call(Name('range', Load(), lineno=23, col_offset=13), [Num(256, lineno=23, col_offset=19)], [], None, None, lineno=23, col_offset=13), [Assign([Name('buf', Store(), lineno=24, col_offset=8)], Call(Attribute(Name('ctypes', Load(), lineno=24, col_offset=14), 'create_unicode_buffer', Load(), lineno=24, col_offset=14), [Num(2, lineno=24, col_offset=43)], [], None, None, lineno=24, col_offset=14), lineno=24, col_offset=8), Assign([Name('ret', Store(), lineno=25, col_offset=8)], Call(Name('MultiByteToWideChar', Load(), lineno=25, col_offset=14), [Name('codepage', Load(), lineno=26, col_offset=12), Num(0, lineno=26, col_offset=22), Call(Name('chr', Load(), lineno=27, col_offset=12), [Name('i', Load(), lineno=27, col_offset=16)], [], None, None, lineno=27, col_offset=12), Num(1, lineno=27, col_offset=20), Name('buf', Load(), lineno=28, col_offset=12), Num(2, lineno=28, col_offset=17)], [], None, None, lineno=25, col_offset=14), lineno=25, col_offset=8), Assert(Compare(Name('ret', Load(), lineno=29, col_offset=15), [Eq()], [Num(1, lineno=29, col_offset=22)], lineno=29, col_offset=15), Str('invalid code page', lineno=29, col_offset=25), lineno=29, col_offset=8), Assert(Compare(Subscript(Name('buf', Load(), lineno=30, col_offset=15), Index(Num(1, lineno=30, col_offset=19)), Load(), lineno=30, col_offset=15), [Eq()], [Str('\x00', lineno=30, col_offset=25)], lineno=30, col_offset=15), None, lineno=30, col_offset=8), TryExcept([Assign([Name('name', Store(), lineno=32, col_offset=12)], Call(Attribute(Name('unicodedata', Load(), lineno=32, col_offset=19), 'name', Load(), lineno=32, col_offset=19), [Subscript(Name('buf', Load(), lineno=32, col_offset=36), Index(Num(0, lineno=32, col_offset=40)), Load(), lineno=32, col_offset=36)], [], None, None, lineno=32, col_offset=19), lineno=32, col_offset=12)], [ExceptHandler(Name('ValueError', Load(), lineno=33, col_offset=15), None, [TryExcept([Assign([Name('name', Store(), lineno=35, col_offset=16)], Subscript(Subscript(Name('enc2uni', Load(), lineno=35, col_offset=23), Index(Name('i', Load(), lineno=35, col_offset=31)), Load(), lineno=35, col_offset=23), Index(Num(1, lineno=35, col_offset=34)), Load(), lineno=35, col_offset=23), lineno=35, col_offset=16)], [ExceptHandler(Name('KeyError', Load(), lineno=36, col_offset=19), None, [Assign([Name('name', Store(), lineno=37, col_offset=16)], Str('', lineno=37, col_offset=23), lineno=37, col_offset=16)], lineno=36, col_offset=12)], [], lineno=34, col_offset=12)], lineno=33, col_offset=8)], [], lineno=31, col_offset=8), Assign([Subscript(Name('enc2uni', Load(), lineno=39, col_offset=8), Index(Name('i', Load(), lineno=39, col_offset=16)), Store(), lineno=39, col_offset=8)], Tuple([Call(Name('ord', Load(), lineno=39, col_offset=22), [Subscript(Name('buf', Load(), lineno=39, col_offset=26), Index(Num(0, lineno=39, col_offset=30)), Load(), lineno=39, col_offset=26)], [], None, None, lineno=39, col_offset=22), Name('name', Load(), lineno=39, col_offset=35)], Load(), lineno=39, col_offset=22), lineno=39, col_offset=8)], [], lineno=23, col_offset=4), Return(Name('enc2uni', Load(), lineno=41, col_offset=11), lineno=41, col_offset=4)], [], lineno=11, col_offset=0), FunctionDef('genwincodec', arguments([Name('codepage', Param(), lineno=43, col_offset=16)], None, None, []), [Import([alias('platform', None)], lineno=44, col_offset=4), Assign([Name('map', Store(), lineno=45, col_offset=4)], Call(Name('genwinmap', Load(), lineno=45, col_offset=10), [Name('codepage', Load(), lineno=45, col_offset=20)], [], None, None, lineno=45, col_offset=10), lineno=45, col_offset=4), Assign([Name('encodingname', Store(), lineno=46, col_offset=4)], BinOp(Str('cp%d', lineno=46, col_offset=19), Mod(), Name('codepage', Load(), lineno=46, col_offset=28), lineno=46, col_offset=19), lineno=46, col_offset=4), Assign([Name('code', Store(), lineno=47, col_offset=4)], Call(Name('codegen', Load(), lineno=47, col_offset=11), [Str('', lineno=47, col_offset=19), Name('map', Load(), lineno=47, col_offset=23), Name('encodingname', Load(), lineno=47, col_offset=28)], [], None, None, lineno=47, col_offset=11), lineno=47, col_offset=4), Assign([Name('code', Store(), lineno=49, col_offset=4)], BinOp(BinOp(Str('"""Python Character Mapping Codec %s generated on Windows:\n%s with the command:\n  python Tools/unicode/genwincodec.py %s\n"""#"\n', lineno=54, col_offset=-1), Mod(), Tuple([Name('encodingname', Load(), lineno=54, col_offset=7), Call(Attribute(Str(' ', lineno=54, col_offset=21), 'join', Load(), lineno=54, col_offset=21), [Call(Attribute(Name('platform', Load(), lineno=54, col_offset=30), 'win32_ver', Load(), lineno=54, col_offset=30), [], [], None, None, lineno=54, col_offset=30)], [], None, None, lineno=54, col_offset=21), Name('codepage', Load(), lineno=54, col_offset=53)], Load(), lineno=54, col_offset=7), lineno=54, col_offset=-1), Add(), Subscript(Call(Attribute(Name('code', Load(), lineno=55, col_offset=10), 'split', Load(), lineno=55, col_offset=10), [Str('"""#"', lineno=55, col_offset=21), Num(1, lineno=55, col_offset=30)], [], None, None, lineno=55, col_offset=10), Index(Num(1, lineno=55, col_offset=33)), Load(), lineno=55, col_offset=10), lineno=54, col_offset=-1), lineno=49, col_offset=4), Print(None, [Name('code', Load(), lineno=57, col_offset=10)], True, lineno=57, col_offset=4)], [], lineno=43, col_offset=0), If(Compare(Name('__name__', Load(), lineno=59, col_offset=3), [Eq()], [Str('__main__', lineno=59, col_offset=15)], lineno=59, col_offset=3), [Import([alias('sys', None)], lineno=60, col_offset=4), Expr(Call(Name('genwincodec', Load(), lineno=61, col_offset=4), [Call(Name('int', Load(), lineno=61, col_offset=16), [Subscript(Attribute(Name('sys', Load(), lineno=61, col_offset=20), 'argv', Load(), lineno=61, col_offset=20), Index(Num(1, lineno=61, col_offset=29)), Load(), lineno=61, col_offset=20)], [], None, None, lineno=61, col_offset=16)], [], None, None, lineno=61, col_offset=4), lineno=61, col_offset=4)], [], lineno=59, col_offset=0)])
