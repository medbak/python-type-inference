Module([Assign([Name('__all__', Store(), lineno=1, col_offset=0)], List([Str('Counter', lineno=1, col_offset=11), Str('deque', lineno=1, col_offset=22), Str('defaultdict', lineno=1, col_offset=31), Str('namedtuple', lineno=1, col_offset=46), Str('OrderedDict', lineno=1, col_offset=60)], Load(), lineno=1, col_offset=10), lineno=1, col_offset=0), ImportFrom('_abcoll', [alias('*', None)], 0, lineno=4, col_offset=0), Import([alias('_abcoll', None)], lineno=5, col_offset=0), AugAssign(Name('__all__', Store(), lineno=6, col_offset=0), Add(), Attribute(Name('_abcoll', Load(), lineno=6, col_offset=11), '__all__', Load(), lineno=6, col_offset=11), lineno=6, col_offset=0), ImportFrom('_collections', [alias('deque', None), alias('defaultdict', None)], 0, lineno=8, col_offset=0), ImportFrom('operator', [alias('itemgetter', '_itemgetter'), alias('eq', '_eq')], 0, lineno=9, col_offset=0), ImportFrom('keyword', [alias('iskeyword', '_iskeyword')], 0, lineno=10, col_offset=0), Import([alias('sys', '_sys')], lineno=11, col_offset=0), Import([alias('heapq', '_heapq')], lineno=12, col_offset=0), ImportFrom('itertools', [alias('repeat', '_repeat'), alias('chain', '_chain'), alias('starmap', '_starmap'), alias('ifilter', '_ifilter'), alias('imap', '_imap')], 0, lineno=13, col_offset=0), TryExcept([ImportFrom('thread', [alias('get_ident', None)], 0, lineno=16, col_offset=4)], [ExceptHandler(Name('ImportError', Load(), lineno=17, col_offset=7), None, [ImportFrom('dummy_thread', [alias('get_ident', None)], 0, lineno=18, col_offset=4)], lineno=17, col_offset=0)], [], lineno=15, col_offset=0), FunctionDef('_recursive_repr', arguments([Name('user_function', Param(), lineno=20, col_offset=20)], None, None, []), [Expr(Str('Decorator to make a repr function return "..." for a recursive call', lineno=21, col_offset=4), lineno=21, col_offset=4), Assign([Name('repr_running', Store(), lineno=22, col_offset=4)], Call(Name('set', Load(), lineno=22, col_offset=19), [], [], None, None, lineno=22, col_offset=19), lineno=22, col_offset=4), FunctionDef('wrapper', arguments([Name('self', Param(), lineno=24, col_offset=16)], None, None, []), [Assign([Name('key', Store(), lineno=25, col_offset=8)], Tuple([Call(Name('id', Load(), lineno=25, col_offset=14), [Name('self', Load(), lineno=25, col_offset=17)], [], None, None, lineno=25, col_offset=14), Call(Name('get_ident', Load(), lineno=25, col_offset=24), [], [], None, None, lineno=25, col_offset=24)], Load(), lineno=25, col_offset=14), lineno=25, col_offset=8), If(Compare(Name('key', Load(), lineno=26, col_offset=11), [In()], [Name('repr_running', Load(), lineno=26, col_offset=18)], lineno=26, col_offset=11), [Return(Str('...', lineno=27, col_offset=19), lineno=27, col_offset=12)], [], lineno=26, col_offset=8), Expr(Call(Attribute(Name('repr_running', Load(), lineno=28, col_offset=8), 'add', Load(), lineno=28, col_offset=8), [Name('key', Load(), lineno=28, col_offset=25)], [], None, None, lineno=28, col_offset=8), lineno=28, col_offset=8), TryFinally([Assign([Name('result', Store(), lineno=30, col_offset=12)], Call(Name('user_function', Load(), lineno=30, col_offset=21), [Name('self', Load(), lineno=30, col_offset=35)], [], None, None, lineno=30, col_offset=21), lineno=30, col_offset=12)], [Expr(Call(Attribute(Name('repr_running', Load(), lineno=32, col_offset=12), 'discard', Load(), lineno=32, col_offset=12), [Name('key', Load(), lineno=32, col_offset=33)], [], None, None, lineno=32, col_offset=12), lineno=32, col_offset=12)], lineno=29, col_offset=8), Return(Name('result', Load(), lineno=33, col_offset=15), lineno=33, col_offset=8)], [], lineno=24, col_offset=4), Assign([Attribute(Name('wrapper', Load(), lineno=36, col_offset=4), '__module__', Store(), lineno=36, col_offset=4)], Call(Name('getattr', Load(), lineno=36, col_offset=25), [Name('user_function', Load(), lineno=36, col_offset=33), Str('__module__', lineno=36, col_offset=48)], [], None, None, lineno=36, col_offset=25), lineno=36, col_offset=4), Assign([Attribute(Name('wrapper', Load(), lineno=37, col_offset=4), '__doc__', Store(), lineno=37, col_offset=4)], Call(Name('getattr', Load(), lineno=37, col_offset=22), [Name('user_function', Load(), lineno=37, col_offset=30), Str('__doc__', lineno=37, col_offset=45)], [], None, None, lineno=37, col_offset=22), lineno=37, col_offset=4), Assign([Attribute(Name('wrapper', Load(), lineno=38, col_offset=4), '__name__', Store(), lineno=38, col_offset=4)], Call(Name('getattr', Load(), lineno=38, col_offset=23), [Name('user_function', Load(), lineno=38, col_offset=31), Str('__name__', lineno=38, col_offset=46)], [], None, None, lineno=38, col_offset=23), lineno=38, col_offset=4), Return(Name('wrapper', Load(), lineno=39, col_offset=11), lineno=39, col_offset=4)], [], lineno=20, col_offset=0), ClassDef('OrderedDict', [Name('dict', Load(), lineno=46, col_offset=18), Name('MutableMapping', Load(), lineno=46, col_offset=24)], [Expr(Str('Dictionary that remembers insertion order', lineno=47, col_offset=4), lineno=47, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=58, col_offset=17)], 'args', 'kwds', []), [Expr(Str('Initialize an ordered dictionary.  Signature is the same as for\n        regular dictionaries, but keyword arguments are not recommended\n        because their insertion order is arbitrary.\n\n        ', lineno=63, col_offset=-1), lineno=63, col_offset=-1), If(Compare(Call(Name('len', Load(), lineno=64, col_offset=11), [Name('args', Load(), lineno=64, col_offset=15)], [], None, None, lineno=64, col_offset=11), [Gt()], [Num(1, lineno=64, col_offset=23)], lineno=64, col_offset=11), [Raise(Call(Name('TypeError', Load(), lineno=65, col_offset=18), [BinOp(Str('expected at most 1 arguments, got %d', lineno=65, col_offset=28), Mod(), Call(Name('len', Load(), lineno=65, col_offset=69), [Name('args', Load(), lineno=65, col_offset=73)], [], None, None, lineno=65, col_offset=69), lineno=65, col_offset=28)], [], None, None, lineno=65, col_offset=18), None, None, lineno=65, col_offset=12)], [], lineno=64, col_offset=8), TryExcept([Expr(Attribute(Name('self', Load(), lineno=67, col_offset=12), '__root', Load(), lineno=67, col_offset=12), lineno=67, col_offset=12)], [ExceptHandler(Name('AttributeError', Load(), lineno=68, col_offset=15), None, [Assign([Attribute(Name('self', Load(), lineno=69, col_offset=12), '__root', Store(), lineno=69, col_offset=12), Name('root', Store(), lineno=69, col_offset=26)], List([Name('None', Load(), lineno=69, col_offset=34), Name('None', Load(), lineno=69, col_offset=40), Name('None', Load(), lineno=69, col_offset=46)], Load(), lineno=69, col_offset=33), lineno=69, col_offset=12), Assign([Name('PREV', Store(), lineno=70, col_offset=12)], Num(0, lineno=70, col_offset=19), lineno=70, col_offset=12), Assign([Name('NEXT', Store(), lineno=71, col_offset=12)], Num(1, lineno=71, col_offset=19), lineno=71, col_offset=12), Assign([Subscript(Name('root', Load(), lineno=72, col_offset=12), Index(Name('PREV', Load(), lineno=72, col_offset=17)), Store(), lineno=72, col_offset=12), Subscript(Name('root', Load(), lineno=72, col_offset=25), Index(Name('NEXT', Load(), lineno=72, col_offset=30)), Store(), lineno=72, col_offset=25)], Name('root', Load(), lineno=72, col_offset=38), lineno=72, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=73, col_offset=12), '__map', Store(), lineno=73, col_offset=12)], Dict([], [], lineno=73, col_offset=25), lineno=73, col_offset=12)], lineno=68, col_offset=8)], [], lineno=66, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=74, col_offset=8), 'update', Load(), lineno=74, col_offset=8), [], [], Name('args', Load(), lineno=74, col_offset=21), Name('kwds', Load(), lineno=74, col_offset=29), lineno=74, col_offset=8), lineno=74, col_offset=8)], [], lineno=58, col_offset=4), FunctionDef('__setitem__', arguments([Name('self', Param(), lineno=76, col_offset=20), Name('key', Param(), lineno=76, col_offset=26), Name('value', Param(), lineno=76, col_offset=31), Name('PREV', Param(), lineno=76, col_offset=38), Name('NEXT', Param(), lineno=76, col_offset=46), Name('dict_setitem', Param(), lineno=76, col_offset=54)], None, None, [Num(0, lineno=76, col_offset=43), Num(1, lineno=76, col_offset=51), Attribute(Name('dict', Load(), lineno=76, col_offset=67), '__setitem__', Load(), lineno=76, col_offset=67)]), [Expr(Str('od.__setitem__(i, y) <==> od[i]=y', lineno=77, col_offset=8), lineno=77, col_offset=8), If(Compare(Name('key', Load(), lineno=80, col_offset=11), [NotIn()], [Name('self', Load(), lineno=80, col_offset=22)], lineno=80, col_offset=11), [Assign([Name('root', Store(), lineno=81, col_offset=12)], Attribute(Name('self', Load(), lineno=81, col_offset=19), '__root', Load(), lineno=81, col_offset=19), lineno=81, col_offset=12), Assign([Name('last', Store(), lineno=82, col_offset=12)], Subscript(Name('root', Load(), lineno=82, col_offset=19), Index(Name('PREV', Load(), lineno=82, col_offset=24)), Load(), lineno=82, col_offset=19), lineno=82, col_offset=12), Assign([Subscript(Name('last', Load(), lineno=83, col_offset=12), Index(Name('NEXT', Load(), lineno=83, col_offset=17)), Store(), lineno=83, col_offset=12), Subscript(Name('root', Load(), lineno=83, col_offset=25), Index(Name('PREV', Load(), lineno=83, col_offset=30)), Store(), lineno=83, col_offset=25), Subscript(Attribute(Name('self', Load(), lineno=83, col_offset=38), '__map', Load(), lineno=83, col_offset=38), Index(Name('key', Load(), lineno=83, col_offset=49)), Store(), lineno=83, col_offset=38)], List([Name('last', Load(), lineno=83, col_offset=57), Name('root', Load(), lineno=83, col_offset=63), Name('key', Load(), lineno=83, col_offset=69)], Load(), lineno=83, col_offset=56), lineno=83, col_offset=12)], [], lineno=80, col_offset=8), Expr(Call(Name('dict_setitem', Load(), lineno=84, col_offset=8), [Name('self', Load(), lineno=84, col_offset=21), Name('key', Load(), lineno=84, col_offset=27), Name('value', Load(), lineno=84, col_offset=32)], [], None, None, lineno=84, col_offset=8), lineno=84, col_offset=8)], [], lineno=76, col_offset=4), FunctionDef('__delitem__', arguments([Name('self', Param(), lineno=86, col_offset=20), Name('key', Param(), lineno=86, col_offset=26), Name('PREV', Param(), lineno=86, col_offset=31), Name('NEXT', Param(), lineno=86, col_offset=39), Name('dict_delitem', Param(), lineno=86, col_offset=47)], None, None, [Num(0, lineno=86, col_offset=36), Num(1, lineno=86, col_offset=44), Attribute(Name('dict', Load(), lineno=86, col_offset=60), '__delitem__', Load(), lineno=86, col_offset=60)]), [Expr(Str('od.__delitem__(y) <==> del od[y]', lineno=87, col_offset=8), lineno=87, col_offset=8), Expr(Call(Name('dict_delitem', Load(), lineno=90, col_offset=8), [Name('self', Load(), lineno=90, col_offset=21), Name('key', Load(), lineno=90, col_offset=27)], [], None, None, lineno=90, col_offset=8), lineno=90, col_offset=8), Assign([Name('link', Store(), lineno=91, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=91, col_offset=15), '__map', Load(), lineno=91, col_offset=15), 'pop', Load(), lineno=91, col_offset=15), [Name('key', Load(), lineno=91, col_offset=30)], [], None, None, lineno=91, col_offset=15), lineno=91, col_offset=8), Assign([Name('link_prev', Store(), lineno=92, col_offset=8)], Subscript(Name('link', Load(), lineno=92, col_offset=20), Index(Name('PREV', Load(), lineno=92, col_offset=25)), Load(), lineno=92, col_offset=20), lineno=92, col_offset=8), Assign([Name('link_next', Store(), lineno=93, col_offset=8)], Subscript(Name('link', Load(), lineno=93, col_offset=20), Index(Name('NEXT', Load(), lineno=93, col_offset=25)), Load(), lineno=93, col_offset=20), lineno=93, col_offset=8), Assign([Subscript(Name('link_prev', Load(), lineno=94, col_offset=8), Index(Name('NEXT', Load(), lineno=94, col_offset=18)), Store(), lineno=94, col_offset=8)], Name('link_next', Load(), lineno=94, col_offset=26), lineno=94, col_offset=8), Assign([Subscript(Name('link_next', Load(), lineno=95, col_offset=8), Index(Name('PREV', Load(), lineno=95, col_offset=18)), Store(), lineno=95, col_offset=8)], Name('link_prev', Load(), lineno=95, col_offset=26), lineno=95, col_offset=8)], [], lineno=86, col_offset=4), FunctionDef('__iter__', arguments([Name('self', Param(), lineno=97, col_offset=17), Name('NEXT', Param(), lineno=97, col_offset=23), Name('KEY', Param(), lineno=97, col_offset=31)], None, None, [Num(1, lineno=97, col_offset=28), Num(2, lineno=97, col_offset=35)]), [Expr(Str('od.__iter__() <==> iter(od)', lineno=98, col_offset=8), lineno=98, col_offset=8), Assign([Name('root', Store(), lineno=100, col_offset=8)], Attribute(Name('self', Load(), lineno=100, col_offset=15), '__root', Load(), lineno=100, col_offset=15), lineno=100, col_offset=8), Assign([Name('curr', Store(), lineno=101, col_offset=8)], Subscript(Name('root', Load(), lineno=101, col_offset=15), Index(Name('NEXT', Load(), lineno=101, col_offset=20)), Load(), lineno=101, col_offset=15), lineno=101, col_offset=8), While(Compare(Name('curr', Load(), lineno=102, col_offset=14), [IsNot()], [Name('root', Load(), lineno=102, col_offset=26)], lineno=102, col_offset=14), [Expr(Yield(Subscript(Name('curr', Load(), lineno=103, col_offset=18), Index(Name('KEY', Load(), lineno=103, col_offset=23)), Load(), lineno=103, col_offset=18), lineno=103, col_offset=12), lineno=103, col_offset=12), Assign([Name('curr', Store(), lineno=104, col_offset=12)], Subscript(Name('curr', Load(), lineno=104, col_offset=19), Index(Name('NEXT', Load(), lineno=104, col_offset=24)), Load(), lineno=104, col_offset=19), lineno=104, col_offset=12)], [], lineno=102, col_offset=8)], [], lineno=97, col_offset=4), FunctionDef('__reversed__', arguments([Name('self', Param(), lineno=106, col_offset=21), Name('PREV', Param(), lineno=106, col_offset=27), Name('KEY', Param(), lineno=106, col_offset=35)], None, None, [Num(0, lineno=106, col_offset=32), Num(2, lineno=106, col_offset=39)]), [Expr(Str('od.__reversed__() <==> reversed(od)', lineno=107, col_offset=8), lineno=107, col_offset=8), Assign([Name('root', Store(), lineno=109, col_offset=8)], Attribute(Name('self', Load(), lineno=109, col_offset=15), '__root', Load(), lineno=109, col_offset=15), lineno=109, col_offset=8), Assign([Name('curr', Store(), lineno=110, col_offset=8)], Subscript(Name('root', Load(), lineno=110, col_offset=15), Index(Name('PREV', Load(), lineno=110, col_offset=20)), Load(), lineno=110, col_offset=15), lineno=110, col_offset=8), While(Compare(Name('curr', Load(), lineno=111, col_offset=14), [IsNot()], [Name('root', Load(), lineno=111, col_offset=26)], lineno=111, col_offset=14), [Expr(Yield(Subscript(Name('curr', Load(), lineno=112, col_offset=18), Index(Name('KEY', Load(), lineno=112, col_offset=23)), Load(), lineno=112, col_offset=18), lineno=112, col_offset=12), lineno=112, col_offset=12), Assign([Name('curr', Store(), lineno=113, col_offset=12)], Subscript(Name('curr', Load(), lineno=113, col_offset=19), Index(Name('PREV', Load(), lineno=113, col_offset=24)), Load(), lineno=113, col_offset=19), lineno=113, col_offset=12)], [], lineno=111, col_offset=8)], [], lineno=106, col_offset=4), FunctionDef('__reduce__', arguments([Name('self', Param(), lineno=115, col_offset=19)], None, None, []), [Expr(Str('Return state information for pickling', lineno=116, col_offset=8), lineno=116, col_offset=8), Assign([Name('items', Store(), lineno=117, col_offset=8)], ListComp(List([Name('k', Load(), lineno=117, col_offset=18), Subscript(Name('self', Load(), lineno=117, col_offset=21), Index(Name('k', Load(), lineno=117, col_offset=26)), Load(), lineno=117, col_offset=21)], Load(), lineno=117, col_offset=17), [comprehension(Name('k', Store(), lineno=117, col_offset=34), Name('self', Load(), lineno=117, col_offset=39), [])], lineno=117, col_offset=17), lineno=117, col_offset=8), Assign([Name('tmp', Store(), lineno=118, col_offset=8)], Tuple([Attribute(Name('self', Load(), lineno=118, col_offset=14), '__map', Load(), lineno=118, col_offset=14), Attribute(Name('self', Load(), lineno=118, col_offset=26), '__root', Load(), lineno=118, col_offset=26)], Load(), lineno=118, col_offset=14), lineno=118, col_offset=8), Delete([Attribute(Name('self', Load(), lineno=119, col_offset=12), '__map', Del(), lineno=119, col_offset=12), Attribute(Name('self', Load(), lineno=119, col_offset=24), '__root', Del(), lineno=119, col_offset=24)], lineno=119, col_offset=8), Assign([Name('inst_dict', Store(), lineno=120, col_offset=8)], Call(Attribute(Call(Name('vars', Load(), lineno=120, col_offset=20), [Name('self', Load(), lineno=120, col_offset=25)], [], None, None, lineno=120, col_offset=20), 'copy', Load(), lineno=120, col_offset=20), [], [], None, None, lineno=120, col_offset=20), lineno=120, col_offset=8), Assign([Tuple([Attribute(Name('self', Load(), lineno=121, col_offset=8), '__map', Store(), lineno=121, col_offset=8), Attribute(Name('self', Load(), lineno=121, col_offset=20), '__root', Store(), lineno=121, col_offset=20)], Store(), lineno=121, col_offset=8)], Name('tmp', Load(), lineno=121, col_offset=34), lineno=121, col_offset=8), If(Name('inst_dict', Load(), lineno=122, col_offset=11), [Return(Tuple([Attribute(Name('self', Load(), lineno=123, col_offset=20), '__class__', Load(), lineno=123, col_offset=20), Tuple([Name('items', Load(), lineno=123, col_offset=37)], Load(), lineno=123, col_offset=37), Name('inst_dict', Load(), lineno=123, col_offset=46)], Load(), lineno=123, col_offset=20), lineno=123, col_offset=12)], [], lineno=122, col_offset=8), Return(Tuple([Attribute(Name('self', Load(), lineno=124, col_offset=15), '__class__', Load(), lineno=124, col_offset=15), Tuple([Name('items', Load(), lineno=124, col_offset=32)], Load(), lineno=124, col_offset=32)], Load(), lineno=124, col_offset=15), lineno=124, col_offset=8)], [], lineno=115, col_offset=4), FunctionDef('clear', arguments([Name('self', Param(), lineno=126, col_offset=14)], None, None, []), [Expr(Str('od.clear() -> None.  Remove all items from od.', lineno=127, col_offset=8), lineno=127, col_offset=8), TryExcept([For(Name('node', Store(), lineno=129, col_offset=16), Call(Attribute(Attribute(Name('self', Load(), lineno=129, col_offset=24), '__map', Load(), lineno=129, col_offset=24), 'itervalues', Load(), lineno=129, col_offset=24), [], [], None, None, lineno=129, col_offset=24), [Delete([Subscript(Name('node', Load(), lineno=130, col_offset=20), Slice(None, None, None), Del(), lineno=130, col_offset=20)], lineno=130, col_offset=16)], [], lineno=129, col_offset=12), Assign([Subscript(Attribute(Name('self', Load(), lineno=131, col_offset=12), '__root', Load(), lineno=131, col_offset=12), Slice(None, None, None), Store(), lineno=131, col_offset=12)], List([Attribute(Name('self', Load(), lineno=131, col_offset=30), '__root', Load(), lineno=131, col_offset=30), Attribute(Name('self', Load(), lineno=131, col_offset=43), '__root', Load(), lineno=131, col_offset=43), Name('None', Load(), lineno=131, col_offset=56)], Load(), lineno=131, col_offset=29), lineno=131, col_offset=12), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=132, col_offset=12), '__map', Load(), lineno=132, col_offset=12), 'clear', Load(), lineno=132, col_offset=12), [], [], None, None, lineno=132, col_offset=12), lineno=132, col_offset=12)], [ExceptHandler(Name('AttributeError', Load(), lineno=133, col_offset=15), None, [Pass( lineno=134, col_offset=12)], lineno=133, col_offset=8)], [], lineno=128, col_offset=8), Expr(Call(Attribute(Name('dict', Load(), lineno=135, col_offset=8), 'clear', Load(), lineno=135, col_offset=8), [Name('self', Load(), lineno=135, col_offset=19)], [], None, None, lineno=135, col_offset=8), lineno=135, col_offset=8)], [], lineno=126, col_offset=4), Assign([Name('setdefault', Store(), lineno=137, col_offset=4)], Attribute(Name('MutableMapping', Load(), lineno=137, col_offset=17), 'setdefault', Load(), lineno=137, col_offset=17), lineno=137, col_offset=4), Assign([Name('update', Store(), lineno=138, col_offset=4)], Attribute(Name('MutableMapping', Load(), lineno=138, col_offset=13), 'update', Load(), lineno=138, col_offset=13), lineno=138, col_offset=4), Assign([Name('pop', Store(), lineno=139, col_offset=4)], Attribute(Name('MutableMapping', Load(), lineno=139, col_offset=10), 'pop', Load(), lineno=139, col_offset=10), lineno=139, col_offset=4), Assign([Name('keys', Store(), lineno=140, col_offset=4)], Attribute(Name('MutableMapping', Load(), lineno=140, col_offset=11), 'keys', Load(), lineno=140, col_offset=11), lineno=140, col_offset=4), Assign([Name('values', Store(), lineno=141, col_offset=4)], Attribute(Name('MutableMapping', Load(), lineno=141, col_offset=13), 'values', Load(), lineno=141, col_offset=13), lineno=141, col_offset=4), Assign([Name('items', Store(), lineno=142, col_offset=4)], Attribute(Name('MutableMapping', Load(), lineno=142, col_offset=12), 'items', Load(), lineno=142, col_offset=12), lineno=142, col_offset=4), Assign([Name('iterkeys', Store(), lineno=143, col_offset=4)], Attribute(Name('MutableMapping', Load(), lineno=143, col_offset=15), 'iterkeys', Load(), lineno=143, col_offset=15), lineno=143, col_offset=4), Assign([Name('itervalues', Store(), lineno=144, col_offset=4)], Attribute(Name('MutableMapping', Load(), lineno=144, col_offset=17), 'itervalues', Load(), lineno=144, col_offset=17), lineno=144, col_offset=4), Assign([Name('iteritems', Store(), lineno=145, col_offset=4)], Attribute(Name('MutableMapping', Load(), lineno=145, col_offset=16), 'iteritems', Load(), lineno=145, col_offset=16), lineno=145, col_offset=4), Assign([Name('__ne__', Store(), lineno=146, col_offset=4)], Attribute(Name('MutableMapping', Load(), lineno=146, col_offset=13), '__ne__', Load(), lineno=146, col_offset=13), lineno=146, col_offset=4), FunctionDef('viewkeys', arguments([Name('self', Param(), lineno=148, col_offset=17)], None, None, []), [Expr(Str("od.viewkeys() -> a set-like object providing a view on od's keys", lineno=149, col_offset=8), lineno=149, col_offset=8), Return(Call(Name('KeysView', Load(), lineno=150, col_offset=15), [Name('self', Load(), lineno=150, col_offset=24)], [], None, None, lineno=150, col_offset=15), lineno=150, col_offset=8)], [], lineno=148, col_offset=4), FunctionDef('viewvalues', arguments([Name('self', Param(), lineno=152, col_offset=19)], None, None, []), [Expr(Str("od.viewvalues() -> an object providing a view on od's values", lineno=153, col_offset=8), lineno=153, col_offset=8), Return(Call(Name('ValuesView', Load(), lineno=154, col_offset=15), [Name('self', Load(), lineno=154, col_offset=26)], [], None, None, lineno=154, col_offset=15), lineno=154, col_offset=8)], [], lineno=152, col_offset=4), FunctionDef('viewitems', arguments([Name('self', Param(), lineno=156, col_offset=18)], None, None, []), [Expr(Str("od.viewitems() -> a set-like object providing a view on od's items", lineno=157, col_offset=8), lineno=157, col_offset=8), Return(Call(Name('ItemsView', Load(), lineno=158, col_offset=15), [Name('self', Load(), lineno=158, col_offset=25)], [], None, None, lineno=158, col_offset=15), lineno=158, col_offset=8)], [], lineno=156, col_offset=4), FunctionDef('popitem', arguments([Name('self', Param(), lineno=160, col_offset=16), Name('last', Param(), lineno=160, col_offset=22)], None, None, [Name('True', Load(), lineno=160, col_offset=27)]), [Expr(Str('od.popitem() -> (k, v), return and remove a (key, value) pair.\n        Pairs are returned in LIFO order if last is true or FIFO order if false.\n\n        ', lineno=164, col_offset=-1), lineno=164, col_offset=-1), If(UnaryOp(Not(), Name('self', Load(), lineno=165, col_offset=15), lineno=165, col_offset=11), [Raise(Call(Name('KeyError', Load(), lineno=166, col_offset=18), [Str('dictionary is empty', lineno=166, col_offset=27)], [], None, None, lineno=166, col_offset=18), None, None, lineno=166, col_offset=12)], [], lineno=165, col_offset=8), Assign([Name('key', Store(), lineno=167, col_offset=8)], Call(Name('next', Load(), lineno=167, col_offset=14), [IfExp(Name('last', Load(), lineno=167, col_offset=37), Call(Name('reversed', Load(), lineno=167, col_offset=19), [Name('self', Load(), lineno=167, col_offset=28)], [], None, None, lineno=167, col_offset=19), Call(Name('iter', Load(), lineno=167, col_offset=47), [Name('self', Load(), lineno=167, col_offset=52)], [], None, None, lineno=167, col_offset=47), lineno=167, col_offset=19)], [], None, None, lineno=167, col_offset=14), lineno=167, col_offset=8), Assign([Name('value', Store(), lineno=168, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=168, col_offset=16), 'pop', Load(), lineno=168, col_offset=16), [Name('key', Load(), lineno=168, col_offset=25)], [], None, None, lineno=168, col_offset=16), lineno=168, col_offset=8), Return(Tuple([Name('key', Load(), lineno=169, col_offset=15), Name('value', Load(), lineno=169, col_offset=20)], Load(), lineno=169, col_offset=15), lineno=169, col_offset=8)], [], lineno=160, col_offset=4), FunctionDef('__repr__', arguments([Name('self', Param(), lineno=172, col_offset=17)], None, None, []), [Expr(Str('od.__repr__() <==> repr(od)', lineno=173, col_offset=8), lineno=173, col_offset=8), If(UnaryOp(Not(), Name('self', Load(), lineno=174, col_offset=15), lineno=174, col_offset=11), [Return(BinOp(Str('%s()', lineno=175, col_offset=19), Mod(), Tuple([Attribute(Attribute(Name('self', Load(), lineno=175, col_offset=29), '__class__', Load(), lineno=175, col_offset=29), '__name__', Load(), lineno=175, col_offset=29)], Load(), lineno=175, col_offset=29), lineno=175, col_offset=19), lineno=175, col_offset=12)], [], lineno=174, col_offset=8), Return(BinOp(Str('%s(%r)', lineno=176, col_offset=15), Mod(), Tuple([Attribute(Attribute(Name('self', Load(), lineno=176, col_offset=27), '__class__', Load(), lineno=176, col_offset=27), '__name__', Load(), lineno=176, col_offset=27), Call(Attribute(Name('self', Load(), lineno=176, col_offset=52), 'items', Load(), lineno=176, col_offset=52), [], [], None, None, lineno=176, col_offset=52)], Load(), lineno=176, col_offset=27), lineno=176, col_offset=15), lineno=176, col_offset=8)], [Name('_recursive_repr', Load(), lineno=171, col_offset=5)], lineno=171, col_offset=4), FunctionDef('copy', arguments([Name('self', Param(), lineno=178, col_offset=13)], None, None, []), [Expr(Str('od.copy() -> a shallow copy of od', lineno=179, col_offset=8), lineno=179, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=180, col_offset=15), '__class__', Load(), lineno=180, col_offset=15), [Name('self', Load(), lineno=180, col_offset=30)], [], None, None, lineno=180, col_offset=15), lineno=180, col_offset=8)], [], lineno=178, col_offset=4), FunctionDef('fromkeys', arguments([Name('cls', Param(), lineno=183, col_offset=17), Name('iterable', Param(), lineno=183, col_offset=22), Name('value', Param(), lineno=183, col_offset=32)], None, None, [Name('None', Load(), lineno=183, col_offset=38)]), [Expr(Str('OD.fromkeys(S[, v]) -> New ordered dictionary with keys from S\n        and values equal to v (which defaults to None).\n\n        ', lineno=187, col_offset=-1), lineno=187, col_offset=-1), Assign([Name('d', Store(), lineno=188, col_offset=8)], Call(Name('cls', Load(), lineno=188, col_offset=12), [], [], None, None, lineno=188, col_offset=12), lineno=188, col_offset=8), For(Name('key', Store(), lineno=189, col_offset=12), Name('iterable', Load(), lineno=189, col_offset=19), [Assign([Subscript(Name('d', Load(), lineno=190, col_offset=12), Index(Name('key', Load(), lineno=190, col_offset=14)), Store(), lineno=190, col_offset=12)], Name('value', Load(), lineno=190, col_offset=21), lineno=190, col_offset=12)], [], lineno=189, col_offset=8), Return(Name('d', Load(), lineno=191, col_offset=15), lineno=191, col_offset=8)], [Name('classmethod', Load(), lineno=182, col_offset=5)], lineno=182, col_offset=4), FunctionDef('__eq__', arguments([Name('self', Param(), lineno=193, col_offset=15), Name('other', Param(), lineno=193, col_offset=21)], None, None, []), [Expr(Str('od.__eq__(y) <==> od==y.  Comparison to another OD is order-sensitive\n        while comparison to a regular mapping is order-insensitive.\n\n        ', lineno=197, col_offset=-1), lineno=197, col_offset=-1), If(Call(Name('isinstance', Load(), lineno=198, col_offset=11), [Name('other', Load(), lineno=198, col_offset=22), Name('OrderedDict', Load(), lineno=198, col_offset=29)], [], None, None, lineno=198, col_offset=11), [Return(BoolOp(And(), [Compare(Call(Name('len', Load(), lineno=199, col_offset=19), [Name('self', Load(), lineno=199, col_offset=23)], [], None, None, lineno=199, col_offset=19), [Eq()], [Call(Name('len', Load(), lineno=199, col_offset=30), [Name('other', Load(), lineno=199, col_offset=34)], [], None, None, lineno=199, col_offset=30)], lineno=199, col_offset=19), Call(Name('all', Load(), lineno=200, col_offset=19), [Call(Name('_imap', Load(), lineno=200, col_offset=23), [Name('_eq', Load(), lineno=200, col_offset=29), Call(Attribute(Name('self', Load(), lineno=200, col_offset=34), 'iteritems', Load(), lineno=200, col_offset=34), [], [], None, None, lineno=200, col_offset=34), Call(Attribute(Name('other', Load(), lineno=200, col_offset=52), 'iteritems', Load(), lineno=200, col_offset=52), [], [], None, None, lineno=200, col_offset=52)], [], None, None, lineno=200, col_offset=23)], [], None, None, lineno=200, col_offset=19)], lineno=199, col_offset=19), lineno=199, col_offset=12)], [], lineno=198, col_offset=8), Return(Call(Attribute(Name('dict', Load(), lineno=201, col_offset=15), '__eq__', Load(), lineno=201, col_offset=15), [Name('self', Load(), lineno=201, col_offset=27), Name('other', Load(), lineno=201, col_offset=33)], [], None, None, lineno=201, col_offset=15), lineno=201, col_offset=8)], [], lineno=193, col_offset=4)], [], lineno=46, col_offset=0), FunctionDef('namedtuple', arguments([Name('typename', Param(), lineno=208, col_offset=15), Name('field_names', Param(), lineno=208, col_offset=25), Name('verbose', Param(), lineno=208, col_offset=38), Name('rename', Param(), lineno=208, col_offset=53)], None, None, [Name('False', Load(), lineno=208, col_offset=46), Name('False', Load(), lineno=208, col_offset=60)]), [Expr(Str("Returns a new subclass of tuple with named fields.\n\n    >>> Point = namedtuple('Point', 'x y')\n    >>> Point.__doc__                   # docstring for the new class\n    'Point(x, y)'\n    >>> p = Point(11, y=22)             # instantiate with positional args or keywords\n    >>> p[0] + p[1]                     # indexable like a plain tuple\n    33\n    >>> x, y = p                        # unpack like a regular tuple\n    >>> x, y\n    (11, 22)\n    >>> p.x + p.y                       # fields also accessable by name\n    33\n    >>> d = p._asdict()                 # convert to a dictionary\n    >>> d['x']\n    11\n    >>> Point(**d)                      # convert from a dictionary\n    Point(x=11, y=22)\n    >>> p._replace(x=100)               # _replace() is like str.replace() but targets named fields\n    Point(x=100, y=22)\n\n    ", lineno=230, col_offset=-1), lineno=230, col_offset=-1), If(Call(Name('isinstance', Load(), lineno=234, col_offset=7), [Name('field_names', Load(), lineno=234, col_offset=18), Name('basestring', Load(), lineno=234, col_offset=31)], [], None, None, lineno=234, col_offset=7), [Assign([Name('field_names', Store(), lineno=235, col_offset=8)], Call(Attribute(Call(Attribute(Name('field_names', Load(), lineno=235, col_offset=22), 'replace', Load(), lineno=235, col_offset=22), [Str(',', lineno=235, col_offset=42), Str(' ', lineno=235, col_offset=47)], [], None, None, lineno=235, col_offset=22), 'split', Load(), lineno=235, col_offset=22), [], [], None, None, lineno=235, col_offset=22), lineno=235, col_offset=8)], [], lineno=234, col_offset=4), Assign([Name('field_names', Store(), lineno=236, col_offset=4)], Call(Name('tuple', Load(), lineno=236, col_offset=18), [Call(Name('map', Load(), lineno=236, col_offset=24), [Name('str', Load(), lineno=236, col_offset=28), Name('field_names', Load(), lineno=236, col_offset=33)], [], None, None, lineno=236, col_offset=24)], [], None, None, lineno=236, col_offset=18), lineno=236, col_offset=4), If(Name('rename', Load(), lineno=237, col_offset=7), [Assign([Name('names', Store(), lineno=238, col_offset=8)], Call(Name('list', Load(), lineno=238, col_offset=16), [Name('field_names', Load(), lineno=238, col_offset=21)], [], None, None, lineno=238, col_offset=16), lineno=238, col_offset=8), Assign([Name('seen', Store(), lineno=239, col_offset=8)], Call(Name('set', Load(), lineno=239, col_offset=15), [], [], None, None, lineno=239, col_offset=15), lineno=239, col_offset=8), For(Tuple([Name('i', Store(), lineno=240, col_offset=12), Name('name', Store(), lineno=240, col_offset=15)], Store(), lineno=240, col_offset=12), Call(Name('enumerate', Load(), lineno=240, col_offset=23), [Name('names', Load(), lineno=240, col_offset=33)], [], None, None, lineno=240, col_offset=23), [If(BoolOp(Or(), [UnaryOp(Not(), Call(Name('all', Load(), lineno=241, col_offset=20), [GeneratorExp(BoolOp(Or(), [Call(Attribute(Name('c', Load(), lineno=241, col_offset=24), 'isalnum', Load(), lineno=241, col_offset=24), [], [], None, None, lineno=241, col_offset=24), Compare(Name('c', Load(), lineno=241, col_offset=39), [Eq()], [Str('_', lineno=241, col_offset=42)], lineno=241, col_offset=39)], lineno=241, col_offset=24), [comprehension(Name('c', Store(), lineno=241, col_offset=50), Name('name', Load(), lineno=241, col_offset=55), [])], lineno=241, col_offset=24)], [], None, None, lineno=241, col_offset=20), lineno=241, col_offset=16), Call(Name('_iskeyword', Load(), lineno=241, col_offset=64), [Name('name', Load(), lineno=241, col_offset=75)], [], None, None, lineno=241, col_offset=64), UnaryOp(Not(), Name('name', Load(), lineno=242, col_offset=23), lineno=242, col_offset=19), Call(Attribute(Subscript(Name('name', Load(), lineno=242, col_offset=31), Index(Num(0, lineno=242, col_offset=36)), Load(), lineno=242, col_offset=31), 'isdigit', Load(), lineno=242, col_offset=31), [], [], None, None, lineno=242, col_offset=31), Call(Attribute(Name('name', Load(), lineno=242, col_offset=52), 'startswith', Load(), lineno=242, col_offset=52), [Str('_', lineno=242, col_offset=68)], [], None, None, lineno=242, col_offset=52), Compare(Name('name', Load(), lineno=243, col_offset=19), [In()], [Name('seen', Load(), lineno=243, col_offset=27)], lineno=243, col_offset=19)], lineno=241, col_offset=16), [Assign([Subscript(Name('names', Load(), lineno=244, col_offset=16), Index(Name('i', Load(), lineno=244, col_offset=22)), Store(), lineno=244, col_offset=16)], BinOp(Str('_%d', lineno=244, col_offset=27), Mod(), Name('i', Load(), lineno=244, col_offset=35), lineno=244, col_offset=27), lineno=244, col_offset=16)], [], lineno=241, col_offset=12), Expr(Call(Attribute(Name('seen', Load(), lineno=245, col_offset=12), 'add', Load(), lineno=245, col_offset=12), [Name('name', Load(), lineno=245, col_offset=21)], [], None, None, lineno=245, col_offset=12), lineno=245, col_offset=12)], [], lineno=240, col_offset=8), Assign([Name('field_names', Store(), lineno=246, col_offset=8)], Call(Name('tuple', Load(), lineno=246, col_offset=22), [Name('names', Load(), lineno=246, col_offset=28)], [], None, None, lineno=246, col_offset=22), lineno=246, col_offset=8)], [], lineno=237, col_offset=4), For(Name('name', Store(), lineno=247, col_offset=8), BinOp(Tuple([Name('typename', Load(), lineno=247, col_offset=17)], Load(), lineno=247, col_offset=17), Add(), Name('field_names', Load(), lineno=247, col_offset=30), lineno=247, col_offset=16), [If(UnaryOp(Not(), Call(Name('all', Load(), lineno=248, col_offset=15), [GeneratorExp(BoolOp(Or(), [Call(Attribute(Name('c', Load(), lineno=248, col_offset=19), 'isalnum', Load(), lineno=248, col_offset=19), [], [], None, None, lineno=248, col_offset=19), Compare(Name('c', Load(), lineno=248, col_offset=34), [Eq()], [Str('_', lineno=248, col_offset=37)], lineno=248, col_offset=34)], lineno=248, col_offset=19), [comprehension(Name('c', Store(), lineno=248, col_offset=45), Name('name', Load(), lineno=248, col_offset=50), [])], lineno=248, col_offset=19)], [], None, None, lineno=248, col_offset=15), lineno=248, col_offset=11), [Raise(Call(Name('ValueError', Load(), lineno=249, col_offset=18), [BinOp(Str('Type names and field names can only contain alphanumeric characters and underscores: %r', lineno=249, col_offset=29), Mod(), Name('name', Load(), lineno=249, col_offset=121), lineno=249, col_offset=29)], [], None, None, lineno=249, col_offset=18), None, None, lineno=249, col_offset=12)], [], lineno=248, col_offset=8), If(Call(Name('_iskeyword', Load(), lineno=250, col_offset=11), [Name('name', Load(), lineno=250, col_offset=22)], [], None, None, lineno=250, col_offset=11), [Raise(Call(Name('ValueError', Load(), lineno=251, col_offset=18), [BinOp(Str('Type names and field names cannot be a keyword: %r', lineno=251, col_offset=29), Mod(), Name('name', Load(), lineno=251, col_offset=84), lineno=251, col_offset=29)], [], None, None, lineno=251, col_offset=18), None, None, lineno=251, col_offset=12)], [], lineno=250, col_offset=8), If(Call(Attribute(Subscript(Name('name', Load(), lineno=252, col_offset=11), Index(Num(0, lineno=252, col_offset=16)), Load(), lineno=252, col_offset=11), 'isdigit', Load(), lineno=252, col_offset=11), [], [], None, None, lineno=252, col_offset=11), [Raise(Call(Name('ValueError', Load(), lineno=253, col_offset=18), [BinOp(Str('Type names and field names cannot start with a number: %r', lineno=253, col_offset=29), Mod(), Name('name', Load(), lineno=253, col_offset=91), lineno=253, col_offset=29)], [], None, None, lineno=253, col_offset=18), None, None, lineno=253, col_offset=12)], [], lineno=252, col_offset=8)], [], lineno=247, col_offset=4), Assign([Name('seen_names', Store(), lineno=254, col_offset=4)], Call(Name('set', Load(), lineno=254, col_offset=17), [], [], None, None, lineno=254, col_offset=17), lineno=254, col_offset=4), For(Name('name', Store(), lineno=255, col_offset=8), Name('field_names', Load(), lineno=255, col_offset=16), [If(BoolOp(And(), [Call(Attribute(Name('name', Load(), lineno=256, col_offset=11), 'startswith', Load(), lineno=256, col_offset=11), [Str('_', lineno=256, col_offset=27)], [], None, None, lineno=256, col_offset=11), UnaryOp(Not(), Name('rename', Load(), lineno=256, col_offset=40), lineno=256, col_offset=36)], lineno=256, col_offset=11), [Raise(Call(Name('ValueError', Load(), lineno=257, col_offset=18), [BinOp(Str('Field names cannot start with an underscore: %r', lineno=257, col_offset=29), Mod(), Name('name', Load(), lineno=257, col_offset=81), lineno=257, col_offset=29)], [], None, None, lineno=257, col_offset=18), None, None, lineno=257, col_offset=12)], [], lineno=256, col_offset=8), If(Compare(Name('name', Load(), lineno=258, col_offset=11), [In()], [Name('seen_names', Load(), lineno=258, col_offset=19)], lineno=258, col_offset=11), [Raise(Call(Name('ValueError', Load(), lineno=259, col_offset=18), [BinOp(Str('Encountered duplicate field name: %r', lineno=259, col_offset=29), Mod(), Name('name', Load(), lineno=259, col_offset=70), lineno=259, col_offset=29)], [], None, None, lineno=259, col_offset=18), None, None, lineno=259, col_offset=12)], [], lineno=258, col_offset=8), Expr(Call(Attribute(Name('seen_names', Load(), lineno=260, col_offset=8), 'add', Load(), lineno=260, col_offset=8), [Name('name', Load(), lineno=260, col_offset=23)], [], None, None, lineno=260, col_offset=8), lineno=260, col_offset=8)], [], lineno=255, col_offset=4), Assign([Name('numfields', Store(), lineno=263, col_offset=4)], Call(Name('len', Load(), lineno=263, col_offset=16), [Name('field_names', Load(), lineno=263, col_offset=20)], [], None, None, lineno=263, col_offset=16), lineno=263, col_offset=4), Assign([Name('argtxt', Store(), lineno=264, col_offset=4)], Subscript(Call(Attribute(Call(Name('repr', Load(), lineno=264, col_offset=13), [Name('field_names', Load(), lineno=264, col_offset=18)], [], None, None, lineno=264, col_offset=13), 'replace', Load(), lineno=264, col_offset=13), [Str("'", lineno=264, col_offset=39), Str('', lineno=264, col_offset=44)], [], None, None, lineno=264, col_offset=13), Slice(Num(1, lineno=264, col_offset=48), Num(-1, lineno=264, col_offset=51), None), Load(), lineno=264, col_offset=13), lineno=264, col_offset=4), Assign([Name('reprtxt', Store(), lineno=265, col_offset=4)], Call(Attribute(Str(', ', lineno=265, col_offset=14), 'join', Load(), lineno=265, col_offset=14), [GeneratorExp(BinOp(Str('%s=%%r', lineno=265, col_offset=24), Mod(), Name('name', Load(), lineno=265, col_offset=35), lineno=265, col_offset=24), [comprehension(Name('name', Store(), lineno=265, col_offset=44), Name('field_names', Load(), lineno=265, col_offset=52), [])], lineno=265, col_offset=24)], [], None, None, lineno=265, col_offset=14), lineno=265, col_offset=4), Assign([Name('template', Store(), lineno=266, col_offset=4)], BinOp(Str("class %(typename)s(tuple):\n        '%(typename)s(%(argtxt)s)' \n\n        __slots__ = () \n\n        _fields = %(field_names)r \n\n        def __new__(_cls, %(argtxt)s):\n            'Create new instance of %(typename)s(%(argtxt)s)'\n            return _tuple.__new__(_cls, (%(argtxt)s)) \n\n        @classmethod\n        def _make(cls, iterable, new=tuple.__new__, len=len):\n            'Make a new %(typename)s object from a sequence or iterable'\n            result = new(cls, iterable)\n            if len(result) != %(numfields)d:\n                raise TypeError('Expected %(numfields)d arguments, got %%d' %% len(result))\n            return result \n\n        def __repr__(self):\n            'Return a nicely formatted representation string'\n            return '%(typename)s(%(reprtxt)s)' %% self \n\n        def _asdict(self):\n            'Return a new OrderedDict which maps field names to their values'\n            return OrderedDict(zip(self._fields, self)) \n\n        def _replace(_self, **kwds):\n            'Return a new %(typename)s object replacing specified fields with new values'\n            result = _self._make(map(kwds.pop, %(field_names)r, _self))\n            if kwds:\n                raise ValueError('Got unexpected field names: %%r' %% kwds.keys())\n            return result \n\n        def __getnewargs__(self):\n            'Return self as a plain tuple.  Used by copy and pickle.'\n            return tuple(self) \n\n", lineno=294, col_offset=-1), Mod(), Call(Name('locals', Load(), lineno=294, col_offset=41), [], [], None, None, lineno=294, col_offset=41), lineno=294, col_offset=-1), lineno=266, col_offset=4), For(Tuple([Name('i', Store(), lineno=295, col_offset=8), Name('name', Store(), lineno=295, col_offset=11)], Store(), lineno=295, col_offset=8), Call(Name('enumerate', Load(), lineno=295, col_offset=19), [Name('field_names', Load(), lineno=295, col_offset=29)], [], None, None, lineno=295, col_offset=19), [AugAssign(Name('template', Store(), lineno=296, col_offset=8), Add(), BinOp(Str("        %s = _property(_itemgetter(%d), doc='Alias for field number %d')\n", lineno=296, col_offset=20), Mod(), Tuple([Name('name', Load(), lineno=296, col_offset=100), Name('i', Load(), lineno=296, col_offset=106), Name('i', Load(), lineno=296, col_offset=109)], Load(), lineno=296, col_offset=100), lineno=296, col_offset=20), lineno=296, col_offset=8)], [], lineno=295, col_offset=4), If(Name('verbose', Load(), lineno=297, col_offset=7), [Print(None, [Name('template', Load(), lineno=298, col_offset=14)], True, lineno=298, col_offset=8)], [], lineno=297, col_offset=4), Assign([Name('namespace', Store(), lineno=302, col_offset=4)], Call(Name('dict', Load(), lineno=302, col_offset=16), [], [keyword('_itemgetter', Name('_itemgetter', Load(), lineno=302, col_offset=33)), keyword('__name__', BinOp(Str('namedtuple_%s', lineno=302, col_offset=55), Mod(), Name('typename', Load(), lineno=302, col_offset=73), lineno=302, col_offset=55)), keyword('OrderedDict', Name('OrderedDict', Load(), lineno=303, col_offset=33)), keyword('_property', Name('property', Load(), lineno=303, col_offset=56)), keyword('_tuple', Name('tuple', Load(), lineno=303, col_offset=73))], None, None, lineno=302, col_offset=16), lineno=302, col_offset=4), TryExcept([Exec(Name('template', Load(), lineno=305, col_offset=13), Name('namespace', Load(), lineno=305, col_offset=25), None, lineno=305, col_offset=8)], [ExceptHandler(Name('SyntaxError', Load(), lineno=306, col_offset=11), Name('e', Store(), lineno=306, col_offset=24), [Raise(Call(Name('SyntaxError', Load(), lineno=307, col_offset=14), [BinOp(BinOp(Attribute(Name('e', Load(), lineno=307, col_offset=26), 'message', Load(), lineno=307, col_offset=26), Add(), Str(':\n', lineno=307, col_offset=38), lineno=307, col_offset=26), Add(), Name('template', Load(), lineno=307, col_offset=46), lineno=307, col_offset=44)], [], None, None, lineno=307, col_offset=14), None, None, lineno=307, col_offset=8)], lineno=306, col_offset=4)], [], lineno=304, col_offset=4), Assign([Name('result', Store(), lineno=308, col_offset=4)], Subscript(Name('namespace', Load(), lineno=308, col_offset=13), Index(Name('typename', Load(), lineno=308, col_offset=23)), Load(), lineno=308, col_offset=13), lineno=308, col_offset=4), TryExcept([Assign([Attribute(Name('result', Load(), lineno=315, col_offset=8), '__module__', Store(), lineno=315, col_offset=8)], Call(Attribute(Attribute(Call(Attribute(Name('_sys', Load(), lineno=315, col_offset=28), '_getframe', Load(), lineno=315, col_offset=28), [Num(1, lineno=315, col_offset=43)], [], None, None, lineno=315, col_offset=28), 'f_globals', Load(), lineno=315, col_offset=28), 'get', Load(), lineno=315, col_offset=28), [Str('__name__', lineno=315, col_offset=60), Str('__main__', lineno=315, col_offset=72)], [], None, None, lineno=315, col_offset=28), lineno=315, col_offset=8)], [ExceptHandler(Tuple([Name('AttributeError', Load(), lineno=316, col_offset=12), Name('ValueError', Load(), lineno=316, col_offset=28)], Load(), lineno=316, col_offset=12), None, [Pass( lineno=317, col_offset=8)], lineno=316, col_offset=4)], [], lineno=314, col_offset=4), Return(Name('result', Load(), lineno=319, col_offset=11), lineno=319, col_offset=4)], [], lineno=208, col_offset=0), ClassDef('Counter', [Name('dict', Load(), lineno=326, col_offset=14)], [Expr(Str("Dict subclass for counting hashable items.  Sometimes called a bag\n    or multiset.  Elements are stored as dictionary keys and their counts\n    are stored as dictionary values.\n\n    >>> c = Counter('abracadabra')      # count elements from a string\n\n    >>> c.most_common(3)                # three most common elements\n    [('a', 5), ('r', 2), ('b', 2)]\n    >>> sorted(c)                       # list all unique elements\n    ['a', 'b', 'c', 'd', 'r']\n    >>> ''.join(sorted(c.elements()))   # list elements with repetitions\n    'aaaaabbcdrr'\n    >>> sum(c.values())                 # total of all counts\n    11\n\n    >>> c['a']                          # count of letter 'a'\n    5\n    >>> for elem in 'shazam':           # update counts from an iterable\n    ...     c[elem] += 1                # by adding 1 to each element's count\n    >>> c['a']                          # now there are seven 'a'\n    7\n    >>> del c['r']                      # remove all 'r'\n    >>> c['r']                          # now there are zero 'r'\n    0\n\n    >>> d = Counter('simsalabim')       # make another counter\n    >>> c.update(d)                     # add in the second counter\n    >>> c['a']                          # now there are nine 'a'\n    9\n\n    >>> c.clear()                       # empty the counter\n    >>> c\n    Counter()\n\n    Note:  If a count is set to zero or reduced to zero, it will remain\n    in the counter until the entry is deleted or the counter is cleared:\n\n    >>> c = Counter('aaabbc')\n    >>> c['b'] -= 2                     # reduce the count of 'b' by two\n    >>> c.most_common()                 # 'b' is still in, but its count is zero\n    [('a', 3), ('c', 1), ('b', 0)]\n\n    ", lineno=369, col_offset=-1), lineno=369, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=377, col_offset=17), Name('iterable', Param(), lineno=377, col_offset=23)], None, 'kwds', [Name('None', Load(), lineno=377, col_offset=32)]), [Expr(Str("Create a new, empty Counter object.  And if given, count elements\n        from an input iterable.  Or, initialize the count from another mapping\n        of elements to their counts.\n\n        >>> c = Counter()                           # a new, empty counter\n        >>> c = Counter('gallahad')                 # a new counter from an iterable\n        >>> c = Counter({'a': 4, 'b': 2})           # a new counter from a mapping\n        >>> c = Counter(a=4, b=2)                   # a new counter from keyword args\n\n        ", lineno=387, col_offset=-1), lineno=387, col_offset=-1), Expr(Call(Attribute(Name('self', Load(), lineno=388, col_offset=8), 'update', Load(), lineno=388, col_offset=8), [Name('iterable', Load(), lineno=388, col_offset=20)], [], None, Name('kwds', Load(), lineno=388, col_offset=32), lineno=388, col_offset=8), lineno=388, col_offset=8)], [], lineno=377, col_offset=4), FunctionDef('__missing__', arguments([Name('self', Param(), lineno=390, col_offset=20), Name('key', Param(), lineno=390, col_offset=26)], None, None, []), [Expr(Str('The count of elements not in the Counter is zero.', lineno=391, col_offset=8), lineno=391, col_offset=8), Return(Num(0, lineno=393, col_offset=15), lineno=393, col_offset=8)], [], lineno=390, col_offset=4), FunctionDef('most_common', arguments([Name('self', Param(), lineno=395, col_offset=20), Name('n', Param(), lineno=395, col_offset=26)], None, None, [Name('None', Load(), lineno=395, col_offset=28)]), [Expr(Str("List the n most common elements and their counts from the most\n        common to the least.  If n is None, then list all element counts.\n\n        >>> Counter('abracadabra').most_common(3)\n        [('a', 5), ('r', 2), ('b', 2)]\n\n        ", lineno=402, col_offset=-1), lineno=402, col_offset=-1), If(Compare(Name('n', Load(), lineno=404, col_offset=11), [Is()], [Name('None', Load(), lineno=404, col_offset=16)], lineno=404, col_offset=11), [Return(Call(Name('sorted', Load(), lineno=405, col_offset=19), [Call(Attribute(Name('self', Load(), lineno=405, col_offset=26), 'iteritems', Load(), lineno=405, col_offset=26), [], [], None, None, lineno=405, col_offset=26)], [keyword('key', Call(Name('_itemgetter', Load(), lineno=405, col_offset=48), [Num(1, lineno=405, col_offset=60)], [], None, None, lineno=405, col_offset=48)), keyword('reverse', Name('True', Load(), lineno=405, col_offset=72))], None, None, lineno=405, col_offset=19), lineno=405, col_offset=12)], [], lineno=404, col_offset=8), Return(Call(Attribute(Name('_heapq', Load(), lineno=406, col_offset=15), 'nlargest', Load(), lineno=406, col_offset=15), [Name('n', Load(), lineno=406, col_offset=31), Call(Attribute(Name('self', Load(), lineno=406, col_offset=34), 'iteritems', Load(), lineno=406, col_offset=34), [], [], None, None, lineno=406, col_offset=34)], [keyword('key', Call(Name('_itemgetter', Load(), lineno=406, col_offset=56), [Num(1, lineno=406, col_offset=68)], [], None, None, lineno=406, col_offset=56))], None, None, lineno=406, col_offset=15), lineno=406, col_offset=8)], [], lineno=395, col_offset=4), FunctionDef('elements', arguments([Name('self', Param(), lineno=408, col_offset=17)], None, None, []), [Expr(Str("Iterator over elements repeating each as many times as its count.\n\n        >>> c = Counter('ABCABC')\n        >>> sorted(c.elements())\n        ['A', 'A', 'B', 'B', 'C', 'C']\n\n        # Knuth's example for prime factors of 1836:  2**2 * 3**3 * 17**1\n        >>> prime_factors = Counter({2: 2, 3: 3, 17: 1})\n        >>> product = 1\n        >>> for factor in prime_factors.elements():     # loop over factors\n        ...     product *= factor                       # and multiply them\n        >>> product\n        1836\n\n        Note, if an element's count has been set to zero or is a negative\n        number, elements() will ignore it.\n\n        ", lineno=426, col_offset=-1), lineno=426, col_offset=-1), Return(Call(Attribute(Name('_chain', Load(), lineno=428, col_offset=15), 'from_iterable', Load(), lineno=428, col_offset=15), [Call(Name('_starmap', Load(), lineno=428, col_offset=36), [Name('_repeat', Load(), lineno=428, col_offset=45), Call(Attribute(Name('self', Load(), lineno=428, col_offset=54), 'iteritems', Load(), lineno=428, col_offset=54), [], [], None, None, lineno=428, col_offset=54)], [], None, None, lineno=428, col_offset=36)], [], None, None, lineno=428, col_offset=15), lineno=428, col_offset=8)], [], lineno=408, col_offset=4), FunctionDef('fromkeys', arguments([Name('cls', Param(), lineno=433, col_offset=17), Name('iterable', Param(), lineno=433, col_offset=22), Name('v', Param(), lineno=433, col_offset=32)], None, None, [Name('None', Load(), lineno=433, col_offset=34)]), [Raise(Call(Name('NotImplementedError', Load(), lineno=436, col_offset=14), [Str('Counter.fromkeys() is undefined.  Use Counter(iterable) instead.', lineno=437, col_offset=12)], [], None, None, lineno=436, col_offset=14), None, None, lineno=436, col_offset=8)], [Name('classmethod', Load(), lineno=432, col_offset=5)], lineno=432, col_offset=4), FunctionDef('update', arguments([Name('self', Param(), lineno=439, col_offset=15), Name('iterable', Param(), lineno=439, col_offset=21)], None, 'kwds', [Name('None', Load(), lineno=439, col_offset=30)]), [Expr(Str("Like dict.update() but add counts instead of replacing them.\n\n        Source can be an iterable, a dictionary, or another Counter instance.\n\n        >>> c = Counter('which')\n        >>> c.update('witch')           # add elements from another iterable\n        >>> d = Counter('watch')\n        >>> c.update(d)                 # add elements from another counter\n        >>> c['h']                      # four 'h' in which, witch, and watch\n        4\n\n        ", lineno=451, col_offset=-1), lineno=451, col_offset=-1), If(Compare(Name('iterable', Load(), lineno=459, col_offset=11), [IsNot()], [Name('None', Load(), lineno=459, col_offset=27)], lineno=459, col_offset=11), [If(Call(Name('isinstance', Load(), lineno=460, col_offset=15), [Name('iterable', Load(), lineno=460, col_offset=26), Name('Mapping', Load(), lineno=460, col_offset=36)], [], None, None, lineno=460, col_offset=15), [If(Name('self', Load(), lineno=461, col_offset=19), [Assign([Name('self_get', Store(), lineno=462, col_offset=20)], Attribute(Name('self', Load(), lineno=462, col_offset=31), 'get', Load(), lineno=462, col_offset=31), lineno=462, col_offset=20), For(Tuple([Name('elem', Store(), lineno=463, col_offset=24), Name('count', Store(), lineno=463, col_offset=30)], Store(), lineno=463, col_offset=24), Call(Attribute(Name('iterable', Load(), lineno=463, col_offset=39), 'iteritems', Load(), lineno=463, col_offset=39), [], [], None, None, lineno=463, col_offset=39), [Assign([Subscript(Name('self', Load(), lineno=464, col_offset=24), Index(Name('elem', Load(), lineno=464, col_offset=29)), Store(), lineno=464, col_offset=24)], BinOp(Call(Name('self_get', Load(), lineno=464, col_offset=37), [Name('elem', Load(), lineno=464, col_offset=46), Num(0, lineno=464, col_offset=52)], [], None, None, lineno=464, col_offset=37), Add(), Name('count', Load(), lineno=464, col_offset=57), lineno=464, col_offset=37), lineno=464, col_offset=24)], [], lineno=463, col_offset=20)], [Expr(Call(Attribute(Name('dict', Load(), lineno=466, col_offset=20), 'update', Load(), lineno=466, col_offset=20), [Name('self', Load(), lineno=466, col_offset=32), Name('iterable', Load(), lineno=466, col_offset=38)], [], None, None, lineno=466, col_offset=20), lineno=466, col_offset=20)], lineno=461, col_offset=16)], [Assign([Name('self_get', Store(), lineno=468, col_offset=16)], Attribute(Name('self', Load(), lineno=468, col_offset=27), 'get', Load(), lineno=468, col_offset=27), lineno=468, col_offset=16), For(Name('elem', Store(), lineno=469, col_offset=20), Name('iterable', Load(), lineno=469, col_offset=28), [Assign([Subscript(Name('self', Load(), lineno=470, col_offset=20), Index(Name('elem', Load(), lineno=470, col_offset=25)), Store(), lineno=470, col_offset=20)], BinOp(Call(Name('self_get', Load(), lineno=470, col_offset=33), [Name('elem', Load(), lineno=470, col_offset=42), Num(0, lineno=470, col_offset=48)], [], None, None, lineno=470, col_offset=33), Add(), Num(1, lineno=470, col_offset=53), lineno=470, col_offset=33), lineno=470, col_offset=20)], [], lineno=469, col_offset=16)], lineno=460, col_offset=12)], [], lineno=459, col_offset=8), If(Name('kwds', Load(), lineno=471, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=472, col_offset=12), 'update', Load(), lineno=472, col_offset=12), [Name('kwds', Load(), lineno=472, col_offset=24)], [], None, None, lineno=472, col_offset=12), lineno=472, col_offset=12)], [], lineno=471, col_offset=8)], [], lineno=439, col_offset=4), FunctionDef('subtract', arguments([Name('self', Param(), lineno=474, col_offset=17), Name('iterable', Param(), lineno=474, col_offset=23)], None, 'kwds', [Name('None', Load(), lineno=474, col_offset=32)]), [Expr(Str("Like dict.update() but subtracts counts instead of replacing them.\n        Counts can be reduced below zero.  Both the inputs and outputs are\n        allowed to contain zero and negative counts.\n\n        Source can be an iterable, a dictionary, or another Counter instance.\n\n        >>> c = Counter('which')\n        >>> c.subtract('witch')             # subtract elements from another iterable\n        >>> c.subtract(Counter('watch'))    # subtract elements from another counter\n        >>> c['h']                          # 2 in which, minus 1 in witch, minus 1 in watch\n        0\n        >>> c['w']                          # 1 in which, minus 1 in witch, minus 1 in watch\n        -1\n\n        ", lineno=489, col_offset=-1), lineno=489, col_offset=-1), If(Compare(Name('iterable', Load(), lineno=490, col_offset=11), [IsNot()], [Name('None', Load(), lineno=490, col_offset=27)], lineno=490, col_offset=11), [Assign([Name('self_get', Store(), lineno=491, col_offset=12)], Attribute(Name('self', Load(), lineno=491, col_offset=23), 'get', Load(), lineno=491, col_offset=23), lineno=491, col_offset=12), If(Call(Name('isinstance', Load(), lineno=492, col_offset=15), [Name('iterable', Load(), lineno=492, col_offset=26), Name('Mapping', Load(), lineno=492, col_offset=36)], [], None, None, lineno=492, col_offset=15), [For(Tuple([Name('elem', Store(), lineno=493, col_offset=20), Name('count', Store(), lineno=493, col_offset=26)], Store(), lineno=493, col_offset=20), Call(Attribute(Name('iterable', Load(), lineno=493, col_offset=35), 'items', Load(), lineno=493, col_offset=35), [], [], None, None, lineno=493, col_offset=35), [Assign([Subscript(Name('self', Load(), lineno=494, col_offset=20), Index(Name('elem', Load(), lineno=494, col_offset=25)), Store(), lineno=494, col_offset=20)], BinOp(Call(Name('self_get', Load(), lineno=494, col_offset=33), [Name('elem', Load(), lineno=494, col_offset=42), Num(0, lineno=494, col_offset=48)], [], None, None, lineno=494, col_offset=33), Sub(), Name('count', Load(), lineno=494, col_offset=53), lineno=494, col_offset=33), lineno=494, col_offset=20)], [], lineno=493, col_offset=16)], [For(Name('elem', Store(), lineno=496, col_offset=20), Name('iterable', Load(), lineno=496, col_offset=28), [Assign([Subscript(Name('self', Load(), lineno=497, col_offset=20), Index(Name('elem', Load(), lineno=497, col_offset=25)), Store(), lineno=497, col_offset=20)], BinOp(Call(Name('self_get', Load(), lineno=497, col_offset=33), [Name('elem', Load(), lineno=497, col_offset=42), Num(0, lineno=497, col_offset=48)], [], None, None, lineno=497, col_offset=33), Sub(), Num(1, lineno=497, col_offset=53), lineno=497, col_offset=33), lineno=497, col_offset=20)], [], lineno=496, col_offset=16)], lineno=492, col_offset=12)], [], lineno=490, col_offset=8), If(Name('kwds', Load(), lineno=498, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=499, col_offset=12), 'subtract', Load(), lineno=499, col_offset=12), [Name('kwds', Load(), lineno=499, col_offset=26)], [], None, None, lineno=499, col_offset=12), lineno=499, col_offset=12)], [], lineno=498, col_offset=8)], [], lineno=474, col_offset=4), FunctionDef('copy', arguments([Name('self', Param(), lineno=501, col_offset=13)], None, None, []), [Expr(Str('Like dict.copy() but returns a Counter instance instead of a dict.', lineno=502, col_offset=8), lineno=502, col_offset=8), Return(Call(Name('Counter', Load(), lineno=503, col_offset=15), [Name('self', Load(), lineno=503, col_offset=23)], [], None, None, lineno=503, col_offset=15), lineno=503, col_offset=8)], [], lineno=501, col_offset=4), FunctionDef('__delitem__', arguments([Name('self', Param(), lineno=505, col_offset=20), Name('elem', Param(), lineno=505, col_offset=26)], None, None, []), [Expr(Str('Like dict.__delitem__() but does not raise KeyError for missing values.', lineno=506, col_offset=8), lineno=506, col_offset=8), If(Compare(Name('elem', Load(), lineno=507, col_offset=11), [In()], [Name('self', Load(), lineno=507, col_offset=19)], lineno=507, col_offset=11), [Expr(Call(Attribute(Name('dict', Load(), lineno=508, col_offset=12), '__delitem__', Load(), lineno=508, col_offset=12), [Name('self', Load(), lineno=508, col_offset=29), Name('elem', Load(), lineno=508, col_offset=35)], [], None, None, lineno=508, col_offset=12), lineno=508, col_offset=12)], [], lineno=507, col_offset=8)], [], lineno=505, col_offset=4), FunctionDef('__repr__', arguments([Name('self', Param(), lineno=510, col_offset=17)], None, None, []), [If(UnaryOp(Not(), Name('self', Load(), lineno=511, col_offset=15), lineno=511, col_offset=11), [Return(BinOp(Str('%s()', lineno=512, col_offset=19), Mod(), Attribute(Attribute(Name('self', Load(), lineno=512, col_offset=28), '__class__', Load(), lineno=512, col_offset=28), '__name__', Load(), lineno=512, col_offset=28), lineno=512, col_offset=19), lineno=512, col_offset=12)], [], lineno=511, col_offset=8), Assign([Name('items', Store(), lineno=513, col_offset=8)], Call(Attribute(Str(', ', lineno=513, col_offset=16), 'join', Load(), lineno=513, col_offset=16), [Call(Name('map', Load(), lineno=513, col_offset=26), [Attribute(Str('%r: %r', lineno=513, col_offset=30), '__mod__', Load(), lineno=513, col_offset=30), Call(Attribute(Name('self', Load(), lineno=513, col_offset=48), 'most_common', Load(), lineno=513, col_offset=48), [], [], None, None, lineno=513, col_offset=48)], [], None, None, lineno=513, col_offset=26)], [], None, None, lineno=513, col_offset=16), lineno=513, col_offset=8), Return(BinOp(Str('%s({%s})', lineno=514, col_offset=15), Mod(), Tuple([Attribute(Attribute(Name('self', Load(), lineno=514, col_offset=29), '__class__', Load(), lineno=514, col_offset=29), '__name__', Load(), lineno=514, col_offset=29), Name('items', Load(), lineno=514, col_offset=54)], Load(), lineno=514, col_offset=29), lineno=514, col_offset=15), lineno=514, col_offset=8)], [], lineno=510, col_offset=4), FunctionDef('__add__', arguments([Name('self', Param(), lineno=525, col_offset=16), Name('other', Param(), lineno=525, col_offset=22)], None, None, []), [Expr(Str("Add counts from two counters.\n\n        >>> Counter('abbb') + Counter('bcc')\n        Counter({'b': 4, 'c': 2, 'a': 1})\n\n        ", lineno=531, col_offset=-1), lineno=531, col_offset=-1), If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=532, col_offset=15), [Name('other', Load(), lineno=532, col_offset=26), Name('Counter', Load(), lineno=532, col_offset=33)], [], None, None, lineno=532, col_offset=15), lineno=532, col_offset=11), [Return(Name('NotImplemented', Load(), lineno=533, col_offset=19), lineno=533, col_offset=12)], [], lineno=532, col_offset=8), Assign([Name('result', Store(), lineno=534, col_offset=8)], Call(Name('Counter', Load(), lineno=534, col_offset=17), [], [], None, None, lineno=534, col_offset=17), lineno=534, col_offset=8), For(Name('elem', Store(), lineno=535, col_offset=12), BinOp(Call(Name('set', Load(), lineno=535, col_offset=20), [Name('self', Load(), lineno=535, col_offset=24)], [], None, None, lineno=535, col_offset=20), BitOr(), Call(Name('set', Load(), lineno=535, col_offset=32), [Name('other', Load(), lineno=535, col_offset=36)], [], None, None, lineno=535, col_offset=32), lineno=535, col_offset=20), [Assign([Name('newcount', Store(), lineno=536, col_offset=12)], BinOp(Subscript(Name('self', Load(), lineno=536, col_offset=23), Index(Name('elem', Load(), lineno=536, col_offset=28)), Load(), lineno=536, col_offset=23), Add(), Subscript(Name('other', Load(), lineno=536, col_offset=36), Index(Name('elem', Load(), lineno=536, col_offset=42)), Load(), lineno=536, col_offset=36), lineno=536, col_offset=23), lineno=536, col_offset=12), If(Compare(Name('newcount', Load(), lineno=537, col_offset=15), [Gt()], [Num(0, lineno=537, col_offset=26)], lineno=537, col_offset=15), [Assign([Subscript(Name('result', Load(), lineno=538, col_offset=16), Index(Name('elem', Load(), lineno=538, col_offset=23)), Store(), lineno=538, col_offset=16)], Name('newcount', Load(), lineno=538, col_offset=31), lineno=538, col_offset=16)], [], lineno=537, col_offset=12)], [], lineno=535, col_offset=8), Return(Name('result', Load(), lineno=539, col_offset=15), lineno=539, col_offset=8)], [], lineno=525, col_offset=4), FunctionDef('__sub__', arguments([Name('self', Param(), lineno=541, col_offset=16), Name('other', Param(), lineno=541, col_offset=22)], None, None, []), [Expr(Str(" Subtract count, but keep only results with positive counts.\n\n        >>> Counter('abbbc') - Counter('bccd')\n        Counter({'b': 2, 'a': 1})\n\n        ", lineno=547, col_offset=-1), lineno=547, col_offset=-1), If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=548, col_offset=15), [Name('other', Load(), lineno=548, col_offset=26), Name('Counter', Load(), lineno=548, col_offset=33)], [], None, None, lineno=548, col_offset=15), lineno=548, col_offset=11), [Return(Name('NotImplemented', Load(), lineno=549, col_offset=19), lineno=549, col_offset=12)], [], lineno=548, col_offset=8), Assign([Name('result', Store(), lineno=550, col_offset=8)], Call(Name('Counter', Load(), lineno=550, col_offset=17), [], [], None, None, lineno=550, col_offset=17), lineno=550, col_offset=8), For(Name('elem', Store(), lineno=551, col_offset=12), BinOp(Call(Name('set', Load(), lineno=551, col_offset=20), [Name('self', Load(), lineno=551, col_offset=24)], [], None, None, lineno=551, col_offset=20), BitOr(), Call(Name('set', Load(), lineno=551, col_offset=32), [Name('other', Load(), lineno=551, col_offset=36)], [], None, None, lineno=551, col_offset=32), lineno=551, col_offset=20), [Assign([Name('newcount', Store(), lineno=552, col_offset=12)], BinOp(Subscript(Name('self', Load(), lineno=552, col_offset=23), Index(Name('elem', Load(), lineno=552, col_offset=28)), Load(), lineno=552, col_offset=23), Sub(), Subscript(Name('other', Load(), lineno=552, col_offset=36), Index(Name('elem', Load(), lineno=552, col_offset=42)), Load(), lineno=552, col_offset=36), lineno=552, col_offset=23), lineno=552, col_offset=12), If(Compare(Name('newcount', Load(), lineno=553, col_offset=15), [Gt()], [Num(0, lineno=553, col_offset=26)], lineno=553, col_offset=15), [Assign([Subscript(Name('result', Load(), lineno=554, col_offset=16), Index(Name('elem', Load(), lineno=554, col_offset=23)), Store(), lineno=554, col_offset=16)], Name('newcount', Load(), lineno=554, col_offset=31), lineno=554, col_offset=16)], [], lineno=553, col_offset=12)], [], lineno=551, col_offset=8), Return(Name('result', Load(), lineno=555, col_offset=15), lineno=555, col_offset=8)], [], lineno=541, col_offset=4), FunctionDef('__or__', arguments([Name('self', Param(), lineno=557, col_offset=15), Name('other', Param(), lineno=557, col_offset=21)], None, None, []), [Expr(Str("Union is the maximum of value in either of the input counters.\n\n        >>> Counter('abbb') | Counter('bcc')\n        Counter({'b': 3, 'c': 2, 'a': 1})\n\n        ", lineno=563, col_offset=-1), lineno=563, col_offset=-1), If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=564, col_offset=15), [Name('other', Load(), lineno=564, col_offset=26), Name('Counter', Load(), lineno=564, col_offset=33)], [], None, None, lineno=564, col_offset=15), lineno=564, col_offset=11), [Return(Name('NotImplemented', Load(), lineno=565, col_offset=19), lineno=565, col_offset=12)], [], lineno=564, col_offset=8), Assign([Name('result', Store(), lineno=566, col_offset=8)], Call(Name('Counter', Load(), lineno=566, col_offset=17), [], [], None, None, lineno=566, col_offset=17), lineno=566, col_offset=8), For(Name('elem', Store(), lineno=567, col_offset=12), BinOp(Call(Name('set', Load(), lineno=567, col_offset=20), [Name('self', Load(), lineno=567, col_offset=24)], [], None, None, lineno=567, col_offset=20), BitOr(), Call(Name('set', Load(), lineno=567, col_offset=32), [Name('other', Load(), lineno=567, col_offset=36)], [], None, None, lineno=567, col_offset=32), lineno=567, col_offset=20), [Assign([Tuple([Name('p', Store(), lineno=568, col_offset=12), Name('q', Store(), lineno=568, col_offset=15)], Store(), lineno=568, col_offset=12)], Tuple([Subscript(Name('self', Load(), lineno=568, col_offset=19), Index(Name('elem', Load(), lineno=568, col_offset=24)), Load(), lineno=568, col_offset=19), Subscript(Name('other', Load(), lineno=568, col_offset=31), Index(Name('elem', Load(), lineno=568, col_offset=37)), Load(), lineno=568, col_offset=31)], Load(), lineno=568, col_offset=19), lineno=568, col_offset=12), Assign([Name('newcount', Store(), lineno=569, col_offset=12)], IfExp(Compare(Name('p', Load(), lineno=569, col_offset=28), [Lt()], [Name('q', Load(), lineno=569, col_offset=32)], lineno=569, col_offset=28), Name('q', Load(), lineno=569, col_offset=23), Name('p', Load(), lineno=569, col_offset=39), lineno=569, col_offset=23), lineno=569, col_offset=12), If(Compare(Name('newcount', Load(), lineno=570, col_offset=15), [Gt()], [Num(0, lineno=570, col_offset=26)], lineno=570, col_offset=15), [Assign([Subscript(Name('result', Load(), lineno=571, col_offset=16), Index(Name('elem', Load(), lineno=571, col_offset=23)), Store(), lineno=571, col_offset=16)], Name('newcount', Load(), lineno=571, col_offset=31), lineno=571, col_offset=16)], [], lineno=570, col_offset=12)], [], lineno=567, col_offset=8), Return(Name('result', Load(), lineno=572, col_offset=15), lineno=572, col_offset=8)], [], lineno=557, col_offset=4), FunctionDef('__and__', arguments([Name('self', Param(), lineno=574, col_offset=16), Name('other', Param(), lineno=574, col_offset=22)], None, None, []), [Expr(Str(" Intersection is the minimum of corresponding counts.\n\n        >>> Counter('abbb') & Counter('bcc')\n        Counter({'b': 1})\n\n        ", lineno=580, col_offset=-1), lineno=580, col_offset=-1), If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=581, col_offset=15), [Name('other', Load(), lineno=581, col_offset=26), Name('Counter', Load(), lineno=581, col_offset=33)], [], None, None, lineno=581, col_offset=15), lineno=581, col_offset=11), [Return(Name('NotImplemented', Load(), lineno=582, col_offset=19), lineno=582, col_offset=12)], [], lineno=581, col_offset=8), Assign([Name('result', Store(), lineno=583, col_offset=8)], Call(Name('Counter', Load(), lineno=583, col_offset=17), [], [], None, None, lineno=583, col_offset=17), lineno=583, col_offset=8), If(Compare(Call(Name('len', Load(), lineno=584, col_offset=11), [Name('self', Load(), lineno=584, col_offset=15)], [], None, None, lineno=584, col_offset=11), [Lt()], [Call(Name('len', Load(), lineno=584, col_offset=23), [Name('other', Load(), lineno=584, col_offset=27)], [], None, None, lineno=584, col_offset=23)], lineno=584, col_offset=11), [Assign([Tuple([Name('self', Store(), lineno=585, col_offset=12), Name('other', Store(), lineno=585, col_offset=18)], Store(), lineno=585, col_offset=12)], Tuple([Name('other', Load(), lineno=585, col_offset=26), Name('self', Load(), lineno=585, col_offset=33)], Load(), lineno=585, col_offset=26), lineno=585, col_offset=12)], [], lineno=584, col_offset=8), For(Name('elem', Store(), lineno=586, col_offset=12), Call(Name('_ifilter', Load(), lineno=586, col_offset=20), [Attribute(Name('self', Load(), lineno=586, col_offset=29), '__contains__', Load(), lineno=586, col_offset=29), Name('other', Load(), lineno=586, col_offset=48)], [], None, None, lineno=586, col_offset=20), [Assign([Tuple([Name('p', Store(), lineno=587, col_offset=12), Name('q', Store(), lineno=587, col_offset=15)], Store(), lineno=587, col_offset=12)], Tuple([Subscript(Name('self', Load(), lineno=587, col_offset=19), Index(Name('elem', Load(), lineno=587, col_offset=24)), Load(), lineno=587, col_offset=19), Subscript(Name('other', Load(), lineno=587, col_offset=31), Index(Name('elem', Load(), lineno=587, col_offset=37)), Load(), lineno=587, col_offset=31)], Load(), lineno=587, col_offset=19), lineno=587, col_offset=12), Assign([Name('newcount', Store(), lineno=588, col_offset=12)], IfExp(Compare(Name('p', Load(), lineno=588, col_offset=28), [Lt()], [Name('q', Load(), lineno=588, col_offset=32)], lineno=588, col_offset=28), Name('p', Load(), lineno=588, col_offset=23), Name('q', Load(), lineno=588, col_offset=39), lineno=588, col_offset=23), lineno=588, col_offset=12), If(Compare(Name('newcount', Load(), lineno=589, col_offset=15), [Gt()], [Num(0, lineno=589, col_offset=26)], lineno=589, col_offset=15), [Assign([Subscript(Name('result', Load(), lineno=590, col_offset=16), Index(Name('elem', Load(), lineno=590, col_offset=23)), Store(), lineno=590, col_offset=16)], Name('newcount', Load(), lineno=590, col_offset=31), lineno=590, col_offset=16)], [], lineno=589, col_offset=12)], [], lineno=586, col_offset=8), Return(Name('result', Load(), lineno=591, col_offset=15), lineno=591, col_offset=8)], [], lineno=574, col_offset=4)], [], lineno=326, col_offset=0), If(Compare(Name('__name__', Load(), lineno=594, col_offset=3), [Eq()], [Str('__main__', lineno=594, col_offset=15)], lineno=594, col_offset=3), [ImportFrom('cPickle', [alias('loads', None), alias('dumps', None)], 0, lineno=596, col_offset=4), Assign([Name('Point', Store(), lineno=597, col_offset=4)], Call(Name('namedtuple', Load(), lineno=597, col_offset=12), [Str('Point', lineno=597, col_offset=23), Str('x, y', lineno=597, col_offset=32), Name('True', Load(), lineno=597, col_offset=40)], [], None, None, lineno=597, col_offset=12), lineno=597, col_offset=4), Assign([Name('p', Store(), lineno=598, col_offset=4)], Call(Name('Point', Load(), lineno=598, col_offset=8), [], [keyword('x', Num(10, lineno=598, col_offset=16)), keyword('y', Num(20, lineno=598, col_offset=22))], None, None, lineno=598, col_offset=8), lineno=598, col_offset=4), Assert(Compare(Name('p', Load(), lineno=599, col_offset=11), [Eq()], [Call(Name('loads', Load(), lineno=599, col_offset=16), [Call(Name('dumps', Load(), lineno=599, col_offset=22), [Name('p', Load(), lineno=599, col_offset=28)], [], None, None, lineno=599, col_offset=22)], [], None, None, lineno=599, col_offset=16)], lineno=599, col_offset=11), None, lineno=599, col_offset=4), ClassDef('Point', [Call(Name('namedtuple', Load(), lineno=602, col_offset=16), [Str('Point', lineno=602, col_offset=27), Str('x y', lineno=602, col_offset=36)], [], None, None, lineno=602, col_offset=16)], [Assign([Name('__slots__', Store(), lineno=603, col_offset=8)], Tuple([], Load(), lineno=603, col_offset=20), lineno=603, col_offset=8), FunctionDef('hypot', arguments([Name('self', Param(), lineno=605, col_offset=18)], None, None, []), [Return(BinOp(BinOp(BinOp(Attribute(Name('self', Load(), lineno=606, col_offset=20), 'x', Load(), lineno=606, col_offset=20), Pow(), Num(2, lineno=606, col_offset=30), lineno=606, col_offset=20), Add(), BinOp(Attribute(Name('self', Load(), lineno=606, col_offset=34), 'y', Load(), lineno=606, col_offset=34), Pow(), Num(2, lineno=606, col_offset=44), lineno=606, col_offset=34), lineno=606, col_offset=20), Pow(), Num(0.5, lineno=606, col_offset=50), lineno=606, col_offset=19), lineno=606, col_offset=12)], [Name('property', Load(), lineno=604, col_offset=9)], lineno=604, col_offset=8), FunctionDef('__str__', arguments([Name('self', Param(), lineno=607, col_offset=20)], None, None, []), [Return(BinOp(Str('Point: x=%6.3f  y=%6.3f  hypot=%6.3f', lineno=608, col_offset=19), Mod(), Tuple([Attribute(Name('self', Load(), lineno=608, col_offset=61), 'x', Load(), lineno=608, col_offset=61), Attribute(Name('self', Load(), lineno=608, col_offset=69), 'y', Load(), lineno=608, col_offset=69), Attribute(Name('self', Load(), lineno=608, col_offset=77), 'hypot', Load(), lineno=608, col_offset=77)], Load(), lineno=608, col_offset=61), lineno=608, col_offset=19), lineno=608, col_offset=12)], [], lineno=607, col_offset=8)], [], lineno=602, col_offset=4), For(Name('p', Store(), lineno=610, col_offset=8), Tuple([Call(Name('Point', Load(), lineno=610, col_offset=13), [Num(3, lineno=610, col_offset=19), Num(4, lineno=610, col_offset=22)], [], None, None, lineno=610, col_offset=13), Call(Name('Point', Load(), lineno=610, col_offset=26), [Num(14, lineno=610, col_offset=32), BinOp(Num(5, lineno=610, col_offset=36), Div(), Num(7.0, lineno=610, col_offset=38), lineno=610, col_offset=36)], [], None, None, lineno=610, col_offset=26)], Load(), lineno=610, col_offset=13), [Print(None, [Name('p', Load(), lineno=611, col_offset=14)], True, lineno=611, col_offset=8)], [], lineno=610, col_offset=4), ClassDef('Point', [Call(Name('namedtuple', Load(), lineno=613, col_offset=16), [Str('Point', lineno=613, col_offset=27), Str('x y', lineno=613, col_offset=36)], [], None, None, lineno=613, col_offset=16)], [Expr(Str('Point class with optimized _make() and _replace() without error-checking', lineno=614, col_offset=8), lineno=614, col_offset=8), Assign([Name('__slots__', Store(), lineno=615, col_offset=8)], Tuple([], Load(), lineno=615, col_offset=20), lineno=615, col_offset=8), Assign([Name('_make', Store(), lineno=616, col_offset=8)], Call(Name('classmethod', Load(), lineno=616, col_offset=16), [Attribute(Name('tuple', Load(), lineno=616, col_offset=28), '__new__', Load(), lineno=616, col_offset=28)], [], None, None, lineno=616, col_offset=16), lineno=616, col_offset=8), FunctionDef('_replace', arguments([Name('self', Param(), lineno=617, col_offset=21), Name('_map', Param(), lineno=617, col_offset=27)], None, 'kwds', [Name('map', Load(), lineno=617, col_offset=32)]), [Return(Call(Attribute(Name('self', Load(), lineno=618, col_offset=19), '_make', Load(), lineno=618, col_offset=19), [Call(Name('_map', Load(), lineno=618, col_offset=30), [Attribute(Name('kwds', Load(), lineno=618, col_offset=35), 'get', Load(), lineno=618, col_offset=35), Tuple([Str('x', lineno=618, col_offset=46), Str('y', lineno=618, col_offset=51)], Load(), lineno=618, col_offset=46), Name('self', Load(), lineno=618, col_offset=57)], [], None, None, lineno=618, col_offset=30)], [], None, None, lineno=618, col_offset=19), lineno=618, col_offset=12)], [], lineno=617, col_offset=8)], [], lineno=613, col_offset=4), Print(None, [Call(Attribute(Call(Name('Point', Load(), lineno=620, col_offset=10), [Num(11, lineno=620, col_offset=16), Num(22, lineno=620, col_offset=20)], [], None, None, lineno=620, col_offset=10), '_replace', Load(), lineno=620, col_offset=10), [], [keyword('x', Num(100, lineno=620, col_offset=35))], None, None, lineno=620, col_offset=10)], True, lineno=620, col_offset=4), Assign([Name('Point3D', Store(), lineno=622, col_offset=4)], Call(Name('namedtuple', Load(), lineno=622, col_offset=14), [Str('Point3D', lineno=622, col_offset=25), BinOp(Attribute(Name('Point', Load(), lineno=622, col_offset=36), '_fields', Load(), lineno=622, col_offset=36), Add(), Tuple([Str('z', lineno=622, col_offset=53)], Load(), lineno=622, col_offset=53), lineno=622, col_offset=36)], [], None, None, lineno=622, col_offset=14), lineno=622, col_offset=4), Print(None, [Attribute(Name('Point3D', Load(), lineno=623, col_offset=10), '__doc__', Load(), lineno=623, col_offset=10)], True, lineno=623, col_offset=4), Import([alias('doctest', None)], lineno=625, col_offset=4), Assign([Name('TestResults', Store(), lineno=626, col_offset=4)], Call(Name('namedtuple', Load(), lineno=626, col_offset=18), [Str('TestResults', lineno=626, col_offset=29), Str('failed attempted', lineno=626, col_offset=44)], [], None, None, lineno=626, col_offset=18), lineno=626, col_offset=4), Print(None, [Call(Name('TestResults', Load(), lineno=627, col_offset=10), [], [], Call(Attribute(Name('doctest', Load(), lineno=627, col_offset=23), 'testmod', Load(), lineno=627, col_offset=23), [], [], None, None, lineno=627, col_offset=23), None, lineno=627, col_offset=10)], True, lineno=627, col_offset=4)], [], lineno=594, col_offset=0)])
