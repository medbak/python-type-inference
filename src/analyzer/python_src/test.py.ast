Module([Expr(Str('Test module for the noddy examples\n\nNoddy 1:\n\n>>> import noddy\n>>> n1 = noddy.Noddy()\n>>> n2 = noddy.Noddy()\n>>> del n1\n>>> del n2\n\n\nNoddy 2\n\n>>> import noddy2\n>>> n1 = noddy2.Noddy(\'jim\', \'fulton\', 42)\n>>> n1.first\n\'jim\'\n>>> n1.last\n\'fulton\'\n>>> n1.number\n42\n>>> n1.name()\n\'jim fulton\'\n>>> n1.first = \'will\'\n>>> n1.name()\n\'will fulton\'\n>>> n1.last = \'tell\'\n>>> n1.name()\n\'will tell\'\n>>> del n1.first\n>>> n1.name()\nTraceback (most recent call last):\n...\nAttributeError: first\n>>> n1.first\nTraceback (most recent call last):\n...\nAttributeError: first\n>>> n1.first = \'drew\'\n>>> n1.first\n\'drew\'\n>>> del n1.number\nTraceback (most recent call last):\n...\nTypeError: can\'t delete numeric/char attribute\n>>> n1.number=2\n>>> n1.number\n2\n>>> n1.first = 42\n>>> n1.name()\n\'42 tell\'\n>>> n2 = noddy2.Noddy()\n>>> n2.name()\n\' \'\n>>> n2.first\n\'\'\n>>> n2.last\n\'\'\n>>> del n2.first\n>>> n2.first\nTraceback (most recent call last):\n...\nAttributeError: first\n>>> n2.first\nTraceback (most recent call last):\n...\nAttributeError: first\n>>> n2.name()\nTraceback (most recent call last):\n  File "<stdin>", line 1, in ?\nAttributeError: first\n>>> n2.number\n0\n>>> n3 = noddy2.Noddy(\'jim\', \'fulton\', \'waaa\')\nTraceback (most recent call last):\n  File "<stdin>", line 1, in ?\nTypeError: an integer is required\n>>> del n1\n>>> del n2\n\n\nNoddy 3\n\n>>> import noddy3\n>>> n1 = noddy3.Noddy(\'jim\', \'fulton\', 42)\n>>> n1 = noddy3.Noddy(\'jim\', \'fulton\', 42)\n>>> n1.name()\n\'jim fulton\'\n>>> del n1.first\nTraceback (most recent call last):\n  File "<stdin>", line 1, in ?\nTypeError: Cannot delete the first attribute\n>>> n1.first = 42\nTraceback (most recent call last):\n  File "<stdin>", line 1, in ?\nTypeError: The first attribute value must be a string\n>>> n1.first = \'will\'\n>>> n1.name()\n\'will fulton\'\n>>> n2 = noddy3.Noddy()\n>>> n2 = noddy3.Noddy()\n>>> n2 = noddy3.Noddy()\n>>> n3 = noddy3.Noddy(\'jim\', \'fulton\', \'waaa\')\nTraceback (most recent call last):\n  File "<stdin>", line 1, in ?\nTypeError: an integer is required\n>>> del n1\n>>> del n2\n\nNoddy 4\n\n>>> import noddy4\n>>> n1 = noddy4.Noddy(\'jim\', \'fulton\', 42)\n>>> n1.first\n\'jim\'\n>>> n1.last\n\'fulton\'\n>>> n1.number\n42\n>>> n1.name()\n\'jim fulton\'\n>>> n1.first = \'will\'\n>>> n1.name()\n\'will fulton\'\n>>> n1.last = \'tell\'\n>>> n1.name()\n\'will tell\'\n>>> del n1.first\n>>> n1.name()\nTraceback (most recent call last):\n...\nAttributeError: first\n>>> n1.first\nTraceback (most recent call last):\n...\nAttributeError: first\n>>> n1.first = \'drew\'\n>>> n1.first\n\'drew\'\n>>> del n1.number\nTraceback (most recent call last):\n...\nTypeError: can\'t delete numeric/char attribute\n>>> n1.number=2\n>>> n1.number\n2\n>>> n1.first = 42\n>>> n1.name()\n\'42 tell\'\n>>> n2 = noddy4.Noddy()\n>>> n2 = noddy4.Noddy()\n>>> n2 = noddy4.Noddy()\n>>> n2 = noddy4.Noddy()\n>>> n2.name()\n\' \'\n>>> n2.first\n\'\'\n>>> n2.last\n\'\'\n>>> del n2.first\n>>> n2.first\nTraceback (most recent call last):\n...\nAttributeError: first\n>>> n2.first\nTraceback (most recent call last):\n...\nAttributeError: first\n>>> n2.name()\nTraceback (most recent call last):\n  File "<stdin>", line 1, in ?\nAttributeError: first\n>>> n2.number\n0\n>>> n3 = noddy4.Noddy(\'jim\', \'fulton\', \'waaa\')\nTraceback (most recent call last):\n  File "<stdin>", line 1, in ?\nTypeError: an integer is required\n\n\nTest cyclic gc(?)\n\n>>> import gc\n>>> gc.disable()\n\n>>> x = []\n>>> l = [x]\n>>> n2.first = l\n>>> n2.first\n[[]]\n>>> l.append(n2)\n>>> del l\n>>> del n1\n>>> del n2\n>>> sys.getrefcount(x)\n3\n>>> ignore = gc.collect()\n>>> sys.getrefcount(x)\n2\n\n>>> gc.enable()\n', lineno=202, col_offset=-1), lineno=202, col_offset=-1), Import([alias('os', None)], lineno=204, col_offset=0), Import([alias('sys', None)], lineno=205, col_offset=0), ImportFrom('distutils.util', [alias('get_platform', None)], 0, lineno=206, col_offset=0), Assign([Name('PLAT_SPEC', Store(), lineno=207, col_offset=0)], BinOp(Str('%s-%s', lineno=207, col_offset=12), Mod(), Tuple([Call(Name('get_platform', Load(), lineno=207, col_offset=23), [], [], None, None, lineno=207, col_offset=23), Subscript(Attribute(Name('sys', Load(), lineno=207, col_offset=39), 'version', Load(), lineno=207, col_offset=39), Slice(Num(0, lineno=207, col_offset=51), Num(3, lineno=207, col_offset=53), None), Load(), lineno=207, col_offset=39)], Load(), lineno=207, col_offset=23), lineno=207, col_offset=12), lineno=207, col_offset=0), Assign([Name('src', Store(), lineno=208, col_offset=0)], Call(Attribute(Attribute(Name('os', Load(), lineno=208, col_offset=6), 'path', Load(), lineno=208, col_offset=6), 'join', Load(), lineno=208, col_offset=6), [Str('build', lineno=208, col_offset=19), BinOp(Str('lib.%s', lineno=208, col_offset=28), Mod(), Name('PLAT_SPEC', Load(), lineno=208, col_offset=39), lineno=208, col_offset=28)], [], None, None, lineno=208, col_offset=6), lineno=208, col_offset=0), Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=209, col_offset=0), 'path', Load(), lineno=209, col_offset=0), 'append', Load(), lineno=209, col_offset=0), [Name('src', Load(), lineno=209, col_offset=16)], [], None, None, lineno=209, col_offset=0), lineno=209, col_offset=0), If(Compare(Name('__name__', Load(), lineno=211, col_offset=3), [Eq()], [Str('__main__', lineno=211, col_offset=15)], lineno=211, col_offset=3), [Import([alias('doctest', None), alias('__main__', None)], lineno=212, col_offset=4), Expr(Call(Attribute(Name('doctest', Load(), lineno=213, col_offset=4), 'testmod', Load(), lineno=213, col_offset=4), [Name('__main__', Load(), lineno=213, col_offset=20)], [], None, None, lineno=213, col_offset=4), lineno=213, col_offset=4)], [], lineno=211, col_offset=0)])
