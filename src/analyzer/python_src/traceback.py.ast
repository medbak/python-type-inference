Module([Expr(Str('Extract, format and print information about Python stack traces.', lineno=1, col_offset=0), lineno=1, col_offset=0), Import([alias('linecache', None)], lineno=3, col_offset=0), Import([alias('sys', None)], lineno=4, col_offset=0), Import([alias('types', None)], lineno=5, col_offset=0), Assign([Name('__all__', Store(), lineno=7, col_offset=0)], List([Str('extract_stack', lineno=7, col_offset=11), Str('extract_tb', lineno=7, col_offset=28), Str('format_exception', lineno=7, col_offset=42), Str('format_exception_only', lineno=8, col_offset=11), Str('format_list', lineno=8, col_offset=36), Str('format_stack', lineno=8, col_offset=51), Str('format_tb', lineno=9, col_offset=11), Str('print_exc', lineno=9, col_offset=24), Str('format_exc', lineno=9, col_offset=37), Str('print_exception', lineno=9, col_offset=51), Str('print_last', lineno=10, col_offset=11), Str('print_stack', lineno=10, col_offset=25), Str('print_tb', lineno=10, col_offset=40), Str('tb_lineno', lineno=10, col_offset=52)], Load(), lineno=7, col_offset=10), lineno=7, col_offset=0), FunctionDef('_print', arguments([Name('file', Param(), lineno=12, col_offset=11), Name('str', Param(), lineno=12, col_offset=17), Name('terminator', Param(), lineno=12, col_offset=25)], None, None, [Str('', lineno=12, col_offset=21), Str('\n', lineno=12, col_offset=36)]), [Expr(Call(Attribute(Name('file', Load(), lineno=13, col_offset=4), 'write', Load(), lineno=13, col_offset=4), [BinOp(Name('str', Load(), lineno=13, col_offset=15), Add(), Name('terminator', Load(), lineno=13, col_offset=19), lineno=13, col_offset=15)], [], None, None, lineno=13, col_offset=4), lineno=13, col_offset=4)], [], lineno=12, col_offset=0), FunctionDef('print_list', arguments([Name('extracted_list', Param(), lineno=16, col_offset=15), Name('file', Param(), lineno=16, col_offset=31)], None, None, [Name('None', Load(), lineno=16, col_offset=36)]), [Expr(Str('Print the list of tuples as returned by extract_tb() or\n    extract_stack() as a formatted stack trace to the given file.', lineno=18, col_offset=-1), lineno=18, col_offset=-1), If(Compare(Name('file', Load(), lineno=19, col_offset=7), [Is()], [Name('None', Load(), lineno=19, col_offset=15)], lineno=19, col_offset=7), [Assign([Name('file', Store(), lineno=20, col_offset=8)], Attribute(Name('sys', Load(), lineno=20, col_offset=15), 'stderr', Load(), lineno=20, col_offset=15), lineno=20, col_offset=8)], [], lineno=19, col_offset=4), For(Tuple([Name('filename', Store(), lineno=21, col_offset=8), Name('lineno', Store(), lineno=21, col_offset=18), Name('name', Store(), lineno=21, col_offset=26), Name('line', Store(), lineno=21, col_offset=32)], Store(), lineno=21, col_offset=8), Name('extracted_list', Load(), lineno=21, col_offset=40), [Expr(Call(Name('_print', Load(), lineno=22, col_offset=8), [Name('file', Load(), lineno=22, col_offset=15), BinOp(Str('  File "%s", line %d, in %s', lineno=23, col_offset=15), Mod(), Tuple([Name('filename', Load(), lineno=23, col_offset=48), Name('lineno', Load(), lineno=23, col_offset=57), Name('name', Load(), lineno=23, col_offset=64)], Load(), lineno=23, col_offset=48), lineno=23, col_offset=15)], [], None, None, lineno=22, col_offset=8), lineno=22, col_offset=8), If(Name('line', Load(), lineno=24, col_offset=11), [Expr(Call(Name('_print', Load(), lineno=25, col_offset=12), [Name('file', Load(), lineno=25, col_offset=19), BinOp(Str('    %s', lineno=25, col_offset=25), Mod(), Call(Attribute(Name('line', Load(), lineno=25, col_offset=36), 'strip', Load(), lineno=25, col_offset=36), [], [], None, None, lineno=25, col_offset=36), lineno=25, col_offset=25)], [], None, None, lineno=25, col_offset=12), lineno=25, col_offset=12)], [], lineno=24, col_offset=8)], [], lineno=21, col_offset=4)], [], lineno=16, col_offset=0), FunctionDef('format_list', arguments([Name('extracted_list', Param(), lineno=27, col_offset=16)], None, None, []), [Expr(Str('Format a list of traceback entry tuples for printing.\n\n    Given a list of tuples as returned by extract_tb() or\n    extract_stack(), return a list of strings ready for printing.\n    Each string in the resulting list corresponds to the item with the\n    same index in the argument list.  Each string ends in a newline;\n    the strings may contain internal newlines as well, for those items\n    whose source text line is not None.\n    ', lineno=36, col_offset=-1), lineno=36, col_offset=-1), Assign([Name('list', Store(), lineno=37, col_offset=4)], List([], Load(), lineno=37, col_offset=11), lineno=37, col_offset=4), For(Tuple([Name('filename', Store(), lineno=38, col_offset=8), Name('lineno', Store(), lineno=38, col_offset=18), Name('name', Store(), lineno=38, col_offset=26), Name('line', Store(), lineno=38, col_offset=32)], Store(), lineno=38, col_offset=8), Name('extracted_list', Load(), lineno=38, col_offset=40), [Assign([Name('item', Store(), lineno=39, col_offset=8)], BinOp(Str('  File "%s", line %d, in %s\n', lineno=39, col_offset=15), Mod(), Tuple([Name('filename', Load(), lineno=39, col_offset=50), Name('lineno', Load(), lineno=39, col_offset=59), Name('name', Load(), lineno=39, col_offset=66)], Load(), lineno=39, col_offset=50), lineno=39, col_offset=15), lineno=39, col_offset=8), If(Name('line', Load(), lineno=40, col_offset=11), [Assign([Name('item', Store(), lineno=41, col_offset=12)], BinOp(Name('item', Load(), lineno=41, col_offset=19), Add(), BinOp(Str('    %s\n', lineno=41, col_offset=26), Mod(), Call(Attribute(Name('line', Load(), lineno=41, col_offset=39), 'strip', Load(), lineno=41, col_offset=39), [], [], None, None, lineno=41, col_offset=39), lineno=41, col_offset=26), lineno=41, col_offset=19), lineno=41, col_offset=12)], [], lineno=40, col_offset=8), Expr(Call(Attribute(Name('list', Load(), lineno=42, col_offset=8), 'append', Load(), lineno=42, col_offset=8), [Name('item', Load(), lineno=42, col_offset=20)], [], None, None, lineno=42, col_offset=8), lineno=42, col_offset=8)], [], lineno=38, col_offset=4), Return(Name('list', Load(), lineno=43, col_offset=11), lineno=43, col_offset=4)], [], lineno=27, col_offset=0), FunctionDef('print_tb', arguments([Name('tb', Param(), lineno=46, col_offset=13), Name('limit', Param(), lineno=46, col_offset=17), Name('file', Param(), lineno=46, col_offset=29)], None, None, [Name('None', Load(), lineno=46, col_offset=23), Name('None', Load(), lineno=46, col_offset=34)]), [Expr(Str("Print up to 'limit' stack trace entries from the traceback 'tb'.\n\n    If 'limit' is omitted or None, all entries are printed.  If 'file'\n    is omitted or None, the output goes to sys.stderr; otherwise\n    'file' should be an open file or file-like object with a write()\n    method.\n    ", lineno=53, col_offset=-1), lineno=53, col_offset=-1), If(Compare(Name('file', Load(), lineno=54, col_offset=7), [Is()], [Name('None', Load(), lineno=54, col_offset=15)], lineno=54, col_offset=7), [Assign([Name('file', Store(), lineno=55, col_offset=8)], Attribute(Name('sys', Load(), lineno=55, col_offset=15), 'stderr', Load(), lineno=55, col_offset=15), lineno=55, col_offset=8)], [], lineno=54, col_offset=4), If(Compare(Name('limit', Load(), lineno=56, col_offset=7), [Is()], [Name('None', Load(), lineno=56, col_offset=16)], lineno=56, col_offset=7), [If(Call(Name('hasattr', Load(), lineno=57, col_offset=11), [Name('sys', Load(), lineno=57, col_offset=19), Str('tracebacklimit', lineno=57, col_offset=24)], [], None, None, lineno=57, col_offset=11), [Assign([Name('limit', Store(), lineno=58, col_offset=12)], Attribute(Name('sys', Load(), lineno=58, col_offset=20), 'tracebacklimit', Load(), lineno=58, col_offset=20), lineno=58, col_offset=12)], [], lineno=57, col_offset=8)], [], lineno=56, col_offset=4), Assign([Name('n', Store(), lineno=59, col_offset=4)], Num(0, lineno=59, col_offset=8), lineno=59, col_offset=4), While(BoolOp(And(), [Compare(Name('tb', Load(), lineno=60, col_offset=10), [IsNot()], [Name('None', Load(), lineno=60, col_offset=20)], lineno=60, col_offset=10), BoolOp(Or(), [Compare(Name('limit', Load(), lineno=60, col_offset=30), [Is()], [Name('None', Load(), lineno=60, col_offset=39)], lineno=60, col_offset=30), Compare(Name('n', Load(), lineno=60, col_offset=47), [Lt()], [Name('limit', Load(), lineno=60, col_offset=51)], lineno=60, col_offset=47)], lineno=60, col_offset=30)], lineno=60, col_offset=10), [Assign([Name('f', Store(), lineno=61, col_offset=8)], Attribute(Name('tb', Load(), lineno=61, col_offset=12), 'tb_frame', Load(), lineno=61, col_offset=12), lineno=61, col_offset=8), Assign([Name('lineno', Store(), lineno=62, col_offset=8)], Attribute(Name('tb', Load(), lineno=62, col_offset=17), 'tb_lineno', Load(), lineno=62, col_offset=17), lineno=62, col_offset=8), Assign([Name('co', Store(), lineno=63, col_offset=8)], Attribute(Name('f', Load(), lineno=63, col_offset=13), 'f_code', Load(), lineno=63, col_offset=13), lineno=63, col_offset=8), Assign([Name('filename', Store(), lineno=64, col_offset=8)], Attribute(Name('co', Load(), lineno=64, col_offset=19), 'co_filename', Load(), lineno=64, col_offset=19), lineno=64, col_offset=8), Assign([Name('name', Store(), lineno=65, col_offset=8)], Attribute(Name('co', Load(), lineno=65, col_offset=15), 'co_name', Load(), lineno=65, col_offset=15), lineno=65, col_offset=8), Expr(Call(Name('_print', Load(), lineno=66, col_offset=8), [Name('file', Load(), lineno=66, col_offset=15), BinOp(Str('  File "%s", line %d, in %s', lineno=67, col_offset=15), Mod(), Tuple([Name('filename', Load(), lineno=67, col_offset=48), Name('lineno', Load(), lineno=67, col_offset=58), Name('name', Load(), lineno=67, col_offset=66)], Load(), lineno=67, col_offset=48), lineno=67, col_offset=15)], [], None, None, lineno=66, col_offset=8), lineno=66, col_offset=8), Expr(Call(Attribute(Name('linecache', Load(), lineno=68, col_offset=8), 'checkcache', Load(), lineno=68, col_offset=8), [Name('filename', Load(), lineno=68, col_offset=29)], [], None, None, lineno=68, col_offset=8), lineno=68, col_offset=8), Assign([Name('line', Store(), lineno=69, col_offset=8)], Call(Attribute(Name('linecache', Load(), lineno=69, col_offset=15), 'getline', Load(), lineno=69, col_offset=15), [Name('filename', Load(), lineno=69, col_offset=33), Name('lineno', Load(), lineno=69, col_offset=43), Attribute(Name('f', Load(), lineno=69, col_offset=51), 'f_globals', Load(), lineno=69, col_offset=51)], [], None, None, lineno=69, col_offset=15), lineno=69, col_offset=8), If(Name('line', Load(), lineno=70, col_offset=11), [Expr(Call(Name('_print', Load(), lineno=70, col_offset=17), [Name('file', Load(), lineno=70, col_offset=24), BinOp(Str('    ', lineno=70, col_offset=30), Add(), Call(Attribute(Name('line', Load(), lineno=70, col_offset=39), 'strip', Load(), lineno=70, col_offset=39), [], [], None, None, lineno=70, col_offset=39), lineno=70, col_offset=30)], [], None, None, lineno=70, col_offset=17), lineno=70, col_offset=17)], [], lineno=70, col_offset=8), Assign([Name('tb', Store(), lineno=71, col_offset=8)], Attribute(Name('tb', Load(), lineno=71, col_offset=13), 'tb_next', Load(), lineno=71, col_offset=13), lineno=71, col_offset=8), Assign([Name('n', Store(), lineno=72, col_offset=8)], BinOp(Name('n', Load(), lineno=72, col_offset=12), Add(), Num(1, lineno=72, col_offset=14), lineno=72, col_offset=12), lineno=72, col_offset=8)], [], lineno=60, col_offset=4)], [], lineno=46, col_offset=0), FunctionDef('format_tb', arguments([Name('tb', Param(), lineno=74, col_offset=14), Name('limit', Param(), lineno=74, col_offset=18)], None, None, [Name('None', Load(), lineno=74, col_offset=26)]), [Expr(Str("A shorthand for 'format_list(extract_stack(f, limit)).", lineno=75, col_offset=4), lineno=75, col_offset=4), Return(Call(Name('format_list', Load(), lineno=76, col_offset=11), [Call(Name('extract_tb', Load(), lineno=76, col_offset=23), [Name('tb', Load(), lineno=76, col_offset=34), Name('limit', Load(), lineno=76, col_offset=38)], [], None, None, lineno=76, col_offset=23)], [], None, None, lineno=76, col_offset=11), lineno=76, col_offset=4)], [], lineno=74, col_offset=0), FunctionDef('extract_tb', arguments([Name('tb', Param(), lineno=78, col_offset=15), Name('limit', Param(), lineno=78, col_offset=19)], None, None, [Name('None', Load(), lineno=78, col_offset=27)]), [Expr(Str("Return list of up to limit pre-processed entries from traceback.\n\n    This is useful for alternate formatting of stack traces.  If\n    'limit' is omitted or None, all entries are extracted.  A\n    pre-processed stack trace entry is a quadruple (filename, line\n    number, function name, text) representing the information that is\n    usually printed for a stack trace.  The text is a string with\n    leading and trailing whitespace stripped; if the source is not\n    available it is None.\n    ", lineno=88, col_offset=-1), lineno=88, col_offset=-1), If(Compare(Name('limit', Load(), lineno=89, col_offset=7), [Is()], [Name('None', Load(), lineno=89, col_offset=16)], lineno=89, col_offset=7), [If(Call(Name('hasattr', Load(), lineno=90, col_offset=11), [Name('sys', Load(), lineno=90, col_offset=19), Str('tracebacklimit', lineno=90, col_offset=24)], [], None, None, lineno=90, col_offset=11), [Assign([Name('limit', Store(), lineno=91, col_offset=12)], Attribute(Name('sys', Load(), lineno=91, col_offset=20), 'tracebacklimit', Load(), lineno=91, col_offset=20), lineno=91, col_offset=12)], [], lineno=90, col_offset=8)], [], lineno=89, col_offset=4), Assign([Name('list', Store(), lineno=92, col_offset=4)], List([], Load(), lineno=92, col_offset=11), lineno=92, col_offset=4), Assign([Name('n', Store(), lineno=93, col_offset=4)], Num(0, lineno=93, col_offset=8), lineno=93, col_offset=4), While(BoolOp(And(), [Compare(Name('tb', Load(), lineno=94, col_offset=10), [IsNot()], [Name('None', Load(), lineno=94, col_offset=20)], lineno=94, col_offset=10), BoolOp(Or(), [Compare(Name('limit', Load(), lineno=94, col_offset=30), [Is()], [Name('None', Load(), lineno=94, col_offset=39)], lineno=94, col_offset=30), Compare(Name('n', Load(), lineno=94, col_offset=47), [Lt()], [Name('limit', Load(), lineno=94, col_offset=51)], lineno=94, col_offset=47)], lineno=94, col_offset=30)], lineno=94, col_offset=10), [Assign([Name('f', Store(), lineno=95, col_offset=8)], Attribute(Name('tb', Load(), lineno=95, col_offset=12), 'tb_frame', Load(), lineno=95, col_offset=12), lineno=95, col_offset=8), Assign([Name('lineno', Store(), lineno=96, col_offset=8)], Attribute(Name('tb', Load(), lineno=96, col_offset=17), 'tb_lineno', Load(), lineno=96, col_offset=17), lineno=96, col_offset=8), Assign([Name('co', Store(), lineno=97, col_offset=8)], Attribute(Name('f', Load(), lineno=97, col_offset=13), 'f_code', Load(), lineno=97, col_offset=13), lineno=97, col_offset=8), Assign([Name('filename', Store(), lineno=98, col_offset=8)], Attribute(Name('co', Load(), lineno=98, col_offset=19), 'co_filename', Load(), lineno=98, col_offset=19), lineno=98, col_offset=8), Assign([Name('name', Store(), lineno=99, col_offset=8)], Attribute(Name('co', Load(), lineno=99, col_offset=15), 'co_name', Load(), lineno=99, col_offset=15), lineno=99, col_offset=8), Expr(Call(Attribute(Name('linecache', Load(), lineno=100, col_offset=8), 'checkcache', Load(), lineno=100, col_offset=8), [Name('filename', Load(), lineno=100, col_offset=29)], [], None, None, lineno=100, col_offset=8), lineno=100, col_offset=8), Assign([Name('line', Store(), lineno=101, col_offset=8)], Call(Attribute(Name('linecache', Load(), lineno=101, col_offset=15), 'getline', Load(), lineno=101, col_offset=15), [Name('filename', Load(), lineno=101, col_offset=33), Name('lineno', Load(), lineno=101, col_offset=43), Attribute(Name('f', Load(), lineno=101, col_offset=51), 'f_globals', Load(), lineno=101, col_offset=51)], [], None, None, lineno=101, col_offset=15), lineno=101, col_offset=8), If(Name('line', Load(), lineno=102, col_offset=11), [Assign([Name('line', Store(), lineno=102, col_offset=17)], Call(Attribute(Name('line', Load(), lineno=102, col_offset=24), 'strip', Load(), lineno=102, col_offset=24), [], [], None, None, lineno=102, col_offset=24), lineno=102, col_offset=17)], [Assign([Name('line', Store(), lineno=103, col_offset=14)], Name('None', Load(), lineno=103, col_offset=21), lineno=103, col_offset=14)], lineno=102, col_offset=8), Expr(Call(Attribute(Name('list', Load(), lineno=104, col_offset=8), 'append', Load(), lineno=104, col_offset=8), [Tuple([Name('filename', Load(), lineno=104, col_offset=21), Name('lineno', Load(), lineno=104, col_offset=31), Name('name', Load(), lineno=104, col_offset=39), Name('line', Load(), lineno=104, col_offset=45)], Load(), lineno=104, col_offset=21)], [], None, None, lineno=104, col_offset=8), lineno=104, col_offset=8), Assign([Name('tb', Store(), lineno=105, col_offset=8)], Attribute(Name('tb', Load(), lineno=105, col_offset=13), 'tb_next', Load(), lineno=105, col_offset=13), lineno=105, col_offset=8), Assign([Name('n', Store(), lineno=106, col_offset=8)], BinOp(Name('n', Load(), lineno=106, col_offset=12), Add(), Num(1, lineno=106, col_offset=14), lineno=106, col_offset=12), lineno=106, col_offset=8)], [], lineno=94, col_offset=4), Return(Name('list', Load(), lineno=107, col_offset=11), lineno=107, col_offset=4)], [], lineno=78, col_offset=0), FunctionDef('print_exception', arguments([Name('etype', Param(), lineno=110, col_offset=20), Name('value', Param(), lineno=110, col_offset=27), Name('tb', Param(), lineno=110, col_offset=34), Name('limit', Param(), lineno=110, col_offset=38), Name('file', Param(), lineno=110, col_offset=50)], None, None, [Name('None', Load(), lineno=110, col_offset=44), Name('None', Load(), lineno=110, col_offset=55)]), [Expr(Str('Print exception up to \'limit\' stack trace entries from \'tb\' to \'file\'.\n\n    This differs from print_tb() in the following ways: (1) if\n    traceback is not None, it prints a header "Traceback (most recent\n    call last):"; (2) it prints the exception type and value after the\n    stack trace; (3) if type is SyntaxError and value has the\n    appropriate format, it prints the line where the syntax error\n    occurred with a caret on the next line indicating the approximate\n    position of the error.\n    ', lineno=120, col_offset=-1), lineno=120, col_offset=-1), If(Compare(Name('file', Load(), lineno=121, col_offset=7), [Is()], [Name('None', Load(), lineno=121, col_offset=15)], lineno=121, col_offset=7), [Assign([Name('file', Store(), lineno=122, col_offset=8)], Attribute(Name('sys', Load(), lineno=122, col_offset=15), 'stderr', Load(), lineno=122, col_offset=15), lineno=122, col_offset=8)], [], lineno=121, col_offset=4), If(Name('tb', Load(), lineno=123, col_offset=7), [Expr(Call(Name('_print', Load(), lineno=124, col_offset=8), [Name('file', Load(), lineno=124, col_offset=15), Str('Traceback (most recent call last):', lineno=124, col_offset=21)], [], None, None, lineno=124, col_offset=8), lineno=124, col_offset=8), Expr(Call(Name('print_tb', Load(), lineno=125, col_offset=8), [Name('tb', Load(), lineno=125, col_offset=17), Name('limit', Load(), lineno=125, col_offset=21), Name('file', Load(), lineno=125, col_offset=28)], [], None, None, lineno=125, col_offset=8), lineno=125, col_offset=8)], [], lineno=123, col_offset=4), Assign([Name('lines', Store(), lineno=126, col_offset=4)], Call(Name('format_exception_only', Load(), lineno=126, col_offset=12), [Name('etype', Load(), lineno=126, col_offset=34), Name('value', Load(), lineno=126, col_offset=41)], [], None, None, lineno=126, col_offset=12), lineno=126, col_offset=4), For(Name('line', Store(), lineno=127, col_offset=8), Name('lines', Load(), lineno=127, col_offset=16), [Expr(Call(Name('_print', Load(), lineno=128, col_offset=8), [Name('file', Load(), lineno=128, col_offset=15), Name('line', Load(), lineno=128, col_offset=21), Str('', lineno=128, col_offset=27)], [], None, None, lineno=128, col_offset=8), lineno=128, col_offset=8)], [], lineno=127, col_offset=4)], [], lineno=110, col_offset=0), FunctionDef('format_exception', arguments([Name('etype', Param(), lineno=130, col_offset=21), Name('value', Param(), lineno=130, col_offset=28), Name('tb', Param(), lineno=130, col_offset=35), Name('limit', Param(), lineno=130, col_offset=39)], None, None, [Name('None', Load(), lineno=130, col_offset=47)]), [Expr(Str('Format a stack trace and the exception information.\n\n    The arguments have the same meaning as the corresponding arguments\n    to print_exception().  The return value is a list of strings, each\n    ending in a newline and some containing internal newlines.  When\n    these lines are concatenated and printed, exactly the same text is\n    printed as does print_exception().\n    ', lineno=138, col_offset=-1), lineno=138, col_offset=-1), If(Name('tb', Load(), lineno=139, col_offset=7), [Assign([Name('list', Store(), lineno=140, col_offset=8)], List([Str('Traceback (most recent call last):\n', lineno=140, col_offset=16)], Load(), lineno=140, col_offset=15), lineno=140, col_offset=8), Assign([Name('list', Store(), lineno=141, col_offset=8)], BinOp(Name('list', Load(), lineno=141, col_offset=15), Add(), Call(Name('format_tb', Load(), lineno=141, col_offset=22), [Name('tb', Load(), lineno=141, col_offset=32), Name('limit', Load(), lineno=141, col_offset=36)], [], None, None, lineno=141, col_offset=22), lineno=141, col_offset=15), lineno=141, col_offset=8)], [Assign([Name('list', Store(), lineno=143, col_offset=8)], List([], Load(), lineno=143, col_offset=15), lineno=143, col_offset=8)], lineno=139, col_offset=4), Assign([Name('list', Store(), lineno=144, col_offset=4)], BinOp(Name('list', Load(), lineno=144, col_offset=11), Add(), Call(Name('format_exception_only', Load(), lineno=144, col_offset=18), [Name('etype', Load(), lineno=144, col_offset=40), Name('value', Load(), lineno=144, col_offset=47)], [], None, None, lineno=144, col_offset=18), lineno=144, col_offset=11), lineno=144, col_offset=4), Return(Name('list', Load(), lineno=145, col_offset=11), lineno=145, col_offset=4)], [], lineno=130, col_offset=0), FunctionDef('format_exception_only', arguments([Name('etype', Param(), lineno=147, col_offset=26), Name('value', Param(), lineno=147, col_offset=33)], None, None, []), [Expr(Str('Format the exception part of a traceback.\n\n    The arguments are the exception type and value such as given by\n    sys.last_type and sys.last_value. The return value is a list of\n    strings, each ending in a newline.\n\n    Normally, the list contains a single string; however, for\n    SyntaxError exceptions, it contains several lines that (when\n    printed) display detailed information about where the syntax\n    error occurred.\n\n    The message indicating which exception occurred is always the last\n    string in the list.\n\n    ', lineno=162, col_offset=-1), lineno=162, col_offset=-1), If(BoolOp(Or(), [Call(Name('isinstance', Load(), lineno=170, col_offset=8), [Name('etype', Load(), lineno=170, col_offset=19), Name('BaseException', Load(), lineno=170, col_offset=26)], [], None, None, lineno=170, col_offset=8), Call(Name('isinstance', Load(), lineno=171, col_offset=8), [Name('etype', Load(), lineno=171, col_offset=19), Attribute(Name('types', Load(), lineno=171, col_offset=26), 'InstanceType', Load(), lineno=171, col_offset=26)], [], None, None, lineno=171, col_offset=8), Compare(Name('etype', Load(), lineno=172, col_offset=8), [Is()], [Name('None', Load(), lineno=172, col_offset=17)], lineno=172, col_offset=8), Compare(Call(Name('type', Load(), lineno=172, col_offset=25), [Name('etype', Load(), lineno=172, col_offset=30)], [], None, None, lineno=172, col_offset=25), [Is()], [Name('str', Load(), lineno=172, col_offset=40)], lineno=172, col_offset=25)], lineno=170, col_offset=8), [Return(List([Call(Name('_format_final_exc_line', Load(), lineno=173, col_offset=16), [Name('etype', Load(), lineno=173, col_offset=39), Name('value', Load(), lineno=173, col_offset=46)], [], None, None, lineno=173, col_offset=16)], Load(), lineno=173, col_offset=15), lineno=173, col_offset=8)], [], lineno=170, col_offset=4), Assign([Name('stype', Store(), lineno=175, col_offset=4)], Attribute(Name('etype', Load(), lineno=175, col_offset=12), '__name__', Load(), lineno=175, col_offset=12), lineno=175, col_offset=4), If(UnaryOp(Not(), Call(Name('issubclass', Load(), lineno=177, col_offset=11), [Name('etype', Load(), lineno=177, col_offset=22), Name('SyntaxError', Load(), lineno=177, col_offset=29)], [], None, None, lineno=177, col_offset=11), lineno=177, col_offset=7), [Return(List([Call(Name('_format_final_exc_line', Load(), lineno=178, col_offset=16), [Name('stype', Load(), lineno=178, col_offset=39), Name('value', Load(), lineno=178, col_offset=46)], [], None, None, lineno=178, col_offset=16)], Load(), lineno=178, col_offset=15), lineno=178, col_offset=8)], [], lineno=177, col_offset=4), Assign([Name('lines', Store(), lineno=181, col_offset=4)], List([], Load(), lineno=181, col_offset=12), lineno=181, col_offset=4), TryExcept([Assign([Tuple([Name('msg', Store(), lineno=183, col_offset=8), Tuple([Name('filename', Store(), lineno=183, col_offset=14), Name('lineno', Store(), lineno=183, col_offset=24), Name('offset', Store(), lineno=183, col_offset=32), Name('badline', Store(), lineno=183, col_offset=40)], Store(), lineno=183, col_offset=14)], Store(), lineno=183, col_offset=8)], Attribute(Name('value', Load(), lineno=183, col_offset=51), 'args', Load(), lineno=183, col_offset=51), lineno=183, col_offset=8)], [ExceptHandler(Name('Exception', Load(), lineno=184, col_offset=11), None, [Pass( lineno=185, col_offset=8)], lineno=184, col_offset=4)], [Assign([Name('filename', Store(), lineno=187, col_offset=8)], BoolOp(Or(), [Name('filename', Load(), lineno=187, col_offset=19), Str('<string>', lineno=187, col_offset=31)], lineno=187, col_offset=19), lineno=187, col_offset=8), Expr(Call(Attribute(Name('lines', Load(), lineno=188, col_offset=8), 'append', Load(), lineno=188, col_offset=8), [BinOp(Str('  File "%s", line %d\n', lineno=188, col_offset=21), Mod(), Tuple([Name('filename', Load(), lineno=188, col_offset=49), Name('lineno', Load(), lineno=188, col_offset=59)], Load(), lineno=188, col_offset=49), lineno=188, col_offset=21)], [], None, None, lineno=188, col_offset=8), lineno=188, col_offset=8), If(Compare(Name('badline', Load(), lineno=189, col_offset=11), [IsNot()], [Name('None', Load(), lineno=189, col_offset=26)], lineno=189, col_offset=11), [Expr(Call(Attribute(Name('lines', Load(), lineno=190, col_offset=12), 'append', Load(), lineno=190, col_offset=12), [BinOp(Str('    %s\n', lineno=190, col_offset=25), Mod(), Call(Attribute(Name('badline', Load(), lineno=190, col_offset=38), 'strip', Load(), lineno=190, col_offset=38), [], [], None, None, lineno=190, col_offset=38), lineno=190, col_offset=25)], [], None, None, lineno=190, col_offset=12), lineno=190, col_offset=12), If(Compare(Name('offset', Load(), lineno=191, col_offset=15), [IsNot()], [Name('None', Load(), lineno=191, col_offset=29)], lineno=191, col_offset=15), [Assign([Name('caretspace', Store(), lineno=192, col_offset=16)], Call(Attribute(Subscript(Call(Attribute(Name('badline', Load(), lineno=192, col_offset=29), 'rstrip', Load(), lineno=192, col_offset=29), [Str('\n', lineno=192, col_offset=44)], [], None, None, lineno=192, col_offset=29), Slice(None, Name('offset', Load(), lineno=192, col_offset=51), None), Load(), lineno=192, col_offset=29), 'lstrip', Load(), lineno=192, col_offset=29), [], [], None, None, lineno=192, col_offset=29), lineno=192, col_offset=16), Assign([Name('caretspace', Store(), lineno=194, col_offset=16)], GeneratorExp(BoolOp(Or(), [BoolOp(And(), [Call(Attribute(Name('c', Load(), lineno=194, col_offset=31), 'isspace', Load(), lineno=194, col_offset=31), [], [], None, None, lineno=194, col_offset=31), Name('c', Load(), lineno=194, col_offset=47)], lineno=194, col_offset=31), Str(' ', lineno=194, col_offset=52)], lineno=194, col_offset=31), [comprehension(Name('c', Store(), lineno=194, col_offset=61), Name('caretspace', Load(), lineno=194, col_offset=66), [])], lineno=194, col_offset=30), lineno=194, col_offset=16), Expr(Call(Attribute(Name('lines', Load(), lineno=196, col_offset=16), 'append', Load(), lineno=196, col_offset=16), [BinOp(Str('   %s^\n', lineno=196, col_offset=29), Mod(), Call(Attribute(Str('', lineno=196, col_offset=42), 'join', Load(), lineno=196, col_offset=42), [Name('caretspace', Load(), lineno=196, col_offset=50)], [], None, None, lineno=196, col_offset=42), lineno=196, col_offset=29)], [], None, None, lineno=196, col_offset=16), lineno=196, col_offset=16)], [], lineno=191, col_offset=12)], [], lineno=189, col_offset=8), Assign([Name('value', Store(), lineno=197, col_offset=8)], Name('msg', Load(), lineno=197, col_offset=16), lineno=197, col_offset=8)], lineno=182, col_offset=4), Expr(Call(Attribute(Name('lines', Load(), lineno=199, col_offset=4), 'append', Load(), lineno=199, col_offset=4), [Call(Name('_format_final_exc_line', Load(), lineno=199, col_offset=17), [Name('stype', Load(), lineno=199, col_offset=40), Name('value', Load(), lineno=199, col_offset=47)], [], None, None, lineno=199, col_offset=17)], [], None, None, lineno=199, col_offset=4), lineno=199, col_offset=4), Return(Name('lines', Load(), lineno=200, col_offset=11), lineno=200, col_offset=4)], [], lineno=147, col_offset=0), FunctionDef('_format_final_exc_line', arguments([Name('etype', Param(), lineno=202, col_offset=27), Name('value', Param(), lineno=202, col_offset=34)], None, None, []), [Expr(Str('Return a list of a single line -- normal case for format_exception_only', lineno=203, col_offset=4), lineno=203, col_offset=4), Assign([Name('valuestr', Store(), lineno=204, col_offset=4)], Call(Name('_some_str', Load(), lineno=204, col_offset=15), [Name('value', Load(), lineno=204, col_offset=25)], [], None, None, lineno=204, col_offset=15), lineno=204, col_offset=4), If(BoolOp(Or(), [Compare(Name('value', Load(), lineno=205, col_offset=7), [Is()], [Name('None', Load(), lineno=205, col_offset=16)], lineno=205, col_offset=7), UnaryOp(Not(), Name('valuestr', Load(), lineno=205, col_offset=28), lineno=205, col_offset=24)], lineno=205, col_offset=7), [Assign([Name('line', Store(), lineno=206, col_offset=8)], BinOp(Str('%s\n', lineno=206, col_offset=15), Mod(), Name('etype', Load(), lineno=206, col_offset=24), lineno=206, col_offset=15), lineno=206, col_offset=8)], [Assign([Name('line', Store(), lineno=208, col_offset=8)], BinOp(Str('%s: %s\n', lineno=208, col_offset=15), Mod(), Tuple([Name('etype', Load(), lineno=208, col_offset=29), Name('valuestr', Load(), lineno=208, col_offset=36)], Load(), lineno=208, col_offset=29), lineno=208, col_offset=15), lineno=208, col_offset=8)], lineno=205, col_offset=4), Return(Name('line', Load(), lineno=209, col_offset=11), lineno=209, col_offset=4)], [], lineno=202, col_offset=0), FunctionDef('_some_str', arguments([Name('value', Param(), lineno=211, col_offset=14)], None, None, []), [TryExcept([Return(Call(Name('str', Load(), lineno=213, col_offset=15), [Name('value', Load(), lineno=213, col_offset=19)], [], None, None, lineno=213, col_offset=15), lineno=213, col_offset=8)], [ExceptHandler(Name('Exception', Load(), lineno=214, col_offset=11), None, [Pass( lineno=215, col_offset=8)], lineno=214, col_offset=4)], [], lineno=212, col_offset=4), TryExcept([Assign([Name('value', Store(), lineno=217, col_offset=8)], Call(Name('unicode', Load(), lineno=217, col_offset=16), [Name('value', Load(), lineno=217, col_offset=24)], [], None, None, lineno=217, col_offset=16), lineno=217, col_offset=8), Return(Call(Attribute(Name('value', Load(), lineno=218, col_offset=15), 'encode', Load(), lineno=218, col_offset=15), [Str('ascii', lineno=218, col_offset=28), Str('backslashreplace', lineno=218, col_offset=37)], [], None, None, lineno=218, col_offset=15), lineno=218, col_offset=8)], [ExceptHandler(Name('Exception', Load(), lineno=219, col_offset=11), None, [Pass( lineno=220, col_offset=8)], lineno=219, col_offset=4)], [], lineno=216, col_offset=4), Return(BinOp(Str('<unprintable %s object>', lineno=221, col_offset=11), Mod(), Attribute(Call(Name('type', Load(), lineno=221, col_offset=39), [Name('value', Load(), lineno=221, col_offset=44)], [], None, None, lineno=221, col_offset=39), '__name__', Load(), lineno=221, col_offset=39), lineno=221, col_offset=11), lineno=221, col_offset=4)], [], lineno=211, col_offset=0), FunctionDef('print_exc', arguments([Name('limit', Param(), lineno=224, col_offset=14), Name('file', Param(), lineno=224, col_offset=26)], None, None, [Name('None', Load(), lineno=224, col_offset=20), Name('None', Load(), lineno=224, col_offset=31)]), [Expr(Str("Shorthand for 'print_exception(sys.exc_type, sys.exc_value, sys.exc_traceback, limit, file)'.\n    (In fact, it uses sys.exc_info() to retrieve the same information\n    in a thread-safe way.)", lineno=227, col_offset=-1), lineno=227, col_offset=-1), If(Compare(Name('file', Load(), lineno=228, col_offset=7), [Is()], [Name('None', Load(), lineno=228, col_offset=15)], lineno=228, col_offset=7), [Assign([Name('file', Store(), lineno=229, col_offset=8)], Attribute(Name('sys', Load(), lineno=229, col_offset=15), 'stderr', Load(), lineno=229, col_offset=15), lineno=229, col_offset=8)], [], lineno=228, col_offset=4), TryFinally([Assign([Tuple([Name('etype', Store(), lineno=231, col_offset=8), Name('value', Store(), lineno=231, col_offset=15), Name('tb', Store(), lineno=231, col_offset=22)], Store(), lineno=231, col_offset=8)], Call(Attribute(Name('sys', Load(), lineno=231, col_offset=27), 'exc_info', Load(), lineno=231, col_offset=27), [], [], None, None, lineno=231, col_offset=27), lineno=231, col_offset=8), Expr(Call(Name('print_exception', Load(), lineno=232, col_offset=8), [Name('etype', Load(), lineno=232, col_offset=24), Name('value', Load(), lineno=232, col_offset=31), Name('tb', Load(), lineno=232, col_offset=38), Name('limit', Load(), lineno=232, col_offset=42), Name('file', Load(), lineno=232, col_offset=49)], [], None, None, lineno=232, col_offset=8), lineno=232, col_offset=8)], [Assign([Name('etype', Store(), lineno=234, col_offset=8), Name('value', Store(), lineno=234, col_offset=16), Name('tb', Store(), lineno=234, col_offset=24)], Name('None', Load(), lineno=234, col_offset=29), lineno=234, col_offset=8)], lineno=230, col_offset=4)], [], lineno=224, col_offset=0), FunctionDef('format_exc', arguments([Name('limit', Param(), lineno=237, col_offset=15)], None, None, [Name('None', Load(), lineno=237, col_offset=21)]), [Expr(Str('Like print_exc() but return a string.', lineno=238, col_offset=4), lineno=238, col_offset=4), TryFinally([Assign([Tuple([Name('etype', Store(), lineno=240, col_offset=8), Name('value', Store(), lineno=240, col_offset=15), Name('tb', Store(), lineno=240, col_offset=22)], Store(), lineno=240, col_offset=8)], Call(Attribute(Name('sys', Load(), lineno=240, col_offset=27), 'exc_info', Load(), lineno=240, col_offset=27), [], [], None, None, lineno=240, col_offset=27), lineno=240, col_offset=8), Return(Call(Attribute(Str('', lineno=241, col_offset=15), 'join', Load(), lineno=241, col_offset=15), [Call(Name('format_exception', Load(), lineno=241, col_offset=23), [Name('etype', Load(), lineno=241, col_offset=40), Name('value', Load(), lineno=241, col_offset=47), Name('tb', Load(), lineno=241, col_offset=54), Name('limit', Load(), lineno=241, col_offset=58)], [], None, None, lineno=241, col_offset=23)], [], None, None, lineno=241, col_offset=15), lineno=241, col_offset=8)], [Assign([Name('etype', Store(), lineno=243, col_offset=8), Name('value', Store(), lineno=243, col_offset=16), Name('tb', Store(), lineno=243, col_offset=24)], Name('None', Load(), lineno=243, col_offset=29), lineno=243, col_offset=8)], lineno=239, col_offset=4)], [], lineno=237, col_offset=0), FunctionDef('print_last', arguments([Name('limit', Param(), lineno=246, col_offset=15), Name('file', Param(), lineno=246, col_offset=27)], None, None, [Name('None', Load(), lineno=246, col_offset=21), Name('None', Load(), lineno=246, col_offset=32)]), [Expr(Str("This is a shorthand for 'print_exception(sys.last_type,\n    sys.last_value, sys.last_traceback, limit, file)'.", lineno=248, col_offset=-1), lineno=248, col_offset=-1), If(UnaryOp(Not(), Call(Name('hasattr', Load(), lineno=249, col_offset=11), [Name('sys', Load(), lineno=249, col_offset=19), Str('last_type', lineno=249, col_offset=24)], [], None, None, lineno=249, col_offset=11), lineno=249, col_offset=7), [Raise(Call(Name('ValueError', Load(), lineno=250, col_offset=14), [Str('no last exception', lineno=250, col_offset=25)], [], None, None, lineno=250, col_offset=14), None, None, lineno=250, col_offset=8)], [], lineno=249, col_offset=4), If(Compare(Name('file', Load(), lineno=251, col_offset=7), [Is()], [Name('None', Load(), lineno=251, col_offset=15)], lineno=251, col_offset=7), [Assign([Name('file', Store(), lineno=252, col_offset=8)], Attribute(Name('sys', Load(), lineno=252, col_offset=15), 'stderr', Load(), lineno=252, col_offset=15), lineno=252, col_offset=8)], [], lineno=251, col_offset=4), Expr(Call(Name('print_exception', Load(), lineno=253, col_offset=4), [Attribute(Name('sys', Load(), lineno=253, col_offset=20), 'last_type', Load(), lineno=253, col_offset=20), Attribute(Name('sys', Load(), lineno=253, col_offset=35), 'last_value', Load(), lineno=253, col_offset=35), Attribute(Name('sys', Load(), lineno=253, col_offset=51), 'last_traceback', Load(), lineno=253, col_offset=51), Name('limit', Load(), lineno=254, col_offset=20), Name('file', Load(), lineno=254, col_offset=27)], [], None, None, lineno=253, col_offset=4), lineno=253, col_offset=4)], [], lineno=246, col_offset=0), FunctionDef('print_stack', arguments([Name('f', Param(), lineno=257, col_offset=16), Name('limit', Param(), lineno=257, col_offset=24), Name('file', Param(), lineno=257, col_offset=36)], None, None, [Name('None', Load(), lineno=257, col_offset=18), Name('None', Load(), lineno=257, col_offset=30), Name('None', Load(), lineno=257, col_offset=41)]), [Expr(Str("Print a stack trace from its invocation point.\n\n    The optional 'f' argument can be used to specify an alternate\n    stack frame at which to start. The optional 'limit' and 'file'\n    arguments have the same meaning as for print_exception().\n    ", lineno=263, col_offset=-1), lineno=263, col_offset=-1), If(Compare(Name('f', Load(), lineno=264, col_offset=7), [Is()], [Name('None', Load(), lineno=264, col_offset=12)], lineno=264, col_offset=7), [TryExcept([Raise(Name('ZeroDivisionError', Load(), lineno=266, col_offset=18), None, None, lineno=266, col_offset=12)], [ExceptHandler(Name('ZeroDivisionError', Load(), lineno=267, col_offset=15), None, [Assign([Name('f', Store(), lineno=268, col_offset=12)], Attribute(Attribute(Subscript(Call(Attribute(Name('sys', Load(), lineno=268, col_offset=16), 'exc_info', Load(), lineno=268, col_offset=16), [], [], None, None, lineno=268, col_offset=16), Index(Num(2, lineno=268, col_offset=31)), Load(), lineno=268, col_offset=16), 'tb_frame', Load(), lineno=268, col_offset=16), 'f_back', Load(), lineno=268, col_offset=16), lineno=268, col_offset=12)], lineno=267, col_offset=8)], [], lineno=265, col_offset=8)], [], lineno=264, col_offset=4), Expr(Call(Name('print_list', Load(), lineno=269, col_offset=4), [Call(Name('extract_stack', Load(), lineno=269, col_offset=15), [Name('f', Load(), lineno=269, col_offset=29), Name('limit', Load(), lineno=269, col_offset=32)], [], None, None, lineno=269, col_offset=15), Name('file', Load(), lineno=269, col_offset=40)], [], None, None, lineno=269, col_offset=4), lineno=269, col_offset=4)], [], lineno=257, col_offset=0), FunctionDef('format_stack', arguments([Name('f', Param(), lineno=271, col_offset=17), Name('limit', Param(), lineno=271, col_offset=25)], None, None, [Name('None', Load(), lineno=271, col_offset=19), Name('None', Load(), lineno=271, col_offset=31)]), [Expr(Str("Shorthand for 'format_list(extract_stack(f, limit))'.", lineno=272, col_offset=4), lineno=272, col_offset=4), If(Compare(Name('f', Load(), lineno=273, col_offset=7), [Is()], [Name('None', Load(), lineno=273, col_offset=12)], lineno=273, col_offset=7), [TryExcept([Raise(Name('ZeroDivisionError', Load(), lineno=275, col_offset=18), None, None, lineno=275, col_offset=12)], [ExceptHandler(Name('ZeroDivisionError', Load(), lineno=276, col_offset=15), None, [Assign([Name('f', Store(), lineno=277, col_offset=12)], Attribute(Attribute(Subscript(Call(Attribute(Name('sys', Load(), lineno=277, col_offset=16), 'exc_info', Load(), lineno=277, col_offset=16), [], [], None, None, lineno=277, col_offset=16), Index(Num(2, lineno=277, col_offset=31)), Load(), lineno=277, col_offset=16), 'tb_frame', Load(), lineno=277, col_offset=16), 'f_back', Load(), lineno=277, col_offset=16), lineno=277, col_offset=12)], lineno=276, col_offset=8)], [], lineno=274, col_offset=8)], [], lineno=273, col_offset=4), Return(Call(Name('format_list', Load(), lineno=278, col_offset=11), [Call(Name('extract_stack', Load(), lineno=278, col_offset=23), [Name('f', Load(), lineno=278, col_offset=37), Name('limit', Load(), lineno=278, col_offset=40)], [], None, None, lineno=278, col_offset=23)], [], None, None, lineno=278, col_offset=11), lineno=278, col_offset=4)], [], lineno=271, col_offset=0), FunctionDef('extract_stack', arguments([Name('f', Param(), lineno=280, col_offset=18), Name('limit', Param(), lineno=280, col_offset=26)], None, None, [Name('None', Load(), lineno=280, col_offset=20), Name('None', Load(), lineno=280, col_offset=34)]), [Expr(Str("Extract the raw traceback from the current stack frame.\n\n    The return value has the same format as for extract_tb().  The\n    optional 'f' and 'limit' arguments have the same meaning as for\n    print_stack().  Each item in the list is a quadruple (filename,\n    line number, function name, text), and the entries are in order\n    from oldest to newest stack frame.\n    ", lineno=288, col_offset=-1), lineno=288, col_offset=-1), If(Compare(Name('f', Load(), lineno=289, col_offset=7), [Is()], [Name('None', Load(), lineno=289, col_offset=12)], lineno=289, col_offset=7), [TryExcept([Raise(Name('ZeroDivisionError', Load(), lineno=291, col_offset=18), None, None, lineno=291, col_offset=12)], [ExceptHandler(Name('ZeroDivisionError', Load(), lineno=292, col_offset=15), None, [Assign([Name('f', Store(), lineno=293, col_offset=12)], Attribute(Attribute(Subscript(Call(Attribute(Name('sys', Load(), lineno=293, col_offset=16), 'exc_info', Load(), lineno=293, col_offset=16), [], [], None, None, lineno=293, col_offset=16), Index(Num(2, lineno=293, col_offset=31)), Load(), lineno=293, col_offset=16), 'tb_frame', Load(), lineno=293, col_offset=16), 'f_back', Load(), lineno=293, col_offset=16), lineno=293, col_offset=12)], lineno=292, col_offset=8)], [], lineno=290, col_offset=8)], [], lineno=289, col_offset=4), If(Compare(Name('limit', Load(), lineno=294, col_offset=7), [Is()], [Name('None', Load(), lineno=294, col_offset=16)], lineno=294, col_offset=7), [If(Call(Name('hasattr', Load(), lineno=295, col_offset=11), [Name('sys', Load(), lineno=295, col_offset=19), Str('tracebacklimit', lineno=295, col_offset=24)], [], None, None, lineno=295, col_offset=11), [Assign([Name('limit', Store(), lineno=296, col_offset=12)], Attribute(Name('sys', Load(), lineno=296, col_offset=20), 'tracebacklimit', Load(), lineno=296, col_offset=20), lineno=296, col_offset=12)], [], lineno=295, col_offset=8)], [], lineno=294, col_offset=4), Assign([Name('list', Store(), lineno=297, col_offset=4)], List([], Load(), lineno=297, col_offset=11), lineno=297, col_offset=4), Assign([Name('n', Store(), lineno=298, col_offset=4)], Num(0, lineno=298, col_offset=8), lineno=298, col_offset=4), While(BoolOp(And(), [Compare(Name('f', Load(), lineno=299, col_offset=10), [IsNot()], [Name('None', Load(), lineno=299, col_offset=19)], lineno=299, col_offset=10), BoolOp(Or(), [Compare(Name('limit', Load(), lineno=299, col_offset=29), [Is()], [Name('None', Load(), lineno=299, col_offset=38)], lineno=299, col_offset=29), Compare(Name('n', Load(), lineno=299, col_offset=46), [Lt()], [Name('limit', Load(), lineno=299, col_offset=50)], lineno=299, col_offset=46)], lineno=299, col_offset=29)], lineno=299, col_offset=10), [Assign([Name('lineno', Store(), lineno=300, col_offset=8)], Attribute(Name('f', Load(), lineno=300, col_offset=17), 'f_lineno', Load(), lineno=300, col_offset=17), lineno=300, col_offset=8), Assign([Name('co', Store(), lineno=301, col_offset=8)], Attribute(Name('f', Load(), lineno=301, col_offset=13), 'f_code', Load(), lineno=301, col_offset=13), lineno=301, col_offset=8), Assign([Name('filename', Store(), lineno=302, col_offset=8)], Attribute(Name('co', Load(), lineno=302, col_offset=19), 'co_filename', Load(), lineno=302, col_offset=19), lineno=302, col_offset=8), Assign([Name('name', Store(), lineno=303, col_offset=8)], Attribute(Name('co', Load(), lineno=303, col_offset=15), 'co_name', Load(), lineno=303, col_offset=15), lineno=303, col_offset=8), Expr(Call(Attribute(Name('linecache', Load(), lineno=304, col_offset=8), 'checkcache', Load(), lineno=304, col_offset=8), [Name('filename', Load(), lineno=304, col_offset=29)], [], None, None, lineno=304, col_offset=8), lineno=304, col_offset=8), Assign([Name('line', Store(), lineno=305, col_offset=8)], Call(Attribute(Name('linecache', Load(), lineno=305, col_offset=15), 'getline', Load(), lineno=305, col_offset=15), [Name('filename', Load(), lineno=305, col_offset=33), Name('lineno', Load(), lineno=305, col_offset=43), Attribute(Name('f', Load(), lineno=305, col_offset=51), 'f_globals', Load(), lineno=305, col_offset=51)], [], None, None, lineno=305, col_offset=15), lineno=305, col_offset=8), If(Name('line', Load(), lineno=306, col_offset=11), [Assign([Name('line', Store(), lineno=306, col_offset=17)], Call(Attribute(Name('line', Load(), lineno=306, col_offset=24), 'strip', Load(), lineno=306, col_offset=24), [], [], None, None, lineno=306, col_offset=24), lineno=306, col_offset=17)], [Assign([Name('line', Store(), lineno=307, col_offset=14)], Name('None', Load(), lineno=307, col_offset=21), lineno=307, col_offset=14)], lineno=306, col_offset=8), Expr(Call(Attribute(Name('list', Load(), lineno=308, col_offset=8), 'append', Load(), lineno=308, col_offset=8), [Tuple([Name('filename', Load(), lineno=308, col_offset=21), Name('lineno', Load(), lineno=308, col_offset=31), Name('name', Load(), lineno=308, col_offset=39), Name('line', Load(), lineno=308, col_offset=45)], Load(), lineno=308, col_offset=21)], [], None, None, lineno=308, col_offset=8), lineno=308, col_offset=8), Assign([Name('f', Store(), lineno=309, col_offset=8)], Attribute(Name('f', Load(), lineno=309, col_offset=12), 'f_back', Load(), lineno=309, col_offset=12), lineno=309, col_offset=8), Assign([Name('n', Store(), lineno=310, col_offset=8)], BinOp(Name('n', Load(), lineno=310, col_offset=12), Add(), Num(1, lineno=310, col_offset=14), lineno=310, col_offset=12), lineno=310, col_offset=8)], [], lineno=299, col_offset=4), Expr(Call(Attribute(Name('list', Load(), lineno=311, col_offset=4), 'reverse', Load(), lineno=311, col_offset=4), [], [], None, None, lineno=311, col_offset=4), lineno=311, col_offset=4), Return(Name('list', Load(), lineno=312, col_offset=11), lineno=312, col_offset=4)], [], lineno=280, col_offset=0), FunctionDef('tb_lineno', arguments([Name('tb', Param(), lineno=314, col_offset=14)], None, None, []), [Expr(Str('Calculate correct line number of traceback given in tb.\n\n    Obsolete in 2.3.\n    ', lineno=318, col_offset=-1), lineno=318, col_offset=-1), Return(Attribute(Name('tb', Load(), lineno=319, col_offset=11), 'tb_lineno', Load(), lineno=319, col_offset=11), lineno=319, col_offset=4)], [], lineno=314, col_offset=0)])
