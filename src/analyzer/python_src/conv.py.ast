Module([Expr(Str("Convert graminit.[ch] spit out by pgen to Python code.\n\nPgen is the Python parser generator.  It is useful to quickly create a\nparser from a grammar file in Python's grammar notation.  But I don't\nwant my parsers to be written in C (yet), so I'm translating the\nparsing tables to Python data structures and writing a Python parse\nengine.\n\nNote that the token numbers are constants determined by the standard\nPython tokenizer.  The standard token module defines these numbers and\ntheir names (the names are not used much).  The token numbers are\nhardcoded into the Python tokenizer and into pgen.  A Python\nimplementation of the Python tokenizer is also available, in the\nstandard tokenize module.\n\nOn the other hand, symbol numbers (representing the grammar's\nnon-terminals) are assigned by pgen based on the actual grammar\ninput.\n\nNote: this module is pretty much obsolete; the pgen module generates\nequivalent grammar tables directly from the Grammar.txt input file\nwithout having to invoke the Python pgen C program.\n\n", lineno=27, col_offset=-1), lineno=27, col_offset=-1), Import([alias('re', None)], lineno=30, col_offset=0), ImportFrom('pgen2', [alias('grammar', None), alias('token', None)], 0, lineno=33, col_offset=0), ClassDef('Converter', [Attribute(Name('grammar', Load(), lineno=36, col_offset=16), 'Grammar', Load(), lineno=36, col_offset=16)], [Expr(Str('Grammar subclass that reads classic pgen output files.\n\n    The run() method reads the tables as produced by the pgen parser\n    generator, typically contained in two C files, graminit.h and\n    graminit.c.  The other methods are for internal use only.\n\n    See the base class for more documentation.\n\n    ', lineno=45, col_offset=-1), lineno=45, col_offset=-1), FunctionDef('run', arguments([Name('self', Param(), lineno=47, col_offset=12), Name('graminit_h', Param(), lineno=47, col_offset=18), Name('graminit_c', Param(), lineno=47, col_offset=30)], None, None, []), [Expr(Str('Load the grammar tables from the text files written by pgen.', lineno=48, col_offset=8), lineno=48, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=49, col_offset=8), 'parse_graminit_h', Load(), lineno=49, col_offset=8), [Name('graminit_h', Load(), lineno=49, col_offset=30)], [], None, None, lineno=49, col_offset=8), lineno=49, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=50, col_offset=8), 'parse_graminit_c', Load(), lineno=50, col_offset=8), [Name('graminit_c', Load(), lineno=50, col_offset=30)], [], None, None, lineno=50, col_offset=8), lineno=50, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=51, col_offset=8), 'finish_off', Load(), lineno=51, col_offset=8), [], [], None, None, lineno=51, col_offset=8), lineno=51, col_offset=8)], [], lineno=47, col_offset=4), FunctionDef('parse_graminit_h', arguments([Name('self', Param(), lineno=53, col_offset=25), Name('filename', Param(), lineno=53, col_offset=31)], None, None, []), [Expr(Str('Parse the .h file writen by pgen.  (Internal)\n\n        This file is a sequence of #define statements defining the\n        nonterminals of the grammar as numbers.  We build two tables\n        mapping the numbers to names and back.\n\n        ', lineno=60, col_offset=-1), lineno=60, col_offset=-1), TryExcept([Assign([Name('f', Store(), lineno=62, col_offset=12)], Call(Name('open', Load(), lineno=62, col_offset=16), [Name('filename', Load(), lineno=62, col_offset=21)], [], None, None, lineno=62, col_offset=16), lineno=62, col_offset=12)], [ExceptHandler(Name('IOError', Load(), lineno=63, col_offset=15), Name('err', Store(), lineno=63, col_offset=24), [Print(None, [BinOp(Str("Can't open %s: %s", lineno=64, col_offset=18), Mod(), Tuple([Name('filename', Load(), lineno=64, col_offset=41), Name('err', Load(), lineno=64, col_offset=51)], Load(), lineno=64, col_offset=41), lineno=64, col_offset=18)], True, lineno=64, col_offset=12), Return(Name('False', Load(), lineno=65, col_offset=19), lineno=65, col_offset=12)], lineno=63, col_offset=8)], [], lineno=61, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=66, col_offset=8), 'symbol2number', Store(), lineno=66, col_offset=8)], Dict([], [], lineno=66, col_offset=29), lineno=66, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=67, col_offset=8), 'number2symbol', Store(), lineno=67, col_offset=8)], Dict([], [], lineno=67, col_offset=29), lineno=67, col_offset=8), Assign([Name('lineno', Store(), lineno=68, col_offset=8)], Num(0, lineno=68, col_offset=17), lineno=68, col_offset=8), For(Name('line', Store(), lineno=69, col_offset=12), Name('f', Load(), lineno=69, col_offset=20), [AugAssign(Name('lineno', Store(), lineno=70, col_offset=12), Add(), Num(1, lineno=70, col_offset=22), lineno=70, col_offset=12), Assign([Name('mo', Store(), lineno=71, col_offset=12)], Call(Attribute(Name('re', Load(), lineno=71, col_offset=17), 'match', Load(), lineno=71, col_offset=17), [Str('^#define\\s+(\\w+)\\s+(\\d+)$', lineno=71, col_offset=26), Name('line', Load(), lineno=71, col_offset=56)], [], None, None, lineno=71, col_offset=17), lineno=71, col_offset=12), If(BoolOp(And(), [UnaryOp(Not(), Name('mo', Load(), lineno=72, col_offset=19), lineno=72, col_offset=15), Call(Attribute(Name('line', Load(), lineno=72, col_offset=26), 'strip', Load(), lineno=72, col_offset=26), [], [], None, None, lineno=72, col_offset=26)], lineno=72, col_offset=15), [Print(None, [BinOp(Str("%s(%s): can't parse %s", lineno=73, col_offset=22), Mod(), Tuple([Name('filename', Load(), lineno=73, col_offset=50), Name('lineno', Load(), lineno=73, col_offset=60), Call(Attribute(Name('line', Load(), lineno=74, col_offset=50), 'strip', Load(), lineno=74, col_offset=50), [], [], None, None, lineno=74, col_offset=50)], Load(), lineno=73, col_offset=50), lineno=73, col_offset=22)], True, lineno=73, col_offset=16)], [Assign([Tuple([Name('symbol', Store(), lineno=76, col_offset=16), Name('number', Store(), lineno=76, col_offset=24)], Store(), lineno=76, col_offset=16)], Call(Attribute(Name('mo', Load(), lineno=76, col_offset=33), 'groups', Load(), lineno=76, col_offset=33), [], [], None, None, lineno=76, col_offset=33), lineno=76, col_offset=16), Assign([Name('number', Store(), lineno=77, col_offset=16)], Call(Name('int', Load(), lineno=77, col_offset=25), [Name('number', Load(), lineno=77, col_offset=29)], [], None, None, lineno=77, col_offset=25), lineno=77, col_offset=16), Assert(Compare(Name('symbol', Load(), lineno=78, col_offset=23), [NotIn()], [Attribute(Name('self', Load(), lineno=78, col_offset=37), 'symbol2number', Load(), lineno=78, col_offset=37)], lineno=78, col_offset=23), None, lineno=78, col_offset=16), Assert(Compare(Name('number', Load(), lineno=79, col_offset=23), [NotIn()], [Attribute(Name('self', Load(), lineno=79, col_offset=37), 'number2symbol', Load(), lineno=79, col_offset=37)], lineno=79, col_offset=23), None, lineno=79, col_offset=16), Assign([Subscript(Attribute(Name('self', Load(), lineno=80, col_offset=16), 'symbol2number', Load(), lineno=80, col_offset=16), Index(Name('symbol', Load(), lineno=80, col_offset=35)), Store(), lineno=80, col_offset=16)], Name('number', Load(), lineno=80, col_offset=45), lineno=80, col_offset=16), Assign([Subscript(Attribute(Name('self', Load(), lineno=81, col_offset=16), 'number2symbol', Load(), lineno=81, col_offset=16), Index(Name('number', Load(), lineno=81, col_offset=35)), Store(), lineno=81, col_offset=16)], Name('symbol', Load(), lineno=81, col_offset=45), lineno=81, col_offset=16)], lineno=72, col_offset=12)], [], lineno=69, col_offset=8), Return(Name('True', Load(), lineno=82, col_offset=15), lineno=82, col_offset=8)], [], lineno=53, col_offset=4), FunctionDef('parse_graminit_c', arguments([Name('self', Param(), lineno=84, col_offset=25), Name('filename', Param(), lineno=84, col_offset=31)], None, None, []), [Expr(Str('Parse the .c file writen by pgen.  (Internal)\n\n        The file looks as follows.  The first two lines are always this:\n\n        #include "pgenheaders.h"\n        #include "grammar.h"\n\n        After that come four blocks:\n\n        1) one or more state definitions\n        2) a table defining dfas\n        3) a table defining labels\n        4) a struct defining the grammar\n\n        A state definition has the following form:\n        - one or more arc arrays, each of the form:\n          static arc arcs_<n>_<m>[<k>] = {\n                  {<i>, <j>},\n                  ...\n          };\n        - followed by a state array, of the form:\n          static state states_<s>[<t>] = {\n                  {<k>, arcs_<n>_<m>},\n                  ...\n          };\n\n        ', lineno=111, col_offset=-1), lineno=111, col_offset=-1), TryExcept([Assign([Name('f', Store(), lineno=113, col_offset=12)], Call(Name('open', Load(), lineno=113, col_offset=16), [Name('filename', Load(), lineno=113, col_offset=21)], [], None, None, lineno=113, col_offset=16), lineno=113, col_offset=12)], [ExceptHandler(Name('IOError', Load(), lineno=114, col_offset=15), Name('err', Store(), lineno=114, col_offset=24), [Print(None, [BinOp(Str("Can't open %s: %s", lineno=115, col_offset=18), Mod(), Tuple([Name('filename', Load(), lineno=115, col_offset=41), Name('err', Load(), lineno=115, col_offset=51)], Load(), lineno=115, col_offset=41), lineno=115, col_offset=18)], True, lineno=115, col_offset=12), Return(Name('False', Load(), lineno=116, col_offset=19), lineno=116, col_offset=12)], lineno=114, col_offset=8)], [], lineno=112, col_offset=8), Assign([Name('lineno', Store(), lineno=118, col_offset=8)], Num(0, lineno=118, col_offset=17), lineno=118, col_offset=8), Assign([Tuple([Name('lineno', Store(), lineno=121, col_offset=8), Name('line', Store(), lineno=121, col_offset=16)], Store(), lineno=121, col_offset=8)], Tuple([BinOp(Name('lineno', Load(), lineno=121, col_offset=23), Add(), Num(1, lineno=121, col_offset=30), lineno=121, col_offset=23), Call(Attribute(Name('f', Load(), lineno=121, col_offset=33), 'next', Load(), lineno=121, col_offset=33), [], [], None, None, lineno=121, col_offset=33)], Load(), lineno=121, col_offset=23), lineno=121, col_offset=8), Assert(Compare(Name('line', Load(), lineno=122, col_offset=15), [Eq()], [Str('#include "pgenheaders.h"\n', lineno=122, col_offset=23)], lineno=122, col_offset=15), Tuple([Name('lineno', Load(), lineno=122, col_offset=54), Name('line', Load(), lineno=122, col_offset=62)], Load(), lineno=122, col_offset=54), lineno=122, col_offset=8), Assign([Tuple([Name('lineno', Store(), lineno=123, col_offset=8), Name('line', Store(), lineno=123, col_offset=16)], Store(), lineno=123, col_offset=8)], Tuple([BinOp(Name('lineno', Load(), lineno=123, col_offset=23), Add(), Num(1, lineno=123, col_offset=30), lineno=123, col_offset=23), Call(Attribute(Name('f', Load(), lineno=123, col_offset=33), 'next', Load(), lineno=123, col_offset=33), [], [], None, None, lineno=123, col_offset=33)], Load(), lineno=123, col_offset=23), lineno=123, col_offset=8), Assert(Compare(Name('line', Load(), lineno=124, col_offset=15), [Eq()], [Str('#include "grammar.h"\n', lineno=124, col_offset=23)], lineno=124, col_offset=15), Tuple([Name('lineno', Load(), lineno=124, col_offset=50), Name('line', Load(), lineno=124, col_offset=58)], Load(), lineno=124, col_offset=50), lineno=124, col_offset=8), Assign([Tuple([Name('lineno', Store(), lineno=127, col_offset=8), Name('line', Store(), lineno=127, col_offset=16)], Store(), lineno=127, col_offset=8)], Tuple([BinOp(Name('lineno', Load(), lineno=127, col_offset=23), Add(), Num(1, lineno=127, col_offset=30), lineno=127, col_offset=23), Call(Attribute(Name('f', Load(), lineno=127, col_offset=33), 'next', Load(), lineno=127, col_offset=33), [], [], None, None, lineno=127, col_offset=33)], Load(), lineno=127, col_offset=23), lineno=127, col_offset=8), Assign([Name('allarcs', Store(), lineno=128, col_offset=8)], Dict([], [], lineno=128, col_offset=18), lineno=128, col_offset=8), Assign([Name('states', Store(), lineno=129, col_offset=8)], List([], Load(), lineno=129, col_offset=17), lineno=129, col_offset=8), While(Call(Attribute(Name('line', Load(), lineno=130, col_offset=14), 'startswith', Load(), lineno=130, col_offset=14), [Str('static arc ', lineno=130, col_offset=30)], [], None, None, lineno=130, col_offset=14), [While(Call(Attribute(Name('line', Load(), lineno=131, col_offset=18), 'startswith', Load(), lineno=131, col_offset=18), [Str('static arc ', lineno=131, col_offset=34)], [], None, None, lineno=131, col_offset=18), [Assign([Name('mo', Store(), lineno=132, col_offset=16)], Call(Attribute(Name('re', Load(), lineno=132, col_offset=21), 'match', Load(), lineno=132, col_offset=21), [Str('static arc arcs_(\\d+)_(\\d+)\\[(\\d+)\\] = {$', lineno=132, col_offset=30), Name('line', Load(), lineno=133, col_offset=30)], [], None, None, lineno=132, col_offset=21), lineno=132, col_offset=16), Assert(Name('mo', Load(), lineno=134, col_offset=23), Tuple([Name('lineno', Load(), lineno=134, col_offset=28), Name('line', Load(), lineno=134, col_offset=36)], Load(), lineno=134, col_offset=28), lineno=134, col_offset=16), Assign([Tuple([Name('n', Store(), lineno=135, col_offset=16), Name('m', Store(), lineno=135, col_offset=19), Name('k', Store(), lineno=135, col_offset=22)], Store(), lineno=135, col_offset=16)], Call(Name('map', Load(), lineno=135, col_offset=26), [Name('int', Load(), lineno=135, col_offset=30), Call(Attribute(Name('mo', Load(), lineno=135, col_offset=35), 'groups', Load(), lineno=135, col_offset=35), [], [], None, None, lineno=135, col_offset=35)], [], None, None, lineno=135, col_offset=26), lineno=135, col_offset=16), Assign([Name('arcs', Store(), lineno=136, col_offset=16)], List([], Load(), lineno=136, col_offset=23), lineno=136, col_offset=16), For(Name('_', Store(), lineno=137, col_offset=20), Call(Name('range', Load(), lineno=137, col_offset=25), [Name('k', Load(), lineno=137, col_offset=31)], [], None, None, lineno=137, col_offset=25), [Assign([Tuple([Name('lineno', Store(), lineno=138, col_offset=20), Name('line', Store(), lineno=138, col_offset=28)], Store(), lineno=138, col_offset=20)], Tuple([BinOp(Name('lineno', Load(), lineno=138, col_offset=35), Add(), Num(1, lineno=138, col_offset=42), lineno=138, col_offset=35), Call(Attribute(Name('f', Load(), lineno=138, col_offset=45), 'next', Load(), lineno=138, col_offset=45), [], [], None, None, lineno=138, col_offset=45)], Load(), lineno=138, col_offset=35), lineno=138, col_offset=20), Assign([Name('mo', Store(), lineno=139, col_offset=20)], Call(Attribute(Name('re', Load(), lineno=139, col_offset=25), 'match', Load(), lineno=139, col_offset=25), [Str('\\s+{(\\d+), (\\d+)},$', lineno=139, col_offset=34), Name('line', Load(), lineno=139, col_offset=58)], [], None, None, lineno=139, col_offset=25), lineno=139, col_offset=20), Assert(Name('mo', Load(), lineno=140, col_offset=27), Tuple([Name('lineno', Load(), lineno=140, col_offset=32), Name('line', Load(), lineno=140, col_offset=40)], Load(), lineno=140, col_offset=32), lineno=140, col_offset=20), Assign([Tuple([Name('i', Store(), lineno=141, col_offset=20), Name('j', Store(), lineno=141, col_offset=23)], Store(), lineno=141, col_offset=20)], Call(Name('map', Load(), lineno=141, col_offset=27), [Name('int', Load(), lineno=141, col_offset=31), Call(Attribute(Name('mo', Load(), lineno=141, col_offset=36), 'groups', Load(), lineno=141, col_offset=36), [], [], None, None, lineno=141, col_offset=36)], [], None, None, lineno=141, col_offset=27), lineno=141, col_offset=20), Expr(Call(Attribute(Name('arcs', Load(), lineno=142, col_offset=20), 'append', Load(), lineno=142, col_offset=20), [Tuple([Name('i', Load(), lineno=142, col_offset=33), Name('j', Load(), lineno=142, col_offset=36)], Load(), lineno=142, col_offset=33)], [], None, None, lineno=142, col_offset=20), lineno=142, col_offset=20)], [], lineno=137, col_offset=16), Assign([Tuple([Name('lineno', Store(), lineno=143, col_offset=16), Name('line', Store(), lineno=143, col_offset=24)], Store(), lineno=143, col_offset=16)], Tuple([BinOp(Name('lineno', Load(), lineno=143, col_offset=31), Add(), Num(1, lineno=143, col_offset=38), lineno=143, col_offset=31), Call(Attribute(Name('f', Load(), lineno=143, col_offset=41), 'next', Load(), lineno=143, col_offset=41), [], [], None, None, lineno=143, col_offset=41)], Load(), lineno=143, col_offset=31), lineno=143, col_offset=16), Assert(Compare(Name('line', Load(), lineno=144, col_offset=23), [Eq()], [Str('};\n', lineno=144, col_offset=31)], lineno=144, col_offset=23), Tuple([Name('lineno', Load(), lineno=144, col_offset=40), Name('line', Load(), lineno=144, col_offset=48)], Load(), lineno=144, col_offset=40), lineno=144, col_offset=16), Assign([Subscript(Name('allarcs', Load(), lineno=145, col_offset=16), Index(Tuple([Name('n', Load(), lineno=145, col_offset=25), Name('m', Load(), lineno=145, col_offset=28)], Load(), lineno=145, col_offset=25)), Store(), lineno=145, col_offset=16)], Name('arcs', Load(), lineno=145, col_offset=34), lineno=145, col_offset=16), Assign([Tuple([Name('lineno', Store(), lineno=146, col_offset=16), Name('line', Store(), lineno=146, col_offset=24)], Store(), lineno=146, col_offset=16)], Tuple([BinOp(Name('lineno', Load(), lineno=146, col_offset=31), Add(), Num(1, lineno=146, col_offset=38), lineno=146, col_offset=31), Call(Attribute(Name('f', Load(), lineno=146, col_offset=41), 'next', Load(), lineno=146, col_offset=41), [], [], None, None, lineno=146, col_offset=41)], Load(), lineno=146, col_offset=31), lineno=146, col_offset=16)], [], lineno=131, col_offset=12), Assign([Name('mo', Store(), lineno=147, col_offset=12)], Call(Attribute(Name('re', Load(), lineno=147, col_offset=17), 'match', Load(), lineno=147, col_offset=17), [Str('static state states_(\\d+)\\[(\\d+)\\] = {$', lineno=147, col_offset=26), Name('line', Load(), lineno=147, col_offset=70)], [], None, None, lineno=147, col_offset=17), lineno=147, col_offset=12), Assert(Name('mo', Load(), lineno=148, col_offset=19), Tuple([Name('lineno', Load(), lineno=148, col_offset=24), Name('line', Load(), lineno=148, col_offset=32)], Load(), lineno=148, col_offset=24), lineno=148, col_offset=12), Assign([Tuple([Name('s', Store(), lineno=149, col_offset=12), Name('t', Store(), lineno=149, col_offset=15)], Store(), lineno=149, col_offset=12)], Call(Name('map', Load(), lineno=149, col_offset=19), [Name('int', Load(), lineno=149, col_offset=23), Call(Attribute(Name('mo', Load(), lineno=149, col_offset=28), 'groups', Load(), lineno=149, col_offset=28), [], [], None, None, lineno=149, col_offset=28)], [], None, None, lineno=149, col_offset=19), lineno=149, col_offset=12), Assert(Compare(Name('s', Load(), lineno=150, col_offset=19), [Eq()], [Call(Name('len', Load(), lineno=150, col_offset=24), [Name('states', Load(), lineno=150, col_offset=28)], [], None, None, lineno=150, col_offset=24)], lineno=150, col_offset=19), Tuple([Name('lineno', Load(), lineno=150, col_offset=38), Name('line', Load(), lineno=150, col_offset=46)], Load(), lineno=150, col_offset=38), lineno=150, col_offset=12), Assign([Name('state', Store(), lineno=151, col_offset=12)], List([], Load(), lineno=151, col_offset=20), lineno=151, col_offset=12), For(Name('_', Store(), lineno=152, col_offset=16), Call(Name('range', Load(), lineno=152, col_offset=21), [Name('t', Load(), lineno=152, col_offset=27)], [], None, None, lineno=152, col_offset=21), [Assign([Tuple([Name('lineno', Store(), lineno=153, col_offset=16), Name('line', Store(), lineno=153, col_offset=24)], Store(), lineno=153, col_offset=16)], Tuple([BinOp(Name('lineno', Load(), lineno=153, col_offset=31), Add(), Num(1, lineno=153, col_offset=38), lineno=153, col_offset=31), Call(Attribute(Name('f', Load(), lineno=153, col_offset=41), 'next', Load(), lineno=153, col_offset=41), [], [], None, None, lineno=153, col_offset=41)], Load(), lineno=153, col_offset=31), lineno=153, col_offset=16), Assign([Name('mo', Store(), lineno=154, col_offset=16)], Call(Attribute(Name('re', Load(), lineno=154, col_offset=21), 'match', Load(), lineno=154, col_offset=21), [Str('\\s+{(\\d+), arcs_(\\d+)_(\\d+)},$', lineno=154, col_offset=30), Name('line', Load(), lineno=154, col_offset=65)], [], None, None, lineno=154, col_offset=21), lineno=154, col_offset=16), Assert(Name('mo', Load(), lineno=155, col_offset=23), Tuple([Name('lineno', Load(), lineno=155, col_offset=28), Name('line', Load(), lineno=155, col_offset=36)], Load(), lineno=155, col_offset=28), lineno=155, col_offset=16), Assign([Tuple([Name('k', Store(), lineno=156, col_offset=16), Name('n', Store(), lineno=156, col_offset=19), Name('m', Store(), lineno=156, col_offset=22)], Store(), lineno=156, col_offset=16)], Call(Name('map', Load(), lineno=156, col_offset=26), [Name('int', Load(), lineno=156, col_offset=30), Call(Attribute(Name('mo', Load(), lineno=156, col_offset=35), 'groups', Load(), lineno=156, col_offset=35), [], [], None, None, lineno=156, col_offset=35)], [], None, None, lineno=156, col_offset=26), lineno=156, col_offset=16), Assign([Name('arcs', Store(), lineno=157, col_offset=16)], Subscript(Name('allarcs', Load(), lineno=157, col_offset=23), Index(Tuple([Name('n', Load(), lineno=157, col_offset=31), Name('m', Load(), lineno=157, col_offset=34)], Load(), lineno=157, col_offset=31)), Load(), lineno=157, col_offset=23), lineno=157, col_offset=16), Assert(Compare(Name('k', Load(), lineno=158, col_offset=23), [Eq()], [Call(Name('len', Load(), lineno=158, col_offset=28), [Name('arcs', Load(), lineno=158, col_offset=32)], [], None, None, lineno=158, col_offset=28)], lineno=158, col_offset=23), Tuple([Name('lineno', Load(), lineno=158, col_offset=40), Name('line', Load(), lineno=158, col_offset=48)], Load(), lineno=158, col_offset=40), lineno=158, col_offset=16), Expr(Call(Attribute(Name('state', Load(), lineno=159, col_offset=16), 'append', Load(), lineno=159, col_offset=16), [Name('arcs', Load(), lineno=159, col_offset=29)], [], None, None, lineno=159, col_offset=16), lineno=159, col_offset=16)], [], lineno=152, col_offset=12), Expr(Call(Attribute(Name('states', Load(), lineno=160, col_offset=12), 'append', Load(), lineno=160, col_offset=12), [Name('state', Load(), lineno=160, col_offset=26)], [], None, None, lineno=160, col_offset=12), lineno=160, col_offset=12), Assign([Tuple([Name('lineno', Store(), lineno=161, col_offset=12), Name('line', Store(), lineno=161, col_offset=20)], Store(), lineno=161, col_offset=12)], Tuple([BinOp(Name('lineno', Load(), lineno=161, col_offset=27), Add(), Num(1, lineno=161, col_offset=34), lineno=161, col_offset=27), Call(Attribute(Name('f', Load(), lineno=161, col_offset=37), 'next', Load(), lineno=161, col_offset=37), [], [], None, None, lineno=161, col_offset=37)], Load(), lineno=161, col_offset=27), lineno=161, col_offset=12), Assert(Compare(Name('line', Load(), lineno=162, col_offset=19), [Eq()], [Str('};\n', lineno=162, col_offset=27)], lineno=162, col_offset=19), Tuple([Name('lineno', Load(), lineno=162, col_offset=36), Name('line', Load(), lineno=162, col_offset=44)], Load(), lineno=162, col_offset=36), lineno=162, col_offset=12), Assign([Tuple([Name('lineno', Store(), lineno=163, col_offset=12), Name('line', Store(), lineno=163, col_offset=20)], Store(), lineno=163, col_offset=12)], Tuple([BinOp(Name('lineno', Load(), lineno=163, col_offset=27), Add(), Num(1, lineno=163, col_offset=34), lineno=163, col_offset=27), Call(Attribute(Name('f', Load(), lineno=163, col_offset=37), 'next', Load(), lineno=163, col_offset=37), [], [], None, None, lineno=163, col_offset=37)], Load(), lineno=163, col_offset=27), lineno=163, col_offset=12)], [], lineno=130, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=164, col_offset=8), 'states', Store(), lineno=164, col_offset=8)], Name('states', Load(), lineno=164, col_offset=22), lineno=164, col_offset=8), Assign([Name('dfas', Store(), lineno=167, col_offset=8)], Dict([], [], lineno=167, col_offset=15), lineno=167, col_offset=8), Assign([Name('mo', Store(), lineno=168, col_offset=8)], Call(Attribute(Name('re', Load(), lineno=168, col_offset=13), 'match', Load(), lineno=168, col_offset=13), [Str('static dfa dfas\\[(\\d+)\\] = {$', lineno=168, col_offset=22), Name('line', Load(), lineno=168, col_offset=56)], [], None, None, lineno=168, col_offset=13), lineno=168, col_offset=8), Assert(Name('mo', Load(), lineno=169, col_offset=15), Tuple([Name('lineno', Load(), lineno=169, col_offset=20), Name('line', Load(), lineno=169, col_offset=28)], Load(), lineno=169, col_offset=20), lineno=169, col_offset=8), Assign([Name('ndfas', Store(), lineno=170, col_offset=8)], Call(Name('int', Load(), lineno=170, col_offset=16), [Call(Attribute(Name('mo', Load(), lineno=170, col_offset=20), 'group', Load(), lineno=170, col_offset=20), [Num(1, lineno=170, col_offset=29)], [], None, None, lineno=170, col_offset=20)], [], None, None, lineno=170, col_offset=16), lineno=170, col_offset=8), For(Name('i', Store(), lineno=171, col_offset=12), Call(Name('range', Load(), lineno=171, col_offset=17), [Name('ndfas', Load(), lineno=171, col_offset=23)], [], None, None, lineno=171, col_offset=17), [Assign([Tuple([Name('lineno', Store(), lineno=172, col_offset=12), Name('line', Store(), lineno=172, col_offset=20)], Store(), lineno=172, col_offset=12)], Tuple([BinOp(Name('lineno', Load(), lineno=172, col_offset=27), Add(), Num(1, lineno=172, col_offset=34), lineno=172, col_offset=27), Call(Attribute(Name('f', Load(), lineno=172, col_offset=37), 'next', Load(), lineno=172, col_offset=37), [], [], None, None, lineno=172, col_offset=37)], Load(), lineno=172, col_offset=27), lineno=172, col_offset=12), Assign([Name('mo', Store(), lineno=173, col_offset=12)], Call(Attribute(Name('re', Load(), lineno=173, col_offset=17), 'match', Load(), lineno=173, col_offset=17), [Str('\\s+{(\\d+), "(\\w+)", (\\d+), (\\d+), states_(\\d+),$', lineno=173, col_offset=26), Name('line', Load(), lineno=174, col_offset=26)], [], None, None, lineno=173, col_offset=17), lineno=173, col_offset=12), Assert(Name('mo', Load(), lineno=175, col_offset=19), Tuple([Name('lineno', Load(), lineno=175, col_offset=24), Name('line', Load(), lineno=175, col_offset=32)], Load(), lineno=175, col_offset=24), lineno=175, col_offset=12), Assign([Name('symbol', Store(), lineno=176, col_offset=12)], Call(Attribute(Name('mo', Load(), lineno=176, col_offset=21), 'group', Load(), lineno=176, col_offset=21), [Num(2, lineno=176, col_offset=30)], [], None, None, lineno=176, col_offset=21), lineno=176, col_offset=12), Assign([Tuple([Name('number', Store(), lineno=177, col_offset=12), Name('x', Store(), lineno=177, col_offset=20), Name('y', Store(), lineno=177, col_offset=23), Name('z', Store(), lineno=177, col_offset=26)], Store(), lineno=177, col_offset=12)], Call(Name('map', Load(), lineno=177, col_offset=30), [Name('int', Load(), lineno=177, col_offset=34), Call(Attribute(Name('mo', Load(), lineno=177, col_offset=39), 'group', Load(), lineno=177, col_offset=39), [Num(1, lineno=177, col_offset=48), Num(3, lineno=177, col_offset=51), Num(4, lineno=177, col_offset=54), Num(5, lineno=177, col_offset=57)], [], None, None, lineno=177, col_offset=39)], [], None, None, lineno=177, col_offset=30), lineno=177, col_offset=12), Assert(Compare(Subscript(Attribute(Name('self', Load(), lineno=178, col_offset=19), 'symbol2number', Load(), lineno=178, col_offset=19), Index(Name('symbol', Load(), lineno=178, col_offset=38)), Load(), lineno=178, col_offset=19), [Eq()], [Name('number', Load(), lineno=178, col_offset=49)], lineno=178, col_offset=19), Tuple([Name('lineno', Load(), lineno=178, col_offset=58), Name('line', Load(), lineno=178, col_offset=66)], Load(), lineno=178, col_offset=58), lineno=178, col_offset=12), Assert(Compare(Subscript(Attribute(Name('self', Load(), lineno=179, col_offset=19), 'number2symbol', Load(), lineno=179, col_offset=19), Index(Name('number', Load(), lineno=179, col_offset=38)), Load(), lineno=179, col_offset=19), [Eq()], [Name('symbol', Load(), lineno=179, col_offset=49)], lineno=179, col_offset=19), Tuple([Name('lineno', Load(), lineno=179, col_offset=58), Name('line', Load(), lineno=179, col_offset=66)], Load(), lineno=179, col_offset=58), lineno=179, col_offset=12), Assert(Compare(Name('x', Load(), lineno=180, col_offset=19), [Eq()], [Num(0, lineno=180, col_offset=24)], lineno=180, col_offset=19), Tuple([Name('lineno', Load(), lineno=180, col_offset=28), Name('line', Load(), lineno=180, col_offset=36)], Load(), lineno=180, col_offset=28), lineno=180, col_offset=12), Assign([Name('state', Store(), lineno=181, col_offset=12)], Subscript(Name('states', Load(), lineno=181, col_offset=20), Index(Name('z', Load(), lineno=181, col_offset=27)), Load(), lineno=181, col_offset=20), lineno=181, col_offset=12), Assert(Compare(Name('y', Load(), lineno=182, col_offset=19), [Eq()], [Call(Name('len', Load(), lineno=182, col_offset=24), [Name('state', Load(), lineno=182, col_offset=28)], [], None, None, lineno=182, col_offset=24)], lineno=182, col_offset=19), Tuple([Name('lineno', Load(), lineno=182, col_offset=37), Name('line', Load(), lineno=182, col_offset=45)], Load(), lineno=182, col_offset=37), lineno=182, col_offset=12), Assign([Tuple([Name('lineno', Store(), lineno=183, col_offset=12), Name('line', Store(), lineno=183, col_offset=20)], Store(), lineno=183, col_offset=12)], Tuple([BinOp(Name('lineno', Load(), lineno=183, col_offset=27), Add(), Num(1, lineno=183, col_offset=34), lineno=183, col_offset=27), Call(Attribute(Name('f', Load(), lineno=183, col_offset=37), 'next', Load(), lineno=183, col_offset=37), [], [], None, None, lineno=183, col_offset=37)], Load(), lineno=183, col_offset=27), lineno=183, col_offset=12), Assign([Name('mo', Store(), lineno=184, col_offset=12)], Call(Attribute(Name('re', Load(), lineno=184, col_offset=17), 'match', Load(), lineno=184, col_offset=17), [Str('\\s+("(?:\\\\\\d\\d\\d)*")},$', lineno=184, col_offset=26), Name('line', Load(), lineno=184, col_offset=54)], [], None, None, lineno=184, col_offset=17), lineno=184, col_offset=12), Assert(Name('mo', Load(), lineno=185, col_offset=19), Tuple([Name('lineno', Load(), lineno=185, col_offset=24), Name('line', Load(), lineno=185, col_offset=32)], Load(), lineno=185, col_offset=24), lineno=185, col_offset=12), Assign([Name('first', Store(), lineno=186, col_offset=12)], Dict([], [], lineno=186, col_offset=20), lineno=186, col_offset=12), Assign([Name('rawbitset', Store(), lineno=187, col_offset=12)], Call(Name('eval', Load(), lineno=187, col_offset=24), [Call(Attribute(Name('mo', Load(), lineno=187, col_offset=29), 'group', Load(), lineno=187, col_offset=29), [Num(1, lineno=187, col_offset=38)], [], None, None, lineno=187, col_offset=29)], [], None, None, lineno=187, col_offset=24), lineno=187, col_offset=12), For(Tuple([Name('i', Store(), lineno=188, col_offset=16), Name('c', Store(), lineno=188, col_offset=19)], Store(), lineno=188, col_offset=16), Call(Name('enumerate', Load(), lineno=188, col_offset=24), [Name('rawbitset', Load(), lineno=188, col_offset=34)], [], None, None, lineno=188, col_offset=24), [Assign([Name('byte', Store(), lineno=189, col_offset=16)], Call(Name('ord', Load(), lineno=189, col_offset=23), [Name('c', Load(), lineno=189, col_offset=27)], [], None, None, lineno=189, col_offset=23), lineno=189, col_offset=16), For(Name('j', Store(), lineno=190, col_offset=20), Call(Name('range', Load(), lineno=190, col_offset=25), [Num(8, lineno=190, col_offset=31)], [], None, None, lineno=190, col_offset=25), [If(BinOp(Name('byte', Load(), lineno=191, col_offset=23), BitAnd(), BinOp(Num(1, lineno=191, col_offset=31), LShift(), Name('j', Load(), lineno=191, col_offset=34), lineno=191, col_offset=31), lineno=191, col_offset=23), [Assign([Subscript(Name('first', Load(), lineno=192, col_offset=24), Index(BinOp(BinOp(Name('i', Load(), lineno=192, col_offset=30), Mult(), Num(8, lineno=192, col_offset=32), lineno=192, col_offset=30), Add(), Name('j', Load(), lineno=192, col_offset=36), lineno=192, col_offset=30)), Store(), lineno=192, col_offset=24)], Num(1, lineno=192, col_offset=41), lineno=192, col_offset=24)], [], lineno=191, col_offset=20)], [], lineno=190, col_offset=16)], [], lineno=188, col_offset=12), Assign([Subscript(Name('dfas', Load(), lineno=193, col_offset=12), Index(Name('number', Load(), lineno=193, col_offset=17)), Store(), lineno=193, col_offset=12)], Tuple([Name('state', Load(), lineno=193, col_offset=28), Name('first', Load(), lineno=193, col_offset=35)], Load(), lineno=193, col_offset=28), lineno=193, col_offset=12)], [], lineno=171, col_offset=8), Assign([Tuple([Name('lineno', Store(), lineno=194, col_offset=8), Name('line', Store(), lineno=194, col_offset=16)], Store(), lineno=194, col_offset=8)], Tuple([BinOp(Name('lineno', Load(), lineno=194, col_offset=23), Add(), Num(1, lineno=194, col_offset=30), lineno=194, col_offset=23), Call(Attribute(Name('f', Load(), lineno=194, col_offset=33), 'next', Load(), lineno=194, col_offset=33), [], [], None, None, lineno=194, col_offset=33)], Load(), lineno=194, col_offset=23), lineno=194, col_offset=8), Assert(Compare(Name('line', Load(), lineno=195, col_offset=15), [Eq()], [Str('};\n', lineno=195, col_offset=23)], lineno=195, col_offset=15), Tuple([Name('lineno', Load(), lineno=195, col_offset=32), Name('line', Load(), lineno=195, col_offset=40)], Load(), lineno=195, col_offset=32), lineno=195, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=196, col_offset=8), 'dfas', Store(), lineno=196, col_offset=8)], Name('dfas', Load(), lineno=196, col_offset=20), lineno=196, col_offset=8), Assign([Name('labels', Store(), lineno=199, col_offset=8)], List([], Load(), lineno=199, col_offset=17), lineno=199, col_offset=8), Assign([Tuple([Name('lineno', Store(), lineno=200, col_offset=8), Name('line', Store(), lineno=200, col_offset=16)], Store(), lineno=200, col_offset=8)], Tuple([BinOp(Name('lineno', Load(), lineno=200, col_offset=23), Add(), Num(1, lineno=200, col_offset=30), lineno=200, col_offset=23), Call(Attribute(Name('f', Load(), lineno=200, col_offset=33), 'next', Load(), lineno=200, col_offset=33), [], [], None, None, lineno=200, col_offset=33)], Load(), lineno=200, col_offset=23), lineno=200, col_offset=8), Assign([Name('mo', Store(), lineno=201, col_offset=8)], Call(Attribute(Name('re', Load(), lineno=201, col_offset=13), 'match', Load(), lineno=201, col_offset=13), [Str('static label labels\\[(\\d+)\\] = {$', lineno=201, col_offset=22), Name('line', Load(), lineno=201, col_offset=60)], [], None, None, lineno=201, col_offset=13), lineno=201, col_offset=8), Assert(Name('mo', Load(), lineno=202, col_offset=15), Tuple([Name('lineno', Load(), lineno=202, col_offset=20), Name('line', Load(), lineno=202, col_offset=28)], Load(), lineno=202, col_offset=20), lineno=202, col_offset=8), Assign([Name('nlabels', Store(), lineno=203, col_offset=8)], Call(Name('int', Load(), lineno=203, col_offset=18), [Call(Attribute(Name('mo', Load(), lineno=203, col_offset=22), 'group', Load(), lineno=203, col_offset=22), [Num(1, lineno=203, col_offset=31)], [], None, None, lineno=203, col_offset=22)], [], None, None, lineno=203, col_offset=18), lineno=203, col_offset=8), For(Name('i', Store(), lineno=204, col_offset=12), Call(Name('range', Load(), lineno=204, col_offset=17), [Name('nlabels', Load(), lineno=204, col_offset=23)], [], None, None, lineno=204, col_offset=17), [Assign([Tuple([Name('lineno', Store(), lineno=205, col_offset=12), Name('line', Store(), lineno=205, col_offset=20)], Store(), lineno=205, col_offset=12)], Tuple([BinOp(Name('lineno', Load(), lineno=205, col_offset=27), Add(), Num(1, lineno=205, col_offset=34), lineno=205, col_offset=27), Call(Attribute(Name('f', Load(), lineno=205, col_offset=37), 'next', Load(), lineno=205, col_offset=37), [], [], None, None, lineno=205, col_offset=37)], Load(), lineno=205, col_offset=27), lineno=205, col_offset=12), Assign([Name('mo', Store(), lineno=206, col_offset=12)], Call(Attribute(Name('re', Load(), lineno=206, col_offset=17), 'match', Load(), lineno=206, col_offset=17), [Str('\\s+{(\\d+), (0|"\\w+")},$', lineno=206, col_offset=26), Name('line', Load(), lineno=206, col_offset=54)], [], None, None, lineno=206, col_offset=17), lineno=206, col_offset=12), Assert(Name('mo', Load(), lineno=207, col_offset=19), Tuple([Name('lineno', Load(), lineno=207, col_offset=24), Name('line', Load(), lineno=207, col_offset=32)], Load(), lineno=207, col_offset=24), lineno=207, col_offset=12), Assign([Tuple([Name('x', Store(), lineno=208, col_offset=12), Name('y', Store(), lineno=208, col_offset=15)], Store(), lineno=208, col_offset=12)], Call(Attribute(Name('mo', Load(), lineno=208, col_offset=19), 'groups', Load(), lineno=208, col_offset=19), [], [], None, None, lineno=208, col_offset=19), lineno=208, col_offset=12), Assign([Name('x', Store(), lineno=209, col_offset=12)], Call(Name('int', Load(), lineno=209, col_offset=16), [Name('x', Load(), lineno=209, col_offset=20)], [], None, None, lineno=209, col_offset=16), lineno=209, col_offset=12), If(Compare(Name('y', Load(), lineno=210, col_offset=15), [Eq()], [Str('0', lineno=210, col_offset=20)], lineno=210, col_offset=15), [Assign([Name('y', Store(), lineno=211, col_offset=16)], Name('None', Load(), lineno=211, col_offset=20), lineno=211, col_offset=16)], [Assign([Name('y', Store(), lineno=213, col_offset=16)], Call(Name('eval', Load(), lineno=213, col_offset=20), [Name('y', Load(), lineno=213, col_offset=25)], [], None, None, lineno=213, col_offset=20), lineno=213, col_offset=16)], lineno=210, col_offset=12), Expr(Call(Attribute(Name('labels', Load(), lineno=214, col_offset=12), 'append', Load(), lineno=214, col_offset=12), [Tuple([Name('x', Load(), lineno=214, col_offset=27), Name('y', Load(), lineno=214, col_offset=30)], Load(), lineno=214, col_offset=27)], [], None, None, lineno=214, col_offset=12), lineno=214, col_offset=12)], [], lineno=204, col_offset=8), Assign([Tuple([Name('lineno', Store(), lineno=215, col_offset=8), Name('line', Store(), lineno=215, col_offset=16)], Store(), lineno=215, col_offset=8)], Tuple([BinOp(Name('lineno', Load(), lineno=215, col_offset=23), Add(), Num(1, lineno=215, col_offset=30), lineno=215, col_offset=23), Call(Attribute(Name('f', Load(), lineno=215, col_offset=33), 'next', Load(), lineno=215, col_offset=33), [], [], None, None, lineno=215, col_offset=33)], Load(), lineno=215, col_offset=23), lineno=215, col_offset=8), Assert(Compare(Name('line', Load(), lineno=216, col_offset=15), [Eq()], [Str('};\n', lineno=216, col_offset=23)], lineno=216, col_offset=15), Tuple([Name('lineno', Load(), lineno=216, col_offset=32), Name('line', Load(), lineno=216, col_offset=40)], Load(), lineno=216, col_offset=32), lineno=216, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=217, col_offset=8), 'labels', Store(), lineno=217, col_offset=8)], Name('labels', Load(), lineno=217, col_offset=22), lineno=217, col_offset=8), Assign([Tuple([Name('lineno', Store(), lineno=220, col_offset=8), Name('line', Store(), lineno=220, col_offset=16)], Store(), lineno=220, col_offset=8)], Tuple([BinOp(Name('lineno', Load(), lineno=220, col_offset=23), Add(), Num(1, lineno=220, col_offset=30), lineno=220, col_offset=23), Call(Attribute(Name('f', Load(), lineno=220, col_offset=33), 'next', Load(), lineno=220, col_offset=33), [], [], None, None, lineno=220, col_offset=33)], Load(), lineno=220, col_offset=23), lineno=220, col_offset=8), Assert(Compare(Name('line', Load(), lineno=221, col_offset=15), [Eq()], [Str('grammar _PyParser_Grammar = {\n', lineno=221, col_offset=23)], lineno=221, col_offset=15), Tuple([Name('lineno', Load(), lineno=221, col_offset=59), Name('line', Load(), lineno=221, col_offset=67)], Load(), lineno=221, col_offset=59), lineno=221, col_offset=8), Assign([Tuple([Name('lineno', Store(), lineno=222, col_offset=8), Name('line', Store(), lineno=222, col_offset=16)], Store(), lineno=222, col_offset=8)], Tuple([BinOp(Name('lineno', Load(), lineno=222, col_offset=23), Add(), Num(1, lineno=222, col_offset=30), lineno=222, col_offset=23), Call(Attribute(Name('f', Load(), lineno=222, col_offset=33), 'next', Load(), lineno=222, col_offset=33), [], [], None, None, lineno=222, col_offset=33)], Load(), lineno=222, col_offset=23), lineno=222, col_offset=8), Assign([Name('mo', Store(), lineno=223, col_offset=8)], Call(Attribute(Name('re', Load(), lineno=223, col_offset=13), 'match', Load(), lineno=223, col_offset=13), [Str('\\s+(\\d+),$', lineno=223, col_offset=22), Name('line', Load(), lineno=223, col_offset=37)], [], None, None, lineno=223, col_offset=13), lineno=223, col_offset=8), Assert(Name('mo', Load(), lineno=224, col_offset=15), Tuple([Name('lineno', Load(), lineno=224, col_offset=20), Name('line', Load(), lineno=224, col_offset=28)], Load(), lineno=224, col_offset=20), lineno=224, col_offset=8), Assign([Name('ndfas', Store(), lineno=225, col_offset=8)], Call(Name('int', Load(), lineno=225, col_offset=16), [Call(Attribute(Name('mo', Load(), lineno=225, col_offset=20), 'group', Load(), lineno=225, col_offset=20), [Num(1, lineno=225, col_offset=29)], [], None, None, lineno=225, col_offset=20)], [], None, None, lineno=225, col_offset=16), lineno=225, col_offset=8), Assert(Compare(Name('ndfas', Load(), lineno=226, col_offset=15), [Eq()], [Call(Name('len', Load(), lineno=226, col_offset=24), [Attribute(Name('self', Load(), lineno=226, col_offset=28), 'dfas', Load(), lineno=226, col_offset=28)], [], None, None, lineno=226, col_offset=24)], lineno=226, col_offset=15), None, lineno=226, col_offset=8), Assign([Tuple([Name('lineno', Store(), lineno=227, col_offset=8), Name('line', Store(), lineno=227, col_offset=16)], Store(), lineno=227, col_offset=8)], Tuple([BinOp(Name('lineno', Load(), lineno=227, col_offset=23), Add(), Num(1, lineno=227, col_offset=30), lineno=227, col_offset=23), Call(Attribute(Name('f', Load(), lineno=227, col_offset=33), 'next', Load(), lineno=227, col_offset=33), [], [], None, None, lineno=227, col_offset=33)], Load(), lineno=227, col_offset=23), lineno=227, col_offset=8), Assert(Compare(Name('line', Load(), lineno=228, col_offset=15), [Eq()], [Str('\tdfas,\n', lineno=228, col_offset=23)], lineno=228, col_offset=15), Tuple([Name('lineno', Load(), lineno=228, col_offset=37), Name('line', Load(), lineno=228, col_offset=45)], Load(), lineno=228, col_offset=37), lineno=228, col_offset=8), Assign([Tuple([Name('lineno', Store(), lineno=229, col_offset=8), Name('line', Store(), lineno=229, col_offset=16)], Store(), lineno=229, col_offset=8)], Tuple([BinOp(Name('lineno', Load(), lineno=229, col_offset=23), Add(), Num(1, lineno=229, col_offset=30), lineno=229, col_offset=23), Call(Attribute(Name('f', Load(), lineno=229, col_offset=33), 'next', Load(), lineno=229, col_offset=33), [], [], None, None, lineno=229, col_offset=33)], Load(), lineno=229, col_offset=23), lineno=229, col_offset=8), Assign([Name('mo', Store(), lineno=230, col_offset=8)], Call(Attribute(Name('re', Load(), lineno=230, col_offset=13), 'match', Load(), lineno=230, col_offset=13), [Str('\\s+{(\\d+), labels},$', lineno=230, col_offset=22), Name('line', Load(), lineno=230, col_offset=47)], [], None, None, lineno=230, col_offset=13), lineno=230, col_offset=8), Assert(Name('mo', Load(), lineno=231, col_offset=15), Tuple([Name('lineno', Load(), lineno=231, col_offset=20), Name('line', Load(), lineno=231, col_offset=28)], Load(), lineno=231, col_offset=20), lineno=231, col_offset=8), Assign([Name('nlabels', Store(), lineno=232, col_offset=8)], Call(Name('int', Load(), lineno=232, col_offset=18), [Call(Attribute(Name('mo', Load(), lineno=232, col_offset=22), 'group', Load(), lineno=232, col_offset=22), [Num(1, lineno=232, col_offset=31)], [], None, None, lineno=232, col_offset=22)], [], None, None, lineno=232, col_offset=18), lineno=232, col_offset=8), Assert(Compare(Name('nlabels', Load(), lineno=233, col_offset=15), [Eq()], [Call(Name('len', Load(), lineno=233, col_offset=26), [Attribute(Name('self', Load(), lineno=233, col_offset=30), 'labels', Load(), lineno=233, col_offset=30)], [], None, None, lineno=233, col_offset=26)], lineno=233, col_offset=15), Tuple([Name('lineno', Load(), lineno=233, col_offset=45), Name('line', Load(), lineno=233, col_offset=53)], Load(), lineno=233, col_offset=45), lineno=233, col_offset=8), Assign([Tuple([Name('lineno', Store(), lineno=234, col_offset=8), Name('line', Store(), lineno=234, col_offset=16)], Store(), lineno=234, col_offset=8)], Tuple([BinOp(Name('lineno', Load(), lineno=234, col_offset=23), Add(), Num(1, lineno=234, col_offset=30), lineno=234, col_offset=23), Call(Attribute(Name('f', Load(), lineno=234, col_offset=33), 'next', Load(), lineno=234, col_offset=33), [], [], None, None, lineno=234, col_offset=33)], Load(), lineno=234, col_offset=23), lineno=234, col_offset=8), Assign([Name('mo', Store(), lineno=235, col_offset=8)], Call(Attribute(Name('re', Load(), lineno=235, col_offset=13), 'match', Load(), lineno=235, col_offset=13), [Str('\\s+(\\d+)$', lineno=235, col_offset=22), Name('line', Load(), lineno=235, col_offset=36)], [], None, None, lineno=235, col_offset=13), lineno=235, col_offset=8), Assert(Name('mo', Load(), lineno=236, col_offset=15), Tuple([Name('lineno', Load(), lineno=236, col_offset=20), Name('line', Load(), lineno=236, col_offset=28)], Load(), lineno=236, col_offset=20), lineno=236, col_offset=8), Assign([Name('start', Store(), lineno=237, col_offset=8)], Call(Name('int', Load(), lineno=237, col_offset=16), [Call(Attribute(Name('mo', Load(), lineno=237, col_offset=20), 'group', Load(), lineno=237, col_offset=20), [Num(1, lineno=237, col_offset=29)], [], None, None, lineno=237, col_offset=20)], [], None, None, lineno=237, col_offset=16), lineno=237, col_offset=8), Assert(Compare(Name('start', Load(), lineno=238, col_offset=15), [In()], [Attribute(Name('self', Load(), lineno=238, col_offset=24), 'number2symbol', Load(), lineno=238, col_offset=24)], lineno=238, col_offset=15), Tuple([Name('lineno', Load(), lineno=238, col_offset=45), Name('line', Load(), lineno=238, col_offset=53)], Load(), lineno=238, col_offset=45), lineno=238, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=239, col_offset=8), 'start', Store(), lineno=239, col_offset=8)], Name('start', Load(), lineno=239, col_offset=21), lineno=239, col_offset=8), Assign([Tuple([Name('lineno', Store(), lineno=240, col_offset=8), Name('line', Store(), lineno=240, col_offset=16)], Store(), lineno=240, col_offset=8)], Tuple([BinOp(Name('lineno', Load(), lineno=240, col_offset=23), Add(), Num(1, lineno=240, col_offset=30), lineno=240, col_offset=23), Call(Attribute(Name('f', Load(), lineno=240, col_offset=33), 'next', Load(), lineno=240, col_offset=33), [], [], None, None, lineno=240, col_offset=33)], Load(), lineno=240, col_offset=23), lineno=240, col_offset=8), Assert(Compare(Name('line', Load(), lineno=241, col_offset=15), [Eq()], [Str('};\n', lineno=241, col_offset=23)], lineno=241, col_offset=15), Tuple([Name('lineno', Load(), lineno=241, col_offset=32), Name('line', Load(), lineno=241, col_offset=40)], Load(), lineno=241, col_offset=32), lineno=241, col_offset=8), TryExcept([Assign([Tuple([Name('lineno', Store(), lineno=243, col_offset=12), Name('line', Store(), lineno=243, col_offset=20)], Store(), lineno=243, col_offset=12)], Tuple([BinOp(Name('lineno', Load(), lineno=243, col_offset=27), Add(), Num(1, lineno=243, col_offset=34), lineno=243, col_offset=27), Call(Attribute(Name('f', Load(), lineno=243, col_offset=37), 'next', Load(), lineno=243, col_offset=37), [], [], None, None, lineno=243, col_offset=37)], Load(), lineno=243, col_offset=27), lineno=243, col_offset=12)], [ExceptHandler(Name('StopIteration', Load(), lineno=244, col_offset=15), None, [Pass( lineno=245, col_offset=12)], lineno=244, col_offset=8)], [Assert(Num(0, lineno=247, col_offset=19), Tuple([Name('lineno', Load(), lineno=247, col_offset=23), Name('line', Load(), lineno=247, col_offset=31)], Load(), lineno=247, col_offset=23), lineno=247, col_offset=12)], lineno=242, col_offset=8)], [], lineno=84, col_offset=4), FunctionDef('finish_off', arguments([Name('self', Param(), lineno=249, col_offset=19)], None, None, []), [Expr(Str('Create additional useful structures.  (Internal).', lineno=250, col_offset=8), lineno=250, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=251, col_offset=8), 'keywords', Store(), lineno=251, col_offset=8)], Dict([], [], lineno=251, col_offset=24), lineno=251, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=252, col_offset=8), 'tokens', Store(), lineno=252, col_offset=8)], Dict([], [], lineno=252, col_offset=22), lineno=252, col_offset=8), For(Tuple([Name('ilabel', Store(), lineno=253, col_offset=12), Tuple([Name('type', Store(), lineno=253, col_offset=21), Name('value', Store(), lineno=253, col_offset=27)], Store(), lineno=253, col_offset=21)], Store(), lineno=253, col_offset=12), Call(Name('enumerate', Load(), lineno=253, col_offset=37), [Attribute(Name('self', Load(), lineno=253, col_offset=47), 'labels', Load(), lineno=253, col_offset=47)], [], None, None, lineno=253, col_offset=37), [If(BoolOp(And(), [Compare(Name('type', Load(), lineno=254, col_offset=15), [Eq()], [Attribute(Name('token', Load(), lineno=254, col_offset=23), 'NAME', Load(), lineno=254, col_offset=23)], lineno=254, col_offset=15), Compare(Name('value', Load(), lineno=254, col_offset=38), [IsNot()], [Name('None', Load(), lineno=254, col_offset=51)], lineno=254, col_offset=38)], lineno=254, col_offset=15), [Assign([Subscript(Attribute(Name('self', Load(), lineno=255, col_offset=16), 'keywords', Load(), lineno=255, col_offset=16), Index(Name('value', Load(), lineno=255, col_offset=30)), Store(), lineno=255, col_offset=16)], Name('ilabel', Load(), lineno=255, col_offset=39), lineno=255, col_offset=16)], [If(Compare(Name('value', Load(), lineno=256, col_offset=17), [Is()], [Name('None', Load(), lineno=256, col_offset=26)], lineno=256, col_offset=17), [Assign([Subscript(Attribute(Name('self', Load(), lineno=257, col_offset=16), 'tokens', Load(), lineno=257, col_offset=16), Index(Name('type', Load(), lineno=257, col_offset=28)), Store(), lineno=257, col_offset=16)], Name('ilabel', Load(), lineno=257, col_offset=36), lineno=257, col_offset=16)], [], lineno=256, col_offset=17)], lineno=254, col_offset=12)], [], lineno=253, col_offset=8)], [], lineno=249, col_offset=4)], [], lineno=36, col_offset=0)])
