Module([Expr(Str('subprocess - Subprocesses with accessible I/O streams\n\nThis module allows you to spawn processes, connect to their\ninput/output/error pipes, and obtain their return codes.  This module\nintends to replace several other, older modules and functions, like:\n\nos.system\nos.spawn*\nos.popen*\npopen2.*\ncommands.*\n\nInformation about how the subprocess module can be used to replace these\nmodules and functions can be found below.\n\n\n\nUsing the subprocess module\n===========================\nThis module defines one class called Popen:\n\nclass Popen(args, bufsize=0, executable=None,\n            stdin=None, stdout=None, stderr=None,\n            preexec_fn=None, close_fds=False, shell=False,\n            cwd=None, env=None, universal_newlines=False,\n            startupinfo=None, creationflags=0):\n\n\nArguments are:\n\nargs should be a string, or a sequence of program arguments.  The\nprogram to execute is normally the first item in the args sequence or\nstring, but can be explicitly set by using the executable argument.\n\nOn UNIX, with shell=False (default): In this case, the Popen class\nuses os.execvp() to execute the child program.  args should normally\nbe a sequence.  A string will be treated as a sequence with the string\nas the only item (the program to execute).\n\nOn UNIX, with shell=True: If args is a string, it specifies the\ncommand string to execute through the shell.  If args is a sequence,\nthe first item specifies the command string, and any additional items\nwill be treated as additional shell arguments.\n\nOn Windows: the Popen class uses CreateProcess() to execute the child\nprogram, which operates on strings.  If args is a sequence, it will be\nconverted to a string using the list2cmdline method.  Please note that\nnot all MS Windows applications interpret the command line the same\nway: The list2cmdline is designed for applications using the same\nrules as the MS C runtime.\n\nbufsize, if given, has the same meaning as the corresponding argument\nto the built-in open() function: 0 means unbuffered, 1 means line\nbuffered, any other positive value means use a buffer of\n(approximately) that size.  A negative bufsize means to use the system\ndefault, which usually means fully buffered.  The default value for\nbufsize is 0 (unbuffered).\n\nstdin, stdout and stderr specify the executed programs\' standard\ninput, standard output and standard error file handles, respectively.\nValid values are PIPE, an existing file descriptor (a positive\ninteger), an existing file object, and None.  PIPE indicates that a\nnew pipe to the child should be created.  With None, no redirection\nwill occur; the child\'s file handles will be inherited from the\nparent.  Additionally, stderr can be STDOUT, which indicates that the\nstderr data from the applications should be captured into the same\nfile handle as for stdout.\n\nIf preexec_fn is set to a callable object, this object will be called\nin the child process just before the child is executed.\n\nIf close_fds is true, all file descriptors except 0, 1 and 2 will be\nclosed before the child process is executed.\n\nif shell is true, the specified command will be executed through the\nshell.\n\nIf cwd is not None, the current directory will be changed to cwd\nbefore the child is executed.\n\nIf env is not None, it defines the environment variables for the new\nprocess.\n\nIf universal_newlines is true, the file objects stdout and stderr are\nopened as a text files, but lines may be terminated by any of \'\\n\',\nthe Unix end-of-line convention, \'\\r\', the Macintosh convention or\n\'\\r\\n\', the Windows convention.  All of these external representations\nare seen as \'\\n\' by the Python program.  Note: This feature is only\navailable if Python is built with universal newline support (the\ndefault).  Also, the newlines attribute of the file objects stdout,\nstdin and stderr are not updated by the communicate() method.\n\nThe startupinfo and creationflags, if given, will be passed to the\nunderlying CreateProcess() function.  They can specify things such as\nappearance of the main window and priority for the new process.\n(Windows only)\n\n\nThis module also defines some shortcut functions:\n\ncall(*popenargs, **kwargs):\n    Run command with arguments.  Wait for command to complete, then\n    return the returncode attribute.\n\n    The arguments are the same as for the Popen constructor.  Example:\n\n    retcode = call(["ls", "-l"])\n\ncheck_call(*popenargs, **kwargs):\n    Run command with arguments.  Wait for command to complete.  If the\n    exit code was zero then return, otherwise raise\n    CalledProcessError.  The CalledProcessError object will have the\n    return code in the returncode attribute.\n\n    The arguments are the same as for the Popen constructor.  Example:\n\n    check_call(["ls", "-l"])\n\ncheck_output(*popenargs, **kwargs):\n    Run command with arguments and return its output as a byte string.\n\n    If the exit code was non-zero it raises a CalledProcessError.  The\n    CalledProcessError object will have the return code in the returncode\n    attribute and output in the output attribute.\n\n    The arguments are the same as for the Popen constructor.  Example:\n\n    output = check_output(["ls", "-l", "/dev/null"])\n\n\nExceptions\n----------\nExceptions raised in the child process, before the new program has\nstarted to execute, will be re-raised in the parent.  Additionally,\nthe exception object will have one extra attribute called\n\'child_traceback\', which is a string containing traceback information\nfrom the childs point of view.\n\nThe most common exception raised is OSError.  This occurs, for\nexample, when trying to execute a non-existent file.  Applications\nshould prepare for OSErrors.\n\nA ValueError will be raised if Popen is called with invalid arguments.\n\ncheck_call() and check_output() will raise CalledProcessError, if the\ncalled process returns a non-zero return code.\n\n\nSecurity\n--------\nUnlike some other popen functions, this implementation will never call\n/bin/sh implicitly.  This means that all characters, including shell\nmetacharacters, can safely be passed to child processes.\n\n\nPopen objects\n=============\nInstances of the Popen class have the following methods:\n\npoll()\n    Check if child process has terminated.  Returns returncode\n    attribute.\n\nwait()\n    Wait for child process to terminate.  Returns returncode attribute.\n\ncommunicate(input=None)\n    Interact with process: Send data to stdin.  Read data from stdout\n    and stderr, until end-of-file is reached.  Wait for process to\n    terminate.  The optional input argument should be a string to be\n    sent to the child process, or None, if no data should be sent to\n    the child.\n\n    communicate() returns a tuple (stdout, stderr).\n\n    Note: The data read is buffered in memory, so do not use this\n    method if the data size is large or unlimited.\n\nThe following attributes are also available:\n\nstdin\n    If the stdin argument is PIPE, this attribute is a file object\n    that provides input to the child process.  Otherwise, it is None.\n\nstdout\n    If the stdout argument is PIPE, this attribute is a file object\n    that provides output from the child process.  Otherwise, it is\n    None.\n\nstderr\n    If the stderr argument is PIPE, this attribute is file object that\n    provides error output from the child process.  Otherwise, it is\n    None.\n\npid\n    The process ID of the child process.\n\nreturncode\n    The child return code.  A None value indicates that the process\n    hasn\'t terminated yet.  A negative value -N indicates that the\n    child was terminated by signal N (UNIX only).\n\n\nReplacing older functions with the subprocess module\n====================================================\nIn this section, "a ==> b" means that b can be used as a replacement\nfor a.\n\nNote: All functions in this section fail (more or less) silently if\nthe executed program cannot be found; this module raises an OSError\nexception.\n\nIn the following examples, we assume that the subprocess module is\nimported with "from subprocess import *".\n\n\nReplacing /bin/sh shell backquote\n---------------------------------\noutput=`mycmd myarg`\n==>\noutput = Popen(["mycmd", "myarg"], stdout=PIPE).communicate()[0]\n\n\nReplacing shell pipe line\n-------------------------\noutput=`dmesg | grep hda`\n==>\np1 = Popen(["dmesg"], stdout=PIPE)\np2 = Popen(["grep", "hda"], stdin=p1.stdout, stdout=PIPE)\noutput = p2.communicate()[0]\n\n\nReplacing os.system()\n---------------------\nsts = os.system("mycmd" + " myarg")\n==>\np = Popen("mycmd" + " myarg", shell=True)\npid, sts = os.waitpid(p.pid, 0)\n\nNote:\n\n* Calling the program through the shell is usually not required.\n\n* It\'s easier to look at the returncode attribute than the\n  exitstatus.\n\nA more real-world example would look like this:\n\ntry:\n    retcode = call("mycmd" + " myarg", shell=True)\n    if retcode < 0:\n        print >>sys.stderr, "Child was terminated by signal", -retcode\n    else:\n        print >>sys.stderr, "Child returned", retcode\nexcept OSError, e:\n    print >>sys.stderr, "Execution failed:", e\n\n\nReplacing os.spawn*\n-------------------\nP_NOWAIT example:\n\npid = os.spawnlp(os.P_NOWAIT, "/bin/mycmd", "mycmd", "myarg")\n==>\npid = Popen(["/bin/mycmd", "myarg"]).pid\n\n\nP_WAIT example:\n\nretcode = os.spawnlp(os.P_WAIT, "/bin/mycmd", "mycmd", "myarg")\n==>\nretcode = call(["/bin/mycmd", "myarg"])\n\n\nVector example:\n\nos.spawnvp(os.P_NOWAIT, path, args)\n==>\nPopen([path] + args[1:])\n\n\nEnvironment example:\n\nos.spawnlpe(os.P_NOWAIT, "/bin/mycmd", "mycmd", "myarg", env)\n==>\nPopen(["/bin/mycmd", "myarg"], env={"PATH": "/usr/bin"})\n\n\nReplacing os.popen*\n-------------------\npipe = os.popen("cmd", mode=\'r\', bufsize)\n==>\npipe = Popen("cmd", shell=True, bufsize=bufsize, stdout=PIPE).stdout\n\npipe = os.popen("cmd", mode=\'w\', bufsize)\n==>\npipe = Popen("cmd", shell=True, bufsize=bufsize, stdin=PIPE).stdin\n\n\n(child_stdin, child_stdout) = os.popen2("cmd", mode, bufsize)\n==>\np = Popen("cmd", shell=True, bufsize=bufsize,\n          stdin=PIPE, stdout=PIPE, close_fds=True)\n(child_stdin, child_stdout) = (p.stdin, p.stdout)\n\n\n(child_stdin,\n child_stdout,\n child_stderr) = os.popen3("cmd", mode, bufsize)\n==>\np = Popen("cmd", shell=True, bufsize=bufsize,\n          stdin=PIPE, stdout=PIPE, stderr=PIPE, close_fds=True)\n(child_stdin,\n child_stdout,\n child_stderr) = (p.stdin, p.stdout, p.stderr)\n\n\n(child_stdin, child_stdout_and_stderr) = os.popen4("cmd", mode,\n                                                   bufsize)\n==>\np = Popen("cmd", shell=True, bufsize=bufsize,\n          stdin=PIPE, stdout=PIPE, stderr=STDOUT, close_fds=True)\n(child_stdin, child_stdout_and_stderr) = (p.stdin, p.stdout)\n\nOn Unix, os.popen2, os.popen3 and os.popen4 also accept a sequence as\nthe command to execute, in which case arguments will be passed\ndirectly to the program without shell intervention.  This usage can be\nreplaced as follows:\n\n(child_stdin, child_stdout) = os.popen2(["/bin/ls", "-l"], mode,\n                                        bufsize)\n==>\np = Popen(["/bin/ls", "-l"], bufsize=bufsize, stdin=PIPE, stdout=PIPE)\n(child_stdin, child_stdout) = (p.stdin, p.stdout)\n\nReturn code handling translates as follows:\n\npipe = os.popen("cmd", \'w\')\n...\nrc = pipe.close()\nif rc is not None and rc % 256:\n    print "There were some errors"\n==>\nprocess = Popen("cmd", \'w\', shell=True, stdin=PIPE)\n...\nprocess.stdin.close()\nif process.wait() != 0:\n    print "There were some errors"\n\n\nReplacing popen2.*\n------------------\n(child_stdout, child_stdin) = popen2.popen2("somestring", bufsize, mode)\n==>\np = Popen(["somestring"], shell=True, bufsize=bufsize\n          stdin=PIPE, stdout=PIPE, close_fds=True)\n(child_stdout, child_stdin) = (p.stdout, p.stdin)\n\nOn Unix, popen2 also accepts a sequence as the command to execute, in\nwhich case arguments will be passed directly to the program without\nshell intervention.  This usage can be replaced as follows:\n\n(child_stdout, child_stdin) = popen2.popen2(["mycmd", "myarg"], bufsize,\n                                            mode)\n==>\np = Popen(["mycmd", "myarg"], bufsize=bufsize,\n          stdin=PIPE, stdout=PIPE, close_fds=True)\n(child_stdout, child_stdin) = (p.stdout, p.stdin)\n\nThe popen2.Popen3 and popen2.Popen4 basically works as subprocess.Popen,\nexcept that:\n\n* subprocess.Popen raises an exception if the execution fails\n* the capturestderr argument is replaced with the stderr argument.\n* stdin=PIPE and stdout=PIPE must be specified.\n* popen2 closes all filedescriptors by default, but you have to specify\n  close_fds=True with subprocess.Popen.\n', lineno=389, col_offset=-1), lineno=389, col_offset=-1), Import([alias('sys', None)], lineno=391, col_offset=0), Assign([Name('mswindows', Store(), lineno=392, col_offset=0)], Compare(Attribute(Name('sys', Load(), lineno=392, col_offset=13), 'platform', Load(), lineno=392, col_offset=13), [Eq()], [Str('win32', lineno=392, col_offset=29)], lineno=392, col_offset=13), lineno=392, col_offset=0), Import([alias('os', None)], lineno=394, col_offset=0), Import([alias('types', None)], lineno=395, col_offset=0), Import([alias('traceback', None)], lineno=396, col_offset=0), Import([alias('gc', None)], lineno=397, col_offset=0), Import([alias('signal', None)], lineno=398, col_offset=0), ClassDef('CalledProcessError', [Name('Exception', Load(), lineno=401, col_offset=25)], [Expr(Str('This exception is raised when a process run by check_call() or\n    check_output() returns a non-zero exit status.\n    The exit status will be stored in the returncode attribute;\n    check_output() will also store the output in the output attribute.\n    ', lineno=406, col_offset=-1), lineno=406, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=407, col_offset=17), Name('returncode', Param(), lineno=407, col_offset=23), Name('cmd', Param(), lineno=407, col_offset=35), Name('output', Param(), lineno=407, col_offset=40)], None, None, [Name('None', Load(), lineno=407, col_offset=47)]), [Assign([Attribute(Name('self', Load(), lineno=408, col_offset=8), 'returncode', Store(), lineno=408, col_offset=8)], Name('returncode', Load(), lineno=408, col_offset=26), lineno=408, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=409, col_offset=8), 'cmd', Store(), lineno=409, col_offset=8)], Name('cmd', Load(), lineno=409, col_offset=19), lineno=409, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=410, col_offset=8), 'output', Store(), lineno=410, col_offset=8)], Name('output', Load(), lineno=410, col_offset=22), lineno=410, col_offset=8)], [], lineno=407, col_offset=4), FunctionDef('__str__', arguments([Name('self', Param(), lineno=411, col_offset=16)], None, None, []), [Return(BinOp(Str("Command '%s' returned non-zero exit status %d", lineno=412, col_offset=15), Mod(), Tuple([Attribute(Name('self', Load(), lineno=412, col_offset=66), 'cmd', Load(), lineno=412, col_offset=66), Attribute(Name('self', Load(), lineno=412, col_offset=76), 'returncode', Load(), lineno=412, col_offset=76)], Load(), lineno=412, col_offset=66), lineno=412, col_offset=15), lineno=412, col_offset=8)], [], lineno=411, col_offset=4)], [], lineno=401, col_offset=0), If(Name('mswindows', Load(), lineno=415, col_offset=3), [Import([alias('threading', None)], lineno=416, col_offset=4), Import([alias('msvcrt', None)], lineno=417, col_offset=4), Import([alias('_subprocess', None)], lineno=418, col_offset=4), ClassDef('STARTUPINFO', [], [Assign([Name('dwFlags', Store(), lineno=420, col_offset=8)], Num(0, lineno=420, col_offset=18), lineno=420, col_offset=8), Assign([Name('hStdInput', Store(), lineno=421, col_offset=8)], Name('None', Load(), lineno=421, col_offset=20), lineno=421, col_offset=8), Assign([Name('hStdOutput', Store(), lineno=422, col_offset=8)], Name('None', Load(), lineno=422, col_offset=21), lineno=422, col_offset=8), Assign([Name('hStdError', Store(), lineno=423, col_offset=8)], Name('None', Load(), lineno=423, col_offset=20), lineno=423, col_offset=8), Assign([Name('wShowWindow', Store(), lineno=424, col_offset=8)], Num(0, lineno=424, col_offset=22), lineno=424, col_offset=8)], [], lineno=419, col_offset=4), ClassDef('pywintypes', [], [Assign([Name('error', Store(), lineno=426, col_offset=8)], Name('IOError', Load(), lineno=426, col_offset=16), lineno=426, col_offset=8)], [], lineno=425, col_offset=4)], [Import([alias('select', None)], lineno=428, col_offset=4), Assign([Name('_has_poll', Store(), lineno=429, col_offset=4)], Call(Name('hasattr', Load(), lineno=429, col_offset=16), [Name('select', Load(), lineno=429, col_offset=24), Str('poll', lineno=429, col_offset=32)], [], None, None, lineno=429, col_offset=16), lineno=429, col_offset=4), Import([alias('errno', None)], lineno=430, col_offset=4), Import([alias('fcntl', None)], lineno=431, col_offset=4), Import([alias('pickle', None)], lineno=432, col_offset=4), Assign([Name('_PIPE_BUF', Store(), lineno=437, col_offset=4)], Call(Name('getattr', Load(), lineno=437, col_offset=16), [Name('select', Load(), lineno=437, col_offset=24), Str('PIPE_BUF', lineno=437, col_offset=32), Num(512, lineno=437, col_offset=44)], [], None, None, lineno=437, col_offset=16), lineno=437, col_offset=4)], lineno=415, col_offset=0), Assign([Name('__all__', Store(), lineno=440, col_offset=0)], List([Str('Popen', lineno=440, col_offset=11), Str('PIPE', lineno=440, col_offset=20), Str('STDOUT', lineno=440, col_offset=28), Str('call', lineno=440, col_offset=38), Str('check_call', lineno=440, col_offset=46), Str('check_output', lineno=441, col_offset=11), Str('CalledProcessError', lineno=441, col_offset=27)], Load(), lineno=440, col_offset=10), lineno=440, col_offset=0), If(Name('mswindows', Load(), lineno=443, col_offset=3), [ImportFrom('_subprocess', [alias('CREATE_NEW_CONSOLE', None), alias('CREATE_NEW_PROCESS_GROUP', None)], 0, lineno=444, col_offset=4), Expr(Call(Attribute(Name('__all__', Load(), lineno=445, col_offset=4), 'extend', Load(), lineno=445, col_offset=4), [List([Str('CREATE_NEW_CONSOLE', lineno=445, col_offset=20), Str('CREATE_NEW_PROCESS_GROUP', lineno=445, col_offset=42)], Load(), lineno=445, col_offset=19)], [], None, None, lineno=445, col_offset=4), lineno=445, col_offset=4)], [], lineno=443, col_offset=0), TryExcept([Assign([Name('MAXFD', Store(), lineno=447, col_offset=4)], Call(Attribute(Name('os', Load(), lineno=447, col_offset=12), 'sysconf', Load(), lineno=447, col_offset=12), [Str('SC_OPEN_MAX', lineno=447, col_offset=23)], [], None, None, lineno=447, col_offset=12), lineno=447, col_offset=4)], [ExceptHandler(None, None, [Assign([Name('MAXFD', Store(), lineno=449, col_offset=4)], Num(256, lineno=449, col_offset=12), lineno=449, col_offset=4)], lineno=448, col_offset=0)], [], lineno=446, col_offset=0), Assign([Name('_active', Store(), lineno=451, col_offset=0)], List([], Load(), lineno=451, col_offset=10), lineno=451, col_offset=0), FunctionDef('_cleanup', arguments([], None, None, []), [For(Name('inst', Store(), lineno=454, col_offset=8), Subscript(Name('_active', Load(), lineno=454, col_offset=16), Slice(None, None, None), Load(), lineno=454, col_offset=16), [Assign([Name('res', Store(), lineno=455, col_offset=8)], Call(Attribute(Name('inst', Load(), lineno=455, col_offset=14), '_internal_poll', Load(), lineno=455, col_offset=14), [], [keyword('_deadstate', Attribute(Name('sys', Load(), lineno=455, col_offset=45), 'maxint', Load(), lineno=455, col_offset=45))], None, None, lineno=455, col_offset=14), lineno=455, col_offset=8), If(BoolOp(And(), [Compare(Name('res', Load(), lineno=456, col_offset=11), [IsNot()], [Name('None', Load(), lineno=456, col_offset=22)], lineno=456, col_offset=11), Compare(Name('res', Load(), lineno=456, col_offset=31), [GtE()], [Num(0, lineno=456, col_offset=38)], lineno=456, col_offset=31)], lineno=456, col_offset=11), [TryExcept([Expr(Call(Attribute(Name('_active', Load(), lineno=458, col_offset=16), 'remove', Load(), lineno=458, col_offset=16), [Name('inst', Load(), lineno=458, col_offset=31)], [], None, None, lineno=458, col_offset=16), lineno=458, col_offset=16)], [ExceptHandler(Name('ValueError', Load(), lineno=459, col_offset=19), None, [Pass( lineno=462, col_offset=16)], lineno=459, col_offset=12)], [], lineno=457, col_offset=12)], [], lineno=456, col_offset=8)], [], lineno=454, col_offset=4)], [], lineno=453, col_offset=0), Assign([Name('PIPE', Store(), lineno=464, col_offset=0)], Num(-1, lineno=464, col_offset=8), lineno=464, col_offset=0), Assign([Name('STDOUT', Store(), lineno=465, col_offset=0)], Num(-2, lineno=465, col_offset=10), lineno=465, col_offset=0), FunctionDef('_eintr_retry_call', arguments([Name('func', Param(), lineno=468, col_offset=22)], 'args', None, []), [While(Name('True', Load(), lineno=469, col_offset=10), [TryExcept([Return(Call(Name('func', Load(), lineno=471, col_offset=19), [], [], Name('args', Load(), lineno=471, col_offset=25), None, lineno=471, col_offset=19), lineno=471, col_offset=12)], [ExceptHandler(Name('OSError', Load(), lineno=472, col_offset=15), Name('e', Store(), lineno=472, col_offset=24), [If(Compare(Attribute(Name('e', Load(), lineno=473, col_offset=15), 'errno', Load(), lineno=473, col_offset=15), [Eq()], [Attribute(Name('errno', Load(), lineno=473, col_offset=26), 'EINTR', Load(), lineno=473, col_offset=26)], lineno=473, col_offset=15), [Continue( lineno=474, col_offset=16)], [], lineno=473, col_offset=12), Raise(None, None, None, lineno=475, col_offset=12)], lineno=472, col_offset=8)], [], lineno=470, col_offset=8)], [], lineno=469, col_offset=4)], [], lineno=468, col_offset=0), FunctionDef('call', arguments([], 'popenargs', 'kwargs', []), [Expr(Str('Run command with arguments.  Wait for command to complete, then\n    return the returncode attribute.\n\n    The arguments are the same as for the Popen constructor.  Example:\n\n    retcode = call(["ls", "-l"])\n    ', lineno=485, col_offset=-1), lineno=485, col_offset=-1), Return(Call(Attribute(Call(Name('Popen', Load(), lineno=486, col_offset=11), [], [], Name('popenargs', Load(), lineno=486, col_offset=18), Name('kwargs', Load(), lineno=486, col_offset=31), lineno=486, col_offset=11), 'wait', Load(), lineno=486, col_offset=11), [], [], None, None, lineno=486, col_offset=11), lineno=486, col_offset=4)], [], lineno=478, col_offset=0), FunctionDef('check_call', arguments([], 'popenargs', 'kwargs', []), [Expr(Str('Run command with arguments.  Wait for command to complete.  If\n    the exit code was zero then return, otherwise raise\n    CalledProcessError.  The CalledProcessError object will have the\n    return code in the returncode attribute.\n\n    The arguments are the same as for the Popen constructor.  Example:\n\n    check_call(["ls", "-l"])\n    ', lineno=498, col_offset=-1), lineno=498, col_offset=-1), Assign([Name('retcode', Store(), lineno=499, col_offset=4)], Call(Name('call', Load(), lineno=499, col_offset=14), [], [], Name('popenargs', Load(), lineno=499, col_offset=20), Name('kwargs', Load(), lineno=499, col_offset=33), lineno=499, col_offset=14), lineno=499, col_offset=4), If(Name('retcode', Load(), lineno=500, col_offset=7), [Assign([Name('cmd', Store(), lineno=501, col_offset=8)], Call(Attribute(Name('kwargs', Load(), lineno=501, col_offset=14), 'get', Load(), lineno=501, col_offset=14), [Str('args', lineno=501, col_offset=25)], [], None, None, lineno=501, col_offset=14), lineno=501, col_offset=8), If(Compare(Name('cmd', Load(), lineno=502, col_offset=11), [Is()], [Name('None', Load(), lineno=502, col_offset=18)], lineno=502, col_offset=11), [Assign([Name('cmd', Store(), lineno=503, col_offset=12)], Subscript(Name('popenargs', Load(), lineno=503, col_offset=18), Index(Num(0, lineno=503, col_offset=28)), Load(), lineno=503, col_offset=18), lineno=503, col_offset=12)], [], lineno=502, col_offset=8), Raise(Call(Name('CalledProcessError', Load(), lineno=504, col_offset=14), [Name('retcode', Load(), lineno=504, col_offset=33), Name('cmd', Load(), lineno=504, col_offset=42)], [], None, None, lineno=504, col_offset=14), None, None, lineno=504, col_offset=8)], [], lineno=500, col_offset=4), Return(Num(0, lineno=505, col_offset=11), lineno=505, col_offset=4)], [], lineno=489, col_offset=0), FunctionDef('check_output', arguments([], 'popenargs', 'kwargs', []), [Expr(Str('Run command with arguments and return its output as a byte string.\n\n    If the exit code was non-zero it raises a CalledProcessError.  The\n    CalledProcessError object will have the return code in the returncode\n    attribute and output in the output attribute.\n\n    The arguments are the same as for the Popen constructor.  Example:\n\n    >>> check_output(["ls", "-l", "/dev/null"])\n    \'crw-rw-rw- 1 root root 1, 3 Oct 18  2007 /dev/null\\n\'\n\n    The stdout argument is not allowed as it is used internally.\n    To capture standard error in the result, use stderr=STDOUT.\n\n    >>> check_output(["/bin/sh", "-c",\n    ...               "ls -l non_existent_file ; exit 0"],\n    ...              stderr=STDOUT)\n    \'ls: non_existent_file: No such file or directory\\n\'\n    ', lineno=527, col_offset=-1), lineno=527, col_offset=-1), If(Compare(Str('stdout', lineno=528, col_offset=7), [In()], [Name('kwargs', Load(), lineno=528, col_offset=19)], lineno=528, col_offset=7), [Raise(Call(Name('ValueError', Load(), lineno=529, col_offset=14), [Str('stdout argument not allowed, it will be overridden.', lineno=529, col_offset=25)], [], None, None, lineno=529, col_offset=14), None, None, lineno=529, col_offset=8)], [], lineno=528, col_offset=4), Assign([Name('process', Store(), lineno=530, col_offset=4)], Call(Name('Popen', Load(), lineno=530, col_offset=14), [], [keyword('stdout', Name('PIPE', Load(), lineno=530, col_offset=27))], Name('popenargs', Load(), lineno=530, col_offset=34), Name('kwargs', Load(), lineno=530, col_offset=47), lineno=530, col_offset=14), lineno=530, col_offset=4), Assign([Tuple([Name('output', Store(), lineno=531, col_offset=4), Name('unused_err', Store(), lineno=531, col_offset=12)], Store(), lineno=531, col_offset=4)], Call(Attribute(Name('process', Load(), lineno=531, col_offset=25), 'communicate', Load(), lineno=531, col_offset=25), [], [], None, None, lineno=531, col_offset=25), lineno=531, col_offset=4), Assign([Name('retcode', Store(), lineno=532, col_offset=4)], Call(Attribute(Name('process', Load(), lineno=532, col_offset=14), 'poll', Load(), lineno=532, col_offset=14), [], [], None, None, lineno=532, col_offset=14), lineno=532, col_offset=4), If(Name('retcode', Load(), lineno=533, col_offset=7), [Assign([Name('cmd', Store(), lineno=534, col_offset=8)], Call(Attribute(Name('kwargs', Load(), lineno=534, col_offset=14), 'get', Load(), lineno=534, col_offset=14), [Str('args', lineno=534, col_offset=25)], [], None, None, lineno=534, col_offset=14), lineno=534, col_offset=8), If(Compare(Name('cmd', Load(), lineno=535, col_offset=11), [Is()], [Name('None', Load(), lineno=535, col_offset=18)], lineno=535, col_offset=11), [Assign([Name('cmd', Store(), lineno=536, col_offset=12)], Subscript(Name('popenargs', Load(), lineno=536, col_offset=18), Index(Num(0, lineno=536, col_offset=28)), Load(), lineno=536, col_offset=18), lineno=536, col_offset=12)], [], lineno=535, col_offset=8), Raise(Call(Name('CalledProcessError', Load(), lineno=537, col_offset=14), [Name('retcode', Load(), lineno=537, col_offset=33), Name('cmd', Load(), lineno=537, col_offset=42)], [keyword('output', Name('output', Load(), lineno=537, col_offset=54))], None, None, lineno=537, col_offset=14), None, None, lineno=537, col_offset=8)], [], lineno=533, col_offset=4), Return(Name('output', Load(), lineno=538, col_offset=11), lineno=538, col_offset=4)], [], lineno=508, col_offset=0), FunctionDef('list2cmdline', arguments([Name('seq', Param(), lineno=541, col_offset=17)], None, None, []), [Expr(Str('\n    Translate a sequence of arguments into a command line\n    string, using the same rules as the MS C runtime:\n\n    1) Arguments are delimited by white space, which is either a\n       space or a tab.\n\n    2) A string surrounded by double quotation marks is\n       interpreted as a single argument, regardless of white space\n       contained within.  A quoted string can be embedded in an\n       argument.\n\n    3) A double quotation mark preceded by a backslash is\n       interpreted as a literal double quotation mark.\n\n    4) Backslashes are interpreted literally, unless they\n       immediately precede a double quotation mark.\n\n    5) If backslashes immediately precede a double quotation mark,\n       every pair of backslashes is interpreted as a literal\n       backslash.  If the number of backslashes is odd, the last\n       backslash escapes the next double quotation mark as\n       described in rule 3.\n    ', lineno=565, col_offset=-1), lineno=565, col_offset=-1), Assign([Name('result', Store(), lineno=571, col_offset=4)], List([], Load(), lineno=571, col_offset=13), lineno=571, col_offset=4), Assign([Name('needquote', Store(), lineno=572, col_offset=4)], Name('False', Load(), lineno=572, col_offset=16), lineno=572, col_offset=4), For(Name('arg', Store(), lineno=573, col_offset=8), Name('seq', Load(), lineno=573, col_offset=15), [Assign([Name('bs_buf', Store(), lineno=574, col_offset=8)], List([], Load(), lineno=574, col_offset=17), lineno=574, col_offset=8), If(Name('result', Load(), lineno=577, col_offset=11), [Expr(Call(Attribute(Name('result', Load(), lineno=578, col_offset=12), 'append', Load(), lineno=578, col_offset=12), [Str(' ', lineno=578, col_offset=26)], [], None, None, lineno=578, col_offset=12), lineno=578, col_offset=12)], [], lineno=577, col_offset=8), Assign([Name('needquote', Store(), lineno=580, col_offset=8)], BoolOp(Or(), [Compare(Str(' ', lineno=580, col_offset=21), [In()], [Name('arg', Load(), lineno=580, col_offset=28)], lineno=580, col_offset=21), Compare(Str('\t', lineno=580, col_offset=37), [In()], [Name('arg', Load(), lineno=580, col_offset=45)], lineno=580, col_offset=37), UnaryOp(Not(), Name('arg', Load(), lineno=580, col_offset=57), lineno=580, col_offset=53)], lineno=580, col_offset=20), lineno=580, col_offset=8), If(Name('needquote', Load(), lineno=581, col_offset=11), [Expr(Call(Attribute(Name('result', Load(), lineno=582, col_offset=12), 'append', Load(), lineno=582, col_offset=12), [Str('"', lineno=582, col_offset=26)], [], None, None, lineno=582, col_offset=12), lineno=582, col_offset=12)], [], lineno=581, col_offset=8), For(Name('c', Store(), lineno=584, col_offset=12), Name('arg', Load(), lineno=584, col_offset=17), [If(Compare(Name('c', Load(), lineno=585, col_offset=15), [Eq()], [Str('\\', lineno=585, col_offset=20)], lineno=585, col_offset=15), [Expr(Call(Attribute(Name('bs_buf', Load(), lineno=587, col_offset=16), 'append', Load(), lineno=587, col_offset=16), [Name('c', Load(), lineno=587, col_offset=30)], [], None, None, lineno=587, col_offset=16), lineno=587, col_offset=16)], [If(Compare(Name('c', Load(), lineno=588, col_offset=17), [Eq()], [Str('"', lineno=588, col_offset=22)], lineno=588, col_offset=17), [Expr(Call(Attribute(Name('result', Load(), lineno=590, col_offset=16), 'append', Load(), lineno=590, col_offset=16), [BinOp(BinOp(Str('\\', lineno=590, col_offset=30), Mult(), Call(Name('len', Load(), lineno=590, col_offset=37), [Name('bs_buf', Load(), lineno=590, col_offset=41)], [], None, None, lineno=590, col_offset=37), lineno=590, col_offset=30), Mult(), Num(2, lineno=590, col_offset=49), lineno=590, col_offset=48)], [], None, None, lineno=590, col_offset=16), lineno=590, col_offset=16), Assign([Name('bs_buf', Store(), lineno=591, col_offset=16)], List([], Load(), lineno=591, col_offset=25), lineno=591, col_offset=16), Expr(Call(Attribute(Name('result', Load(), lineno=592, col_offset=16), 'append', Load(), lineno=592, col_offset=16), [Str('\\"', lineno=592, col_offset=30)], [], None, None, lineno=592, col_offset=16), lineno=592, col_offset=16)], [If(Name('bs_buf', Load(), lineno=595, col_offset=19), [Expr(Call(Attribute(Name('result', Load(), lineno=596, col_offset=20), 'extend', Load(), lineno=596, col_offset=20), [Name('bs_buf', Load(), lineno=596, col_offset=34)], [], None, None, lineno=596, col_offset=20), lineno=596, col_offset=20), Assign([Name('bs_buf', Store(), lineno=597, col_offset=20)], List([], Load(), lineno=597, col_offset=29), lineno=597, col_offset=20)], [], lineno=595, col_offset=16), Expr(Call(Attribute(Name('result', Load(), lineno=598, col_offset=16), 'append', Load(), lineno=598, col_offset=16), [Name('c', Load(), lineno=598, col_offset=30)], [], None, None, lineno=598, col_offset=16), lineno=598, col_offset=16)], lineno=588, col_offset=17)], lineno=585, col_offset=12)], [], lineno=584, col_offset=8), If(Name('bs_buf', Load(), lineno=601, col_offset=11), [Expr(Call(Attribute(Name('result', Load(), lineno=602, col_offset=12), 'extend', Load(), lineno=602, col_offset=12), [Name('bs_buf', Load(), lineno=602, col_offset=26)], [], None, None, lineno=602, col_offset=12), lineno=602, col_offset=12)], [], lineno=601, col_offset=8), If(Name('needquote', Load(), lineno=604, col_offset=11), [Expr(Call(Attribute(Name('result', Load(), lineno=605, col_offset=12), 'extend', Load(), lineno=605, col_offset=12), [Name('bs_buf', Load(), lineno=605, col_offset=26)], [], None, None, lineno=605, col_offset=12), lineno=605, col_offset=12), Expr(Call(Attribute(Name('result', Load(), lineno=606, col_offset=12), 'append', Load(), lineno=606, col_offset=12), [Str('"', lineno=606, col_offset=26)], [], None, None, lineno=606, col_offset=12), lineno=606, col_offset=12)], [], lineno=604, col_offset=8)], [], lineno=573, col_offset=4), Return(Call(Attribute(Str('', lineno=608, col_offset=11), 'join', Load(), lineno=608, col_offset=11), [Name('result', Load(), lineno=608, col_offset=19)], [], None, None, lineno=608, col_offset=11), lineno=608, col_offset=4)], [], lineno=541, col_offset=0), ClassDef('Popen', [Name('object', Load(), lineno=611, col_offset=12)], [FunctionDef('__init__', arguments([Name('self', Param(), lineno=612, col_offset=17), Name('args', Param(), lineno=612, col_offset=23), Name('bufsize', Param(), lineno=612, col_offset=29), Name('executable', Param(), lineno=612, col_offset=40), Name('stdin', Param(), lineno=613, col_offset=17), Name('stdout', Param(), lineno=613, col_offset=29), Name('stderr', Param(), lineno=613, col_offset=42), Name('preexec_fn', Param(), lineno=614, col_offset=17), Name('close_fds', Param(), lineno=614, col_offset=34), Name('shell', Param(), lineno=614, col_offset=51), Name('cwd', Param(), lineno=615, col_offset=17), Name('env', Param(), lineno=615, col_offset=27), Name('universal_newlines', Param(), lineno=615, col_offset=37), Name('startupinfo', Param(), lineno=616, col_offset=17), Name('creationflags', Param(), lineno=616, col_offset=35)], None, None, [Num(0, lineno=612, col_offset=37), Name('None', Load(), lineno=612, col_offset=51), Name('None', Load(), lineno=613, col_offset=23), Name('None', Load(), lineno=613, col_offset=36), Name('None', Load(), lineno=613, col_offset=49), Name('None', Load(), lineno=614, col_offset=28), Name('False', Load(), lineno=614, col_offset=44), Name('False', Load(), lineno=614, col_offset=57), Name('None', Load(), lineno=615, col_offset=21), Name('None', Load(), lineno=615, col_offset=31), Name('False', Load(), lineno=615, col_offset=56), Name('None', Load(), lineno=616, col_offset=29), Num(0, lineno=616, col_offset=49)]), [Expr(Str('Create new Popen instance.', lineno=617, col_offset=8), lineno=617, col_offset=8), Expr(Call(Name('_cleanup', Load(), lineno=618, col_offset=8), [], [], None, None, lineno=618, col_offset=8), lineno=618, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=620, col_offset=8), '_child_created', Store(), lineno=620, col_offset=8)], Name('False', Load(), lineno=620, col_offset=30), lineno=620, col_offset=8), If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=621, col_offset=15), [Name('bufsize', Load(), lineno=621, col_offset=26), Tuple([Name('int', Load(), lineno=621, col_offset=36), Name('long', Load(), lineno=621, col_offset=41)], Load(), lineno=621, col_offset=36)], [], None, None, lineno=621, col_offset=15), lineno=621, col_offset=11), [Raise(Call(Name('TypeError', Load(), lineno=622, col_offset=18), [Str('bufsize must be an integer', lineno=622, col_offset=28)], [], None, None, lineno=622, col_offset=18), None, None, lineno=622, col_offset=12)], [], lineno=621, col_offset=8), If(Name('mswindows', Load(), lineno=624, col_offset=11), [If(Compare(Name('preexec_fn', Load(), lineno=625, col_offset=15), [IsNot()], [Name('None', Load(), lineno=625, col_offset=33)], lineno=625, col_offset=15), [Raise(Call(Name('ValueError', Load(), lineno=626, col_offset=22), [Str('preexec_fn is not supported on Windows platforms', lineno=626, col_offset=33)], [], None, None, lineno=626, col_offset=22), None, None, lineno=626, col_offset=16)], [], lineno=625, col_offset=12), If(BoolOp(And(), [Name('close_fds', Load(), lineno=628, col_offset=15), BoolOp(Or(), [Compare(Name('stdin', Load(), lineno=628, col_offset=30), [IsNot()], [Name('None', Load(), lineno=628, col_offset=43)], lineno=628, col_offset=30), Compare(Name('stdout', Load(), lineno=628, col_offset=51), [IsNot()], [Name('None', Load(), lineno=628, col_offset=65)], lineno=628, col_offset=51), Compare(Name('stderr', Load(), lineno=629, col_offset=30), [IsNot()], [Name('None', Load(), lineno=629, col_offset=44)], lineno=629, col_offset=30)], lineno=628, col_offset=30)], lineno=628, col_offset=15), [Raise(Call(Name('ValueError', Load(), lineno=630, col_offset=22), [Str('close_fds is not supported on Windows platforms if you redirect stdin/stdout/stderr', lineno=630, col_offset=33)], [], None, None, lineno=630, col_offset=22), None, None, lineno=630, col_offset=16)], [], lineno=628, col_offset=12)], [If(Compare(Name('startupinfo', Load(), lineno=634, col_offset=15), [IsNot()], [Name('None', Load(), lineno=634, col_offset=34)], lineno=634, col_offset=15), [Raise(Call(Name('ValueError', Load(), lineno=635, col_offset=22), [Str('startupinfo is only supported on Windows platforms', lineno=635, col_offset=33)], [], None, None, lineno=635, col_offset=22), None, None, lineno=635, col_offset=16)], [], lineno=634, col_offset=12), If(Compare(Name('creationflags', Load(), lineno=637, col_offset=15), [NotEq()], [Num(0, lineno=637, col_offset=32)], lineno=637, col_offset=15), [Raise(Call(Name('ValueError', Load(), lineno=638, col_offset=22), [Str('creationflags is only supported on Windows platforms', lineno=638, col_offset=33)], [], None, None, lineno=638, col_offset=22), None, None, lineno=638, col_offset=16)], [], lineno=637, col_offset=12)], lineno=624, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=641, col_offset=8), 'stdin', Store(), lineno=641, col_offset=8)], Name('None', Load(), lineno=641, col_offset=21), lineno=641, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=642, col_offset=8), 'stdout', Store(), lineno=642, col_offset=8)], Name('None', Load(), lineno=642, col_offset=22), lineno=642, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=643, col_offset=8), 'stderr', Store(), lineno=643, col_offset=8)], Name('None', Load(), lineno=643, col_offset=22), lineno=643, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=644, col_offset=8), 'pid', Store(), lineno=644, col_offset=8)], Name('None', Load(), lineno=644, col_offset=19), lineno=644, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=645, col_offset=8), 'returncode', Store(), lineno=645, col_offset=8)], Name('None', Load(), lineno=645, col_offset=26), lineno=645, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=646, col_offset=8), 'universal_newlines', Store(), lineno=646, col_offset=8)], Name('universal_newlines', Load(), lineno=646, col_offset=34), lineno=646, col_offset=8), Assign([Tuple([Name('p2cread', Store(), lineno=663, col_offset=9), Name('p2cwrite', Store(), lineno=663, col_offset=18), Name('c2pread', Store(), lineno=664, col_offset=9), Name('c2pwrite', Store(), lineno=664, col_offset=18), Name('errread', Store(), lineno=665, col_offset=9), Name('errwrite', Store(), lineno=665, col_offset=18)], Store(), lineno=663, col_offset=9)], Call(Attribute(Name('self', Load(), lineno=665, col_offset=30), '_get_handles', Load(), lineno=665, col_offset=30), [Name('stdin', Load(), lineno=665, col_offset=48), Name('stdout', Load(), lineno=665, col_offset=55), Name('stderr', Load(), lineno=665, col_offset=63)], [], None, None, lineno=665, col_offset=30), lineno=663, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=667, col_offset=8), '_execute_child', Load(), lineno=667, col_offset=8), [Name('args', Load(), lineno=667, col_offset=28), Name('executable', Load(), lineno=667, col_offset=34), Name('preexec_fn', Load(), lineno=667, col_offset=46), Name('close_fds', Load(), lineno=667, col_offset=58), Name('cwd', Load(), lineno=668, col_offset=28), Name('env', Load(), lineno=668, col_offset=33), Name('universal_newlines', Load(), lineno=668, col_offset=38), Name('startupinfo', Load(), lineno=669, col_offset=28), Name('creationflags', Load(), lineno=669, col_offset=41), Name('shell', Load(), lineno=669, col_offset=56), Name('p2cread', Load(), lineno=670, col_offset=28), Name('p2cwrite', Load(), lineno=670, col_offset=37), Name('c2pread', Load(), lineno=671, col_offset=28), Name('c2pwrite', Load(), lineno=671, col_offset=37), Name('errread', Load(), lineno=672, col_offset=28), Name('errwrite', Load(), lineno=672, col_offset=37)], [], None, None, lineno=667, col_offset=8), lineno=667, col_offset=8), If(Name('mswindows', Load(), lineno=674, col_offset=11), [If(Compare(Name('p2cwrite', Load(), lineno=675, col_offset=15), [IsNot()], [Name('None', Load(), lineno=675, col_offset=31)], lineno=675, col_offset=15), [Assign([Name('p2cwrite', Store(), lineno=676, col_offset=16)], Call(Attribute(Name('msvcrt', Load(), lineno=676, col_offset=27), 'open_osfhandle', Load(), lineno=676, col_offset=27), [Call(Attribute(Name('p2cwrite', Load(), lineno=676, col_offset=49), 'Detach', Load(), lineno=676, col_offset=49), [], [], None, None, lineno=676, col_offset=49), Num(0, lineno=676, col_offset=68)], [], None, None, lineno=676, col_offset=27), lineno=676, col_offset=16)], [], lineno=675, col_offset=12), If(Compare(Name('c2pread', Load(), lineno=677, col_offset=15), [IsNot()], [Name('None', Load(), lineno=677, col_offset=30)], lineno=677, col_offset=15), [Assign([Name('c2pread', Store(), lineno=678, col_offset=16)], Call(Attribute(Name('msvcrt', Load(), lineno=678, col_offset=26), 'open_osfhandle', Load(), lineno=678, col_offset=26), [Call(Attribute(Name('c2pread', Load(), lineno=678, col_offset=48), 'Detach', Load(), lineno=678, col_offset=48), [], [], None, None, lineno=678, col_offset=48), Num(0, lineno=678, col_offset=66)], [], None, None, lineno=678, col_offset=26), lineno=678, col_offset=16)], [], lineno=677, col_offset=12), If(Compare(Name('errread', Load(), lineno=679, col_offset=15), [IsNot()], [Name('None', Load(), lineno=679, col_offset=30)], lineno=679, col_offset=15), [Assign([Name('errread', Store(), lineno=680, col_offset=16)], Call(Attribute(Name('msvcrt', Load(), lineno=680, col_offset=26), 'open_osfhandle', Load(), lineno=680, col_offset=26), [Call(Attribute(Name('errread', Load(), lineno=680, col_offset=48), 'Detach', Load(), lineno=680, col_offset=48), [], [], None, None, lineno=680, col_offset=48), Num(0, lineno=680, col_offset=66)], [], None, None, lineno=680, col_offset=26), lineno=680, col_offset=16)], [], lineno=679, col_offset=12)], [], lineno=674, col_offset=8), If(Compare(Name('p2cwrite', Load(), lineno=682, col_offset=11), [IsNot()], [Name('None', Load(), lineno=682, col_offset=27)], lineno=682, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=683, col_offset=12), 'stdin', Store(), lineno=683, col_offset=12)], Call(Attribute(Name('os', Load(), lineno=683, col_offset=25), 'fdopen', Load(), lineno=683, col_offset=25), [Name('p2cwrite', Load(), lineno=683, col_offset=35), Str('wb', lineno=683, col_offset=45), Name('bufsize', Load(), lineno=683, col_offset=51)], [], None, None, lineno=683, col_offset=25), lineno=683, col_offset=12)], [], lineno=682, col_offset=8), If(Compare(Name('c2pread', Load(), lineno=684, col_offset=11), [IsNot()], [Name('None', Load(), lineno=684, col_offset=26)], lineno=684, col_offset=11), [If(Name('universal_newlines', Load(), lineno=685, col_offset=15), [Assign([Attribute(Name('self', Load(), lineno=686, col_offset=16), 'stdout', Store(), lineno=686, col_offset=16)], Call(Attribute(Name('os', Load(), lineno=686, col_offset=30), 'fdopen', Load(), lineno=686, col_offset=30), [Name('c2pread', Load(), lineno=686, col_offset=40), Str('rU', lineno=686, col_offset=49), Name('bufsize', Load(), lineno=686, col_offset=55)], [], None, None, lineno=686, col_offset=30), lineno=686, col_offset=16)], [Assign([Attribute(Name('self', Load(), lineno=688, col_offset=16), 'stdout', Store(), lineno=688, col_offset=16)], Call(Attribute(Name('os', Load(), lineno=688, col_offset=30), 'fdopen', Load(), lineno=688, col_offset=30), [Name('c2pread', Load(), lineno=688, col_offset=40), Str('rb', lineno=688, col_offset=49), Name('bufsize', Load(), lineno=688, col_offset=55)], [], None, None, lineno=688, col_offset=30), lineno=688, col_offset=16)], lineno=685, col_offset=12)], [], lineno=684, col_offset=8), If(Compare(Name('errread', Load(), lineno=689, col_offset=11), [IsNot()], [Name('None', Load(), lineno=689, col_offset=26)], lineno=689, col_offset=11), [If(Name('universal_newlines', Load(), lineno=690, col_offset=15), [Assign([Attribute(Name('self', Load(), lineno=691, col_offset=16), 'stderr', Store(), lineno=691, col_offset=16)], Call(Attribute(Name('os', Load(), lineno=691, col_offset=30), 'fdopen', Load(), lineno=691, col_offset=30), [Name('errread', Load(), lineno=691, col_offset=40), Str('rU', lineno=691, col_offset=49), Name('bufsize', Load(), lineno=691, col_offset=55)], [], None, None, lineno=691, col_offset=30), lineno=691, col_offset=16)], [Assign([Attribute(Name('self', Load(), lineno=693, col_offset=16), 'stderr', Store(), lineno=693, col_offset=16)], Call(Attribute(Name('os', Load(), lineno=693, col_offset=30), 'fdopen', Load(), lineno=693, col_offset=30), [Name('errread', Load(), lineno=693, col_offset=40), Str('rb', lineno=693, col_offset=49), Name('bufsize', Load(), lineno=693, col_offset=55)], [], None, None, lineno=693, col_offset=30), lineno=693, col_offset=16)], lineno=690, col_offset=12)], [], lineno=689, col_offset=8)], [], lineno=612, col_offset=4), FunctionDef('_translate_newlines', arguments([Name('self', Param(), lineno=696, col_offset=28), Name('data', Param(), lineno=696, col_offset=34)], None, None, []), [Assign([Name('data', Store(), lineno=697, col_offset=8)], Call(Attribute(Name('data', Load(), lineno=697, col_offset=15), 'replace', Load(), lineno=697, col_offset=15), [Str('\r\n', lineno=697, col_offset=28), Str('\n', lineno=697, col_offset=36)], [], None, None, lineno=697, col_offset=15), lineno=697, col_offset=8), Assign([Name('data', Store(), lineno=698, col_offset=8)], Call(Attribute(Name('data', Load(), lineno=698, col_offset=15), 'replace', Load(), lineno=698, col_offset=15), [Str('\r', lineno=698, col_offset=28), Str('\n', lineno=698, col_offset=34)], [], None, None, lineno=698, col_offset=15), lineno=698, col_offset=8), Return(Name('data', Load(), lineno=699, col_offset=15), lineno=699, col_offset=8)], [], lineno=696, col_offset=4), FunctionDef('__del__', arguments([Name('self', Param(), lineno=702, col_offset=16), Name('_maxint', Param(), lineno=702, col_offset=22), Name('_active', Param(), lineno=702, col_offset=42)], None, None, [Attribute(Name('sys', Load(), lineno=702, col_offset=30), 'maxint', Load(), lineno=702, col_offset=30), Name('_active', Load(), lineno=702, col_offset=50)]), [If(UnaryOp(Not(), Attribute(Name('self', Load(), lineno=703, col_offset=15), '_child_created', Load(), lineno=703, col_offset=15), lineno=703, col_offset=11), [Return(None, lineno=705, col_offset=12)], [], lineno=703, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=707, col_offset=8), '_internal_poll', Load(), lineno=707, col_offset=8), [], [keyword('_deadstate', Name('_maxint', Load(), lineno=707, col_offset=39))], None, None, lineno=707, col_offset=8), lineno=707, col_offset=8), If(BoolOp(And(), [Compare(Attribute(Name('self', Load(), lineno=708, col_offset=11), 'returncode', Load(), lineno=708, col_offset=11), [Is()], [Name('None', Load(), lineno=708, col_offset=30)], lineno=708, col_offset=11), Compare(Name('_active', Load(), lineno=708, col_offset=39), [IsNot()], [Name('None', Load(), lineno=708, col_offset=54)], lineno=708, col_offset=39)], lineno=708, col_offset=11), [Expr(Call(Attribute(Name('_active', Load(), lineno=710, col_offset=12), 'append', Load(), lineno=710, col_offset=12), [Name('self', Load(), lineno=710, col_offset=27)], [], None, None, lineno=710, col_offset=12), lineno=710, col_offset=12)], [], lineno=708, col_offset=8)], [], lineno=702, col_offset=4), FunctionDef('communicate', arguments([Name('self', Param(), lineno=713, col_offset=20), Name('input', Param(), lineno=713, col_offset=26)], None, None, [Name('None', Load(), lineno=713, col_offset=32)]), [Expr(Str('Interact with process: Send data to stdin.  Read data from\n        stdout and stderr, until end-of-file is reached.  Wait for\n        process to terminate.  The optional input argument should be a\n        string to be sent to the child process, or None, if no data\n        should be sent to the child.\n\n        communicate() returns a tuple (stdout, stderr).', lineno=720, col_offset=-1), lineno=720, col_offset=-1), If(Compare(Call(Attribute(List([Attribute(Name('self', Load(), lineno=724, col_offset=12), 'stdin', Load(), lineno=724, col_offset=12), Attribute(Name('self', Load(), lineno=724, col_offset=24), 'stdout', Load(), lineno=724, col_offset=24), Attribute(Name('self', Load(), lineno=724, col_offset=37), 'stderr', Load(), lineno=724, col_offset=37)], Load(), lineno=724, col_offset=11), 'count', Load(), lineno=724, col_offset=11), [Name('None', Load(), lineno=724, col_offset=56)], [], None, None, lineno=724, col_offset=11), [GtE()], [Num(2, lineno=724, col_offset=65)], lineno=724, col_offset=11), [Assign([Name('stdout', Store(), lineno=725, col_offset=12)], Name('None', Load(), lineno=725, col_offset=21), lineno=725, col_offset=12), Assign([Name('stderr', Store(), lineno=726, col_offset=12)], Name('None', Load(), lineno=726, col_offset=21), lineno=726, col_offset=12), If(Attribute(Name('self', Load(), lineno=727, col_offset=15), 'stdin', Load(), lineno=727, col_offset=15), [If(Name('input', Load(), lineno=728, col_offset=19), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=729, col_offset=20), 'stdin', Load(), lineno=729, col_offset=20), 'write', Load(), lineno=729, col_offset=20), [Name('input', Load(), lineno=729, col_offset=37)], [], None, None, lineno=729, col_offset=20), lineno=729, col_offset=20)], [], lineno=728, col_offset=16), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=730, col_offset=16), 'stdin', Load(), lineno=730, col_offset=16), 'close', Load(), lineno=730, col_offset=16), [], [], None, None, lineno=730, col_offset=16), lineno=730, col_offset=16)], [If(Attribute(Name('self', Load(), lineno=731, col_offset=17), 'stdout', Load(), lineno=731, col_offset=17), [Assign([Name('stdout', Store(), lineno=732, col_offset=16)], Call(Attribute(Attribute(Name('self', Load(), lineno=732, col_offset=25), 'stdout', Load(), lineno=732, col_offset=25), 'read', Load(), lineno=732, col_offset=25), [], [], None, None, lineno=732, col_offset=25), lineno=732, col_offset=16), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=733, col_offset=16), 'stdout', Load(), lineno=733, col_offset=16), 'close', Load(), lineno=733, col_offset=16), [], [], None, None, lineno=733, col_offset=16), lineno=733, col_offset=16)], [If(Attribute(Name('self', Load(), lineno=734, col_offset=17), 'stderr', Load(), lineno=734, col_offset=17), [Assign([Name('stderr', Store(), lineno=735, col_offset=16)], Call(Attribute(Attribute(Name('self', Load(), lineno=735, col_offset=25), 'stderr', Load(), lineno=735, col_offset=25), 'read', Load(), lineno=735, col_offset=25), [], [], None, None, lineno=735, col_offset=25), lineno=735, col_offset=16), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=736, col_offset=16), 'stderr', Load(), lineno=736, col_offset=16), 'close', Load(), lineno=736, col_offset=16), [], [], None, None, lineno=736, col_offset=16), lineno=736, col_offset=16)], [], lineno=734, col_offset=17)], lineno=731, col_offset=17)], lineno=727, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=737, col_offset=12), 'wait', Load(), lineno=737, col_offset=12), [], [], None, None, lineno=737, col_offset=12), lineno=737, col_offset=12), Return(Tuple([Name('stdout', Load(), lineno=738, col_offset=20), Name('stderr', Load(), lineno=738, col_offset=28)], Load(), lineno=738, col_offset=20), lineno=738, col_offset=12)], [], lineno=724, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=740, col_offset=15), '_communicate', Load(), lineno=740, col_offset=15), [Name('input', Load(), lineno=740, col_offset=33)], [], None, None, lineno=740, col_offset=15), lineno=740, col_offset=8)], [], lineno=713, col_offset=4), FunctionDef('poll', arguments([Name('self', Param(), lineno=743, col_offset=13)], None, None, []), [Return(Call(Attribute(Name('self', Load(), lineno=744, col_offset=15), '_internal_poll', Load(), lineno=744, col_offset=15), [], [], None, None, lineno=744, col_offset=15), lineno=744, col_offset=8)], [], lineno=743, col_offset=4), If(Name('mswindows', Load(), lineno=747, col_offset=7), [FunctionDef('_get_handles', arguments([Name('self', Param(), lineno=751, col_offset=25), Name('stdin', Param(), lineno=751, col_offset=31), Name('stdout', Param(), lineno=751, col_offset=38), Name('stderr', Param(), lineno=751, col_offset=46)], None, None, []), [Expr(Str('Construct and return tuple with IO objects:\n            p2cread, p2cwrite, c2pread, c2pwrite, errread, errwrite\n            ', lineno=754, col_offset=-1), lineno=754, col_offset=-1), If(BoolOp(And(), [Compare(Name('stdin', Load(), lineno=755, col_offset=15), [Is()], [Name('None', Load(), lineno=755, col_offset=24)], lineno=755, col_offset=15), Compare(Name('stdout', Load(), lineno=755, col_offset=33), [Is()], [Name('None', Load(), lineno=755, col_offset=43)], lineno=755, col_offset=33), Compare(Name('stderr', Load(), lineno=755, col_offset=52), [Is()], [Name('None', Load(), lineno=755, col_offset=62)], lineno=755, col_offset=52)], lineno=755, col_offset=15), [Return(Tuple([Name('None', Load(), lineno=756, col_offset=24), Name('None', Load(), lineno=756, col_offset=30), Name('None', Load(), lineno=756, col_offset=36), Name('None', Load(), lineno=756, col_offset=42), Name('None', Load(), lineno=756, col_offset=48), Name('None', Load(), lineno=756, col_offset=54)], Load(), lineno=756, col_offset=24), lineno=756, col_offset=16)], [], lineno=755, col_offset=12), Assign([Tuple([Name('p2cread', Store(), lineno=758, col_offset=12), Name('p2cwrite', Store(), lineno=758, col_offset=21)], Store(), lineno=758, col_offset=12)], Tuple([Name('None', Load(), lineno=758, col_offset=32), Name('None', Load(), lineno=758, col_offset=38)], Load(), lineno=758, col_offset=32), lineno=758, col_offset=12), Assign([Tuple([Name('c2pread', Store(), lineno=759, col_offset=12), Name('c2pwrite', Store(), lineno=759, col_offset=21)], Store(), lineno=759, col_offset=12)], Tuple([Name('None', Load(), lineno=759, col_offset=32), Name('None', Load(), lineno=759, col_offset=38)], Load(), lineno=759, col_offset=32), lineno=759, col_offset=12), Assign([Tuple([Name('errread', Store(), lineno=760, col_offset=12), Name('errwrite', Store(), lineno=760, col_offset=21)], Store(), lineno=760, col_offset=12)], Tuple([Name('None', Load(), lineno=760, col_offset=32), Name('None', Load(), lineno=760, col_offset=38)], Load(), lineno=760, col_offset=32), lineno=760, col_offset=12), If(Compare(Name('stdin', Load(), lineno=762, col_offset=15), [Is()], [Name('None', Load(), lineno=762, col_offset=24)], lineno=762, col_offset=15), [Assign([Name('p2cread', Store(), lineno=763, col_offset=16)], Call(Attribute(Name('_subprocess', Load(), lineno=763, col_offset=26), 'GetStdHandle', Load(), lineno=763, col_offset=26), [Attribute(Name('_subprocess', Load(), lineno=763, col_offset=51), 'STD_INPUT_HANDLE', Load(), lineno=763, col_offset=51)], [], None, None, lineno=763, col_offset=26), lineno=763, col_offset=16), If(Compare(Name('p2cread', Load(), lineno=764, col_offset=19), [Is()], [Name('None', Load(), lineno=764, col_offset=30)], lineno=764, col_offset=19), [Assign([Tuple([Name('p2cread', Store(), lineno=765, col_offset=20), Name('_', Store(), lineno=765, col_offset=29)], Store(), lineno=765, col_offset=20)], Call(Attribute(Name('_subprocess', Load(), lineno=765, col_offset=33), 'CreatePipe', Load(), lineno=765, col_offset=33), [Name('None', Load(), lineno=765, col_offset=56), Num(0, lineno=765, col_offset=62)], [], None, None, lineno=765, col_offset=33), lineno=765, col_offset=20)], [], lineno=764, col_offset=16)], [If(Compare(Name('stdin', Load(), lineno=766, col_offset=17), [Eq()], [Name('PIPE', Load(), lineno=766, col_offset=26)], lineno=766, col_offset=17), [Assign([Tuple([Name('p2cread', Store(), lineno=767, col_offset=16), Name('p2cwrite', Store(), lineno=767, col_offset=25)], Store(), lineno=767, col_offset=16)], Call(Attribute(Name('_subprocess', Load(), lineno=767, col_offset=36), 'CreatePipe', Load(), lineno=767, col_offset=36), [Name('None', Load(), lineno=767, col_offset=59), Num(0, lineno=767, col_offset=65)], [], None, None, lineno=767, col_offset=36), lineno=767, col_offset=16)], [If(Call(Name('isinstance', Load(), lineno=768, col_offset=17), [Name('stdin', Load(), lineno=768, col_offset=28), Name('int', Load(), lineno=768, col_offset=35)], [], None, None, lineno=768, col_offset=17), [Assign([Name('p2cread', Store(), lineno=769, col_offset=16)], Call(Attribute(Name('msvcrt', Load(), lineno=769, col_offset=26), 'get_osfhandle', Load(), lineno=769, col_offset=26), [Name('stdin', Load(), lineno=769, col_offset=47)], [], None, None, lineno=769, col_offset=26), lineno=769, col_offset=16)], [Assign([Name('p2cread', Store(), lineno=772, col_offset=16)], Call(Attribute(Name('msvcrt', Load(), lineno=772, col_offset=26), 'get_osfhandle', Load(), lineno=772, col_offset=26), [Call(Attribute(Name('stdin', Load(), lineno=772, col_offset=47), 'fileno', Load(), lineno=772, col_offset=47), [], [], None, None, lineno=772, col_offset=47)], [], None, None, lineno=772, col_offset=26), lineno=772, col_offset=16)], lineno=768, col_offset=17)], lineno=766, col_offset=17)], lineno=762, col_offset=12), Assign([Name('p2cread', Store(), lineno=773, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=773, col_offset=22), '_make_inheritable', Load(), lineno=773, col_offset=22), [Name('p2cread', Load(), lineno=773, col_offset=45)], [], None, None, lineno=773, col_offset=22), lineno=773, col_offset=12), If(Compare(Name('stdout', Load(), lineno=775, col_offset=15), [Is()], [Name('None', Load(), lineno=775, col_offset=25)], lineno=775, col_offset=15), [Assign([Name('c2pwrite', Store(), lineno=776, col_offset=16)], Call(Attribute(Name('_subprocess', Load(), lineno=776, col_offset=27), 'GetStdHandle', Load(), lineno=776, col_offset=27), [Attribute(Name('_subprocess', Load(), lineno=776, col_offset=52), 'STD_OUTPUT_HANDLE', Load(), lineno=776, col_offset=52)], [], None, None, lineno=776, col_offset=27), lineno=776, col_offset=16), If(Compare(Name('c2pwrite', Load(), lineno=777, col_offset=19), [Is()], [Name('None', Load(), lineno=777, col_offset=31)], lineno=777, col_offset=19), [Assign([Tuple([Name('_', Store(), lineno=778, col_offset=20), Name('c2pwrite', Store(), lineno=778, col_offset=23)], Store(), lineno=778, col_offset=20)], Call(Attribute(Name('_subprocess', Load(), lineno=778, col_offset=34), 'CreatePipe', Load(), lineno=778, col_offset=34), [Name('None', Load(), lineno=778, col_offset=57), Num(0, lineno=778, col_offset=63)], [], None, None, lineno=778, col_offset=34), lineno=778, col_offset=20)], [], lineno=777, col_offset=16)], [If(Compare(Name('stdout', Load(), lineno=779, col_offset=17), [Eq()], [Name('PIPE', Load(), lineno=779, col_offset=27)], lineno=779, col_offset=17), [Assign([Tuple([Name('c2pread', Store(), lineno=780, col_offset=16), Name('c2pwrite', Store(), lineno=780, col_offset=25)], Store(), lineno=780, col_offset=16)], Call(Attribute(Name('_subprocess', Load(), lineno=780, col_offset=36), 'CreatePipe', Load(), lineno=780, col_offset=36), [Name('None', Load(), lineno=780, col_offset=59), Num(0, lineno=780, col_offset=65)], [], None, None, lineno=780, col_offset=36), lineno=780, col_offset=16)], [If(Call(Name('isinstance', Load(), lineno=781, col_offset=17), [Name('stdout', Load(), lineno=781, col_offset=28), Name('int', Load(), lineno=781, col_offset=36)], [], None, None, lineno=781, col_offset=17), [Assign([Name('c2pwrite', Store(), lineno=782, col_offset=16)], Call(Attribute(Name('msvcrt', Load(), lineno=782, col_offset=27), 'get_osfhandle', Load(), lineno=782, col_offset=27), [Name('stdout', Load(), lineno=782, col_offset=48)], [], None, None, lineno=782, col_offset=27), lineno=782, col_offset=16)], [Assign([Name('c2pwrite', Store(), lineno=785, col_offset=16)], Call(Attribute(Name('msvcrt', Load(), lineno=785, col_offset=27), 'get_osfhandle', Load(), lineno=785, col_offset=27), [Call(Attribute(Name('stdout', Load(), lineno=785, col_offset=48), 'fileno', Load(), lineno=785, col_offset=48), [], [], None, None, lineno=785, col_offset=48)], [], None, None, lineno=785, col_offset=27), lineno=785, col_offset=16)], lineno=781, col_offset=17)], lineno=779, col_offset=17)], lineno=775, col_offset=12), Assign([Name('c2pwrite', Store(), lineno=786, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=786, col_offset=23), '_make_inheritable', Load(), lineno=786, col_offset=23), [Name('c2pwrite', Load(), lineno=786, col_offset=46)], [], None, None, lineno=786, col_offset=23), lineno=786, col_offset=12), If(Compare(Name('stderr', Load(), lineno=788, col_offset=15), [Is()], [Name('None', Load(), lineno=788, col_offset=25)], lineno=788, col_offset=15), [Assign([Name('errwrite', Store(), lineno=789, col_offset=16)], Call(Attribute(Name('_subprocess', Load(), lineno=789, col_offset=27), 'GetStdHandle', Load(), lineno=789, col_offset=27), [Attribute(Name('_subprocess', Load(), lineno=789, col_offset=52), 'STD_ERROR_HANDLE', Load(), lineno=789, col_offset=52)], [], None, None, lineno=789, col_offset=27), lineno=789, col_offset=16), If(Compare(Name('errwrite', Load(), lineno=790, col_offset=19), [Is()], [Name('None', Load(), lineno=790, col_offset=31)], lineno=790, col_offset=19), [Assign([Tuple([Name('_', Store(), lineno=791, col_offset=20), Name('errwrite', Store(), lineno=791, col_offset=23)], Store(), lineno=791, col_offset=20)], Call(Attribute(Name('_subprocess', Load(), lineno=791, col_offset=34), 'CreatePipe', Load(), lineno=791, col_offset=34), [Name('None', Load(), lineno=791, col_offset=57), Num(0, lineno=791, col_offset=63)], [], None, None, lineno=791, col_offset=34), lineno=791, col_offset=20)], [], lineno=790, col_offset=16)], [If(Compare(Name('stderr', Load(), lineno=792, col_offset=17), [Eq()], [Name('PIPE', Load(), lineno=792, col_offset=27)], lineno=792, col_offset=17), [Assign([Tuple([Name('errread', Store(), lineno=793, col_offset=16), Name('errwrite', Store(), lineno=793, col_offset=25)], Store(), lineno=793, col_offset=16)], Call(Attribute(Name('_subprocess', Load(), lineno=793, col_offset=36), 'CreatePipe', Load(), lineno=793, col_offset=36), [Name('None', Load(), lineno=793, col_offset=59), Num(0, lineno=793, col_offset=65)], [], None, None, lineno=793, col_offset=36), lineno=793, col_offset=16)], [If(Compare(Name('stderr', Load(), lineno=794, col_offset=17), [Eq()], [Name('STDOUT', Load(), lineno=794, col_offset=27)], lineno=794, col_offset=17), [Assign([Name('errwrite', Store(), lineno=795, col_offset=16)], Name('c2pwrite', Load(), lineno=795, col_offset=27), lineno=795, col_offset=16)], [If(Call(Name('isinstance', Load(), lineno=796, col_offset=17), [Name('stderr', Load(), lineno=796, col_offset=28), Name('int', Load(), lineno=796, col_offset=36)], [], None, None, lineno=796, col_offset=17), [Assign([Name('errwrite', Store(), lineno=797, col_offset=16)], Call(Attribute(Name('msvcrt', Load(), lineno=797, col_offset=27), 'get_osfhandle', Load(), lineno=797, col_offset=27), [Name('stderr', Load(), lineno=797, col_offset=48)], [], None, None, lineno=797, col_offset=27), lineno=797, col_offset=16)], [Assign([Name('errwrite', Store(), lineno=800, col_offset=16)], Call(Attribute(Name('msvcrt', Load(), lineno=800, col_offset=27), 'get_osfhandle', Load(), lineno=800, col_offset=27), [Call(Attribute(Name('stderr', Load(), lineno=800, col_offset=48), 'fileno', Load(), lineno=800, col_offset=48), [], [], None, None, lineno=800, col_offset=48)], [], None, None, lineno=800, col_offset=27), lineno=800, col_offset=16)], lineno=796, col_offset=17)], lineno=794, col_offset=17)], lineno=792, col_offset=17)], lineno=788, col_offset=12), Assign([Name('errwrite', Store(), lineno=801, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=801, col_offset=23), '_make_inheritable', Load(), lineno=801, col_offset=23), [Name('errwrite', Load(), lineno=801, col_offset=46)], [], None, None, lineno=801, col_offset=23), lineno=801, col_offset=12), Return(Tuple([Name('p2cread', Load(), lineno=803, col_offset=20), Name('p2cwrite', Load(), lineno=803, col_offset=29), Name('c2pread', Load(), lineno=804, col_offset=20), Name('c2pwrite', Load(), lineno=804, col_offset=29), Name('errread', Load(), lineno=805, col_offset=20), Name('errwrite', Load(), lineno=805, col_offset=29)], Load(), lineno=803, col_offset=20), lineno=803, col_offset=12)], [], lineno=751, col_offset=8), FunctionDef('_make_inheritable', arguments([Name('self', Param(), lineno=808, col_offset=30), Name('handle', Param(), lineno=808, col_offset=36)], None, None, []), [Expr(Str('Return a duplicate of handle, which is inheritable', lineno=809, col_offset=12), lineno=809, col_offset=12), Return(Call(Attribute(Name('_subprocess', Load(), lineno=810, col_offset=19), 'DuplicateHandle', Load(), lineno=810, col_offset=19), [Call(Attribute(Name('_subprocess', Load(), lineno=810, col_offset=47), 'GetCurrentProcess', Load(), lineno=810, col_offset=47), [], [], None, None, lineno=810, col_offset=47), Name('handle', Load(), lineno=811, col_offset=32), Call(Attribute(Name('_subprocess', Load(), lineno=811, col_offset=40), 'GetCurrentProcess', Load(), lineno=811, col_offset=40), [], [], None, None, lineno=811, col_offset=40), Num(0, lineno=811, col_offset=73), Num(1, lineno=811, col_offset=76), Attribute(Name('_subprocess', Load(), lineno=812, col_offset=32), 'DUPLICATE_SAME_ACCESS', Load(), lineno=812, col_offset=32)], [], None, None, lineno=810, col_offset=19), lineno=810, col_offset=12)], [], lineno=808, col_offset=8), FunctionDef('_find_w9xpopen', arguments([Name('self', Param(), lineno=815, col_offset=27)], None, None, []), [Expr(Str('Find and return absolut path to w9xpopen.exe', lineno=816, col_offset=12), lineno=816, col_offset=12), Assign([Name('w9xpopen', Store(), lineno=817, col_offset=12)], Call(Attribute(Attribute(Name('os', Load(), lineno=817, col_offset=23), 'path', Load(), lineno=817, col_offset=23), 'join', Load(), lineno=817, col_offset=23), [Call(Attribute(Attribute(Name('os', Load(), lineno=818, col_offset=28), 'path', Load(), lineno=818, col_offset=28), 'dirname', Load(), lineno=818, col_offset=28), [Call(Attribute(Name('_subprocess', Load(), lineno=818, col_offset=44), 'GetModuleFileName', Load(), lineno=818, col_offset=44), [Num(0, lineno=818, col_offset=74)], [], None, None, lineno=818, col_offset=44)], [], None, None, lineno=818, col_offset=28), Str('w9xpopen.exe', lineno=819, col_offset=36)], [], None, None, lineno=817, col_offset=23), lineno=817, col_offset=12), If(UnaryOp(Not(), Call(Attribute(Attribute(Name('os', Load(), lineno=820, col_offset=19), 'path', Load(), lineno=820, col_offset=19), 'exists', Load(), lineno=820, col_offset=19), [Name('w9xpopen', Load(), lineno=820, col_offset=34)], [], None, None, lineno=820, col_offset=19), lineno=820, col_offset=15), [Assign([Name('w9xpopen', Store(), lineno=823, col_offset=16)], Call(Attribute(Attribute(Name('os', Load(), lineno=823, col_offset=27), 'path', Load(), lineno=823, col_offset=27), 'join', Load(), lineno=823, col_offset=27), [Call(Attribute(Attribute(Name('os', Load(), lineno=823, col_offset=40), 'path', Load(), lineno=823, col_offset=40), 'dirname', Load(), lineno=823, col_offset=40), [Attribute(Name('sys', Load(), lineno=823, col_offset=56), 'exec_prefix', Load(), lineno=823, col_offset=56)], [], None, None, lineno=823, col_offset=40), Str('w9xpopen.exe', lineno=824, col_offset=40)], [], None, None, lineno=823, col_offset=27), lineno=823, col_offset=16), If(UnaryOp(Not(), Call(Attribute(Attribute(Name('os', Load(), lineno=825, col_offset=23), 'path', Load(), lineno=825, col_offset=23), 'exists', Load(), lineno=825, col_offset=23), [Name('w9xpopen', Load(), lineno=825, col_offset=38)], [], None, None, lineno=825, col_offset=23), lineno=825, col_offset=19), [Raise(Call(Name('RuntimeError', Load(), lineno=826, col_offset=26), [Str('Cannot locate w9xpopen.exe, which is needed for Popen to work with your shell or platform.', lineno=826, col_offset=39)], [], None, None, lineno=826, col_offset=26), None, None, lineno=826, col_offset=20)], [], lineno=825, col_offset=16)], [], lineno=820, col_offset=12), Return(Name('w9xpopen', Load(), lineno=829, col_offset=19), lineno=829, col_offset=12)], [], lineno=815, col_offset=8), FunctionDef('_execute_child', arguments([Name('self', Param(), lineno=832, col_offset=27), Name('args', Param(), lineno=832, col_offset=33), Name('executable', Param(), lineno=832, col_offset=39), Name('preexec_fn', Param(), lineno=832, col_offset=51), Name('close_fds', Param(), lineno=832, col_offset=63), Name('cwd', Param(), lineno=833, col_offset=27), Name('env', Param(), lineno=833, col_offset=32), Name('universal_newlines', Param(), lineno=833, col_offset=37), Name('startupinfo', Param(), lineno=834, col_offset=27), Name('creationflags', Param(), lineno=834, col_offset=40), Name('shell', Param(), lineno=834, col_offset=55), Name('p2cread', Param(), lineno=835, col_offset=27), Name('p2cwrite', Param(), lineno=835, col_offset=36), Name('c2pread', Param(), lineno=836, col_offset=27), Name('c2pwrite', Param(), lineno=836, col_offset=36), Name('errread', Param(), lineno=837, col_offset=27), Name('errwrite', Param(), lineno=837, col_offset=36)], None, None, []), [Expr(Str('Execute program (MS Windows version)', lineno=838, col_offset=12), lineno=838, col_offset=12), If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=840, col_offset=19), [Name('args', Load(), lineno=840, col_offset=30), Attribute(Name('types', Load(), lineno=840, col_offset=36), 'StringTypes', Load(), lineno=840, col_offset=36)], [], None, None, lineno=840, col_offset=19), lineno=840, col_offset=15), [Assign([Name('args', Store(), lineno=841, col_offset=16)], Call(Name('list2cmdline', Load(), lineno=841, col_offset=23), [Name('args', Load(), lineno=841, col_offset=36)], [], None, None, lineno=841, col_offset=23), lineno=841, col_offset=16)], [], lineno=840, col_offset=12), If(Compare(Name('startupinfo', Load(), lineno=844, col_offset=15), [Is()], [Name('None', Load(), lineno=844, col_offset=30)], lineno=844, col_offset=15), [Assign([Name('startupinfo', Store(), lineno=845, col_offset=16)], Call(Name('STARTUPINFO', Load(), lineno=845, col_offset=30), [], [], None, None, lineno=845, col_offset=30), lineno=845, col_offset=16)], [], lineno=844, col_offset=12), If(Compare(Name('None', Load(), lineno=846, col_offset=15), [NotIn()], [Tuple([Name('p2cread', Load(), lineno=846, col_offset=28), Name('c2pwrite', Load(), lineno=846, col_offset=37), Name('errwrite', Load(), lineno=846, col_offset=47)], Load(), lineno=846, col_offset=28)], lineno=846, col_offset=15), [AugAssign(Attribute(Name('startupinfo', Load(), lineno=847, col_offset=16), 'dwFlags', Store(), lineno=847, col_offset=16), BitOr(), Attribute(Name('_subprocess', Load(), lineno=847, col_offset=39), 'STARTF_USESTDHANDLES', Load(), lineno=847, col_offset=39), lineno=847, col_offset=16), Assign([Attribute(Name('startupinfo', Load(), lineno=848, col_offset=16), 'hStdInput', Store(), lineno=848, col_offset=16)], Name('p2cread', Load(), lineno=848, col_offset=40), lineno=848, col_offset=16), Assign([Attribute(Name('startupinfo', Load(), lineno=849, col_offset=16), 'hStdOutput', Store(), lineno=849, col_offset=16)], Name('c2pwrite', Load(), lineno=849, col_offset=41), lineno=849, col_offset=16), Assign([Attribute(Name('startupinfo', Load(), lineno=850, col_offset=16), 'hStdError', Store(), lineno=850, col_offset=16)], Name('errwrite', Load(), lineno=850, col_offset=40), lineno=850, col_offset=16)], [], lineno=846, col_offset=12), If(Name('shell', Load(), lineno=852, col_offset=15), [AugAssign(Attribute(Name('startupinfo', Load(), lineno=853, col_offset=16), 'dwFlags', Store(), lineno=853, col_offset=16), BitOr(), Attribute(Name('_subprocess', Load(), lineno=853, col_offset=39), 'STARTF_USESHOWWINDOW', Load(), lineno=853, col_offset=39), lineno=853, col_offset=16), Assign([Attribute(Name('startupinfo', Load(), lineno=854, col_offset=16), 'wShowWindow', Store(), lineno=854, col_offset=16)], Attribute(Name('_subprocess', Load(), lineno=854, col_offset=42), 'SW_HIDE', Load(), lineno=854, col_offset=42), lineno=854, col_offset=16), Assign([Name('comspec', Store(), lineno=855, col_offset=16)], Call(Attribute(Attribute(Name('os', Load(), lineno=855, col_offset=26), 'environ', Load(), lineno=855, col_offset=26), 'get', Load(), lineno=855, col_offset=26), [Str('COMSPEC', lineno=855, col_offset=41), Str('cmd.exe', lineno=855, col_offset=52)], [], None, None, lineno=855, col_offset=26), lineno=855, col_offset=16), Assign([Name('args', Store(), lineno=856, col_offset=16)], Call(Attribute(Str('{} /c "{}"', lineno=856, col_offset=23), 'format', Load(), lineno=856, col_offset=23), [Name('comspec', Load(), lineno=856, col_offset=44), Name('args', Load(), lineno=856, col_offset=53)], [], None, None, lineno=856, col_offset=23), lineno=856, col_offset=16), If(BoolOp(Or(), [Compare(Call(Attribute(Name('_subprocess', Load(), lineno=857, col_offset=20), 'GetVersion', Load(), lineno=857, col_offset=20), [], [], None, None, lineno=857, col_offset=20), [GtE()], [Num(2147483648, lineno=857, col_offset=48)], lineno=857, col_offset=20), Compare(Call(Attribute(Call(Attribute(Attribute(Name('os', Load(), lineno=858, col_offset=24), 'path', Load(), lineno=858, col_offset=24), 'basename', Load(), lineno=858, col_offset=24), [Name('comspec', Load(), lineno=858, col_offset=41)], [], None, None, lineno=858, col_offset=24), 'lower', Load(), lineno=858, col_offset=24), [], [], None, None, lineno=858, col_offset=24), [Eq()], [Str('command.com', lineno=858, col_offset=61)], lineno=858, col_offset=24)], lineno=857, col_offset=20), [Assign([Name('w9xpopen', Store(), lineno=863, col_offset=20)], Call(Attribute(Name('self', Load(), lineno=863, col_offset=31), '_find_w9xpopen', Load(), lineno=863, col_offset=31), [], [], None, None, lineno=863, col_offset=31), lineno=863, col_offset=20), Assign([Name('args', Store(), lineno=864, col_offset=20)], BinOp(Str('"%s" %s', lineno=864, col_offset=27), Mod(), Tuple([Name('w9xpopen', Load(), lineno=864, col_offset=40), Name('args', Load(), lineno=864, col_offset=50)], Load(), lineno=864, col_offset=40), lineno=864, col_offset=27), lineno=864, col_offset=20), AugAssign(Name('creationflags', Store(), lineno=871, col_offset=20), BitOr(), Attribute(Name('_subprocess', Load(), lineno=871, col_offset=37), 'CREATE_NEW_CONSOLE', Load(), lineno=871, col_offset=37), lineno=871, col_offset=20)], [], lineno=857, col_offset=16)], [], lineno=852, col_offset=12), TryFinally([TryExcept([Assign([Tuple([Name('hp', Store(), lineno=875, col_offset=16), Name('ht', Store(), lineno=875, col_offset=20), Name('pid', Store(), lineno=875, col_offset=24), Name('tid', Store(), lineno=875, col_offset=29)], Store(), lineno=875, col_offset=16)], Call(Attribute(Name('_subprocess', Load(), lineno=875, col_offset=35), 'CreateProcess', Load(), lineno=875, col_offset=35), [Name('executable', Load(), lineno=875, col_offset=61), Name('args', Load(), lineno=875, col_offset=73), Name('None', Load(), lineno=877, col_offset=41), Name('None', Load(), lineno=877, col_offset=47), Call(Name('int', Load(), lineno=878, col_offset=41), [UnaryOp(Not(), Name('close_fds', Load(), lineno=878, col_offset=49), lineno=878, col_offset=45)], [], None, None, lineno=878, col_offset=41), Name('creationflags', Load(), lineno=879, col_offset=41), Name('env', Load(), lineno=880, col_offset=41), Name('cwd', Load(), lineno=881, col_offset=41), Name('startupinfo', Load(), lineno=882, col_offset=41)], [], None, None, lineno=875, col_offset=35), lineno=875, col_offset=16)], [ExceptHandler(Attribute(Name('pywintypes', Load(), lineno=883, col_offset=19), 'error', Load(), lineno=883, col_offset=19), Name('e', Store(), lineno=883, col_offset=37), [Raise(Call(Name('WindowsError', Load(), lineno=888, col_offset=22), [], [], Attribute(Name('e', Load(), lineno=888, col_offset=36), 'args', Load(), lineno=888, col_offset=36), None, lineno=888, col_offset=22), None, None, lineno=888, col_offset=16)], lineno=883, col_offset=12)], [], lineno=874, col_offset=12)], [If(Compare(Name('p2cread', Load(), lineno=896, col_offset=19), [IsNot()], [Name('None', Load(), lineno=896, col_offset=34)], lineno=896, col_offset=19), [Expr(Call(Attribute(Name('p2cread', Load(), lineno=897, col_offset=20), 'Close', Load(), lineno=897, col_offset=20), [], [], None, None, lineno=897, col_offset=20), lineno=897, col_offset=20)], [], lineno=896, col_offset=16), If(Compare(Name('c2pwrite', Load(), lineno=898, col_offset=19), [IsNot()], [Name('None', Load(), lineno=898, col_offset=35)], lineno=898, col_offset=19), [Expr(Call(Attribute(Name('c2pwrite', Load(), lineno=899, col_offset=20), 'Close', Load(), lineno=899, col_offset=20), [], [], None, None, lineno=899, col_offset=20), lineno=899, col_offset=20)], [], lineno=898, col_offset=16), If(Compare(Name('errwrite', Load(), lineno=900, col_offset=19), [IsNot()], [Name('None', Load(), lineno=900, col_offset=35)], lineno=900, col_offset=19), [Expr(Call(Attribute(Name('errwrite', Load(), lineno=901, col_offset=20), 'Close', Load(), lineno=901, col_offset=20), [], [], None, None, lineno=901, col_offset=20), lineno=901, col_offset=20)], [], lineno=900, col_offset=16)], lineno=874, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=904, col_offset=12), '_child_created', Store(), lineno=904, col_offset=12)], Name('True', Load(), lineno=904, col_offset=34), lineno=904, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=905, col_offset=12), '_handle', Store(), lineno=905, col_offset=12)], Name('hp', Load(), lineno=905, col_offset=27), lineno=905, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=906, col_offset=12), 'pid', Store(), lineno=906, col_offset=12)], Name('pid', Load(), lineno=906, col_offset=23), lineno=906, col_offset=12), Expr(Call(Attribute(Name('ht', Load(), lineno=907, col_offset=12), 'Close', Load(), lineno=907, col_offset=12), [], [], None, None, lineno=907, col_offset=12), lineno=907, col_offset=12)], [], lineno=832, col_offset=8), FunctionDef('_internal_poll', arguments([Name('self', Param(), lineno=909, col_offset=27), Name('_deadstate', Param(), lineno=909, col_offset=33), Name('_WaitForSingleObject', Param(), lineno=910, col_offset=16), Name('_WAIT_OBJECT_0', Param(), lineno=911, col_offset=16), Name('_GetExitCodeProcess', Param(), lineno=912, col_offset=16)], None, None, [Name('None', Load(), lineno=909, col_offset=44), Attribute(Name('_subprocess', Load(), lineno=910, col_offset=37), 'WaitForSingleObject', Load(), lineno=910, col_offset=37), Attribute(Name('_subprocess', Load(), lineno=911, col_offset=31), 'WAIT_OBJECT_0', Load(), lineno=911, col_offset=31), Attribute(Name('_subprocess', Load(), lineno=912, col_offset=36), 'GetExitCodeProcess', Load(), lineno=912, col_offset=36)]), [Expr(Str('Check if child process has terminated.  Returns returncode\n            attribute.\n\n            This method is called by __del__, so it can only refer to objects\n            in its local scope.\n\n            ', lineno=919, col_offset=-1), lineno=919, col_offset=-1), If(Compare(Attribute(Name('self', Load(), lineno=920, col_offset=15), 'returncode', Load(), lineno=920, col_offset=15), [Is()], [Name('None', Load(), lineno=920, col_offset=34)], lineno=920, col_offset=15), [If(Compare(Call(Name('_WaitForSingleObject', Load(), lineno=921, col_offset=19), [Attribute(Name('self', Load(), lineno=921, col_offset=40), '_handle', Load(), lineno=921, col_offset=40), Num(0, lineno=921, col_offset=54)], [], None, None, lineno=921, col_offset=19), [Eq()], [Name('_WAIT_OBJECT_0', Load(), lineno=921, col_offset=60)], lineno=921, col_offset=19), [Assign([Attribute(Name('self', Load(), lineno=922, col_offset=20), 'returncode', Store(), lineno=922, col_offset=20)], Call(Name('_GetExitCodeProcess', Load(), lineno=922, col_offset=38), [Attribute(Name('self', Load(), lineno=922, col_offset=58), '_handle', Load(), lineno=922, col_offset=58)], [], None, None, lineno=922, col_offset=38), lineno=922, col_offset=20)], [], lineno=921, col_offset=16)], [], lineno=920, col_offset=12), Return(Attribute(Name('self', Load(), lineno=923, col_offset=19), 'returncode', Load(), lineno=923, col_offset=19), lineno=923, col_offset=12)], [], lineno=909, col_offset=8), FunctionDef('wait', arguments([Name('self', Param(), lineno=926, col_offset=17)], None, None, []), [Expr(Str('Wait for child process to terminate.  Returns returncode\n            attribute.', lineno=928, col_offset=-1), lineno=928, col_offset=-1), If(Compare(Attribute(Name('self', Load(), lineno=929, col_offset=15), 'returncode', Load(), lineno=929, col_offset=15), [Is()], [Name('None', Load(), lineno=929, col_offset=34)], lineno=929, col_offset=15), [Expr(Call(Attribute(Name('_subprocess', Load(), lineno=930, col_offset=16), 'WaitForSingleObject', Load(), lineno=930, col_offset=16), [Attribute(Name('self', Load(), lineno=930, col_offset=48), '_handle', Load(), lineno=930, col_offset=48), Attribute(Name('_subprocess', Load(), lineno=931, col_offset=48), 'INFINITE', Load(), lineno=931, col_offset=48)], [], None, None, lineno=930, col_offset=16), lineno=930, col_offset=16), Assign([Attribute(Name('self', Load(), lineno=932, col_offset=16), 'returncode', Store(), lineno=932, col_offset=16)], Call(Attribute(Name('_subprocess', Load(), lineno=932, col_offset=34), 'GetExitCodeProcess', Load(), lineno=932, col_offset=34), [Attribute(Name('self', Load(), lineno=932, col_offset=65), '_handle', Load(), lineno=932, col_offset=65)], [], None, None, lineno=932, col_offset=34), lineno=932, col_offset=16)], [], lineno=929, col_offset=12), Return(Attribute(Name('self', Load(), lineno=933, col_offset=19), 'returncode', Load(), lineno=933, col_offset=19), lineno=933, col_offset=12)], [], lineno=926, col_offset=8), FunctionDef('_readerthread', arguments([Name('self', Param(), lineno=936, col_offset=26), Name('fh', Param(), lineno=936, col_offset=32), Name('buffer', Param(), lineno=936, col_offset=36)], None, None, []), [Expr(Call(Attribute(Name('buffer', Load(), lineno=937, col_offset=12), 'append', Load(), lineno=937, col_offset=12), [Call(Attribute(Name('fh', Load(), lineno=937, col_offset=26), 'read', Load(), lineno=937, col_offset=26), [], [], None, None, lineno=937, col_offset=26)], [], None, None, lineno=937, col_offset=12), lineno=937, col_offset=12)], [], lineno=936, col_offset=8), FunctionDef('_communicate', arguments([Name('self', Param(), lineno=940, col_offset=25), Name('input', Param(), lineno=940, col_offset=31)], None, None, []), [Assign([Name('stdout', Store(), lineno=941, col_offset=12)], Name('None', Load(), lineno=941, col_offset=21), lineno=941, col_offset=12), Assign([Name('stderr', Store(), lineno=942, col_offset=12)], Name('None', Load(), lineno=942, col_offset=21), lineno=942, col_offset=12), If(Attribute(Name('self', Load(), lineno=944, col_offset=15), 'stdout', Load(), lineno=944, col_offset=15), [Assign([Name('stdout', Store(), lineno=945, col_offset=16)], List([], Load(), lineno=945, col_offset=25), lineno=945, col_offset=16), Assign([Name('stdout_thread', Store(), lineno=946, col_offset=16)], Call(Attribute(Name('threading', Load(), lineno=946, col_offset=32), 'Thread', Load(), lineno=946, col_offset=32), [], [keyword('target', Attribute(Name('self', Load(), lineno=946, col_offset=56), '_readerthread', Load(), lineno=946, col_offset=56)), keyword('args', Tuple([Attribute(Name('self', Load(), lineno=947, col_offset=55), 'stdout', Load(), lineno=947, col_offset=55), Name('stdout', Load(), lineno=947, col_offset=68)], Load(), lineno=947, col_offset=55))], None, None, lineno=946, col_offset=32), lineno=946, col_offset=16), Expr(Call(Attribute(Name('stdout_thread', Load(), lineno=948, col_offset=16), 'setDaemon', Load(), lineno=948, col_offset=16), [Name('True', Load(), lineno=948, col_offset=40)], [], None, None, lineno=948, col_offset=16), lineno=948, col_offset=16), Expr(Call(Attribute(Name('stdout_thread', Load(), lineno=949, col_offset=16), 'start', Load(), lineno=949, col_offset=16), [], [], None, None, lineno=949, col_offset=16), lineno=949, col_offset=16)], [], lineno=944, col_offset=12), If(Attribute(Name('self', Load(), lineno=950, col_offset=15), 'stderr', Load(), lineno=950, col_offset=15), [Assign([Name('stderr', Store(), lineno=951, col_offset=16)], List([], Load(), lineno=951, col_offset=25), lineno=951, col_offset=16), Assign([Name('stderr_thread', Store(), lineno=952, col_offset=16)], Call(Attribute(Name('threading', Load(), lineno=952, col_offset=32), 'Thread', Load(), lineno=952, col_offset=32), [], [keyword('target', Attribute(Name('self', Load(), lineno=952, col_offset=56), '_readerthread', Load(), lineno=952, col_offset=56)), keyword('args', Tuple([Attribute(Name('self', Load(), lineno=953, col_offset=55), 'stderr', Load(), lineno=953, col_offset=55), Name('stderr', Load(), lineno=953, col_offset=68)], Load(), lineno=953, col_offset=55))], None, None, lineno=952, col_offset=32), lineno=952, col_offset=16), Expr(Call(Attribute(Name('stderr_thread', Load(), lineno=954, col_offset=16), 'setDaemon', Load(), lineno=954, col_offset=16), [Name('True', Load(), lineno=954, col_offset=40)], [], None, None, lineno=954, col_offset=16), lineno=954, col_offset=16), Expr(Call(Attribute(Name('stderr_thread', Load(), lineno=955, col_offset=16), 'start', Load(), lineno=955, col_offset=16), [], [], None, None, lineno=955, col_offset=16), lineno=955, col_offset=16)], [], lineno=950, col_offset=12), If(Attribute(Name('self', Load(), lineno=957, col_offset=15), 'stdin', Load(), lineno=957, col_offset=15), [If(Compare(Name('input', Load(), lineno=958, col_offset=19), [IsNot()], [Name('None', Load(), lineno=958, col_offset=32)], lineno=958, col_offset=19), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=959, col_offset=20), 'stdin', Load(), lineno=959, col_offset=20), 'write', Load(), lineno=959, col_offset=20), [Name('input', Load(), lineno=959, col_offset=37)], [], None, None, lineno=959, col_offset=20), lineno=959, col_offset=20)], [], lineno=958, col_offset=16), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=960, col_offset=16), 'stdin', Load(), lineno=960, col_offset=16), 'close', Load(), lineno=960, col_offset=16), [], [], None, None, lineno=960, col_offset=16), lineno=960, col_offset=16)], [], lineno=957, col_offset=12), If(Attribute(Name('self', Load(), lineno=962, col_offset=15), 'stdout', Load(), lineno=962, col_offset=15), [Expr(Call(Attribute(Name('stdout_thread', Load(), lineno=963, col_offset=16), 'join', Load(), lineno=963, col_offset=16), [], [], None, None, lineno=963, col_offset=16), lineno=963, col_offset=16)], [], lineno=962, col_offset=12), If(Attribute(Name('self', Load(), lineno=964, col_offset=15), 'stderr', Load(), lineno=964, col_offset=15), [Expr(Call(Attribute(Name('stderr_thread', Load(), lineno=965, col_offset=16), 'join', Load(), lineno=965, col_offset=16), [], [], None, None, lineno=965, col_offset=16), lineno=965, col_offset=16)], [], lineno=964, col_offset=12), If(Compare(Name('stdout', Load(), lineno=968, col_offset=15), [IsNot()], [Name('None', Load(), lineno=968, col_offset=29)], lineno=968, col_offset=15), [Assign([Name('stdout', Store(), lineno=969, col_offset=16)], Subscript(Name('stdout', Load(), lineno=969, col_offset=25), Index(Num(0, lineno=969, col_offset=32)), Load(), lineno=969, col_offset=25), lineno=969, col_offset=16)], [], lineno=968, col_offset=12), If(Compare(Name('stderr', Load(), lineno=970, col_offset=15), [IsNot()], [Name('None', Load(), lineno=970, col_offset=29)], lineno=970, col_offset=15), [Assign([Name('stderr', Store(), lineno=971, col_offset=16)], Subscript(Name('stderr', Load(), lineno=971, col_offset=25), Index(Num(0, lineno=971, col_offset=32)), Load(), lineno=971, col_offset=25), lineno=971, col_offset=16)], [], lineno=970, col_offset=12), If(BoolOp(And(), [Attribute(Name('self', Load(), lineno=977, col_offset=15), 'universal_newlines', Load(), lineno=977, col_offset=15), Call(Name('hasattr', Load(), lineno=977, col_offset=43), [Name('file', Load(), lineno=977, col_offset=51), Str('newlines', lineno=977, col_offset=57)], [], None, None, lineno=977, col_offset=43)], lineno=977, col_offset=15), [If(Name('stdout', Load(), lineno=978, col_offset=19), [Assign([Name('stdout', Store(), lineno=979, col_offset=20)], Call(Attribute(Name('self', Load(), lineno=979, col_offset=29), '_translate_newlines', Load(), lineno=979, col_offset=29), [Name('stdout', Load(), lineno=979, col_offset=54)], [], None, None, lineno=979, col_offset=29), lineno=979, col_offset=20)], [], lineno=978, col_offset=16), If(Name('stderr', Load(), lineno=980, col_offset=19), [Assign([Name('stderr', Store(), lineno=981, col_offset=20)], Call(Attribute(Name('self', Load(), lineno=981, col_offset=29), '_translate_newlines', Load(), lineno=981, col_offset=29), [Name('stderr', Load(), lineno=981, col_offset=54)], [], None, None, lineno=981, col_offset=29), lineno=981, col_offset=20)], [], lineno=980, col_offset=16)], [], lineno=977, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=983, col_offset=12), 'wait', Load(), lineno=983, col_offset=12), [], [], None, None, lineno=983, col_offset=12), lineno=983, col_offset=12), Return(Tuple([Name('stdout', Load(), lineno=984, col_offset=20), Name('stderr', Load(), lineno=984, col_offset=28)], Load(), lineno=984, col_offset=20), lineno=984, col_offset=12)], [], lineno=940, col_offset=8), FunctionDef('send_signal', arguments([Name('self', Param(), lineno=986, col_offset=24), Name('sig', Param(), lineno=986, col_offset=30)], None, None, []), [Expr(Str('Send a signal to the process\n            ', lineno=988, col_offset=-1), lineno=988, col_offset=-1), If(Compare(Name('sig', Load(), lineno=989, col_offset=15), [Eq()], [Attribute(Name('signal', Load(), lineno=989, col_offset=22), 'SIGTERM', Load(), lineno=989, col_offset=22)], lineno=989, col_offset=15), [Expr(Call(Attribute(Name('self', Load(), lineno=990, col_offset=16), 'terminate', Load(), lineno=990, col_offset=16), [], [], None, None, lineno=990, col_offset=16), lineno=990, col_offset=16)], [If(Compare(Name('sig', Load(), lineno=991, col_offset=17), [Eq()], [Attribute(Name('signal', Load(), lineno=991, col_offset=24), 'CTRL_C_EVENT', Load(), lineno=991, col_offset=24)], lineno=991, col_offset=17), [Expr(Call(Attribute(Name('os', Load(), lineno=992, col_offset=16), 'kill', Load(), lineno=992, col_offset=16), [Attribute(Name('self', Load(), lineno=992, col_offset=24), 'pid', Load(), lineno=992, col_offset=24), Attribute(Name('signal', Load(), lineno=992, col_offset=34), 'CTRL_C_EVENT', Load(), lineno=992, col_offset=34)], [], None, None, lineno=992, col_offset=16), lineno=992, col_offset=16)], [If(Compare(Name('sig', Load(), lineno=993, col_offset=17), [Eq()], [Attribute(Name('signal', Load(), lineno=993, col_offset=24), 'CTRL_BREAK_EVENT', Load(), lineno=993, col_offset=24)], lineno=993, col_offset=17), [Expr(Call(Attribute(Name('os', Load(), lineno=994, col_offset=16), 'kill', Load(), lineno=994, col_offset=16), [Attribute(Name('self', Load(), lineno=994, col_offset=24), 'pid', Load(), lineno=994, col_offset=24), Attribute(Name('signal', Load(), lineno=994, col_offset=34), 'CTRL_BREAK_EVENT', Load(), lineno=994, col_offset=34)], [], None, None, lineno=994, col_offset=16), lineno=994, col_offset=16)], [Raise(Call(Name('ValueError', Load(), lineno=996, col_offset=22), [Call(Attribute(Str('Unsupported signal: {}', lineno=996, col_offset=33), 'format', Load(), lineno=996, col_offset=33), [Name('sig', Load(), lineno=996, col_offset=65)], [], None, None, lineno=996, col_offset=33)], [], None, None, lineno=996, col_offset=22), None, None, lineno=996, col_offset=16)], lineno=993, col_offset=17)], lineno=991, col_offset=17)], lineno=989, col_offset=12)], [], lineno=986, col_offset=8), FunctionDef('terminate', arguments([Name('self', Param(), lineno=998, col_offset=22)], None, None, []), [Expr(Str('Terminates the process\n            ', lineno=1000, col_offset=-1), lineno=1000, col_offset=-1), Expr(Call(Attribute(Name('_subprocess', Load(), lineno=1001, col_offset=12), 'TerminateProcess', Load(), lineno=1001, col_offset=12), [Attribute(Name('self', Load(), lineno=1001, col_offset=41), '_handle', Load(), lineno=1001, col_offset=41), Num(1, lineno=1001, col_offset=55)], [], None, None, lineno=1001, col_offset=12), lineno=1001, col_offset=12)], [], lineno=998, col_offset=8), Assign([Name('kill', Store(), lineno=1003, col_offset=8)], Name('terminate', Load(), lineno=1003, col_offset=15), lineno=1003, col_offset=8)], [FunctionDef('_get_handles', arguments([Name('self', Param(), lineno=1009, col_offset=25), Name('stdin', Param(), lineno=1009, col_offset=31), Name('stdout', Param(), lineno=1009, col_offset=38), Name('stderr', Param(), lineno=1009, col_offset=46)], None, None, []), [Expr(Str('Construct and return tuple with IO objects:\n            p2cread, p2cwrite, c2pread, c2pwrite, errread, errwrite\n            ', lineno=1012, col_offset=-1), lineno=1012, col_offset=-1), Assign([Tuple([Name('p2cread', Store(), lineno=1013, col_offset=12), Name('p2cwrite', Store(), lineno=1013, col_offset=21)], Store(), lineno=1013, col_offset=12)], Tuple([Name('None', Load(), lineno=1013, col_offset=32), Name('None', Load(), lineno=1013, col_offset=38)], Load(), lineno=1013, col_offset=32), lineno=1013, col_offset=12), Assign([Tuple([Name('c2pread', Store(), lineno=1014, col_offset=12), Name('c2pwrite', Store(), lineno=1014, col_offset=21)], Store(), lineno=1014, col_offset=12)], Tuple([Name('None', Load(), lineno=1014, col_offset=32), Name('None', Load(), lineno=1014, col_offset=38)], Load(), lineno=1014, col_offset=32), lineno=1014, col_offset=12), Assign([Tuple([Name('errread', Store(), lineno=1015, col_offset=12), Name('errwrite', Store(), lineno=1015, col_offset=21)], Store(), lineno=1015, col_offset=12)], Tuple([Name('None', Load(), lineno=1015, col_offset=32), Name('None', Load(), lineno=1015, col_offset=38)], Load(), lineno=1015, col_offset=32), lineno=1015, col_offset=12), If(Compare(Name('stdin', Load(), lineno=1017, col_offset=15), [Is()], [Name('None', Load(), lineno=1017, col_offset=24)], lineno=1017, col_offset=15), [Pass( lineno=1018, col_offset=16)], [If(Compare(Name('stdin', Load(), lineno=1019, col_offset=17), [Eq()], [Name('PIPE', Load(), lineno=1019, col_offset=26)], lineno=1019, col_offset=17), [Assign([Tuple([Name('p2cread', Store(), lineno=1020, col_offset=16), Name('p2cwrite', Store(), lineno=1020, col_offset=25)], Store(), lineno=1020, col_offset=16)], Call(Attribute(Name('os', Load(), lineno=1020, col_offset=36), 'pipe', Load(), lineno=1020, col_offset=36), [], [], None, None, lineno=1020, col_offset=36), lineno=1020, col_offset=16)], [If(Call(Name('isinstance', Load(), lineno=1021, col_offset=17), [Name('stdin', Load(), lineno=1021, col_offset=28), Name('int', Load(), lineno=1021, col_offset=35)], [], None, None, lineno=1021, col_offset=17), [Assign([Name('p2cread', Store(), lineno=1022, col_offset=16)], Name('stdin', Load(), lineno=1022, col_offset=26), lineno=1022, col_offset=16)], [Assign([Name('p2cread', Store(), lineno=1025, col_offset=16)], Call(Attribute(Name('stdin', Load(), lineno=1025, col_offset=26), 'fileno', Load(), lineno=1025, col_offset=26), [], [], None, None, lineno=1025, col_offset=26), lineno=1025, col_offset=16)], lineno=1021, col_offset=17)], lineno=1019, col_offset=17)], lineno=1017, col_offset=12), If(Compare(Name('stdout', Load(), lineno=1027, col_offset=15), [Is()], [Name('None', Load(), lineno=1027, col_offset=25)], lineno=1027, col_offset=15), [Pass( lineno=1028, col_offset=16)], [If(Compare(Name('stdout', Load(), lineno=1029, col_offset=17), [Eq()], [Name('PIPE', Load(), lineno=1029, col_offset=27)], lineno=1029, col_offset=17), [Assign([Tuple([Name('c2pread', Store(), lineno=1030, col_offset=16), Name('c2pwrite', Store(), lineno=1030, col_offset=25)], Store(), lineno=1030, col_offset=16)], Call(Attribute(Name('os', Load(), lineno=1030, col_offset=36), 'pipe', Load(), lineno=1030, col_offset=36), [], [], None, None, lineno=1030, col_offset=36), lineno=1030, col_offset=16)], [If(Call(Name('isinstance', Load(), lineno=1031, col_offset=17), [Name('stdout', Load(), lineno=1031, col_offset=28), Name('int', Load(), lineno=1031, col_offset=36)], [], None, None, lineno=1031, col_offset=17), [Assign([Name('c2pwrite', Store(), lineno=1032, col_offset=16)], Name('stdout', Load(), lineno=1032, col_offset=27), lineno=1032, col_offset=16)], [Assign([Name('c2pwrite', Store(), lineno=1035, col_offset=16)], Call(Attribute(Name('stdout', Load(), lineno=1035, col_offset=27), 'fileno', Load(), lineno=1035, col_offset=27), [], [], None, None, lineno=1035, col_offset=27), lineno=1035, col_offset=16)], lineno=1031, col_offset=17)], lineno=1029, col_offset=17)], lineno=1027, col_offset=12), If(Compare(Name('stderr', Load(), lineno=1037, col_offset=15), [Is()], [Name('None', Load(), lineno=1037, col_offset=25)], lineno=1037, col_offset=15), [Pass( lineno=1038, col_offset=16)], [If(Compare(Name('stderr', Load(), lineno=1039, col_offset=17), [Eq()], [Name('PIPE', Load(), lineno=1039, col_offset=27)], lineno=1039, col_offset=17), [Assign([Tuple([Name('errread', Store(), lineno=1040, col_offset=16), Name('errwrite', Store(), lineno=1040, col_offset=25)], Store(), lineno=1040, col_offset=16)], Call(Attribute(Name('os', Load(), lineno=1040, col_offset=36), 'pipe', Load(), lineno=1040, col_offset=36), [], [], None, None, lineno=1040, col_offset=36), lineno=1040, col_offset=16)], [If(Compare(Name('stderr', Load(), lineno=1041, col_offset=17), [Eq()], [Name('STDOUT', Load(), lineno=1041, col_offset=27)], lineno=1041, col_offset=17), [Assign([Name('errwrite', Store(), lineno=1042, col_offset=16)], Name('c2pwrite', Load(), lineno=1042, col_offset=27), lineno=1042, col_offset=16)], [If(Call(Name('isinstance', Load(), lineno=1043, col_offset=17), [Name('stderr', Load(), lineno=1043, col_offset=28), Name('int', Load(), lineno=1043, col_offset=36)], [], None, None, lineno=1043, col_offset=17), [Assign([Name('errwrite', Store(), lineno=1044, col_offset=16)], Name('stderr', Load(), lineno=1044, col_offset=27), lineno=1044, col_offset=16)], [Assign([Name('errwrite', Store(), lineno=1047, col_offset=16)], Call(Attribute(Name('stderr', Load(), lineno=1047, col_offset=27), 'fileno', Load(), lineno=1047, col_offset=27), [], [], None, None, lineno=1047, col_offset=27), lineno=1047, col_offset=16)], lineno=1043, col_offset=17)], lineno=1041, col_offset=17)], lineno=1039, col_offset=17)], lineno=1037, col_offset=12), Return(Tuple([Name('p2cread', Load(), lineno=1049, col_offset=20), Name('p2cwrite', Load(), lineno=1049, col_offset=29), Name('c2pread', Load(), lineno=1050, col_offset=20), Name('c2pwrite', Load(), lineno=1050, col_offset=29), Name('errread', Load(), lineno=1051, col_offset=20), Name('errwrite', Load(), lineno=1051, col_offset=29)], Load(), lineno=1049, col_offset=20), lineno=1049, col_offset=12)], [], lineno=1009, col_offset=8), FunctionDef('_set_cloexec_flag', arguments([Name('self', Param(), lineno=1054, col_offset=30), Name('fd', Param(), lineno=1054, col_offset=36)], None, None, []), [TryExcept([Assign([Name('cloexec_flag', Store(), lineno=1056, col_offset=16)], Attribute(Name('fcntl', Load(), lineno=1056, col_offset=31), 'FD_CLOEXEC', Load(), lineno=1056, col_offset=31), lineno=1056, col_offset=16)], [ExceptHandler(Name('AttributeError', Load(), lineno=1057, col_offset=19), None, [Assign([Name('cloexec_flag', Store(), lineno=1058, col_offset=16)], Num(1, lineno=1058, col_offset=31), lineno=1058, col_offset=16)], lineno=1057, col_offset=12)], [], lineno=1055, col_offset=12), Assign([Name('old', Store(), lineno=1060, col_offset=12)], Call(Attribute(Name('fcntl', Load(), lineno=1060, col_offset=18), 'fcntl', Load(), lineno=1060, col_offset=18), [Name('fd', Load(), lineno=1060, col_offset=30), Attribute(Name('fcntl', Load(), lineno=1060, col_offset=34), 'F_GETFD', Load(), lineno=1060, col_offset=34)], [], None, None, lineno=1060, col_offset=18), lineno=1060, col_offset=12), Expr(Call(Attribute(Name('fcntl', Load(), lineno=1061, col_offset=12), 'fcntl', Load(), lineno=1061, col_offset=12), [Name('fd', Load(), lineno=1061, col_offset=24), Attribute(Name('fcntl', Load(), lineno=1061, col_offset=28), 'F_SETFD', Load(), lineno=1061, col_offset=28), BinOp(Name('old', Load(), lineno=1061, col_offset=43), BitOr(), Name('cloexec_flag', Load(), lineno=1061, col_offset=49), lineno=1061, col_offset=43)], [], None, None, lineno=1061, col_offset=12), lineno=1061, col_offset=12)], [], lineno=1054, col_offset=8), FunctionDef('_close_fds', arguments([Name('self', Param(), lineno=1064, col_offset=23), Name('but', Param(), lineno=1064, col_offset=29)], None, None, []), [If(Call(Name('hasattr', Load(), lineno=1065, col_offset=15), [Name('os', Load(), lineno=1065, col_offset=23), Str('closerange', lineno=1065, col_offset=27)], [], None, None, lineno=1065, col_offset=15), [Expr(Call(Attribute(Name('os', Load(), lineno=1066, col_offset=16), 'closerange', Load(), lineno=1066, col_offset=16), [Num(3, lineno=1066, col_offset=30), Name('but', Load(), lineno=1066, col_offset=33)], [], None, None, lineno=1066, col_offset=16), lineno=1066, col_offset=16), Expr(Call(Attribute(Name('os', Load(), lineno=1067, col_offset=16), 'closerange', Load(), lineno=1067, col_offset=16), [BinOp(Name('but', Load(), lineno=1067, col_offset=30), Add(), Num(1, lineno=1067, col_offset=36), lineno=1067, col_offset=30), Name('MAXFD', Load(), lineno=1067, col_offset=39)], [], None, None, lineno=1067, col_offset=16), lineno=1067, col_offset=16)], [For(Name('i', Store(), lineno=1069, col_offset=20), Call(Name('xrange', Load(), lineno=1069, col_offset=25), [Num(3, lineno=1069, col_offset=32), Name('MAXFD', Load(), lineno=1069, col_offset=35)], [], None, None, lineno=1069, col_offset=25), [If(Compare(Name('i', Load(), lineno=1070, col_offset=23), [Eq()], [Name('but', Load(), lineno=1070, col_offset=28)], lineno=1070, col_offset=23), [Continue( lineno=1071, col_offset=24)], [], lineno=1070, col_offset=20), TryExcept([Expr(Call(Attribute(Name('os', Load(), lineno=1073, col_offset=24), 'close', Load(), lineno=1073, col_offset=24), [Name('i', Load(), lineno=1073, col_offset=33)], [], None, None, lineno=1073, col_offset=24), lineno=1073, col_offset=24)], [ExceptHandler(None, None, [Pass( lineno=1075, col_offset=24)], lineno=1074, col_offset=20)], [], lineno=1072, col_offset=20)], [], lineno=1069, col_offset=16)], lineno=1065, col_offset=12)], [], lineno=1064, col_offset=8), FunctionDef('_execute_child', arguments([Name('self', Param(), lineno=1078, col_offset=27), Name('args', Param(), lineno=1078, col_offset=33), Name('executable', Param(), lineno=1078, col_offset=39), Name('preexec_fn', Param(), lineno=1078, col_offset=51), Name('close_fds', Param(), lineno=1078, col_offset=63), Name('cwd', Param(), lineno=1079, col_offset=27), Name('env', Param(), lineno=1079, col_offset=32), Name('universal_newlines', Param(), lineno=1079, col_offset=37), Name('startupinfo', Param(), lineno=1080, col_offset=27), Name('creationflags', Param(), lineno=1080, col_offset=40), Name('shell', Param(), lineno=1080, col_offset=55), Name('p2cread', Param(), lineno=1081, col_offset=27), Name('p2cwrite', Param(), lineno=1081, col_offset=36), Name('c2pread', Param(), lineno=1082, col_offset=27), Name('c2pwrite', Param(), lineno=1082, col_offset=36), Name('errread', Param(), lineno=1083, col_offset=27), Name('errwrite', Param(), lineno=1083, col_offset=36)], None, None, []), [Expr(Str('Execute program (POSIX version)', lineno=1084, col_offset=12), lineno=1084, col_offset=12), If(Call(Name('isinstance', Load(), lineno=1086, col_offset=15), [Name('args', Load(), lineno=1086, col_offset=26), Attribute(Name('types', Load(), lineno=1086, col_offset=32), 'StringTypes', Load(), lineno=1086, col_offset=32)], [], None, None, lineno=1086, col_offset=15), [Assign([Name('args', Store(), lineno=1087, col_offset=16)], List([Name('args', Load(), lineno=1087, col_offset=24)], Load(), lineno=1087, col_offset=23), lineno=1087, col_offset=16)], [Assign([Name('args', Store(), lineno=1089, col_offset=16)], Call(Name('list', Load(), lineno=1089, col_offset=23), [Name('args', Load(), lineno=1089, col_offset=28)], [], None, None, lineno=1089, col_offset=23), lineno=1089, col_offset=16)], lineno=1086, col_offset=12), If(Name('shell', Load(), lineno=1091, col_offset=15), [Assign([Name('args', Store(), lineno=1092, col_offset=16)], BinOp(List([Str('/bin/sh', lineno=1092, col_offset=24), Str('-c', lineno=1092, col_offset=35)], Load(), lineno=1092, col_offset=23), Add(), Name('args', Load(), lineno=1092, col_offset=43), lineno=1092, col_offset=23), lineno=1092, col_offset=16), If(Name('executable', Load(), lineno=1093, col_offset=19), [Assign([Subscript(Name('args', Load(), lineno=1094, col_offset=20), Index(Num(0, lineno=1094, col_offset=25)), Store(), lineno=1094, col_offset=20)], Name('executable', Load(), lineno=1094, col_offset=30), lineno=1094, col_offset=20)], [], lineno=1093, col_offset=16)], [], lineno=1091, col_offset=12), If(Compare(Name('executable', Load(), lineno=1096, col_offset=15), [Is()], [Name('None', Load(), lineno=1096, col_offset=29)], lineno=1096, col_offset=15), [Assign([Name('executable', Store(), lineno=1097, col_offset=16)], Subscript(Name('args', Load(), lineno=1097, col_offset=29), Index(Num(0, lineno=1097, col_offset=34)), Load(), lineno=1097, col_offset=29), lineno=1097, col_offset=16)], [], lineno=1096, col_offset=12), Assign([Tuple([Name('errpipe_read', Store(), lineno=1102, col_offset=12), Name('errpipe_write', Store(), lineno=1102, col_offset=26)], Store(), lineno=1102, col_offset=12)], Call(Attribute(Name('os', Load(), lineno=1102, col_offset=42), 'pipe', Load(), lineno=1102, col_offset=42), [], [], None, None, lineno=1102, col_offset=42), lineno=1102, col_offset=12), TryFinally([TryFinally([Expr(Call(Attribute(Name('self', Load(), lineno=1105, col_offset=20), '_set_cloexec_flag', Load(), lineno=1105, col_offset=20), [Name('errpipe_write', Load(), lineno=1105, col_offset=43)], [], None, None, lineno=1105, col_offset=20), lineno=1105, col_offset=20), Assign([Name('gc_was_enabled', Store(), lineno=1107, col_offset=20)], Call(Attribute(Name('gc', Load(), lineno=1107, col_offset=37), 'isenabled', Load(), lineno=1107, col_offset=37), [], [], None, None, lineno=1107, col_offset=37), lineno=1107, col_offset=20), Expr(Call(Attribute(Name('gc', Load(), lineno=1110, col_offset=20), 'disable', Load(), lineno=1110, col_offset=20), [], [], None, None, lineno=1110, col_offset=20), lineno=1110, col_offset=20), TryExcept([Assign([Attribute(Name('self', Load(), lineno=1112, col_offset=24), 'pid', Store(), lineno=1112, col_offset=24)], Call(Attribute(Name('os', Load(), lineno=1112, col_offset=35), 'fork', Load(), lineno=1112, col_offset=35), [], [], None, None, lineno=1112, col_offset=35), lineno=1112, col_offset=24)], [ExceptHandler(None, None, [If(Name('gc_was_enabled', Load(), lineno=1114, col_offset=27), [Expr(Call(Attribute(Name('gc', Load(), lineno=1115, col_offset=28), 'enable', Load(), lineno=1115, col_offset=28), [], [], None, None, lineno=1115, col_offset=28), lineno=1115, col_offset=28)], [], lineno=1114, col_offset=24), Raise(None, None, None, lineno=1116, col_offset=24)], lineno=1113, col_offset=20)], [], lineno=1111, col_offset=20), Assign([Attribute(Name('self', Load(), lineno=1117, col_offset=20), '_child_created', Store(), lineno=1117, col_offset=20)], Name('True', Load(), lineno=1117, col_offset=42), lineno=1117, col_offset=20), If(Compare(Attribute(Name('self', Load(), lineno=1118, col_offset=23), 'pid', Load(), lineno=1118, col_offset=23), [Eq()], [Num(0, lineno=1118, col_offset=35)], lineno=1118, col_offset=23), [TryExcept([If(Compare(Name('p2cwrite', Load(), lineno=1122, col_offset=31), [IsNot()], [Name('None', Load(), lineno=1122, col_offset=47)], lineno=1122, col_offset=31), [Expr(Call(Attribute(Name('os', Load(), lineno=1123, col_offset=32), 'close', Load(), lineno=1123, col_offset=32), [Name('p2cwrite', Load(), lineno=1123, col_offset=41)], [], None, None, lineno=1123, col_offset=32), lineno=1123, col_offset=32)], [], lineno=1122, col_offset=28), If(Compare(Name('c2pread', Load(), lineno=1124, col_offset=31), [IsNot()], [Name('None', Load(), lineno=1124, col_offset=46)], lineno=1124, col_offset=31), [Expr(Call(Attribute(Name('os', Load(), lineno=1125, col_offset=32), 'close', Load(), lineno=1125, col_offset=32), [Name('c2pread', Load(), lineno=1125, col_offset=41)], [], None, None, lineno=1125, col_offset=32), lineno=1125, col_offset=32)], [], lineno=1124, col_offset=28), If(Compare(Name('errread', Load(), lineno=1126, col_offset=31), [IsNot()], [Name('None', Load(), lineno=1126, col_offset=46)], lineno=1126, col_offset=31), [Expr(Call(Attribute(Name('os', Load(), lineno=1127, col_offset=32), 'close', Load(), lineno=1127, col_offset=32), [Name('errread', Load(), lineno=1127, col_offset=41)], [], None, None, lineno=1127, col_offset=32), lineno=1127, col_offset=32)], [], lineno=1126, col_offset=28), Expr(Call(Attribute(Name('os', Load(), lineno=1128, col_offset=28), 'close', Load(), lineno=1128, col_offset=28), [Name('errpipe_read', Load(), lineno=1128, col_offset=37)], [], None, None, lineno=1128, col_offset=28), lineno=1128, col_offset=28), If(Compare(Name('p2cread', Load(), lineno=1131, col_offset=31), [IsNot()], [Name('None', Load(), lineno=1131, col_offset=46)], lineno=1131, col_offset=31), [Expr(Call(Attribute(Name('os', Load(), lineno=1132, col_offset=32), 'dup2', Load(), lineno=1132, col_offset=32), [Name('p2cread', Load(), lineno=1132, col_offset=40), Num(0, lineno=1132, col_offset=49)], [], None, None, lineno=1132, col_offset=32), lineno=1132, col_offset=32)], [], lineno=1131, col_offset=28), If(Compare(Name('c2pwrite', Load(), lineno=1133, col_offset=31), [IsNot()], [Name('None', Load(), lineno=1133, col_offset=47)], lineno=1133, col_offset=31), [Expr(Call(Attribute(Name('os', Load(), lineno=1134, col_offset=32), 'dup2', Load(), lineno=1134, col_offset=32), [Name('c2pwrite', Load(), lineno=1134, col_offset=40), Num(1, lineno=1134, col_offset=50)], [], None, None, lineno=1134, col_offset=32), lineno=1134, col_offset=32)], [], lineno=1133, col_offset=28), If(Compare(Name('errwrite', Load(), lineno=1135, col_offset=31), [IsNot()], [Name('None', Load(), lineno=1135, col_offset=47)], lineno=1135, col_offset=31), [Expr(Call(Attribute(Name('os', Load(), lineno=1136, col_offset=32), 'dup2', Load(), lineno=1136, col_offset=32), [Name('errwrite', Load(), lineno=1136, col_offset=40), Num(2, lineno=1136, col_offset=50)], [], None, None, lineno=1136, col_offset=32), lineno=1136, col_offset=32)], [], lineno=1135, col_offset=28), If(BoolOp(And(), [Compare(Name('p2cread', Load(), lineno=1140, col_offset=31), [IsNot()], [Name('None', Load(), lineno=1140, col_offset=46)], lineno=1140, col_offset=31), Compare(Name('p2cread', Load(), lineno=1140, col_offset=55), [NotIn()], [Tuple([Num(0, lineno=1140, col_offset=71)], Load(), lineno=1140, col_offset=71)], lineno=1140, col_offset=55)], lineno=1140, col_offset=31), [Expr(Call(Attribute(Name('os', Load(), lineno=1141, col_offset=32), 'close', Load(), lineno=1141, col_offset=32), [Name('p2cread', Load(), lineno=1141, col_offset=41)], [], None, None, lineno=1141, col_offset=32), lineno=1141, col_offset=32)], [], lineno=1140, col_offset=28), If(BoolOp(And(), [Compare(Name('c2pwrite', Load(), lineno=1142, col_offset=31), [IsNot()], [Name('None', Load(), lineno=1142, col_offset=47)], lineno=1142, col_offset=31), Compare(Name('c2pwrite', Load(), lineno=1142, col_offset=56), [NotIn()], [Tuple([Name('p2cread', Load(), lineno=1142, col_offset=73), Num(1, lineno=1142, col_offset=82)], Load(), lineno=1142, col_offset=73)], lineno=1142, col_offset=56)], lineno=1142, col_offset=31), [Expr(Call(Attribute(Name('os', Load(), lineno=1143, col_offset=32), 'close', Load(), lineno=1143, col_offset=32), [Name('c2pwrite', Load(), lineno=1143, col_offset=41)], [], None, None, lineno=1143, col_offset=32), lineno=1143, col_offset=32)], [], lineno=1142, col_offset=28), If(BoolOp(And(), [Compare(Name('errwrite', Load(), lineno=1144, col_offset=31), [IsNot()], [Name('None', Load(), lineno=1144, col_offset=47)], lineno=1144, col_offset=31), Compare(Name('errwrite', Load(), lineno=1144, col_offset=56), [NotIn()], [Tuple([Name('p2cread', Load(), lineno=1144, col_offset=73), Name('c2pwrite', Load(), lineno=1144, col_offset=82), Num(2, lineno=1144, col_offset=92)], Load(), lineno=1144, col_offset=73)], lineno=1144, col_offset=56)], lineno=1144, col_offset=31), [Expr(Call(Attribute(Name('os', Load(), lineno=1145, col_offset=32), 'close', Load(), lineno=1145, col_offset=32), [Name('errwrite', Load(), lineno=1145, col_offset=41)], [], None, None, lineno=1145, col_offset=32), lineno=1145, col_offset=32)], [], lineno=1144, col_offset=28), If(Name('close_fds', Load(), lineno=1148, col_offset=31), [Expr(Call(Attribute(Name('self', Load(), lineno=1149, col_offset=32), '_close_fds', Load(), lineno=1149, col_offset=32), [], [keyword('but', Name('errpipe_write', Load(), lineno=1149, col_offset=52))], None, None, lineno=1149, col_offset=32), lineno=1149, col_offset=32)], [], lineno=1148, col_offset=28), If(Compare(Name('cwd', Load(), lineno=1151, col_offset=31), [IsNot()], [Name('None', Load(), lineno=1151, col_offset=42)], lineno=1151, col_offset=31), [Expr(Call(Attribute(Name('os', Load(), lineno=1152, col_offset=32), 'chdir', Load(), lineno=1152, col_offset=32), [Name('cwd', Load(), lineno=1152, col_offset=41)], [], None, None, lineno=1152, col_offset=32), lineno=1152, col_offset=32)], [], lineno=1151, col_offset=28), If(Name('preexec_fn', Load(), lineno=1154, col_offset=31), [Expr(Call(Name('preexec_fn', Load(), lineno=1155, col_offset=32), [], [], None, None, lineno=1155, col_offset=32), lineno=1155, col_offset=32)], [], lineno=1154, col_offset=28), If(Compare(Name('env', Load(), lineno=1157, col_offset=31), [Is()], [Name('None', Load(), lineno=1157, col_offset=38)], lineno=1157, col_offset=31), [Expr(Call(Attribute(Name('os', Load(), lineno=1158, col_offset=32), 'execvp', Load(), lineno=1158, col_offset=32), [Name('executable', Load(), lineno=1158, col_offset=42), Name('args', Load(), lineno=1158, col_offset=54)], [], None, None, lineno=1158, col_offset=32), lineno=1158, col_offset=32)], [Expr(Call(Attribute(Name('os', Load(), lineno=1160, col_offset=32), 'execvpe', Load(), lineno=1160, col_offset=32), [Name('executable', Load(), lineno=1160, col_offset=43), Name('args', Load(), lineno=1160, col_offset=55), Name('env', Load(), lineno=1160, col_offset=61)], [], None, None, lineno=1160, col_offset=32), lineno=1160, col_offset=32)], lineno=1157, col_offset=28)], [ExceptHandler(None, None, [Assign([Tuple([Name('exc_type', Store(), lineno=1163, col_offset=28), Name('exc_value', Store(), lineno=1163, col_offset=38), Name('tb', Store(), lineno=1163, col_offset=49)], Store(), lineno=1163, col_offset=28)], Call(Attribute(Name('sys', Load(), lineno=1163, col_offset=54), 'exc_info', Load(), lineno=1163, col_offset=54), [], [], None, None, lineno=1163, col_offset=54), lineno=1163, col_offset=28), Assign([Name('exc_lines', Store(), lineno=1165, col_offset=28)], Call(Attribute(Name('traceback', Load(), lineno=1165, col_offset=40), 'format_exception', Load(), lineno=1165, col_offset=40), [Name('exc_type', Load(), lineno=1165, col_offset=67), Name('exc_value', Load(), lineno=1166, col_offset=67), Name('tb', Load(), lineno=1167, col_offset=67)], [], None, None, lineno=1165, col_offset=40), lineno=1165, col_offset=28), Assign([Attribute(Name('exc_value', Load(), lineno=1168, col_offset=28), 'child_traceback', Store(), lineno=1168, col_offset=28)], Call(Attribute(Str('', lineno=1168, col_offset=56), 'join', Load(), lineno=1168, col_offset=56), [Name('exc_lines', Load(), lineno=1168, col_offset=64)], [], None, None, lineno=1168, col_offset=56), lineno=1168, col_offset=28), Expr(Call(Attribute(Name('os', Load(), lineno=1169, col_offset=28), 'write', Load(), lineno=1169, col_offset=28), [Name('errpipe_write', Load(), lineno=1169, col_offset=37), Call(Attribute(Name('pickle', Load(), lineno=1169, col_offset=52), 'dumps', Load(), lineno=1169, col_offset=52), [Name('exc_value', Load(), lineno=1169, col_offset=65)], [], None, None, lineno=1169, col_offset=52)], [], None, None, lineno=1169, col_offset=28), lineno=1169, col_offset=28)], lineno=1162, col_offset=24)], [], lineno=1120, col_offset=24), Expr(Call(Attribute(Name('os', Load(), lineno=1173, col_offset=24), '_exit', Load(), lineno=1173, col_offset=24), [Num(255, lineno=1173, col_offset=33)], [], None, None, lineno=1173, col_offset=24), lineno=1173, col_offset=24)], [], lineno=1118, col_offset=20), If(Name('gc_was_enabled', Load(), lineno=1176, col_offset=23), [Expr(Call(Attribute(Name('gc', Load(), lineno=1177, col_offset=24), 'enable', Load(), lineno=1177, col_offset=24), [], [], None, None, lineno=1177, col_offset=24), lineno=1177, col_offset=24)], [], lineno=1176, col_offset=20)], [Expr(Call(Attribute(Name('os', Load(), lineno=1180, col_offset=20), 'close', Load(), lineno=1180, col_offset=20), [Name('errpipe_write', Load(), lineno=1180, col_offset=29)], [], None, None, lineno=1180, col_offset=20), lineno=1180, col_offset=20)], lineno=1104, col_offset=16), If(BoolOp(And(), [Compare(Name('p2cread', Load(), lineno=1182, col_offset=19), [IsNot()], [Name('None', Load(), lineno=1182, col_offset=34)], lineno=1182, col_offset=19), Compare(Name('p2cwrite', Load(), lineno=1182, col_offset=43), [IsNot()], [Name('None', Load(), lineno=1182, col_offset=59)], lineno=1182, col_offset=43)], lineno=1182, col_offset=19), [Expr(Call(Attribute(Name('os', Load(), lineno=1183, col_offset=20), 'close', Load(), lineno=1183, col_offset=20), [Name('p2cread', Load(), lineno=1183, col_offset=29)], [], None, None, lineno=1183, col_offset=20), lineno=1183, col_offset=20)], [], lineno=1182, col_offset=16), If(BoolOp(And(), [Compare(Name('c2pwrite', Load(), lineno=1184, col_offset=19), [IsNot()], [Name('None', Load(), lineno=1184, col_offset=35)], lineno=1184, col_offset=19), Compare(Name('c2pread', Load(), lineno=1184, col_offset=44), [IsNot()], [Name('None', Load(), lineno=1184, col_offset=59)], lineno=1184, col_offset=44)], lineno=1184, col_offset=19), [Expr(Call(Attribute(Name('os', Load(), lineno=1185, col_offset=20), 'close', Load(), lineno=1185, col_offset=20), [Name('c2pwrite', Load(), lineno=1185, col_offset=29)], [], None, None, lineno=1185, col_offset=20), lineno=1185, col_offset=20)], [], lineno=1184, col_offset=16), If(BoolOp(And(), [Compare(Name('errwrite', Load(), lineno=1186, col_offset=19), [IsNot()], [Name('None', Load(), lineno=1186, col_offset=35)], lineno=1186, col_offset=19), Compare(Name('errread', Load(), lineno=1186, col_offset=44), [IsNot()], [Name('None', Load(), lineno=1186, col_offset=59)], lineno=1186, col_offset=44)], lineno=1186, col_offset=19), [Expr(Call(Attribute(Name('os', Load(), lineno=1187, col_offset=20), 'close', Load(), lineno=1187, col_offset=20), [Name('errwrite', Load(), lineno=1187, col_offset=29)], [], None, None, lineno=1187, col_offset=20), lineno=1187, col_offset=20)], [], lineno=1186, col_offset=16), Assign([Name('data', Store(), lineno=1191, col_offset=16)], Call(Name('_eintr_retry_call', Load(), lineno=1191, col_offset=23), [Attribute(Name('os', Load(), lineno=1191, col_offset=41), 'read', Load(), lineno=1191, col_offset=41), Name('errpipe_read', Load(), lineno=1191, col_offset=50), Num(1048576, lineno=1191, col_offset=64)], [], None, None, lineno=1191, col_offset=23), lineno=1191, col_offset=16)], [Expr(Call(Attribute(Name('os', Load(), lineno=1194, col_offset=16), 'close', Load(), lineno=1194, col_offset=16), [Name('errpipe_read', Load(), lineno=1194, col_offset=25)], [], None, None, lineno=1194, col_offset=16), lineno=1194, col_offset=16)], lineno=1103, col_offset=12), If(Compare(Name('data', Load(), lineno=1196, col_offset=15), [NotEq()], [Str('', lineno=1196, col_offset=23)], lineno=1196, col_offset=15), [Expr(Call(Name('_eintr_retry_call', Load(), lineno=1197, col_offset=16), [Attribute(Name('os', Load(), lineno=1197, col_offset=34), 'waitpid', Load(), lineno=1197, col_offset=34), Attribute(Name('self', Load(), lineno=1197, col_offset=46), 'pid', Load(), lineno=1197, col_offset=46), Num(0, lineno=1197, col_offset=56)], [], None, None, lineno=1197, col_offset=16), lineno=1197, col_offset=16), Assign([Name('child_exception', Store(), lineno=1198, col_offset=16)], Call(Attribute(Name('pickle', Load(), lineno=1198, col_offset=34), 'loads', Load(), lineno=1198, col_offset=34), [Name('data', Load(), lineno=1198, col_offset=47)], [], None, None, lineno=1198, col_offset=34), lineno=1198, col_offset=16), For(Name('fd', Store(), lineno=1199, col_offset=20), Tuple([Name('p2cwrite', Load(), lineno=1199, col_offset=27), Name('c2pread', Load(), lineno=1199, col_offset=37), Name('errread', Load(), lineno=1199, col_offset=46)], Load(), lineno=1199, col_offset=27), [If(Compare(Name('fd', Load(), lineno=1200, col_offset=23), [IsNot()], [Name('None', Load(), lineno=1200, col_offset=33)], lineno=1200, col_offset=23), [Expr(Call(Attribute(Name('os', Load(), lineno=1201, col_offset=24), 'close', Load(), lineno=1201, col_offset=24), [Name('fd', Load(), lineno=1201, col_offset=33)], [], None, None, lineno=1201, col_offset=24), lineno=1201, col_offset=24)], [], lineno=1200, col_offset=20)], [], lineno=1199, col_offset=16), Raise(Name('child_exception', Load(), lineno=1202, col_offset=22), None, None, lineno=1202, col_offset=16)], [], lineno=1196, col_offset=12)], [], lineno=1078, col_offset=8), FunctionDef('_handle_exitstatus', arguments([Name('self', Param(), lineno=1205, col_offset=31), Name('sts', Param(), lineno=1205, col_offset=37), Name('_WIFSIGNALED', Param(), lineno=1205, col_offset=42), Name('_WTERMSIG', Param(), lineno=1206, col_offset=16), Name('_WIFEXITED', Param(), lineno=1206, col_offset=39), Name('_WEXITSTATUS', Param(), lineno=1207, col_offset=16)], None, None, [Attribute(Name('os', Load(), lineno=1205, col_offset=55), 'WIFSIGNALED', Load(), lineno=1205, col_offset=55), Attribute(Name('os', Load(), lineno=1206, col_offset=26), 'WTERMSIG', Load(), lineno=1206, col_offset=26), Attribute(Name('os', Load(), lineno=1206, col_offset=50), 'WIFEXITED', Load(), lineno=1206, col_offset=50), Attribute(Name('os', Load(), lineno=1207, col_offset=29), 'WEXITSTATUS', Load(), lineno=1207, col_offset=29)]), [If(Call(Name('_WIFSIGNALED', Load(), lineno=1210, col_offset=15), [Name('sts', Load(), lineno=1210, col_offset=28)], [], None, None, lineno=1210, col_offset=15), [Assign([Attribute(Name('self', Load(), lineno=1211, col_offset=16), 'returncode', Store(), lineno=1211, col_offset=16)], UnaryOp(USub(), Call(Name('_WTERMSIG', Load(), lineno=1211, col_offset=35), [Name('sts', Load(), lineno=1211, col_offset=45)], [], None, None, lineno=1211, col_offset=35), lineno=1211, col_offset=34), lineno=1211, col_offset=16)], [If(Call(Name('_WIFEXITED', Load(), lineno=1212, col_offset=17), [Name('sts', Load(), lineno=1212, col_offset=28)], [], None, None, lineno=1212, col_offset=17), [Assign([Attribute(Name('self', Load(), lineno=1213, col_offset=16), 'returncode', Store(), lineno=1213, col_offset=16)], Call(Name('_WEXITSTATUS', Load(), lineno=1213, col_offset=34), [Name('sts', Load(), lineno=1213, col_offset=47)], [], None, None, lineno=1213, col_offset=34), lineno=1213, col_offset=16)], [Raise(Call(Name('RuntimeError', Load(), lineno=1216, col_offset=22), [Str('Unknown child exit status!', lineno=1216, col_offset=35)], [], None, None, lineno=1216, col_offset=22), None, None, lineno=1216, col_offset=16)], lineno=1212, col_offset=17)], lineno=1210, col_offset=12)], [], lineno=1205, col_offset=8), FunctionDef('_internal_poll', arguments([Name('self', Param(), lineno=1219, col_offset=27), Name('_deadstate', Param(), lineno=1219, col_offset=33), Name('_waitpid', Param(), lineno=1219, col_offset=50), Name('_WNOHANG', Param(), lineno=1220, col_offset=16), Name('_os_error', Param(), lineno=1220, col_offset=37)], None, None, [Name('None', Load(), lineno=1219, col_offset=44), Attribute(Name('os', Load(), lineno=1219, col_offset=59), 'waitpid', Load(), lineno=1219, col_offset=59), Attribute(Name('os', Load(), lineno=1220, col_offset=25), 'WNOHANG', Load(), lineno=1220, col_offset=25), Attribute(Name('os', Load(), lineno=1220, col_offset=47), 'error', Load(), lineno=1220, col_offset=47)]), [Expr(Str('Check if child process has terminated.  Returns returncode\n            attribute.\n\n            This method is called by __del__, so it cannot reference anything\n            outside of the local scope (nor can any methods it calls).\n\n            ', lineno=1227, col_offset=-1), lineno=1227, col_offset=-1), If(Compare(Attribute(Name('self', Load(), lineno=1228, col_offset=15), 'returncode', Load(), lineno=1228, col_offset=15), [Is()], [Name('None', Load(), lineno=1228, col_offset=34)], lineno=1228, col_offset=15), [TryExcept([Assign([Tuple([Name('pid', Store(), lineno=1230, col_offset=20), Name('sts', Store(), lineno=1230, col_offset=25)], Store(), lineno=1230, col_offset=20)], Call(Name('_waitpid', Load(), lineno=1230, col_offset=31), [Attribute(Name('self', Load(), lineno=1230, col_offset=40), 'pid', Load(), lineno=1230, col_offset=40), Name('_WNOHANG', Load(), lineno=1230, col_offset=50)], [], None, None, lineno=1230, col_offset=31), lineno=1230, col_offset=20), If(Compare(Name('pid', Load(), lineno=1231, col_offset=23), [Eq()], [Attribute(Name('self', Load(), lineno=1231, col_offset=30), 'pid', Load(), lineno=1231, col_offset=30)], lineno=1231, col_offset=23), [Expr(Call(Attribute(Name('self', Load(), lineno=1232, col_offset=24), '_handle_exitstatus', Load(), lineno=1232, col_offset=24), [Name('sts', Load(), lineno=1232, col_offset=48)], [], None, None, lineno=1232, col_offset=24), lineno=1232, col_offset=24)], [], lineno=1231, col_offset=20)], [ExceptHandler(Name('_os_error', Load(), lineno=1233, col_offset=23), None, [If(Compare(Name('_deadstate', Load(), lineno=1234, col_offset=23), [IsNot()], [Name('None', Load(), lineno=1234, col_offset=41)], lineno=1234, col_offset=23), [Assign([Attribute(Name('self', Load(), lineno=1235, col_offset=24), 'returncode', Store(), lineno=1235, col_offset=24)], Name('_deadstate', Load(), lineno=1235, col_offset=42), lineno=1235, col_offset=24)], [], lineno=1234, col_offset=20)], lineno=1233, col_offset=16)], [], lineno=1229, col_offset=16)], [], lineno=1228, col_offset=12), Return(Attribute(Name('self', Load(), lineno=1236, col_offset=19), 'returncode', Load(), lineno=1236, col_offset=19), lineno=1236, col_offset=12)], [], lineno=1219, col_offset=8), FunctionDef('wait', arguments([Name('self', Param(), lineno=1239, col_offset=17)], None, None, []), [Expr(Str('Wait for child process to terminate.  Returns returncode\n            attribute.', lineno=1241, col_offset=-1), lineno=1241, col_offset=-1), If(Compare(Attribute(Name('self', Load(), lineno=1242, col_offset=15), 'returncode', Load(), lineno=1242, col_offset=15), [Is()], [Name('None', Load(), lineno=1242, col_offset=34)], lineno=1242, col_offset=15), [Assign([Tuple([Name('pid', Store(), lineno=1243, col_offset=16), Name('sts', Store(), lineno=1243, col_offset=21)], Store(), lineno=1243, col_offset=16)], Call(Name('_eintr_retry_call', Load(), lineno=1243, col_offset=27), [Attribute(Name('os', Load(), lineno=1243, col_offset=45), 'waitpid', Load(), lineno=1243, col_offset=45), Attribute(Name('self', Load(), lineno=1243, col_offset=57), 'pid', Load(), lineno=1243, col_offset=57), Num(0, lineno=1243, col_offset=67)], [], None, None, lineno=1243, col_offset=27), lineno=1243, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=1244, col_offset=16), '_handle_exitstatus', Load(), lineno=1244, col_offset=16), [Name('sts', Load(), lineno=1244, col_offset=40)], [], None, None, lineno=1244, col_offset=16), lineno=1244, col_offset=16)], [], lineno=1242, col_offset=12), Return(Attribute(Name('self', Load(), lineno=1245, col_offset=19), 'returncode', Load(), lineno=1245, col_offset=19), lineno=1245, col_offset=12)], [], lineno=1239, col_offset=8), FunctionDef('_communicate', arguments([Name('self', Param(), lineno=1248, col_offset=25), Name('input', Param(), lineno=1248, col_offset=31)], None, None, []), [If(Attribute(Name('self', Load(), lineno=1249, col_offset=15), 'stdin', Load(), lineno=1249, col_offset=15), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1252, col_offset=16), 'stdin', Load(), lineno=1252, col_offset=16), 'flush', Load(), lineno=1252, col_offset=16), [], [], None, None, lineno=1252, col_offset=16), lineno=1252, col_offset=16), If(UnaryOp(Not(), Name('input', Load(), lineno=1253, col_offset=23), lineno=1253, col_offset=19), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1254, col_offset=20), 'stdin', Load(), lineno=1254, col_offset=20), 'close', Load(), lineno=1254, col_offset=20), [], [], None, None, lineno=1254, col_offset=20), lineno=1254, col_offset=20)], [], lineno=1253, col_offset=16)], [], lineno=1249, col_offset=12), If(Name('_has_poll', Load(), lineno=1256, col_offset=15), [Assign([Tuple([Name('stdout', Store(), lineno=1257, col_offset=16), Name('stderr', Store(), lineno=1257, col_offset=24)], Store(), lineno=1257, col_offset=16)], Call(Attribute(Name('self', Load(), lineno=1257, col_offset=33), '_communicate_with_poll', Load(), lineno=1257, col_offset=33), [Name('input', Load(), lineno=1257, col_offset=61)], [], None, None, lineno=1257, col_offset=33), lineno=1257, col_offset=16)], [Assign([Tuple([Name('stdout', Store(), lineno=1259, col_offset=16), Name('stderr', Store(), lineno=1259, col_offset=24)], Store(), lineno=1259, col_offset=16)], Call(Attribute(Name('self', Load(), lineno=1259, col_offset=33), '_communicate_with_select', Load(), lineno=1259, col_offset=33), [Name('input', Load(), lineno=1259, col_offset=63)], [], None, None, lineno=1259, col_offset=33), lineno=1259, col_offset=16)], lineno=1256, col_offset=12), If(Compare(Name('stdout', Load(), lineno=1262, col_offset=15), [IsNot()], [Name('None', Load(), lineno=1262, col_offset=29)], lineno=1262, col_offset=15), [Assign([Name('stdout', Store(), lineno=1263, col_offset=16)], Call(Attribute(Str('', lineno=1263, col_offset=25), 'join', Load(), lineno=1263, col_offset=25), [Name('stdout', Load(), lineno=1263, col_offset=33)], [], None, None, lineno=1263, col_offset=25), lineno=1263, col_offset=16)], [], lineno=1262, col_offset=12), If(Compare(Name('stderr', Load(), lineno=1264, col_offset=15), [IsNot()], [Name('None', Load(), lineno=1264, col_offset=29)], lineno=1264, col_offset=15), [Assign([Name('stderr', Store(), lineno=1265, col_offset=16)], Call(Attribute(Str('', lineno=1265, col_offset=25), 'join', Load(), lineno=1265, col_offset=25), [Name('stderr', Load(), lineno=1265, col_offset=33)], [], None, None, lineno=1265, col_offset=25), lineno=1265, col_offset=16)], [], lineno=1264, col_offset=12), If(BoolOp(And(), [Attribute(Name('self', Load(), lineno=1271, col_offset=15), 'universal_newlines', Load(), lineno=1271, col_offset=15), Call(Name('hasattr', Load(), lineno=1271, col_offset=43), [Name('file', Load(), lineno=1271, col_offset=51), Str('newlines', lineno=1271, col_offset=57)], [], None, None, lineno=1271, col_offset=43)], lineno=1271, col_offset=15), [If(Name('stdout', Load(), lineno=1272, col_offset=19), [Assign([Name('stdout', Store(), lineno=1273, col_offset=20)], Call(Attribute(Name('self', Load(), lineno=1273, col_offset=29), '_translate_newlines', Load(), lineno=1273, col_offset=29), [Name('stdout', Load(), lineno=1273, col_offset=54)], [], None, None, lineno=1273, col_offset=29), lineno=1273, col_offset=20)], [], lineno=1272, col_offset=16), If(Name('stderr', Load(), lineno=1274, col_offset=19), [Assign([Name('stderr', Store(), lineno=1275, col_offset=20)], Call(Attribute(Name('self', Load(), lineno=1275, col_offset=29), '_translate_newlines', Load(), lineno=1275, col_offset=29), [Name('stderr', Load(), lineno=1275, col_offset=54)], [], None, None, lineno=1275, col_offset=29), lineno=1275, col_offset=20)], [], lineno=1274, col_offset=16)], [], lineno=1271, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=1277, col_offset=12), 'wait', Load(), lineno=1277, col_offset=12), [], [], None, None, lineno=1277, col_offset=12), lineno=1277, col_offset=12), Return(Tuple([Name('stdout', Load(), lineno=1278, col_offset=20), Name('stderr', Load(), lineno=1278, col_offset=28)], Load(), lineno=1278, col_offset=20), lineno=1278, col_offset=12)], [], lineno=1248, col_offset=8), FunctionDef('_communicate_with_poll', arguments([Name('self', Param(), lineno=1281, col_offset=35), Name('input', Param(), lineno=1281, col_offset=41)], None, None, []), [Assign([Name('stdout', Store(), lineno=1282, col_offset=12)], Name('None', Load(), lineno=1282, col_offset=21), lineno=1282, col_offset=12), Assign([Name('stderr', Store(), lineno=1283, col_offset=12)], Name('None', Load(), lineno=1283, col_offset=21), lineno=1283, col_offset=12), Assign([Name('fd2file', Store(), lineno=1284, col_offset=12)], Dict([], [], lineno=1284, col_offset=22), lineno=1284, col_offset=12), Assign([Name('fd2output', Store(), lineno=1285, col_offset=12)], Dict([], [], lineno=1285, col_offset=24), lineno=1285, col_offset=12), Assign([Name('poller', Store(), lineno=1287, col_offset=12)], Call(Attribute(Name('select', Load(), lineno=1287, col_offset=21), 'poll', Load(), lineno=1287, col_offset=21), [], [], None, None, lineno=1287, col_offset=21), lineno=1287, col_offset=12), FunctionDef('register_and_append', arguments([Name('file_obj', Param(), lineno=1288, col_offset=36), Name('eventmask', Param(), lineno=1288, col_offset=46)], None, None, []), [Expr(Call(Attribute(Name('poller', Load(), lineno=1289, col_offset=16), 'register', Load(), lineno=1289, col_offset=16), [Call(Attribute(Name('file_obj', Load(), lineno=1289, col_offset=32), 'fileno', Load(), lineno=1289, col_offset=32), [], [], None, None, lineno=1289, col_offset=32), Name('eventmask', Load(), lineno=1289, col_offset=51)], [], None, None, lineno=1289, col_offset=16), lineno=1289, col_offset=16), Assign([Subscript(Name('fd2file', Load(), lineno=1290, col_offset=16), Index(Call(Attribute(Name('file_obj', Load(), lineno=1290, col_offset=24), 'fileno', Load(), lineno=1290, col_offset=24), [], [], None, None, lineno=1290, col_offset=24)), Store(), lineno=1290, col_offset=16)], Name('file_obj', Load(), lineno=1290, col_offset=45), lineno=1290, col_offset=16)], [], lineno=1288, col_offset=12), FunctionDef('close_unregister_and_remove', arguments([Name('fd', Param(), lineno=1292, col_offset=44)], None, None, []), [Expr(Call(Attribute(Name('poller', Load(), lineno=1293, col_offset=16), 'unregister', Load(), lineno=1293, col_offset=16), [Name('fd', Load(), lineno=1293, col_offset=34)], [], None, None, lineno=1293, col_offset=16), lineno=1293, col_offset=16), Expr(Call(Attribute(Subscript(Name('fd2file', Load(), lineno=1294, col_offset=16), Index(Name('fd', Load(), lineno=1294, col_offset=24)), Load(), lineno=1294, col_offset=16), 'close', Load(), lineno=1294, col_offset=16), [], [], None, None, lineno=1294, col_offset=16), lineno=1294, col_offset=16), Expr(Call(Attribute(Name('fd2file', Load(), lineno=1295, col_offset=16), 'pop', Load(), lineno=1295, col_offset=16), [Name('fd', Load(), lineno=1295, col_offset=28)], [], None, None, lineno=1295, col_offset=16), lineno=1295, col_offset=16)], [], lineno=1292, col_offset=12), If(BoolOp(And(), [Attribute(Name('self', Load(), lineno=1297, col_offset=15), 'stdin', Load(), lineno=1297, col_offset=15), Name('input', Load(), lineno=1297, col_offset=30)], lineno=1297, col_offset=15), [Expr(Call(Name('register_and_append', Load(), lineno=1298, col_offset=16), [Attribute(Name('self', Load(), lineno=1298, col_offset=36), 'stdin', Load(), lineno=1298, col_offset=36), Attribute(Name('select', Load(), lineno=1298, col_offset=48), 'POLLOUT', Load(), lineno=1298, col_offset=48)], [], None, None, lineno=1298, col_offset=16), lineno=1298, col_offset=16)], [], lineno=1297, col_offset=12), Assign([Name('select_POLLIN_POLLPRI', Store(), lineno=1300, col_offset=12)], BinOp(Attribute(Name('select', Load(), lineno=1300, col_offset=36), 'POLLIN', Load(), lineno=1300, col_offset=36), BitOr(), Attribute(Name('select', Load(), lineno=1300, col_offset=52), 'POLLPRI', Load(), lineno=1300, col_offset=52), lineno=1300, col_offset=36), lineno=1300, col_offset=12), If(Attribute(Name('self', Load(), lineno=1301, col_offset=15), 'stdout', Load(), lineno=1301, col_offset=15), [Expr(Call(Name('register_and_append', Load(), lineno=1302, col_offset=16), [Attribute(Name('self', Load(), lineno=1302, col_offset=36), 'stdout', Load(), lineno=1302, col_offset=36), Name('select_POLLIN_POLLPRI', Load(), lineno=1302, col_offset=49)], [], None, None, lineno=1302, col_offset=16), lineno=1302, col_offset=16), Assign([Subscript(Name('fd2output', Load(), lineno=1303, col_offset=16), Index(Call(Attribute(Attribute(Name('self', Load(), lineno=1303, col_offset=26), 'stdout', Load(), lineno=1303, col_offset=26), 'fileno', Load(), lineno=1303, col_offset=26), [], [], None, None, lineno=1303, col_offset=26)), Store(), lineno=1303, col_offset=16), Name('stdout', Store(), lineno=1303, col_offset=50)], List([], Load(), lineno=1303, col_offset=59), lineno=1303, col_offset=16)], [], lineno=1301, col_offset=12), If(Attribute(Name('self', Load(), lineno=1304, col_offset=15), 'stderr', Load(), lineno=1304, col_offset=15), [Expr(Call(Name('register_and_append', Load(), lineno=1305, col_offset=16), [Attribute(Name('self', Load(), lineno=1305, col_offset=36), 'stderr', Load(), lineno=1305, col_offset=36), Name('select_POLLIN_POLLPRI', Load(), lineno=1305, col_offset=49)], [], None, None, lineno=1305, col_offset=16), lineno=1305, col_offset=16), Assign([Subscript(Name('fd2output', Load(), lineno=1306, col_offset=16), Index(Call(Attribute(Attribute(Name('self', Load(), lineno=1306, col_offset=26), 'stderr', Load(), lineno=1306, col_offset=26), 'fileno', Load(), lineno=1306, col_offset=26), [], [], None, None, lineno=1306, col_offset=26)), Store(), lineno=1306, col_offset=16), Name('stderr', Store(), lineno=1306, col_offset=50)], List([], Load(), lineno=1306, col_offset=59), lineno=1306, col_offset=16)], [], lineno=1304, col_offset=12), Assign([Name('input_offset', Store(), lineno=1308, col_offset=12)], Num(0, lineno=1308, col_offset=27), lineno=1308, col_offset=12), While(Name('fd2file', Load(), lineno=1309, col_offset=18), [TryExcept([Assign([Name('ready', Store(), lineno=1311, col_offset=20)], Call(Attribute(Name('poller', Load(), lineno=1311, col_offset=28), 'poll', Load(), lineno=1311, col_offset=28), [], [], None, None, lineno=1311, col_offset=28), lineno=1311, col_offset=20)], [ExceptHandler(Attribute(Name('select', Load(), lineno=1312, col_offset=23), 'error', Load(), lineno=1312, col_offset=23), Name('e', Store(), lineno=1312, col_offset=37), [If(Compare(Subscript(Attribute(Name('e', Load(), lineno=1313, col_offset=23), 'args', Load(), lineno=1313, col_offset=23), Index(Num(0, lineno=1313, col_offset=30)), Load(), lineno=1313, col_offset=23), [Eq()], [Attribute(Name('errno', Load(), lineno=1313, col_offset=36), 'EINTR', Load(), lineno=1313, col_offset=36)], lineno=1313, col_offset=23), [Continue( lineno=1314, col_offset=24)], [], lineno=1313, col_offset=20), Raise(None, None, None, lineno=1315, col_offset=20)], lineno=1312, col_offset=16)], [], lineno=1310, col_offset=16), For(Tuple([Name('fd', Store(), lineno=1317, col_offset=20), Name('mode', Store(), lineno=1317, col_offset=24)], Store(), lineno=1317, col_offset=20), Name('ready', Load(), lineno=1317, col_offset=32), [If(BinOp(Name('mode', Load(), lineno=1318, col_offset=23), BitAnd(), Attribute(Name('select', Load(), lineno=1318, col_offset=30), 'POLLOUT', Load(), lineno=1318, col_offset=30), lineno=1318, col_offset=23), [Assign([Name('chunk', Store(), lineno=1319, col_offset=24)], Subscript(Name('input', Load(), lineno=1319, col_offset=32), Slice(Name('input_offset', Load(), lineno=1319, col_offset=38), BinOp(Name('input_offset', Load(), lineno=1319, col_offset=53), Add(), Name('_PIPE_BUF', Load(), lineno=1319, col_offset=68), lineno=1319, col_offset=53), None), Load(), lineno=1319, col_offset=32), lineno=1319, col_offset=24), AugAssign(Name('input_offset', Store(), lineno=1320, col_offset=24), Add(), Call(Attribute(Name('os', Load(), lineno=1320, col_offset=40), 'write', Load(), lineno=1320, col_offset=40), [Name('fd', Load(), lineno=1320, col_offset=49), Name('chunk', Load(), lineno=1320, col_offset=53)], [], None, None, lineno=1320, col_offset=40), lineno=1320, col_offset=24), If(Compare(Name('input_offset', Load(), lineno=1321, col_offset=27), [GtE()], [Call(Name('len', Load(), lineno=1321, col_offset=43), [Name('input', Load(), lineno=1321, col_offset=47)], [], None, None, lineno=1321, col_offset=43)], lineno=1321, col_offset=27), [Expr(Call(Name('close_unregister_and_remove', Load(), lineno=1322, col_offset=28), [Name('fd', Load(), lineno=1322, col_offset=56)], [], None, None, lineno=1322, col_offset=28), lineno=1322, col_offset=28)], [], lineno=1321, col_offset=24)], [If(BinOp(Name('mode', Load(), lineno=1323, col_offset=25), BitAnd(), Name('select_POLLIN_POLLPRI', Load(), lineno=1323, col_offset=32), lineno=1323, col_offset=25), [Assign([Name('data', Store(), lineno=1324, col_offset=24)], Call(Attribute(Name('os', Load(), lineno=1324, col_offset=31), 'read', Load(), lineno=1324, col_offset=31), [Name('fd', Load(), lineno=1324, col_offset=39), Num(4096, lineno=1324, col_offset=43)], [], None, None, lineno=1324, col_offset=31), lineno=1324, col_offset=24), If(UnaryOp(Not(), Name('data', Load(), lineno=1325, col_offset=31), lineno=1325, col_offset=27), [Expr(Call(Name('close_unregister_and_remove', Load(), lineno=1326, col_offset=28), [Name('fd', Load(), lineno=1326, col_offset=56)], [], None, None, lineno=1326, col_offset=28), lineno=1326, col_offset=28)], [], lineno=1325, col_offset=24), Expr(Call(Attribute(Subscript(Name('fd2output', Load(), lineno=1327, col_offset=24), Index(Name('fd', Load(), lineno=1327, col_offset=34)), Load(), lineno=1327, col_offset=24), 'append', Load(), lineno=1327, col_offset=24), [Name('data', Load(), lineno=1327, col_offset=45)], [], None, None, lineno=1327, col_offset=24), lineno=1327, col_offset=24)], [Expr(Call(Name('close_unregister_and_remove', Load(), lineno=1330, col_offset=24), [Name('fd', Load(), lineno=1330, col_offset=52)], [], None, None, lineno=1330, col_offset=24), lineno=1330, col_offset=24)], lineno=1323, col_offset=25)], lineno=1318, col_offset=20)], [], lineno=1317, col_offset=16)], [], lineno=1309, col_offset=12), Return(Tuple([Name('stdout', Load(), lineno=1332, col_offset=20), Name('stderr', Load(), lineno=1332, col_offset=28)], Load(), lineno=1332, col_offset=20), lineno=1332, col_offset=12)], [], lineno=1281, col_offset=8), FunctionDef('_communicate_with_select', arguments([Name('self', Param(), lineno=1335, col_offset=37), Name('input', Param(), lineno=1335, col_offset=43)], None, None, []), [Assign([Name('read_set', Store(), lineno=1336, col_offset=12)], List([], Load(), lineno=1336, col_offset=23), lineno=1336, col_offset=12), Assign([Name('write_set', Store(), lineno=1337, col_offset=12)], List([], Load(), lineno=1337, col_offset=24), lineno=1337, col_offset=12), Assign([Name('stdout', Store(), lineno=1338, col_offset=12)], Name('None', Load(), lineno=1338, col_offset=21), lineno=1338, col_offset=12), Assign([Name('stderr', Store(), lineno=1339, col_offset=12)], Name('None', Load(), lineno=1339, col_offset=21), lineno=1339, col_offset=12), If(BoolOp(And(), [Attribute(Name('self', Load(), lineno=1341, col_offset=15), 'stdin', Load(), lineno=1341, col_offset=15), Name('input', Load(), lineno=1341, col_offset=30)], lineno=1341, col_offset=15), [Expr(Call(Attribute(Name('write_set', Load(), lineno=1342, col_offset=16), 'append', Load(), lineno=1342, col_offset=16), [Attribute(Name('self', Load(), lineno=1342, col_offset=33), 'stdin', Load(), lineno=1342, col_offset=33)], [], None, None, lineno=1342, col_offset=16), lineno=1342, col_offset=16)], [], lineno=1341, col_offset=12), If(Attribute(Name('self', Load(), lineno=1343, col_offset=15), 'stdout', Load(), lineno=1343, col_offset=15), [Expr(Call(Attribute(Name('read_set', Load(), lineno=1344, col_offset=16), 'append', Load(), lineno=1344, col_offset=16), [Attribute(Name('self', Load(), lineno=1344, col_offset=32), 'stdout', Load(), lineno=1344, col_offset=32)], [], None, None, lineno=1344, col_offset=16), lineno=1344, col_offset=16), Assign([Name('stdout', Store(), lineno=1345, col_offset=16)], List([], Load(), lineno=1345, col_offset=25), lineno=1345, col_offset=16)], [], lineno=1343, col_offset=12), If(Attribute(Name('self', Load(), lineno=1346, col_offset=15), 'stderr', Load(), lineno=1346, col_offset=15), [Expr(Call(Attribute(Name('read_set', Load(), lineno=1347, col_offset=16), 'append', Load(), lineno=1347, col_offset=16), [Attribute(Name('self', Load(), lineno=1347, col_offset=32), 'stderr', Load(), lineno=1347, col_offset=32)], [], None, None, lineno=1347, col_offset=16), lineno=1347, col_offset=16), Assign([Name('stderr', Store(), lineno=1348, col_offset=16)], List([], Load(), lineno=1348, col_offset=25), lineno=1348, col_offset=16)], [], lineno=1346, col_offset=12), Assign([Name('input_offset', Store(), lineno=1350, col_offset=12)], Num(0, lineno=1350, col_offset=27), lineno=1350, col_offset=12), While(BoolOp(Or(), [Name('read_set', Load(), lineno=1351, col_offset=18), Name('write_set', Load(), lineno=1351, col_offset=30)], lineno=1351, col_offset=18), [TryExcept([Assign([Tuple([Name('rlist', Store(), lineno=1353, col_offset=20), Name('wlist', Store(), lineno=1353, col_offset=27), Name('xlist', Store(), lineno=1353, col_offset=34)], Store(), lineno=1353, col_offset=20)], Call(Attribute(Name('select', Load(), lineno=1353, col_offset=42), 'select', Load(), lineno=1353, col_offset=42), [Name('read_set', Load(), lineno=1353, col_offset=56), Name('write_set', Load(), lineno=1353, col_offset=66), List([], Load(), lineno=1353, col_offset=77)], [], None, None, lineno=1353, col_offset=42), lineno=1353, col_offset=20)], [ExceptHandler(Attribute(Name('select', Load(), lineno=1354, col_offset=23), 'error', Load(), lineno=1354, col_offset=23), Name('e', Store(), lineno=1354, col_offset=37), [If(Compare(Subscript(Attribute(Name('e', Load(), lineno=1355, col_offset=23), 'args', Load(), lineno=1355, col_offset=23), Index(Num(0, lineno=1355, col_offset=30)), Load(), lineno=1355, col_offset=23), [Eq()], [Attribute(Name('errno', Load(), lineno=1355, col_offset=36), 'EINTR', Load(), lineno=1355, col_offset=36)], lineno=1355, col_offset=23), [Continue( lineno=1356, col_offset=24)], [], lineno=1355, col_offset=20), Raise(None, None, None, lineno=1357, col_offset=20)], lineno=1354, col_offset=16)], [], lineno=1352, col_offset=16), If(Compare(Attribute(Name('self', Load(), lineno=1359, col_offset=19), 'stdin', Load(), lineno=1359, col_offset=19), [In()], [Name('wlist', Load(), lineno=1359, col_offset=33)], lineno=1359, col_offset=19), [Assign([Name('chunk', Store(), lineno=1360, col_offset=20)], Subscript(Name('input', Load(), lineno=1360, col_offset=28), Slice(Name('input_offset', Load(), lineno=1360, col_offset=34), BinOp(Name('input_offset', Load(), lineno=1360, col_offset=49), Add(), Name('_PIPE_BUF', Load(), lineno=1360, col_offset=64), lineno=1360, col_offset=49), None), Load(), lineno=1360, col_offset=28), lineno=1360, col_offset=20), Assign([Name('bytes_written', Store(), lineno=1361, col_offset=20)], Call(Attribute(Name('os', Load(), lineno=1361, col_offset=36), 'write', Load(), lineno=1361, col_offset=36), [Call(Attribute(Attribute(Name('self', Load(), lineno=1361, col_offset=45), 'stdin', Load(), lineno=1361, col_offset=45), 'fileno', Load(), lineno=1361, col_offset=45), [], [], None, None, lineno=1361, col_offset=45), Name('chunk', Load(), lineno=1361, col_offset=66)], [], None, None, lineno=1361, col_offset=36), lineno=1361, col_offset=20), AugAssign(Name('input_offset', Store(), lineno=1362, col_offset=20), Add(), Name('bytes_written', Load(), lineno=1362, col_offset=36), lineno=1362, col_offset=20), If(Compare(Name('input_offset', Load(), lineno=1363, col_offset=23), [GtE()], [Call(Name('len', Load(), lineno=1363, col_offset=39), [Name('input', Load(), lineno=1363, col_offset=43)], [], None, None, lineno=1363, col_offset=39)], lineno=1363, col_offset=23), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1364, col_offset=24), 'stdin', Load(), lineno=1364, col_offset=24), 'close', Load(), lineno=1364, col_offset=24), [], [], None, None, lineno=1364, col_offset=24), lineno=1364, col_offset=24), Expr(Call(Attribute(Name('write_set', Load(), lineno=1365, col_offset=24), 'remove', Load(), lineno=1365, col_offset=24), [Attribute(Name('self', Load(), lineno=1365, col_offset=41), 'stdin', Load(), lineno=1365, col_offset=41)], [], None, None, lineno=1365, col_offset=24), lineno=1365, col_offset=24)], [], lineno=1363, col_offset=20)], [], lineno=1359, col_offset=16), If(Compare(Attribute(Name('self', Load(), lineno=1367, col_offset=19), 'stdout', Load(), lineno=1367, col_offset=19), [In()], [Name('rlist', Load(), lineno=1367, col_offset=34)], lineno=1367, col_offset=19), [Assign([Name('data', Store(), lineno=1368, col_offset=20)], Call(Attribute(Name('os', Load(), lineno=1368, col_offset=27), 'read', Load(), lineno=1368, col_offset=27), [Call(Attribute(Attribute(Name('self', Load(), lineno=1368, col_offset=35), 'stdout', Load(), lineno=1368, col_offset=35), 'fileno', Load(), lineno=1368, col_offset=35), [], [], None, None, lineno=1368, col_offset=35), Num(1024, lineno=1368, col_offset=57)], [], None, None, lineno=1368, col_offset=27), lineno=1368, col_offset=20), If(Compare(Name('data', Load(), lineno=1369, col_offset=23), [Eq()], [Str('', lineno=1369, col_offset=31)], lineno=1369, col_offset=23), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1370, col_offset=24), 'stdout', Load(), lineno=1370, col_offset=24), 'close', Load(), lineno=1370, col_offset=24), [], [], None, None, lineno=1370, col_offset=24), lineno=1370, col_offset=24), Expr(Call(Attribute(Name('read_set', Load(), lineno=1371, col_offset=24), 'remove', Load(), lineno=1371, col_offset=24), [Attribute(Name('self', Load(), lineno=1371, col_offset=40), 'stdout', Load(), lineno=1371, col_offset=40)], [], None, None, lineno=1371, col_offset=24), lineno=1371, col_offset=24)], [], lineno=1369, col_offset=20), Expr(Call(Attribute(Name('stdout', Load(), lineno=1372, col_offset=20), 'append', Load(), lineno=1372, col_offset=20), [Name('data', Load(), lineno=1372, col_offset=34)], [], None, None, lineno=1372, col_offset=20), lineno=1372, col_offset=20)], [], lineno=1367, col_offset=16), If(Compare(Attribute(Name('self', Load(), lineno=1374, col_offset=19), 'stderr', Load(), lineno=1374, col_offset=19), [In()], [Name('rlist', Load(), lineno=1374, col_offset=34)], lineno=1374, col_offset=19), [Assign([Name('data', Store(), lineno=1375, col_offset=20)], Call(Attribute(Name('os', Load(), lineno=1375, col_offset=27), 'read', Load(), lineno=1375, col_offset=27), [Call(Attribute(Attribute(Name('self', Load(), lineno=1375, col_offset=35), 'stderr', Load(), lineno=1375, col_offset=35), 'fileno', Load(), lineno=1375, col_offset=35), [], [], None, None, lineno=1375, col_offset=35), Num(1024, lineno=1375, col_offset=57)], [], None, None, lineno=1375, col_offset=27), lineno=1375, col_offset=20), If(Compare(Name('data', Load(), lineno=1376, col_offset=23), [Eq()], [Str('', lineno=1376, col_offset=31)], lineno=1376, col_offset=23), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1377, col_offset=24), 'stderr', Load(), lineno=1377, col_offset=24), 'close', Load(), lineno=1377, col_offset=24), [], [], None, None, lineno=1377, col_offset=24), lineno=1377, col_offset=24), Expr(Call(Attribute(Name('read_set', Load(), lineno=1378, col_offset=24), 'remove', Load(), lineno=1378, col_offset=24), [Attribute(Name('self', Load(), lineno=1378, col_offset=40), 'stderr', Load(), lineno=1378, col_offset=40)], [], None, None, lineno=1378, col_offset=24), lineno=1378, col_offset=24)], [], lineno=1376, col_offset=20), Expr(Call(Attribute(Name('stderr', Load(), lineno=1379, col_offset=20), 'append', Load(), lineno=1379, col_offset=20), [Name('data', Load(), lineno=1379, col_offset=34)], [], None, None, lineno=1379, col_offset=20), lineno=1379, col_offset=20)], [], lineno=1374, col_offset=16)], [], lineno=1351, col_offset=12), Return(Tuple([Name('stdout', Load(), lineno=1381, col_offset=20), Name('stderr', Load(), lineno=1381, col_offset=28)], Load(), lineno=1381, col_offset=20), lineno=1381, col_offset=12)], [], lineno=1335, col_offset=8), FunctionDef('send_signal', arguments([Name('self', Param(), lineno=1384, col_offset=24), Name('sig', Param(), lineno=1384, col_offset=30)], None, None, []), [Expr(Str('Send a signal to the process\n            ', lineno=1386, col_offset=-1), lineno=1386, col_offset=-1), Expr(Call(Attribute(Name('os', Load(), lineno=1387, col_offset=12), 'kill', Load(), lineno=1387, col_offset=12), [Attribute(Name('self', Load(), lineno=1387, col_offset=20), 'pid', Load(), lineno=1387, col_offset=20), Name('sig', Load(), lineno=1387, col_offset=30)], [], None, None, lineno=1387, col_offset=12), lineno=1387, col_offset=12)], [], lineno=1384, col_offset=8), FunctionDef('terminate', arguments([Name('self', Param(), lineno=1389, col_offset=22)], None, None, []), [Expr(Str('Terminate the process with SIGTERM\n            ', lineno=1391, col_offset=-1), lineno=1391, col_offset=-1), Expr(Call(Attribute(Name('self', Load(), lineno=1392, col_offset=12), 'send_signal', Load(), lineno=1392, col_offset=12), [Attribute(Name('signal', Load(), lineno=1392, col_offset=29), 'SIGTERM', Load(), lineno=1392, col_offset=29)], [], None, None, lineno=1392, col_offset=12), lineno=1392, col_offset=12)], [], lineno=1389, col_offset=8), FunctionDef('kill', arguments([Name('self', Param(), lineno=1394, col_offset=17)], None, None, []), [Expr(Str('Kill the process with SIGKILL\n            ', lineno=1396, col_offset=-1), lineno=1396, col_offset=-1), Expr(Call(Attribute(Name('self', Load(), lineno=1397, col_offset=12), 'send_signal', Load(), lineno=1397, col_offset=12), [Attribute(Name('signal', Load(), lineno=1397, col_offset=29), 'SIGKILL', Load(), lineno=1397, col_offset=29)], [], None, None, lineno=1397, col_offset=12), lineno=1397, col_offset=12)], [], lineno=1394, col_offset=8)], lineno=747, col_offset=4)], [], lineno=611, col_offset=0), FunctionDef('_demo_posix', arguments([], None, None, []), [Assign([Name('plist', Store(), lineno=1404, col_offset=4)], Subscript(Call(Attribute(Call(Name('Popen', Load(), lineno=1404, col_offset=12), [List([Str('ps', lineno=1404, col_offset=19)], Load(), lineno=1404, col_offset=18)], [keyword('stdout', Name('PIPE', Load(), lineno=1404, col_offset=33))], None, None, lineno=1404, col_offset=12), 'communicate', Load(), lineno=1404, col_offset=12), [], [], None, None, lineno=1404, col_offset=12), Index(Num(0, lineno=1404, col_offset=53)), Load(), lineno=1404, col_offset=12), lineno=1404, col_offset=4), Print(None, [Str('Process list:', lineno=1405, col_offset=10)], True, lineno=1405, col_offset=4), Print(None, [Name('plist', Load(), lineno=1406, col_offset=10)], True, lineno=1406, col_offset=4), If(Compare(Call(Attribute(Name('os', Load(), lineno=1411, col_offset=7), 'getuid', Load(), lineno=1411, col_offset=7), [], [], None, None, lineno=1411, col_offset=7), [Eq()], [Num(0, lineno=1411, col_offset=22)], lineno=1411, col_offset=7), [Assign([Name('p', Store(), lineno=1412, col_offset=8)], Call(Name('Popen', Load(), lineno=1412, col_offset=12), [List([Str('id', lineno=1412, col_offset=19)], Load(), lineno=1412, col_offset=18)], [keyword('preexec_fn', Lambda(arguments([], None, None, []), Call(Attribute(Name('os', Load(), lineno=1412, col_offset=45), 'setuid', Load(), lineno=1412, col_offset=45), [Num(100, lineno=1412, col_offset=55)], [], None, None, lineno=1412, col_offset=45), lineno=1412, col_offset=37))], None, None, lineno=1412, col_offset=12), lineno=1412, col_offset=8), Expr(Call(Attribute(Name('p', Load(), lineno=1413, col_offset=8), 'wait', Load(), lineno=1413, col_offset=8), [], [], None, None, lineno=1413, col_offset=8), lineno=1413, col_offset=8)], [], lineno=1411, col_offset=4), Print(None, [Str("Looking for 'hda'...", lineno=1418, col_offset=10)], True, lineno=1418, col_offset=4), Assign([Name('p1', Store(), lineno=1419, col_offset=4)], Call(Name('Popen', Load(), lineno=1419, col_offset=9), [List([Str('dmesg', lineno=1419, col_offset=16)], Load(), lineno=1419, col_offset=15)], [keyword('stdout', Name('PIPE', Load(), lineno=1419, col_offset=33))], None, None, lineno=1419, col_offset=9), lineno=1419, col_offset=4), Assign([Name('p2', Store(), lineno=1420, col_offset=4)], Call(Name('Popen', Load(), lineno=1420, col_offset=9), [List([Str('grep', lineno=1420, col_offset=16), Str('hda', lineno=1420, col_offset=24)], Load(), lineno=1420, col_offset=15)], [keyword('stdin', Attribute(Name('p1', Load(), lineno=1420, col_offset=38), 'stdout', Load(), lineno=1420, col_offset=38)), keyword('stdout', Name('PIPE', Load(), lineno=1420, col_offset=56))], None, None, lineno=1420, col_offset=9), lineno=1420, col_offset=4), Print(None, [Call(Name('repr', Load(), lineno=1421, col_offset=10), [Subscript(Call(Attribute(Name('p2', Load(), lineno=1421, col_offset=15), 'communicate', Load(), lineno=1421, col_offset=15), [], [], None, None, lineno=1421, col_offset=15), Index(Num(0, lineno=1421, col_offset=32)), Load(), lineno=1421, col_offset=15)], [], None, None, lineno=1421, col_offset=10)], True, lineno=1421, col_offset=4), Print(None, [], True, lineno=1426, col_offset=4), Print(None, [Str('Trying a weird file...', lineno=1427, col_offset=10)], True, lineno=1427, col_offset=4), TryExcept([Print(None, [Call(Attribute(Call(Name('Popen', Load(), lineno=1429, col_offset=14), [List([Str('/this/path/does/not/exist', lineno=1429, col_offset=21)], Load(), lineno=1429, col_offset=20)], [], None, None, lineno=1429, col_offset=14), 'communicate', Load(), lineno=1429, col_offset=14), [], [], None, None, lineno=1429, col_offset=14)], True, lineno=1429, col_offset=8)], [ExceptHandler(Name('OSError', Load(), lineno=1430, col_offset=11), Name('e', Store(), lineno=1430, col_offset=20), [If(Compare(Attribute(Name('e', Load(), lineno=1431, col_offset=11), 'errno', Load(), lineno=1431, col_offset=11), [Eq()], [Attribute(Name('errno', Load(), lineno=1431, col_offset=22), 'ENOENT', Load(), lineno=1431, col_offset=22)], lineno=1431, col_offset=11), [Print(None, [Str("The file didn't exist.  I thought so...", lineno=1432, col_offset=18)], True, lineno=1432, col_offset=12), Print(None, [Str('Child traceback:', lineno=1433, col_offset=18)], True, lineno=1433, col_offset=12), Print(None, [Attribute(Name('e', Load(), lineno=1434, col_offset=18), 'child_traceback', Load(), lineno=1434, col_offset=18)], True, lineno=1434, col_offset=12)], [Print(None, [Str('Error', lineno=1436, col_offset=18), Attribute(Name('e', Load(), lineno=1436, col_offset=27), 'errno', Load(), lineno=1436, col_offset=27)], True, lineno=1436, col_offset=12)], lineno=1431, col_offset=8)], lineno=1430, col_offset=4)], [Print(Attribute(Name('sys', Load(), lineno=1438, col_offset=16), 'stderr', Load(), lineno=1438, col_offset=16), [Str('Gosh.  No error.', lineno=1438, col_offset=28)], True, lineno=1438, col_offset=8)], lineno=1428, col_offset=4)], [], lineno=1400, col_offset=0), FunctionDef('_demo_windows', arguments([], None, None, []), [Print(None, [Str("Looking for 'PROMPT' in set output...", lineno=1445, col_offset=10)], True, lineno=1445, col_offset=4), Assign([Name('p1', Store(), lineno=1446, col_offset=4)], Call(Name('Popen', Load(), lineno=1446, col_offset=9), [Str('set', lineno=1446, col_offset=15)], [keyword('stdout', Name('PIPE', Load(), lineno=1446, col_offset=29)), keyword('shell', Name('True', Load(), lineno=1446, col_offset=41))], None, None, lineno=1446, col_offset=9), lineno=1446, col_offset=4), Assign([Name('p2', Store(), lineno=1447, col_offset=4)], Call(Name('Popen', Load(), lineno=1447, col_offset=9), [Str('find "PROMPT"', lineno=1447, col_offset=15)], [keyword('stdin', Attribute(Name('p1', Load(), lineno=1447, col_offset=38), 'stdout', Load(), lineno=1447, col_offset=38)), keyword('stdout', Name('PIPE', Load(), lineno=1447, col_offset=56))], None, None, lineno=1447, col_offset=9), lineno=1447, col_offset=4), Print(None, [Call(Name('repr', Load(), lineno=1448, col_offset=10), [Subscript(Call(Attribute(Name('p2', Load(), lineno=1448, col_offset=15), 'communicate', Load(), lineno=1448, col_offset=15), [], [], None, None, lineno=1448, col_offset=15), Index(Num(0, lineno=1448, col_offset=32)), Load(), lineno=1448, col_offset=15)], [], None, None, lineno=1448, col_offset=10)], True, lineno=1448, col_offset=4), Print(None, [Str('Executing calc...', lineno=1453, col_offset=10)], True, lineno=1453, col_offset=4), Assign([Name('p', Store(), lineno=1454, col_offset=4)], Call(Name('Popen', Load(), lineno=1454, col_offset=8), [Str('calc', lineno=1454, col_offset=14)], [], None, None, lineno=1454, col_offset=8), lineno=1454, col_offset=4), Expr(Call(Attribute(Name('p', Load(), lineno=1455, col_offset=4), 'wait', Load(), lineno=1455, col_offset=4), [], [], None, None, lineno=1455, col_offset=4), lineno=1455, col_offset=4)], [], lineno=1441, col_offset=0), If(Compare(Name('__name__', Load(), lineno=1458, col_offset=3), [Eq()], [Str('__main__', lineno=1458, col_offset=15)], lineno=1458, col_offset=3), [If(Name('mswindows', Load(), lineno=1459, col_offset=7), [Expr(Call(Name('_demo_windows', Load(), lineno=1460, col_offset=8), [], [], None, None, lineno=1460, col_offset=8), lineno=1460, col_offset=8)], [Expr(Call(Name('_demo_posix', Load(), lineno=1462, col_offset=8), [], [], None, None, lineno=1462, col_offset=8), lineno=1462, col_offset=8)], lineno=1459, col_offset=4)], [], lineno=1458, col_offset=0)])
