Module([Expr(Str('Buffers used to hold null-terminated strings.', lineno=1, col_offset=0), lineno=1, col_offset=0), ImportFrom('bgenBuffer', [alias('FixedOutputBufferType', None)], 0, lineno=4, col_offset=0), ImportFrom('bgenStackBuffer', [alias('StackOutputBufferType', None)], 0, lineno=5, col_offset=0), ImportFrom('bgenHeapBuffer', [alias('HeapOutputBufferType', None)], 0, lineno=6, col_offset=0), ClassDef('StringBufferMixIn', [], [Expr(Str("Mix-in class to create various string buffer types.\n\n    Strings are character arrays terminated by a null byte.\n    (For input, this is also covered by stringptr.)\n    For output, there are again three variants:\n    - Fixed: size is a constant given in the documentation; or\n    - Stack: size is passed to the C function but we decide on a size at\n      code generation time so we can still allocate on the heap); or\n    - Heap: size is passed to the C function and we let the Python caller\n      pass a size.\n    (Note that this doesn't cover output parameters in which a string\n    pointer is returned.  These are actually easier (no allocation) but far\n    less common.  I'll write the classes when there is demand.)\n    ", lineno=24, col_offset=-1), lineno=24, col_offset=-1), FunctionDef('getSizeDeclarations', arguments([Name('self', Param(), lineno=26, col_offset=28), Name('name', Param(), lineno=26, col_offset=34)], None, None, []), [Return(List([], Load(), lineno=27, col_offset=15), lineno=27, col_offset=8)], [], lineno=26, col_offset=4), FunctionDef('getAuxDeclarations', arguments([Name('self', Param(), lineno=29, col_offset=27), Name('name', Param(), lineno=29, col_offset=33)], None, None, []), [Return(List([], Load(), lineno=30, col_offset=15), lineno=30, col_offset=8)], [], lineno=29, col_offset=4), FunctionDef('getargsFormat', arguments([Name('self', Param(), lineno=32, col_offset=22)], None, None, []), [Return(Str('s', lineno=33, col_offset=15), lineno=33, col_offset=8)], [], lineno=32, col_offset=4), FunctionDef('getargsArgs', arguments([Name('self', Param(), lineno=35, col_offset=20), Name('name', Param(), lineno=35, col_offset=26)], None, None, []), [Return(BinOp(Str('&%s__in__', lineno=36, col_offset=15), Mod(), Name('name', Load(), lineno=36, col_offset=29), lineno=36, col_offset=15), lineno=36, col_offset=8)], [], lineno=35, col_offset=4), FunctionDef('mkvalueFormat', arguments([Name('self', Param(), lineno=38, col_offset=22)], None, None, []), [Return(Str('s', lineno=39, col_offset=15), lineno=39, col_offset=8)], [], lineno=38, col_offset=4), FunctionDef('mkvalueArgs', arguments([Name('self', Param(), lineno=41, col_offset=20), Name('name', Param(), lineno=41, col_offset=26)], None, None, []), [Return(BinOp(Str('%s__out__', lineno=42, col_offset=15), Mod(), Name('name', Load(), lineno=42, col_offset=29), lineno=42, col_offset=15), lineno=42, col_offset=8)], [], lineno=41, col_offset=4)], [], lineno=9, col_offset=0), ClassDef('FixedOutputStringType', [Name('StringBufferMixIn', Load(), lineno=45, col_offset=28), Name('FixedOutputBufferType', Load(), lineno=45, col_offset=47)], [Expr(Str('Null-terminated output string -- passed without size.\n\n    Instantiate with buffer size as parameter.\n    ', lineno=50, col_offset=-1), lineno=50, col_offset=-1)], [], lineno=45, col_offset=0), ClassDef('StackOutputStringType', [Name('StringBufferMixIn', Load(), lineno=53, col_offset=28), Name('StackOutputBufferType', Load(), lineno=53, col_offset=47)], [Expr(Str('Null-terminated output string -- passed as (buffer, size).\n\n    Instantiate with buffer size as parameter.\n    ', lineno=58, col_offset=-1), lineno=58, col_offset=-1)], [], lineno=53, col_offset=0), ClassDef('HeapOutputStringType', [Name('StringBufferMixIn', Load(), lineno=61, col_offset=27), Name('HeapOutputBufferType', Load(), lineno=61, col_offset=46)], [Expr(Str('Null-terminated output string -- passed as (buffer, size).\n\n    Instantiate without parameters.\n    Call from Python with buffer size.\n    ', lineno=67, col_offset=-1), lineno=67, col_offset=-1)], [], lineno=61, col_offset=0)])
