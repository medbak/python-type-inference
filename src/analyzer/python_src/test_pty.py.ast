Module([ImportFrom('test.test_support', [alias('verbose', None), alias('run_unittest', None), alias('import_module', None)], 0, lineno=1, col_offset=0), Assign([Name('fcntl', Store(), lineno=4, col_offset=0)], Call(Name('import_module', Load(), lineno=4, col_offset=8), [Str('fcntl', lineno=4, col_offset=22)], [], None, None, lineno=4, col_offset=8), lineno=4, col_offset=0), Expr(Call(Name('import_module', Load(), lineno=5, col_offset=0), [Str('termios', lineno=5, col_offset=14)], [], None, None, lineno=5, col_offset=0), lineno=5, col_offset=0), Import([alias('errno', None)], lineno=7, col_offset=0), Import([alias('pty', None)], lineno=8, col_offset=0), Import([alias('os', None)], lineno=9, col_offset=0), Import([alias('sys', None)], lineno=10, col_offset=0), Import([alias('signal', None)], lineno=11, col_offset=0), Import([alias('unittest', None)], lineno=12, col_offset=0), Assign([Name('TEST_STRING_1', Store(), lineno=14, col_offset=0)], Str('I wish to buy a fish license.\n', lineno=14, col_offset=16), lineno=14, col_offset=0), Assign([Name('TEST_STRING_2', Store(), lineno=15, col_offset=0)], Str('For my pet fish, Eric.\n', lineno=15, col_offset=16), lineno=15, col_offset=0), If(Name('verbose', Load(), lineno=17, col_offset=3), [FunctionDef('debug', arguments([Name('msg', Param(), lineno=18, col_offset=14)], None, None, []), [Print(None, [Name('msg', Load(), lineno=19, col_offset=14)], True, lineno=19, col_offset=8)], [], lineno=18, col_offset=4)], [FunctionDef('debug', arguments([Name('msg', Param(), lineno=21, col_offset=14)], None, None, []), [Pass( lineno=22, col_offset=8)], [], lineno=21, col_offset=4)], lineno=17, col_offset=0), FunctionDef('normalize_output', arguments([Name('data', Param(), lineno=25, col_offset=21)], None, None, []), [If(Call(Attribute(Name('data', Load(), lineno=37, col_offset=7), 'endswith', Load(), lineno=37, col_offset=7), [Str('\r\r\n', lineno=37, col_offset=21)], [], None, None, lineno=37, col_offset=7), [Return(Call(Attribute(Name('data', Load(), lineno=38, col_offset=15), 'replace', Load(), lineno=38, col_offset=15), [Str('\r\r\n', lineno=38, col_offset=28), Str('\n', lineno=38, col_offset=38)], [], None, None, lineno=38, col_offset=15), lineno=38, col_offset=8)], [], lineno=37, col_offset=4), If(Call(Attribute(Name('data', Load(), lineno=41, col_offset=7), 'endswith', Load(), lineno=41, col_offset=7), [Str('\r\n', lineno=41, col_offset=21)], [], None, None, lineno=41, col_offset=7), [Return(Call(Attribute(Name('data', Load(), lineno=42, col_offset=15), 'replace', Load(), lineno=42, col_offset=15), [Str('\r\n', lineno=42, col_offset=28), Str('\n', lineno=42, col_offset=36)], [], None, None, lineno=42, col_offset=15), lineno=42, col_offset=8)], [], lineno=41, col_offset=4), Return(Name('data', Load(), lineno=44, col_offset=11), lineno=44, col_offset=4)], [], lineno=25, col_offset=0), ClassDef('PtyTest', [Attribute(Name('unittest', Load(), lineno=50, col_offset=14), 'TestCase', Load(), lineno=50, col_offset=14)], [FunctionDef('setUp', arguments([Name('self', Param(), lineno=51, col_offset=14)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=54, col_offset=8), 'old_alarm', Store(), lineno=54, col_offset=8)], Call(Attribute(Name('signal', Load(), lineno=54, col_offset=25), 'signal', Load(), lineno=54, col_offset=25), [Attribute(Name('signal', Load(), lineno=54, col_offset=39), 'SIGALRM', Load(), lineno=54, col_offset=39), Attribute(Name('self', Load(), lineno=54, col_offset=55), 'handle_sig', Load(), lineno=54, col_offset=55)], [], None, None, lineno=54, col_offset=25), lineno=54, col_offset=8), Expr(Call(Attribute(Name('signal', Load(), lineno=55, col_offset=8), 'alarm', Load(), lineno=55, col_offset=8), [Num(10, lineno=55, col_offset=21)], [], None, None, lineno=55, col_offset=8), lineno=55, col_offset=8)], [], lineno=51, col_offset=4), FunctionDef('tearDown', arguments([Name('self', Param(), lineno=57, col_offset=17)], None, None, []), [Expr(Call(Attribute(Name('signal', Load(), lineno=59, col_offset=8), 'alarm', Load(), lineno=59, col_offset=8), [Num(0, lineno=59, col_offset=21)], [], None, None, lineno=59, col_offset=8), lineno=59, col_offset=8), Expr(Call(Attribute(Name('signal', Load(), lineno=60, col_offset=8), 'signal', Load(), lineno=60, col_offset=8), [Attribute(Name('signal', Load(), lineno=60, col_offset=22), 'SIGALRM', Load(), lineno=60, col_offset=22), Attribute(Name('self', Load(), lineno=60, col_offset=38), 'old_alarm', Load(), lineno=60, col_offset=38)], [], None, None, lineno=60, col_offset=8), lineno=60, col_offset=8)], [], lineno=57, col_offset=4), FunctionDef('handle_sig', arguments([Name('self', Param(), lineno=62, col_offset=19), Name('sig', Param(), lineno=62, col_offset=25), Name('frame', Param(), lineno=62, col_offset=30)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=63, col_offset=8), 'fail', Load(), lineno=63, col_offset=8), [Str('isatty hung', lineno=63, col_offset=18)], [], None, None, lineno=63, col_offset=8), lineno=63, col_offset=8)], [], lineno=62, col_offset=4), FunctionDef('test_basic', arguments([Name('self', Param(), lineno=65, col_offset=19)], None, None, []), [TryExcept([Expr(Call(Name('debug', Load(), lineno=67, col_offset=12), [Str('Calling master_open()', lineno=67, col_offset=18)], [], None, None, lineno=67, col_offset=12), lineno=67, col_offset=12), Assign([Tuple([Name('master_fd', Store(), lineno=68, col_offset=12), Name('slave_name', Store(), lineno=68, col_offset=23)], Store(), lineno=68, col_offset=12)], Call(Attribute(Name('pty', Load(), lineno=68, col_offset=36), 'master_open', Load(), lineno=68, col_offset=36), [], [], None, None, lineno=68, col_offset=36), lineno=68, col_offset=12), Expr(Call(Name('debug', Load(), lineno=69, col_offset=12), [BinOp(Str("Got master_fd '%d', slave_name '%s'", lineno=69, col_offset=18), Mod(), Tuple([Name('master_fd', Load(), lineno=70, col_offset=19), Name('slave_name', Load(), lineno=70, col_offset=30)], Load(), lineno=70, col_offset=19), lineno=69, col_offset=18)], [], None, None, lineno=69, col_offset=12), lineno=69, col_offset=12), Expr(Call(Name('debug', Load(), lineno=71, col_offset=12), [BinOp(Str('Calling slave_open(%r)', lineno=71, col_offset=18), Mod(), Tuple([Name('slave_name', Load(), lineno=71, col_offset=46)], Load(), lineno=71, col_offset=46), lineno=71, col_offset=18)], [], None, None, lineno=71, col_offset=12), lineno=71, col_offset=12), Assign([Name('slave_fd', Store(), lineno=72, col_offset=12)], Call(Attribute(Name('pty', Load(), lineno=72, col_offset=23), 'slave_open', Load(), lineno=72, col_offset=23), [Name('slave_name', Load(), lineno=72, col_offset=38)], [], None, None, lineno=72, col_offset=23), lineno=72, col_offset=12), Expr(Call(Name('debug', Load(), lineno=73, col_offset=12), [BinOp(Str("Got slave_fd '%d'", lineno=73, col_offset=18), Mod(), Name('slave_fd', Load(), lineno=73, col_offset=40), lineno=73, col_offset=18)], [], None, None, lineno=73, col_offset=12), lineno=73, col_offset=12)], [ExceptHandler(Name('OSError', Load(), lineno=74, col_offset=15), None, [Raise(Attribute(Name('unittest', Load(), lineno=76, col_offset=18), 'SkipTest', Load(), lineno=76, col_offset=18), Str('Pseudo-terminals (seemingly) not functional.', lineno=76, col_offset=37), None, lineno=76, col_offset=12)], lineno=74, col_offset=8)], [], lineno=66, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=78, col_offset=8), 'assertTrue', Load(), lineno=78, col_offset=8), [Call(Attribute(Name('os', Load(), lineno=78, col_offset=24), 'isatty', Load(), lineno=78, col_offset=24), [Name('slave_fd', Load(), lineno=78, col_offset=34)], [], None, None, lineno=78, col_offset=24), Str('slave_fd is not a tty', lineno=78, col_offset=45)], [], None, None, lineno=78, col_offset=8), lineno=78, col_offset=8), Assign([Name('orig_flags', Store(), lineno=85, col_offset=8)], Call(Attribute(Name('fcntl', Load(), lineno=85, col_offset=21), 'fcntl', Load(), lineno=85, col_offset=21), [Name('master_fd', Load(), lineno=85, col_offset=33), Attribute(Name('fcntl', Load(), lineno=85, col_offset=44), 'F_GETFL', Load(), lineno=85, col_offset=44)], [], None, None, lineno=85, col_offset=21), lineno=85, col_offset=8), Expr(Call(Attribute(Name('fcntl', Load(), lineno=86, col_offset=8), 'fcntl', Load(), lineno=86, col_offset=8), [Name('master_fd', Load(), lineno=86, col_offset=20), Attribute(Name('fcntl', Load(), lineno=86, col_offset=31), 'F_SETFL', Load(), lineno=86, col_offset=31), BinOp(Name('orig_flags', Load(), lineno=86, col_offset=46), BitOr(), Attribute(Name('os', Load(), lineno=86, col_offset=59), 'O_NONBLOCK', Load(), lineno=86, col_offset=59), lineno=86, col_offset=46)], [], None, None, lineno=86, col_offset=8), lineno=86, col_offset=8), TryExcept([Assign([Name('s1', Store(), lineno=88, col_offset=12)], Call(Attribute(Name('os', Load(), lineno=88, col_offset=17), 'read', Load(), lineno=88, col_offset=17), [Name('master_fd', Load(), lineno=88, col_offset=25), Num(1024, lineno=88, col_offset=36)], [], None, None, lineno=88, col_offset=17), lineno=88, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=89, col_offset=12), 'assertEqual', Load(), lineno=89, col_offset=12), [Str('', lineno=89, col_offset=29), Name('s1', Load(), lineno=89, col_offset=33)], [], None, None, lineno=89, col_offset=12), lineno=89, col_offset=12)], [ExceptHandler(Name('OSError', Load(), lineno=90, col_offset=15), Name('e', Store(), lineno=90, col_offset=24), [If(Compare(Attribute(Name('e', Load(), lineno=91, col_offset=15), 'errno', Load(), lineno=91, col_offset=15), [NotEq()], [Attribute(Name('errno', Load(), lineno=91, col_offset=26), 'EAGAIN', Load(), lineno=91, col_offset=26)], lineno=91, col_offset=15), [Raise(None, None, None, lineno=92, col_offset=16)], [], lineno=91, col_offset=12)], lineno=90, col_offset=8)], [], lineno=87, col_offset=8), Expr(Call(Attribute(Name('fcntl', Load(), lineno=94, col_offset=8), 'fcntl', Load(), lineno=94, col_offset=8), [Name('master_fd', Load(), lineno=94, col_offset=20), Attribute(Name('fcntl', Load(), lineno=94, col_offset=31), 'F_SETFL', Load(), lineno=94, col_offset=31), Name('orig_flags', Load(), lineno=94, col_offset=46)], [], None, None, lineno=94, col_offset=8), lineno=94, col_offset=8), Expr(Call(Name('debug', Load(), lineno=96, col_offset=8), [Str('Writing to slave_fd', lineno=96, col_offset=14)], [], None, None, lineno=96, col_offset=8), lineno=96, col_offset=8), Expr(Call(Attribute(Name('os', Load(), lineno=97, col_offset=8), 'write', Load(), lineno=97, col_offset=8), [Name('slave_fd', Load(), lineno=97, col_offset=17), Name('TEST_STRING_1', Load(), lineno=97, col_offset=27)], [], None, None, lineno=97, col_offset=8), lineno=97, col_offset=8), Assign([Name('s1', Store(), lineno=98, col_offset=8)], Call(Attribute(Name('os', Load(), lineno=98, col_offset=13), 'read', Load(), lineno=98, col_offset=13), [Name('master_fd', Load(), lineno=98, col_offset=21), Num(1024, lineno=98, col_offset=32)], [], None, None, lineno=98, col_offset=13), lineno=98, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=99, col_offset=8), 'assertEqual', Load(), lineno=99, col_offset=8), [Str('I wish to buy a fish license.\n', lineno=99, col_offset=25), Call(Name('normalize_output', Load(), lineno=100, col_offset=25), [Name('s1', Load(), lineno=100, col_offset=42)], [], None, None, lineno=100, col_offset=25)], [], None, None, lineno=99, col_offset=8), lineno=99, col_offset=8), Expr(Call(Name('debug', Load(), lineno=102, col_offset=8), [Str('Writing chunked output', lineno=102, col_offset=14)], [], None, None, lineno=102, col_offset=8), lineno=102, col_offset=8), Expr(Call(Attribute(Name('os', Load(), lineno=103, col_offset=8), 'write', Load(), lineno=103, col_offset=8), [Name('slave_fd', Load(), lineno=103, col_offset=17), Subscript(Name('TEST_STRING_2', Load(), lineno=103, col_offset=27), Slice(None, Num(5, lineno=103, col_offset=42), None), Load(), lineno=103, col_offset=27)], [], None, None, lineno=103, col_offset=8), lineno=103, col_offset=8), Expr(Call(Attribute(Name('os', Load(), lineno=104, col_offset=8), 'write', Load(), lineno=104, col_offset=8), [Name('slave_fd', Load(), lineno=104, col_offset=17), Subscript(Name('TEST_STRING_2', Load(), lineno=104, col_offset=27), Slice(Num(5, lineno=104, col_offset=41), None, None), Load(), lineno=104, col_offset=27)], [], None, None, lineno=104, col_offset=8), lineno=104, col_offset=8), Assign([Name('s2', Store(), lineno=105, col_offset=8)], Call(Attribute(Name('os', Load(), lineno=105, col_offset=13), 'read', Load(), lineno=105, col_offset=13), [Name('master_fd', Load(), lineno=105, col_offset=21), Num(1024, lineno=105, col_offset=32)], [], None, None, lineno=105, col_offset=13), lineno=105, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=106, col_offset=8), 'assertEqual', Load(), lineno=106, col_offset=8), [Str('For my pet fish, Eric.\n', lineno=106, col_offset=25), Call(Name('normalize_output', Load(), lineno=106, col_offset=53), [Name('s2', Load(), lineno=106, col_offset=70)], [], None, None, lineno=106, col_offset=53)], [], None, None, lineno=106, col_offset=8), lineno=106, col_offset=8), Expr(Call(Attribute(Name('os', Load(), lineno=108, col_offset=8), 'close', Load(), lineno=108, col_offset=8), [Name('slave_fd', Load(), lineno=108, col_offset=17)], [], None, None, lineno=108, col_offset=8), lineno=108, col_offset=8), Expr(Call(Attribute(Name('os', Load(), lineno=109, col_offset=8), 'close', Load(), lineno=109, col_offset=8), [Name('master_fd', Load(), lineno=109, col_offset=17)], [], None, None, lineno=109, col_offset=8), lineno=109, col_offset=8)], [], lineno=65, col_offset=4), FunctionDef('test_fork', arguments([Name('self', Param(), lineno=112, col_offset=18)], None, None, []), [Expr(Call(Name('debug', Load(), lineno=113, col_offset=8), [Str('calling pty.fork()', lineno=113, col_offset=14)], [], None, None, lineno=113, col_offset=8), lineno=113, col_offset=8), Assign([Tuple([Name('pid', Store(), lineno=114, col_offset=8), Name('master_fd', Store(), lineno=114, col_offset=13)], Store(), lineno=114, col_offset=8)], Call(Attribute(Name('pty', Load(), lineno=114, col_offset=25), 'fork', Load(), lineno=114, col_offset=25), [], [], None, None, lineno=114, col_offset=25), lineno=114, col_offset=8), If(Compare(Name('pid', Load(), lineno=115, col_offset=11), [Eq()], [Attribute(Name('pty', Load(), lineno=115, col_offset=18), 'CHILD', Load(), lineno=115, col_offset=18)], lineno=115, col_offset=11), [If(UnaryOp(Not(), Call(Attribute(Name('os', Load(), lineno=117, col_offset=19), 'isatty', Load(), lineno=117, col_offset=19), [Num(1, lineno=117, col_offset=29)], [], None, None, lineno=117, col_offset=19), lineno=117, col_offset=15), [Expr(Call(Name('debug', Load(), lineno=118, col_offset=16), [Str("Child's fd 1 is not a tty?!", lineno=118, col_offset=22)], [], None, None, lineno=118, col_offset=16), lineno=118, col_offset=16), Expr(Call(Attribute(Name('os', Load(), lineno=119, col_offset=16), '_exit', Load(), lineno=119, col_offset=16), [Num(3, lineno=119, col_offset=25)], [], None, None, lineno=119, col_offset=16), lineno=119, col_offset=16)], [], lineno=117, col_offset=12), Expr(Call(Name('debug', Load(), lineno=123, col_offset=12), [Str('In child, calling os.setsid()', lineno=123, col_offset=18)], [], None, None, lineno=123, col_offset=12), lineno=123, col_offset=12), TryExcept([Expr(Call(Attribute(Name('os', Load(), lineno=125, col_offset=16), 'setsid', Load(), lineno=125, col_offset=16), [], [], None, None, lineno=125, col_offset=16), lineno=125, col_offset=16)], [ExceptHandler(Name('OSError', Load(), lineno=126, col_offset=19), None, [Expr(Call(Name('debug', Load(), lineno=128, col_offset=16), [Str('Good: OSError was raised.', lineno=128, col_offset=22)], [], None, None, lineno=128, col_offset=16), lineno=128, col_offset=16), Pass( lineno=129, col_offset=16)], lineno=126, col_offset=12), ExceptHandler(Name('AttributeError', Load(), lineno=130, col_offset=19), None, [Expr(Call(Name('debug', Load(), lineno=132, col_offset=16), [Str('No setsid() available?', lineno=132, col_offset=22)], [], None, None, lineno=132, col_offset=16), lineno=132, col_offset=16), Pass( lineno=133, col_offset=16)], lineno=130, col_offset=12), ExceptHandler(None, None, [Expr(Call(Name('debug', Load(), lineno=139, col_offset=16), [Str('An unexpected error was raised.', lineno=139, col_offset=22)], [], None, None, lineno=139, col_offset=16), lineno=139, col_offset=16), Expr(Call(Attribute(Name('os', Load(), lineno=140, col_offset=16), '_exit', Load(), lineno=140, col_offset=16), [Num(1, lineno=140, col_offset=25)], [], None, None, lineno=140, col_offset=16), lineno=140, col_offset=16)], lineno=134, col_offset=12)], [Expr(Call(Name('debug', Load(), lineno=142, col_offset=16), [Str('os.setsid() succeeded! (bad!)', lineno=142, col_offset=22)], [], None, None, lineno=142, col_offset=16), lineno=142, col_offset=16), Expr(Call(Attribute(Name('os', Load(), lineno=143, col_offset=16), '_exit', Load(), lineno=143, col_offset=16), [Num(2, lineno=143, col_offset=25)], [], None, None, lineno=143, col_offset=16), lineno=143, col_offset=16)], lineno=124, col_offset=12), Expr(Call(Attribute(Name('os', Load(), lineno=144, col_offset=12), '_exit', Load(), lineno=144, col_offset=12), [Num(4, lineno=144, col_offset=21)], [], None, None, lineno=144, col_offset=12), lineno=144, col_offset=12)], [Expr(Call(Name('debug', Load(), lineno=146, col_offset=12), [BinOp(Str('Waiting for child (%d) to finish.', lineno=146, col_offset=18), Mod(), Name('pid', Load(), lineno=146, col_offset=56), lineno=146, col_offset=18)], [], None, None, lineno=146, col_offset=12), lineno=146, col_offset=12), While(Name('True', Load(), lineno=157, col_offset=18), [TryExcept([Assign([Name('data', Store(), lineno=159, col_offset=20)], Call(Attribute(Name('os', Load(), lineno=159, col_offset=27), 'read', Load(), lineno=159, col_offset=27), [Name('master_fd', Load(), lineno=159, col_offset=35), Num(80, lineno=159, col_offset=46)], [], None, None, lineno=159, col_offset=27), lineno=159, col_offset=20)], [ExceptHandler(Name('OSError', Load(), lineno=160, col_offset=23), None, [Break( lineno=161, col_offset=20)], lineno=160, col_offset=16)], [], lineno=158, col_offset=16), If(UnaryOp(Not(), Name('data', Load(), lineno=162, col_offset=23), lineno=162, col_offset=19), [Break( lineno=163, col_offset=20)], [], lineno=162, col_offset=16), Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=164, col_offset=16), 'stdout', Load(), lineno=164, col_offset=16), 'write', Load(), lineno=164, col_offset=16), [Call(Attribute(Name('data', Load(), lineno=164, col_offset=33), 'replace', Load(), lineno=164, col_offset=33), [Str('\r\n', lineno=164, col_offset=46), Str('\n', lineno=164, col_offset=54)], [], None, None, lineno=164, col_offset=33)], [], None, None, lineno=164, col_offset=16), lineno=164, col_offset=16)], [], lineno=157, col_offset=12), Assign([Tuple([Name('pid', Store(), lineno=172, col_offset=13), Name('status', Store(), lineno=172, col_offset=18)], Store(), lineno=172, col_offset=13)], Call(Attribute(Name('os', Load(), lineno=172, col_offset=28), 'waitpid', Load(), lineno=172, col_offset=28), [Name('pid', Load(), lineno=172, col_offset=39), Num(0, lineno=172, col_offset=44)], [], None, None, lineno=172, col_offset=28), lineno=172, col_offset=12), Assign([Name('res', Store(), lineno=173, col_offset=12)], BinOp(Name('status', Load(), lineno=173, col_offset=18), RShift(), Num(8, lineno=173, col_offset=28), lineno=173, col_offset=18), lineno=173, col_offset=12), Expr(Call(Name('debug', Load(), lineno=174, col_offset=12), [BinOp(Str('Child (%d) exited with status %d (%d).', lineno=174, col_offset=18), Mod(), Tuple([Name('pid', Load(), lineno=174, col_offset=62), Name('res', Load(), lineno=174, col_offset=67), Name('status', Load(), lineno=174, col_offset=72)], Load(), lineno=174, col_offset=62), lineno=174, col_offset=18)], [], None, None, lineno=174, col_offset=12), lineno=174, col_offset=12), If(Compare(Name('res', Load(), lineno=175, col_offset=15), [Eq()], [Num(1, lineno=175, col_offset=22)], lineno=175, col_offset=15), [Expr(Call(Attribute(Name('self', Load(), lineno=176, col_offset=16), 'fail', Load(), lineno=176, col_offset=16), [Str('Child raised an unexpected exception in os.setsid()', lineno=176, col_offset=26)], [], None, None, lineno=176, col_offset=16), lineno=176, col_offset=16)], [If(Compare(Name('res', Load(), lineno=177, col_offset=17), [Eq()], [Num(2, lineno=177, col_offset=24)], lineno=177, col_offset=17), [Expr(Call(Attribute(Name('self', Load(), lineno=178, col_offset=16), 'fail', Load(), lineno=178, col_offset=16), [Str('pty.fork() failed to make child a session leader.', lineno=178, col_offset=26)], [], None, None, lineno=178, col_offset=16), lineno=178, col_offset=16)], [If(Compare(Name('res', Load(), lineno=179, col_offset=17), [Eq()], [Num(3, lineno=179, col_offset=24)], lineno=179, col_offset=17), [Expr(Call(Attribute(Name('self', Load(), lineno=180, col_offset=16), 'fail', Load(), lineno=180, col_offset=16), [Str('Child spawned by pty.fork() did not have a tty as stdout', lineno=180, col_offset=26)], [], None, None, lineno=180, col_offset=16), lineno=180, col_offset=16)], [If(Compare(Name('res', Load(), lineno=181, col_offset=17), [NotEq()], [Num(4, lineno=181, col_offset=24)], lineno=181, col_offset=17), [Expr(Call(Attribute(Name('self', Load(), lineno=182, col_offset=16), 'fail', Load(), lineno=182, col_offset=16), [Str('pty.fork() failed for unknown reasons.', lineno=182, col_offset=26)], [], None, None, lineno=182, col_offset=16), lineno=182, col_offset=16)], [], lineno=181, col_offset=17)], lineno=179, col_offset=17)], lineno=177, col_offset=17)], lineno=175, col_offset=12)], lineno=115, col_offset=8), Expr(Call(Attribute(Name('os', Load(), lineno=192, col_offset=8), 'close', Load(), lineno=192, col_offset=8), [Name('master_fd', Load(), lineno=192, col_offset=17)], [], None, None, lineno=192, col_offset=8), lineno=192, col_offset=8)], [], lineno=112, col_offset=4)], [], lineno=50, col_offset=0), FunctionDef('test_main', arguments([Name('verbose', Param(), lineno=196, col_offset=14)], None, None, [Name('None', Load(), lineno=196, col_offset=22)]), [Expr(Call(Name('run_unittest', Load(), lineno=197, col_offset=4), [Name('PtyTest', Load(), lineno=197, col_offset=17)], [], None, None, lineno=197, col_offset=4), lineno=197, col_offset=4)], [], lineno=196, col_offset=0), If(Compare(Name('__name__', Load(), lineno=199, col_offset=3), [Eq()], [Str('__main__', lineno=199, col_offset=15)], lineno=199, col_offset=3), [Expr(Call(Name('test_main', Load(), lineno=200, col_offset=4), [], [], None, None, lineno=200, col_offset=4), lineno=200, col_offset=4)], [], lineno=199, col_offset=0)])
