Module([Expr(Str('\nSVN helper script.\n\nTry to set the svn:eol-style property to "native" on every .py, .txt, .c and\n.h file in the directory tree rooted at the current directory.\n\nFiles with the svn:eol-style property already set (to anything) are skipped.\n\nsvn will itself refuse to set this property on a file that\'s not under SVN\ncontrol, or that has a binary mime-type property set.  This script inherits\nthat behavior, and passes on whatever warning message the failing "svn\npropset" command produces.\n\nIn the Python project, it\'s safe to invoke this script from the root of\na checkout.\n\nNo output is produced for files that are ignored.  For a file that gets\nsvn:eol-style set, output looks like:\n\n    property \'svn:eol-style\' set on \'Lib\\ctypes\\__init__.py\'\n\nFor a file not under version control:\n\n    svn: warning: \'patch-finalizer.txt\' is not under version control\n\nand for a file with a binary mime-type property:\n\n    svn: File \'Lib\test\test_pep263.py\' has binary mime type property\n', lineno=31, col_offset=-1), lineno=31, col_offset=-1), Import([alias('re', None)], lineno=33, col_offset=0), Import([alias('os', None)], lineno=34, col_offset=0), FunctionDef('propfiles', arguments([Name('root', Param(), lineno=36, col_offset=14), Name('fn', Param(), lineno=36, col_offset=20)], None, None, []), [Assign([Name('default', Store(), lineno=37, col_offset=4)], Call(Attribute(Attribute(Name('os', Load(), lineno=37, col_offset=14), 'path', Load(), lineno=37, col_offset=14), 'join', Load(), lineno=37, col_offset=14), [Name('root', Load(), lineno=37, col_offset=27), Str('.svn', lineno=37, col_offset=33), Str('props', lineno=37, col_offset=41), BinOp(Name('fn', Load(), lineno=37, col_offset=50), Add(), Str('.svn-work', lineno=37, col_offset=53), lineno=37, col_offset=50)], [], None, None, lineno=37, col_offset=14), lineno=37, col_offset=4), TryExcept([Assign([Name('format', Store(), lineno=39, col_offset=8)], Call(Name('int', Load(), lineno=39, col_offset=17), [Call(Attribute(Call(Attribute(Call(Name('open', Load(), lineno=39, col_offset=21), [Call(Attribute(Attribute(Name('os', Load(), lineno=39, col_offset=26), 'path', Load(), lineno=39, col_offset=26), 'join', Load(), lineno=39, col_offset=26), [Name('root', Load(), lineno=39, col_offset=39), Str('.svn', lineno=39, col_offset=45), Str('format', lineno=39, col_offset=53)], [], None, None, lineno=39, col_offset=26)], [], None, None, lineno=39, col_offset=21), 'read', Load(), lineno=39, col_offset=21), [], [], None, None, lineno=39, col_offset=21), 'strip', Load(), lineno=39, col_offset=21), [], [], None, None, lineno=39, col_offset=21)], [], None, None, lineno=39, col_offset=17), lineno=39, col_offset=8)], [ExceptHandler(Name('IOError', Load(), lineno=40, col_offset=11), None, [Return(List([], Load(), lineno=41, col_offset=15), lineno=41, col_offset=8)], lineno=40, col_offset=4)], [], lineno=38, col_offset=4), If(Compare(Name('format', Load(), lineno=42, col_offset=7), [In()], [Tuple([Num(8, lineno=42, col_offset=18), Num(9, lineno=42, col_offset=21)], Load(), lineno=42, col_offset=18)], lineno=42, col_offset=7), [Return(List([Call(Attribute(Attribute(Name('os', Load(), lineno=45, col_offset=16), 'path', Load(), lineno=45, col_offset=16), 'join', Load(), lineno=45, col_offset=16), [Name('root', Load(), lineno=45, col_offset=29), Str('.svn', lineno=45, col_offset=35), Str('prop-base', lineno=45, col_offset=43), BinOp(Name('fn', Load(), lineno=45, col_offset=56), Add(), Str('.svn-base', lineno=45, col_offset=59), lineno=45, col_offset=56)], [], None, None, lineno=45, col_offset=16), Call(Attribute(Attribute(Name('os', Load(), lineno=46, col_offset=16), 'path', Load(), lineno=46, col_offset=16), 'join', Load(), lineno=46, col_offset=16), [Name('root', Load(), lineno=46, col_offset=29), Str('.svn', lineno=46, col_offset=35), Str('props', lineno=46, col_offset=43), BinOp(Name('fn', Load(), lineno=46, col_offset=52), Add(), Str('.svn-work', lineno=46, col_offset=55), lineno=46, col_offset=52)], [], None, None, lineno=46, col_offset=16)], Load(), lineno=45, col_offset=15), lineno=45, col_offset=8)], [], lineno=42, col_offset=4), Raise(Name('ValueError', Load(), lineno=47, col_offset=10), Str('Unknown repository format', lineno=47, col_offset=22), None, lineno=47, col_offset=4)], [], lineno=36, col_offset=0), FunctionDef('proplist', arguments([Name('root', Param(), lineno=49, col_offset=13), Name('fn', Param(), lineno=49, col_offset=19)], None, None, []), [Expr(Str('Return a list of property names for file fn in directory root', lineno=50, col_offset=4), lineno=50, col_offset=4), Assign([Name('result', Store(), lineno=51, col_offset=4)], List([], Load(), lineno=51, col_offset=13), lineno=51, col_offset=4), For(Name('path', Store(), lineno=52, col_offset=8), Call(Name('propfiles', Load(), lineno=52, col_offset=16), [Name('root', Load(), lineno=52, col_offset=26), Name('fn', Load(), lineno=52, col_offset=32)], [], None, None, lineno=52, col_offset=16), [TryExcept([Assign([Name('f', Store(), lineno=54, col_offset=12)], Call(Name('open', Load(), lineno=54, col_offset=16), [Name('path', Load(), lineno=54, col_offset=21)], [], None, None, lineno=54, col_offset=16), lineno=54, col_offset=12)], [ExceptHandler(Name('IOError', Load(), lineno=55, col_offset=15), None, [Continue( lineno=58, col_offset=12)], lineno=55, col_offset=8)], [], lineno=53, col_offset=8), While(Num(1, lineno=59, col_offset=14), [Assign([Name('line', Store(), lineno=66, col_offset=12)], Call(Attribute(Name('f', Load(), lineno=66, col_offset=19), 'readline', Load(), lineno=66, col_offset=19), [], [], None, None, lineno=66, col_offset=19), lineno=66, col_offset=12), If(Call(Attribute(Name('line', Load(), lineno=67, col_offset=15), 'startswith', Load(), lineno=67, col_offset=15), [Str('END', lineno=67, col_offset=31)], [], None, None, lineno=67, col_offset=15), [Break( lineno=68, col_offset=16)], [], lineno=67, col_offset=12), Assert(Call(Attribute(Name('line', Load(), lineno=69, col_offset=19), 'startswith', Load(), lineno=69, col_offset=19), [Str('K ', lineno=69, col_offset=35)], [], None, None, lineno=69, col_offset=19), None, lineno=69, col_offset=12), Assign([Name('L', Store(), lineno=70, col_offset=12)], Call(Name('int', Load(), lineno=70, col_offset=16), [Subscript(Call(Attribute(Name('line', Load(), lineno=70, col_offset=20), 'split', Load(), lineno=70, col_offset=20), [], [], None, None, lineno=70, col_offset=20), Index(Num(1, lineno=70, col_offset=33)), Load(), lineno=70, col_offset=20)], [], None, None, lineno=70, col_offset=16), lineno=70, col_offset=12), Assign([Name('key', Store(), lineno=71, col_offset=12)], Call(Attribute(Name('f', Load(), lineno=71, col_offset=18), 'read', Load(), lineno=71, col_offset=18), [Name('L', Load(), lineno=71, col_offset=25)], [], None, None, lineno=71, col_offset=18), lineno=71, col_offset=12), Expr(Call(Attribute(Name('result', Load(), lineno=72, col_offset=12), 'append', Load(), lineno=72, col_offset=12), [Name('key', Load(), lineno=72, col_offset=26)], [], None, None, lineno=72, col_offset=12), lineno=72, col_offset=12), Expr(Call(Attribute(Name('f', Load(), lineno=73, col_offset=12), 'readline', Load(), lineno=73, col_offset=12), [], [], None, None, lineno=73, col_offset=12), lineno=73, col_offset=12), Assign([Name('line', Store(), lineno=74, col_offset=12)], Call(Attribute(Name('f', Load(), lineno=74, col_offset=19), 'readline', Load(), lineno=74, col_offset=19), [], [], None, None, lineno=74, col_offset=19), lineno=74, col_offset=12), Assert(Call(Attribute(Name('line', Load(), lineno=75, col_offset=19), 'startswith', Load(), lineno=75, col_offset=19), [Str('V ', lineno=75, col_offset=35)], [], None, None, lineno=75, col_offset=19), None, lineno=75, col_offset=12), Assign([Name('L', Store(), lineno=76, col_offset=12)], Call(Name('int', Load(), lineno=76, col_offset=16), [Subscript(Call(Attribute(Name('line', Load(), lineno=76, col_offset=20), 'split', Load(), lineno=76, col_offset=20), [], [], None, None, lineno=76, col_offset=20), Index(Num(1, lineno=76, col_offset=33)), Load(), lineno=76, col_offset=20)], [], None, None, lineno=76, col_offset=16), lineno=76, col_offset=12), Assign([Name('value', Store(), lineno=77, col_offset=12)], Call(Attribute(Name('f', Load(), lineno=77, col_offset=20), 'read', Load(), lineno=77, col_offset=20), [Name('L', Load(), lineno=77, col_offset=27)], [], None, None, lineno=77, col_offset=20), lineno=77, col_offset=12), Expr(Call(Attribute(Name('f', Load(), lineno=78, col_offset=12), 'readline', Load(), lineno=78, col_offset=12), [], [], None, None, lineno=78, col_offset=12), lineno=78, col_offset=12)], [], lineno=59, col_offset=8), Expr(Call(Attribute(Name('f', Load(), lineno=79, col_offset=8), 'close', Load(), lineno=79, col_offset=8), [], [], None, None, lineno=79, col_offset=8), lineno=79, col_offset=8)], [], lineno=52, col_offset=4), Return(Name('result', Load(), lineno=80, col_offset=11), lineno=80, col_offset=4)], [], lineno=49, col_offset=0), Assign([Name('possible_text_file', Store(), lineno=82, col_offset=0)], Attribute(Call(Attribute(Name('re', Load(), lineno=82, col_offset=21), 'compile', Load(), lineno=82, col_offset=21), [Str('\\.([hc]|py|txt|sln|vcproj)$', lineno=82, col_offset=32)], [], None, None, lineno=82, col_offset=21), 'search', Load(), lineno=82, col_offset=21), lineno=82, col_offset=0), For(Tuple([Name('root', Store(), lineno=84, col_offset=4), Name('dirs', Store(), lineno=84, col_offset=10), Name('files', Store(), lineno=84, col_offset=16)], Store(), lineno=84, col_offset=4), Call(Attribute(Name('os', Load(), lineno=84, col_offset=25), 'walk', Load(), lineno=84, col_offset=25), [Str('.', lineno=84, col_offset=33)], [], None, None, lineno=84, col_offset=25), [If(Compare(Str('.svn', lineno=85, col_offset=7), [In()], [Name('dirs', Load(), lineno=85, col_offset=17)], lineno=85, col_offset=7), [Expr(Call(Attribute(Name('dirs', Load(), lineno=86, col_offset=8), 'remove', Load(), lineno=86, col_offset=8), [Str('.svn', lineno=86, col_offset=20)], [], None, None, lineno=86, col_offset=8), lineno=86, col_offset=8)], [], lineno=85, col_offset=4), For(Name('fn', Store(), lineno=87, col_offset=8), Name('files', Load(), lineno=87, col_offset=14), [If(Call(Name('possible_text_file', Load(), lineno=88, col_offset=11), [Name('fn', Load(), lineno=88, col_offset=30)], [], None, None, lineno=88, col_offset=11), [If(Compare(Str('svn:eol-style', lineno=89, col_offset=15), [NotIn()], [Call(Name('proplist', Load(), lineno=89, col_offset=38), [Name('root', Load(), lineno=89, col_offset=47), Name('fn', Load(), lineno=89, col_offset=53)], [], None, None, lineno=89, col_offset=38)], lineno=89, col_offset=15), [Assign([Name('path', Store(), lineno=90, col_offset=16)], Call(Attribute(Attribute(Name('os', Load(), lineno=90, col_offset=23), 'path', Load(), lineno=90, col_offset=23), 'join', Load(), lineno=90, col_offset=23), [Name('root', Load(), lineno=90, col_offset=36), Name('fn', Load(), lineno=90, col_offset=42)], [], None, None, lineno=90, col_offset=23), lineno=90, col_offset=16), Expr(Call(Attribute(Name('os', Load(), lineno=91, col_offset=16), 'system', Load(), lineno=91, col_offset=16), [BinOp(Str('svn propset svn:eol-style native "%s"', lineno=91, col_offset=26), Mod(), Name('path', Load(), lineno=91, col_offset=68), lineno=91, col_offset=26)], [], None, None, lineno=91, col_offset=16), lineno=91, col_offset=16)], [], lineno=89, col_offset=12)], [], lineno=88, col_offset=8)], [], lineno=87, col_offset=4)], [], lineno=84, col_offset=0)])
