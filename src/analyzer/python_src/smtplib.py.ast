Module([Expr(Str('SMTP/ESMTP client class.\n\nThis should follow RFC 821 (SMTP), RFC 1869 (ESMTP), RFC 2554 (SMTP\nAuthentication) and RFC 2487 (Secure SMTP over TLS).\n\nNotes:\n\nPlease remember, when doing ESMTP, that the names of the SMTP service\nextensions are NOT the same thing as the option keywords for the RCPT\nand MAIL commands!\n\nExample:\n\n  >>> import smtplib\n  >>> s=smtplib.SMTP("localhost")\n  >>> print s.help()\n  This is Sendmail version 8.8.4\n  Topics:\n      HELO    EHLO    MAIL    RCPT    DATA\n      RSET    NOOP    QUIT    HELP    VRFY\n      EXPN    VERB    ETRN    DSN\n  For more info use "HELP <topic>".\n  To report bugs in the implementation send email to\n      sendmail-bugs@sendmail.org.\n  For local information send email to Postmaster at your site.\n  End of HELP info\n  >>> s.putcmd("vrfy","someone@here")\n  >>> s.getreply()\n  (250, "Somebody OverHere <somebody@here.my.org>")\n  >>> s.quit()\n', lineno=33, col_offset=-1), lineno=33, col_offset=-1), Import([alias('socket', None)], lineno=44, col_offset=0), Import([alias('re', None)], lineno=45, col_offset=0), Import([alias('email.utils', None)], lineno=46, col_offset=0), Import([alias('base64', None)], lineno=47, col_offset=0), Import([alias('hmac', None)], lineno=48, col_offset=0), ImportFrom('email.base64mime', [alias('encode', 'encode_base64')], 0, lineno=49, col_offset=0), ImportFrom('sys', [alias('stderr', None)], 0, lineno=50, col_offset=0), Assign([Name('__all__', Store(), lineno=52, col_offset=0)], List([Str('SMTPException', lineno=52, col_offset=11), Str('SMTPServerDisconnected', lineno=52, col_offset=27), Str('SMTPResponseException', lineno=52, col_offset=52), Str('SMTPSenderRefused', lineno=53, col_offset=11), Str('SMTPRecipientsRefused', lineno=53, col_offset=31), Str('SMTPDataError', lineno=53, col_offset=55), Str('SMTPConnectError', lineno=54, col_offset=11), Str('SMTPHeloError', lineno=54, col_offset=30), Str('SMTPAuthenticationError', lineno=54, col_offset=46), Str('quoteaddr', lineno=55, col_offset=11), Str('quotedata', lineno=55, col_offset=23), Str('SMTP', lineno=55, col_offset=35)], Load(), lineno=52, col_offset=10), lineno=52, col_offset=0), Assign([Name('SMTP_PORT', Store(), lineno=57, col_offset=0)], Num(25, lineno=57, col_offset=12), lineno=57, col_offset=0), Assign([Name('SMTP_SSL_PORT', Store(), lineno=58, col_offset=0)], Num(465, lineno=58, col_offset=16), lineno=58, col_offset=0), Assign([Name('CRLF', Store(), lineno=59, col_offset=0)], Str('\r\n', lineno=59, col_offset=5), lineno=59, col_offset=0), Assign([Name('OLDSTYLE_AUTH', Store(), lineno=61, col_offset=0)], Call(Attribute(Name('re', Load(), lineno=61, col_offset=16), 'compile', Load(), lineno=61, col_offset=16), [Str('auth=(.*)', lineno=61, col_offset=27), Attribute(Name('re', Load(), lineno=61, col_offset=41), 'I', Load(), lineno=61, col_offset=41)], [], None, None, lineno=61, col_offset=16), lineno=61, col_offset=0), ClassDef('SMTPException', [Name('Exception', Load(), lineno=64, col_offset=20)], [Expr(Str('Base class for all exceptions raised by this module.', lineno=65, col_offset=4), lineno=65, col_offset=4)], [], lineno=64, col_offset=0), ClassDef('SMTPServerDisconnected', [Name('SMTPException', Load(), lineno=67, col_offset=29)], [Expr(Str('Not connected to any SMTP server.\n\n    This exception is raised when the server unexpectedly disconnects,\n    or when an attempt is made to use the SMTP instance before\n    connecting it to a server.\n    ', lineno=73, col_offset=-1), lineno=73, col_offset=-1)], [], lineno=67, col_offset=0), ClassDef('SMTPResponseException', [Name('SMTPException', Load(), lineno=75, col_offset=28)], [Expr(Str("Base class for all exceptions that include an SMTP error code.\n\n    These exceptions are generated in some instances when the SMTP\n    server returns an error code.  The error code is stored in the\n    `smtp_code' attribute of the error, and the `smtp_error' attribute\n    is set to the error message.\n    ", lineno=82, col_offset=-1), lineno=82, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=84, col_offset=17), Name('code', Param(), lineno=84, col_offset=23), Name('msg', Param(), lineno=84, col_offset=29)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=85, col_offset=8), 'smtp_code', Store(), lineno=85, col_offset=8)], Name('code', Load(), lineno=85, col_offset=25), lineno=85, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=86, col_offset=8), 'smtp_error', Store(), lineno=86, col_offset=8)], Name('msg', Load(), lineno=86, col_offset=26), lineno=86, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=87, col_offset=8), 'args', Store(), lineno=87, col_offset=8)], Tuple([Name('code', Load(), lineno=87, col_offset=21), Name('msg', Load(), lineno=87, col_offset=27)], Load(), lineno=87, col_offset=21), lineno=87, col_offset=8)], [], lineno=84, col_offset=4)], [], lineno=75, col_offset=0), ClassDef('SMTPSenderRefused', [Name('SMTPResponseException', Load(), lineno=89, col_offset=24)], [Expr(Str("Sender address refused.\n\n    In addition to the attributes set by on all SMTPResponseException\n    exceptions, this sets `sender' to the string that the SMTP refused.\n    ", lineno=94, col_offset=-1), lineno=94, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=96, col_offset=17), Name('code', Param(), lineno=96, col_offset=23), Name('msg', Param(), lineno=96, col_offset=29), Name('sender', Param(), lineno=96, col_offset=34)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=97, col_offset=8), 'smtp_code', Store(), lineno=97, col_offset=8)], Name('code', Load(), lineno=97, col_offset=25), lineno=97, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=98, col_offset=8), 'smtp_error', Store(), lineno=98, col_offset=8)], Name('msg', Load(), lineno=98, col_offset=26), lineno=98, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=99, col_offset=8), 'sender', Store(), lineno=99, col_offset=8)], Name('sender', Load(), lineno=99, col_offset=22), lineno=99, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=100, col_offset=8), 'args', Store(), lineno=100, col_offset=8)], Tuple([Name('code', Load(), lineno=100, col_offset=21), Name('msg', Load(), lineno=100, col_offset=27), Name('sender', Load(), lineno=100, col_offset=32)], Load(), lineno=100, col_offset=21), lineno=100, col_offset=8)], [], lineno=96, col_offset=4)], [], lineno=89, col_offset=0), ClassDef('SMTPRecipientsRefused', [Name('SMTPException', Load(), lineno=102, col_offset=28)], [Expr(Str("All recipient addresses refused.\n\n    The errors for each recipient are accessible through the attribute\n    'recipients', which is a dictionary of exactly the same sort as\n    SMTP.sendmail() returns.\n    ", lineno=108, col_offset=-1), lineno=108, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=110, col_offset=17), Name('recipients', Param(), lineno=110, col_offset=23)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=111, col_offset=8), 'recipients', Store(), lineno=111, col_offset=8)], Name('recipients', Load(), lineno=111, col_offset=26), lineno=111, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=112, col_offset=8), 'args', Store(), lineno=112, col_offset=8)], Tuple([Name('recipients', Load(), lineno=112, col_offset=22)], Load(), lineno=112, col_offset=22), lineno=112, col_offset=8)], [], lineno=110, col_offset=4)], [], lineno=102, col_offset=0), ClassDef('SMTPDataError', [Name('SMTPResponseException', Load(), lineno=115, col_offset=20)], [Expr(Str("The SMTP server didn't accept the data.", lineno=116, col_offset=4), lineno=116, col_offset=4)], [], lineno=115, col_offset=0), ClassDef('SMTPConnectError', [Name('SMTPResponseException', Load(), lineno=118, col_offset=23)], [Expr(Str('Error during connection establishment.', lineno=119, col_offset=4), lineno=119, col_offset=4)], [], lineno=118, col_offset=0), ClassDef('SMTPHeloError', [Name('SMTPResponseException', Load(), lineno=121, col_offset=20)], [Expr(Str('The server refused our HELO reply.', lineno=122, col_offset=4), lineno=122, col_offset=4)], [], lineno=121, col_offset=0), ClassDef('SMTPAuthenticationError', [Name('SMTPResponseException', Load(), lineno=124, col_offset=30)], [Expr(Str("Authentication error.\n\n    Most probably the server didn't accept the username/password\n    combination provided.\n    ", lineno=129, col_offset=-1), lineno=129, col_offset=-1)], [], lineno=124, col_offset=0), FunctionDef('quoteaddr', arguments([Name('addr', Param(), lineno=131, col_offset=14)], None, None, []), [Expr(Str('Quote a subset of the email addresses defined by RFC 821.\n\n    Should be able to handle anything rfc822.parseaddr can handle.\n    ', lineno=135, col_offset=-1), lineno=135, col_offset=-1), Assign([Name('m', Store(), lineno=136, col_offset=4)], Tuple([Name('None', Load(), lineno=136, col_offset=9), Name('None', Load(), lineno=136, col_offset=15)], Load(), lineno=136, col_offset=9), lineno=136, col_offset=4), TryExcept([Assign([Name('m', Store(), lineno=138, col_offset=8)], Subscript(Call(Attribute(Attribute(Name('email', Load(), lineno=138, col_offset=12), 'utils', Load(), lineno=138, col_offset=12), 'parseaddr', Load(), lineno=138, col_offset=12), [Name('addr', Load(), lineno=138, col_offset=34)], [], None, None, lineno=138, col_offset=12), Index(Num(1, lineno=138, col_offset=40)), Load(), lineno=138, col_offset=12), lineno=138, col_offset=8)], [ExceptHandler(Name('AttributeError', Load(), lineno=139, col_offset=11), None, [Pass( lineno=140, col_offset=8)], lineno=139, col_offset=4)], [], lineno=137, col_offset=4), If(Compare(Name('m', Load(), lineno=141, col_offset=7), [Eq()], [Tuple([Name('None', Load(), lineno=141, col_offset=13), Name('None', Load(), lineno=141, col_offset=19)], Load(), lineno=141, col_offset=13)], lineno=141, col_offset=7), [Return(BinOp(Str('<%s>', lineno=143, col_offset=15), Mod(), Name('addr', Load(), lineno=143, col_offset=24), lineno=143, col_offset=15), lineno=143, col_offset=8)], [If(Compare(Name('m', Load(), lineno=144, col_offset=9), [Is()], [Name('None', Load(), lineno=144, col_offset=14)], lineno=144, col_offset=9), [Return(Str('<>', lineno=146, col_offset=15), lineno=146, col_offset=8)], [Return(BinOp(Str('<%s>', lineno=148, col_offset=15), Mod(), Name('m', Load(), lineno=148, col_offset=24), lineno=148, col_offset=15), lineno=148, col_offset=8)], lineno=144, col_offset=9)], lineno=141, col_offset=4)], [], lineno=131, col_offset=0), FunctionDef('quotedata', arguments([Name('data', Param(), lineno=150, col_offset=14)], None, None, []), [Expr(Str("Quote data for email.\n\n    Double leading '.', and change Unix newline '\\n', or Mac '\\r' into\n    Internet CRLF end-of-line.\n    ", lineno=155, col_offset=-1), lineno=155, col_offset=-1), Return(Call(Attribute(Name('re', Load(), lineno=156, col_offset=11), 'sub', Load(), lineno=156, col_offset=11), [Str('(?m)^\\.', lineno=156, col_offset=18), Str('..', lineno=156, col_offset=30), Call(Attribute(Name('re', Load(), lineno=157, col_offset=8), 'sub', Load(), lineno=157, col_offset=8), [Str('(?:\\r\\n|\\n|\\r(?!\\n))', lineno=157, col_offset=15), Name('CRLF', Load(), lineno=157, col_offset=40), Name('data', Load(), lineno=157, col_offset=46)], [], None, None, lineno=157, col_offset=8)], [], None, None, lineno=156, col_offset=11), lineno=156, col_offset=4)], [], lineno=150, col_offset=0), TryExcept([Import([alias('ssl', None)], lineno=161, col_offset=4)], [ExceptHandler(Name('ImportError', Load(), lineno=162, col_offset=7), None, [Assign([Name('_have_ssl', Store(), lineno=163, col_offset=4)], Name('False', Load(), lineno=163, col_offset=16), lineno=163, col_offset=4)], lineno=162, col_offset=0)], [ClassDef('SSLFakeFile', [], [Expr(Str('A fake file like object that really wraps a SSLObject.\n\n        It only supports what is needed in smtplib.\n        ', lineno=169, col_offset=-1), lineno=169, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=170, col_offset=21), Name('sslobj', Param(), lineno=170, col_offset=27)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=171, col_offset=12), 'sslobj', Store(), lineno=171, col_offset=12)], Name('sslobj', Load(), lineno=171, col_offset=26), lineno=171, col_offset=12)], [], lineno=170, col_offset=8), FunctionDef('readline', arguments([Name('self', Param(), lineno=173, col_offset=21)], None, None, []), [Assign([Name('str', Store(), lineno=174, col_offset=12)], Str('', lineno=174, col_offset=18), lineno=174, col_offset=12), Assign([Name('chr', Store(), lineno=175, col_offset=12)], Name('None', Load(), lineno=175, col_offset=18), lineno=175, col_offset=12), While(Compare(Name('chr', Load(), lineno=176, col_offset=18), [NotEq()], [Str('\n', lineno=176, col_offset=25)], lineno=176, col_offset=18), [Assign([Name('chr', Store(), lineno=177, col_offset=16)], Call(Attribute(Attribute(Name('self', Load(), lineno=177, col_offset=22), 'sslobj', Load(), lineno=177, col_offset=22), 'read', Load(), lineno=177, col_offset=22), [Num(1, lineno=177, col_offset=39)], [], None, None, lineno=177, col_offset=22), lineno=177, col_offset=16), If(UnaryOp(Not(), Name('chr', Load(), lineno=178, col_offset=23), lineno=178, col_offset=19), [Break( lineno=178, col_offset=28)], [], lineno=178, col_offset=16), AugAssign(Name('str', Store(), lineno=179, col_offset=16), Add(), Name('chr', Load(), lineno=179, col_offset=23), lineno=179, col_offset=16)], [], lineno=176, col_offset=12), Return(Name('str', Load(), lineno=180, col_offset=19), lineno=180, col_offset=12)], [], lineno=173, col_offset=8), FunctionDef('close', arguments([Name('self', Param(), lineno=182, col_offset=18)], None, None, []), [Pass( lineno=183, col_offset=12)], [], lineno=182, col_offset=8)], [], lineno=165, col_offset=4), Assign([Name('_have_ssl', Store(), lineno=185, col_offset=4)], Name('True', Load(), lineno=185, col_offset=16), lineno=185, col_offset=4)], lineno=160, col_offset=0), ClassDef('SMTP', [], [Expr(Str("This class manages a connection to an SMTP or ESMTP server.\n    SMTP Objects:\n        SMTP objects have the following attributes:\n            helo_resp\n                This is the message given by the server in response to the\n                most recent HELO command.\n\n            ehlo_resp\n                This is the message given by the server in response to the\n                most recent EHLO command. This is usually multiline.\n\n            does_esmtp\n                This is a True value _after you do an EHLO command_, if the\n                server supports ESMTP.\n\n            esmtp_features\n                This is a dictionary, which, if the server supports ESMTP,\n                will _after you do an EHLO command_, contain the names of the\n                SMTP service extensions this server supports, and their\n                parameters (if any).\n\n                Note, all extension names are mapped to lower case in the\n                dictionary.\n\n        See each method's docstrings for details.  In general, there is a\n        method of the same name to perform each SMTP command.  There is also a\n        method called 'sendmail' that will do an entire mail transaction.\n        ", lineno=215, col_offset=-1), lineno=215, col_offset=-1), Assign([Name('debuglevel', Store(), lineno=216, col_offset=4)], Num(0, lineno=216, col_offset=17), lineno=216, col_offset=4), Assign([Name('file', Store(), lineno=217, col_offset=4)], Name('None', Load(), lineno=217, col_offset=11), lineno=217, col_offset=4), Assign([Name('helo_resp', Store(), lineno=218, col_offset=4)], Name('None', Load(), lineno=218, col_offset=16), lineno=218, col_offset=4), Assign([Name('ehlo_msg', Store(), lineno=219, col_offset=4)], Str('ehlo', lineno=219, col_offset=15), lineno=219, col_offset=4), Assign([Name('ehlo_resp', Store(), lineno=220, col_offset=4)], Name('None', Load(), lineno=220, col_offset=16), lineno=220, col_offset=4), Assign([Name('does_esmtp', Store(), lineno=221, col_offset=4)], Num(0, lineno=221, col_offset=17), lineno=221, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=223, col_offset=17), Name('host', Param(), lineno=223, col_offset=23), Name('port', Param(), lineno=223, col_offset=32), Name('local_hostname', Param(), lineno=223, col_offset=40), Name('timeout', Param(), lineno=224, col_offset=17)], None, None, [Str('', lineno=223, col_offset=28), Num(0, lineno=223, col_offset=37), Name('None', Load(), lineno=223, col_offset=55), Attribute(Name('socket', Load(), lineno=224, col_offset=25), '_GLOBAL_DEFAULT_TIMEOUT', Load(), lineno=224, col_offset=25)]), [Expr(Str("Initialize a new instance.\n\n        If specified, `host' is the name of the remote host to which to\n        connect.  If specified, `port' specifies the port to which to connect.\n        By default, smtplib.SMTP_PORT is used.  An SMTPConnectError is raised\n        if the specified `host' doesn't respond correctly.  If specified,\n        `local_hostname` is used as the FQDN of the local host.  By default,\n        the local hostname is found using socket.getfqdn().\n\n        ", lineno=234, col_offset=-1), lineno=234, col_offset=-1), Assign([Attribute(Name('self', Load(), lineno=235, col_offset=8), 'timeout', Store(), lineno=235, col_offset=8)], Name('timeout', Load(), lineno=235, col_offset=23), lineno=235, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=236, col_offset=8), 'esmtp_features', Store(), lineno=236, col_offset=8)], Dict([], [], lineno=236, col_offset=30), lineno=236, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=237, col_offset=8), 'default_port', Store(), lineno=237, col_offset=8)], Name('SMTP_PORT', Load(), lineno=237, col_offset=28), lineno=237, col_offset=8), If(Name('host', Load(), lineno=238, col_offset=11), [Assign([Tuple([Name('code', Store(), lineno=239, col_offset=13), Name('msg', Store(), lineno=239, col_offset=19)], Store(), lineno=239, col_offset=13)], Call(Attribute(Name('self', Load(), lineno=239, col_offset=26), 'connect', Load(), lineno=239, col_offset=26), [Name('host', Load(), lineno=239, col_offset=39), Name('port', Load(), lineno=239, col_offset=45)], [], None, None, lineno=239, col_offset=26), lineno=239, col_offset=12), If(Compare(Name('code', Load(), lineno=240, col_offset=15), [NotEq()], [Num(220, lineno=240, col_offset=23)], lineno=240, col_offset=15), [Raise(Call(Name('SMTPConnectError', Load(), lineno=241, col_offset=22), [Name('code', Load(), lineno=241, col_offset=39), Name('msg', Load(), lineno=241, col_offset=45)], [], None, None, lineno=241, col_offset=22), None, None, lineno=241, col_offset=16)], [], lineno=240, col_offset=12)], [], lineno=238, col_offset=8), If(Compare(Name('local_hostname', Load(), lineno=242, col_offset=11), [IsNot()], [Name('None', Load(), lineno=242, col_offset=33)], lineno=242, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=243, col_offset=12), 'local_hostname', Store(), lineno=243, col_offset=12)], Name('local_hostname', Load(), lineno=243, col_offset=34), lineno=243, col_offset=12)], [Assign([Name('fqdn', Store(), lineno=248, col_offset=12)], Call(Attribute(Name('socket', Load(), lineno=248, col_offset=19), 'getfqdn', Load(), lineno=248, col_offset=19), [], [], None, None, lineno=248, col_offset=19), lineno=248, col_offset=12), If(Compare(Str('.', lineno=249, col_offset=15), [In()], [Name('fqdn', Load(), lineno=249, col_offset=22)], lineno=249, col_offset=15), [Assign([Attribute(Name('self', Load(), lineno=250, col_offset=16), 'local_hostname', Store(), lineno=250, col_offset=16)], Name('fqdn', Load(), lineno=250, col_offset=38), lineno=250, col_offset=16)], [Assign([Name('addr', Store(), lineno=253, col_offset=16)], Str('127.0.0.1', lineno=253, col_offset=23), lineno=253, col_offset=16), TryExcept([Assign([Name('addr', Store(), lineno=255, col_offset=20)], Call(Attribute(Name('socket', Load(), lineno=255, col_offset=27), 'gethostbyname', Load(), lineno=255, col_offset=27), [Call(Attribute(Name('socket', Load(), lineno=255, col_offset=48), 'gethostname', Load(), lineno=255, col_offset=48), [], [], None, None, lineno=255, col_offset=48)], [], None, None, lineno=255, col_offset=27), lineno=255, col_offset=20)], [ExceptHandler(Attribute(Name('socket', Load(), lineno=256, col_offset=23), 'gaierror', Load(), lineno=256, col_offset=23), None, [Pass( lineno=257, col_offset=20)], lineno=256, col_offset=16)], [], lineno=254, col_offset=16), Assign([Attribute(Name('self', Load(), lineno=258, col_offset=16), 'local_hostname', Store(), lineno=258, col_offset=16)], BinOp(Str('[%s]', lineno=258, col_offset=38), Mod(), Name('addr', Load(), lineno=258, col_offset=47), lineno=258, col_offset=38), lineno=258, col_offset=16)], lineno=249, col_offset=12)], lineno=242, col_offset=8)], [], lineno=223, col_offset=4), FunctionDef('set_debuglevel', arguments([Name('self', Param(), lineno=260, col_offset=23), Name('debuglevel', Param(), lineno=260, col_offset=29)], None, None, []), [Expr(Str('Set the debug output level.\n\n        A non-false value results in debug messages for connection and for all\n        messages sent to and received from the server.\n\n        ', lineno=266, col_offset=-1), lineno=266, col_offset=-1), Assign([Attribute(Name('self', Load(), lineno=267, col_offset=8), 'debuglevel', Store(), lineno=267, col_offset=8)], Name('debuglevel', Load(), lineno=267, col_offset=26), lineno=267, col_offset=8)], [], lineno=260, col_offset=4), FunctionDef('_get_socket', arguments([Name('self', Param(), lineno=269, col_offset=20), Name('port', Param(), lineno=269, col_offset=26), Name('host', Param(), lineno=269, col_offset=32), Name('timeout', Param(), lineno=269, col_offset=38)], None, None, []), [If(Compare(Attribute(Name('self', Load(), lineno=272, col_offset=11), 'debuglevel', Load(), lineno=272, col_offset=11), [Gt()], [Num(0, lineno=272, col_offset=29)], lineno=272, col_offset=11), [Print(Name('stderr', Load(), lineno=272, col_offset=39), [Str('connect:', lineno=272, col_offset=47), Tuple([Name('host', Load(), lineno=272, col_offset=60), Name('port', Load(), lineno=272, col_offset=66)], Load(), lineno=272, col_offset=60)], True, lineno=272, col_offset=32)], [], lineno=272, col_offset=8), Return(Call(Attribute(Name('socket', Load(), lineno=273, col_offset=15), 'create_connection', Load(), lineno=273, col_offset=15), [Tuple([Name('port', Load(), lineno=273, col_offset=41), Name('host', Load(), lineno=273, col_offset=47)], Load(), lineno=273, col_offset=41), Name('timeout', Load(), lineno=273, col_offset=54)], [], None, None, lineno=273, col_offset=15), lineno=273, col_offset=8)], [], lineno=269, col_offset=4), FunctionDef('connect', arguments([Name('self', Param(), lineno=275, col_offset=16), Name('host', Param(), lineno=275, col_offset=22), Name('port', Param(), lineno=275, col_offset=40)], None, None, [Str('localhost', lineno=275, col_offset=27), Num(0, lineno=275, col_offset=47)]), [Expr(Str("Connect to a host on a given port.\n\n        If the hostname ends with a colon (`:') followed by a number, and\n        there is no port specified, that suffix will be stripped off and the\n        number interpreted as the port number to use.\n\n        Note: This method is automatically invoked by __init__, if a host is\n        specified during instantiation.\n\n        ", lineno=285, col_offset=-1), lineno=285, col_offset=-1), If(BoolOp(And(), [UnaryOp(Not(), Name('port', Load(), lineno=286, col_offset=15), lineno=286, col_offset=11), Compare(Call(Attribute(Name('host', Load(), lineno=286, col_offset=25), 'find', Load(), lineno=286, col_offset=25), [Str(':', lineno=286, col_offset=35)], [], None, None, lineno=286, col_offset=25), [Eq()], [Call(Attribute(Name('host', Load(), lineno=286, col_offset=43), 'rfind', Load(), lineno=286, col_offset=43), [Str(':', lineno=286, col_offset=54)], [], None, None, lineno=286, col_offset=43)], lineno=286, col_offset=25)], lineno=286, col_offset=11), [Assign([Name('i', Store(), lineno=287, col_offset=12)], Call(Attribute(Name('host', Load(), lineno=287, col_offset=16), 'rfind', Load(), lineno=287, col_offset=16), [Str(':', lineno=287, col_offset=27)], [], None, None, lineno=287, col_offset=16), lineno=287, col_offset=12), If(Compare(Name('i', Load(), lineno=288, col_offset=15), [GtE()], [Num(0, lineno=288, col_offset=20)], lineno=288, col_offset=15), [Assign([Tuple([Name('host', Store(), lineno=289, col_offset=16), Name('port', Store(), lineno=289, col_offset=22)], Store(), lineno=289, col_offset=16)], Tuple([Subscript(Name('host', Load(), lineno=289, col_offset=29), Slice(None, Name('i', Load(), lineno=289, col_offset=35), None), Load(), lineno=289, col_offset=29), Subscript(Name('host', Load(), lineno=289, col_offset=39), Slice(BinOp(Name('i', Load(), lineno=289, col_offset=44), Add(), Num(1, lineno=289, col_offset=46), lineno=289, col_offset=44), None, None), Load(), lineno=289, col_offset=39)], Load(), lineno=289, col_offset=29), lineno=289, col_offset=16), TryExcept([Assign([Name('port', Store(), lineno=290, col_offset=21)], Call(Name('int', Load(), lineno=290, col_offset=28), [Name('port', Load(), lineno=290, col_offset=32)], [], None, None, lineno=290, col_offset=28), lineno=290, col_offset=21)], [ExceptHandler(Name('ValueError', Load(), lineno=291, col_offset=23), None, [Raise(Attribute(Name('socket', Load(), lineno=292, col_offset=26), 'error', Load(), lineno=292, col_offset=26), Str('nonnumeric port', lineno=292, col_offset=40), None, lineno=292, col_offset=20)], lineno=291, col_offset=16)], [], lineno=290, col_offset=16)], [], lineno=288, col_offset=12)], [], lineno=286, col_offset=8), If(UnaryOp(Not(), Name('port', Load(), lineno=293, col_offset=15), lineno=293, col_offset=11), [Assign([Name('port', Store(), lineno=293, col_offset=21)], Attribute(Name('self', Load(), lineno=293, col_offset=28), 'default_port', Load(), lineno=293, col_offset=28), lineno=293, col_offset=21)], [], lineno=293, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=294, col_offset=11), 'debuglevel', Load(), lineno=294, col_offset=11), [Gt()], [Num(0, lineno=294, col_offset=29)], lineno=294, col_offset=11), [Print(Name('stderr', Load(), lineno=294, col_offset=39), [Str('connect:', lineno=294, col_offset=47), Tuple([Name('host', Load(), lineno=294, col_offset=60), Name('port', Load(), lineno=294, col_offset=66)], Load(), lineno=294, col_offset=60)], True, lineno=294, col_offset=32)], [], lineno=294, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=295, col_offset=8), 'sock', Store(), lineno=295, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=295, col_offset=20), '_get_socket', Load(), lineno=295, col_offset=20), [Name('host', Load(), lineno=295, col_offset=37), Name('port', Load(), lineno=295, col_offset=43), Attribute(Name('self', Load(), lineno=295, col_offset=49), 'timeout', Load(), lineno=295, col_offset=49)], [], None, None, lineno=295, col_offset=20), lineno=295, col_offset=8), Assign([Tuple([Name('code', Store(), lineno=296, col_offset=9), Name('msg', Store(), lineno=296, col_offset=15)], Store(), lineno=296, col_offset=9)], Call(Attribute(Name('self', Load(), lineno=296, col_offset=22), 'getreply', Load(), lineno=296, col_offset=22), [], [], None, None, lineno=296, col_offset=22), lineno=296, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=297, col_offset=11), 'debuglevel', Load(), lineno=297, col_offset=11), [Gt()], [Num(0, lineno=297, col_offset=29)], lineno=297, col_offset=11), [Print(Name('stderr', Load(), lineno=297, col_offset=39), [Str('connect:', lineno=297, col_offset=47), Name('msg', Load(), lineno=297, col_offset=59)], True, lineno=297, col_offset=32)], [], lineno=297, col_offset=8), Return(Tuple([Name('code', Load(), lineno=298, col_offset=16), Name('msg', Load(), lineno=298, col_offset=22)], Load(), lineno=298, col_offset=16), lineno=298, col_offset=8)], [], lineno=275, col_offset=4), FunctionDef('send', arguments([Name('self', Param(), lineno=300, col_offset=13), Name('str', Param(), lineno=300, col_offset=19)], None, None, []), [Expr(Str("Send `str' to the server.", lineno=301, col_offset=8), lineno=301, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=302, col_offset=11), 'debuglevel', Load(), lineno=302, col_offset=11), [Gt()], [Num(0, lineno=302, col_offset=29)], lineno=302, col_offset=11), [Print(Name('stderr', Load(), lineno=302, col_offset=39), [Str('send:', lineno=302, col_offset=47), Call(Name('repr', Load(), lineno=302, col_offset=56), [Name('str', Load(), lineno=302, col_offset=61)], [], None, None, lineno=302, col_offset=56)], True, lineno=302, col_offset=32)], [], lineno=302, col_offset=8), If(BoolOp(And(), [Call(Name('hasattr', Load(), lineno=303, col_offset=11), [Name('self', Load(), lineno=303, col_offset=19), Str('sock', lineno=303, col_offset=25)], [], None, None, lineno=303, col_offset=11), Attribute(Name('self', Load(), lineno=303, col_offset=37), 'sock', Load(), lineno=303, col_offset=37)], lineno=303, col_offset=11), [TryExcept([Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=305, col_offset=16), 'sock', Load(), lineno=305, col_offset=16), 'sendall', Load(), lineno=305, col_offset=16), [Name('str', Load(), lineno=305, col_offset=34)], [], None, None, lineno=305, col_offset=16), lineno=305, col_offset=16)], [ExceptHandler(Attribute(Name('socket', Load(), lineno=306, col_offset=19), 'error', Load(), lineno=306, col_offset=19), None, [Expr(Call(Attribute(Name('self', Load(), lineno=307, col_offset=16), 'close', Load(), lineno=307, col_offset=16), [], [], None, None, lineno=307, col_offset=16), lineno=307, col_offset=16), Raise(Call(Name('SMTPServerDisconnected', Load(), lineno=308, col_offset=22), [Str('Server not connected', lineno=308, col_offset=45)], [], None, None, lineno=308, col_offset=22), None, None, lineno=308, col_offset=16)], lineno=306, col_offset=12)], [], lineno=304, col_offset=12)], [Raise(Call(Name('SMTPServerDisconnected', Load(), lineno=310, col_offset=18), [Str('please run connect() first', lineno=310, col_offset=41)], [], None, None, lineno=310, col_offset=18), None, None, lineno=310, col_offset=12)], lineno=303, col_offset=8)], [], lineno=300, col_offset=4), FunctionDef('putcmd', arguments([Name('self', Param(), lineno=312, col_offset=15), Name('cmd', Param(), lineno=312, col_offset=21), Name('args', Param(), lineno=312, col_offset=26)], None, None, [Str('', lineno=312, col_offset=31)]), [Expr(Str('Send a command to the server.', lineno=313, col_offset=8), lineno=313, col_offset=8), If(Compare(Name('args', Load(), lineno=314, col_offset=11), [Eq()], [Str('', lineno=314, col_offset=19)], lineno=314, col_offset=11), [Assign([Name('str', Store(), lineno=315, col_offset=12)], BinOp(Str('%s%s', lineno=315, col_offset=18), Mod(), Tuple([Name('cmd', Load(), lineno=315, col_offset=28), Name('CRLF', Load(), lineno=315, col_offset=33)], Load(), lineno=315, col_offset=28), lineno=315, col_offset=18), lineno=315, col_offset=12)], [Assign([Name('str', Store(), lineno=317, col_offset=12)], BinOp(Str('%s %s%s', lineno=317, col_offset=18), Mod(), Tuple([Name('cmd', Load(), lineno=317, col_offset=31), Name('args', Load(), lineno=317, col_offset=36), Name('CRLF', Load(), lineno=317, col_offset=42)], Load(), lineno=317, col_offset=31), lineno=317, col_offset=18), lineno=317, col_offset=12)], lineno=314, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=318, col_offset=8), 'send', Load(), lineno=318, col_offset=8), [Name('str', Load(), lineno=318, col_offset=18)], [], None, None, lineno=318, col_offset=8), lineno=318, col_offset=8)], [], lineno=312, col_offset=4), FunctionDef('getreply', arguments([Name('self', Param(), lineno=320, col_offset=17)], None, None, []), [Expr(Str("Get a reply from the server.\n\n        Returns a tuple consisting of:\n\n          - server response code (e.g. '250', or such, if all goes well)\n            Note: returns -1 if it can't read response code.\n\n          - server response string corresponding to response code (multiline\n            responses are converted to a single, multiline string).\n\n        Raises SMTPServerDisconnected if end-of-file is reached.\n        ", lineno=332, col_offset=-1), lineno=332, col_offset=-1), Assign([Name('resp', Store(), lineno=333, col_offset=8)], List([], Load(), lineno=333, col_offset=13), lineno=333, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=334, col_offset=11), 'file', Load(), lineno=334, col_offset=11), [Is()], [Name('None', Load(), lineno=334, col_offset=24)], lineno=334, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=335, col_offset=12), 'file', Store(), lineno=335, col_offset=12)], Call(Attribute(Attribute(Name('self', Load(), lineno=335, col_offset=24), 'sock', Load(), lineno=335, col_offset=24), 'makefile', Load(), lineno=335, col_offset=24), [Str('rb', lineno=335, col_offset=43)], [], None, None, lineno=335, col_offset=24), lineno=335, col_offset=12)], [], lineno=334, col_offset=8), While(Num(1, lineno=336, col_offset=14), [TryExcept([Assign([Name('line', Store(), lineno=338, col_offset=16)], Call(Attribute(Attribute(Name('self', Load(), lineno=338, col_offset=23), 'file', Load(), lineno=338, col_offset=23), 'readline', Load(), lineno=338, col_offset=23), [], [], None, None, lineno=338, col_offset=23), lineno=338, col_offset=16)], [ExceptHandler(Attribute(Name('socket', Load(), lineno=339, col_offset=19), 'error', Load(), lineno=339, col_offset=19), None, [Assign([Name('line', Store(), lineno=340, col_offset=16)], Str('', lineno=340, col_offset=23), lineno=340, col_offset=16)], lineno=339, col_offset=12)], [], lineno=337, col_offset=12), If(Compare(Name('line', Load(), lineno=341, col_offset=15), [Eq()], [Str('', lineno=341, col_offset=23)], lineno=341, col_offset=15), [Expr(Call(Attribute(Name('self', Load(), lineno=342, col_offset=16), 'close', Load(), lineno=342, col_offset=16), [], [], None, None, lineno=342, col_offset=16), lineno=342, col_offset=16), Raise(Call(Name('SMTPServerDisconnected', Load(), lineno=343, col_offset=22), [Str('Connection unexpectedly closed', lineno=343, col_offset=45)], [], None, None, lineno=343, col_offset=22), None, None, lineno=343, col_offset=16)], [], lineno=341, col_offset=12), If(Compare(Attribute(Name('self', Load(), lineno=344, col_offset=15), 'debuglevel', Load(), lineno=344, col_offset=15), [Gt()], [Num(0, lineno=344, col_offset=33)], lineno=344, col_offset=15), [Print(Name('stderr', Load(), lineno=344, col_offset=43), [Str('reply:', lineno=344, col_offset=51), Call(Name('repr', Load(), lineno=344, col_offset=61), [Name('line', Load(), lineno=344, col_offset=66)], [], None, None, lineno=344, col_offset=61)], True, lineno=344, col_offset=36)], [], lineno=344, col_offset=12), Expr(Call(Attribute(Name('resp', Load(), lineno=345, col_offset=12), 'append', Load(), lineno=345, col_offset=12), [Call(Attribute(Subscript(Name('line', Load(), lineno=345, col_offset=24), Slice(Num(4, lineno=345, col_offset=29), None, None), Load(), lineno=345, col_offset=24), 'strip', Load(), lineno=345, col_offset=24), [], [], None, None, lineno=345, col_offset=24)], [], None, None, lineno=345, col_offset=12), lineno=345, col_offset=12), Assign([Name('code', Store(), lineno=346, col_offset=12)], Subscript(Name('line', Load(), lineno=346, col_offset=17), Slice(None, Num(3, lineno=346, col_offset=23), None), Load(), lineno=346, col_offset=17), lineno=346, col_offset=12), TryExcept([Assign([Name('errcode', Store(), lineno=350, col_offset=16)], Call(Name('int', Load(), lineno=350, col_offset=26), [Name('code', Load(), lineno=350, col_offset=30)], [], None, None, lineno=350, col_offset=26), lineno=350, col_offset=16)], [ExceptHandler(Name('ValueError', Load(), lineno=351, col_offset=19), None, [Assign([Name('errcode', Store(), lineno=352, col_offset=16)], Num(-1, lineno=352, col_offset=27), lineno=352, col_offset=16), Break( lineno=353, col_offset=16)], lineno=351, col_offset=12)], [], lineno=349, col_offset=12), If(Compare(Subscript(Name('line', Load(), lineno=355, col_offset=15), Slice(Num(3, lineno=355, col_offset=20), Num(4, lineno=355, col_offset=22), None), Load(), lineno=355, col_offset=15), [NotEq()], [Str('-', lineno=355, col_offset=26)], lineno=355, col_offset=15), [Break( lineno=356, col_offset=16)], [], lineno=355, col_offset=12)], [], lineno=336, col_offset=8), Assign([Name('errmsg', Store(), lineno=358, col_offset=8)], Call(Attribute(Str('\n', lineno=358, col_offset=17), 'join', Load(), lineno=358, col_offset=17), [Name('resp', Load(), lineno=358, col_offset=27)], [], None, None, lineno=358, col_offset=17), lineno=358, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=359, col_offset=11), 'debuglevel', Load(), lineno=359, col_offset=11), [Gt()], [Num(0, lineno=359, col_offset=29)], lineno=359, col_offset=11), [Print(Name('stderr', Load(), lineno=360, col_offset=19), [BinOp(Str('reply: retcode (%s); Msg: %s', lineno=360, col_offset=27), Mod(), Tuple([Name('errcode', Load(), lineno=360, col_offset=61), Name('errmsg', Load(), lineno=360, col_offset=69)], Load(), lineno=360, col_offset=61), lineno=360, col_offset=27)], True, lineno=360, col_offset=12)], [], lineno=359, col_offset=8), Return(Tuple([Name('errcode', Load(), lineno=361, col_offset=15), Name('errmsg', Load(), lineno=361, col_offset=24)], Load(), lineno=361, col_offset=15), lineno=361, col_offset=8)], [], lineno=320, col_offset=4), FunctionDef('docmd', arguments([Name('self', Param(), lineno=363, col_offset=14), Name('cmd', Param(), lineno=363, col_offset=20), Name('args', Param(), lineno=363, col_offset=25)], None, None, [Str('', lineno=363, col_offset=30)]), [Expr(Str('Send a command, and return its response code.', lineno=364, col_offset=8), lineno=364, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=365, col_offset=8), 'putcmd', Load(), lineno=365, col_offset=8), [Name('cmd', Load(), lineno=365, col_offset=20), Name('args', Load(), lineno=365, col_offset=24)], [], None, None, lineno=365, col_offset=8), lineno=365, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=366, col_offset=15), 'getreply', Load(), lineno=366, col_offset=15), [], [], None, None, lineno=366, col_offset=15), lineno=366, col_offset=8)], [], lineno=363, col_offset=4), FunctionDef('helo', arguments([Name('self', Param(), lineno=369, col_offset=13), Name('name', Param(), lineno=369, col_offset=19)], None, None, [Str('', lineno=369, col_offset=24)]), [Expr(Str("SMTP 'helo' command.\n        Hostname to send for this command defaults to the FQDN of the local\n        host.\n        ", lineno=373, col_offset=-1), lineno=373, col_offset=-1), Expr(Call(Attribute(Name('self', Load(), lineno=374, col_offset=8), 'putcmd', Load(), lineno=374, col_offset=8), [Str('helo', lineno=374, col_offset=20), BoolOp(Or(), [Name('name', Load(), lineno=374, col_offset=28), Attribute(Name('self', Load(), lineno=374, col_offset=36), 'local_hostname', Load(), lineno=374, col_offset=36)], lineno=374, col_offset=28)], [], None, None, lineno=374, col_offset=8), lineno=374, col_offset=8), Assign([Tuple([Name('code', Store(), lineno=375, col_offset=9), Name('msg', Store(), lineno=375, col_offset=14)], Store(), lineno=375, col_offset=9)], Call(Attribute(Name('self', Load(), lineno=375, col_offset=19), 'getreply', Load(), lineno=375, col_offset=19), [], [], None, None, lineno=375, col_offset=19), lineno=375, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=376, col_offset=8), 'helo_resp', Store(), lineno=376, col_offset=8)], Name('msg', Load(), lineno=376, col_offset=23), lineno=376, col_offset=8), Return(Tuple([Name('code', Load(), lineno=377, col_offset=16), Name('msg', Load(), lineno=377, col_offset=21)], Load(), lineno=377, col_offset=16), lineno=377, col_offset=8)], [], lineno=369, col_offset=4), FunctionDef('ehlo', arguments([Name('self', Param(), lineno=379, col_offset=13), Name('name', Param(), lineno=379, col_offset=19)], None, None, [Str('', lineno=379, col_offset=24)]), [Expr(Str(" SMTP 'ehlo' command.\n        Hostname to send for this command defaults to the FQDN of the local\n        host.\n        ", lineno=383, col_offset=-1), lineno=383, col_offset=-1), Assign([Attribute(Name('self', Load(), lineno=384, col_offset=8), 'esmtp_features', Store(), lineno=384, col_offset=8)], Dict([], [], lineno=384, col_offset=30), lineno=384, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=385, col_offset=8), 'putcmd', Load(), lineno=385, col_offset=8), [Attribute(Name('self', Load(), lineno=385, col_offset=20), 'ehlo_msg', Load(), lineno=385, col_offset=20), BoolOp(Or(), [Name('name', Load(), lineno=385, col_offset=35), Attribute(Name('self', Load(), lineno=385, col_offset=43), 'local_hostname', Load(), lineno=385, col_offset=43)], lineno=385, col_offset=35)], [], None, None, lineno=385, col_offset=8), lineno=385, col_offset=8), Assign([Tuple([Name('code', Store(), lineno=386, col_offset=9), Name('msg', Store(), lineno=386, col_offset=14)], Store(), lineno=386, col_offset=9)], Call(Attribute(Name('self', Load(), lineno=386, col_offset=19), 'getreply', Load(), lineno=386, col_offset=19), [], [], None, None, lineno=386, col_offset=19), lineno=386, col_offset=8), If(BoolOp(And(), [Compare(Name('code', Load(), lineno=390, col_offset=11), [Eq()], [Num(-1, lineno=390, col_offset=20)], lineno=390, col_offset=11), Compare(Call(Name('len', Load(), lineno=390, col_offset=26), [Name('msg', Load(), lineno=390, col_offset=30)], [], None, None, lineno=390, col_offset=26), [Eq()], [Num(0, lineno=390, col_offset=38)], lineno=390, col_offset=26)], lineno=390, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=391, col_offset=12), 'close', Load(), lineno=391, col_offset=12), [], [], None, None, lineno=391, col_offset=12), lineno=391, col_offset=12), Raise(Call(Name('SMTPServerDisconnected', Load(), lineno=392, col_offset=18), [Str('Server not connected', lineno=392, col_offset=41)], [], None, None, lineno=392, col_offset=18), None, None, lineno=392, col_offset=12)], [], lineno=390, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=393, col_offset=8), 'ehlo_resp', Store(), lineno=393, col_offset=8)], Name('msg', Load(), lineno=393, col_offset=23), lineno=393, col_offset=8), If(Compare(Name('code', Load(), lineno=394, col_offset=11), [NotEq()], [Num(250, lineno=394, col_offset=19)], lineno=394, col_offset=11), [Return(Tuple([Name('code', Load(), lineno=395, col_offset=20), Name('msg', Load(), lineno=395, col_offset=25)], Load(), lineno=395, col_offset=20), lineno=395, col_offset=12)], [], lineno=394, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=396, col_offset=8), 'does_esmtp', Store(), lineno=396, col_offset=8)], Num(1, lineno=396, col_offset=24), lineno=396, col_offset=8), Assign([Name('resp', Store(), lineno=398, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=398, col_offset=13), 'ehlo_resp', Load(), lineno=398, col_offset=13), 'split', Load(), lineno=398, col_offset=13), [Str('\n', lineno=398, col_offset=34)], [], None, None, lineno=398, col_offset=13), lineno=398, col_offset=8), Delete([Subscript(Name('resp', Load(), lineno=399, col_offset=12), Index(Num(0, lineno=399, col_offset=17)), Del(), lineno=399, col_offset=12)], lineno=399, col_offset=8), For(Name('each', Store(), lineno=400, col_offset=12), Name('resp', Load(), lineno=400, col_offset=20), [Assign([Name('auth_match', Store(), lineno=407, col_offset=12)], Call(Attribute(Name('OLDSTYLE_AUTH', Load(), lineno=407, col_offset=25), 'match', Load(), lineno=407, col_offset=25), [Name('each', Load(), lineno=407, col_offset=45)], [], None, None, lineno=407, col_offset=25), lineno=407, col_offset=12), If(Name('auth_match', Load(), lineno=408, col_offset=15), [Assign([Subscript(Attribute(Name('self', Load(), lineno=410, col_offset=16), 'esmtp_features', Load(), lineno=410, col_offset=16), Index(Str('auth', lineno=410, col_offset=36)), Store(), lineno=410, col_offset=16)], BinOp(BinOp(Call(Attribute(Attribute(Name('self', Load(), lineno=410, col_offset=46), 'esmtp_features', Load(), lineno=410, col_offset=46), 'get', Load(), lineno=410, col_offset=46), [Str('auth', lineno=410, col_offset=70), Str('', lineno=410, col_offset=78)], [], None, None, lineno=410, col_offset=46), Add(), Str(' ', lineno=411, col_offset=26), lineno=410, col_offset=46), Add(), Subscript(Call(Attribute(Name('auth_match', Load(), lineno=411, col_offset=32), 'groups', Load(), lineno=411, col_offset=32), [Num(0, lineno=411, col_offset=50)], [], None, None, lineno=411, col_offset=32), Index(Num(0, lineno=411, col_offset=53)), Load(), lineno=411, col_offset=32), lineno=411, col_offset=30), lineno=410, col_offset=16), Continue( lineno=412, col_offset=16)], [], lineno=408, col_offset=12), Assign([Name('m', Store(), lineno=418, col_offset=12)], Call(Attribute(Name('re', Load(), lineno=418, col_offset=14), 'match', Load(), lineno=418, col_offset=14), [Str('(?P<feature>[A-Za-z0-9][A-Za-z0-9\\-]*) ?', lineno=418, col_offset=23), Name('each', Load(), lineno=418, col_offset=67)], [], None, None, lineno=418, col_offset=14), lineno=418, col_offset=12), If(Name('m', Load(), lineno=419, col_offset=15), [Assign([Name('feature', Store(), lineno=420, col_offset=16)], Call(Attribute(Call(Attribute(Name('m', Load(), lineno=420, col_offset=24), 'group', Load(), lineno=420, col_offset=24), [Str('feature', lineno=420, col_offset=32)], [], None, None, lineno=420, col_offset=24), 'lower', Load(), lineno=420, col_offset=24), [], [], None, None, lineno=420, col_offset=24), lineno=420, col_offset=16), Assign([Name('params', Store(), lineno=421, col_offset=16)], Call(Attribute(Subscript(Attribute(Name('m', Load(), lineno=421, col_offset=23), 'string', Load(), lineno=421, col_offset=23), Slice(Call(Attribute(Name('m', Load(), lineno=421, col_offset=32), 'end', Load(), lineno=421, col_offset=32), [Str('feature', lineno=421, col_offset=38)], [], None, None, lineno=421, col_offset=32), None, None), Load(), lineno=421, col_offset=23), 'strip', Load(), lineno=421, col_offset=23), [], [], None, None, lineno=421, col_offset=23), lineno=421, col_offset=16), If(Compare(Name('feature', Load(), lineno=422, col_offset=19), [Eq()], [Str('auth', lineno=422, col_offset=30)], lineno=422, col_offset=19), [Assign([Subscript(Attribute(Name('self', Load(), lineno=423, col_offset=20), 'esmtp_features', Load(), lineno=423, col_offset=20), Index(Name('feature', Load(), lineno=423, col_offset=40)), Store(), lineno=423, col_offset=20)], BinOp(BinOp(Call(Attribute(Attribute(Name('self', Load(), lineno=423, col_offset=51), 'esmtp_features', Load(), lineno=423, col_offset=51), 'get', Load(), lineno=423, col_offset=51), [Name('feature', Load(), lineno=423, col_offset=75), Str('', lineno=423, col_offset=84)], [], None, None, lineno=423, col_offset=51), Add(), Str(' ', lineno=424, col_offset=30), lineno=423, col_offset=51), Add(), Name('params', Load(), lineno=424, col_offset=36), lineno=424, col_offset=34), lineno=423, col_offset=20)], [Assign([Subscript(Attribute(Name('self', Load(), lineno=426, col_offset=20), 'esmtp_features', Load(), lineno=426, col_offset=20), Index(Name('feature', Load(), lineno=426, col_offset=40)), Store(), lineno=426, col_offset=20)], Name('params', Load(), lineno=426, col_offset=49), lineno=426, col_offset=20)], lineno=422, col_offset=16)], [], lineno=419, col_offset=12)], [], lineno=400, col_offset=8), Return(Tuple([Name('code', Load(), lineno=427, col_offset=16), Name('msg', Load(), lineno=427, col_offset=21)], Load(), lineno=427, col_offset=16), lineno=427, col_offset=8)], [], lineno=379, col_offset=4), FunctionDef('has_extn', arguments([Name('self', Param(), lineno=429, col_offset=17), Name('opt', Param(), lineno=429, col_offset=23)], None, None, []), [Expr(Str('Does the server support a given SMTP service extension?', lineno=430, col_offset=8), lineno=430, col_offset=8), Return(Compare(Call(Attribute(Name('opt', Load(), lineno=431, col_offset=15), 'lower', Load(), lineno=431, col_offset=15), [], [], None, None, lineno=431, col_offset=15), [In()], [Attribute(Name('self', Load(), lineno=431, col_offset=30), 'esmtp_features', Load(), lineno=431, col_offset=30)], lineno=431, col_offset=15), lineno=431, col_offset=8)], [], lineno=429, col_offset=4), FunctionDef('help', arguments([Name('self', Param(), lineno=433, col_offset=13), Name('args', Param(), lineno=433, col_offset=19)], None, None, [Str('', lineno=433, col_offset=24)]), [Expr(Str("SMTP 'help' command.\n        Returns help text from server.", lineno=435, col_offset=-1), lineno=435, col_offset=-1), Expr(Call(Attribute(Name('self', Load(), lineno=436, col_offset=8), 'putcmd', Load(), lineno=436, col_offset=8), [Str('help', lineno=436, col_offset=20), Name('args', Load(), lineno=436, col_offset=28)], [], None, None, lineno=436, col_offset=8), lineno=436, col_offset=8), Return(Subscript(Call(Attribute(Name('self', Load(), lineno=437, col_offset=15), 'getreply', Load(), lineno=437, col_offset=15), [], [], None, None, lineno=437, col_offset=15), Index(Num(1, lineno=437, col_offset=31)), Load(), lineno=437, col_offset=15), lineno=437, col_offset=8)], [], lineno=433, col_offset=4), FunctionDef('rset', arguments([Name('self', Param(), lineno=439, col_offset=13)], None, None, []), [Expr(Str("SMTP 'rset' command -- resets session.", lineno=440, col_offset=8), lineno=440, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=441, col_offset=15), 'docmd', Load(), lineno=441, col_offset=15), [Str('rset', lineno=441, col_offset=26)], [], None, None, lineno=441, col_offset=15), lineno=441, col_offset=8)], [], lineno=439, col_offset=4), FunctionDef('noop', arguments([Name('self', Param(), lineno=443, col_offset=13)], None, None, []), [Expr(Str("SMTP 'noop' command -- doesn't do anything :>", lineno=444, col_offset=8), lineno=444, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=445, col_offset=15), 'docmd', Load(), lineno=445, col_offset=15), [Str('noop', lineno=445, col_offset=26)], [], None, None, lineno=445, col_offset=15), lineno=445, col_offset=8)], [], lineno=443, col_offset=4), FunctionDef('mail', arguments([Name('self', Param(), lineno=447, col_offset=13), Name('sender', Param(), lineno=447, col_offset=18), Name('options', Param(), lineno=447, col_offset=25)], None, None, [List([], Load(), lineno=447, col_offset=33)]), [Expr(Str("SMTP 'mail' command -- begins mail xfer session.", lineno=448, col_offset=8), lineno=448, col_offset=8), Assign([Name('optionlist', Store(), lineno=449, col_offset=8)], Str('', lineno=449, col_offset=21), lineno=449, col_offset=8), If(BoolOp(And(), [Name('options', Load(), lineno=450, col_offset=11), Attribute(Name('self', Load(), lineno=450, col_offset=23), 'does_esmtp', Load(), lineno=450, col_offset=23)], lineno=450, col_offset=11), [Assign([Name('optionlist', Store(), lineno=451, col_offset=12)], BinOp(Str(' ', lineno=451, col_offset=25), Add(), Call(Attribute(Str(' ', lineno=451, col_offset=31), 'join', Load(), lineno=451, col_offset=31), [Name('options', Load(), lineno=451, col_offset=40)], [], None, None, lineno=451, col_offset=31), lineno=451, col_offset=25), lineno=451, col_offset=12)], [], lineno=450, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=452, col_offset=8), 'putcmd', Load(), lineno=452, col_offset=8), [Str('mail', lineno=452, col_offset=20), BinOp(Str('FROM:%s%s', lineno=452, col_offset=28), Mod(), Tuple([Call(Name('quoteaddr', Load(), lineno=452, col_offset=43), [Name('sender', Load(), lineno=452, col_offset=53)], [], None, None, lineno=452, col_offset=43), Name('optionlist', Load(), lineno=452, col_offset=62)], Load(), lineno=452, col_offset=43), lineno=452, col_offset=28)], [], None, None, lineno=452, col_offset=8), lineno=452, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=453, col_offset=15), 'getreply', Load(), lineno=453, col_offset=15), [], [], None, None, lineno=453, col_offset=15), lineno=453, col_offset=8)], [], lineno=447, col_offset=4), FunctionDef('rcpt', arguments([Name('self', Param(), lineno=455, col_offset=13), Name('recip', Param(), lineno=455, col_offset=18), Name('options', Param(), lineno=455, col_offset=24)], None, None, [List([], Load(), lineno=455, col_offset=32)]), [Expr(Str("SMTP 'rcpt' command -- indicates 1 recipient for this mail.", lineno=456, col_offset=8), lineno=456, col_offset=8), Assign([Name('optionlist', Store(), lineno=457, col_offset=8)], Str('', lineno=457, col_offset=21), lineno=457, col_offset=8), If(BoolOp(And(), [Name('options', Load(), lineno=458, col_offset=11), Attribute(Name('self', Load(), lineno=458, col_offset=23), 'does_esmtp', Load(), lineno=458, col_offset=23)], lineno=458, col_offset=11), [Assign([Name('optionlist', Store(), lineno=459, col_offset=12)], BinOp(Str(' ', lineno=459, col_offset=25), Add(), Call(Attribute(Str(' ', lineno=459, col_offset=31), 'join', Load(), lineno=459, col_offset=31), [Name('options', Load(), lineno=459, col_offset=40)], [], None, None, lineno=459, col_offset=31), lineno=459, col_offset=25), lineno=459, col_offset=12)], [], lineno=458, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=460, col_offset=8), 'putcmd', Load(), lineno=460, col_offset=8), [Str('rcpt', lineno=460, col_offset=20), BinOp(Str('TO:%s%s', lineno=460, col_offset=27), Mod(), Tuple([Call(Name('quoteaddr', Load(), lineno=460, col_offset=40), [Name('recip', Load(), lineno=460, col_offset=50)], [], None, None, lineno=460, col_offset=40), Name('optionlist', Load(), lineno=460, col_offset=57)], Load(), lineno=460, col_offset=40), lineno=460, col_offset=27)], [], None, None, lineno=460, col_offset=8), lineno=460, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=461, col_offset=15), 'getreply', Load(), lineno=461, col_offset=15), [], [], None, None, lineno=461, col_offset=15), lineno=461, col_offset=8)], [], lineno=455, col_offset=4), FunctionDef('data', arguments([Name('self', Param(), lineno=463, col_offset=13), Name('msg', Param(), lineno=463, col_offset=18)], None, None, []), [Expr(Str("SMTP 'DATA' command -- sends message data to server.\n\n        Automatically quotes lines beginning with a period per rfc821.\n        Raises SMTPDataError if there is an unexpected reply to the\n        DATA command; the return value from this method is the final\n        response code received when the all data is sent.\n        ", lineno=470, col_offset=-1), lineno=470, col_offset=-1), Expr(Call(Attribute(Name('self', Load(), lineno=471, col_offset=8), 'putcmd', Load(), lineno=471, col_offset=8), [Str('data', lineno=471, col_offset=20)], [], None, None, lineno=471, col_offset=8), lineno=471, col_offset=8), Assign([Tuple([Name('code', Store(), lineno=472, col_offset=9), Name('repl', Store(), lineno=472, col_offset=14)], Store(), lineno=472, col_offset=9)], Call(Attribute(Name('self', Load(), lineno=472, col_offset=20), 'getreply', Load(), lineno=472, col_offset=20), [], [], None, None, lineno=472, col_offset=20), lineno=472, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=473, col_offset=11), 'debuglevel', Load(), lineno=473, col_offset=11), [Gt()], [Num(0, lineno=473, col_offset=28)], lineno=473, col_offset=11), [Print(Name('stderr', Load(), lineno=473, col_offset=39), [Str('data:', lineno=473, col_offset=47), Tuple([Name('code', Load(), lineno=473, col_offset=57), Name('repl', Load(), lineno=473, col_offset=62)], Load(), lineno=473, col_offset=57)], True, lineno=473, col_offset=32)], [], lineno=473, col_offset=8), If(Compare(Name('code', Load(), lineno=474, col_offset=11), [NotEq()], [Num(354, lineno=474, col_offset=19)], lineno=474, col_offset=11), [Raise(Call(Name('SMTPDataError', Load(), lineno=475, col_offset=18), [Name('code', Load(), lineno=475, col_offset=32), Name('repl', Load(), lineno=475, col_offset=37)], [], None, None, lineno=475, col_offset=18), None, None, lineno=475, col_offset=12)], [Assign([Name('q', Store(), lineno=477, col_offset=12)], Call(Name('quotedata', Load(), lineno=477, col_offset=16), [Name('msg', Load(), lineno=477, col_offset=26)], [], None, None, lineno=477, col_offset=16), lineno=477, col_offset=12), If(Compare(Subscript(Name('q', Load(), lineno=478, col_offset=15), Slice(Num(-2, lineno=478, col_offset=18), None, None), Load(), lineno=478, col_offset=15), [NotEq()], [Name('CRLF', Load(), lineno=478, col_offset=25)], lineno=478, col_offset=15), [Assign([Name('q', Store(), lineno=479, col_offset=16)], BinOp(Name('q', Load(), lineno=479, col_offset=20), Add(), Name('CRLF', Load(), lineno=479, col_offset=24), lineno=479, col_offset=20), lineno=479, col_offset=16)], [], lineno=478, col_offset=12), Assign([Name('q', Store(), lineno=480, col_offset=12)], BinOp(BinOp(Name('q', Load(), lineno=480, col_offset=16), Add(), Str('.', lineno=480, col_offset=20), lineno=480, col_offset=16), Add(), Name('CRLF', Load(), lineno=480, col_offset=26), lineno=480, col_offset=24), lineno=480, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=481, col_offset=12), 'send', Load(), lineno=481, col_offset=12), [Name('q', Load(), lineno=481, col_offset=22)], [], None, None, lineno=481, col_offset=12), lineno=481, col_offset=12), Assign([Tuple([Name('code', Store(), lineno=482, col_offset=13), Name('msg', Store(), lineno=482, col_offset=18)], Store(), lineno=482, col_offset=13)], Call(Attribute(Name('self', Load(), lineno=482, col_offset=23), 'getreply', Load(), lineno=482, col_offset=23), [], [], None, None, lineno=482, col_offset=23), lineno=482, col_offset=12), If(Compare(Attribute(Name('self', Load(), lineno=483, col_offset=15), 'debuglevel', Load(), lineno=483, col_offset=15), [Gt()], [Num(0, lineno=483, col_offset=32)], lineno=483, col_offset=15), [Print(Name('stderr', Load(), lineno=483, col_offset=43), [Str('data:', lineno=483, col_offset=51), Tuple([Name('code', Load(), lineno=483, col_offset=61), Name('msg', Load(), lineno=483, col_offset=66)], Load(), lineno=483, col_offset=61)], True, lineno=483, col_offset=36)], [], lineno=483, col_offset=12), Return(Tuple([Name('code', Load(), lineno=484, col_offset=20), Name('msg', Load(), lineno=484, col_offset=25)], Load(), lineno=484, col_offset=20), lineno=484, col_offset=12)], lineno=474, col_offset=8)], [], lineno=463, col_offset=4), FunctionDef('verify', arguments([Name('self', Param(), lineno=486, col_offset=15), Name('address', Param(), lineno=486, col_offset=21)], None, None, []), [Expr(Str("SMTP 'verify' command -- checks for address validity.", lineno=487, col_offset=8), lineno=487, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=488, col_offset=8), 'putcmd', Load(), lineno=488, col_offset=8), [Str('vrfy', lineno=488, col_offset=20), Call(Name('quoteaddr', Load(), lineno=488, col_offset=28), [Name('address', Load(), lineno=488, col_offset=38)], [], None, None, lineno=488, col_offset=28)], [], None, None, lineno=488, col_offset=8), lineno=488, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=489, col_offset=15), 'getreply', Load(), lineno=489, col_offset=15), [], [], None, None, lineno=489, col_offset=15), lineno=489, col_offset=8)], [], lineno=486, col_offset=4), Assign([Name('vrfy', Store(), lineno=491, col_offset=4)], Name('verify', Load(), lineno=491, col_offset=9), lineno=491, col_offset=4), FunctionDef('expn', arguments([Name('self', Param(), lineno=493, col_offset=13), Name('address', Param(), lineno=493, col_offset=19)], None, None, []), [Expr(Str("SMTP 'expn' command -- expands a mailing list.", lineno=494, col_offset=8), lineno=494, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=495, col_offset=8), 'putcmd', Load(), lineno=495, col_offset=8), [Str('expn', lineno=495, col_offset=20), Call(Name('quoteaddr', Load(), lineno=495, col_offset=28), [Name('address', Load(), lineno=495, col_offset=38)], [], None, None, lineno=495, col_offset=28)], [], None, None, lineno=495, col_offset=8), lineno=495, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=496, col_offset=15), 'getreply', Load(), lineno=496, col_offset=15), [], [], None, None, lineno=496, col_offset=15), lineno=496, col_offset=8)], [], lineno=493, col_offset=4), FunctionDef('ehlo_or_helo_if_needed', arguments([Name('self', Param(), lineno=500, col_offset=31)], None, None, []), [Expr(Str("Call self.ehlo() and/or self.helo() if needed.\n\n        If there has been no previous EHLO or HELO command this session, this\n        method tries ESMTP EHLO first.\n\n        This method may raise the following exceptions:\n\n         SMTPHeloError            The server didn't reply properly to\n                                  the helo greeting.\n        ", lineno=510, col_offset=-1), lineno=510, col_offset=-1), If(BoolOp(And(), [Compare(Attribute(Name('self', Load(), lineno=511, col_offset=11), 'helo_resp', Load(), lineno=511, col_offset=11), [Is()], [Name('None', Load(), lineno=511, col_offset=29)], lineno=511, col_offset=11), Compare(Attribute(Name('self', Load(), lineno=511, col_offset=38), 'ehlo_resp', Load(), lineno=511, col_offset=38), [Is()], [Name('None', Load(), lineno=511, col_offset=56)], lineno=511, col_offset=38)], lineno=511, col_offset=11), [If(UnaryOp(Not(), Compare(Num(200, lineno=512, col_offset=20), [LtE(), LtE()], [Subscript(Call(Attribute(Name('self', Load(), lineno=512, col_offset=27), 'ehlo', Load(), lineno=512, col_offset=27), [], [], None, None, lineno=512, col_offset=27), Index(Num(0, lineno=512, col_offset=39)), Load(), lineno=512, col_offset=27), Num(299, lineno=512, col_offset=45)], lineno=512, col_offset=20), lineno=512, col_offset=15), [Assign([Tuple([Name('code', Store(), lineno=513, col_offset=17), Name('resp', Store(), lineno=513, col_offset=23)], Store(), lineno=513, col_offset=17)], Call(Attribute(Name('self', Load(), lineno=513, col_offset=31), 'helo', Load(), lineno=513, col_offset=31), [], [], None, None, lineno=513, col_offset=31), lineno=513, col_offset=16), If(UnaryOp(Not(), Compare(Num(200, lineno=514, col_offset=24), [LtE(), LtE()], [Name('code', Load(), lineno=514, col_offset=31), Num(299, lineno=514, col_offset=39)], lineno=514, col_offset=24), lineno=514, col_offset=19), [Raise(Call(Name('SMTPHeloError', Load(), lineno=515, col_offset=26), [Name('code', Load(), lineno=515, col_offset=40), Name('resp', Load(), lineno=515, col_offset=46)], [], None, None, lineno=515, col_offset=26), None, None, lineno=515, col_offset=20)], [], lineno=514, col_offset=16)], [], lineno=512, col_offset=12)], [], lineno=511, col_offset=8)], [], lineno=500, col_offset=4), FunctionDef('login', arguments([Name('self', Param(), lineno=517, col_offset=14), Name('user', Param(), lineno=517, col_offset=20), Name('password', Param(), lineno=517, col_offset=26)], None, None, []), [Expr(Str("Log in on an SMTP server that requires authentication.\n\n        The arguments are:\n            - user:     The user name to authenticate with.\n            - password: The password for the authentication.\n\n        If there has been no previous EHLO or HELO command this session, this\n        method tries ESMTP EHLO first.\n\n        This method will return normally if the authentication was successful.\n\n        This method may raise the following exceptions:\n\n         SMTPHeloError            The server didn't reply properly to\n                                  the helo greeting.\n         SMTPAuthenticationError  The server didn't accept the username/\n                                  password combination.\n         SMTPException            No suitable authentication method was\n                                  found.\n        ", lineno=537, col_offset=-1), lineno=537, col_offset=-1), FunctionDef('encode_cram_md5', arguments([Name('challenge', Param(), lineno=539, col_offset=28), Name('user', Param(), lineno=539, col_offset=39), Name('password', Param(), lineno=539, col_offset=45)], None, None, []), [Assign([Name('challenge', Store(), lineno=540, col_offset=12)], Call(Attribute(Name('base64', Load(), lineno=540, col_offset=24), 'decodestring', Load(), lineno=540, col_offset=24), [Name('challenge', Load(), lineno=540, col_offset=44)], [], None, None, lineno=540, col_offset=24), lineno=540, col_offset=12), Assign([Name('response', Store(), lineno=541, col_offset=12)], BinOp(BinOp(Name('user', Load(), lineno=541, col_offset=23), Add(), Str(' ', lineno=541, col_offset=30), lineno=541, col_offset=23), Add(), Call(Attribute(Call(Attribute(Name('hmac', Load(), lineno=541, col_offset=36), 'HMAC', Load(), lineno=541, col_offset=36), [Name('password', Load(), lineno=541, col_offset=46), Name('challenge', Load(), lineno=541, col_offset=56)], [], None, None, lineno=541, col_offset=36), 'hexdigest', Load(), lineno=541, col_offset=36), [], [], None, None, lineno=541, col_offset=36), lineno=541, col_offset=34), lineno=541, col_offset=12), Return(Call(Name('encode_base64', Load(), lineno=542, col_offset=19), [Name('response', Load(), lineno=542, col_offset=33)], [keyword('eol', Str('', lineno=542, col_offset=47))], None, None, lineno=542, col_offset=19), lineno=542, col_offset=12)], [], lineno=539, col_offset=8), FunctionDef('encode_plain', arguments([Name('user', Param(), lineno=544, col_offset=25), Name('password', Param(), lineno=544, col_offset=31)], None, None, []), [Return(Call(Name('encode_base64', Load(), lineno=545, col_offset=19), [BinOp(Str('\x00%s\x00%s', lineno=545, col_offset=33), Mod(), Tuple([Name('user', Load(), lineno=545, col_offset=47), Name('password', Load(), lineno=545, col_offset=53)], Load(), lineno=545, col_offset=47), lineno=545, col_offset=33)], [keyword('eol', Str('', lineno=545, col_offset=68))], None, None, lineno=545, col_offset=19), lineno=545, col_offset=12)], [], lineno=544, col_offset=8), Assign([Name('AUTH_PLAIN', Store(), lineno=548, col_offset=8)], Str('PLAIN', lineno=548, col_offset=21), lineno=548, col_offset=8), Assign([Name('AUTH_CRAM_MD5', Store(), lineno=549, col_offset=8)], Str('CRAM-MD5', lineno=549, col_offset=24), lineno=549, col_offset=8), Assign([Name('AUTH_LOGIN', Store(), lineno=550, col_offset=8)], Str('LOGIN', lineno=550, col_offset=21), lineno=550, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=552, col_offset=8), 'ehlo_or_helo_if_needed', Load(), lineno=552, col_offset=8), [], [], None, None, lineno=552, col_offset=8), lineno=552, col_offset=8), If(UnaryOp(Not(), Call(Attribute(Name('self', Load(), lineno=554, col_offset=15), 'has_extn', Load(), lineno=554, col_offset=15), [Str('auth', lineno=554, col_offset=29)], [], None, None, lineno=554, col_offset=15), lineno=554, col_offset=11), [Raise(Call(Name('SMTPException', Load(), lineno=555, col_offset=18), [Str('SMTP AUTH extension not supported by server.', lineno=555, col_offset=32)], [], None, None, lineno=555, col_offset=18), None, None, lineno=555, col_offset=12)], [], lineno=554, col_offset=8), Assign([Name('authlist', Store(), lineno=558, col_offset=8)], Call(Attribute(Subscript(Attribute(Name('self', Load(), lineno=558, col_offset=19), 'esmtp_features', Load(), lineno=558, col_offset=19), Index(Str('auth', lineno=558, col_offset=39)), Load(), lineno=558, col_offset=19), 'split', Load(), lineno=558, col_offset=19), [], [], None, None, lineno=558, col_offset=19), lineno=558, col_offset=8), Assign([Name('preferred_auths', Store(), lineno=563, col_offset=8)], List([Name('AUTH_CRAM_MD5', Load(), lineno=563, col_offset=27), Name('AUTH_PLAIN', Load(), lineno=563, col_offset=42), Name('AUTH_LOGIN', Load(), lineno=563, col_offset=54)], Load(), lineno=563, col_offset=26), lineno=563, col_offset=8), Assign([Name('authmethod', Store(), lineno=566, col_offset=8)], Name('None', Load(), lineno=566, col_offset=21), lineno=566, col_offset=8), For(Name('method', Store(), lineno=567, col_offset=12), Name('preferred_auths', Load(), lineno=567, col_offset=22), [If(Compare(Name('method', Load(), lineno=568, col_offset=15), [In()], [Name('authlist', Load(), lineno=568, col_offset=25)], lineno=568, col_offset=15), [Assign([Name('authmethod', Store(), lineno=569, col_offset=16)], Name('method', Load(), lineno=569, col_offset=29), lineno=569, col_offset=16), Break( lineno=570, col_offset=16)], [], lineno=568, col_offset=12)], [], lineno=567, col_offset=8), If(Compare(Name('authmethod', Load(), lineno=572, col_offset=11), [Eq()], [Name('AUTH_CRAM_MD5', Load(), lineno=572, col_offset=25)], lineno=572, col_offset=11), [Assign([Tuple([Name('code', Store(), lineno=573, col_offset=13), Name('resp', Store(), lineno=573, col_offset=19)], Store(), lineno=573, col_offset=13)], Call(Attribute(Name('self', Load(), lineno=573, col_offset=27), 'docmd', Load(), lineno=573, col_offset=27), [Str('AUTH', lineno=573, col_offset=38), Name('AUTH_CRAM_MD5', Load(), lineno=573, col_offset=46)], [], None, None, lineno=573, col_offset=27), lineno=573, col_offset=12), If(Compare(Name('code', Load(), lineno=574, col_offset=15), [Eq()], [Num(503, lineno=574, col_offset=23)], lineno=574, col_offset=15), [Return(Tuple([Name('code', Load(), lineno=576, col_offset=24), Name('resp', Load(), lineno=576, col_offset=30)], Load(), lineno=576, col_offset=24), lineno=576, col_offset=16)], [], lineno=574, col_offset=12), Assign([Tuple([Name('code', Store(), lineno=577, col_offset=13), Name('resp', Store(), lineno=577, col_offset=19)], Store(), lineno=577, col_offset=13)], Call(Attribute(Name('self', Load(), lineno=577, col_offset=27), 'docmd', Load(), lineno=577, col_offset=27), [Call(Name('encode_cram_md5', Load(), lineno=577, col_offset=38), [Name('resp', Load(), lineno=577, col_offset=54), Name('user', Load(), lineno=577, col_offset=60), Name('password', Load(), lineno=577, col_offset=66)], [], None, None, lineno=577, col_offset=38)], [], None, None, lineno=577, col_offset=27), lineno=577, col_offset=12)], [If(Compare(Name('authmethod', Load(), lineno=578, col_offset=13), [Eq()], [Name('AUTH_PLAIN', Load(), lineno=578, col_offset=27)], lineno=578, col_offset=13), [Assign([Tuple([Name('code', Store(), lineno=579, col_offset=13), Name('resp', Store(), lineno=579, col_offset=19)], Store(), lineno=579, col_offset=13)], Call(Attribute(Name('self', Load(), lineno=579, col_offset=27), 'docmd', Load(), lineno=579, col_offset=27), [Str('AUTH', lineno=579, col_offset=38), BinOp(BinOp(Name('AUTH_PLAIN', Load(), lineno=580, col_offset=16), Add(), Str(' ', lineno=580, col_offset=29), lineno=580, col_offset=16), Add(), Call(Name('encode_plain', Load(), lineno=580, col_offset=35), [Name('user', Load(), lineno=580, col_offset=48), Name('password', Load(), lineno=580, col_offset=54)], [], None, None, lineno=580, col_offset=35), lineno=580, col_offset=33)], [], None, None, lineno=579, col_offset=27), lineno=579, col_offset=12)], [If(Compare(Name('authmethod', Load(), lineno=581, col_offset=13), [Eq()], [Name('AUTH_LOGIN', Load(), lineno=581, col_offset=27)], lineno=581, col_offset=13), [Assign([Tuple([Name('code', Store(), lineno=582, col_offset=13), Name('resp', Store(), lineno=582, col_offset=19)], Store(), lineno=582, col_offset=13)], Call(Attribute(Name('self', Load(), lineno=582, col_offset=27), 'docmd', Load(), lineno=582, col_offset=27), [Str('AUTH', lineno=582, col_offset=38), BinOp(Str('%s %s', lineno=583, col_offset=16), Mod(), Tuple([Name('AUTH_LOGIN', Load(), lineno=583, col_offset=27), Call(Name('encode_base64', Load(), lineno=583, col_offset=39), [Name('user', Load(), lineno=583, col_offset=53)], [keyword('eol', Str('', lineno=583, col_offset=63))], None, None, lineno=583, col_offset=39)], Load(), lineno=583, col_offset=27), lineno=583, col_offset=16)], [], None, None, lineno=582, col_offset=27), lineno=582, col_offset=12), If(Compare(Name('code', Load(), lineno=584, col_offset=15), [NotEq()], [Num(334, lineno=584, col_offset=23)], lineno=584, col_offset=15), [Raise(Call(Name('SMTPAuthenticationError', Load(), lineno=585, col_offset=22), [Name('code', Load(), lineno=585, col_offset=46), Name('resp', Load(), lineno=585, col_offset=52)], [], None, None, lineno=585, col_offset=22), None, None, lineno=585, col_offset=16)], [], lineno=584, col_offset=12), Assign([Tuple([Name('code', Store(), lineno=586, col_offset=13), Name('resp', Store(), lineno=586, col_offset=19)], Store(), lineno=586, col_offset=13)], Call(Attribute(Name('self', Load(), lineno=586, col_offset=27), 'docmd', Load(), lineno=586, col_offset=27), [Call(Name('encode_base64', Load(), lineno=586, col_offset=38), [Name('password', Load(), lineno=586, col_offset=52)], [keyword('eol', Str('', lineno=586, col_offset=66))], None, None, lineno=586, col_offset=38)], [], None, None, lineno=586, col_offset=27), lineno=586, col_offset=12)], [If(Compare(Name('authmethod', Load(), lineno=587, col_offset=13), [Is()], [Name('None', Load(), lineno=587, col_offset=27)], lineno=587, col_offset=13), [Raise(Call(Name('SMTPException', Load(), lineno=588, col_offset=18), [Str('No suitable authentication method found.', lineno=588, col_offset=32)], [], None, None, lineno=588, col_offset=18), None, None, lineno=588, col_offset=12)], [], lineno=587, col_offset=13)], lineno=581, col_offset=13)], lineno=578, col_offset=13)], lineno=572, col_offset=8), If(Compare(Name('code', Load(), lineno=589, col_offset=11), [NotIn()], [Tuple([Num(235, lineno=589, col_offset=24), Num(503, lineno=589, col_offset=29)], Load(), lineno=589, col_offset=24)], lineno=589, col_offset=11), [Raise(Call(Name('SMTPAuthenticationError', Load(), lineno=592, col_offset=18), [Name('code', Load(), lineno=592, col_offset=42), Name('resp', Load(), lineno=592, col_offset=48)], [], None, None, lineno=592, col_offset=18), None, None, lineno=592, col_offset=12)], [], lineno=589, col_offset=8), Return(Tuple([Name('code', Load(), lineno=593, col_offset=16), Name('resp', Load(), lineno=593, col_offset=22)], Load(), lineno=593, col_offset=16), lineno=593, col_offset=8)], [], lineno=517, col_offset=4), FunctionDef('starttls', arguments([Name('self', Param(), lineno=595, col_offset=17), Name('keyfile', Param(), lineno=595, col_offset=23), Name('certfile', Param(), lineno=595, col_offset=39)], None, None, [Name('None', Load(), lineno=595, col_offset=33), Name('None', Load(), lineno=595, col_offset=50)]), [Expr(Str("Puts the connection to the SMTP server into TLS mode.\n\n        If there has been no previous EHLO or HELO command this session, this\n        method tries ESMTP EHLO first.\n\n        If the server supports TLS, this will encrypt the rest of the SMTP\n        session. If you provide the keyfile and certfile parameters,\n        the identity of the SMTP server and client can be checked. This,\n        however, depends on whether the socket module really checks the\n        certificates.\n\n        This method may raise the following exceptions:\n\n         SMTPHeloError            The server didn't reply properly to\n                                  the helo greeting.\n        ", lineno=611, col_offset=-1), lineno=611, col_offset=-1), Expr(Call(Attribute(Name('self', Load(), lineno=612, col_offset=8), 'ehlo_or_helo_if_needed', Load(), lineno=612, col_offset=8), [], [], None, None, lineno=612, col_offset=8), lineno=612, col_offset=8), If(UnaryOp(Not(), Call(Attribute(Name('self', Load(), lineno=613, col_offset=15), 'has_extn', Load(), lineno=613, col_offset=15), [Str('starttls', lineno=613, col_offset=29)], [], None, None, lineno=613, col_offset=15), lineno=613, col_offset=11), [Raise(Call(Name('SMTPException', Load(), lineno=614, col_offset=18), [Str('STARTTLS extension not supported by server.', lineno=614, col_offset=32)], [], None, None, lineno=614, col_offset=18), None, None, lineno=614, col_offset=12)], [], lineno=613, col_offset=8), Assign([Tuple([Name('resp', Store(), lineno=615, col_offset=9), Name('reply', Store(), lineno=615, col_offset=15)], Store(), lineno=615, col_offset=9)], Call(Attribute(Name('self', Load(), lineno=615, col_offset=24), 'docmd', Load(), lineno=615, col_offset=24), [Str('STARTTLS', lineno=615, col_offset=35)], [], None, None, lineno=615, col_offset=24), lineno=615, col_offset=8), If(Compare(Name('resp', Load(), lineno=616, col_offset=11), [Eq()], [Num(220, lineno=616, col_offset=19)], lineno=616, col_offset=11), [If(UnaryOp(Not(), Name('_have_ssl', Load(), lineno=617, col_offset=19), lineno=617, col_offset=15), [Raise(Call(Name('RuntimeError', Load(), lineno=618, col_offset=22), [Str('No SSL support included in this Python', lineno=618, col_offset=35)], [], None, None, lineno=618, col_offset=22), None, None, lineno=618, col_offset=16)], [], lineno=617, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=619, col_offset=12), 'sock', Store(), lineno=619, col_offset=12)], Call(Attribute(Name('ssl', Load(), lineno=619, col_offset=24), 'wrap_socket', Load(), lineno=619, col_offset=24), [Attribute(Name('self', Load(), lineno=619, col_offset=40), 'sock', Load(), lineno=619, col_offset=40), Name('keyfile', Load(), lineno=619, col_offset=51), Name('certfile', Load(), lineno=619, col_offset=60)], [], None, None, lineno=619, col_offset=24), lineno=619, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=620, col_offset=12), 'file', Store(), lineno=620, col_offset=12)], Call(Name('SSLFakeFile', Load(), lineno=620, col_offset=24), [Attribute(Name('self', Load(), lineno=620, col_offset=36), 'sock', Load(), lineno=620, col_offset=36)], [], None, None, lineno=620, col_offset=24), lineno=620, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=625, col_offset=12), 'helo_resp', Store(), lineno=625, col_offset=12)], Name('None', Load(), lineno=625, col_offset=29), lineno=625, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=626, col_offset=12), 'ehlo_resp', Store(), lineno=626, col_offset=12)], Name('None', Load(), lineno=626, col_offset=29), lineno=626, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=627, col_offset=12), 'esmtp_features', Store(), lineno=627, col_offset=12)], Dict([], [], lineno=627, col_offset=34), lineno=627, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=628, col_offset=12), 'does_esmtp', Store(), lineno=628, col_offset=12)], Num(0, lineno=628, col_offset=30), lineno=628, col_offset=12)], [], lineno=616, col_offset=8), Return(Tuple([Name('resp', Load(), lineno=629, col_offset=16), Name('reply', Load(), lineno=629, col_offset=22)], Load(), lineno=629, col_offset=16), lineno=629, col_offset=8)], [], lineno=595, col_offset=4), FunctionDef('sendmail', arguments([Name('self', Param(), lineno=631, col_offset=17), Name('from_addr', Param(), lineno=631, col_offset=23), Name('to_addrs', Param(), lineno=631, col_offset=34), Name('msg', Param(), lineno=631, col_offset=44), Name('mail_options', Param(), lineno=631, col_offset=49), Name('rcpt_options', Param(), lineno=632, col_offset=17)], None, None, [List([], Load(), lineno=631, col_offset=62), List([], Load(), lineno=632, col_offset=30)]), [Expr(Str('This command performs an entire mail transaction.\n\n        The arguments are:\n            - from_addr    : The address sending this mail.\n            - to_addrs     : A list of addresses to send this mail to.  A bare\n                             string will be treated as a list with 1 address.\n            - msg          : The message to send.\n            - mail_options : List of ESMTP options (such as 8bitmime) for the\n                             mail command.\n            - rcpt_options : List of ESMTP options (such as DSN commands) for\n                             all the rcpt commands.\n\n        If there has been no previous EHLO or HELO command this session, this\n        method tries ESMTP EHLO first.  If the server does ESMTP, message size\n        and each of the specified options will be passed to it.  If EHLO\n        fails, HELO will be tried and ESMTP options suppressed.\n\n        This method will return normally if the mail is accepted for at least\n        one recipient.  It returns a dictionary, with one entry for each\n        recipient that was refused.  Each entry contains a tuple of the SMTP\n        error code and the accompanying error message sent by the server.\n\n        This method may raise the following exceptions:\n\n         SMTPHeloError          The server didn\'t reply properly to\n                                the helo greeting.\n         SMTPRecipientsRefused  The server rejected ALL recipients\n                                (no mail was sent).\n         SMTPSenderRefused      The server didn\'t accept the from_addr.\n         SMTPDataError          The server replied with an unexpected\n                                error code (other than a refusal of\n                                a recipient).\n\n        Note: the connection will be open even after an exception is raised.\n\n        Example:\n\n         >>> import smtplib\n         >>> s=smtplib.SMTP("localhost")\n         >>> tolist=["one@one.org","two@two.org","three@three.org","four@four.org"]\n         >>> msg = \'\'\'\\\n         ... From: Me@my.org\n         ... Subject: testin\'...\n         ...\n         ... This is a test \'\'\'\n         >>> s.sendmail("me@my.org",tolist,msg)\n         { "three@three.org" : ( 550 ,"User unknown" ) }\n         >>> s.quit()\n\n        In the above example, the message was accepted for delivery to three\n        of the four addresses, and one was rejected, with the error code\n        550.  If all addresses are accepted, then the method will return an\n        empty dictionary.\n\n        ', lineno=687, col_offset=-1), lineno=687, col_offset=-1), Expr(Call(Attribute(Name('self', Load(), lineno=688, col_offset=8), 'ehlo_or_helo_if_needed', Load(), lineno=688, col_offset=8), [], [], None, None, lineno=688, col_offset=8), lineno=688, col_offset=8), Assign([Name('esmtp_opts', Store(), lineno=689, col_offset=8)], List([], Load(), lineno=689, col_offset=21), lineno=689, col_offset=8), If(Attribute(Name('self', Load(), lineno=690, col_offset=11), 'does_esmtp', Load(), lineno=690, col_offset=11), [If(Call(Attribute(Name('self', Load(), lineno=693, col_offset=15), 'has_extn', Load(), lineno=693, col_offset=15), [Str('size', lineno=693, col_offset=29)], [], None, None, lineno=693, col_offset=15), [Expr(Call(Attribute(Name('esmtp_opts', Load(), lineno=694, col_offset=16), 'append', Load(), lineno=694, col_offset=16), [BinOp(Str('size=%d', lineno=694, col_offset=34), Mod(), Call(Name('len', Load(), lineno=694, col_offset=46), [Name('msg', Load(), lineno=694, col_offset=50)], [], None, None, lineno=694, col_offset=46), lineno=694, col_offset=34)], [], None, None, lineno=694, col_offset=16), lineno=694, col_offset=16)], [], lineno=693, col_offset=12), For(Name('option', Store(), lineno=695, col_offset=16), Name('mail_options', Load(), lineno=695, col_offset=26), [Expr(Call(Attribute(Name('esmtp_opts', Load(), lineno=696, col_offset=16), 'append', Load(), lineno=696, col_offset=16), [Name('option', Load(), lineno=696, col_offset=34)], [], None, None, lineno=696, col_offset=16), lineno=696, col_offset=16)], [], lineno=695, col_offset=12)], [], lineno=690, col_offset=8), Assign([Tuple([Name('code', Store(), lineno=698, col_offset=9), Name('resp', Store(), lineno=698, col_offset=14)], Store(), lineno=698, col_offset=9)], Call(Attribute(Name('self', Load(), lineno=698, col_offset=22), 'mail', Load(), lineno=698, col_offset=22), [Name('from_addr', Load(), lineno=698, col_offset=32), Name('esmtp_opts', Load(), lineno=698, col_offset=43)], [], None, None, lineno=698, col_offset=22), lineno=698, col_offset=8), If(Compare(Name('code', Load(), lineno=699, col_offset=11), [NotEq()], [Num(250, lineno=699, col_offset=19)], lineno=699, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=700, col_offset=12), 'rset', Load(), lineno=700, col_offset=12), [], [], None, None, lineno=700, col_offset=12), lineno=700, col_offset=12), Raise(Call(Name('SMTPSenderRefused', Load(), lineno=701, col_offset=18), [Name('code', Load(), lineno=701, col_offset=36), Name('resp', Load(), lineno=701, col_offset=42), Name('from_addr', Load(), lineno=701, col_offset=48)], [], None, None, lineno=701, col_offset=18), None, None, lineno=701, col_offset=12)], [], lineno=699, col_offset=8), Assign([Name('senderrs', Store(), lineno=702, col_offset=8)], Dict([], [], lineno=702, col_offset=17), lineno=702, col_offset=8), If(Call(Name('isinstance', Load(), lineno=703, col_offset=11), [Name('to_addrs', Load(), lineno=703, col_offset=22), Name('basestring', Load(), lineno=703, col_offset=32)], [], None, None, lineno=703, col_offset=11), [Assign([Name('to_addrs', Store(), lineno=704, col_offset=12)], List([Name('to_addrs', Load(), lineno=704, col_offset=24)], Load(), lineno=704, col_offset=23), lineno=704, col_offset=12)], [], lineno=703, col_offset=8), For(Name('each', Store(), lineno=705, col_offset=12), Name('to_addrs', Load(), lineno=705, col_offset=20), [Assign([Tuple([Name('code', Store(), lineno=706, col_offset=13), Name('resp', Store(), lineno=706, col_offset=18)], Store(), lineno=706, col_offset=13)], Call(Attribute(Name('self', Load(), lineno=706, col_offset=24), 'rcpt', Load(), lineno=706, col_offset=24), [Name('each', Load(), lineno=706, col_offset=34), Name('rcpt_options', Load(), lineno=706, col_offset=40)], [], None, None, lineno=706, col_offset=24), lineno=706, col_offset=12), If(BoolOp(And(), [Compare(Name('code', Load(), lineno=707, col_offset=16), [NotEq()], [Num(250, lineno=707, col_offset=24)], lineno=707, col_offset=16), Compare(Name('code', Load(), lineno=707, col_offset=34), [NotEq()], [Num(251, lineno=707, col_offset=42)], lineno=707, col_offset=34)], lineno=707, col_offset=15), [Assign([Subscript(Name('senderrs', Load(), lineno=708, col_offset=16), Index(Name('each', Load(), lineno=708, col_offset=25)), Store(), lineno=708, col_offset=16)], Tuple([Name('code', Load(), lineno=708, col_offset=32), Name('resp', Load(), lineno=708, col_offset=37)], Load(), lineno=708, col_offset=32), lineno=708, col_offset=16)], [], lineno=707, col_offset=12)], [], lineno=705, col_offset=8), If(Compare(Call(Name('len', Load(), lineno=709, col_offset=11), [Name('senderrs', Load(), lineno=709, col_offset=15)], [], None, None, lineno=709, col_offset=11), [Eq()], [Call(Name('len', Load(), lineno=709, col_offset=26), [Name('to_addrs', Load(), lineno=709, col_offset=30)], [], None, None, lineno=709, col_offset=26)], lineno=709, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=711, col_offset=12), 'rset', Load(), lineno=711, col_offset=12), [], [], None, None, lineno=711, col_offset=12), lineno=711, col_offset=12), Raise(Call(Name('SMTPRecipientsRefused', Load(), lineno=712, col_offset=18), [Name('senderrs', Load(), lineno=712, col_offset=40)], [], None, None, lineno=712, col_offset=18), None, None, lineno=712, col_offset=12)], [], lineno=709, col_offset=8), Assign([Tuple([Name('code', Store(), lineno=713, col_offset=9), Name('resp', Store(), lineno=713, col_offset=14)], Store(), lineno=713, col_offset=9)], Call(Attribute(Name('self', Load(), lineno=713, col_offset=22), 'data', Load(), lineno=713, col_offset=22), [Name('msg', Load(), lineno=713, col_offset=32)], [], None, None, lineno=713, col_offset=22), lineno=713, col_offset=8), If(Compare(Name('code', Load(), lineno=714, col_offset=11), [NotEq()], [Num(250, lineno=714, col_offset=19)], lineno=714, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=715, col_offset=12), 'rset', Load(), lineno=715, col_offset=12), [], [], None, None, lineno=715, col_offset=12), lineno=715, col_offset=12), Raise(Call(Name('SMTPDataError', Load(), lineno=716, col_offset=18), [Name('code', Load(), lineno=716, col_offset=32), Name('resp', Load(), lineno=716, col_offset=38)], [], None, None, lineno=716, col_offset=18), None, None, lineno=716, col_offset=12)], [], lineno=714, col_offset=8), Return(Name('senderrs', Load(), lineno=718, col_offset=15), lineno=718, col_offset=8)], [], lineno=631, col_offset=4), FunctionDef('close', arguments([Name('self', Param(), lineno=721, col_offset=14)], None, None, []), [Expr(Str('Close the connection to the SMTP server.', lineno=722, col_offset=8), lineno=722, col_offset=8), If(Attribute(Name('self', Load(), lineno=723, col_offset=11), 'file', Load(), lineno=723, col_offset=11), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=724, col_offset=12), 'file', Load(), lineno=724, col_offset=12), 'close', Load(), lineno=724, col_offset=12), [], [], None, None, lineno=724, col_offset=12), lineno=724, col_offset=12)], [], lineno=723, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=725, col_offset=8), 'file', Store(), lineno=725, col_offset=8)], Name('None', Load(), lineno=725, col_offset=20), lineno=725, col_offset=8), If(Attribute(Name('self', Load(), lineno=726, col_offset=11), 'sock', Load(), lineno=726, col_offset=11), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=727, col_offset=12), 'sock', Load(), lineno=727, col_offset=12), 'close', Load(), lineno=727, col_offset=12), [], [], None, None, lineno=727, col_offset=12), lineno=727, col_offset=12)], [], lineno=726, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=728, col_offset=8), 'sock', Store(), lineno=728, col_offset=8)], Name('None', Load(), lineno=728, col_offset=20), lineno=728, col_offset=8)], [], lineno=721, col_offset=4), FunctionDef('quit', arguments([Name('self', Param(), lineno=731, col_offset=13)], None, None, []), [Expr(Str('Terminate the SMTP session.', lineno=732, col_offset=8), lineno=732, col_offset=8), Assign([Name('res', Store(), lineno=733, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=733, col_offset=14), 'docmd', Load(), lineno=733, col_offset=14), [Str('quit', lineno=733, col_offset=25)], [], None, None, lineno=733, col_offset=14), lineno=733, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=734, col_offset=8), 'close', Load(), lineno=734, col_offset=8), [], [], None, None, lineno=734, col_offset=8), lineno=734, col_offset=8), Return(Name('res', Load(), lineno=735, col_offset=15), lineno=735, col_offset=8)], [], lineno=731, col_offset=4)], [], lineno=187, col_offset=0), If(Name('_have_ssl', Load(), lineno=737, col_offset=3), [ClassDef('SMTP_SSL', [Name('SMTP', Load(), lineno=739, col_offset=19)], [Expr(Str(" This is a subclass derived from SMTP that connects over an SSL encrypted\n        socket (to use this class you need a socket module that was compiled with SSL\n        support). If host is not specified, '' (the local host) is used. If port is\n        omitted, the standard SMTP-over-SSL port (465) is used. keyfile and certfile\n        are also optional - they can contain a PEM formatted private key and\n        certificate chain file for the SSL connection.\n        ", lineno=746, col_offset=-1), lineno=746, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=747, col_offset=21), Name('host', Param(), lineno=747, col_offset=27), Name('port', Param(), lineno=747, col_offset=36), Name('local_hostname', Param(), lineno=747, col_offset=44), Name('keyfile', Param(), lineno=748, col_offset=21), Name('certfile', Param(), lineno=748, col_offset=35), Name('timeout', Param(), lineno=749, col_offset=21)], None, None, [Str('', lineno=747, col_offset=32), Num(0, lineno=747, col_offset=41), Name('None', Load(), lineno=747, col_offset=59), Name('None', Load(), lineno=748, col_offset=29), Name('None', Load(), lineno=748, col_offset=44), Attribute(Name('socket', Load(), lineno=749, col_offset=29), '_GLOBAL_DEFAULT_TIMEOUT', Load(), lineno=749, col_offset=29)]), [Assign([Attribute(Name('self', Load(), lineno=750, col_offset=12), 'keyfile', Store(), lineno=750, col_offset=12)], Name('keyfile', Load(), lineno=750, col_offset=27), lineno=750, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=751, col_offset=12), 'certfile', Store(), lineno=751, col_offset=12)], Name('certfile', Load(), lineno=751, col_offset=28), lineno=751, col_offset=12), Expr(Call(Attribute(Name('SMTP', Load(), lineno=752, col_offset=12), '__init__', Load(), lineno=752, col_offset=12), [Name('self', Load(), lineno=752, col_offset=26), Name('host', Load(), lineno=752, col_offset=32), Name('port', Load(), lineno=752, col_offset=38), Name('local_hostname', Load(), lineno=752, col_offset=44), Name('timeout', Load(), lineno=752, col_offset=60)], [], None, None, lineno=752, col_offset=12), lineno=752, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=753, col_offset=12), 'default_port', Store(), lineno=753, col_offset=12)], Name('SMTP_SSL_PORT', Load(), lineno=753, col_offset=32), lineno=753, col_offset=12)], [], lineno=747, col_offset=8), FunctionDef('_get_socket', arguments([Name('self', Param(), lineno=755, col_offset=24), Name('host', Param(), lineno=755, col_offset=30), Name('port', Param(), lineno=755, col_offset=36), Name('timeout', Param(), lineno=755, col_offset=42)], None, None, []), [If(Compare(Attribute(Name('self', Load(), lineno=756, col_offset=15), 'debuglevel', Load(), lineno=756, col_offset=15), [Gt()], [Num(0, lineno=756, col_offset=33)], lineno=756, col_offset=15), [Print(Name('stderr', Load(), lineno=756, col_offset=43), [Str('connect:', lineno=756, col_offset=51), Tuple([Name('host', Load(), lineno=756, col_offset=64), Name('port', Load(), lineno=756, col_offset=70)], Load(), lineno=756, col_offset=64)], True, lineno=756, col_offset=36)], [], lineno=756, col_offset=12), Assign([Name('new_socket', Store(), lineno=757, col_offset=12)], Call(Attribute(Name('socket', Load(), lineno=757, col_offset=25), 'create_connection', Load(), lineno=757, col_offset=25), [Tuple([Name('host', Load(), lineno=757, col_offset=51), Name('port', Load(), lineno=757, col_offset=57)], Load(), lineno=757, col_offset=51), Name('timeout', Load(), lineno=757, col_offset=64)], [], None, None, lineno=757, col_offset=25), lineno=757, col_offset=12), Assign([Name('new_socket', Store(), lineno=758, col_offset=12)], Call(Attribute(Name('ssl', Load(), lineno=758, col_offset=25), 'wrap_socket', Load(), lineno=758, col_offset=25), [Name('new_socket', Load(), lineno=758, col_offset=41), Attribute(Name('self', Load(), lineno=758, col_offset=53), 'keyfile', Load(), lineno=758, col_offset=53), Attribute(Name('self', Load(), lineno=758, col_offset=67), 'certfile', Load(), lineno=758, col_offset=67)], [], None, None, lineno=758, col_offset=25), lineno=758, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=759, col_offset=12), 'file', Store(), lineno=759, col_offset=12)], Call(Name('SSLFakeFile', Load(), lineno=759, col_offset=24), [Name('new_socket', Load(), lineno=759, col_offset=36)], [], None, None, lineno=759, col_offset=24), lineno=759, col_offset=12), Return(Name('new_socket', Load(), lineno=760, col_offset=19), lineno=760, col_offset=12)], [], lineno=755, col_offset=8)], [], lineno=739, col_offset=4), Expr(Call(Attribute(Name('__all__', Load(), lineno=762, col_offset=4), 'append', Load(), lineno=762, col_offset=4), [Str('SMTP_SSL', lineno=762, col_offset=19)], [], None, None, lineno=762, col_offset=4), lineno=762, col_offset=4)], [], lineno=737, col_offset=0), Assign([Name('LMTP_PORT', Store(), lineno=767, col_offset=0)], Num(2003, lineno=767, col_offset=12), lineno=767, col_offset=0), ClassDef('LMTP', [Name('SMTP', Load(), lineno=769, col_offset=11)], [Expr(Str("LMTP - Local Mail Transfer Protocol\n\n    The LMTP protocol, which is very similar to ESMTP, is heavily based\n    on the standard SMTP client. It's common to use Unix sockets for LMTP,\n    so our connect() method must support that as well as a regular\n    host:port server. To specify a Unix socket, you must use an absolute\n    path as the host, starting with a '/'.\n\n    Authentication is supported, using the regular SMTP mechanism. When\n    using a Unix socket, LMTP generally don't support or require any\n    authentication, but your mileage might vary.", lineno=780, col_offset=-1), lineno=780, col_offset=-1), Assign([Name('ehlo_msg', Store(), lineno=782, col_offset=4)], Str('lhlo', lineno=782, col_offset=15), lineno=782, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=784, col_offset=17), Name('host', Param(), lineno=784, col_offset=23), Name('port', Param(), lineno=784, col_offset=34), Name('local_hostname', Param(), lineno=784, col_offset=52)], None, None, [Str('', lineno=784, col_offset=30), Name('LMTP_PORT', Load(), lineno=784, col_offset=41), Name('None', Load(), lineno=784, col_offset=69)]), [Expr(Str('Initialize a new instance.', lineno=785, col_offset=8), lineno=785, col_offset=8), Expr(Call(Attribute(Name('SMTP', Load(), lineno=786, col_offset=8), '__init__', Load(), lineno=786, col_offset=8), [Name('self', Load(), lineno=786, col_offset=22), Name('host', Load(), lineno=786, col_offset=28), Name('port', Load(), lineno=786, col_offset=34), Name('local_hostname', Load(), lineno=786, col_offset=40)], [], None, None, lineno=786, col_offset=8), lineno=786, col_offset=8)], [], lineno=784, col_offset=4), FunctionDef('connect', arguments([Name('self', Param(), lineno=788, col_offset=16), Name('host', Param(), lineno=788, col_offset=22), Name('port', Param(), lineno=788, col_offset=42)], None, None, [Str('localhost', lineno=788, col_offset=29), Num(0, lineno=788, col_offset=49)]), [Expr(Str('Connect to the LMTP daemon, on either a Unix or a TCP socket.', lineno=789, col_offset=8), lineno=789, col_offset=8), If(Compare(Subscript(Name('host', Load(), lineno=790, col_offset=11), Index(Num(0, lineno=790, col_offset=16)), Load(), lineno=790, col_offset=11), [NotEq()], [Str('/', lineno=790, col_offset=22)], lineno=790, col_offset=11), [Return(Call(Attribute(Name('SMTP', Load(), lineno=791, col_offset=19), 'connect', Load(), lineno=791, col_offset=19), [Name('self', Load(), lineno=791, col_offset=32), Name('host', Load(), lineno=791, col_offset=38), Name('port', Load(), lineno=791, col_offset=44)], [], None, None, lineno=791, col_offset=19), lineno=791, col_offset=12)], [], lineno=790, col_offset=8), TryExcept([Assign([Attribute(Name('self', Load(), lineno=795, col_offset=12), 'sock', Store(), lineno=795, col_offset=12)], Call(Attribute(Name('socket', Load(), lineno=795, col_offset=24), 'socket', Load(), lineno=795, col_offset=24), [Attribute(Name('socket', Load(), lineno=795, col_offset=38), 'AF_UNIX', Load(), lineno=795, col_offset=38), Attribute(Name('socket', Load(), lineno=795, col_offset=54), 'SOCK_STREAM', Load(), lineno=795, col_offset=54)], [], None, None, lineno=795, col_offset=24), lineno=795, col_offset=12), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=796, col_offset=12), 'sock', Load(), lineno=796, col_offset=12), 'connect', Load(), lineno=796, col_offset=12), [Name('host', Load(), lineno=796, col_offset=30)], [], None, None, lineno=796, col_offset=12), lineno=796, col_offset=12)], [ExceptHandler(Attribute(Name('socket', Load(), lineno=797, col_offset=15), 'error', Load(), lineno=797, col_offset=15), Name('msg', Store(), lineno=797, col_offset=29), [If(Compare(Attribute(Name('self', Load(), lineno=798, col_offset=15), 'debuglevel', Load(), lineno=798, col_offset=15), [Gt()], [Num(0, lineno=798, col_offset=33)], lineno=798, col_offset=15), [Print(Name('stderr', Load(), lineno=798, col_offset=43), [Str('connect fail:', lineno=798, col_offset=51), Name('host', Load(), lineno=798, col_offset=68)], True, lineno=798, col_offset=36)], [], lineno=798, col_offset=12), If(Attribute(Name('self', Load(), lineno=799, col_offset=15), 'sock', Load(), lineno=799, col_offset=15), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=800, col_offset=16), 'sock', Load(), lineno=800, col_offset=16), 'close', Load(), lineno=800, col_offset=16), [], [], None, None, lineno=800, col_offset=16), lineno=800, col_offset=16)], [], lineno=799, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=801, col_offset=12), 'sock', Store(), lineno=801, col_offset=12)], Name('None', Load(), lineno=801, col_offset=24), lineno=801, col_offset=12), Raise(Attribute(Name('socket', Load(), lineno=802, col_offset=18), 'error', Load(), lineno=802, col_offset=18), Name('msg', Load(), lineno=802, col_offset=32), None, lineno=802, col_offset=12)], lineno=797, col_offset=8)], [], lineno=794, col_offset=8), Assign([Tuple([Name('code', Store(), lineno=803, col_offset=9), Name('msg', Store(), lineno=803, col_offset=15)], Store(), lineno=803, col_offset=9)], Call(Attribute(Name('self', Load(), lineno=803, col_offset=22), 'getreply', Load(), lineno=803, col_offset=22), [], [], None, None, lineno=803, col_offset=22), lineno=803, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=804, col_offset=11), 'debuglevel', Load(), lineno=804, col_offset=11), [Gt()], [Num(0, lineno=804, col_offset=29)], lineno=804, col_offset=11), [Print(Name('stderr', Load(), lineno=804, col_offset=39), [Str('connect:', lineno=804, col_offset=47), Name('msg', Load(), lineno=804, col_offset=59)], True, lineno=804, col_offset=32)], [], lineno=804, col_offset=8), Return(Tuple([Name('code', Load(), lineno=805, col_offset=16), Name('msg', Load(), lineno=805, col_offset=22)], Load(), lineno=805, col_offset=16), lineno=805, col_offset=8)], [], lineno=788, col_offset=4)], [], lineno=769, col_offset=0), If(Compare(Name('__name__', Load(), lineno=810, col_offset=3), [Eq()], [Str('__main__', lineno=810, col_offset=15)], lineno=810, col_offset=3), [Import([alias('sys', None)], lineno=811, col_offset=4), FunctionDef('prompt', arguments([Name('prompt', Param(), lineno=813, col_offset=15)], None, None, []), [Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=814, col_offset=8), 'stdout', Load(), lineno=814, col_offset=8), 'write', Load(), lineno=814, col_offset=8), [BinOp(Name('prompt', Load(), lineno=814, col_offset=25), Add(), Str(': ', lineno=814, col_offset=34), lineno=814, col_offset=25)], [], None, None, lineno=814, col_offset=8), lineno=814, col_offset=8), Return(Call(Attribute(Call(Attribute(Attribute(Name('sys', Load(), lineno=815, col_offset=15), 'stdin', Load(), lineno=815, col_offset=15), 'readline', Load(), lineno=815, col_offset=15), [], [], None, None, lineno=815, col_offset=15), 'strip', Load(), lineno=815, col_offset=15), [], [], None, None, lineno=815, col_offset=15), lineno=815, col_offset=8)], [], lineno=813, col_offset=4), Assign([Name('fromaddr', Store(), lineno=817, col_offset=4)], Call(Name('prompt', Load(), lineno=817, col_offset=15), [Str('From', lineno=817, col_offset=22)], [], None, None, lineno=817, col_offset=15), lineno=817, col_offset=4), Assign([Name('toaddrs', Store(), lineno=818, col_offset=4)], Call(Attribute(Call(Name('prompt', Load(), lineno=818, col_offset=15), [Str('To', lineno=818, col_offset=22)], [], None, None, lineno=818, col_offset=15), 'split', Load(), lineno=818, col_offset=15), [Str(',', lineno=818, col_offset=34)], [], None, None, lineno=818, col_offset=15), lineno=818, col_offset=4), Print(None, [Str('Enter message, end with ^D:', lineno=819, col_offset=10)], True, lineno=819, col_offset=4), Assign([Name('msg', Store(), lineno=820, col_offset=4)], Str('', lineno=820, col_offset=10), lineno=820, col_offset=4), While(Num(1, lineno=821, col_offset=10), [Assign([Name('line', Store(), lineno=822, col_offset=8)], Call(Attribute(Attribute(Name('sys', Load(), lineno=822, col_offset=15), 'stdin', Load(), lineno=822, col_offset=15), 'readline', Load(), lineno=822, col_offset=15), [], [], None, None, lineno=822, col_offset=15), lineno=822, col_offset=8), If(UnaryOp(Not(), Name('line', Load(), lineno=823, col_offset=15), lineno=823, col_offset=11), [Break( lineno=824, col_offset=12)], [], lineno=823, col_offset=8), Assign([Name('msg', Store(), lineno=825, col_offset=8)], BinOp(Name('msg', Load(), lineno=825, col_offset=14), Add(), Name('line', Load(), lineno=825, col_offset=20), lineno=825, col_offset=14), lineno=825, col_offset=8)], [], lineno=821, col_offset=4), Print(None, [BinOp(Str('Message length is %d', lineno=826, col_offset=10), Mod(), Call(Name('len', Load(), lineno=826, col_offset=35), [Name('msg', Load(), lineno=826, col_offset=39)], [], None, None, lineno=826, col_offset=35), lineno=826, col_offset=10)], True, lineno=826, col_offset=4), Assign([Name('server', Store(), lineno=828, col_offset=4)], Call(Name('SMTP', Load(), lineno=828, col_offset=13), [Str('localhost', lineno=828, col_offset=18)], [], None, None, lineno=828, col_offset=13), lineno=828, col_offset=4), Expr(Call(Attribute(Name('server', Load(), lineno=829, col_offset=4), 'set_debuglevel', Load(), lineno=829, col_offset=4), [Num(1, lineno=829, col_offset=26)], [], None, None, lineno=829, col_offset=4), lineno=829, col_offset=4), Expr(Call(Attribute(Name('server', Load(), lineno=830, col_offset=4), 'sendmail', Load(), lineno=830, col_offset=4), [Name('fromaddr', Load(), lineno=830, col_offset=20), Name('toaddrs', Load(), lineno=830, col_offset=30), Name('msg', Load(), lineno=830, col_offset=39)], [], None, None, lineno=830, col_offset=4), lineno=830, col_offset=4), Expr(Call(Attribute(Name('server', Load(), lineno=831, col_offset=4), 'quit', Load(), lineno=831, col_offset=4), [], [], None, None, lineno=831, col_offset=4), lineno=831, col_offset=4)], [], lineno=810, col_offset=0)])
