Module([Expr(Str('PyUnit testing that threads honor our signal semantics', lineno=1, col_offset=0), lineno=1, col_offset=0), Import([alias('unittest', None)], lineno=3, col_offset=0), Import([alias('signal', None)], lineno=4, col_offset=0), Import([alias('os', None)], lineno=5, col_offset=0), Import([alias('sys', None)], lineno=6, col_offset=0), ImportFrom('test.test_support', [alias('run_unittest', None), alias('import_module', None), alias('reap_threads', None)], 0, lineno=7, col_offset=0), Assign([Name('thread', Store(), lineno=8, col_offset=0)], Call(Name('import_module', Load(), lineno=8, col_offset=9), [Str('thread', lineno=8, col_offset=23)], [], None, None, lineno=8, col_offset=9), lineno=8, col_offset=0), If(BoolOp(Or(), [Compare(Subscript(Attribute(Name('sys', Load(), lineno=10, col_offset=3), 'platform', Load(), lineno=10, col_offset=3), Slice(None, Num(3, lineno=10, col_offset=17), None), Load(), lineno=10, col_offset=3), [In()], [Tuple([Str('win', lineno=10, col_offset=24), Str('os2', lineno=10, col_offset=31)], Load(), lineno=10, col_offset=24)], lineno=10, col_offset=3), Compare(Attribute(Name('sys', Load(), lineno=10, col_offset=41), 'platform', Load(), lineno=10, col_offset=41), [Eq()], [Str('riscos', lineno=10, col_offset=55)], lineno=10, col_offset=41)], lineno=10, col_offset=3), [Raise(Attribute(Name('unittest', Load(), lineno=11, col_offset=10), 'SkipTest', Load(), lineno=11, col_offset=10), BinOp(Str("Can't test signal on %s", lineno=11, col_offset=29), Mod(), Attribute(Name('sys', Load(), lineno=11, col_offset=57), 'platform', Load(), lineno=11, col_offset=57), lineno=11, col_offset=29), None, lineno=11, col_offset=4)], [], lineno=10, col_offset=0), Assign([Name('process_pid', Store(), lineno=13, col_offset=0)], Call(Attribute(Name('os', Load(), lineno=13, col_offset=14), 'getpid', Load(), lineno=13, col_offset=14), [], [], None, None, lineno=13, col_offset=14), lineno=13, col_offset=0), Assign([Name('signalled_all', Store(), lineno=14, col_offset=0)], Call(Attribute(Name('thread', Load(), lineno=14, col_offset=14), 'allocate_lock', Load(), lineno=14, col_offset=14), [], [], None, None, lineno=14, col_offset=14), lineno=14, col_offset=0), FunctionDef('registerSignals', arguments([Name('for_usr1', Param(), lineno=17, col_offset=20), Name('for_usr2', Param(), lineno=17, col_offset=30), Name('for_alrm', Param(), lineno=17, col_offset=40)], None, None, []), [Assign([Name('usr1', Store(), lineno=18, col_offset=4)], Call(Attribute(Name('signal', Load(), lineno=18, col_offset=11), 'signal', Load(), lineno=18, col_offset=11), [Attribute(Name('signal', Load(), lineno=18, col_offset=25), 'SIGUSR1', Load(), lineno=18, col_offset=25), Name('for_usr1', Load(), lineno=18, col_offset=41)], [], None, None, lineno=18, col_offset=11), lineno=18, col_offset=4), Assign([Name('usr2', Store(), lineno=19, col_offset=4)], Call(Attribute(Name('signal', Load(), lineno=19, col_offset=11), 'signal', Load(), lineno=19, col_offset=11), [Attribute(Name('signal', Load(), lineno=19, col_offset=25), 'SIGUSR2', Load(), lineno=19, col_offset=25), Name('for_usr2', Load(), lineno=19, col_offset=41)], [], None, None, lineno=19, col_offset=11), lineno=19, col_offset=4), Assign([Name('alrm', Store(), lineno=20, col_offset=4)], Call(Attribute(Name('signal', Load(), lineno=20, col_offset=11), 'signal', Load(), lineno=20, col_offset=11), [Attribute(Name('signal', Load(), lineno=20, col_offset=25), 'SIGALRM', Load(), lineno=20, col_offset=25), Name('for_alrm', Load(), lineno=20, col_offset=41)], [], None, None, lineno=20, col_offset=11), lineno=20, col_offset=4), Return(Tuple([Name('usr1', Load(), lineno=21, col_offset=11), Name('usr2', Load(), lineno=21, col_offset=17), Name('alrm', Load(), lineno=21, col_offset=23)], Load(), lineno=21, col_offset=11), lineno=21, col_offset=4)], [], lineno=17, col_offset=0), FunctionDef('handle_signals', arguments([Name('sig', Param(), lineno=26, col_offset=19), Name('frame', Param(), lineno=26, col_offset=23)], None, None, []), [AugAssign(Subscript(Subscript(Name('signal_blackboard', Load(), lineno=27, col_offset=4), Index(Name('sig', Load(), lineno=27, col_offset=22)), Load(), lineno=27, col_offset=4), Index(Str('tripped', lineno=27, col_offset=27)), Store(), lineno=27, col_offset=4), Add(), Num(1, lineno=27, col_offset=41), lineno=27, col_offset=4), Assign([Subscript(Subscript(Name('signal_blackboard', Load(), lineno=28, col_offset=4), Index(Name('sig', Load(), lineno=28, col_offset=22)), Load(), lineno=28, col_offset=4), Index(Str('tripped_by', lineno=28, col_offset=27)), Store(), lineno=28, col_offset=4)], Call(Attribute(Name('thread', Load(), lineno=28, col_offset=43), 'get_ident', Load(), lineno=28, col_offset=43), [], [], None, None, lineno=28, col_offset=43), lineno=28, col_offset=4)], [], lineno=26, col_offset=0), FunctionDef('send_signals', arguments([], None, None, []), [Expr(Call(Attribute(Name('os', Load(), lineno=32, col_offset=4), 'kill', Load(), lineno=32, col_offset=4), [Name('process_pid', Load(), lineno=32, col_offset=12), Attribute(Name('signal', Load(), lineno=32, col_offset=25), 'SIGUSR1', Load(), lineno=32, col_offset=25)], [], None, None, lineno=32, col_offset=4), lineno=32, col_offset=4), Expr(Call(Attribute(Name('os', Load(), lineno=33, col_offset=4), 'kill', Load(), lineno=33, col_offset=4), [Name('process_pid', Load(), lineno=33, col_offset=12), Attribute(Name('signal', Load(), lineno=33, col_offset=25), 'SIGUSR2', Load(), lineno=33, col_offset=25)], [], None, None, lineno=33, col_offset=4), lineno=33, col_offset=4), Expr(Call(Attribute(Name('signalled_all', Load(), lineno=34, col_offset=4), 'release', Load(), lineno=34, col_offset=4), [], [], None, None, lineno=34, col_offset=4), lineno=34, col_offset=4)], [], lineno=31, col_offset=0), ClassDef('ThreadSignals', [Attribute(Name('unittest', Load(), lineno=36, col_offset=20), 'TestCase', Load(), lineno=36, col_offset=20)], [Expr(Str('Test signal handling semantics of threads.\n       We spawn a thread, have the thread send two signals, and\n       wait for it to finish. Check that we got both signals\n       and that they were run by the main thread.\n    ', lineno=41, col_offset=-1), lineno=41, col_offset=-1), FunctionDef('test_signals', arguments([Name('self', Param(), lineno=43, col_offset=21)], None, None, []), [Expr(Call(Attribute(Name('signalled_all', Load(), lineno=44, col_offset=8), 'acquire', Load(), lineno=44, col_offset=8), [], [], None, None, lineno=44, col_offset=8), lineno=44, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=45, col_offset=8), 'spawnSignallingThread', Load(), lineno=45, col_offset=8), [], [], None, None, lineno=45, col_offset=8), lineno=45, col_offset=8), Expr(Call(Attribute(Name('signalled_all', Load(), lineno=46, col_offset=8), 'acquire', Load(), lineno=46, col_offset=8), [], [], None, None, lineno=46, col_offset=8), lineno=46, col_offset=8), If(BoolOp(Or(), [Compare(Subscript(Subscript(Name('signal_blackboard', Load(), lineno=53, col_offset=11), Index(Attribute(Name('signal', Load(), lineno=53, col_offset=29), 'SIGUSR1', Load(), lineno=53, col_offset=29)), Load(), lineno=53, col_offset=11), Index(Str('tripped', lineno=53, col_offset=45)), Load(), lineno=53, col_offset=11), [Eq()], [Num(0, lineno=53, col_offset=59)], lineno=53, col_offset=11), Compare(Subscript(Subscript(Name('signal_blackboard', Load(), lineno=54, col_offset=14), Index(Attribute(Name('signal', Load(), lineno=54, col_offset=32), 'SIGUSR2', Load(), lineno=54, col_offset=32)), Load(), lineno=54, col_offset=14), Index(Str('tripped', lineno=54, col_offset=48)), Load(), lineno=54, col_offset=14), [Eq()], [Num(0, lineno=54, col_offset=62)], lineno=54, col_offset=14)], lineno=53, col_offset=11), [Expr(Call(Attribute(Name('signal', Load(), lineno=55, col_offset=12), 'alarm', Load(), lineno=55, col_offset=12), [Num(1, lineno=55, col_offset=25)], [], None, None, lineno=55, col_offset=12), lineno=55, col_offset=12), Expr(Call(Attribute(Name('signal', Load(), lineno=56, col_offset=12), 'pause', Load(), lineno=56, col_offset=12), [], [], None, None, lineno=56, col_offset=12), lineno=56, col_offset=12), Expr(Call(Attribute(Name('signal', Load(), lineno=57, col_offset=12), 'alarm', Load(), lineno=57, col_offset=12), [Num(0, lineno=57, col_offset=25)], [], None, None, lineno=57, col_offset=12), lineno=57, col_offset=12)], [], lineno=53, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=59, col_offset=8), 'assertEqual', Load(), lineno=59, col_offset=8), [Subscript(Subscript(Name('signal_blackboard', Load(), lineno=59, col_offset=26), Index(Attribute(Name('signal', Load(), lineno=59, col_offset=44), 'SIGUSR1', Load(), lineno=59, col_offset=44)), Load(), lineno=59, col_offset=26), Index(Str('tripped', lineno=59, col_offset=60)), Load(), lineno=59, col_offset=26), Num(1, lineno=59, col_offset=72)], [], None, None, lineno=59, col_offset=8), lineno=59, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=60, col_offset=8), 'assertEqual', Load(), lineno=60, col_offset=8), [Subscript(Subscript(Name('signal_blackboard', Load(), lineno=60, col_offset=26), Index(Attribute(Name('signal', Load(), lineno=60, col_offset=44), 'SIGUSR1', Load(), lineno=60, col_offset=44)), Load(), lineno=60, col_offset=26), Index(Str('tripped_by', lineno=60, col_offset=60)), Load(), lineno=60, col_offset=26), Call(Attribute(Name('thread', Load(), lineno=61, col_offset=27), 'get_ident', Load(), lineno=61, col_offset=27), [], [], None, None, lineno=61, col_offset=27)], [], None, None, lineno=60, col_offset=8), lineno=60, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=62, col_offset=8), 'assertEqual', Load(), lineno=62, col_offset=8), [Subscript(Subscript(Name('signal_blackboard', Load(), lineno=62, col_offset=26), Index(Attribute(Name('signal', Load(), lineno=62, col_offset=44), 'SIGUSR2', Load(), lineno=62, col_offset=44)), Load(), lineno=62, col_offset=26), Index(Str('tripped', lineno=62, col_offset=60)), Load(), lineno=62, col_offset=26), Num(1, lineno=62, col_offset=72)], [], None, None, lineno=62, col_offset=8), lineno=62, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=63, col_offset=8), 'assertEqual', Load(), lineno=63, col_offset=8), [Subscript(Subscript(Name('signal_blackboard', Load(), lineno=63, col_offset=26), Index(Attribute(Name('signal', Load(), lineno=63, col_offset=44), 'SIGUSR2', Load(), lineno=63, col_offset=44)), Load(), lineno=63, col_offset=26), Index(Str('tripped_by', lineno=63, col_offset=60)), Load(), lineno=63, col_offset=26), Call(Attribute(Name('thread', Load(), lineno=64, col_offset=27), 'get_ident', Load(), lineno=64, col_offset=27), [], [], None, None, lineno=64, col_offset=27)], [], None, None, lineno=63, col_offset=8), lineno=63, col_offset=8), Expr(Call(Attribute(Name('signalled_all', Load(), lineno=65, col_offset=8), 'release', Load(), lineno=65, col_offset=8), [], [], None, None, lineno=65, col_offset=8), lineno=65, col_offset=8)], [Name('reap_threads', Load(), lineno=42, col_offset=5)], lineno=42, col_offset=4), FunctionDef('spawnSignallingThread', arguments([Name('self', Param(), lineno=67, col_offset=30)], None, None, []), [Expr(Call(Attribute(Name('thread', Load(), lineno=68, col_offset=8), 'start_new_thread', Load(), lineno=68, col_offset=8), [Name('send_signals', Load(), lineno=68, col_offset=32), Tuple([], Load(), lineno=68, col_offset=46)], [], None, None, lineno=68, col_offset=8), lineno=68, col_offset=8)], [], lineno=67, col_offset=4)], [], lineno=36, col_offset=0), FunctionDef('test_main', arguments([], None, None, []), [Global(['signal_blackboard'], lineno=72, col_offset=4), Assign([Name('signal_blackboard', Store(), lineno=74, col_offset=4)], Dict([Attribute(Name('signal', Load(), lineno=74, col_offset=26), 'SIGUSR1', Load(), lineno=74, col_offset=26), Attribute(Name('signal', Load(), lineno=75, col_offset=26), 'SIGUSR2', Load(), lineno=75, col_offset=26), Attribute(Name('signal', Load(), lineno=76, col_offset=26), 'SIGALRM', Load(), lineno=76, col_offset=26)], [Dict([Str('tripped', lineno=74, col_offset=44), Str('tripped_by', lineno=74, col_offset=58)], [Num(0, lineno=74, col_offset=55), Num(0, lineno=74, col_offset=72)], lineno=74, col_offset=43), Dict([Str('tripped', lineno=75, col_offset=44), Str('tripped_by', lineno=75, col_offset=58)], [Num(0, lineno=75, col_offset=55), Num(0, lineno=75, col_offset=72)], lineno=75, col_offset=43), Dict([Str('tripped', lineno=76, col_offset=44), Str('tripped_by', lineno=76, col_offset=58)], [Num(0, lineno=76, col_offset=55), Num(0, lineno=76, col_offset=72)], lineno=76, col_offset=43)], lineno=74, col_offset=24), lineno=74, col_offset=4), Assign([Name('oldsigs', Store(), lineno=78, col_offset=4)], Call(Name('registerSignals', Load(), lineno=78, col_offset=14), [Name('handle_signals', Load(), lineno=78, col_offset=30), Name('handle_signals', Load(), lineno=78, col_offset=46), Name('handle_signals', Load(), lineno=78, col_offset=62)], [], None, None, lineno=78, col_offset=14), lineno=78, col_offset=4), TryFinally([Expr(Call(Name('run_unittest', Load(), lineno=80, col_offset=8), [Name('ThreadSignals', Load(), lineno=80, col_offset=21)], [], None, None, lineno=80, col_offset=8), lineno=80, col_offset=8)], [Expr(Call(Name('registerSignals', Load(), lineno=82, col_offset=8), [], [], Name('oldsigs', Load(), lineno=82, col_offset=25), None, lineno=82, col_offset=8), lineno=82, col_offset=8)], lineno=79, col_offset=4)], [], lineno=71, col_offset=0), If(Compare(Name('__name__', Load(), lineno=84, col_offset=3), [Eq()], [Str('__main__', lineno=84, col_offset=15)], lineno=84, col_offset=3), [Expr(Call(Name('test_main', Load(), lineno=85, col_offset=4), [], [], None, None, lineno=85, col_offset=4), lineno=85, col_offset=4)], [], lineno=84, col_offset=0)])
