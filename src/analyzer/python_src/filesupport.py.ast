Module([Import([alias('sys', None)], lineno=14, col_offset=0), Expr(Call(Attribute(Name('sys', Load(), lineno=15, col_offset=0), 'exit', Load(), lineno=15, col_offset=0), [Num(42, lineno=15, col_offset=9)], [], None, None, lineno=15, col_offset=0), lineno=15, col_offset=0), Import([alias('string', None)], lineno=17, col_offset=0), Assign([Name('MODNAME', Store(), lineno=21, col_offset=0)], Str('_File', lineno=21, col_offset=10), lineno=21, col_offset=0), Assign([Name('LONGMODNAME', Store(), lineno=22, col_offset=0)], Str('Carbon.File', lineno=22, col_offset=14), lineno=22, col_offset=0), Assign([Name('MODPREFIX', Store(), lineno=25, col_offset=0)], Str('File', lineno=25, col_offset=12), lineno=25, col_offset=0), Assign([Name('INPUTFILE', Store(), lineno=26, col_offset=0)], BinOp(Call(Attribute(Name('string', Load(), lineno=26, col_offset=12), 'lower', Load(), lineno=26, col_offset=12), [Name('MODPREFIX', Load(), lineno=26, col_offset=25)], [], None, None, lineno=26, col_offset=12), Add(), Str('gen.py', lineno=26, col_offset=38), lineno=26, col_offset=12), lineno=26, col_offset=0), Assign([Name('OUTPUTFILE', Store(), lineno=27, col_offset=0)], BinOp(Name('MODNAME', Load(), lineno=27, col_offset=13), Add(), Str('module.c', lineno=27, col_offset=23), lineno=27, col_offset=13), lineno=27, col_offset=0), ImportFrom('macsupport', [alias('*', None)], 0, lineno=29, col_offset=0), Assign([Name('SInt64', Store(), lineno=32, col_offset=0)], Call(Name('Type', Load(), lineno=32, col_offset=9), [Str('SInt64', lineno=32, col_offset=14), Str('L', lineno=32, col_offset=24)], [], None, None, lineno=32, col_offset=9), lineno=32, col_offset=0), Assign([Name('UInt64', Store(), lineno=33, col_offset=0)], Call(Name('Type', Load(), lineno=33, col_offset=9), [Str('UInt64', lineno=33, col_offset=14), Str('L', lineno=33, col_offset=24)], [], None, None, lineno=33, col_offset=9), lineno=33, col_offset=0), Assign([Name('FNMessage', Store(), lineno=34, col_offset=0)], Call(Name('Type', Load(), lineno=34, col_offset=12), [Str('FNMessage', lineno=34, col_offset=17), Str('l', lineno=34, col_offset=30)], [], None, None, lineno=34, col_offset=12), lineno=34, col_offset=0), Assign([Name('FSAllocationFlags', Store(), lineno=35, col_offset=0)], Call(Name('Type', Load(), lineno=35, col_offset=20), [Str('FSAllocationFlags', lineno=35, col_offset=25), Str('H', lineno=35, col_offset=46)], [], None, None, lineno=35, col_offset=20), lineno=35, col_offset=0), Assign([Name('FSCatalogInfoBitmap', Store(), lineno=36, col_offset=0)], Call(Name('Type', Load(), lineno=36, col_offset=22), [Str('FSCatalogInfoBitmap', lineno=36, col_offset=27), Str('l', lineno=36, col_offset=50)], [], None, None, lineno=36, col_offset=22), lineno=36, col_offset=0), Assign([Name('FSIteratorFlags', Store(), lineno=37, col_offset=0)], Call(Name('Type', Load(), lineno=37, col_offset=18), [Str('FSIteratorFlags', lineno=37, col_offset=23), Str('l', lineno=37, col_offset=42)], [], None, None, lineno=37, col_offset=18), lineno=37, col_offset=0), Assign([Name('FSVolumeRefNum', Store(), lineno=38, col_offset=0)], Call(Name('Type', Load(), lineno=38, col_offset=17), [Str('FSVolumeRefNum', lineno=38, col_offset=22), Str('h', lineno=38, col_offset=40)], [], None, None, lineno=38, col_offset=17), lineno=38, col_offset=0), Assign([Name('AliasInfoType', Store(), lineno=39, col_offset=0)], Call(Name('Type', Load(), lineno=39, col_offset=16), [Str('AliasInfoType', lineno=39, col_offset=21), Str('h', lineno=39, col_offset=38)], [], None, None, lineno=39, col_offset=16), lineno=39, col_offset=0), ClassDef('VarReverseInputBufferType', [Name('ReverseInputBufferMixin', Load(), lineno=44, col_offset=32), Name('VarInputBufferType', Load(), lineno=44, col_offset=57)], [Pass( lineno=45, col_offset=4)], [], lineno=44, col_offset=0), Assign([Name('FullPathName', Store(), lineno=46, col_offset=0)], Call(Name('VarReverseInputBufferType', Load(), lineno=46, col_offset=15), [], [], None, None, lineno=46, col_offset=15), lineno=46, col_offset=0), Assign([Name('ConstStr31Param', Store(), lineno=47, col_offset=0)], Call(Name('OpaqueArrayType', Load(), lineno=47, col_offset=18), [Str('Str31', lineno=47, col_offset=34), Str('PyMac_BuildStr255', lineno=47, col_offset=43), Str('PyMac_GetStr255', lineno=47, col_offset=64)], [], None, None, lineno=47, col_offset=18), lineno=47, col_offset=0), Assign([Name('ConstStr32Param', Store(), lineno=48, col_offset=0)], Call(Name('OpaqueArrayType', Load(), lineno=48, col_offset=18), [Str('Str32', lineno=48, col_offset=34), Str('PyMac_BuildStr255', lineno=48, col_offset=43), Str('PyMac_GetStr255', lineno=48, col_offset=64)], [], None, None, lineno=48, col_offset=18), lineno=48, col_offset=0), Assign([Name('ConstStr63Param', Store(), lineno=49, col_offset=0)], Call(Name('OpaqueArrayType', Load(), lineno=49, col_offset=18), [Str('Str63', lineno=49, col_offset=34), Str('PyMac_BuildStr255', lineno=49, col_offset=43), Str('PyMac_GetStr255', lineno=49, col_offset=64)], [], None, None, lineno=49, col_offset=18), lineno=49, col_offset=0), Assign([Name('Str63', Store(), lineno=50, col_offset=0)], Call(Name('OpaqueArrayType', Load(), lineno=50, col_offset=8), [Str('Str63', lineno=50, col_offset=24), Str('PyMac_BuildStr255', lineno=50, col_offset=33), Str('PyMac_GetStr255', lineno=50, col_offset=54)], [], None, None, lineno=50, col_offset=8), lineno=50, col_offset=0), Assign([Name('HFSUniStr255', Store(), lineno=52, col_offset=0)], Call(Name('OpaqueType', Load(), lineno=52, col_offset=15), [Str('HFSUniStr255', lineno=52, col_offset=26), Str('PyMac_BuildHFSUniStr255', lineno=52, col_offset=42), Str('PyMac_GetHFSUniStr255', lineno=52, col_offset=69)], [], None, None, lineno=52, col_offset=15), lineno=52, col_offset=0), Assign([Name('UInt8_ptr', Store(), lineno=53, col_offset=0)], Call(Name('InputOnlyType', Load(), lineno=53, col_offset=12), [Str('UInt8 *', lineno=53, col_offset=26), Str('s', lineno=53, col_offset=37)], [], None, None, lineno=53, col_offset=12), lineno=53, col_offset=0), ClassDef('OptionalFSxxxType', [Name('OpaqueByValueType', Load(), lineno=56, col_offset=24)], [FunctionDef('declare', arguments([Name('self', Param(), lineno=57, col_offset=16), Name('name', Param(), lineno=57, col_offset=22)], None, None, []), [Expr(Call(Name('Output', Load(), lineno=58, col_offset=8), [Str('%s %s__buf__;', lineno=58, col_offset=15), Attribute(Name('self', Load(), lineno=58, col_offset=32), 'typeName', Load(), lineno=58, col_offset=32), Name('name', Load(), lineno=58, col_offset=47)], [], None, None, lineno=58, col_offset=8), lineno=58, col_offset=8), Expr(Call(Name('Output', Load(), lineno=59, col_offset=8), [Str('%s *%s = &%s__buf__;', lineno=59, col_offset=15), Attribute(Name('self', Load(), lineno=59, col_offset=39), 'typeName', Load(), lineno=59, col_offset=39), Name('name', Load(), lineno=59, col_offset=54), Name('name', Load(), lineno=59, col_offset=60)], [], None, None, lineno=59, col_offset=8), lineno=59, col_offset=8)], [], lineno=57, col_offset=4)], [], lineno=56, col_offset=0), ClassDef('FSCatalogInfoAndBitmapType', [Name('InputOnlyType', Load(), lineno=61, col_offset=33)], [FunctionDef('__init__', arguments([Name('self', Param(), lineno=63, col_offset=17)], None, None, []), [Expr(Call(Attribute(Name('InputOnlyType', Load(), lineno=64, col_offset=8), '__init__', Load(), lineno=64, col_offset=8), [Name('self', Load(), lineno=64, col_offset=31), Str('BUG', lineno=64, col_offset=37), Str('BUG', lineno=64, col_offset=44)], [], None, None, lineno=64, col_offset=8), lineno=64, col_offset=8)], [], lineno=63, col_offset=4), FunctionDef('declare', arguments([Name('self', Param(), lineno=66, col_offset=16), Name('name', Param(), lineno=66, col_offset=22)], None, None, []), [Expr(Call(Name('Output', Load(), lineno=67, col_offset=8), [Str('PyObject *%s__object = NULL;', lineno=67, col_offset=15), Name('name', Load(), lineno=67, col_offset=47)], [], None, None, lineno=67, col_offset=8), lineno=67, col_offset=8), Expr(Call(Name('Output', Load(), lineno=68, col_offset=8), [Str('FSCatalogInfoBitmap %s__bitmap = 0;', lineno=68, col_offset=15), Name('name', Load(), lineno=68, col_offset=54)], [], None, None, lineno=68, col_offset=8), lineno=68, col_offset=8), Expr(Call(Name('Output', Load(), lineno=69, col_offset=8), [Str('FSCatalogInfo %s;', lineno=69, col_offset=15), Name('name', Load(), lineno=69, col_offset=36)], [], None, None, lineno=69, col_offset=8), lineno=69, col_offset=8)], [], lineno=66, col_offset=4), FunctionDef('getargsFormat', arguments([Name('self', Param(), lineno=71, col_offset=22)], None, None, []), [Return(Str('lO', lineno=72, col_offset=15), lineno=72, col_offset=8)], [], lineno=71, col_offset=4), FunctionDef('getargsArgs', arguments([Name('self', Param(), lineno=74, col_offset=20), Name('name', Param(), lineno=74, col_offset=26)], None, None, []), [Return(BinOp(Str('%s__bitmap, %s__object', lineno=75, col_offset=15), Mod(), Tuple([Name('name', Load(), lineno=75, col_offset=41), Name('name', Load(), lineno=75, col_offset=47)], Load(), lineno=75, col_offset=41), lineno=75, col_offset=15), lineno=75, col_offset=8)], [], lineno=74, col_offset=4), FunctionDef('getargsCheck', arguments([Name('self', Param(), lineno=77, col_offset=21), Name('name', Param(), lineno=77, col_offset=27)], None, None, []), [Expr(Call(Name('Output', Load(), lineno=78, col_offset=8), [Str('if (!convert_FSCatalogInfo(%s__object, %s__bitmap, &%s)) return NULL;', lineno=78, col_offset=15), Name('name', Load(), lineno=78, col_offset=88), Name('name', Load(), lineno=78, col_offset=94), Name('name', Load(), lineno=78, col_offset=100)], [], None, None, lineno=78, col_offset=8), lineno=78, col_offset=8)], [], lineno=77, col_offset=4), FunctionDef('passInput', arguments([Name('self', Param(), lineno=80, col_offset=18), Name('name', Param(), lineno=80, col_offset=24)], None, None, []), [Return(BinOp(Str('%s__bitmap, &%s', lineno=81, col_offset=15), Mod(), Tuple([Name('name', Load(), lineno=81, col_offset=35), Name('name', Load(), lineno=81, col_offset=41)], Load(), lineno=81, col_offset=35), lineno=81, col_offset=15), lineno=81, col_offset=8)], [], lineno=80, col_offset=4), FunctionDef('passOutput', arguments([Name('self', Param(), lineno=83, col_offset=19), Name('name', Param(), lineno=83, col_offset=25)], None, None, []), [Return(BinOp(Str('%s__bitmap, &%s', lineno=84, col_offset=15), Mod(), Tuple([Name('name', Load(), lineno=84, col_offset=35), Name('name', Load(), lineno=84, col_offset=41)], Load(), lineno=84, col_offset=35), lineno=84, col_offset=15), lineno=84, col_offset=8)], [], lineno=83, col_offset=4), FunctionDef('mkvalueFormat', arguments([Name('self', Param(), lineno=86, col_offset=22)], None, None, []), [Return(Str('O', lineno=87, col_offset=15), lineno=87, col_offset=8)], [], lineno=86, col_offset=4), FunctionDef('mkvalueArgs', arguments([Name('self', Param(), lineno=89, col_offset=20), Name('name', Param(), lineno=89, col_offset=26)], None, None, []), [Return(BinOp(Str('%s__object', lineno=90, col_offset=15), Mod(), Name('name', Load(), lineno=90, col_offset=31), lineno=90, col_offset=15), lineno=90, col_offset=8)], [], lineno=89, col_offset=4), FunctionDef('xxxxmkvalueCheck', arguments([Name('self', Param(), lineno=92, col_offset=25), Name('name', Param(), lineno=92, col_offset=31)], None, None, []), [Expr(Call(Name('Output', Load(), lineno=93, col_offset=8), [Str('if ((%s__object = new_FSCatalogInfo(%s__bitmap, &%s)) == NULL) return NULL;', lineno=93, col_offset=15), Name('name', Load(), lineno=93, col_offset=94), Name('name', Load(), lineno=93, col_offset=100)], [], None, None, lineno=93, col_offset=8), lineno=93, col_offset=8)], [], lineno=92, col_offset=4)], [], lineno=61, col_offset=0), ClassDef('FSCatalogInfoAndBitmap_inType', [Name('FSCatalogInfoAndBitmapType', Load(), lineno=95, col_offset=36), Name('InputOnlyMixIn', Load(), lineno=95, col_offset=64)], [FunctionDef('xxxxmkvalueCheck', arguments([Name('self', Param(), lineno=97, col_offset=25), Name('name', Param(), lineno=97, col_offset=31)], None, None, []), [Pass( lineno=98, col_offset=8)], [], lineno=97, col_offset=4)], [], lineno=95, col_offset=0), ClassDef('FSCatalogInfoAndBitmap_outType', [Name('FSCatalogInfoAndBitmapType', Load(), lineno=100, col_offset=37)], [FunctionDef('getargsFormat', arguments([Name('self', Param(), lineno=102, col_offset=22)], None, None, []), [Return(Str('l', lineno=103, col_offset=15), lineno=103, col_offset=8)], [], lineno=102, col_offset=4), FunctionDef('getargsArgs', arguments([Name('self', Param(), lineno=105, col_offset=20), Name('name', Param(), lineno=105, col_offset=26)], None, None, []), [Return(BinOp(Str('%s__bitmap', lineno=106, col_offset=15), Mod(), Name('name', Load(), lineno=106, col_offset=30), lineno=106, col_offset=15), lineno=106, col_offset=8)], [], lineno=105, col_offset=4), FunctionDef('getargsCheck', arguments([Name('self', Param(), lineno=108, col_offset=21), Name('name', Param(), lineno=108, col_offset=27)], None, None, []), [Pass( lineno=109, col_offset=8)], [], lineno=108, col_offset=4)], [], lineno=100, col_offset=0), Assign([Name('FInfo', Store(), lineno=111, col_offset=0)], Call(Name('OpaqueType', Load(), lineno=111, col_offset=8), [Str('FInfo', lineno=111, col_offset=19), Str('FInfo', lineno=111, col_offset=28)], [], None, None, lineno=111, col_offset=8), lineno=111, col_offset=0), Assign([Name('FInfo_ptr', Store(), lineno=112, col_offset=0)], Call(Name('OpaqueType', Load(), lineno=112, col_offset=12), [Str('FInfo', lineno=112, col_offset=23), Str('FInfo', lineno=112, col_offset=32)], [], None, None, lineno=112, col_offset=12), lineno=112, col_offset=0), Assign([Name('AliasHandle', Store(), lineno=113, col_offset=0)], Call(Name('OpaqueByValueType', Load(), lineno=113, col_offset=14), [Str('AliasHandle', lineno=113, col_offset=32), Str('Alias', lineno=113, col_offset=47)], [], None, None, lineno=113, col_offset=14), lineno=113, col_offset=0), Assign([Name('FSSpec', Store(), lineno=114, col_offset=0)], Call(Name('OpaqueType', Load(), lineno=114, col_offset=9), [Str('FSSpec', lineno=114, col_offset=20), Str('FSSpec', lineno=114, col_offset=30)], [], None, None, lineno=114, col_offset=9), lineno=114, col_offset=0), Assign([Name('FSSpec_ptr', Store(), lineno=115, col_offset=0)], Call(Name('OpaqueType', Load(), lineno=115, col_offset=13), [Str('FSSpec', lineno=115, col_offset=24), Str('FSSpec', lineno=115, col_offset=34)], [], None, None, lineno=115, col_offset=13), lineno=115, col_offset=0), Assign([Name('OptFSSpecPtr', Store(), lineno=116, col_offset=0)], Call(Name('OptionalFSxxxType', Load(), lineno=116, col_offset=15), [Str('FSSpec', lineno=116, col_offset=33), Str('BUG', lineno=116, col_offset=43), Str('myPyMac_GetOptFSSpecPtr', lineno=116, col_offset=50)], [], None, None, lineno=116, col_offset=15), lineno=116, col_offset=0), Assign([Name('FSRef', Store(), lineno=117, col_offset=0)], Call(Name('OpaqueType', Load(), lineno=117, col_offset=8), [Str('FSRef', lineno=117, col_offset=19), Str('FSRef', lineno=117, col_offset=28)], [], None, None, lineno=117, col_offset=8), lineno=117, col_offset=0), Assign([Name('FSRef_ptr', Store(), lineno=118, col_offset=0)], Call(Name('OpaqueType', Load(), lineno=118, col_offset=12), [Str('FSRef', lineno=118, col_offset=23), Str('FSRef', lineno=118, col_offset=32)], [], None, None, lineno=118, col_offset=12), lineno=118, col_offset=0), Assign([Name('OptFSRefPtr', Store(), lineno=119, col_offset=0)], Call(Name('OptionalFSxxxType', Load(), lineno=119, col_offset=14), [Str('FSRef', lineno=119, col_offset=32), Str('BUG', lineno=119, col_offset=41), Str('myPyMac_GetOptFSRefPtr', lineno=119, col_offset=48)], [], None, None, lineno=119, col_offset=14), lineno=119, col_offset=0), Assign([Name('FSCatalogInfo', Store(), lineno=120, col_offset=0)], Call(Name('OpaqueType', Load(), lineno=120, col_offset=16), [Str('FSCatalogInfo', lineno=120, col_offset=27), Str('FSCatalogInfo', lineno=120, col_offset=44)], [], None, None, lineno=120, col_offset=16), lineno=120, col_offset=0), Assign([Name('FSCatalogInfo_ptr', Store(), lineno=121, col_offset=0)], Call(Name('OpaqueType', Load(), lineno=121, col_offset=20), [Str('FSCatalogInfo', lineno=121, col_offset=31), Str('FSCatalogInfo', lineno=121, col_offset=48)], [], None, None, lineno=121, col_offset=20), lineno=121, col_offset=0), Assign([Name('includestuff', Store(), lineno=131, col_offset=0)], BinOp(Name('includestuff', Load(), lineno=131, col_offset=15), Add(), Str('\n#include <Carbon/Carbon.h>\n\n#ifdef USE_TOOLBOX_OBJECT_GLUE\nextern int _PyMac_GetFSSpec(PyObject *v, FSSpec *spec);\nextern int _PyMac_GetFSRef(PyObject *v, FSRef *fsr);\nextern PyObject *_PyMac_BuildFSSpec(FSSpec *spec);\nextern PyObject *_PyMac_BuildFSRef(FSRef *spec);\n\n#define PyMac_GetFSSpec _PyMac_GetFSSpec\n#define PyMac_GetFSRef _PyMac_GetFSRef\n#define PyMac_BuildFSSpec _PyMac_BuildFSSpec\n#define PyMac_BuildFSRef _PyMac_BuildFSRef\n#else\nextern int PyMac_GetFSSpec(PyObject *v, FSSpec *spec);\nextern int PyMac_GetFSRef(PyObject *v, FSRef *fsr);\nextern PyObject *PyMac_BuildFSSpec(FSSpec *spec);\nextern PyObject *PyMac_BuildFSRef(FSRef *spec);\n#endif\n\n/* Forward declarations */\nstatic PyObject *FInfo_New(FInfo *itself);\nstatic PyObject *FSRef_New(FSRef *itself);\nstatic PyObject *FSSpec_New(FSSpec *itself);\nstatic PyObject *Alias_New(AliasHandle itself);\nstatic int FInfo_Convert(PyObject *v, FInfo *p_itself);\n#define FSRef_Convert PyMac_GetFSRef\n#define FSSpec_Convert PyMac_GetFSSpec\nstatic int Alias_Convert(PyObject *v, AliasHandle *p_itself);\n\n/*\n** UTCDateTime records\n*/\nstatic int\nUTCDateTime_Convert(PyObject *v, UTCDateTime *ptr)\n{\n        return PyArg_Parse(v, "(HlH)", &ptr->highSeconds, &ptr->lowSeconds, &ptr->fraction);\n}\n\nstatic PyObject *\nUTCDateTime_New(UTCDateTime *ptr)\n{\n        return Py_BuildValue("(HlH)", ptr->highSeconds, ptr->lowSeconds, ptr->fraction);\n}\n\n/*\n** Optional fsspec and fsref pointers. None will pass NULL\n*/\nstatic int\nmyPyMac_GetOptFSSpecPtr(PyObject *v, FSSpec **spec)\n{\n        if (v == Py_None) {\n                *spec = NULL;\n                return 1;\n        }\n        return PyMac_GetFSSpec(v, *spec);\n}\n\nstatic int\nmyPyMac_GetOptFSRefPtr(PyObject *v, FSRef **ref)\n{\n        if (v == Py_None) {\n                *ref = NULL;\n                return 1;\n        }\n        return PyMac_GetFSRef(v, *ref);\n}\n\n/*\n** Parse/generate objsect\n*/\nstatic PyObject *\nPyMac_BuildHFSUniStr255(HFSUniStr255 *itself)\n{\n\n        return Py_BuildValue("u#", itself->unicode, itself->length);\n}\n\n#ifndef __LP64__\n/*\n** Get pathname for a given FSSpec\n*/\nstatic OSErr\n_PyMac_GetFullPathname(FSSpec *fss, char *path, int len)\n{\n        FSRef fsr;\n        OSErr err;\n\n        *path = \'\x00\';\n        err = FSpMakeFSRef(fss, &fsr);\n        if (err == fnfErr) {\n                /* FSSpecs can point to non-existing files, fsrefs can\'t. */\n                FSSpec fss2;\n                int tocopy;\n\n                err = FSMakeFSSpec(fss->vRefNum, fss->parID, "", &fss2);\n                if (err)\n                        return err;\n                err = FSpMakeFSRef(&fss2, &fsr);\n                if (err)\n                        return err;\n                err = (OSErr)FSRefMakePath(&fsr, path, len-1);\n                if (err)\n                        return err;\n                /* This part is not 100% safe: we append the filename part, but\n                ** I\'m not sure that we don\'t run afoul of the various 8bit\n                ** encodings here. Will have to look this up at some point...\n                */\n                strcat(path, "/");\n                tocopy = fss->name[0];\n                if ((strlen(path) + tocopy) >= len)\n                        tocopy = len - strlen(path) - 1;\n                if (tocopy > 0)\n                        strncat(path, fss->name+1, tocopy);\n        }\n        else {\n                if (err)\n                        return err;\n                err = (OSErr)FSRefMakePath(&fsr, path, len);\n                if (err)\n                        return err;\n        }\n        return 0;\n}\n#endif /* !__LP64__ */\n\n', lineno=257, col_offset=-1), lineno=131, col_offset=15), lineno=131, col_offset=0), Assign([Name('finalstuff', Store(), lineno=259, col_offset=0)], BinOp(Name('finalstuff', Load(), lineno=259, col_offset=13), Add(), Str('\n\n#ifndef __LP64__\nint\nPyMac_GetFSSpec(PyObject *v, FSSpec *spec)\n{\n        Str255 path;\n        short refnum;\n        long parid;\n        OSErr err;\n        FSRef fsr;\n\n        if (FSSpec_Check(v)) {\n                *spec = ((FSSpecObject *)v)->ob_itself;\n                return 1;\n        }\n\n        if (PyArg_Parse(v, "(hlO&)",\n                                                &refnum, &parid, PyMac_GetStr255, &path)) {\n                err = FSMakeFSSpec(refnum, parid, path, spec);\n                if ( err && err != fnfErr ) {\n                        PyMac_Error(err);\n                        return 0;\n                }\n                return 1;\n        }\n        PyErr_Clear();\n        /* Otherwise we try to go via an FSRef. On OSX we go all the way,\n        ** on OS9 we accept only a real FSRef object\n        */\n        if ( PyMac_GetFSRef(v, &fsr) ) {\n                err = FSGetCatalogInfo(&fsr, kFSCatInfoNone, NULL, NULL, spec, NULL);\n                if (err != noErr) {\n                        PyMac_Error(err);\n                        return 0;\n                }\n                return 1;\n        }\n        return 0;\n}\n\n#endif /* !__LP64__ */\n\nint\nPyMac_GetFSRef(PyObject *v, FSRef *fsr)\n{\n        OSStatus err;\n        FSSpec fss;\n\n        if (FSRef_Check(v)) {\n                *fsr = ((FSRefObject *)v)->ob_itself;\n                return 1;\n        }\n\n        /* On OSX we now try a pathname */\n        if ( PyString_Check(v) || PyUnicode_Check(v)) {\n                char *path = NULL;\n                if (!PyArg_Parse(v, "et", Py_FileSystemDefaultEncoding, &path))\n                        return 0;\n                if ( (err=FSPathMakeRef(path, fsr, NULL)) )\n                        PyMac_Error(err);\n                PyMem_Free(path);\n                return !err;\n        }\n        /* XXXX Should try unicode here too */\n        /* Otherwise we try to go via an FSSpec */\n#ifndef __LP64__\n        if (FSSpec_Check(v)) {\n                fss = ((FSSpecObject *)v)->ob_itself;\n                if ((err=FSpMakeFSRef(&fss, fsr)) == 0)\n                        return 1;\n                PyMac_Error(err);\n                return 0;\n        }\n        PyErr_SetString(PyExc_TypeError, "FSRef, FSSpec or pathname required");\n#else /* __LP64__ */\n        PyErr_SetString(PyExc_TypeError, "FSRef or pathname required");\n#endif /* __LP64__ */\n        return 0;\n}\n\n#ifndef __LP64__\nextern PyObject *\nPyMac_BuildFSSpec(FSSpec *spec)\n{\n        return FSSpec_New(spec);\n}\n#endif /* __LP64__ */\n\nextern PyObject *\nPyMac_BuildFSRef(FSRef *spec)\n{\n        return FSRef_New(spec);\n}\n', lineno=353, col_offset=-1), lineno=259, col_offset=13), lineno=259, col_offset=0), Assign([Name('initstuff', Store(), lineno=355, col_offset=0)], BinOp(Name('initstuff', Load(), lineno=355, col_offset=12), Add(), Str('\n#ifndef __LP64__\nPyMac_INIT_TOOLBOX_OBJECT_NEW(FSSpec *, PyMac_BuildFSSpec);\nPyMac_INIT_TOOLBOX_OBJECT_CONVERT(FSSpec, PyMac_GetFSSpec);\n#endif /* !__LP64__*/\nPyMac_INIT_TOOLBOX_OBJECT_NEW(FSRef *, PyMac_BuildFSRef);\nPyMac_INIT_TOOLBOX_OBJECT_CONVERT(FSRef, PyMac_GetFSRef);\n', lineno=362, col_offset=-1), lineno=355, col_offset=12), lineno=355, col_offset=0), Expr(Call(Name('execfile', Load(), lineno=364, col_offset=0), [BinOp(Call(Attribute(Name('string', Load(), lineno=364, col_offset=9), 'lower', Load(), lineno=364, col_offset=9), [Name('MODPREFIX', Load(), lineno=364, col_offset=22)], [], None, None, lineno=364, col_offset=9), Add(), Str('typetest.py', lineno=364, col_offset=35), lineno=364, col_offset=9)], [], None, None, lineno=364, col_offset=0), lineno=364, col_offset=0), ClassDef('FSCatalogInfoDefinition', [Name('PEP253Mixin', Load(), lineno=367, col_offset=30), Name('ObjectDefinition', Load(), lineno=367, col_offset=43)], [Assign([Name('getsetlist', Store(), lineno=368, col_offset=4)], List([Tuple([Str('nodeFlags', lineno=369, col_offset=13), Str('return Py_BuildValue("H", self->ob_itself.nodeFlags);', lineno=370, col_offset=13), Str('return PyArg_Parse(v, "H", &self->ob_itself.nodeFlags)-1;', lineno=371, col_offset=13), Name('None', Load(), lineno=372, col_offset=13)], Load(), lineno=369, col_offset=13), Tuple([Str('volume', lineno=374, col_offset=13), Str('return Py_BuildValue("h", self->ob_itself.volume);', lineno=375, col_offset=13), Str('return PyArg_Parse(v, "h", &self->ob_itself.volume)-1;', lineno=376, col_offset=13), Name('None', Load(), lineno=377, col_offset=13)], Load(), lineno=374, col_offset=13), Tuple([Str('parentDirID', lineno=379, col_offset=13), Str('return Py_BuildValue("l", self->ob_itself.parentDirID);', lineno=380, col_offset=13), Str('return PyArg_Parse(v, "l", &self->ob_itself.parentDirID)-1;', lineno=381, col_offset=13), Name('None', Load(), lineno=382, col_offset=13)], Load(), lineno=379, col_offset=13), Tuple([Str('nodeID', lineno=384, col_offset=13), Str('return Py_BuildValue("l", self->ob_itself.nodeID);', lineno=385, col_offset=13), Str('return PyArg_Parse(v, "l", &self->ob_itself.nodeID)-1;', lineno=386, col_offset=13), Name('None', Load(), lineno=387, col_offset=13)], Load(), lineno=384, col_offset=13), Tuple([Str('createDate', lineno=389, col_offset=13), Str('return Py_BuildValue("O&", UTCDateTime_New, &self->ob_itself.createDate);', lineno=390, col_offset=13), Str('return PyArg_Parse(v, "O&", UTCDateTime_Convert, &self->ob_itself.createDate)-1;', lineno=391, col_offset=13), Name('None', Load(), lineno=392, col_offset=13)], Load(), lineno=389, col_offset=13), Tuple([Str('contentModDate', lineno=394, col_offset=13), Str('return Py_BuildValue("O&", UTCDateTime_New, &self->ob_itself.contentModDate);', lineno=395, col_offset=13), Str('return PyArg_Parse(v, "O&", UTCDateTime_Convert, &self->ob_itself.contentModDate)-1;', lineno=396, col_offset=13), Name('None', Load(), lineno=397, col_offset=13)], Load(), lineno=394, col_offset=13), Tuple([Str('attributeModDate', lineno=399, col_offset=13), Str('return Py_BuildValue("O&", UTCDateTime_New, &self->ob_itself.attributeModDate);', lineno=400, col_offset=13), Str('return PyArg_Parse(v, "O&", UTCDateTime_Convert, &self->ob_itself.attributeModDate)-1;', lineno=401, col_offset=13), Name('None', Load(), lineno=402, col_offset=13)], Load(), lineno=399, col_offset=13), Tuple([Str('accessDate', lineno=404, col_offset=13), Str('return Py_BuildValue("O&", UTCDateTime_New, &self->ob_itself.accessDate);', lineno=405, col_offset=13), Str('return PyArg_Parse(v, "O&", UTCDateTime_Convert, &self->ob_itself.accessDate)-1;', lineno=406, col_offset=13), Name('None', Load(), lineno=407, col_offset=13)], Load(), lineno=404, col_offset=13), Tuple([Str('backupDate', lineno=409, col_offset=13), Str('return Py_BuildValue("O&", UTCDateTime_New, &self->ob_itself.backupDate);', lineno=410, col_offset=13), Str('return PyArg_Parse(v, "O&", UTCDateTime_Convert, &self->ob_itself.backupDate)-1;', lineno=411, col_offset=13), Name('None', Load(), lineno=412, col_offset=13)], Load(), lineno=409, col_offset=13), Tuple([Str('permissions', lineno=414, col_offset=13), Str('return Py_BuildValue("(llll)", self->ob_itself.permissions[0], self->ob_itself.permissions[1], self->ob_itself.permissions[2], self->ob_itself.permissions[3]);', lineno=415, col_offset=13), Str('return PyArg_Parse(v, "(llll)", &self->ob_itself.permissions[0], &self->ob_itself.permissions[1], &self->ob_itself.permissions[2], &self->ob_itself.permissions[3])-1;', lineno=416, col_offset=13), Name('None', Load(), lineno=417, col_offset=13)], Load(), lineno=414, col_offset=13), Tuple([Str('valence', lineno=421, col_offset=13), Str('return Py_BuildValue("l", self->ob_itself.valence);', lineno=422, col_offset=13), Str('return PyArg_Parse(v, "l", &self->ob_itself.valence)-1;', lineno=423, col_offset=13), Name('None', Load(), lineno=424, col_offset=13)], Load(), lineno=421, col_offset=13), Tuple([Str('dataLogicalSize', lineno=426, col_offset=13), Str('return Py_BuildValue("l", self->ob_itself.dataLogicalSize);', lineno=427, col_offset=13), Str('return PyArg_Parse(v, "l", &self->ob_itself.dataLogicalSize)-1;', lineno=428, col_offset=13), Name('None', Load(), lineno=429, col_offset=13)], Load(), lineno=426, col_offset=13), Tuple([Str('dataPhysicalSize', lineno=431, col_offset=13), Str('return Py_BuildValue("l", self->ob_itself.dataPhysicalSize);', lineno=432, col_offset=13), Str('return PyArg_Parse(v, "l", &self->ob_itself.dataPhysicalSize)-1;', lineno=433, col_offset=13), Name('None', Load(), lineno=434, col_offset=13)], Load(), lineno=431, col_offset=13), Tuple([Str('rsrcLogicalSize', lineno=436, col_offset=13), Str('return Py_BuildValue("l", self->ob_itself.rsrcLogicalSize);', lineno=437, col_offset=13), Str('return PyArg_Parse(v, "l", &self->ob_itself.rsrcLogicalSize)-1;', lineno=438, col_offset=13), Name('None', Load(), lineno=439, col_offset=13)], Load(), lineno=436, col_offset=13), Tuple([Str('rsrcPhysicalSize', lineno=441, col_offset=13), Str('return Py_BuildValue("l", self->ob_itself.rsrcPhysicalSize);', lineno=442, col_offset=13), Str('return PyArg_Parse(v, "l", &self->ob_itself.rsrcPhysicalSize)-1;', lineno=443, col_offset=13), Name('None', Load(), lineno=444, col_offset=13)], Load(), lineno=441, col_offset=13), Tuple([Str('sharingFlags', lineno=446, col_offset=13), Str('return Py_BuildValue("l", self->ob_itself.sharingFlags);', lineno=447, col_offset=13), Str('return PyArg_Parse(v, "l", &self->ob_itself.sharingFlags)-1;', lineno=448, col_offset=13), Name('None', Load(), lineno=449, col_offset=13)], Load(), lineno=446, col_offset=13), Tuple([Str('userPrivileges', lineno=451, col_offset=13), Str('return Py_BuildValue("b", self->ob_itself.userPrivileges);', lineno=452, col_offset=13), Str('return PyArg_Parse(v, "b", &self->ob_itself.userPrivileges)-1;', lineno=453, col_offset=13), Name('None', Load(), lineno=454, col_offset=13)], Load(), lineno=451, col_offset=13)], Load(), lineno=368, col_offset=17), lineno=368, col_offset=4), Assign([Name('INITFORMAT', Store(), lineno=458, col_offset=4)], Str('HhllO&O&O&O&O&llllllb', lineno=458, col_offset=17), lineno=458, col_offset=4), Assign([Name('INITARGS', Store(), lineno=459, col_offset=4)], Str('&((FSCatalogInfoObject *)_self)->ob_itself.nodeFlags,\n            &((FSCatalogInfoObject *)_self)->ob_itself.volume,\n            &((FSCatalogInfoObject *)_self)->ob_itself.parentDirID,\n            &((FSCatalogInfoObject *)_self)->ob_itself.nodeID,\n            UTCDateTime_Convert, &((FSCatalogInfoObject *)_self)->ob_itself.createDate,\n            UTCDateTime_Convert, &((FSCatalogInfoObject *)_self)->ob_itself.contentModDate,\n            UTCDateTime_Convert, &((FSCatalogInfoObject *)_self)->ob_itself.attributeModDate,\n            UTCDateTime_Convert, &((FSCatalogInfoObject *)_self)->ob_itself.accessDate,\n            UTCDateTime_Convert, &((FSCatalogInfoObject *)_self)->ob_itself.backupDate,\n            &((FSCatalogInfoObject *)_self)->ob_itself.valence,\n            &((FSCatalogInfoObject *)_self)->ob_itself.dataLogicalSize,\n            &((FSCatalogInfoObject *)_self)->ob_itself.dataPhysicalSize,\n            &((FSCatalogInfoObject *)_self)->ob_itself.rsrcLogicalSize,\n            &((FSCatalogInfoObject *)_self)->ob_itself.rsrcPhysicalSize,\n            &((FSCatalogInfoObject *)_self)->ob_itself.sharingFlags,\n            &((FSCatalogInfoObject *)_self)->ob_itself.userPrivileges', lineno=474, col_offset=-1), lineno=459, col_offset=4), Assign([Name('INITNAMES', Store(), lineno=475, col_offset=4)], Str('\n            "nodeFlags",\n            "volume",\n            "parentDirID",\n            "nodeID",\n            "createDate",\n            "contentModDate",\n            "atributeModDate",\n            "accessDate",\n            "backupDate",\n            "valence",\n            "dataLogicalSize",\n            "dataPhysicalSize",\n            "rsrcLogicalSize",\n            "rsrcPhysicalSize",\n            "sharingFlags",\n            "userPrivileges"\n            ', lineno=492, col_offset=-1), lineno=475, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=494, col_offset=17), Name('name', Param(), lineno=494, col_offset=23), Name('prefix', Param(), lineno=494, col_offset=29), Name('itselftype', Param(), lineno=494, col_offset=37)], None, None, []), [Expr(Call(Attribute(Name('ObjectDefinition', Load(), lineno=495, col_offset=8), '__init__', Load(), lineno=495, col_offset=8), [Name('self', Load(), lineno=495, col_offset=34), Name('name', Load(), lineno=495, col_offset=40), Name('prefix', Load(), lineno=495, col_offset=46), Name('itselftype', Load(), lineno=495, col_offset=54)], [], None, None, lineno=495, col_offset=8), lineno=495, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=496, col_offset=8), 'argref', Store(), lineno=496, col_offset=8)], Str('*', lineno=496, col_offset=22), lineno=496, col_offset=8)], [], lineno=494, col_offset=4), FunctionDef('outputCheckNewArg', arguments([Name('self', Param(), lineno=498, col_offset=26)], None, None, []), [Expr(Call(Name('Output', Load(), lineno=499, col_offset=8), [Str('if (itself == NULL) { Py_INCREF(Py_None); return Py_None; }', lineno=499, col_offset=15)], [], None, None, lineno=499, col_offset=8), lineno=499, col_offset=8)], [], lineno=498, col_offset=4), FunctionDef('output_tp_newBody', arguments([Name('self', Param(), lineno=501, col_offset=26)], None, None, []), [Expr(Call(Name('Output', Load(), lineno=502, col_offset=8), [Str('PyObject *self;', lineno=502, col_offset=15)], [], None, None, lineno=502, col_offset=8), lineno=502, col_offset=8), Expr(Call(Name('Output', Load(), lineno=503, col_offset=8), [], [], None, None, lineno=503, col_offset=8), lineno=503, col_offset=8), Expr(Call(Name('Output', Load(), lineno=504, col_offset=8), [Str('if ((self = type->tp_alloc(type, 0)) == NULL) return NULL;', lineno=504, col_offset=15)], [], None, None, lineno=504, col_offset=8), lineno=504, col_offset=8), Expr(Call(Name('Output', Load(), lineno=505, col_offset=8), [Str('memset(&((%s *)self)->ob_itself, 0, sizeof(%s));', lineno=505, col_offset=15), Attribute(Name('self', Load(), lineno=506, col_offset=16), 'objecttype', Load(), lineno=506, col_offset=16), Attribute(Name('self', Load(), lineno=506, col_offset=33), 'itselftype', Load(), lineno=506, col_offset=33)], [], None, None, lineno=505, col_offset=8), lineno=505, col_offset=8), Expr(Call(Name('Output', Load(), lineno=507, col_offset=8), [Str('return self;', lineno=507, col_offset=15)], [], None, None, lineno=507, col_offset=8), lineno=507, col_offset=8)], [], lineno=501, col_offset=4), FunctionDef('output_tp_initBody', arguments([Name('self', Param(), lineno=509, col_offset=27)], None, None, []), [Expr(Call(Name('Output', Load(), lineno=510, col_offset=8), [Str('static char *kw[] = {%s, 0};', lineno=510, col_offset=15), Attribute(Name('self', Load(), lineno=510, col_offset=47), 'INITNAMES', Load(), lineno=510, col_offset=47)], [], None, None, lineno=510, col_offset=8), lineno=510, col_offset=8), Expr(Call(Name('Output', Load(), lineno=511, col_offset=8), [], [], None, None, lineno=511, col_offset=8), lineno=511, col_offset=8), Expr(Call(Name('Output', Load(), lineno=512, col_offset=8), [Str('if (!PyArg_ParseTupleAndKeywords(_args, _kwds, "|%s", kw, %s))', lineno=512, col_offset=15), Attribute(Name('self', Load(), lineno=513, col_offset=16), 'INITFORMAT', Load(), lineno=513, col_offset=16), Attribute(Name('self', Load(), lineno=513, col_offset=33), 'INITARGS', Load(), lineno=513, col_offset=33)], [], None, None, lineno=512, col_offset=8), lineno=512, col_offset=8), Expr(Call(Name('OutLbrace', Load(), lineno=514, col_offset=8), [], [], None, None, lineno=514, col_offset=8), lineno=514, col_offset=8), Expr(Call(Name('Output', Load(), lineno=515, col_offset=8), [Str('return -1;', lineno=515, col_offset=15)], [], None, None, lineno=515, col_offset=8), lineno=515, col_offset=8), Expr(Call(Name('OutRbrace', Load(), lineno=516, col_offset=8), [], [], None, None, lineno=516, col_offset=8), lineno=516, col_offset=8), Expr(Call(Name('Output', Load(), lineno=517, col_offset=8), [Str('return 0;', lineno=517, col_offset=15)], [], None, None, lineno=517, col_offset=8), lineno=517, col_offset=8)], [], lineno=509, col_offset=4)], [], lineno=367, col_offset=0), ClassDef('FInfoDefinition', [Name('PEP253Mixin', Load(), lineno=519, col_offset=22), Name('ObjectDefinition', Load(), lineno=519, col_offset=35)], [Assign([Name('getsetlist', Store(), lineno=520, col_offset=4)], List([Tuple([Str('Type', lineno=521, col_offset=13), Str('return Py_BuildValue("O&", PyMac_BuildOSType, self->ob_itself.fdType);', lineno=522, col_offset=13), Str('return PyArg_Parse(v, "O&", PyMac_GetOSType, &self->ob_itself.fdType)-1;', lineno=523, col_offset=13), Str('4-char file type', lineno=524, col_offset=13)], Load(), lineno=521, col_offset=13), Tuple([Str('Creator', lineno=526, col_offset=13), Str('return Py_BuildValue("O&", PyMac_BuildOSType, self->ob_itself.fdCreator);', lineno=527, col_offset=13), Str('return PyArg_Parse(v, "O&", PyMac_GetOSType, &self->ob_itself.fdCreator)-1;', lineno=528, col_offset=13), Str('4-char file creator', lineno=529, col_offset=13)], Load(), lineno=526, col_offset=13), Tuple([Str('Flags', lineno=531, col_offset=13), Str('return Py_BuildValue("H", self->ob_itself.fdFlags);', lineno=532, col_offset=13), Str('return PyArg_Parse(v, "H", &self->ob_itself.fdFlags)-1;', lineno=533, col_offset=13), Str('Finder flag bits', lineno=534, col_offset=13)], Load(), lineno=531, col_offset=13), Tuple([Str('Location', lineno=536, col_offset=13), Str('return Py_BuildValue("O&", PyMac_BuildPoint, self->ob_itself.fdLocation);', lineno=537, col_offset=13), Str('return PyArg_Parse(v, "O&", PyMac_GetPoint, &self->ob_itself.fdLocation)-1;', lineno=538, col_offset=13), Str("(x, y) location of the file's icon in its parent finder window", lineno=539, col_offset=13)], Load(), lineno=536, col_offset=13), Tuple([Str('Fldr', lineno=541, col_offset=13), Str('return Py_BuildValue("h", self->ob_itself.fdFldr);', lineno=542, col_offset=13), Str('return PyArg_Parse(v, "h", &self->ob_itself.fdFldr)-1;', lineno=543, col_offset=13), Str("Original folder, for 'put away'", lineno=544, col_offset=13)], Load(), lineno=541, col_offset=13)], Load(), lineno=520, col_offset=17), lineno=520, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=549, col_offset=17), Name('name', Param(), lineno=549, col_offset=23), Name('prefix', Param(), lineno=549, col_offset=29), Name('itselftype', Param(), lineno=549, col_offset=37)], None, None, []), [Expr(Call(Attribute(Name('ObjectDefinition', Load(), lineno=550, col_offset=8), '__init__', Load(), lineno=550, col_offset=8), [Name('self', Load(), lineno=550, col_offset=34), Name('name', Load(), lineno=550, col_offset=40), Name('prefix', Load(), lineno=550, col_offset=46), Name('itselftype', Load(), lineno=550, col_offset=54)], [], None, None, lineno=550, col_offset=8), lineno=550, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=551, col_offset=8), 'argref', Store(), lineno=551, col_offset=8)], Str('*', lineno=551, col_offset=22), lineno=551, col_offset=8)], [], lineno=549, col_offset=4), FunctionDef('outputCheckNewArg', arguments([Name('self', Param(), lineno=553, col_offset=26)], None, None, []), [Expr(Call(Name('Output', Load(), lineno=554, col_offset=8), [Str('if (itself == NULL) return PyMac_Error(resNotFound);', lineno=554, col_offset=15)], [], None, None, lineno=554, col_offset=8), lineno=554, col_offset=8)], [], lineno=553, col_offset=4), FunctionDef('output_tp_newBody', arguments([Name('self', Param(), lineno=556, col_offset=26)], None, None, []), [Expr(Call(Name('Output', Load(), lineno=557, col_offset=8), [Str('PyObject *self;', lineno=557, col_offset=15)], [], None, None, lineno=557, col_offset=8), lineno=557, col_offset=8), Expr(Call(Name('Output', Load(), lineno=558, col_offset=8), [], [], None, None, lineno=558, col_offset=8), lineno=558, col_offset=8), Expr(Call(Name('Output', Load(), lineno=559, col_offset=8), [Str('if ((self = type->tp_alloc(type, 0)) == NULL) return NULL;', lineno=559, col_offset=15)], [], None, None, lineno=559, col_offset=8), lineno=559, col_offset=8), Expr(Call(Name('Output', Load(), lineno=560, col_offset=8), [Str('memset(&((%s *)self)->ob_itself, 0, sizeof(%s));', lineno=560, col_offset=15), Attribute(Name('self', Load(), lineno=561, col_offset=16), 'objecttype', Load(), lineno=561, col_offset=16), Attribute(Name('self', Load(), lineno=561, col_offset=33), 'itselftype', Load(), lineno=561, col_offset=33)], [], None, None, lineno=560, col_offset=8), lineno=560, col_offset=8), Expr(Call(Name('Output', Load(), lineno=562, col_offset=8), [Str('return self;', lineno=562, col_offset=15)], [], None, None, lineno=562, col_offset=8), lineno=562, col_offset=8)], [], lineno=556, col_offset=4), FunctionDef('output_tp_initBody', arguments([Name('self', Param(), lineno=564, col_offset=27)], None, None, []), [Expr(Call(Name('Output', Load(), lineno=565, col_offset=8), [Str('%s *itself = NULL;', lineno=565, col_offset=15), Attribute(Name('self', Load(), lineno=565, col_offset=37), 'itselftype', Load(), lineno=565, col_offset=37)], [], None, None, lineno=565, col_offset=8), lineno=565, col_offset=8), Expr(Call(Name('Output', Load(), lineno=566, col_offset=8), [Str('static char *kw[] = {"itself", 0};', lineno=566, col_offset=15)], [], None, None, lineno=566, col_offset=8), lineno=566, col_offset=8), Expr(Call(Name('Output', Load(), lineno=567, col_offset=8), [], [], None, None, lineno=567, col_offset=8), lineno=567, col_offset=8), Expr(Call(Name('Output', Load(), lineno=568, col_offset=8), [Str('if (PyArg_ParseTupleAndKeywords(_args, _kwds, "|O&", kw, FInfo_Convert, &itself))', lineno=568, col_offset=15)], [], None, None, lineno=568, col_offset=8), lineno=568, col_offset=8), Expr(Call(Name('OutLbrace', Load(), lineno=569, col_offset=8), [], [], None, None, lineno=569, col_offset=8), lineno=569, col_offset=8), Expr(Call(Name('Output', Load(), lineno=570, col_offset=8), [Str('if (itself) memcpy(&((%s *)_self)->ob_itself, itself, sizeof(%s));', lineno=570, col_offset=15), Attribute(Name('self', Load(), lineno=571, col_offset=16), 'objecttype', Load(), lineno=571, col_offset=16), Attribute(Name('self', Load(), lineno=571, col_offset=33), 'itselftype', Load(), lineno=571, col_offset=33)], [], None, None, lineno=570, col_offset=8), lineno=570, col_offset=8), Expr(Call(Name('Output', Load(), lineno=572, col_offset=8), [Str('return 0;', lineno=572, col_offset=15)], [], None, None, lineno=572, col_offset=8), lineno=572, col_offset=8), Expr(Call(Name('OutRbrace', Load(), lineno=573, col_offset=8), [], [], None, None, lineno=573, col_offset=8), lineno=573, col_offset=8), Expr(Call(Name('Output', Load(), lineno=574, col_offset=8), [Str('return -1;', lineno=574, col_offset=15)], [], None, None, lineno=574, col_offset=8), lineno=574, col_offset=8)], [], lineno=564, col_offset=4)], [], lineno=519, col_offset=0), ClassDef('FSSpecDefinition', [Name('PEP253Mixin', Load(), lineno=576, col_offset=23), Name('ObjectDefinition', Load(), lineno=576, col_offset=36)], [Assign([Name('getsetlist', Store(), lineno=577, col_offset=4)], List([Tuple([Str('data', lineno=578, col_offset=13), Str('return PyString_FromStringAndSize((char *)&self->ob_itself, sizeof(self->ob_itself));', lineno=579, col_offset=13), Name('None', Load(), lineno=580, col_offset=13), Str('Raw data of the FSSpec object', lineno=581, col_offset=13)], Load(), lineno=578, col_offset=13)], Load(), lineno=577, col_offset=17), lineno=577, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=585, col_offset=17), Name('name', Param(), lineno=585, col_offset=23), Name('prefix', Param(), lineno=585, col_offset=29), Name('itselftype', Param(), lineno=585, col_offset=37)], None, None, []), [Expr(Call(Attribute(Name('ObjectDefinition', Load(), lineno=586, col_offset=8), '__init__', Load(), lineno=586, col_offset=8), [Name('self', Load(), lineno=586, col_offset=34), Name('name', Load(), lineno=586, col_offset=40), Name('prefix', Load(), lineno=586, col_offset=46), Name('itselftype', Load(), lineno=586, col_offset=54)], [], None, None, lineno=586, col_offset=8), lineno=586, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=587, col_offset=8), 'argref', Store(), lineno=587, col_offset=8)], Str('*', lineno=587, col_offset=22), lineno=587, col_offset=8)], [], lineno=585, col_offset=4), FunctionDef('outputCheckNewArg', arguments([Name('self', Param(), lineno=589, col_offset=26)], None, None, []), [Expr(Call(Name('Output', Load(), lineno=590, col_offset=8), [Str('if (itself == NULL) return PyMac_Error(resNotFound);', lineno=590, col_offset=15)], [], None, None, lineno=590, col_offset=8), lineno=590, col_offset=8)], [], lineno=589, col_offset=4), FunctionDef('outputConvert', arguments([Name('self', Param(), lineno=593, col_offset=22)], None, None, []), [Pass( lineno=594, col_offset=8)], [], lineno=593, col_offset=4), FunctionDef('output_tp_newBody', arguments([Name('self', Param(), lineno=596, col_offset=26)], None, None, []), [Expr(Call(Name('Output', Load(), lineno=597, col_offset=8), [Str('PyObject *self;', lineno=597, col_offset=15)], [], None, None, lineno=597, col_offset=8), lineno=597, col_offset=8), Expr(Call(Name('Output', Load(), lineno=598, col_offset=8), [], [], None, None, lineno=598, col_offset=8), lineno=598, col_offset=8), Expr(Call(Name('Output', Load(), lineno=599, col_offset=8), [Str('if ((self = type->tp_alloc(type, 0)) == NULL) return NULL;', lineno=599, col_offset=15)], [], None, None, lineno=599, col_offset=8), lineno=599, col_offset=8), Expr(Call(Name('Output', Load(), lineno=600, col_offset=8), [Str('memset(&((%s *)self)->ob_itself, 0, sizeof(%s));', lineno=600, col_offset=15), Attribute(Name('self', Load(), lineno=601, col_offset=16), 'objecttype', Load(), lineno=601, col_offset=16), Attribute(Name('self', Load(), lineno=601, col_offset=33), 'itselftype', Load(), lineno=601, col_offset=33)], [], None, None, lineno=600, col_offset=8), lineno=600, col_offset=8), Expr(Call(Name('Output', Load(), lineno=602, col_offset=8), [Str('return self;', lineno=602, col_offset=15)], [], None, None, lineno=602, col_offset=8), lineno=602, col_offset=8)], [], lineno=596, col_offset=4), FunctionDef('output_tp_initBody', arguments([Name('self', Param(), lineno=604, col_offset=27)], None, None, []), [Expr(Call(Name('Output', Load(), lineno=605, col_offset=8), [Str('PyObject *v = NULL;', lineno=605, col_offset=15)], [], None, None, lineno=605, col_offset=8), lineno=605, col_offset=8), Expr(Call(Name('Output', Load(), lineno=606, col_offset=8), [Str('char *rawdata = NULL;', lineno=606, col_offset=15)], [], None, None, lineno=606, col_offset=8), lineno=606, col_offset=8), Expr(Call(Name('Output', Load(), lineno=607, col_offset=8), [Str('int rawdatalen = 0;', lineno=607, col_offset=15)], [], None, None, lineno=607, col_offset=8), lineno=607, col_offset=8), Expr(Call(Name('Output', Load(), lineno=608, col_offset=8), [Str('static char *kw[] = {"itself", "rawdata", 0};', lineno=608, col_offset=15)], [], None, None, lineno=608, col_offset=8), lineno=608, col_offset=8), Expr(Call(Name('Output', Load(), lineno=609, col_offset=8), [], [], None, None, lineno=609, col_offset=8), lineno=609, col_offset=8), Expr(Call(Name('Output', Load(), lineno=610, col_offset=8), [Str('if (!PyArg_ParseTupleAndKeywords(_args, _kwds, "|Os#", kw, &v, &rawdata, &rawdatalen))', lineno=610, col_offset=15)], [], None, None, lineno=610, col_offset=8), lineno=610, col_offset=8), Expr(Call(Name('Output', Load(), lineno=611, col_offset=8), [Str('return -1;', lineno=611, col_offset=15)], [], None, None, lineno=611, col_offset=8), lineno=611, col_offset=8), Expr(Call(Name('Output', Load(), lineno=612, col_offset=8), [Str('if (v && rawdata)', lineno=612, col_offset=15)], [], None, None, lineno=612, col_offset=8), lineno=612, col_offset=8), Expr(Call(Name('OutLbrace', Load(), lineno=613, col_offset=8), [], [], None, None, lineno=613, col_offset=8), lineno=613, col_offset=8), Expr(Call(Name('Output', Load(), lineno=614, col_offset=8), [Str('PyErr_SetString(PyExc_TypeError, "Only one of itself or rawdata may be specified");', lineno=614, col_offset=15)], [], None, None, lineno=614, col_offset=8), lineno=614, col_offset=8), Expr(Call(Name('Output', Load(), lineno=615, col_offset=8), [Str('return -1;', lineno=615, col_offset=15)], [], None, None, lineno=615, col_offset=8), lineno=615, col_offset=8), Expr(Call(Name('OutRbrace', Load(), lineno=616, col_offset=8), [], [], None, None, lineno=616, col_offset=8), lineno=616, col_offset=8), Expr(Call(Name('Output', Load(), lineno=617, col_offset=8), [Str('if (!v && !rawdata)', lineno=617, col_offset=15)], [], None, None, lineno=617, col_offset=8), lineno=617, col_offset=8), Expr(Call(Name('OutLbrace', Load(), lineno=618, col_offset=8), [], [], None, None, lineno=618, col_offset=8), lineno=618, col_offset=8), Expr(Call(Name('Output', Load(), lineno=619, col_offset=8), [Str('PyErr_SetString(PyExc_TypeError, "One of itself or rawdata must be specified");', lineno=619, col_offset=15)], [], None, None, lineno=619, col_offset=8), lineno=619, col_offset=8), Expr(Call(Name('Output', Load(), lineno=620, col_offset=8), [Str('return -1;', lineno=620, col_offset=15)], [], None, None, lineno=620, col_offset=8), lineno=620, col_offset=8), Expr(Call(Name('OutRbrace', Load(), lineno=621, col_offset=8), [], [], None, None, lineno=621, col_offset=8), lineno=621, col_offset=8), Expr(Call(Name('Output', Load(), lineno=622, col_offset=8), [Str('if (rawdata)', lineno=622, col_offset=15)], [], None, None, lineno=622, col_offset=8), lineno=622, col_offset=8), Expr(Call(Name('OutLbrace', Load(), lineno=623, col_offset=8), [], [], None, None, lineno=623, col_offset=8), lineno=623, col_offset=8), Expr(Call(Name('Output', Load(), lineno=624, col_offset=8), [Str('if (rawdatalen != sizeof(%s))', lineno=624, col_offset=15), Attribute(Name('self', Load(), lineno=624, col_offset=48), 'itselftype', Load(), lineno=624, col_offset=48)], [], None, None, lineno=624, col_offset=8), lineno=624, col_offset=8), Expr(Call(Name('OutLbrace', Load(), lineno=625, col_offset=8), [], [], None, None, lineno=625, col_offset=8), lineno=625, col_offset=8), Expr(Call(Name('Output', Load(), lineno=626, col_offset=8), [Str('PyErr_SetString(PyExc_TypeError, "%s rawdata incorrect size");', lineno=626, col_offset=15), Attribute(Name('self', Load(), lineno=627, col_offset=16), 'itselftype', Load(), lineno=627, col_offset=16)], [], None, None, lineno=626, col_offset=8), lineno=626, col_offset=8), Expr(Call(Name('Output', Load(), lineno=628, col_offset=8), [Str('return -1;', lineno=628, col_offset=15)], [], None, None, lineno=628, col_offset=8), lineno=628, col_offset=8), Expr(Call(Name('OutRbrace', Load(), lineno=629, col_offset=8), [], [], None, None, lineno=629, col_offset=8), lineno=629, col_offset=8), Expr(Call(Name('Output', Load(), lineno=630, col_offset=8), [Str('memcpy(&((%s *)_self)->ob_itself, rawdata, rawdatalen);', lineno=630, col_offset=15), Attribute(Name('self', Load(), lineno=630, col_offset=74), 'objecttype', Load(), lineno=630, col_offset=74)], [], None, None, lineno=630, col_offset=8), lineno=630, col_offset=8), Expr(Call(Name('Output', Load(), lineno=631, col_offset=8), [Str('return 0;', lineno=631, col_offset=15)], [], None, None, lineno=631, col_offset=8), lineno=631, col_offset=8), Expr(Call(Name('OutRbrace', Load(), lineno=632, col_offset=8), [], [], None, None, lineno=632, col_offset=8), lineno=632, col_offset=8), Expr(Call(Name('Output', Load(), lineno=633, col_offset=8), [Str('if (PyMac_GetFSSpec(v, &((%s *)_self)->ob_itself)) return 0;', lineno=633, col_offset=15), Attribute(Name('self', Load(), lineno=633, col_offset=79), 'objecttype', Load(), lineno=633, col_offset=79)], [], None, None, lineno=633, col_offset=8), lineno=633, col_offset=8), Expr(Call(Name('Output', Load(), lineno=634, col_offset=8), [Str('return -1;', lineno=634, col_offset=15)], [], None, None, lineno=634, col_offset=8), lineno=634, col_offset=8)], [], lineno=604, col_offset=4), FunctionDef('outputRepr', arguments([Name('self', Param(), lineno=636, col_offset=19)], None, None, []), [Expr(Call(Name('Output', Load(), lineno=637, col_offset=8), [], [], None, None, lineno=637, col_offset=8), lineno=637, col_offset=8), Expr(Call(Name('Output', Load(), lineno=638, col_offset=8), [Str('static PyObject * %s_repr(%s *self)', lineno=638, col_offset=15), Attribute(Name('self', Load(), lineno=638, col_offset=54), 'prefix', Load(), lineno=638, col_offset=54), Attribute(Name('self', Load(), lineno=638, col_offset=67), 'objecttype', Load(), lineno=638, col_offset=67)], [], None, None, lineno=638, col_offset=8), lineno=638, col_offset=8), Expr(Call(Name('OutLbrace', Load(), lineno=639, col_offset=8), [], [], None, None, lineno=639, col_offset=8), lineno=639, col_offset=8), Expr(Call(Name('Output', Load(), lineno=640, col_offset=8), [Str('char buf[512];', lineno=640, col_offset=15)], [], None, None, lineno=640, col_offset=8), lineno=640, col_offset=8), Expr(Call(Name('Output', Load(), lineno=641, col_offset=8), [Str('PyOS_snprintf(buf, sizeof(buf), "%%s((%%d, %%ld, \'%%.*s\'))",\n        self->ob_type->tp_name,\n        self->ob_itself.vRefNum,\n        self->ob_itself.parID,\n        self->ob_itself.name[0], self->ob_itself.name+1);', lineno=645, col_offset=-1)], [], None, None, lineno=641, col_offset=8), lineno=641, col_offset=8), Expr(Call(Name('Output', Load(), lineno=646, col_offset=8), [Str('return PyString_FromString(buf);', lineno=646, col_offset=15)], [], None, None, lineno=646, col_offset=8), lineno=646, col_offset=8), Expr(Call(Name('OutRbrace', Load(), lineno=647, col_offset=8), [], [], None, None, lineno=647, col_offset=8), lineno=647, col_offset=8)], [], lineno=636, col_offset=4)], [], lineno=576, col_offset=0), ClassDef('FSRefDefinition', [Name('PEP253Mixin', Load(), lineno=649, col_offset=22), Name('ObjectDefinition', Load(), lineno=649, col_offset=35)], [Assign([Name('getsetlist', Store(), lineno=650, col_offset=4)], List([Tuple([Str('data', lineno=651, col_offset=13), Str('return PyString_FromStringAndSize((char *)&self->ob_itself, sizeof(self->ob_itself));', lineno=652, col_offset=13), Name('None', Load(), lineno=653, col_offset=13), Str('Raw data of the FSRef object', lineno=654, col_offset=13)], Load(), lineno=651, col_offset=13)], Load(), lineno=650, col_offset=17), lineno=650, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=658, col_offset=17), Name('name', Param(), lineno=658, col_offset=23), Name('prefix', Param(), lineno=658, col_offset=29), Name('itselftype', Param(), lineno=658, col_offset=37)], None, None, []), [Expr(Call(Attribute(Name('ObjectDefinition', Load(), lineno=659, col_offset=8), '__init__', Load(), lineno=659, col_offset=8), [Name('self', Load(), lineno=659, col_offset=34), Name('name', Load(), lineno=659, col_offset=40), Name('prefix', Load(), lineno=659, col_offset=46), Name('itselftype', Load(), lineno=659, col_offset=54)], [], None, None, lineno=659, col_offset=8), lineno=659, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=660, col_offset=8), 'argref', Store(), lineno=660, col_offset=8)], Str('*', lineno=660, col_offset=22), lineno=660, col_offset=8)], [], lineno=658, col_offset=4), FunctionDef('outputCheckNewArg', arguments([Name('self', Param(), lineno=662, col_offset=26)], None, None, []), [Expr(Call(Name('Output', Load(), lineno=663, col_offset=8), [Str('if (itself == NULL) return PyMac_Error(resNotFound);', lineno=663, col_offset=15)], [], None, None, lineno=663, col_offset=8), lineno=663, col_offset=8)], [], lineno=662, col_offset=4), FunctionDef('outputConvert', arguments([Name('self', Param(), lineno=666, col_offset=22)], None, None, []), [Pass( lineno=667, col_offset=8)], [], lineno=666, col_offset=4), FunctionDef('output_tp_newBody', arguments([Name('self', Param(), lineno=669, col_offset=26)], None, None, []), [Expr(Call(Name('Output', Load(), lineno=670, col_offset=8), [Str('PyObject *self;', lineno=670, col_offset=15)], [], None, None, lineno=670, col_offset=8), lineno=670, col_offset=8), Expr(Call(Name('Output', Load(), lineno=671, col_offset=8), [], [], None, None, lineno=671, col_offset=8), lineno=671, col_offset=8), Expr(Call(Name('Output', Load(), lineno=672, col_offset=8), [Str('if ((self = type->tp_alloc(type, 0)) == NULL) return NULL;', lineno=672, col_offset=15)], [], None, None, lineno=672, col_offset=8), lineno=672, col_offset=8), Expr(Call(Name('Output', Load(), lineno=673, col_offset=8), [Str('memset(&((%s *)self)->ob_itself, 0, sizeof(%s));', lineno=673, col_offset=15), Attribute(Name('self', Load(), lineno=674, col_offset=16), 'objecttype', Load(), lineno=674, col_offset=16), Attribute(Name('self', Load(), lineno=674, col_offset=33), 'itselftype', Load(), lineno=674, col_offset=33)], [], None, None, lineno=673, col_offset=8), lineno=673, col_offset=8), Expr(Call(Name('Output', Load(), lineno=675, col_offset=8), [Str('return self;', lineno=675, col_offset=15)], [], None, None, lineno=675, col_offset=8), lineno=675, col_offset=8)], [], lineno=669, col_offset=4), FunctionDef('output_tp_initBody', arguments([Name('self', Param(), lineno=677, col_offset=27)], None, None, []), [Expr(Call(Name('Output', Load(), lineno=678, col_offset=8), [Str('PyObject *v = NULL;', lineno=678, col_offset=15)], [], None, None, lineno=678, col_offset=8), lineno=678, col_offset=8), Expr(Call(Name('Output', Load(), lineno=679, col_offset=8), [Str('char *rawdata = NULL;', lineno=679, col_offset=15)], [], None, None, lineno=679, col_offset=8), lineno=679, col_offset=8), Expr(Call(Name('Output', Load(), lineno=680, col_offset=8), [Str('int rawdatalen = 0;', lineno=680, col_offset=15)], [], None, None, lineno=680, col_offset=8), lineno=680, col_offset=8), Expr(Call(Name('Output', Load(), lineno=681, col_offset=8), [Str('static char *kw[] = {"itself", "rawdata", 0};', lineno=681, col_offset=15)], [], None, None, lineno=681, col_offset=8), lineno=681, col_offset=8), Expr(Call(Name('Output', Load(), lineno=682, col_offset=8), [], [], None, None, lineno=682, col_offset=8), lineno=682, col_offset=8), Expr(Call(Name('Output', Load(), lineno=683, col_offset=8), [Str('if (!PyArg_ParseTupleAndKeywords(_args, _kwds, "|Os#", kw, &v, &rawdata, &rawdatalen))', lineno=683, col_offset=15)], [], None, None, lineno=683, col_offset=8), lineno=683, col_offset=8), Expr(Call(Name('Output', Load(), lineno=684, col_offset=8), [Str('return -1;', lineno=684, col_offset=15)], [], None, None, lineno=684, col_offset=8), lineno=684, col_offset=8), Expr(Call(Name('Output', Load(), lineno=685, col_offset=8), [Str('if (v && rawdata)', lineno=685, col_offset=15)], [], None, None, lineno=685, col_offset=8), lineno=685, col_offset=8), Expr(Call(Name('OutLbrace', Load(), lineno=686, col_offset=8), [], [], None, None, lineno=686, col_offset=8), lineno=686, col_offset=8), Expr(Call(Name('Output', Load(), lineno=687, col_offset=8), [Str('PyErr_SetString(PyExc_TypeError, "Only one of itself or rawdata may be specified");', lineno=687, col_offset=15)], [], None, None, lineno=687, col_offset=8), lineno=687, col_offset=8), Expr(Call(Name('Output', Load(), lineno=688, col_offset=8), [Str('return -1;', lineno=688, col_offset=15)], [], None, None, lineno=688, col_offset=8), lineno=688, col_offset=8), Expr(Call(Name('OutRbrace', Load(), lineno=689, col_offset=8), [], [], None, None, lineno=689, col_offset=8), lineno=689, col_offset=8), Expr(Call(Name('Output', Load(), lineno=690, col_offset=8), [Str('if (!v && !rawdata)', lineno=690, col_offset=15)], [], None, None, lineno=690, col_offset=8), lineno=690, col_offset=8), Expr(Call(Name('OutLbrace', Load(), lineno=691, col_offset=8), [], [], None, None, lineno=691, col_offset=8), lineno=691, col_offset=8), Expr(Call(Name('Output', Load(), lineno=692, col_offset=8), [Str('PyErr_SetString(PyExc_TypeError, "One of itself or rawdata must be specified");', lineno=692, col_offset=15)], [], None, None, lineno=692, col_offset=8), lineno=692, col_offset=8), Expr(Call(Name('Output', Load(), lineno=693, col_offset=8), [Str('return -1;', lineno=693, col_offset=15)], [], None, None, lineno=693, col_offset=8), lineno=693, col_offset=8), Expr(Call(Name('OutRbrace', Load(), lineno=694, col_offset=8), [], [], None, None, lineno=694, col_offset=8), lineno=694, col_offset=8), Expr(Call(Name('Output', Load(), lineno=695, col_offset=8), [Str('if (rawdata)', lineno=695, col_offset=15)], [], None, None, lineno=695, col_offset=8), lineno=695, col_offset=8), Expr(Call(Name('OutLbrace', Load(), lineno=696, col_offset=8), [], [], None, None, lineno=696, col_offset=8), lineno=696, col_offset=8), Expr(Call(Name('Output', Load(), lineno=697, col_offset=8), [Str('if (rawdatalen != sizeof(%s))', lineno=697, col_offset=15), Attribute(Name('self', Load(), lineno=697, col_offset=48), 'itselftype', Load(), lineno=697, col_offset=48)], [], None, None, lineno=697, col_offset=8), lineno=697, col_offset=8), Expr(Call(Name('OutLbrace', Load(), lineno=698, col_offset=8), [], [], None, None, lineno=698, col_offset=8), lineno=698, col_offset=8), Expr(Call(Name('Output', Load(), lineno=699, col_offset=8), [Str('PyErr_SetString(PyExc_TypeError, "%s rawdata incorrect size");', lineno=699, col_offset=15), Attribute(Name('self', Load(), lineno=700, col_offset=16), 'itselftype', Load(), lineno=700, col_offset=16)], [], None, None, lineno=699, col_offset=8), lineno=699, col_offset=8), Expr(Call(Name('Output', Load(), lineno=701, col_offset=8), [Str('return -1;', lineno=701, col_offset=15)], [], None, None, lineno=701, col_offset=8), lineno=701, col_offset=8), Expr(Call(Name('OutRbrace', Load(), lineno=702, col_offset=8), [], [], None, None, lineno=702, col_offset=8), lineno=702, col_offset=8), Expr(Call(Name('Output', Load(), lineno=703, col_offset=8), [Str('memcpy(&((%s *)_self)->ob_itself, rawdata, rawdatalen);', lineno=703, col_offset=15), Attribute(Name('self', Load(), lineno=703, col_offset=74), 'objecttype', Load(), lineno=703, col_offset=74)], [], None, None, lineno=703, col_offset=8), lineno=703, col_offset=8), Expr(Call(Name('Output', Load(), lineno=704, col_offset=8), [Str('return 0;', lineno=704, col_offset=15)], [], None, None, lineno=704, col_offset=8), lineno=704, col_offset=8), Expr(Call(Name('OutRbrace', Load(), lineno=705, col_offset=8), [], [], None, None, lineno=705, col_offset=8), lineno=705, col_offset=8), Expr(Call(Name('Output', Load(), lineno=706, col_offset=8), [Str('if (PyMac_GetFSRef(v, &((%s *)_self)->ob_itself)) return 0;', lineno=706, col_offset=15), Attribute(Name('self', Load(), lineno=706, col_offset=78), 'objecttype', Load(), lineno=706, col_offset=78)], [], None, None, lineno=706, col_offset=8), lineno=706, col_offset=8), Expr(Call(Name('Output', Load(), lineno=707, col_offset=8), [Str('return -1;', lineno=707, col_offset=15)], [], None, None, lineno=707, col_offset=8), lineno=707, col_offset=8)], [], lineno=677, col_offset=4)], [], lineno=649, col_offset=0), ClassDef('AliasDefinition', [Name('PEP253Mixin', Load(), lineno=709, col_offset=22), Name('ObjectDefinition', Load(), lineno=709, col_offset=35)], [Assign([Name('getsetlist', Store(), lineno=711, col_offset=4)], List([Tuple([Str('data', lineno=712, col_offset=13), Str('int size;\n                    PyObject *rv;\n\n                    size = GetHandleSize((Handle)self->ob_itself);\n                    HLock((Handle)self->ob_itself);\n                    rv = PyString_FromStringAndSize(*(Handle)self->ob_itself, size);\n                    HUnlock((Handle)self->ob_itself);\n                    return rv;\n            ', lineno=721, col_offset=-1), Name('None', Load(), lineno=722, col_offset=13), Str('Raw data of the alias object', lineno=723, col_offset=13)], Load(), lineno=712, col_offset=13)], Load(), lineno=711, col_offset=17), lineno=711, col_offset=4), FunctionDef('outputCheckNewArg', arguments([Name('self', Param(), lineno=727, col_offset=26)], None, None, []), [Expr(Call(Name('Output', Load(), lineno=728, col_offset=8), [Str('if (itself == NULL) return PyMac_Error(resNotFound);', lineno=728, col_offset=15)], [], None, None, lineno=728, col_offset=8), lineno=728, col_offset=8)], [], lineno=727, col_offset=4), FunctionDef('outputStructMembers', arguments([Name('self', Param(), lineno=730, col_offset=28)], None, None, []), [Expr(Call(Attribute(Name('ObjectDefinition', Load(), lineno=731, col_offset=8), 'outputStructMembers', Load(), lineno=731, col_offset=8), [Name('self', Load(), lineno=731, col_offset=45)], [], None, None, lineno=731, col_offset=8), lineno=731, col_offset=8), Expr(Call(Name('Output', Load(), lineno=732, col_offset=8), [Str('void (*ob_freeit)(%s ptr);', lineno=732, col_offset=15), Attribute(Name('self', Load(), lineno=732, col_offset=45), 'itselftype', Load(), lineno=732, col_offset=45)], [], None, None, lineno=732, col_offset=8), lineno=732, col_offset=8)], [], lineno=730, col_offset=4), FunctionDef('outputInitStructMembers', arguments([Name('self', Param(), lineno=734, col_offset=32)], None, None, []), [Expr(Call(Attribute(Name('ObjectDefinition', Load(), lineno=735, col_offset=8), 'outputInitStructMembers', Load(), lineno=735, col_offset=8), [Name('self', Load(), lineno=735, col_offset=49)], [], None, None, lineno=735, col_offset=8), lineno=735, col_offset=8), Expr(Call(Name('Output', Load(), lineno=736, col_offset=8), [Str('it->ob_freeit = NULL;', lineno=736, col_offset=15)], [], None, None, lineno=736, col_offset=8), lineno=736, col_offset=8)], [], lineno=734, col_offset=4), FunctionDef('outputCleanupStructMembers', arguments([Name('self', Param(), lineno=738, col_offset=35)], None, None, []), [Expr(Call(Name('Output', Load(), lineno=739, col_offset=8), [Str('if (self->ob_freeit && self->ob_itself)', lineno=739, col_offset=15)], [], None, None, lineno=739, col_offset=8), lineno=739, col_offset=8), Expr(Call(Name('OutLbrace', Load(), lineno=740, col_offset=8), [], [], None, None, lineno=740, col_offset=8), lineno=740, col_offset=8), Expr(Call(Name('Output', Load(), lineno=741, col_offset=8), [Str('self->ob_freeit(self->ob_itself);', lineno=741, col_offset=15)], [], None, None, lineno=741, col_offset=8), lineno=741, col_offset=8), Expr(Call(Name('OutRbrace', Load(), lineno=742, col_offset=8), [], [], None, None, lineno=742, col_offset=8), lineno=742, col_offset=8), Expr(Call(Name('Output', Load(), lineno=743, col_offset=8), [Str('self->ob_itself = NULL;', lineno=743, col_offset=15)], [], None, None, lineno=743, col_offset=8), lineno=743, col_offset=8)], [], lineno=738, col_offset=4), FunctionDef('output_tp_newBody', arguments([Name('self', Param(), lineno=745, col_offset=26)], None, None, []), [Expr(Call(Name('Output', Load(), lineno=746, col_offset=8), [Str('PyObject *self;', lineno=746, col_offset=15)], [], None, None, lineno=746, col_offset=8), lineno=746, col_offset=8), Expr(Call(Name('Output', Load(), lineno=747, col_offset=8), [], [], None, None, lineno=747, col_offset=8), lineno=747, col_offset=8), Expr(Call(Name('Output', Load(), lineno=748, col_offset=8), [Str('if ((self = type->tp_alloc(type, 0)) == NULL) return NULL;', lineno=748, col_offset=15)], [], None, None, lineno=748, col_offset=8), lineno=748, col_offset=8), Expr(Call(Name('Output', Load(), lineno=749, col_offset=8), [Str('((%s *)self)->ob_itself = NULL;', lineno=749, col_offset=15), Attribute(Name('self', Load(), lineno=749, col_offset=50), 'objecttype', Load(), lineno=749, col_offset=50)], [], None, None, lineno=749, col_offset=8), lineno=749, col_offset=8), Expr(Call(Name('Output', Load(), lineno=750, col_offset=8), [Str('return self;', lineno=750, col_offset=15)], [], None, None, lineno=750, col_offset=8), lineno=750, col_offset=8)], [], lineno=745, col_offset=4), FunctionDef('output_tp_initBody', arguments([Name('self', Param(), lineno=752, col_offset=27)], None, None, []), [Expr(Call(Name('Output', Load(), lineno=753, col_offset=8), [Str('%s itself = NULL;', lineno=753, col_offset=15), Attribute(Name('self', Load(), lineno=753, col_offset=36), 'itselftype', Load(), lineno=753, col_offset=36)], [], None, None, lineno=753, col_offset=8), lineno=753, col_offset=8), Expr(Call(Name('Output', Load(), lineno=754, col_offset=8), [Str('char *rawdata = NULL;', lineno=754, col_offset=15)], [], None, None, lineno=754, col_offset=8), lineno=754, col_offset=8), Expr(Call(Name('Output', Load(), lineno=755, col_offset=8), [Str('int rawdatalen = 0;', lineno=755, col_offset=15)], [], None, None, lineno=755, col_offset=8), lineno=755, col_offset=8), Expr(Call(Name('Output', Load(), lineno=756, col_offset=8), [Str('Handle h;', lineno=756, col_offset=15)], [], None, None, lineno=756, col_offset=8), lineno=756, col_offset=8), Expr(Call(Name('Output', Load(), lineno=757, col_offset=8), [Str('static char *kw[] = {"itself", "rawdata", 0};', lineno=757, col_offset=15)], [], None, None, lineno=757, col_offset=8), lineno=757, col_offset=8), Expr(Call(Name('Output', Load(), lineno=758, col_offset=8), [], [], None, None, lineno=758, col_offset=8), lineno=758, col_offset=8), Expr(Call(Name('Output', Load(), lineno=759, col_offset=8), [Str('if (!PyArg_ParseTupleAndKeywords(_args, _kwds, "|O&s#", kw, %s_Convert, &itself, &rawdata, &rawdatalen))', lineno=759, col_offset=15), Attribute(Name('self', Load(), lineno=760, col_offset=16), 'prefix', Load(), lineno=760, col_offset=16)], [], None, None, lineno=759, col_offset=8), lineno=759, col_offset=8), Expr(Call(Name('Output', Load(), lineno=761, col_offset=8), [Str('return -1;', lineno=761, col_offset=15)], [], None, None, lineno=761, col_offset=8), lineno=761, col_offset=8), Expr(Call(Name('Output', Load(), lineno=762, col_offset=8), [Str('if (itself && rawdata)', lineno=762, col_offset=15)], [], None, None, lineno=762, col_offset=8), lineno=762, col_offset=8), Expr(Call(Name('OutLbrace', Load(), lineno=763, col_offset=8), [], [], None, None, lineno=763, col_offset=8), lineno=763, col_offset=8), Expr(Call(Name('Output', Load(), lineno=764, col_offset=8), [Str('PyErr_SetString(PyExc_TypeError, "Only one of itself or rawdata may be specified");', lineno=764, col_offset=15)], [], None, None, lineno=764, col_offset=8), lineno=764, col_offset=8), Expr(Call(Name('Output', Load(), lineno=765, col_offset=8), [Str('return -1;', lineno=765, col_offset=15)], [], None, None, lineno=765, col_offset=8), lineno=765, col_offset=8), Expr(Call(Name('OutRbrace', Load(), lineno=766, col_offset=8), [], [], None, None, lineno=766, col_offset=8), lineno=766, col_offset=8), Expr(Call(Name('Output', Load(), lineno=767, col_offset=8), [Str('if (!itself && !rawdata)', lineno=767, col_offset=15)], [], None, None, lineno=767, col_offset=8), lineno=767, col_offset=8), Expr(Call(Name('OutLbrace', Load(), lineno=768, col_offset=8), [], [], None, None, lineno=768, col_offset=8), lineno=768, col_offset=8), Expr(Call(Name('Output', Load(), lineno=769, col_offset=8), [Str('PyErr_SetString(PyExc_TypeError, "One of itself or rawdata must be specified");', lineno=769, col_offset=15)], [], None, None, lineno=769, col_offset=8), lineno=769, col_offset=8), Expr(Call(Name('Output', Load(), lineno=770, col_offset=8), [Str('return -1;', lineno=770, col_offset=15)], [], None, None, lineno=770, col_offset=8), lineno=770, col_offset=8), Expr(Call(Name('OutRbrace', Load(), lineno=771, col_offset=8), [], [], None, None, lineno=771, col_offset=8), lineno=771, col_offset=8), Expr(Call(Name('Output', Load(), lineno=772, col_offset=8), [Str('if (rawdata)', lineno=772, col_offset=15)], [], None, None, lineno=772, col_offset=8), lineno=772, col_offset=8), Expr(Call(Name('OutLbrace', Load(), lineno=773, col_offset=8), [], [], None, None, lineno=773, col_offset=8), lineno=773, col_offset=8), Expr(Call(Name('Output', Load(), lineno=774, col_offset=8), [Str('if ((h = NewHandle(rawdatalen)) == NULL)', lineno=774, col_offset=15)], [], None, None, lineno=774, col_offset=8), lineno=774, col_offset=8), Expr(Call(Name('OutLbrace', Load(), lineno=775, col_offset=8), [], [], None, None, lineno=775, col_offset=8), lineno=775, col_offset=8), Expr(Call(Name('Output', Load(), lineno=776, col_offset=8), [Str('PyErr_NoMemory();', lineno=776, col_offset=15)], [], None, None, lineno=776, col_offset=8), lineno=776, col_offset=8), Expr(Call(Name('Output', Load(), lineno=777, col_offset=8), [Str('return -1;', lineno=777, col_offset=15)], [], None, None, lineno=777, col_offset=8), lineno=777, col_offset=8), Expr(Call(Name('OutRbrace', Load(), lineno=778, col_offset=8), [], [], None, None, lineno=778, col_offset=8), lineno=778, col_offset=8), Expr(Call(Name('Output', Load(), lineno=779, col_offset=8), [Str('HLock(h);', lineno=779, col_offset=15)], [], None, None, lineno=779, col_offset=8), lineno=779, col_offset=8), Expr(Call(Name('Output', Load(), lineno=780, col_offset=8), [Str('memcpy((char *)*h, rawdata, rawdatalen);', lineno=780, col_offset=15)], [], None, None, lineno=780, col_offset=8), lineno=780, col_offset=8), Expr(Call(Name('Output', Load(), lineno=781, col_offset=8), [Str('HUnlock(h);', lineno=781, col_offset=15)], [], None, None, lineno=781, col_offset=8), lineno=781, col_offset=8), Expr(Call(Name('Output', Load(), lineno=782, col_offset=8), [Str('((%s *)_self)->ob_itself = (%s)h;', lineno=782, col_offset=15), Attribute(Name('self', Load(), lineno=782, col_offset=52), 'objecttype', Load(), lineno=782, col_offset=52), Attribute(Name('self', Load(), lineno=782, col_offset=69), 'itselftype', Load(), lineno=782, col_offset=69)], [], None, None, lineno=782, col_offset=8), lineno=782, col_offset=8), Expr(Call(Name('Output', Load(), lineno=783, col_offset=8), [Str('return 0;', lineno=783, col_offset=15)], [], None, None, lineno=783, col_offset=8), lineno=783, col_offset=8), Expr(Call(Name('OutRbrace', Load(), lineno=784, col_offset=8), [], [], None, None, lineno=784, col_offset=8), lineno=784, col_offset=8), Expr(Call(Name('Output', Load(), lineno=785, col_offset=8), [Str('((%s *)_self)->ob_itself = itself;', lineno=785, col_offset=15), Attribute(Name('self', Load(), lineno=785, col_offset=53), 'objecttype', Load(), lineno=785, col_offset=53)], [], None, None, lineno=785, col_offset=8), lineno=785, col_offset=8), Expr(Call(Name('Output', Load(), lineno=786, col_offset=8), [Str('return 0;', lineno=786, col_offset=15)], [], None, None, lineno=786, col_offset=8), lineno=786, col_offset=8)], [], lineno=752, col_offset=4)], [], lineno=709, col_offset=0), ClassDef('Arg2MethodGenerator', [Name('OSErrMethodGenerator', Load(), lineno=790, col_offset=26)], [Expr(Str('Similar to MethodGenerator, but has self as second argument', lineno=791, col_offset=4), lineno=791, col_offset=4), FunctionDef('parseArgumentList', arguments([Name('self', Param(), lineno=793, col_offset=26), Name('args', Param(), lineno=793, col_offset=32)], None, None, []), [Assign([Tuple([Name('args0', Store(), lineno=794, col_offset=8), Name('arg1', Store(), lineno=794, col_offset=15), Name('argsrest', Store(), lineno=794, col_offset=21)], Store(), lineno=794, col_offset=8)], Tuple([Subscript(Name('args', Load(), lineno=794, col_offset=32), Slice(None, Num(1, lineno=794, col_offset=38), None), Load(), lineno=794, col_offset=32), Subscript(Name('args', Load(), lineno=794, col_offset=42), Index(Num(1, lineno=794, col_offset=47)), Load(), lineno=794, col_offset=42), Subscript(Name('args', Load(), lineno=794, col_offset=51), Slice(Num(2, lineno=794, col_offset=56), None, None), Load(), lineno=794, col_offset=51)], Load(), lineno=794, col_offset=32), lineno=794, col_offset=8), Assign([Tuple([Name('t0', Store(), lineno=795, col_offset=8), Name('n0', Store(), lineno=795, col_offset=12), Name('m0', Store(), lineno=795, col_offset=16)], Store(), lineno=795, col_offset=8)], Name('arg1', Load(), lineno=795, col_offset=21), lineno=795, col_offset=8), Assign([Name('args', Store(), lineno=796, col_offset=8)], BinOp(Name('args0', Load(), lineno=796, col_offset=15), Add(), Name('argsrest', Load(), lineno=796, col_offset=23), lineno=796, col_offset=15), lineno=796, col_offset=8), If(Compare(Name('m0', Load(), lineno=797, col_offset=11), [NotEq()], [Name('InMode', Load(), lineno=797, col_offset=17)], lineno=797, col_offset=11), [Raise(Name('ValueError', Load(), lineno=798, col_offset=18), Str("method's 'self' must be 'InMode'", lineno=798, col_offset=30), None, lineno=798, col_offset=12)], [], lineno=797, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=799, col_offset=8), 'itself', Store(), lineno=799, col_offset=8)], Call(Name('Variable', Load(), lineno=799, col_offset=22), [Name('t0', Load(), lineno=799, col_offset=31), Str('_self->ob_itself', lineno=799, col_offset=35), Name('SelfMode', Load(), lineno=799, col_offset=55)], [], None, None, lineno=799, col_offset=22), lineno=799, col_offset=8), Expr(Call(Attribute(Name('FunctionGenerator', Load(), lineno=800, col_offset=8), 'parseArgumentList', Load(), lineno=800, col_offset=8), [Name('self', Load(), lineno=800, col_offset=44), Name('args', Load(), lineno=800, col_offset=50)], [], None, None, lineno=800, col_offset=8), lineno=800, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=801, col_offset=8), 'argumentList', Load(), lineno=801, col_offset=8), 'insert', Load(), lineno=801, col_offset=8), [Num(2, lineno=801, col_offset=33), Attribute(Name('self', Load(), lineno=801, col_offset=36), 'itself', Load(), lineno=801, col_offset=36)], [], None, None, lineno=801, col_offset=8), lineno=801, col_offset=8)], [], lineno=793, col_offset=4)], [], lineno=790, col_offset=0), Assign([Name('module', Store(), lineno=806, col_offset=0)], Call(Name('MacModule', Load(), lineno=806, col_offset=9), [Name('MODNAME', Load(), lineno=806, col_offset=19), Name('MODPREFIX', Load(), lineno=806, col_offset=28), Name('includestuff', Load(), lineno=806, col_offset=39), Name('finalstuff', Load(), lineno=806, col_offset=53), Name('initstuff', Load(), lineno=806, col_offset=65)], [keyword('longname', Name('LONGMODNAME', Load(), lineno=807, col_offset=17))], None, None, lineno=806, col_offset=9), lineno=806, col_offset=0), Assign([Name('fscataloginfoobject', Store(), lineno=809, col_offset=0)], Call(Name('FSCatalogInfoDefinition', Load(), lineno=809, col_offset=22), [Str('FSCatalogInfo', lineno=809, col_offset=46), Str('FSCatalogInfo', lineno=809, col_offset=63), Str('FSCatalogInfo', lineno=809, col_offset=80)], [], None, None, lineno=809, col_offset=22), lineno=809, col_offset=0), Assign([Name('finfoobject', Store(), lineno=810, col_offset=0)], Call(Name('FInfoDefinition', Load(), lineno=810, col_offset=14), [Str('FInfo', lineno=810, col_offset=30), Str('FInfo', lineno=810, col_offset=39), Str('FInfo', lineno=810, col_offset=48)], [], None, None, lineno=810, col_offset=14), lineno=810, col_offset=0), Assign([Name('aliasobject', Store(), lineno=811, col_offset=0)], Call(Name('AliasDefinition', Load(), lineno=811, col_offset=14), [Str('Alias', lineno=811, col_offset=30), Str('Alias', lineno=811, col_offset=39), Str('AliasHandle', lineno=811, col_offset=48)], [], None, None, lineno=811, col_offset=14), lineno=811, col_offset=0), Assign([Name('fsspecobject', Store(), lineno=812, col_offset=0)], Call(Name('FSSpecDefinition', Load(), lineno=812, col_offset=15), [Str('FSSpec', lineno=812, col_offset=32), Str('FSSpec', lineno=812, col_offset=42), Str('FSSpec', lineno=812, col_offset=52)], [], None, None, lineno=812, col_offset=15), lineno=812, col_offset=0), Assign([Name('fsrefobject', Store(), lineno=813, col_offset=0)], Call(Name('FSRefDefinition', Load(), lineno=813, col_offset=14), [Str('FSRef', lineno=813, col_offset=30), Str('FSRef', lineno=813, col_offset=39), Str('FSRef', lineno=813, col_offset=48)], [], None, None, lineno=813, col_offset=14), lineno=813, col_offset=0), Expr(Call(Attribute(Name('module', Load(), lineno=815, col_offset=0), 'addobject', Load(), lineno=815, col_offset=0), [Name('fscataloginfoobject', Load(), lineno=815, col_offset=17)], [], None, None, lineno=815, col_offset=0), lineno=815, col_offset=0), Expr(Call(Attribute(Name('module', Load(), lineno=816, col_offset=0), 'addobject', Load(), lineno=816, col_offset=0), [Name('finfoobject', Load(), lineno=816, col_offset=17)], [], None, None, lineno=816, col_offset=0), lineno=816, col_offset=0), Expr(Call(Attribute(Name('module', Load(), lineno=817, col_offset=0), 'addobject', Load(), lineno=817, col_offset=0), [Name('aliasobject', Load(), lineno=817, col_offset=17)], [], None, None, lineno=817, col_offset=0), lineno=817, col_offset=0), Expr(Call(Attribute(Name('module', Load(), lineno=818, col_offset=0), 'addobject', Load(), lineno=818, col_offset=0), [Name('fsspecobject', Load(), lineno=818, col_offset=17)], [], None, None, lineno=818, col_offset=0), lineno=818, col_offset=0), Expr(Call(Attribute(Name('module', Load(), lineno=819, col_offset=0), 'addobject', Load(), lineno=819, col_offset=0), [Name('fsrefobject', Load(), lineno=819, col_offset=17)], [], None, None, lineno=819, col_offset=0), lineno=819, col_offset=0), Assign([Name('Function', Store(), lineno=822, col_offset=0)], Name('OSErrFunctionGenerator', Load(), lineno=822, col_offset=11), lineno=822, col_offset=0), Assign([Name('Method', Store(), lineno=823, col_offset=0)], Name('OSErrMethodGenerator', Load(), lineno=823, col_offset=9), lineno=823, col_offset=0), Assign([Name('functions', Store(), lineno=826, col_offset=0)], List([], Load(), lineno=826, col_offset=12), lineno=826, col_offset=0), Assign([Name('alias_methods', Store(), lineno=827, col_offset=0)], List([], Load(), lineno=827, col_offset=16), lineno=827, col_offset=0), Assign([Name('fsref_methods', Store(), lineno=828, col_offset=0)], List([], Load(), lineno=828, col_offset=16), lineno=828, col_offset=0), Assign([Name('fsspec_methods', Store(), lineno=829, col_offset=0)], List([], Load(), lineno=829, col_offset=17), lineno=829, col_offset=0), Expr(Call(Name('execfile', Load(), lineno=830, col_offset=0), [Name('INPUTFILE', Load(), lineno=830, col_offset=9)], [], None, None, lineno=830, col_offset=0), lineno=830, col_offset=0), Assign([Name('FSRefMakePath_body', Store(), lineno=833, col_offset=0)], Str('\nOSStatus _err;\n#define MAXPATHNAME 1024\nUInt8 path[MAXPATHNAME];\nUInt32 maxPathSize = MAXPATHNAME;\n\nif (!PyArg_ParseTuple(_args, ""))\n        return NULL;\n_err = FSRefMakePath(&_self->ob_itself,\n                                         path,\n                                         maxPathSize);\nif (_err != noErr) return PyMac_Error(_err);\n_res = Py_BuildValue("s", path);\nreturn _res;\n', lineno=847, col_offset=-1), lineno=833, col_offset=0), Assign([Name('f', Store(), lineno=848, col_offset=0)], Call(Name('ManualGenerator', Load(), lineno=848, col_offset=4), [Str('FSRefMakePath', lineno=848, col_offset=20), Name('FSRefMakePath_body', Load(), lineno=848, col_offset=37)], [], None, None, lineno=848, col_offset=4), lineno=848, col_offset=0), Assign([Attribute(Name('f', Load(), lineno=849, col_offset=0), 'docstring', Store(), lineno=849, col_offset=0)], Lambda(arguments([], None, None, []), Str('() -> string', lineno=849, col_offset=22), lineno=849, col_offset=14), lineno=849, col_offset=0), Expr(Call(Attribute(Name('fsref_methods', Load(), lineno=850, col_offset=0), 'append', Load(), lineno=850, col_offset=0), [Name('f', Load(), lineno=850, col_offset=21)], [], None, None, lineno=850, col_offset=0), lineno=850, col_offset=0), Assign([Name('FSRef_as_pathname_body', Store(), lineno=852, col_offset=0)], Str('\nif (!PyArg_ParseTuple(_args, ""))\n        return NULL;\n_res = FSRef_FSRefMakePath(_self, _args);\nreturn _res;\n', lineno=857, col_offset=-1), lineno=852, col_offset=0), Assign([Name('f', Store(), lineno=858, col_offset=0)], Call(Name('ManualGenerator', Load(), lineno=858, col_offset=4), [Str('as_pathname', lineno=858, col_offset=20), Name('FSRef_as_pathname_body', Load(), lineno=858, col_offset=35)], [], None, None, lineno=858, col_offset=4), lineno=858, col_offset=0), Assign([Attribute(Name('f', Load(), lineno=859, col_offset=0), 'docstring', Store(), lineno=859, col_offset=0)], Lambda(arguments([], None, None, []), Str('() -> string', lineno=859, col_offset=22), lineno=859, col_offset=14), lineno=859, col_offset=0), Expr(Call(Attribute(Name('fsref_methods', Load(), lineno=860, col_offset=0), 'append', Load(), lineno=860, col_offset=0), [Name('f', Load(), lineno=860, col_offset=21)], [], None, None, lineno=860, col_offset=0), lineno=860, col_offset=0), Assign([Name('FSSpec_as_pathname_body', Store(), lineno=862, col_offset=0)], Str('\nchar strbuf[1024];\nOSErr err;\n\nif (!PyArg_ParseTuple(_args, ""))\n        return NULL;\nerr = _PyMac_GetFullPathname(&_self->ob_itself, strbuf, sizeof(strbuf));\nif ( err ) {\n        PyMac_Error(err);\n        return NULL;\n}\n_res = PyString_FromString(strbuf);\nreturn _res;\n', lineno=875, col_offset=-1), lineno=862, col_offset=0), Assign([Name('f', Store(), lineno=876, col_offset=0)], Call(Name('ManualGenerator', Load(), lineno=876, col_offset=4), [Str('as_pathname', lineno=876, col_offset=20), Name('FSSpec_as_pathname_body', Load(), lineno=876, col_offset=35)], [], None, None, lineno=876, col_offset=4), lineno=876, col_offset=0), Assign([Attribute(Name('f', Load(), lineno=877, col_offset=0), 'docstring', Store(), lineno=877, col_offset=0)], Lambda(arguments([], None, None, []), Str('() -> string', lineno=877, col_offset=22), lineno=877, col_offset=14), lineno=877, col_offset=0), Expr(Call(Attribute(Name('fsspec_methods', Load(), lineno=878, col_offset=0), 'append', Load(), lineno=878, col_offset=0), [Name('f', Load(), lineno=878, col_offset=22)], [], None, None, lineno=878, col_offset=0), lineno=878, col_offset=0), Assign([Name('FSSpec_as_tuple_body', Store(), lineno=880, col_offset=0)], Str('\nif (!PyArg_ParseTuple(_args, ""))\n        return NULL;\n_res = Py_BuildValue("(iis#)", _self->ob_itself.vRefNum, _self->ob_itself.parID,\n                                        &_self->ob_itself.name[1], _self->ob_itself.name[0]);\nreturn _res;\n', lineno=886, col_offset=-1), lineno=880, col_offset=0), Assign([Name('f', Store(), lineno=887, col_offset=0)], Call(Name('ManualGenerator', Load(), lineno=887, col_offset=4), [Str('as_tuple', lineno=887, col_offset=20), Name('FSSpec_as_tuple_body', Load(), lineno=887, col_offset=32)], [], None, None, lineno=887, col_offset=4), lineno=887, col_offset=0), Assign([Attribute(Name('f', Load(), lineno=888, col_offset=0), 'docstring', Store(), lineno=888, col_offset=0)], Lambda(arguments([], None, None, []), Str('() -> (vRefNum, dirID, name)', lineno=888, col_offset=22), lineno=888, col_offset=14), lineno=888, col_offset=0), Expr(Call(Attribute(Name('fsspec_methods', Load(), lineno=889, col_offset=0), 'append', Load(), lineno=889, col_offset=0), [Name('f', Load(), lineno=889, col_offset=22)], [], None, None, lineno=889, col_offset=0), lineno=889, col_offset=0), Assign([Name('pathname_body', Store(), lineno=891, col_offset=0)], Str('\nPyObject *obj;\n\nif (!PyArg_ParseTuple(_args, "O", &obj))\n        return NULL;\nif (PyString_Check(obj)) {\n        Py_INCREF(obj);\n        return obj;\n}\nif (PyUnicode_Check(obj))\n        return PyUnicode_AsEncodedString(obj, "utf8", "strict");\n_res = PyObject_CallMethod(obj, "as_pathname", NULL);\nreturn _res;\n', lineno=904, col_offset=-1), lineno=891, col_offset=0), Assign([Name('f', Store(), lineno=905, col_offset=0)], Call(Name('ManualGenerator', Load(), lineno=905, col_offset=4), [Str('pathname', lineno=905, col_offset=20), Name('pathname_body', Load(), lineno=905, col_offset=32)], [], None, None, lineno=905, col_offset=4), lineno=905, col_offset=0), Assign([Attribute(Name('f', Load(), lineno=906, col_offset=0), 'docstring', Store(), lineno=906, col_offset=0)], Lambda(arguments([], None, None, []), Str('(str|unicode|FSSpec|FSref) -> pathname', lineno=906, col_offset=22), lineno=906, col_offset=14), lineno=906, col_offset=0), Expr(Call(Attribute(Name('functions', Load(), lineno=907, col_offset=0), 'append', Load(), lineno=907, col_offset=0), [Name('f', Load(), lineno=907, col_offset=17)], [], None, None, lineno=907, col_offset=0), lineno=907, col_offset=0), For(Name('f', Store(), lineno=911, col_offset=4), Name('functions', Load(), lineno=911, col_offset=9), [Expr(Call(Attribute(Name('module', Load(), lineno=911, col_offset=20), 'add', Load(), lineno=911, col_offset=20), [Name('f', Load(), lineno=911, col_offset=31)], [], None, None, lineno=911, col_offset=20), lineno=911, col_offset=20)], [], lineno=911, col_offset=0), For(Name('f', Store(), lineno=912, col_offset=4), Name('alias_methods', Load(), lineno=912, col_offset=9), [Expr(Call(Attribute(Name('aliasobject', Load(), lineno=912, col_offset=24), 'add', Load(), lineno=912, col_offset=24), [Name('f', Load(), lineno=912, col_offset=40)], [], None, None, lineno=912, col_offset=24), lineno=912, col_offset=24)], [], lineno=912, col_offset=0), For(Name('f', Store(), lineno=913, col_offset=4), Name('fsspec_methods', Load(), lineno=913, col_offset=9), [Expr(Call(Attribute(Name('fsspecobject', Load(), lineno=913, col_offset=25), 'add', Load(), lineno=913, col_offset=25), [Name('f', Load(), lineno=913, col_offset=42)], [], None, None, lineno=913, col_offset=25), lineno=913, col_offset=25)], [], lineno=913, col_offset=0), For(Name('f', Store(), lineno=914, col_offset=4), Name('fsref_methods', Load(), lineno=914, col_offset=9), [Expr(Call(Attribute(Name('fsrefobject', Load(), lineno=914, col_offset=24), 'add', Load(), lineno=914, col_offset=24), [Name('f', Load(), lineno=914, col_offset=40)], [], None, None, lineno=914, col_offset=24), lineno=914, col_offset=24)], [], lineno=914, col_offset=0), Expr(Call(Name('SetOutputFileName', Load(), lineno=917, col_offset=0), [Name('OUTPUTFILE', Load(), lineno=917, col_offset=18)], [], None, None, lineno=917, col_offset=0), lineno=917, col_offset=0), Expr(Call(Attribute(Name('module', Load(), lineno=918, col_offset=0), 'generate', Load(), lineno=918, col_offset=0), [], [], None, None, lineno=918, col_offset=0), lineno=918, col_offset=0)])
