Module([Expr(Str('RCS interface module.\n\nDefines the class RCS, which represents a directory with rcs version\nfiles and (possibly) corresponding work files.\n\n', lineno=6, col_offset=-1), lineno=6, col_offset=-1), Import([alias('fnmatch', None)], lineno=9, col_offset=0), Import([alias('os', None)], lineno=10, col_offset=0), Import([alias('re', None)], lineno=11, col_offset=0), Import([alias('string', None)], lineno=12, col_offset=0), Import([alias('tempfile', None)], lineno=13, col_offset=0), ClassDef('RCS', [], [Expr(Str("RCS interface class (local filesystem version).\n\n    An instance of this class represents a directory with rcs version\n    files and (possible) corresponding work files.\n\n    Methods provide access to most rcs operations such as\n    checkin/checkout, access to the rcs metadata (revisions, logs,\n    branches etc.) as well as some filesystem operations such as\n    listing all rcs version files.\n\n    XXX BUGS / PROBLEMS\n\n    - The instance always represents the current directory so it's not\n    very useful to have more than one instance around simultaneously\n\n    ", lineno=33, col_offset=-1), lineno=33, col_offset=-1), Assign([Name('okchars', Store(), lineno=36, col_offset=4)], BinOp(BinOp(Attribute(Name('string', Load(), lineno=36, col_offset=14), 'ascii_letters', Load(), lineno=36, col_offset=14), Add(), Attribute(Name('string', Load(), lineno=36, col_offset=37), 'digits', Load(), lineno=36, col_offset=37), lineno=36, col_offset=14), Add(), Str('-_=+', lineno=36, col_offset=53), lineno=36, col_offset=51), lineno=36, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=38, col_offset=17)], None, None, []), [Expr(Str('Constructor.', lineno=39, col_offset=8), lineno=39, col_offset=8), Pass( lineno=40, col_offset=8)], [], lineno=38, col_offset=4), FunctionDef('__del__', arguments([Name('self', Param(), lineno=42, col_offset=16)], None, None, []), [Expr(Str('Destructor.', lineno=43, col_offset=8), lineno=43, col_offset=8), Pass( lineno=44, col_offset=8)], [], lineno=42, col_offset=4), FunctionDef('log', arguments([Name('self', Param(), lineno=48, col_offset=12), Name('name_rev', Param(), lineno=48, col_offset=18), Name('otherflags', Param(), lineno=48, col_offset=28)], None, None, [Str('', lineno=48, col_offset=41)]), [Expr(Str('Return the full log text for NAME_REV as a string.\n\n        Optional OTHERFLAGS are passed to rlog.\n\n        ', lineno=53, col_offset=-1), lineno=53, col_offset=-1), Assign([Name('f', Store(), lineno=54, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=54, col_offset=12), '_open', Load(), lineno=54, col_offset=12), [Name('name_rev', Load(), lineno=54, col_offset=23), BinOp(Str('rlog ', lineno=54, col_offset=33), Add(), Name('otherflags', Load(), lineno=54, col_offset=43), lineno=54, col_offset=33)], [], None, None, lineno=54, col_offset=12), lineno=54, col_offset=8), Assign([Name('data', Store(), lineno=55, col_offset=8)], Call(Attribute(Name('f', Load(), lineno=55, col_offset=15), 'read', Load(), lineno=55, col_offset=15), [], [], None, None, lineno=55, col_offset=15), lineno=55, col_offset=8), Assign([Name('status', Store(), lineno=56, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=56, col_offset=17), '_closepipe', Load(), lineno=56, col_offset=17), [Name('f', Load(), lineno=56, col_offset=33)], [], None, None, lineno=56, col_offset=17), lineno=56, col_offset=8), If(Name('status', Load(), lineno=57, col_offset=11), [Assign([Name('data', Store(), lineno=58, col_offset=12)], BinOp(Name('data', Load(), lineno=58, col_offset=19), Add(), BinOp(Str('%s: %s', lineno=58, col_offset=26), Mod(), Name('status', Load(), lineno=58, col_offset=37), lineno=58, col_offset=26), lineno=58, col_offset=19), lineno=58, col_offset=12)], [If(Compare(Subscript(Name('data', Load(), lineno=59, col_offset=13), Index(Num(-1, lineno=59, col_offset=19)), Load(), lineno=59, col_offset=13), [Eq()], [Str('\n', lineno=59, col_offset=25)], lineno=59, col_offset=13), [Assign([Name('data', Store(), lineno=60, col_offset=12)], Subscript(Name('data', Load(), lineno=60, col_offset=19), Slice(None, Num(-1, lineno=60, col_offset=26), None), Load(), lineno=60, col_offset=19), lineno=60, col_offset=12)], [], lineno=59, col_offset=13)], lineno=57, col_offset=8), Return(Name('data', Load(), lineno=61, col_offset=15), lineno=61, col_offset=8)], [], lineno=48, col_offset=4), FunctionDef('head', arguments([Name('self', Param(), lineno=63, col_offset=13), Name('name_rev', Param(), lineno=63, col_offset=19)], None, None, []), [Expr(Str('Return the head revision for NAME_REV', lineno=64, col_offset=8), lineno=64, col_offset=8), Assign([Name('dict', Store(), lineno=65, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=65, col_offset=15), 'info', Load(), lineno=65, col_offset=15), [Name('name_rev', Load(), lineno=65, col_offset=25)], [], None, None, lineno=65, col_offset=15), lineno=65, col_offset=8), Return(Subscript(Name('dict', Load(), lineno=66, col_offset=15), Index(Str('head', lineno=66, col_offset=20)), Load(), lineno=66, col_offset=15), lineno=66, col_offset=8)], [], lineno=63, col_offset=4), FunctionDef('info', arguments([Name('self', Param(), lineno=68, col_offset=13), Name('name_rev', Param(), lineno=68, col_offset=19)], None, None, []), [Expr(Str("Return a dictionary of info (from rlog -h) for NAME_REV\n\n        The dictionary's keys are the keywords that rlog prints\n        (e.g. 'head' and its values are the corresponding data\n        (e.g. '1.3').\n\n        XXX symbolic names and locks are not returned\n\n        ", lineno=77, col_offset=-1), lineno=77, col_offset=-1), Assign([Name('f', Store(), lineno=78, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=78, col_offset=12), '_open', Load(), lineno=78, col_offset=12), [Name('name_rev', Load(), lineno=78, col_offset=23), Str('rlog -h', lineno=78, col_offset=33)], [], None, None, lineno=78, col_offset=12), lineno=78, col_offset=8), Assign([Name('dict', Store(), lineno=79, col_offset=8)], Dict([], [], lineno=79, col_offset=15), lineno=79, col_offset=8), While(Num(1, lineno=80, col_offset=14), [Assign([Name('line', Store(), lineno=81, col_offset=12)], Call(Attribute(Name('f', Load(), lineno=81, col_offset=19), 'readline', Load(), lineno=81, col_offset=19), [], [], None, None, lineno=81, col_offset=19), lineno=81, col_offset=12), If(UnaryOp(Not(), Name('line', Load(), lineno=82, col_offset=19), lineno=82, col_offset=15), [Break( lineno=82, col_offset=25)], [], lineno=82, col_offset=12), If(Compare(Subscript(Name('line', Load(), lineno=83, col_offset=15), Index(Num(0, lineno=83, col_offset=20)), Load(), lineno=83, col_offset=15), [Eq()], [Str('\t', lineno=83, col_offset=26)], lineno=83, col_offset=15), [Continue( lineno=86, col_offset=16)], [], lineno=83, col_offset=12), Assign([Name('i', Store(), lineno=87, col_offset=12)], Call(Attribute(Name('string', Load(), lineno=87, col_offset=16), 'find', Load(), lineno=87, col_offset=16), [Name('line', Load(), lineno=87, col_offset=28), Str(':', lineno=87, col_offset=34)], [], None, None, lineno=87, col_offset=16), lineno=87, col_offset=12), If(Compare(Name('i', Load(), lineno=88, col_offset=15), [Gt()], [Num(0, lineno=88, col_offset=19)], lineno=88, col_offset=15), [Assign([Tuple([Name('key', Store(), lineno=89, col_offset=16), Name('value', Store(), lineno=89, col_offset=21)], Store(), lineno=89, col_offset=16)], Tuple([Subscript(Name('line', Load(), lineno=89, col_offset=29), Slice(None, Name('i', Load(), lineno=89, col_offset=35), None), Load(), lineno=89, col_offset=29), Call(Attribute(Name('string', Load(), lineno=89, col_offset=39), 'strip', Load(), lineno=89, col_offset=39), [Subscript(Name('line', Load(), lineno=89, col_offset=52), Slice(BinOp(Name('i', Load(), lineno=89, col_offset=57), Add(), Num(1, lineno=89, col_offset=59), lineno=89, col_offset=57), None, None), Load(), lineno=89, col_offset=52)], [], None, None, lineno=89, col_offset=39)], Load(), lineno=89, col_offset=29), lineno=89, col_offset=16), Assign([Subscript(Name('dict', Load(), lineno=90, col_offset=16), Index(Name('key', Load(), lineno=90, col_offset=21)), Store(), lineno=90, col_offset=16)], Name('value', Load(), lineno=90, col_offset=28), lineno=90, col_offset=16)], [], lineno=88, col_offset=12)], [], lineno=80, col_offset=8), Assign([Name('status', Store(), lineno=91, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=91, col_offset=17), '_closepipe', Load(), lineno=91, col_offset=17), [Name('f', Load(), lineno=91, col_offset=33)], [], None, None, lineno=91, col_offset=17), lineno=91, col_offset=8), If(Name('status', Load(), lineno=92, col_offset=11), [Raise(Name('IOError', Load(), lineno=93, col_offset=18), Name('status', Load(), lineno=93, col_offset=27), None, lineno=93, col_offset=12)], [], lineno=92, col_offset=8), Return(Name('dict', Load(), lineno=94, col_offset=15), lineno=94, col_offset=8)], [], lineno=68, col_offset=4), FunctionDef('lock', arguments([Name('self', Param(), lineno=98, col_offset=13), Name('name_rev', Param(), lineno=98, col_offset=19)], None, None, []), [Expr(Str('Set an rcs lock on NAME_REV.', lineno=99, col_offset=8), lineno=99, col_offset=8), Assign([Tuple([Name('name', Store(), lineno=100, col_offset=8), Name('rev', Store(), lineno=100, col_offset=14)], Store(), lineno=100, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=100, col_offset=20), 'checkfile', Load(), lineno=100, col_offset=20), [Name('name_rev', Load(), lineno=100, col_offset=35)], [], None, None, lineno=100, col_offset=20), lineno=100, col_offset=8), Assign([Name('cmd', Store(), lineno=101, col_offset=8)], BinOp(Str('rcs -l%s %s', lineno=101, col_offset=14), Mod(), Tuple([Name('rev', Load(), lineno=101, col_offset=31), Name('name', Load(), lineno=101, col_offset=36)], Load(), lineno=101, col_offset=31), lineno=101, col_offset=14), lineno=101, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=102, col_offset=15), '_system', Load(), lineno=102, col_offset=15), [Name('cmd', Load(), lineno=102, col_offset=28)], [], None, None, lineno=102, col_offset=15), lineno=102, col_offset=8)], [], lineno=98, col_offset=4), FunctionDef('unlock', arguments([Name('self', Param(), lineno=104, col_offset=15), Name('name_rev', Param(), lineno=104, col_offset=21)], None, None, []), [Expr(Str('Clear an rcs lock on NAME_REV.', lineno=105, col_offset=8), lineno=105, col_offset=8), Assign([Tuple([Name('name', Store(), lineno=106, col_offset=8), Name('rev', Store(), lineno=106, col_offset=14)], Store(), lineno=106, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=106, col_offset=20), 'checkfile', Load(), lineno=106, col_offset=20), [Name('name_rev', Load(), lineno=106, col_offset=35)], [], None, None, lineno=106, col_offset=20), lineno=106, col_offset=8), Assign([Name('cmd', Store(), lineno=107, col_offset=8)], BinOp(Str('rcs -u%s %s', lineno=107, col_offset=14), Mod(), Tuple([Name('rev', Load(), lineno=107, col_offset=31), Name('name', Load(), lineno=107, col_offset=36)], Load(), lineno=107, col_offset=31), lineno=107, col_offset=14), lineno=107, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=108, col_offset=15), '_system', Load(), lineno=108, col_offset=15), [Name('cmd', Load(), lineno=108, col_offset=28)], [], None, None, lineno=108, col_offset=15), lineno=108, col_offset=8)], [], lineno=104, col_offset=4), FunctionDef('checkout', arguments([Name('self', Param(), lineno=110, col_offset=17), Name('name_rev', Param(), lineno=110, col_offset=23), Name('withlock', Param(), lineno=110, col_offset=33), Name('otherflags', Param(), lineno=110, col_offset=45)], None, None, [Num(0, lineno=110, col_offset=42), Str('', lineno=110, col_offset=56)]), [Expr(Str('Check out NAME_REV to its work file.\n\n        If optional WITHLOCK is set, check out locked, else unlocked.\n\n        The optional OTHERFLAGS is passed to co without\n        interpretation.\n\n        Any output from co goes to directly to stdout.\n\n        ', lineno=120, col_offset=-1), lineno=120, col_offset=-1), Assign([Tuple([Name('name', Store(), lineno=121, col_offset=8), Name('rev', Store(), lineno=121, col_offset=14)], Store(), lineno=121, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=121, col_offset=20), 'checkfile', Load(), lineno=121, col_offset=20), [Name('name_rev', Load(), lineno=121, col_offset=35)], [], None, None, lineno=121, col_offset=20), lineno=121, col_offset=8), If(Name('withlock', Load(), lineno=122, col_offset=11), [Assign([Name('lockflag', Store(), lineno=122, col_offset=21)], Str('-l', lineno=122, col_offset=32), lineno=122, col_offset=21)], [Assign([Name('lockflag', Store(), lineno=123, col_offset=14)], Str('-u', lineno=123, col_offset=25), lineno=123, col_offset=14)], lineno=122, col_offset=8), Assign([Name('cmd', Store(), lineno=124, col_offset=8)], BinOp(Str('co %s%s %s %s', lineno=124, col_offset=14), Mod(), Tuple([Name('lockflag', Load(), lineno=124, col_offset=33), Name('rev', Load(), lineno=124, col_offset=43), Name('otherflags', Load(), lineno=124, col_offset=48), Name('name', Load(), lineno=124, col_offset=60)], Load(), lineno=124, col_offset=33), lineno=124, col_offset=14), lineno=124, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=125, col_offset=15), '_system', Load(), lineno=125, col_offset=15), [Name('cmd', Load(), lineno=125, col_offset=28)], [], None, None, lineno=125, col_offset=15), lineno=125, col_offset=8)], [], lineno=110, col_offset=4), FunctionDef('checkin', arguments([Name('self', Param(), lineno=127, col_offset=16), Name('name_rev', Param(), lineno=127, col_offset=22), Name('message', Param(), lineno=127, col_offset=32), Name('otherflags', Param(), lineno=127, col_offset=46)], None, None, [Name('None', Load(), lineno=127, col_offset=40), Str('', lineno=127, col_offset=57)]), [Expr(Str('Check in NAME_REV from its work file.\n\n        The optional MESSAGE argument becomes the checkin message\n        (default "<none>" if None); or the file description if this is\n        a new file.\n\n        The optional OTHERFLAGS argument is passed to ci without\n        interpretation.\n\n        Any output from ci goes to directly to stdout.\n\n        ', lineno=139, col_offset=-1), lineno=139, col_offset=-1), Assign([Tuple([Name('name', Store(), lineno=140, col_offset=8), Name('rev', Store(), lineno=140, col_offset=14)], Store(), lineno=140, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=140, col_offset=20), '_unmangle', Load(), lineno=140, col_offset=20), [Name('name_rev', Load(), lineno=140, col_offset=35)], [], None, None, lineno=140, col_offset=20), lineno=140, col_offset=8), Assign([Name('new', Store(), lineno=141, col_offset=8)], UnaryOp(Not(), Call(Attribute(Name('self', Load(), lineno=141, col_offset=18), 'isvalid', Load(), lineno=141, col_offset=18), [Name('name', Load(), lineno=141, col_offset=31)], [], None, None, lineno=141, col_offset=18), lineno=141, col_offset=14), lineno=141, col_offset=8), If(UnaryOp(Not(), Name('message', Load(), lineno=142, col_offset=15), lineno=142, col_offset=11), [Assign([Name('message', Store(), lineno=142, col_offset=24)], Str('<none>', lineno=142, col_offset=34), lineno=142, col_offset=24)], [], lineno=142, col_offset=8), If(BoolOp(And(), [Name('message', Load(), lineno=143, col_offset=11), Compare(Subscript(Name('message', Load(), lineno=143, col_offset=23), Index(Num(-1, lineno=143, col_offset=32)), Load(), lineno=143, col_offset=23), [NotEq()], [Str('\n', lineno=143, col_offset=38)], lineno=143, col_offset=23)], lineno=143, col_offset=11), [Assign([Name('message', Store(), lineno=144, col_offset=12)], BinOp(Name('message', Load(), lineno=144, col_offset=22), Add(), Str('\n', lineno=144, col_offset=32), lineno=144, col_offset=22), lineno=144, col_offset=12)], [], lineno=143, col_offset=8), Assign([Name('lockflag', Store(), lineno=145, col_offset=8)], Str('-u', lineno=145, col_offset=19), lineno=145, col_offset=8), If(Name('new', Load(), lineno=146, col_offset=11), [Assign([Name('f', Store(), lineno=147, col_offset=12)], Call(Attribute(Name('tempfile', Load(), lineno=147, col_offset=16), 'NamedTemporaryFile', Load(), lineno=147, col_offset=16), [], [], None, None, lineno=147, col_offset=16), lineno=147, col_offset=12), Expr(Call(Attribute(Name('f', Load(), lineno=148, col_offset=12), 'write', Load(), lineno=148, col_offset=12), [Name('message', Load(), lineno=148, col_offset=20)], [], None, None, lineno=148, col_offset=12), lineno=148, col_offset=12), Expr(Call(Attribute(Name('f', Load(), lineno=149, col_offset=12), 'flush', Load(), lineno=149, col_offset=12), [], [], None, None, lineno=149, col_offset=12), lineno=149, col_offset=12), Assign([Name('cmd', Store(), lineno=150, col_offset=12)], BinOp(Str('ci %s%s -t%s %s %s', lineno=150, col_offset=18), Mod(), Tuple([Name('lockflag', Load(), lineno=151, col_offset=19), Name('rev', Load(), lineno=151, col_offset=29), Attribute(Name('f', Load(), lineno=151, col_offset=34), 'name', Load(), lineno=151, col_offset=34), Name('otherflags', Load(), lineno=151, col_offset=42), Name('name', Load(), lineno=151, col_offset=54)], Load(), lineno=151, col_offset=19), lineno=150, col_offset=18), lineno=150, col_offset=12)], [Assign([Name('message', Store(), lineno=153, col_offset=12)], Call(Attribute(Name('re', Load(), lineno=153, col_offset=22), 'sub', Load(), lineno=153, col_offset=22), [Str('([\\"$`])', lineno=153, col_offset=29), Str('\\\\\\1', lineno=153, col_offset=42), Name('message', Load(), lineno=153, col_offset=51)], [], None, None, lineno=153, col_offset=22), lineno=153, col_offset=12), Assign([Name('cmd', Store(), lineno=154, col_offset=12)], BinOp(Str('ci %s%s -m"%s" %s %s', lineno=154, col_offset=18), Mod(), Tuple([Name('lockflag', Load(), lineno=155, col_offset=19), Name('rev', Load(), lineno=155, col_offset=29), Name('message', Load(), lineno=155, col_offset=34), Name('otherflags', Load(), lineno=155, col_offset=43), Name('name', Load(), lineno=155, col_offset=55)], Load(), lineno=155, col_offset=19), lineno=154, col_offset=18), lineno=154, col_offset=12)], lineno=146, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=156, col_offset=15), '_system', Load(), lineno=156, col_offset=15), [Name('cmd', Load(), lineno=156, col_offset=28)], [], None, None, lineno=156, col_offset=15), lineno=156, col_offset=8)], [], lineno=127, col_offset=4), FunctionDef('listfiles', arguments([Name('self', Param(), lineno=160, col_offset=18), Name('pat', Param(), lineno=160, col_offset=24)], None, None, [Name('None', Load(), lineno=160, col_offset=30)]), [Expr(Str('Return a list of all version files matching optional PATTERN.', lineno=161, col_offset=8), lineno=161, col_offset=8), Assign([Name('files', Store(), lineno=162, col_offset=8)], Call(Attribute(Name('os', Load(), lineno=162, col_offset=16), 'listdir', Load(), lineno=162, col_offset=16), [Attribute(Name('os', Load(), lineno=162, col_offset=27), 'curdir', Load(), lineno=162, col_offset=27)], [], None, None, lineno=162, col_offset=16), lineno=162, col_offset=8), Assign([Name('files', Store(), lineno=163, col_offset=8)], Call(Name('filter', Load(), lineno=163, col_offset=16), [Attribute(Name('self', Load(), lineno=163, col_offset=23), '_isrcs', Load(), lineno=163, col_offset=23), Name('files', Load(), lineno=163, col_offset=36)], [], None, None, lineno=163, col_offset=16), lineno=163, col_offset=8), If(Call(Attribute(Attribute(Name('os', Load(), lineno=164, col_offset=11), 'path', Load(), lineno=164, col_offset=11), 'isdir', Load(), lineno=164, col_offset=11), [Str('RCS', lineno=164, col_offset=25)], [], None, None, lineno=164, col_offset=11), [Assign([Name('files2', Store(), lineno=165, col_offset=12)], Call(Attribute(Name('os', Load(), lineno=165, col_offset=21), 'listdir', Load(), lineno=165, col_offset=21), [Str('RCS', lineno=165, col_offset=32)], [], None, None, lineno=165, col_offset=21), lineno=165, col_offset=12), Assign([Name('files2', Store(), lineno=166, col_offset=12)], Call(Name('filter', Load(), lineno=166, col_offset=21), [Attribute(Name('self', Load(), lineno=166, col_offset=28), '_isrcs', Load(), lineno=166, col_offset=28), Name('files2', Load(), lineno=166, col_offset=41)], [], None, None, lineno=166, col_offset=21), lineno=166, col_offset=12), Assign([Name('files', Store(), lineno=167, col_offset=12)], BinOp(Name('files', Load(), lineno=167, col_offset=20), Add(), Name('files2', Load(), lineno=167, col_offset=28), lineno=167, col_offset=20), lineno=167, col_offset=12)], [], lineno=164, col_offset=8), Assign([Name('files', Store(), lineno=168, col_offset=8)], Call(Name('map', Load(), lineno=168, col_offset=16), [Attribute(Name('self', Load(), lineno=168, col_offset=20), 'realname', Load(), lineno=168, col_offset=20), Name('files', Load(), lineno=168, col_offset=35)], [], None, None, lineno=168, col_offset=16), lineno=168, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=169, col_offset=15), '_filter', Load(), lineno=169, col_offset=15), [Name('files', Load(), lineno=169, col_offset=28), Name('pat', Load(), lineno=169, col_offset=35)], [], None, None, lineno=169, col_offset=15), lineno=169, col_offset=8)], [], lineno=160, col_offset=4), FunctionDef('isvalid', arguments([Name('self', Param(), lineno=171, col_offset=16), Name('name', Param(), lineno=171, col_offset=22)], None, None, []), [Expr(Str('Test whether NAME has a version file associated.', lineno=172, col_offset=8), lineno=172, col_offset=8), Assign([Name('namev', Store(), lineno=173, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=173, col_offset=16), 'rcsname', Load(), lineno=173, col_offset=16), [Name('name', Load(), lineno=173, col_offset=29)], [], None, None, lineno=173, col_offset=16), lineno=173, col_offset=8), Return(BoolOp(Or(), [Call(Attribute(Attribute(Name('os', Load(), lineno=174, col_offset=16), 'path', Load(), lineno=174, col_offset=16), 'isfile', Load(), lineno=174, col_offset=16), [Name('namev', Load(), lineno=174, col_offset=31)], [], None, None, lineno=174, col_offset=16), Call(Attribute(Attribute(Name('os', Load(), lineno=175, col_offset=16), 'path', Load(), lineno=175, col_offset=16), 'isfile', Load(), lineno=175, col_offset=16), [Call(Attribute(Attribute(Name('os', Load(), lineno=175, col_offset=31), 'path', Load(), lineno=175, col_offset=31), 'join', Load(), lineno=175, col_offset=31), [Str('RCS', lineno=175, col_offset=44), Name('namev', Load(), lineno=175, col_offset=51)], [], None, None, lineno=175, col_offset=31)], [], None, None, lineno=175, col_offset=16)], lineno=174, col_offset=16), lineno=174, col_offset=8)], [], lineno=171, col_offset=4), FunctionDef('rcsname', arguments([Name('self', Param(), lineno=177, col_offset=16), Name('name', Param(), lineno=177, col_offset=22)], None, None, []), [Expr(Str('Return the pathname of the version file for NAME.\n\n        The argument can be a work file name or a version file name.\n        If the version file does not exist, the name of the version\n        file that would be created by "ci" is returned.\n\n        ', lineno=184, col_offset=-1), lineno=184, col_offset=-1), If(Call(Attribute(Name('self', Load(), lineno=185, col_offset=11), '_isrcs', Load(), lineno=185, col_offset=11), [Name('name', Load(), lineno=185, col_offset=23)], [], None, None, lineno=185, col_offset=11), [Assign([Name('namev', Store(), lineno=185, col_offset=30)], Name('name', Load(), lineno=185, col_offset=38), lineno=185, col_offset=30)], [Assign([Name('namev', Store(), lineno=186, col_offset=14)], BinOp(Name('name', Load(), lineno=186, col_offset=22), Add(), Str(',v', lineno=186, col_offset=29), lineno=186, col_offset=22), lineno=186, col_offset=14)], lineno=185, col_offset=8), If(Call(Attribute(Attribute(Name('os', Load(), lineno=187, col_offset=11), 'path', Load(), lineno=187, col_offset=11), 'isfile', Load(), lineno=187, col_offset=11), [Name('namev', Load(), lineno=187, col_offset=26)], [], None, None, lineno=187, col_offset=11), [Return(Name('namev', Load(), lineno=187, col_offset=41), lineno=187, col_offset=34)], [], lineno=187, col_offset=8), Assign([Name('namev', Store(), lineno=188, col_offset=8)], Call(Attribute(Attribute(Name('os', Load(), lineno=188, col_offset=16), 'path', Load(), lineno=188, col_offset=16), 'join', Load(), lineno=188, col_offset=16), [Str('RCS', lineno=188, col_offset=29), Call(Attribute(Attribute(Name('os', Load(), lineno=188, col_offset=36), 'path', Load(), lineno=188, col_offset=36), 'basename', Load(), lineno=188, col_offset=36), [Name('namev', Load(), lineno=188, col_offset=53)], [], None, None, lineno=188, col_offset=36)], [], None, None, lineno=188, col_offset=16), lineno=188, col_offset=8), If(Call(Attribute(Attribute(Name('os', Load(), lineno=189, col_offset=11), 'path', Load(), lineno=189, col_offset=11), 'isfile', Load(), lineno=189, col_offset=11), [Name('namev', Load(), lineno=189, col_offset=26)], [], None, None, lineno=189, col_offset=11), [Return(Name('namev', Load(), lineno=189, col_offset=41), lineno=189, col_offset=34)], [], lineno=189, col_offset=8), If(Call(Attribute(Attribute(Name('os', Load(), lineno=190, col_offset=11), 'path', Load(), lineno=190, col_offset=11), 'isdir', Load(), lineno=190, col_offset=11), [Str('RCS', lineno=190, col_offset=25)], [], None, None, lineno=190, col_offset=11), [Return(Call(Attribute(Attribute(Name('os', Load(), lineno=191, col_offset=19), 'path', Load(), lineno=191, col_offset=19), 'join', Load(), lineno=191, col_offset=19), [Str('RCS', lineno=191, col_offset=32), Name('namev', Load(), lineno=191, col_offset=39)], [], None, None, lineno=191, col_offset=19), lineno=191, col_offset=12)], [Return(Name('namev', Load(), lineno=193, col_offset=19), lineno=193, col_offset=12)], lineno=190, col_offset=8)], [], lineno=177, col_offset=4), FunctionDef('realname', arguments([Name('self', Param(), lineno=195, col_offset=17), Name('namev', Param(), lineno=195, col_offset=23)], None, None, []), [Expr(Str('Return the pathname of the work file for NAME.\n\n        The argument can be a work file name or a version file name.\n        If the work file does not exist, the name of the work file\n        that would be created by "co" is returned.\n\n        ', lineno=202, col_offset=-1), lineno=202, col_offset=-1), If(Call(Attribute(Name('self', Load(), lineno=203, col_offset=11), '_isrcs', Load(), lineno=203, col_offset=11), [Name('namev', Load(), lineno=203, col_offset=23)], [], None, None, lineno=203, col_offset=11), [Assign([Name('name', Store(), lineno=203, col_offset=31)], Subscript(Name('namev', Load(), lineno=203, col_offset=38), Slice(None, Num(-2, lineno=203, col_offset=46), None), Load(), lineno=203, col_offset=38), lineno=203, col_offset=31)], [Assign([Name('name', Store(), lineno=204, col_offset=14)], Name('namev', Load(), lineno=204, col_offset=21), lineno=204, col_offset=14)], lineno=203, col_offset=8), If(Call(Attribute(Attribute(Name('os', Load(), lineno=205, col_offset=11), 'path', Load(), lineno=205, col_offset=11), 'isfile', Load(), lineno=205, col_offset=11), [Name('name', Load(), lineno=205, col_offset=26)], [], None, None, lineno=205, col_offset=11), [Return(Name('name', Load(), lineno=205, col_offset=40), lineno=205, col_offset=33)], [], lineno=205, col_offset=8), Assign([Name('name', Store(), lineno=206, col_offset=8)], Call(Attribute(Attribute(Name('os', Load(), lineno=206, col_offset=15), 'path', Load(), lineno=206, col_offset=15), 'basename', Load(), lineno=206, col_offset=15), [Name('name', Load(), lineno=206, col_offset=32)], [], None, None, lineno=206, col_offset=15), lineno=206, col_offset=8), Return(Name('name', Load(), lineno=207, col_offset=15), lineno=207, col_offset=8)], [], lineno=195, col_offset=4), FunctionDef('islocked', arguments([Name('self', Param(), lineno=209, col_offset=17), Name('name_rev', Param(), lineno=209, col_offset=23)], None, None, []), [Expr(Str('Test whether FILE (which must have a version file) is locked.\n\n        XXX This does not tell you which revision number is locked and\n        ignores any revision you may pass in (by virtue of using rlog\n        -L -R).\n\n        ', lineno=216, col_offset=-1), lineno=216, col_offset=-1), Assign([Name('f', Store(), lineno=217, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=217, col_offset=12), '_open', Load(), lineno=217, col_offset=12), [Name('name_rev', Load(), lineno=217, col_offset=23), Str('rlog -L -R', lineno=217, col_offset=33)], [], None, None, lineno=217, col_offset=12), lineno=217, col_offset=8), Assign([Name('line', Store(), lineno=218, col_offset=8)], Call(Attribute(Name('f', Load(), lineno=218, col_offset=15), 'readline', Load(), lineno=218, col_offset=15), [], [], None, None, lineno=218, col_offset=15), lineno=218, col_offset=8), Assign([Name('status', Store(), lineno=219, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=219, col_offset=17), '_closepipe', Load(), lineno=219, col_offset=17), [Name('f', Load(), lineno=219, col_offset=33)], [], None, None, lineno=219, col_offset=17), lineno=219, col_offset=8), If(Name('status', Load(), lineno=220, col_offset=11), [Raise(Name('IOError', Load(), lineno=221, col_offset=18), Name('status', Load(), lineno=221, col_offset=27), None, lineno=221, col_offset=12)], [], lineno=220, col_offset=8), If(UnaryOp(Not(), Name('line', Load(), lineno=222, col_offset=15), lineno=222, col_offset=11), [Return(Name('None', Load(), lineno=222, col_offset=28), lineno=222, col_offset=21)], [], lineno=222, col_offset=8), If(Compare(Subscript(Name('line', Load(), lineno=223, col_offset=11), Index(Num(-1, lineno=223, col_offset=17)), Load(), lineno=223, col_offset=11), [Eq()], [Str('\n', lineno=223, col_offset=23)], lineno=223, col_offset=11), [Assign([Name('line', Store(), lineno=224, col_offset=12)], Subscript(Name('line', Load(), lineno=224, col_offset=19), Slice(None, Num(-1, lineno=224, col_offset=26), None), Load(), lineno=224, col_offset=19), lineno=224, col_offset=12)], [], lineno=223, col_offset=8), Return(Compare(Call(Attribute(Name('self', Load(), lineno=225, col_offset=15), 'realname', Load(), lineno=225, col_offset=15), [Name('name_rev', Load(), lineno=225, col_offset=29)], [], None, None, lineno=225, col_offset=15), [Eq()], [Call(Attribute(Name('self', Load(), lineno=225, col_offset=42), 'realname', Load(), lineno=225, col_offset=42), [Name('line', Load(), lineno=225, col_offset=56)], [], None, None, lineno=225, col_offset=42)], lineno=225, col_offset=15), lineno=225, col_offset=8)], [], lineno=209, col_offset=4), FunctionDef('checkfile', arguments([Name('self', Param(), lineno=227, col_offset=18), Name('name_rev', Param(), lineno=227, col_offset=24)], None, None, []), [Expr(Str('Normalize NAME_REV into a (NAME, REV) tuple.\n\n        Raise an exception if there is no corresponding version file.\n\n        ', lineno=232, col_offset=-1), lineno=232, col_offset=-1), Assign([Tuple([Name('name', Store(), lineno=233, col_offset=8), Name('rev', Store(), lineno=233, col_offset=14)], Store(), lineno=233, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=233, col_offset=20), '_unmangle', Load(), lineno=233, col_offset=20), [Name('name_rev', Load(), lineno=233, col_offset=35)], [], None, None, lineno=233, col_offset=20), lineno=233, col_offset=8), If(UnaryOp(Not(), Call(Attribute(Name('self', Load(), lineno=234, col_offset=15), 'isvalid', Load(), lineno=234, col_offset=15), [Name('name', Load(), lineno=234, col_offset=28)], [], None, None, lineno=234, col_offset=15), lineno=234, col_offset=11), [Raise(Attribute(Name('os', Load(), lineno=235, col_offset=18), 'error', Load(), lineno=235, col_offset=18), BinOp(Str('not an rcs file %r', lineno=235, col_offset=28), Mod(), Tuple([Name('name', Load(), lineno=235, col_offset=52)], Load(), lineno=235, col_offset=52), lineno=235, col_offset=28), None, lineno=235, col_offset=12)], [], lineno=234, col_offset=8), Return(Tuple([Name('name', Load(), lineno=236, col_offset=15), Name('rev', Load(), lineno=236, col_offset=21)], Load(), lineno=236, col_offset=15), lineno=236, col_offset=8)], [], lineno=227, col_offset=4), FunctionDef('_open', arguments([Name('self', Param(), lineno=240, col_offset=14), Name('name_rev', Param(), lineno=240, col_offset=20), Name('cmd', Param(), lineno=240, col_offset=30), Name('rflag', Param(), lineno=240, col_offset=45)], None, None, [Str('co -p', lineno=240, col_offset=36), Str('-r', lineno=240, col_offset=53)]), [Expr(Str('INTERNAL: open a read pipe to NAME_REV using optional COMMAND.\n\n        Optional FLAG is used to indicate the revision (default -r).\n\n        Default COMMAND is "co -p".\n\n        Return a file object connected by a pipe to the command\'s\n        output.\n\n        ', lineno=250, col_offset=-1), lineno=250, col_offset=-1), Assign([Tuple([Name('name', Store(), lineno=251, col_offset=8), Name('rev', Store(), lineno=251, col_offset=14)], Store(), lineno=251, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=251, col_offset=20), 'checkfile', Load(), lineno=251, col_offset=20), [Name('name_rev', Load(), lineno=251, col_offset=35)], [], None, None, lineno=251, col_offset=20), lineno=251, col_offset=8), Assign([Name('namev', Store(), lineno=252, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=252, col_offset=16), 'rcsname', Load(), lineno=252, col_offset=16), [Name('name', Load(), lineno=252, col_offset=29)], [], None, None, lineno=252, col_offset=16), lineno=252, col_offset=8), If(Name('rev', Load(), lineno=253, col_offset=11), [Assign([Name('cmd', Store(), lineno=254, col_offset=12)], BinOp(BinOp(BinOp(Name('cmd', Load(), lineno=254, col_offset=18), Add(), Str(' ', lineno=254, col_offset=24), lineno=254, col_offset=18), Add(), Name('rflag', Load(), lineno=254, col_offset=30), lineno=254, col_offset=28), Add(), Name('rev', Load(), lineno=254, col_offset=38), lineno=254, col_offset=36), lineno=254, col_offset=12)], [], lineno=253, col_offset=8), Return(Call(Attribute(Name('os', Load(), lineno=255, col_offset=15), 'popen', Load(), lineno=255, col_offset=15), [BinOp(Str('%s %r', lineno=255, col_offset=24), Mod(), Tuple([Name('cmd', Load(), lineno=255, col_offset=35), Name('namev', Load(), lineno=255, col_offset=40)], Load(), lineno=255, col_offset=35), lineno=255, col_offset=24)], [], None, None, lineno=255, col_offset=15), lineno=255, col_offset=8)], [], lineno=240, col_offset=4), FunctionDef('_unmangle', arguments([Name('self', Param(), lineno=257, col_offset=18), Name('name_rev', Param(), lineno=257, col_offset=24)], None, None, []), [Expr(Str("INTERNAL: Normalize NAME_REV argument to (NAME, REV) tuple.\n\n        Raise an exception if NAME contains invalid characters.\n\n        A NAME_REV argument is either NAME string (implying REV='') or\n        a tuple of the form (NAME, REV).\n\n        ", lineno=265, col_offset=-1), lineno=265, col_offset=-1), If(Compare(Call(Name('type', Load(), lineno=266, col_offset=11), [Name('name_rev', Load(), lineno=266, col_offset=16)], [], None, None, lineno=266, col_offset=11), [Eq()], [Call(Name('type', Load(), lineno=266, col_offset=29), [Str('', lineno=266, col_offset=34)], [], None, None, lineno=266, col_offset=29)], lineno=266, col_offset=11), [Assign([Name('name_rev', Store(), lineno=267, col_offset=12), Tuple([Name('name', Store(), lineno=267, col_offset=23), Name('rev', Store(), lineno=267, col_offset=29)], Store(), lineno=267, col_offset=23)], Tuple([Name('name_rev', Load(), lineno=267, col_offset=35), Str('', lineno=267, col_offset=45)], Load(), lineno=267, col_offset=35), lineno=267, col_offset=12)], [Assign([Tuple([Name('name', Store(), lineno=269, col_offset=12), Name('rev', Store(), lineno=269, col_offset=18)], Store(), lineno=269, col_offset=12)], Name('name_rev', Load(), lineno=269, col_offset=24), lineno=269, col_offset=12)], lineno=266, col_offset=8), For(Name('c', Store(), lineno=270, col_offset=12), Name('rev', Load(), lineno=270, col_offset=17), [If(Compare(Name('c', Load(), lineno=271, col_offset=15), [NotIn()], [Attribute(Name('self', Load(), lineno=271, col_offset=24), 'okchars', Load(), lineno=271, col_offset=24)], lineno=271, col_offset=15), [Raise(Name('ValueError', Load(), lineno=272, col_offset=22), Str('bad char in rev', lineno=272, col_offset=34), None, lineno=272, col_offset=16)], [], lineno=271, col_offset=12)], [], lineno=270, col_offset=8), Return(Name('name_rev', Load(), lineno=273, col_offset=15), lineno=273, col_offset=8)], [], lineno=257, col_offset=4), FunctionDef('_closepipe', arguments([Name('self', Param(), lineno=275, col_offset=19), Name('f', Param(), lineno=275, col_offset=25)], None, None, []), [Expr(Str('INTERNAL: Close PIPE and print its exit status if nonzero.', lineno=276, col_offset=8), lineno=276, col_offset=8), Assign([Name('sts', Store(), lineno=277, col_offset=8)], Call(Attribute(Name('f', Load(), lineno=277, col_offset=14), 'close', Load(), lineno=277, col_offset=14), [], [], None, None, lineno=277, col_offset=14), lineno=277, col_offset=8), If(UnaryOp(Not(), Name('sts', Load(), lineno=278, col_offset=15), lineno=278, col_offset=11), [Return(Name('None', Load(), lineno=278, col_offset=27), lineno=278, col_offset=20)], [], lineno=278, col_offset=8), Assign([Tuple([Name('detail', Store(), lineno=279, col_offset=8), Name('reason', Store(), lineno=279, col_offset=16)], Store(), lineno=279, col_offset=8)], Call(Name('divmod', Load(), lineno=279, col_offset=25), [Name('sts', Load(), lineno=279, col_offset=32), Num(256, lineno=279, col_offset=37)], [], None, None, lineno=279, col_offset=25), lineno=279, col_offset=8), If(Compare(Name('reason', Load(), lineno=280, col_offset=11), [Eq()], [Num(0, lineno=280, col_offset=21)], lineno=280, col_offset=11), [Return(Tuple([Str('exit', lineno=280, col_offset=31), Name('detail', Load(), lineno=280, col_offset=39)], Load(), lineno=280, col_offset=31), lineno=280, col_offset=24)], [], lineno=280, col_offset=8), Assign([Name('signal', Store(), lineno=281, col_offset=8)], BinOp(Name('reason', Load(), lineno=281, col_offset=17), BitAnd(), Num(127, lineno=281, col_offset=24), lineno=281, col_offset=17), lineno=281, col_offset=8), If(Compare(Name('signal', Load(), lineno=282, col_offset=11), [Eq()], [Num(127, lineno=282, col_offset=21)], lineno=282, col_offset=11), [Assign([Name('code', Store(), lineno=283, col_offset=12)], Str('stopped', lineno=283, col_offset=19), lineno=283, col_offset=12), Assign([Name('signal', Store(), lineno=284, col_offset=12)], Name('detail', Load(), lineno=284, col_offset=21), lineno=284, col_offset=12)], [Assign([Name('code', Store(), lineno=286, col_offset=12)], Str('killed', lineno=286, col_offset=19), lineno=286, col_offset=12)], lineno=282, col_offset=8), If(BinOp(Name('reason', Load(), lineno=287, col_offset=11), BitAnd(), Num(128, lineno=287, col_offset=18), lineno=287, col_offset=11), [Assign([Name('code', Store(), lineno=288, col_offset=12)], BinOp(Name('code', Load(), lineno=288, col_offset=19), Add(), Str('(coredump)', lineno=288, col_offset=26), lineno=288, col_offset=19), lineno=288, col_offset=12)], [], lineno=287, col_offset=8), Return(Tuple([Name('code', Load(), lineno=289, col_offset=15), Name('signal', Load(), lineno=289, col_offset=21)], Load(), lineno=289, col_offset=15), lineno=289, col_offset=8)], [], lineno=275, col_offset=4), FunctionDef('_system', arguments([Name('self', Param(), lineno=291, col_offset=16), Name('cmd', Param(), lineno=291, col_offset=22)], None, None, []), [Expr(Str('INTERNAL: run COMMAND in a subshell.\n\n        Standard input for the command is taken from /dev/null.\n\n        Raise IOError when the exit status is not zero.\n\n        Return whatever the calling method should return; normally\n        None.\n\n        A derived class may override this method and redefine it to\n        capture stdout/stderr of the command and return it.\n\n        ', lineno=304, col_offset=-1), lineno=304, col_offset=-1), Assign([Name('cmd', Store(), lineno=305, col_offset=8)], BinOp(Name('cmd', Load(), lineno=305, col_offset=14), Add(), Str(' </dev/null', lineno=305, col_offset=20), lineno=305, col_offset=14), lineno=305, col_offset=8), Assign([Name('sts', Store(), lineno=306, col_offset=8)], Call(Attribute(Name('os', Load(), lineno=306, col_offset=14), 'system', Load(), lineno=306, col_offset=14), [Name('cmd', Load(), lineno=306, col_offset=24)], [], None, None, lineno=306, col_offset=14), lineno=306, col_offset=8), If(Name('sts', Load(), lineno=307, col_offset=11), [Raise(Name('IOError', Load(), lineno=307, col_offset=22), BinOp(Str('command exit status %d', lineno=307, col_offset=31), Mod(), Name('sts', Load(), lineno=307, col_offset=58), lineno=307, col_offset=31), None, lineno=307, col_offset=16)], [], lineno=307, col_offset=8)], [], lineno=291, col_offset=4), FunctionDef('_filter', arguments([Name('self', Param(), lineno=309, col_offset=16), Name('files', Param(), lineno=309, col_offset=22), Name('pat', Param(), lineno=309, col_offset=29)], None, None, [Name('None', Load(), lineno=309, col_offset=35)]), [Expr(Str('INTERNAL: Return a sorted copy of the given list of FILES.\n\n        If a second PATTERN argument is given, only files matching it\n        are kept.  No check for valid filenames is made.\n\n        ', lineno=315, col_offset=-1), lineno=315, col_offset=-1), If(Name('pat', Load(), lineno=316, col_offset=11), [FunctionDef('keep', arguments([Name('name', Param(), lineno=317, col_offset=21), Name('pat', Param(), lineno=317, col_offset=27)], None, None, [Name('pat', Load(), lineno=317, col_offset=33)]), [Return(Call(Attribute(Name('fnmatch', Load(), lineno=318, col_offset=23), 'fnmatch', Load(), lineno=318, col_offset=23), [Name('name', Load(), lineno=318, col_offset=39), Name('pat', Load(), lineno=318, col_offset=45)], [], None, None, lineno=318, col_offset=23), lineno=318, col_offset=16)], [], lineno=317, col_offset=12), Assign([Name('files', Store(), lineno=319, col_offset=12)], Call(Name('filter', Load(), lineno=319, col_offset=20), [Name('keep', Load(), lineno=319, col_offset=27), Name('files', Load(), lineno=319, col_offset=33)], [], None, None, lineno=319, col_offset=20), lineno=319, col_offset=12)], [Assign([Name('files', Store(), lineno=321, col_offset=12)], Subscript(Name('files', Load(), lineno=321, col_offset=20), Slice(None, None, None), Load(), lineno=321, col_offset=20), lineno=321, col_offset=12)], lineno=316, col_offset=8), Expr(Call(Attribute(Name('files', Load(), lineno=322, col_offset=8), 'sort', Load(), lineno=322, col_offset=8), [], [], None, None, lineno=322, col_offset=8), lineno=322, col_offset=8), Return(Name('files', Load(), lineno=323, col_offset=15), lineno=323, col_offset=8)], [], lineno=309, col_offset=4), FunctionDef('_remove', arguments([Name('self', Param(), lineno=325, col_offset=16), Name('fn', Param(), lineno=325, col_offset=22)], None, None, []), [Expr(Str('INTERNAL: remove FILE without complaints.', lineno=326, col_offset=8), lineno=326, col_offset=8), TryExcept([Expr(Call(Attribute(Name('os', Load(), lineno=328, col_offset=12), 'unlink', Load(), lineno=328, col_offset=12), [Name('fn', Load(), lineno=328, col_offset=22)], [], None, None, lineno=328, col_offset=12), lineno=328, col_offset=12)], [ExceptHandler(Attribute(Name('os', Load(), lineno=329, col_offset=15), 'error', Load(), lineno=329, col_offset=15), None, [Pass( lineno=330, col_offset=12)], lineno=329, col_offset=8)], [], lineno=327, col_offset=8)], [], lineno=325, col_offset=4), FunctionDef('_isrcs', arguments([Name('self', Param(), lineno=332, col_offset=15), Name('name', Param(), lineno=332, col_offset=21)], None, None, []), [Expr(Str("INTERNAL: Test whether NAME ends in ',v'.", lineno=333, col_offset=8), lineno=333, col_offset=8), Return(Compare(Subscript(Name('name', Load(), lineno=334, col_offset=15), Slice(Num(-2, lineno=334, col_offset=21), None, None), Load(), lineno=334, col_offset=15), [Eq()], [Str(',v', lineno=334, col_offset=28)], lineno=334, col_offset=15), lineno=334, col_offset=8)], [], lineno=332, col_offset=4)], [], lineno=16, col_offset=0)])
