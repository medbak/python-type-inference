Module([Expr(Str('This module provides some more Pythonic support for SSL.\n\nObject types:\n\n  SSLSocket -- subtype of socket.socket which does SSL over the socket\n\nExceptions:\n\n  SSLError -- exception raised for I/O errors\n\nFunctions:\n\n  cert_time_to_seconds -- convert time string used for certificate\n                          notBefore and notAfter functions to integer\n                          seconds past the Epoch (the time values\n                          returned from time.time())\n\n  fetch_server_certificate (HOST, PORT) -- fetch the certificate provided\n                          by the server running on HOST at port PORT.  No\n                          validation of the certificate is performed.\n\nInteger constants:\n\nSSL_ERROR_ZERO_RETURN\nSSL_ERROR_WANT_READ\nSSL_ERROR_WANT_WRITE\nSSL_ERROR_WANT_X509_LOOKUP\nSSL_ERROR_SYSCALL\nSSL_ERROR_SSL\nSSL_ERROR_WANT_CONNECT\n\nSSL_ERROR_EOF\nSSL_ERROR_INVALID_ERROR_CODE\n\nThe following group define certificate requirements that one side is\nallowing/requiring from the other side:\n\nCERT_NONE - no certificates from the other side are required (or will\n            be looked at if provided)\nCERT_OPTIONAL - certificates are not required, but if provided will be\n                validated, and if validation fails, the connection will\n                also fail\nCERT_REQUIRED - certificates are required, and will be validated, and\n                if validation fails, the connection will also fail\n\nThe following constants identify various SSL protocol variants:\n\nPROTOCOL_SSLv2\nPROTOCOL_SSLv3\nPROTOCOL_SSLv23\nPROTOCOL_TLSv1\n', lineno=56, col_offset=-1), lineno=56, col_offset=-1), Import([alias('textwrap', None)], lineno=58, col_offset=0), Import([alias('_ssl', None)], lineno=60, col_offset=0), ImportFrom('_ssl', [alias('OPENSSL_VERSION_NUMBER', None), alias('OPENSSL_VERSION_INFO', None), alias('OPENSSL_VERSION', None)], 0, lineno=62, col_offset=0), ImportFrom('_ssl', [alias('SSLError', None)], 0, lineno=63, col_offset=0), ImportFrom('_ssl', [alias('CERT_NONE', None), alias('CERT_OPTIONAL', None), alias('CERT_REQUIRED', None)], 0, lineno=64, col_offset=0), ImportFrom('_ssl', [alias('PROTOCOL_SSLv2', None), alias('PROTOCOL_SSLv3', None), alias('PROTOCOL_SSLv23', None), alias('PROTOCOL_TLSv1', None)], 0, lineno=65, col_offset=0), ImportFrom('_ssl', [alias('RAND_status', None), alias('RAND_egd', None), alias('RAND_add', None)], 0, lineno=66, col_offset=0), ImportFrom('_ssl', [alias('SSL_ERROR_ZERO_RETURN', None), alias('SSL_ERROR_WANT_READ', None), alias('SSL_ERROR_WANT_WRITE', None), alias('SSL_ERROR_WANT_X509_LOOKUP', None), alias('SSL_ERROR_SYSCALL', None), alias('SSL_ERROR_SSL', None), alias('SSL_ERROR_WANT_CONNECT', None), alias('SSL_ERROR_EOF', None), alias('SSL_ERROR_INVALID_ERROR_CODE', None)], 0, lineno=67, col_offset=0), ImportFrom('socket', [alias('socket', None), alias('_fileobject', None), alias('_delegate_methods', None), alias('error', 'socket_error')], 0, lineno=78, col_offset=0), ImportFrom('socket', [alias('getnameinfo', '_getnameinfo')], 0, lineno=79, col_offset=0), Import([alias('base64', None)], lineno=80, col_offset=0), Import([alias('errno', None)], lineno=81, col_offset=0), ClassDef('SSLSocket', [Name('socket', Load(), lineno=83, col_offset=16)], [Expr(Str('This class implements a subtype of socket.socket that wraps\n    the underlying OS socket in an SSL context when necessary, and\n    provides read and write methods over that channel.', lineno=87, col_offset=-1), lineno=87, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=89, col_offset=17), Name('sock', Param(), lineno=89, col_offset=23), Name('keyfile', Param(), lineno=89, col_offset=29), Name('certfile', Param(), lineno=89, col_offset=43), Name('server_side', Param(), lineno=90, col_offset=17), Name('cert_reqs', Param(), lineno=90, col_offset=36), Name('ssl_version', Param(), lineno=91, col_offset=17), Name('ca_certs', Param(), lineno=91, col_offset=46), Name('do_handshake_on_connect', Param(), lineno=92, col_offset=17), Name('suppress_ragged_eofs', Param(), lineno=93, col_offset=17), Name('ciphers', Param(), lineno=93, col_offset=44)], None, None, [Name('None', Load(), lineno=89, col_offset=37), Name('None', Load(), lineno=89, col_offset=52), Name('False', Load(), lineno=90, col_offset=29), Name('CERT_NONE', Load(), lineno=90, col_offset=46), Name('PROTOCOL_SSLv23', Load(), lineno=91, col_offset=29), Name('None', Load(), lineno=91, col_offset=55), Name('True', Load(), lineno=92, col_offset=41), Name('True', Load(), lineno=93, col_offset=38), Name('None', Load(), lineno=93, col_offset=52)]), [Expr(Call(Attribute(Name('socket', Load(), lineno=94, col_offset=8), '__init__', Load(), lineno=94, col_offset=8), [Name('self', Load(), lineno=94, col_offset=24)], [keyword('_sock', Attribute(Name('sock', Load(), lineno=94, col_offset=36), '_sock', Load(), lineno=94, col_offset=36))], None, None, lineno=94, col_offset=8), lineno=94, col_offset=8), For(Name('attr', Store(), lineno=98, col_offset=12), Name('_delegate_methods', Load(), lineno=98, col_offset=20), [TryExcept([Expr(Call(Name('delattr', Load(), lineno=100, col_offset=16), [Name('self', Load(), lineno=100, col_offset=24), Name('attr', Load(), lineno=100, col_offset=30)], [], None, None, lineno=100, col_offset=16), lineno=100, col_offset=16)], [ExceptHandler(Name('AttributeError', Load(), lineno=101, col_offset=19), None, [Pass( lineno=102, col_offset=16)], lineno=101, col_offset=12)], [], lineno=99, col_offset=12)], [], lineno=98, col_offset=8), If(BoolOp(And(), [Name('certfile', Load(), lineno=104, col_offset=11), UnaryOp(Not(), Name('keyfile', Load(), lineno=104, col_offset=28), lineno=104, col_offset=24)], lineno=104, col_offset=11), [Assign([Name('keyfile', Store(), lineno=105, col_offset=12)], Name('certfile', Load(), lineno=105, col_offset=22), lineno=105, col_offset=12)], [], lineno=104, col_offset=8), TryExcept([Expr(Call(Attribute(Name('socket', Load(), lineno=108, col_offset=12), 'getpeername', Load(), lineno=108, col_offset=12), [Name('self', Load(), lineno=108, col_offset=31)], [], None, None, lineno=108, col_offset=12), lineno=108, col_offset=12)], [ExceptHandler(Name('socket_error', Load(), lineno=109, col_offset=15), Name('e', Store(), lineno=109, col_offset=29), [If(Compare(Attribute(Name('e', Load(), lineno=110, col_offset=15), 'errno', Load(), lineno=110, col_offset=15), [NotEq()], [Attribute(Name('errno', Load(), lineno=110, col_offset=26), 'ENOTCONN', Load(), lineno=110, col_offset=26)], lineno=110, col_offset=15), [Raise(None, None, None, lineno=111, col_offset=16)], [], lineno=110, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=113, col_offset=12), '_sslobj', Store(), lineno=113, col_offset=12)], Name('None', Load(), lineno=113, col_offset=27), lineno=113, col_offset=12)], lineno=109, col_offset=8)], [Assign([Attribute(Name('self', Load(), lineno=116, col_offset=12), '_sslobj', Store(), lineno=116, col_offset=12)], Call(Attribute(Name('_ssl', Load(), lineno=116, col_offset=27), 'sslwrap', Load(), lineno=116, col_offset=27), [Attribute(Name('self', Load(), lineno=116, col_offset=40), '_sock', Load(), lineno=116, col_offset=40), Name('server_side', Load(), lineno=116, col_offset=52), Name('keyfile', Load(), lineno=117, col_offset=40), Name('certfile', Load(), lineno=117, col_offset=49), Name('cert_reqs', Load(), lineno=118, col_offset=40), Name('ssl_version', Load(), lineno=118, col_offset=51), Name('ca_certs', Load(), lineno=118, col_offset=64), Name('ciphers', Load(), lineno=119, col_offset=40)], [], None, None, lineno=116, col_offset=27), lineno=116, col_offset=12), If(Name('do_handshake_on_connect', Load(), lineno=120, col_offset=15), [Expr(Call(Attribute(Name('self', Load(), lineno=121, col_offset=16), 'do_handshake', Load(), lineno=121, col_offset=16), [], [], None, None, lineno=121, col_offset=16), lineno=121, col_offset=16)], [], lineno=120, col_offset=12)], lineno=107, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=122, col_offset=8), 'keyfile', Store(), lineno=122, col_offset=8)], Name('keyfile', Load(), lineno=122, col_offset=23), lineno=122, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=123, col_offset=8), 'certfile', Store(), lineno=123, col_offset=8)], Name('certfile', Load(), lineno=123, col_offset=24), lineno=123, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=124, col_offset=8), 'cert_reqs', Store(), lineno=124, col_offset=8)], Name('cert_reqs', Load(), lineno=124, col_offset=25), lineno=124, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=125, col_offset=8), 'ssl_version', Store(), lineno=125, col_offset=8)], Name('ssl_version', Load(), lineno=125, col_offset=27), lineno=125, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=126, col_offset=8), 'ca_certs', Store(), lineno=126, col_offset=8)], Name('ca_certs', Load(), lineno=126, col_offset=24), lineno=126, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=127, col_offset=8), 'ciphers', Store(), lineno=127, col_offset=8)], Name('ciphers', Load(), lineno=127, col_offset=23), lineno=127, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=128, col_offset=8), 'do_handshake_on_connect', Store(), lineno=128, col_offset=8)], Name('do_handshake_on_connect', Load(), lineno=128, col_offset=39), lineno=128, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=129, col_offset=8), 'suppress_ragged_eofs', Store(), lineno=129, col_offset=8)], Name('suppress_ragged_eofs', Load(), lineno=129, col_offset=36), lineno=129, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=130, col_offset=8), '_makefile_refs', Store(), lineno=130, col_offset=8)], Num(0, lineno=130, col_offset=30), lineno=130, col_offset=8)], [], lineno=89, col_offset=4), FunctionDef('read', arguments([Name('self', Param(), lineno=132, col_offset=13), Name('len', Param(), lineno=132, col_offset=19)], None, None, [Num(1024, lineno=132, col_offset=23)]), [Expr(Str('Read up to LEN bytes and return them.\n        Return zero-length string on EOF.', lineno=135, col_offset=-1), lineno=135, col_offset=-1), TryExcept([Return(Call(Attribute(Attribute(Name('self', Load(), lineno=138, col_offset=19), '_sslobj', Load(), lineno=138, col_offset=19), 'read', Load(), lineno=138, col_offset=19), [Name('len', Load(), lineno=138, col_offset=37)], [], None, None, lineno=138, col_offset=19), lineno=138, col_offset=12)], [ExceptHandler(Name('SSLError', Load(), lineno=139, col_offset=15), Name('x', Store(), lineno=139, col_offset=25), [If(BoolOp(And(), [Compare(Subscript(Attribute(Name('x', Load(), lineno=140, col_offset=15), 'args', Load(), lineno=140, col_offset=15), Index(Num(0, lineno=140, col_offset=22)), Load(), lineno=140, col_offset=15), [Eq()], [Name('SSL_ERROR_EOF', Load(), lineno=140, col_offset=28)], lineno=140, col_offset=15), Attribute(Name('self', Load(), lineno=140, col_offset=46), 'suppress_ragged_eofs', Load(), lineno=140, col_offset=46)], lineno=140, col_offset=15), [Return(Str('', lineno=141, col_offset=23), lineno=141, col_offset=16)], [Raise(None, None, None, lineno=143, col_offset=16)], lineno=140, col_offset=12)], lineno=139, col_offset=8)], [], lineno=137, col_offset=8)], [], lineno=132, col_offset=4), FunctionDef('write', arguments([Name('self', Param(), lineno=145, col_offset=14), Name('data', Param(), lineno=145, col_offset=20)], None, None, []), [Expr(Str('Write DATA to the underlying SSL channel.  Returns\n        number of bytes of DATA actually transmitted.', lineno=148, col_offset=-1), lineno=148, col_offset=-1), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=150, col_offset=15), '_sslobj', Load(), lineno=150, col_offset=15), 'write', Load(), lineno=150, col_offset=15), [Name('data', Load(), lineno=150, col_offset=34)], [], None, None, lineno=150, col_offset=15), lineno=150, col_offset=8)], [], lineno=145, col_offset=4), FunctionDef('getpeercert', arguments([Name('self', Param(), lineno=152, col_offset=20), Name('binary_form', Param(), lineno=152, col_offset=26)], None, None, [Name('False', Load(), lineno=152, col_offset=38)]), [Expr(Str('Returns a formatted version of the data in the\n        certificate provided by the other end of the SSL channel.\n        Return None if no certificate was provided, {} if a\n        certificate was provided, but not validated.', lineno=157, col_offset=-1), lineno=157, col_offset=-1), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=159, col_offset=15), '_sslobj', Load(), lineno=159, col_offset=15), 'peer_certificate', Load(), lineno=159, col_offset=15), [Name('binary_form', Load(), lineno=159, col_offset=45)], [], None, None, lineno=159, col_offset=15), lineno=159, col_offset=8)], [], lineno=152, col_offset=4), FunctionDef('cipher', arguments([Name('self', Param(), lineno=161, col_offset=15)], None, None, []), [If(UnaryOp(Not(), Attribute(Name('self', Load(), lineno=163, col_offset=15), '_sslobj', Load(), lineno=163, col_offset=15), lineno=163, col_offset=11), [Return(Name('None', Load(), lineno=164, col_offset=19), lineno=164, col_offset=12)], [Return(Call(Attribute(Attribute(Name('self', Load(), lineno=166, col_offset=19), '_sslobj', Load(), lineno=166, col_offset=19), 'cipher', Load(), lineno=166, col_offset=19), [], [], None, None, lineno=166, col_offset=19), lineno=166, col_offset=12)], lineno=163, col_offset=8)], [], lineno=161, col_offset=4), FunctionDef('send', arguments([Name('self', Param(), lineno=168, col_offset=13), Name('data', Param(), lineno=168, col_offset=19), Name('flags', Param(), lineno=168, col_offset=25)], None, None, [Num(0, lineno=168, col_offset=31)]), [If(Attribute(Name('self', Load(), lineno=169, col_offset=11), '_sslobj', Load(), lineno=169, col_offset=11), [If(Compare(Name('flags', Load(), lineno=170, col_offset=15), [NotEq()], [Num(0, lineno=170, col_offset=24)], lineno=170, col_offset=15), [Raise(Call(Name('ValueError', Load(), lineno=171, col_offset=22), [BinOp(Str('non-zero flags not allowed in calls to send() on %s', lineno=172, col_offset=20), Mod(), Attribute(Name('self', Load(), lineno=173, col_offset=20), '__class__', Load(), lineno=173, col_offset=20), lineno=172, col_offset=20)], [], None, None, lineno=171, col_offset=22), None, None, lineno=171, col_offset=16)], [], lineno=170, col_offset=12), While(Name('True', Load(), lineno=174, col_offset=18), [TryExcept([Assign([Name('v', Store(), lineno=176, col_offset=20)], Call(Attribute(Attribute(Name('self', Load(), lineno=176, col_offset=24), '_sslobj', Load(), lineno=176, col_offset=24), 'write', Load(), lineno=176, col_offset=24), [Name('data', Load(), lineno=176, col_offset=43)], [], None, None, lineno=176, col_offset=24), lineno=176, col_offset=20)], [ExceptHandler(Name('SSLError', Load(), lineno=177, col_offset=23), Name('x', Store(), lineno=177, col_offset=33), [If(Compare(Subscript(Attribute(Name('x', Load(), lineno=178, col_offset=23), 'args', Load(), lineno=178, col_offset=23), Index(Num(0, lineno=178, col_offset=30)), Load(), lineno=178, col_offset=23), [Eq()], [Name('SSL_ERROR_WANT_READ', Load(), lineno=178, col_offset=36)], lineno=178, col_offset=23), [Return(Num(0, lineno=179, col_offset=31), lineno=179, col_offset=24)], [If(Compare(Subscript(Attribute(Name('x', Load(), lineno=180, col_offset=25), 'args', Load(), lineno=180, col_offset=25), Index(Num(0, lineno=180, col_offset=32)), Load(), lineno=180, col_offset=25), [Eq()], [Name('SSL_ERROR_WANT_WRITE', Load(), lineno=180, col_offset=38)], lineno=180, col_offset=25), [Return(Num(0, lineno=181, col_offset=31), lineno=181, col_offset=24)], [Raise(None, None, None, lineno=183, col_offset=24)], lineno=180, col_offset=25)], lineno=178, col_offset=20)], lineno=177, col_offset=16)], [Return(Name('v', Load(), lineno=185, col_offset=27), lineno=185, col_offset=20)], lineno=175, col_offset=16)], [], lineno=174, col_offset=12)], [Return(Call(Attribute(Attribute(Name('self', Load(), lineno=187, col_offset=19), '_sock', Load(), lineno=187, col_offset=19), 'send', Load(), lineno=187, col_offset=19), [Name('data', Load(), lineno=187, col_offset=35), Name('flags', Load(), lineno=187, col_offset=41)], [], None, None, lineno=187, col_offset=19), lineno=187, col_offset=12)], lineno=169, col_offset=8)], [], lineno=168, col_offset=4), FunctionDef('sendto', arguments([Name('self', Param(), lineno=189, col_offset=15), Name('data', Param(), lineno=189, col_offset=21), Name('flags_or_addr', Param(), lineno=189, col_offset=27), Name('addr', Param(), lineno=189, col_offset=42)], None, None, [Name('None', Load(), lineno=189, col_offset=47)]), [If(Attribute(Name('self', Load(), lineno=190, col_offset=11), '_sslobj', Load(), lineno=190, col_offset=11), [Raise(Call(Name('ValueError', Load(), lineno=191, col_offset=18), [BinOp(Str('sendto not allowed on instances of %s', lineno=191, col_offset=29), Mod(), Attribute(Name('self', Load(), lineno=192, col_offset=29), '__class__', Load(), lineno=192, col_offset=29), lineno=191, col_offset=29)], [], None, None, lineno=191, col_offset=18), None, None, lineno=191, col_offset=12)], [If(Compare(Name('addr', Load(), lineno=193, col_offset=13), [Is()], [Name('None', Load(), lineno=193, col_offset=21)], lineno=193, col_offset=13), [Return(Call(Attribute(Attribute(Name('self', Load(), lineno=194, col_offset=19), '_sock', Load(), lineno=194, col_offset=19), 'sendto', Load(), lineno=194, col_offset=19), [Name('data', Load(), lineno=194, col_offset=37), Name('flags_or_addr', Load(), lineno=194, col_offset=43)], [], None, None, lineno=194, col_offset=19), lineno=194, col_offset=12)], [Return(Call(Attribute(Attribute(Name('self', Load(), lineno=196, col_offset=19), '_sock', Load(), lineno=196, col_offset=19), 'sendto', Load(), lineno=196, col_offset=19), [Name('data', Load(), lineno=196, col_offset=37), Name('flags_or_addr', Load(), lineno=196, col_offset=43), Name('addr', Load(), lineno=196, col_offset=58)], [], None, None, lineno=196, col_offset=19), lineno=196, col_offset=12)], lineno=193, col_offset=13)], lineno=190, col_offset=8)], [], lineno=189, col_offset=4), FunctionDef('sendall', arguments([Name('self', Param(), lineno=198, col_offset=16), Name('data', Param(), lineno=198, col_offset=22), Name('flags', Param(), lineno=198, col_offset=28)], None, None, [Num(0, lineno=198, col_offset=34)]), [If(Attribute(Name('self', Load(), lineno=199, col_offset=11), '_sslobj', Load(), lineno=199, col_offset=11), [If(Compare(Name('flags', Load(), lineno=200, col_offset=15), [NotEq()], [Num(0, lineno=200, col_offset=24)], lineno=200, col_offset=15), [Raise(Call(Name('ValueError', Load(), lineno=201, col_offset=22), [BinOp(Str('non-zero flags not allowed in calls to sendall() on %s', lineno=202, col_offset=20), Mod(), Attribute(Name('self', Load(), lineno=203, col_offset=20), '__class__', Load(), lineno=203, col_offset=20), lineno=202, col_offset=20)], [], None, None, lineno=201, col_offset=22), None, None, lineno=201, col_offset=16)], [], lineno=200, col_offset=12), Assign([Name('amount', Store(), lineno=204, col_offset=12)], Call(Name('len', Load(), lineno=204, col_offset=21), [Name('data', Load(), lineno=204, col_offset=25)], [], None, None, lineno=204, col_offset=21), lineno=204, col_offset=12), Assign([Name('count', Store(), lineno=205, col_offset=12)], Num(0, lineno=205, col_offset=20), lineno=205, col_offset=12), While(Compare(Name('count', Load(), lineno=206, col_offset=19), [Lt()], [Name('amount', Load(), lineno=206, col_offset=27)], lineno=206, col_offset=19), [Assign([Name('v', Store(), lineno=207, col_offset=16)], Call(Attribute(Name('self', Load(), lineno=207, col_offset=20), 'send', Load(), lineno=207, col_offset=20), [Subscript(Name('data', Load(), lineno=207, col_offset=30), Slice(Name('count', Load(), lineno=207, col_offset=35), None, None), Load(), lineno=207, col_offset=30)], [], None, None, lineno=207, col_offset=20), lineno=207, col_offset=16), AugAssign(Name('count', Store(), lineno=208, col_offset=16), Add(), Name('v', Load(), lineno=208, col_offset=25), lineno=208, col_offset=16)], [], lineno=206, col_offset=12), Return(Name('amount', Load(), lineno=209, col_offset=19), lineno=209, col_offset=12)], [Return(Call(Attribute(Name('socket', Load(), lineno=211, col_offset=19), 'sendall', Load(), lineno=211, col_offset=19), [Name('self', Load(), lineno=211, col_offset=34), Name('data', Load(), lineno=211, col_offset=40), Name('flags', Load(), lineno=211, col_offset=46)], [], None, None, lineno=211, col_offset=19), lineno=211, col_offset=12)], lineno=199, col_offset=8)], [], lineno=198, col_offset=4), FunctionDef('recv', arguments([Name('self', Param(), lineno=213, col_offset=13), Name('buflen', Param(), lineno=213, col_offset=19), Name('flags', Param(), lineno=213, col_offset=32)], None, None, [Num(1024, lineno=213, col_offset=26), Num(0, lineno=213, col_offset=38)]), [If(Attribute(Name('self', Load(), lineno=214, col_offset=11), '_sslobj', Load(), lineno=214, col_offset=11), [If(Compare(Name('flags', Load(), lineno=215, col_offset=15), [NotEq()], [Num(0, lineno=215, col_offset=24)], lineno=215, col_offset=15), [Raise(Call(Name('ValueError', Load(), lineno=216, col_offset=22), [BinOp(Str('non-zero flags not allowed in calls to recv() on %s', lineno=217, col_offset=20), Mod(), Attribute(Name('self', Load(), lineno=218, col_offset=20), '__class__', Load(), lineno=218, col_offset=20), lineno=217, col_offset=20)], [], None, None, lineno=216, col_offset=22), None, None, lineno=216, col_offset=16)], [], lineno=215, col_offset=12), Return(Call(Attribute(Name('self', Load(), lineno=219, col_offset=19), 'read', Load(), lineno=219, col_offset=19), [Name('buflen', Load(), lineno=219, col_offset=29)], [], None, None, lineno=219, col_offset=19), lineno=219, col_offset=12)], [Return(Call(Attribute(Attribute(Name('self', Load(), lineno=221, col_offset=19), '_sock', Load(), lineno=221, col_offset=19), 'recv', Load(), lineno=221, col_offset=19), [Name('buflen', Load(), lineno=221, col_offset=35), Name('flags', Load(), lineno=221, col_offset=43)], [], None, None, lineno=221, col_offset=19), lineno=221, col_offset=12)], lineno=214, col_offset=8)], [], lineno=213, col_offset=4), FunctionDef('recv_into', arguments([Name('self', Param(), lineno=223, col_offset=18), Name('buffer', Param(), lineno=223, col_offset=24), Name('nbytes', Param(), lineno=223, col_offset=32), Name('flags', Param(), lineno=223, col_offset=45)], None, None, [Name('None', Load(), lineno=223, col_offset=39), Num(0, lineno=223, col_offset=51)]), [If(BoolOp(And(), [Name('buffer', Load(), lineno=224, col_offset=11), Compare(Name('nbytes', Load(), lineno=224, col_offset=23), [Is()], [Name('None', Load(), lineno=224, col_offset=33)], lineno=224, col_offset=23)], lineno=224, col_offset=11), [Assign([Name('nbytes', Store(), lineno=225, col_offset=12)], Call(Name('len', Load(), lineno=225, col_offset=21), [Name('buffer', Load(), lineno=225, col_offset=25)], [], None, None, lineno=225, col_offset=21), lineno=225, col_offset=12)], [If(Compare(Name('nbytes', Load(), lineno=226, col_offset=13), [Is()], [Name('None', Load(), lineno=226, col_offset=23)], lineno=226, col_offset=13), [Assign([Name('nbytes', Store(), lineno=227, col_offset=12)], Num(1024, lineno=227, col_offset=21), lineno=227, col_offset=12)], [], lineno=226, col_offset=13)], lineno=224, col_offset=8), If(Attribute(Name('self', Load(), lineno=228, col_offset=11), '_sslobj', Load(), lineno=228, col_offset=11), [If(Compare(Name('flags', Load(), lineno=229, col_offset=15), [NotEq()], [Num(0, lineno=229, col_offset=24)], lineno=229, col_offset=15), [Raise(Call(Name('ValueError', Load(), lineno=230, col_offset=22), [BinOp(Str('non-zero flags not allowed in calls to recv_into() on %s', lineno=231, col_offset=18), Mod(), Attribute(Name('self', Load(), lineno=232, col_offset=18), '__class__', Load(), lineno=232, col_offset=18), lineno=231, col_offset=18)], [], None, None, lineno=230, col_offset=22), None, None, lineno=230, col_offset=16)], [], lineno=229, col_offset=12), Assign([Name('tmp_buffer', Store(), lineno=233, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=233, col_offset=25), 'read', Load(), lineno=233, col_offset=25), [Name('nbytes', Load(), lineno=233, col_offset=35)], [], None, None, lineno=233, col_offset=25), lineno=233, col_offset=12), Assign([Name('v', Store(), lineno=234, col_offset=12)], Call(Name('len', Load(), lineno=234, col_offset=16), [Name('tmp_buffer', Load(), lineno=234, col_offset=20)], [], None, None, lineno=234, col_offset=16), lineno=234, col_offset=12), Assign([Subscript(Name('buffer', Load(), lineno=235, col_offset=12), Slice(None, Name('v', Load(), lineno=235, col_offset=20), None), Store(), lineno=235, col_offset=12)], Name('tmp_buffer', Load(), lineno=235, col_offset=25), lineno=235, col_offset=12), Return(Name('v', Load(), lineno=236, col_offset=19), lineno=236, col_offset=12)], [Return(Call(Attribute(Attribute(Name('self', Load(), lineno=238, col_offset=19), '_sock', Load(), lineno=238, col_offset=19), 'recv_into', Load(), lineno=238, col_offset=19), [Name('buffer', Load(), lineno=238, col_offset=40), Name('nbytes', Load(), lineno=238, col_offset=48), Name('flags', Load(), lineno=238, col_offset=56)], [], None, None, lineno=238, col_offset=19), lineno=238, col_offset=12)], lineno=228, col_offset=8)], [], lineno=223, col_offset=4), FunctionDef('recvfrom', arguments([Name('self', Param(), lineno=240, col_offset=17), Name('buflen', Param(), lineno=240, col_offset=23), Name('flags', Param(), lineno=240, col_offset=36)], None, None, [Num(1024, lineno=240, col_offset=30), Num(0, lineno=240, col_offset=42)]), [If(Attribute(Name('self', Load(), lineno=241, col_offset=11), '_sslobj', Load(), lineno=241, col_offset=11), [Raise(Call(Name('ValueError', Load(), lineno=242, col_offset=18), [BinOp(Str('recvfrom not allowed on instances of %s', lineno=242, col_offset=29), Mod(), Attribute(Name('self', Load(), lineno=243, col_offset=29), '__class__', Load(), lineno=243, col_offset=29), lineno=242, col_offset=29)], [], None, None, lineno=242, col_offset=18), None, None, lineno=242, col_offset=12)], [Return(Call(Attribute(Attribute(Name('self', Load(), lineno=245, col_offset=19), '_sock', Load(), lineno=245, col_offset=19), 'recvfrom', Load(), lineno=245, col_offset=19), [Name('buflen', Load(), lineno=245, col_offset=39), Name('flags', Load(), lineno=245, col_offset=47)], [], None, None, lineno=245, col_offset=19), lineno=245, col_offset=12)], lineno=241, col_offset=8)], [], lineno=240, col_offset=4), FunctionDef('recvfrom_into', arguments([Name('self', Param(), lineno=247, col_offset=22), Name('buffer', Param(), lineno=247, col_offset=28), Name('nbytes', Param(), lineno=247, col_offset=36), Name('flags', Param(), lineno=247, col_offset=49)], None, None, [Name('None', Load(), lineno=247, col_offset=43), Num(0, lineno=247, col_offset=55)]), [If(Attribute(Name('self', Load(), lineno=248, col_offset=11), '_sslobj', Load(), lineno=248, col_offset=11), [Raise(Call(Name('ValueError', Load(), lineno=249, col_offset=18), [BinOp(Str('recvfrom_into not allowed on instances of %s', lineno=249, col_offset=29), Mod(), Attribute(Name('self', Load(), lineno=250, col_offset=29), '__class__', Load(), lineno=250, col_offset=29), lineno=249, col_offset=29)], [], None, None, lineno=249, col_offset=18), None, None, lineno=249, col_offset=12)], [Return(Call(Attribute(Attribute(Name('self', Load(), lineno=252, col_offset=19), '_sock', Load(), lineno=252, col_offset=19), 'recvfrom_into', Load(), lineno=252, col_offset=19), [Name('buffer', Load(), lineno=252, col_offset=44), Name('nbytes', Load(), lineno=252, col_offset=52), Name('flags', Load(), lineno=252, col_offset=60)], [], None, None, lineno=252, col_offset=19), lineno=252, col_offset=12)], lineno=248, col_offset=8)], [], lineno=247, col_offset=4), FunctionDef('pending', arguments([Name('self', Param(), lineno=254, col_offset=16)], None, None, []), [If(Attribute(Name('self', Load(), lineno=255, col_offset=11), '_sslobj', Load(), lineno=255, col_offset=11), [Return(Call(Attribute(Attribute(Name('self', Load(), lineno=256, col_offset=19), '_sslobj', Load(), lineno=256, col_offset=19), 'pending', Load(), lineno=256, col_offset=19), [], [], None, None, lineno=256, col_offset=19), lineno=256, col_offset=12)], [Return(Num(0, lineno=258, col_offset=19), lineno=258, col_offset=12)], lineno=255, col_offset=8)], [], lineno=254, col_offset=4), FunctionDef('unwrap', arguments([Name('self', Param(), lineno=260, col_offset=15)], None, None, []), [If(Attribute(Name('self', Load(), lineno=261, col_offset=11), '_sslobj', Load(), lineno=261, col_offset=11), [Assign([Name('s', Store(), lineno=262, col_offset=12)], Call(Attribute(Attribute(Name('self', Load(), lineno=262, col_offset=16), '_sslobj', Load(), lineno=262, col_offset=16), 'shutdown', Load(), lineno=262, col_offset=16), [], [], None, None, lineno=262, col_offset=16), lineno=262, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=263, col_offset=12), '_sslobj', Store(), lineno=263, col_offset=12)], Name('None', Load(), lineno=263, col_offset=27), lineno=263, col_offset=12), Return(Name('s', Load(), lineno=264, col_offset=19), lineno=264, col_offset=12)], [Raise(Call(Name('ValueError', Load(), lineno=266, col_offset=18), [BinOp(Str('No SSL wrapper around ', lineno=266, col_offset=29), Add(), Call(Name('str', Load(), lineno=266, col_offset=56), [Name('self', Load(), lineno=266, col_offset=60)], [], None, None, lineno=266, col_offset=56), lineno=266, col_offset=29)], [], None, None, lineno=266, col_offset=18), None, None, lineno=266, col_offset=12)], lineno=261, col_offset=8)], [], lineno=260, col_offset=4), FunctionDef('shutdown', arguments([Name('self', Param(), lineno=268, col_offset=17), Name('how', Param(), lineno=268, col_offset=23)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=269, col_offset=8), '_sslobj', Store(), lineno=269, col_offset=8)], Name('None', Load(), lineno=269, col_offset=23), lineno=269, col_offset=8), Expr(Call(Attribute(Name('socket', Load(), lineno=270, col_offset=8), 'shutdown', Load(), lineno=270, col_offset=8), [Name('self', Load(), lineno=270, col_offset=24), Name('how', Load(), lineno=270, col_offset=30)], [], None, None, lineno=270, col_offset=8), lineno=270, col_offset=8)], [], lineno=268, col_offset=4), FunctionDef('close', arguments([Name('self', Param(), lineno=272, col_offset=14)], None, None, []), [If(Compare(Attribute(Name('self', Load(), lineno=273, col_offset=11), '_makefile_refs', Load(), lineno=273, col_offset=11), [Lt()], [Num(1, lineno=273, col_offset=33)], lineno=273, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=274, col_offset=12), '_sslobj', Store(), lineno=274, col_offset=12)], Name('None', Load(), lineno=274, col_offset=27), lineno=274, col_offset=12), Expr(Call(Attribute(Name('socket', Load(), lineno=275, col_offset=12), 'close', Load(), lineno=275, col_offset=12), [Name('self', Load(), lineno=275, col_offset=25)], [], None, None, lineno=275, col_offset=12), lineno=275, col_offset=12)], [AugAssign(Attribute(Name('self', Load(), lineno=277, col_offset=12), '_makefile_refs', Store(), lineno=277, col_offset=12), Sub(), Num(1, lineno=277, col_offset=35), lineno=277, col_offset=12)], lineno=273, col_offset=8)], [], lineno=272, col_offset=4), FunctionDef('do_handshake', arguments([Name('self', Param(), lineno=279, col_offset=21)], None, None, []), [Expr(Str('Perform a TLS/SSL handshake.', lineno=281, col_offset=8), lineno=281, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=283, col_offset=8), '_sslobj', Load(), lineno=283, col_offset=8), 'do_handshake', Load(), lineno=283, col_offset=8), [], [], None, None, lineno=283, col_offset=8), lineno=283, col_offset=8)], [], lineno=279, col_offset=4), FunctionDef('connect', arguments([Name('self', Param(), lineno=285, col_offset=16), Name('addr', Param(), lineno=285, col_offset=22)], None, None, []), [Expr(Str('Connects to remote ADDR, and then wraps the connection in\n        an SSL channel.', lineno=288, col_offset=-1), lineno=288, col_offset=-1), If(Attribute(Name('self', Load(), lineno=292, col_offset=11), '_sslobj', Load(), lineno=292, col_offset=11), [Raise(Call(Name('ValueError', Load(), lineno=293, col_offset=18), [Str('attempt to connect already-connected SSLSocket!', lineno=293, col_offset=29)], [], None, None, lineno=293, col_offset=18), None, None, lineno=293, col_offset=12)], [], lineno=292, col_offset=8), Expr(Call(Attribute(Name('socket', Load(), lineno=294, col_offset=8), 'connect', Load(), lineno=294, col_offset=8), [Name('self', Load(), lineno=294, col_offset=23), Name('addr', Load(), lineno=294, col_offset=29)], [], None, None, lineno=294, col_offset=8), lineno=294, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=295, col_offset=8), '_sslobj', Store(), lineno=295, col_offset=8)], Call(Attribute(Name('_ssl', Load(), lineno=295, col_offset=23), 'sslwrap', Load(), lineno=295, col_offset=23), [Attribute(Name('self', Load(), lineno=295, col_offset=36), '_sock', Load(), lineno=295, col_offset=36), Name('False', Load(), lineno=295, col_offset=48), Attribute(Name('self', Load(), lineno=295, col_offset=55), 'keyfile', Load(), lineno=295, col_offset=55), Attribute(Name('self', Load(), lineno=295, col_offset=69), 'certfile', Load(), lineno=295, col_offset=69), Attribute(Name('self', Load(), lineno=296, col_offset=36), 'cert_reqs', Load(), lineno=296, col_offset=36), Attribute(Name('self', Load(), lineno=296, col_offset=52), 'ssl_version', Load(), lineno=296, col_offset=52), Attribute(Name('self', Load(), lineno=297, col_offset=36), 'ca_certs', Load(), lineno=297, col_offset=36), Attribute(Name('self', Load(), lineno=297, col_offset=51), 'ciphers', Load(), lineno=297, col_offset=51)], [], None, None, lineno=295, col_offset=23), lineno=295, col_offset=8), If(Attribute(Name('self', Load(), lineno=298, col_offset=11), 'do_handshake_on_connect', Load(), lineno=298, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=299, col_offset=12), 'do_handshake', Load(), lineno=299, col_offset=12), [], [], None, None, lineno=299, col_offset=12), lineno=299, col_offset=12)], [], lineno=298, col_offset=8)], [], lineno=285, col_offset=4), FunctionDef('accept', arguments([Name('self', Param(), lineno=301, col_offset=15)], None, None, []), [Expr(Str('Accepts a new connection from a remote client, and returns\n        a tuple containing that new connection wrapped with a server-side\n        SSL channel, and the address of the remote client.', lineno=305, col_offset=-1), lineno=305, col_offset=-1), Assign([Tuple([Name('newsock', Store(), lineno=307, col_offset=8), Name('addr', Store(), lineno=307, col_offset=17)], Store(), lineno=307, col_offset=8)], Call(Attribute(Name('socket', Load(), lineno=307, col_offset=24), 'accept', Load(), lineno=307, col_offset=24), [Name('self', Load(), lineno=307, col_offset=38)], [], None, None, lineno=307, col_offset=24), lineno=307, col_offset=8), Return(Tuple([Call(Name('SSLSocket', Load(), lineno=308, col_offset=16), [Name('newsock', Load(), lineno=308, col_offset=26)], [keyword('keyfile', Attribute(Name('self', Load(), lineno=309, col_offset=34), 'keyfile', Load(), lineno=309, col_offset=34)), keyword('certfile', Attribute(Name('self', Load(), lineno=310, col_offset=35), 'certfile', Load(), lineno=310, col_offset=35)), keyword('server_side', Name('True', Load(), lineno=311, col_offset=38)), keyword('cert_reqs', Attribute(Name('self', Load(), lineno=312, col_offset=36), 'cert_reqs', Load(), lineno=312, col_offset=36)), keyword('ssl_version', Attribute(Name('self', Load(), lineno=313, col_offset=38), 'ssl_version', Load(), lineno=313, col_offset=38)), keyword('ca_certs', Attribute(Name('self', Load(), lineno=314, col_offset=35), 'ca_certs', Load(), lineno=314, col_offset=35)), keyword('ciphers', Attribute(Name('self', Load(), lineno=315, col_offset=34), 'ciphers', Load(), lineno=315, col_offset=34)), keyword('do_handshake_on_connect', Attribute(Name('self', Load(), lineno=316, col_offset=50), 'do_handshake_on_connect', Load(), lineno=316, col_offset=50)), keyword('suppress_ragged_eofs', Attribute(Name('self', Load(), lineno=317, col_offset=47), 'suppress_ragged_eofs', Load(), lineno=317, col_offset=47))], None, None, lineno=308, col_offset=16), Name('addr', Load(), lineno=318, col_offset=16)], Load(), lineno=308, col_offset=16), lineno=308, col_offset=8)], [], lineno=301, col_offset=4), FunctionDef('makefile', arguments([Name('self', Param(), lineno=320, col_offset=17), Name('mode', Param(), lineno=320, col_offset=23), Name('bufsize', Param(), lineno=320, col_offset=33)], None, None, [Str('r', lineno=320, col_offset=28), Num(-1, lineno=320, col_offset=42)]), [Expr(Str('Make and return a file-like object that\n        works with the SSL connection.  Just use the code\n        from the socket module.', lineno=324, col_offset=-1), lineno=324, col_offset=-1), AugAssign(Attribute(Name('self', Load(), lineno=326, col_offset=8), '_makefile_refs', Store(), lineno=326, col_offset=8), Add(), Num(1, lineno=326, col_offset=31), lineno=326, col_offset=8), Return(Call(Name('_fileobject', Load(), lineno=329, col_offset=15), [Name('self', Load(), lineno=329, col_offset=27), Name('mode', Load(), lineno=329, col_offset=33), Name('bufsize', Load(), lineno=329, col_offset=39)], [keyword('close', Name('True', Load(), lineno=329, col_offset=54))], None, None, lineno=329, col_offset=15), lineno=329, col_offset=8)], [], lineno=320, col_offset=4)], [], lineno=83, col_offset=0), FunctionDef('wrap_socket', arguments([Name('sock', Param(), lineno=333, col_offset=16), Name('keyfile', Param(), lineno=333, col_offset=22), Name('certfile', Param(), lineno=333, col_offset=36), Name('server_side', Param(), lineno=334, col_offset=16), Name('cert_reqs', Param(), lineno=334, col_offset=35), Name('ssl_version', Param(), lineno=335, col_offset=16), Name('ca_certs', Param(), lineno=335, col_offset=45), Name('do_handshake_on_connect', Param(), lineno=336, col_offset=16), Name('suppress_ragged_eofs', Param(), lineno=337, col_offset=16), Name('ciphers', Param(), lineno=337, col_offset=43)], None, None, [Name('None', Load(), lineno=333, col_offset=30), Name('None', Load(), lineno=333, col_offset=45), Name('False', Load(), lineno=334, col_offset=28), Name('CERT_NONE', Load(), lineno=334, col_offset=45), Name('PROTOCOL_SSLv23', Load(), lineno=335, col_offset=28), Name('None', Load(), lineno=335, col_offset=54), Name('True', Load(), lineno=336, col_offset=40), Name('True', Load(), lineno=337, col_offset=37), Name('None', Load(), lineno=337, col_offset=51)]), [Return(Call(Name('SSLSocket', Load(), lineno=339, col_offset=11), [Name('sock', Load(), lineno=339, col_offset=21)], [keyword('keyfile', Name('keyfile', Load(), lineno=339, col_offset=35)), keyword('certfile', Name('certfile', Load(), lineno=339, col_offset=53)), keyword('server_side', Name('server_side', Load(), lineno=340, col_offset=33)), keyword('cert_reqs', Name('cert_reqs', Load(), lineno=340, col_offset=56)), keyword('ssl_version', Name('ssl_version', Load(), lineno=341, col_offset=33)), keyword('ca_certs', Name('ca_certs', Load(), lineno=341, col_offset=55)), keyword('do_handshake_on_connect', Name('do_handshake_on_connect', Load(), lineno=342, col_offset=45)), keyword('suppress_ragged_eofs', Name('suppress_ragged_eofs', Load(), lineno=343, col_offset=42)), keyword('ciphers', Name('ciphers', Load(), lineno=344, col_offset=29))], None, None, lineno=339, col_offset=11), lineno=339, col_offset=4)], [], lineno=333, col_offset=0), FunctionDef('cert_time_to_seconds', arguments([Name('cert_time', Param(), lineno=349, col_offset=25)], None, None, []), [Expr(Str('Takes a date-time string in standard ASN1_print form\n    ("MON DAY 24HOUR:MINUTE:SEC YEAR TIMEZONE") and return\n    a Python time value in seconds past the epoch.', lineno=353, col_offset=-1), lineno=353, col_offset=-1), Import([alias('time', None)], lineno=355, col_offset=4), Return(Call(Attribute(Name('time', Load(), lineno=356, col_offset=11), 'mktime', Load(), lineno=356, col_offset=11), [Call(Attribute(Name('time', Load(), lineno=356, col_offset=23), 'strptime', Load(), lineno=356, col_offset=23), [Name('cert_time', Load(), lineno=356, col_offset=37), Str('%b %d %H:%M:%S %Y GMT', lineno=356, col_offset=48)], [], None, None, lineno=356, col_offset=23)], [], None, None, lineno=356, col_offset=11), lineno=356, col_offset=4)], [], lineno=349, col_offset=0), Assign([Name('PEM_HEADER', Store(), lineno=358, col_offset=0)], Str('-----BEGIN CERTIFICATE-----', lineno=358, col_offset=13), lineno=358, col_offset=0), Assign([Name('PEM_FOOTER', Store(), lineno=359, col_offset=0)], Str('-----END CERTIFICATE-----', lineno=359, col_offset=13), lineno=359, col_offset=0), FunctionDef('DER_cert_to_PEM_cert', arguments([Name('der_cert_bytes', Param(), lineno=361, col_offset=25)], None, None, []), [Expr(Str('Takes a certificate in binary DER format and returns the\n    PEM version of it as a string.', lineno=364, col_offset=-1), lineno=364, col_offset=-1), If(Call(Name('hasattr', Load(), lineno=366, col_offset=7), [Name('base64', Load(), lineno=366, col_offset=15), Str('standard_b64encode', lineno=366, col_offset=23)], [], None, None, lineno=366, col_offset=7), [Assign([Name('f', Store(), lineno=368, col_offset=8)], Call(Attribute(Name('base64', Load(), lineno=368, col_offset=12), 'standard_b64encode', Load(), lineno=368, col_offset=12), [Name('der_cert_bytes', Load(), lineno=368, col_offset=38)], [], None, None, lineno=368, col_offset=12), lineno=368, col_offset=8), Return(BinOp(BinOp(BinOp(BinOp(BinOp(Name('PEM_HEADER', Load(), lineno=369, col_offset=16), Add(), Str('\n', lineno=369, col_offset=29), lineno=369, col_offset=16), Add(), Call(Attribute(Name('textwrap', Load(), lineno=370, col_offset=16), 'fill', Load(), lineno=370, col_offset=16), [Name('f', Load(), lineno=370, col_offset=30), Num(64, lineno=370, col_offset=33)], [], None, None, lineno=370, col_offset=16), lineno=369, col_offset=34), Add(), Str('\n', lineno=370, col_offset=39), lineno=370, col_offset=37), Add(), Name('PEM_FOOTER', Load(), lineno=371, col_offset=16), lineno=370, col_offset=44), Add(), Str('\n', lineno=371, col_offset=29), lineno=371, col_offset=27), lineno=369, col_offset=8)], [Return(BinOp(BinOp(BinOp(BinOp(Name('PEM_HEADER', Load(), lineno=373, col_offset=16), Add(), Str('\n', lineno=373, col_offset=29), lineno=373, col_offset=16), Add(), Call(Attribute(Name('base64', Load(), lineno=374, col_offset=16), 'encodestring', Load(), lineno=374, col_offset=16), [Name('der_cert_bytes', Load(), lineno=374, col_offset=36)], [], None, None, lineno=374, col_offset=16), lineno=373, col_offset=34), Add(), Name('PEM_FOOTER', Load(), lineno=375, col_offset=16), lineno=374, col_offset=52), Add(), Str('\n', lineno=375, col_offset=29), lineno=375, col_offset=27), lineno=373, col_offset=8)], lineno=366, col_offset=4)], [], lineno=361, col_offset=0), FunctionDef('PEM_cert_to_DER_cert', arguments([Name('pem_cert_string', Param(), lineno=377, col_offset=25)], None, None, []), [Expr(Str('Takes a certificate in ASCII PEM format and returns the\n    DER-encoded version of it as a byte sequence', lineno=380, col_offset=-1), lineno=380, col_offset=-1), If(UnaryOp(Not(), Call(Attribute(Name('pem_cert_string', Load(), lineno=382, col_offset=11), 'startswith', Load(), lineno=382, col_offset=11), [Name('PEM_HEADER', Load(), lineno=382, col_offset=38)], [], None, None, lineno=382, col_offset=11), lineno=382, col_offset=7), [Raise(Call(Name('ValueError', Load(), lineno=383, col_offset=14), [BinOp(Str('Invalid PEM encoding; must start with %s', lineno=383, col_offset=25), Mod(), Name('PEM_HEADER', Load(), lineno=384, col_offset=27), lineno=383, col_offset=25)], [], None, None, lineno=383, col_offset=14), None, None, lineno=383, col_offset=8)], [], lineno=382, col_offset=4), If(UnaryOp(Not(), Call(Attribute(Call(Attribute(Name('pem_cert_string', Load(), lineno=385, col_offset=11), 'strip', Load(), lineno=385, col_offset=11), [], [], None, None, lineno=385, col_offset=11), 'endswith', Load(), lineno=385, col_offset=11), [Name('PEM_FOOTER', Load(), lineno=385, col_offset=44)], [], None, None, lineno=385, col_offset=11), lineno=385, col_offset=7), [Raise(Call(Name('ValueError', Load(), lineno=386, col_offset=14), [BinOp(Str('Invalid PEM encoding; must end with %s', lineno=386, col_offset=25), Mod(), Name('PEM_FOOTER', Load(), lineno=387, col_offset=27), lineno=386, col_offset=25)], [], None, None, lineno=386, col_offset=14), None, None, lineno=386, col_offset=8)], [], lineno=385, col_offset=4), Assign([Name('d', Store(), lineno=388, col_offset=4)], Subscript(Call(Attribute(Name('pem_cert_string', Load(), lineno=388, col_offset=8), 'strip', Load(), lineno=388, col_offset=8), [], [], None, None, lineno=388, col_offset=8), Slice(Call(Name('len', Load(), lineno=388, col_offset=32), [Name('PEM_HEADER', Load(), lineno=388, col_offset=36)], [], None, None, lineno=388, col_offset=32), UnaryOp(USub(), Call(Name('len', Load(), lineno=388, col_offset=49), [Name('PEM_FOOTER', Load(), lineno=388, col_offset=53)], [], None, None, lineno=388, col_offset=49), lineno=388, col_offset=48), None), Load(), lineno=388, col_offset=8), lineno=388, col_offset=4), Return(Call(Attribute(Name('base64', Load(), lineno=389, col_offset=11), 'decodestring', Load(), lineno=389, col_offset=11), [Name('d', Load(), lineno=389, col_offset=31)], [], None, None, lineno=389, col_offset=11), lineno=389, col_offset=4)], [], lineno=377, col_offset=0), FunctionDef('get_server_certificate', arguments([Name('addr', Param(), lineno=391, col_offset=27), Name('ssl_version', Param(), lineno=391, col_offset=33), Name('ca_certs', Param(), lineno=391, col_offset=61)], None, None, [Name('PROTOCOL_SSLv3', Load(), lineno=391, col_offset=45), Name('None', Load(), lineno=391, col_offset=70)]), [Expr(Str("Retrieve the certificate from the server at the specified address,\n    and return it as a PEM-encoded string.\n    If 'ca_certs' is specified, validate the server cert against it.\n    If 'ssl_version' is specified, use it in the connection attempt.", lineno=396, col_offset=-1), lineno=396, col_offset=-1), Assign([Tuple([Name('host', Store(), lineno=398, col_offset=4), Name('port', Store(), lineno=398, col_offset=10)], Store(), lineno=398, col_offset=4)], Name('addr', Load(), lineno=398, col_offset=17), lineno=398, col_offset=4), If(Compare(Name('ca_certs', Load(), lineno=399, col_offset=8), [IsNot()], [Name('None', Load(), lineno=399, col_offset=24)], lineno=399, col_offset=8), [Assign([Name('cert_reqs', Store(), lineno=400, col_offset=8)], Name('CERT_REQUIRED', Load(), lineno=400, col_offset=20), lineno=400, col_offset=8)], [Assign([Name('cert_reqs', Store(), lineno=402, col_offset=8)], Name('CERT_NONE', Load(), lineno=402, col_offset=20), lineno=402, col_offset=8)], lineno=399, col_offset=4), Assign([Name('s', Store(), lineno=403, col_offset=4)], Call(Name('wrap_socket', Load(), lineno=403, col_offset=8), [Call(Name('socket', Load(), lineno=403, col_offset=20), [], [], None, None, lineno=403, col_offset=20)], [keyword('ssl_version', Name('ssl_version', Load(), lineno=403, col_offset=42)), keyword('cert_reqs', Name('cert_reqs', Load(), lineno=404, col_offset=30)), keyword('ca_certs', Name('ca_certs', Load(), lineno=404, col_offset=50))], None, None, lineno=403, col_offset=8), lineno=403, col_offset=4), Expr(Call(Attribute(Name('s', Load(), lineno=405, col_offset=4), 'connect', Load(), lineno=405, col_offset=4), [Name('addr', Load(), lineno=405, col_offset=14)], [], None, None, lineno=405, col_offset=4), lineno=405, col_offset=4), Assign([Name('dercert', Store(), lineno=406, col_offset=4)], Call(Attribute(Name('s', Load(), lineno=406, col_offset=14), 'getpeercert', Load(), lineno=406, col_offset=14), [Name('True', Load(), lineno=406, col_offset=28)], [], None, None, lineno=406, col_offset=14), lineno=406, col_offset=4), Expr(Call(Attribute(Name('s', Load(), lineno=407, col_offset=4), 'close', Load(), lineno=407, col_offset=4), [], [], None, None, lineno=407, col_offset=4), lineno=407, col_offset=4), Return(Call(Name('DER_cert_to_PEM_cert', Load(), lineno=408, col_offset=11), [Name('dercert', Load(), lineno=408, col_offset=32)], [], None, None, lineno=408, col_offset=11), lineno=408, col_offset=4)], [], lineno=391, col_offset=0), FunctionDef('get_protocol_name', arguments([Name('protocol_code', Param(), lineno=410, col_offset=22)], None, None, []), [If(Compare(Name('protocol_code', Load(), lineno=411, col_offset=7), [Eq()], [Name('PROTOCOL_TLSv1', Load(), lineno=411, col_offset=24)], lineno=411, col_offset=7), [Return(Str('TLSv1', lineno=412, col_offset=15), lineno=412, col_offset=8)], [If(Compare(Name('protocol_code', Load(), lineno=413, col_offset=9), [Eq()], [Name('PROTOCOL_SSLv23', Load(), lineno=413, col_offset=26)], lineno=413, col_offset=9), [Return(Str('SSLv23', lineno=414, col_offset=15), lineno=414, col_offset=8)], [If(Compare(Name('protocol_code', Load(), lineno=415, col_offset=9), [Eq()], [Name('PROTOCOL_SSLv2', Load(), lineno=415, col_offset=26)], lineno=415, col_offset=9), [Return(Str('SSLv2', lineno=416, col_offset=15), lineno=416, col_offset=8)], [If(Compare(Name('protocol_code', Load(), lineno=417, col_offset=9), [Eq()], [Name('PROTOCOL_SSLv3', Load(), lineno=417, col_offset=26)], lineno=417, col_offset=9), [Return(Str('SSLv3', lineno=418, col_offset=15), lineno=418, col_offset=8)], [Return(Str('<unknown>', lineno=420, col_offset=15), lineno=420, col_offset=8)], lineno=417, col_offset=9)], lineno=415, col_offset=9)], lineno=413, col_offset=9)], lineno=411, col_offset=4)], [], lineno=410, col_offset=0), FunctionDef('sslwrap_simple', arguments([Name('sock', Param(), lineno=425, col_offset=19), Name('keyfile', Param(), lineno=425, col_offset=25), Name('certfile', Param(), lineno=425, col_offset=39)], None, None, [Name('None', Load(), lineno=425, col_offset=33), Name('None', Load(), lineno=425, col_offset=48)]), [Expr(Str('A replacement for the old socket.ssl function.  Designed\n    for compability with Python 2.5 and earlier.  Will disappear in\n    Python 3.0.', lineno=429, col_offset=-1), lineno=429, col_offset=-1), If(Call(Name('hasattr', Load(), lineno=431, col_offset=7), [Name('sock', Load(), lineno=431, col_offset=15), Str('_sock', lineno=431, col_offset=21)], [], None, None, lineno=431, col_offset=7), [Assign([Name('sock', Store(), lineno=432, col_offset=8)], Attribute(Name('sock', Load(), lineno=432, col_offset=15), '_sock', Load(), lineno=432, col_offset=15), lineno=432, col_offset=8)], [], lineno=431, col_offset=4), Assign([Name('ssl_sock', Store(), lineno=434, col_offset=4)], Call(Attribute(Name('_ssl', Load(), lineno=434, col_offset=15), 'sslwrap', Load(), lineno=434, col_offset=15), [Name('sock', Load(), lineno=434, col_offset=28), Num(0, lineno=434, col_offset=34), Name('keyfile', Load(), lineno=434, col_offset=37), Name('certfile', Load(), lineno=434, col_offset=46), Name('CERT_NONE', Load(), lineno=434, col_offset=56), Name('PROTOCOL_SSLv23', Load(), lineno=435, col_offset=28), Name('None', Load(), lineno=435, col_offset=45)], [], None, None, lineno=434, col_offset=15), lineno=434, col_offset=4), TryExcept([Expr(Call(Attribute(Name('sock', Load(), lineno=437, col_offset=8), 'getpeername', Load(), lineno=437, col_offset=8), [], [], None, None, lineno=437, col_offset=8), lineno=437, col_offset=8)], [ExceptHandler(Name('socket_error', Load(), lineno=438, col_offset=11), None, [Pass( lineno=440, col_offset=8)], lineno=438, col_offset=4)], [Expr(Call(Attribute(Name('ssl_sock', Load(), lineno=443, col_offset=8), 'do_handshake', Load(), lineno=443, col_offset=8), [], [], None, None, lineno=443, col_offset=8), lineno=443, col_offset=8)], lineno=436, col_offset=4), Return(Name('ssl_sock', Load(), lineno=445, col_offset=11), lineno=445, col_offset=4)], [], lineno=425, col_offset=0)])
