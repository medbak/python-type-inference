Module([Import([alias('unittest', None)], lineno=5, col_offset=0), ImportFrom('test.test_support', [alias('run_unittest', None)], 0, lineno=6, col_offset=0), ImportFrom('email.test.test_email', [alias('TestEmailBase', None)], 0, lineno=8, col_offset=0), ImportFrom('email.charset', [alias('Charset', None)], 0, lineno=9, col_offset=0), ImportFrom('email.header', [alias('Header', None), alias('decode_header', None)], 0, lineno=10, col_offset=0), ImportFrom('email.message', [alias('Message', None)], 0, lineno=11, col_offset=0), TryExcept([Expr(Call(Name('unicode', Load(), lineno=16, col_offset=4), [Str('foo', lineno=16, col_offset=12), Str('euc-jp', lineno=16, col_offset=19)], [], None, None, lineno=16, col_offset=4), lineno=16, col_offset=4)], [ExceptHandler(Name('LookupError', Load(), lineno=17, col_offset=7), None, [Raise(Attribute(Name('unittest', Load(), lineno=18, col_offset=10), 'SkipTest', Load(), lineno=18, col_offset=10), None, None, lineno=18, col_offset=4)], lineno=17, col_offset=0)], [], lineno=15, col_offset=0), ClassDef('TestEmailAsianCodecs', [Name('TestEmailBase', Load(), lineno=22, col_offset=27)], [FunctionDef('test_japanese_codecs', arguments([Name('self', Param(), lineno=23, col_offset=29)], None, None, []), [Assign([Name('eq', Store(), lineno=24, col_offset=8)], Attribute(Name('self', Load(), lineno=24, col_offset=13), 'ndiffAssertEqual', Load(), lineno=24, col_offset=13), lineno=24, col_offset=8), Assign([Name('j', Store(), lineno=25, col_offset=8)], Call(Name('Charset', Load(), lineno=25, col_offset=12), [Str('euc-jp', lineno=25, col_offset=20)], [], None, None, lineno=25, col_offset=12), lineno=25, col_offset=8), Assign([Name('g', Store(), lineno=26, col_offset=8)], Call(Name('Charset', Load(), lineno=26, col_offset=12), [Str('iso-8859-1', lineno=26, col_offset=20)], [], None, None, lineno=26, col_offset=12), lineno=26, col_offset=8), Assign([Name('h', Store(), lineno=27, col_offset=8)], Call(Name('Header', Load(), lineno=27, col_offset=12), [Str('Hello World!', lineno=27, col_offset=19)], [], None, None, lineno=27, col_offset=12), lineno=27, col_offset=8), Assign([Name('jhello', Store(), lineno=28, col_offset=8)], Str('\xa5\xcf\xa5\xed\xa1\xbc\xa5\xef\xa1\xbc\xa5\xeb\xa5\xc9\xa1\xaa', lineno=28, col_offset=17), lineno=28, col_offset=8), Assign([Name('ghello', Store(), lineno=29, col_offset=8)], Str('Gr\xfc\xdf Gott!', lineno=29, col_offset=17), lineno=29, col_offset=8), Expr(Call(Attribute(Name('h', Load(), lineno=30, col_offset=8), 'append', Load(), lineno=30, col_offset=8), [Name('jhello', Load(), lineno=30, col_offset=17), Name('j', Load(), lineno=30, col_offset=25)], [], None, None, lineno=30, col_offset=8), lineno=30, col_offset=8), Expr(Call(Attribute(Name('h', Load(), lineno=31, col_offset=8), 'append', Load(), lineno=31, col_offset=8), [Name('ghello', Load(), lineno=31, col_offset=17), Name('g', Load(), lineno=31, col_offset=25)], [], None, None, lineno=31, col_offset=8), lineno=31, col_offset=8), Expr(Call(Name('eq', Load(), lineno=37, col_offset=8), [Call(Attribute(Name('h', Load(), lineno=37, col_offset=11), 'encode', Load(), lineno=37, col_offset=11), [], [], None, None, lineno=37, col_offset=11), Str('Hello World! =?iso-2022-jp?b?GyRCJU8lbSE8JW8hPCVrJUkhKhsoQg==?=\n =?iso-8859-1?q?Gr=FC=DF?= =?iso-8859-1?q?_Gott!?=', lineno=39, col_offset=-1)], [], None, None, lineno=37, col_offset=8), lineno=37, col_offset=8), Expr(Call(Name('eq', Load(), lineno=40, col_offset=8), [Call(Name('decode_header', Load(), lineno=40, col_offset=11), [Call(Attribute(Name('h', Load(), lineno=40, col_offset=25), 'encode', Load(), lineno=40, col_offset=25), [], [], None, None, lineno=40, col_offset=25)], [], None, None, lineno=40, col_offset=11), List([Tuple([Str('Hello World!', lineno=41, col_offset=13), Name('None', Load(), lineno=41, col_offset=29)], Load(), lineno=41, col_offset=13), Tuple([Str('\x1b$B%O%m!<%o!<%k%I!*\x1b(B', lineno=42, col_offset=13), Str('iso-2022-jp', lineno=42, col_offset=45)], Load(), lineno=42, col_offset=13), Tuple([Str('Gr\xfc\xdf Gott!', lineno=43, col_offset=13), Str('iso-8859-1', lineno=43, col_offset=33)], Load(), lineno=43, col_offset=13)], Load(), lineno=41, col_offset=11)], [], None, None, lineno=40, col_offset=8), lineno=40, col_offset=8), Assign([Name('long', Store(), lineno=44, col_offset=8)], Str('test-ja \xa4\xd8\xc5\xea\xb9\xc6\xa4\xb5\xa4\xec\xa4\xbf\xa5\xe1\xa1\xbc\xa5\xeb\xa4\xcf\xbb\xca\xb2\xf1\xbc\xd4\xa4\xce\xbe\xb5\xc7\xa7\xa4\xf2\xc2\xd4\xa4\xc3\xa4\xc6\xa4\xa4\xa4\xde\xa4\xb9', lineno=44, col_offset=15), lineno=44, col_offset=8), Assign([Name('h', Store(), lineno=45, col_offset=8)], Call(Name('Header', Load(), lineno=45, col_offset=12), [Name('long', Load(), lineno=45, col_offset=19), Name('j', Load(), lineno=45, col_offset=25)], [keyword('header_name', Str('Subject', lineno=45, col_offset=40))], None, None, lineno=45, col_offset=12), lineno=45, col_offset=8), Assign([Name('enc', Store(), lineno=47, col_offset=8)], Call(Attribute(Name('h', Load(), lineno=47, col_offset=14), 'encode', Load(), lineno=47, col_offset=14), [], [], None, None, lineno=47, col_offset=14), lineno=47, col_offset=8), Expr(Call(Name('eq', Load(), lineno=49, col_offset=8), [Name('enc', Load(), lineno=49, col_offset=11), Str('=?iso-2022-jp?b?dGVzdC1qYSAbJEIkWEVqOUYkNSRsJD8lYSE8JWskTztKGyhC?=\n =?iso-2022-jp?b?GyRCMnE8VCROPjVHJyRyQlQkQyRGJCQkXiQ5GyhC?=', lineno=51, col_offset=-1)], [], None, None, lineno=49, col_offset=8), lineno=49, col_offset=8), Expr(Call(Name('eq', Load(), lineno=53, col_offset=8), [Call(Attribute(Call(Attribute(Name('h', Load(), lineno=53, col_offset=11), '__unicode__', Load(), lineno=53, col_offset=11), [], [], None, None, lineno=53, col_offset=11), 'encode', Load(), lineno=53, col_offset=11), [Str('euc-jp', lineno=53, col_offset=34)], [], None, None, lineno=53, col_offset=11), Name('long', Load(), lineno=53, col_offset=45)], [], None, None, lineno=53, col_offset=8), lineno=53, col_offset=8)], [], lineno=23, col_offset=4), FunctionDef('test_payload_encoding', arguments([Name('self', Param(), lineno=55, col_offset=30)], None, None, []), [Assign([Name('jhello', Store(), lineno=56, col_offset=8)], Str('\xa5\xcf\xa5\xed\xa1\xbc\xa5\xef\xa1\xbc\xa5\xeb\xa5\xc9\xa1\xaa', lineno=56, col_offset=17), lineno=56, col_offset=8), Assign([Name('jcode', Store(), lineno=57, col_offset=8)], Str('euc-jp', lineno=57, col_offset=17), lineno=57, col_offset=8), Assign([Name('msg', Store(), lineno=58, col_offset=8)], Call(Name('Message', Load(), lineno=58, col_offset=14), [], [], None, None, lineno=58, col_offset=14), lineno=58, col_offset=8), Expr(Call(Attribute(Name('msg', Load(), lineno=59, col_offset=8), 'set_payload', Load(), lineno=59, col_offset=8), [Name('jhello', Load(), lineno=59, col_offset=24), Name('jcode', Load(), lineno=59, col_offset=32)], [], None, None, lineno=59, col_offset=8), lineno=59, col_offset=8), Assign([Name('ustr', Store(), lineno=60, col_offset=8)], Call(Name('unicode', Load(), lineno=60, col_offset=15), [Call(Attribute(Name('msg', Load(), lineno=60, col_offset=23), 'get_payload', Load(), lineno=60, col_offset=23), [], [], None, None, lineno=60, col_offset=23), Call(Attribute(Name('msg', Load(), lineno=60, col_offset=42), 'get_content_charset', Load(), lineno=60, col_offset=42), [], [], None, None, lineno=60, col_offset=42)], [], None, None, lineno=60, col_offset=15), lineno=60, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=61, col_offset=8), 'assertEqual', Load(), lineno=61, col_offset=8), [Name('jhello', Load(), lineno=61, col_offset=25), Call(Attribute(Name('ustr', Load(), lineno=61, col_offset=33), 'encode', Load(), lineno=61, col_offset=33), [Name('jcode', Load(), lineno=61, col_offset=45)], [], None, None, lineno=61, col_offset=33)], [], None, None, lineno=61, col_offset=8), lineno=61, col_offset=8)], [], lineno=55, col_offset=4)], [], lineno=22, col_offset=0), FunctionDef('suite', arguments([], None, None, []), [Assign([Name('suite', Store(), lineno=66, col_offset=4)], Call(Attribute(Name('unittest', Load(), lineno=66, col_offset=12), 'TestSuite', Load(), lineno=66, col_offset=12), [], [], None, None, lineno=66, col_offset=12), lineno=66, col_offset=4), Expr(Call(Attribute(Name('suite', Load(), lineno=67, col_offset=4), 'addTest', Load(), lineno=67, col_offset=4), [Call(Attribute(Name('unittest', Load(), lineno=67, col_offset=18), 'makeSuite', Load(), lineno=67, col_offset=18), [Name('TestEmailAsianCodecs', Load(), lineno=67, col_offset=37)], [], None, None, lineno=67, col_offset=18)], [], None, None, lineno=67, col_offset=4), lineno=67, col_offset=4), Return(Name('suite', Load(), lineno=68, col_offset=11), lineno=68, col_offset=4)], [], lineno=65, col_offset=0), FunctionDef('test_main', arguments([], None, None, []), [Expr(Call(Name('run_unittest', Load(), lineno=72, col_offset=4), [Name('TestEmailAsianCodecs', Load(), lineno=72, col_offset=17)], [], None, None, lineno=72, col_offset=4), lineno=72, col_offset=4)], [], lineno=71, col_offset=0), If(Compare(Name('__name__', Load(), lineno=76, col_offset=3), [Eq()], [Str('__main__', lineno=76, col_offset=15)], lineno=76, col_offset=3), [Expr(Call(Attribute(Name('unittest', Load(), lineno=77, col_offset=4), 'main', Load(), lineno=77, col_offset=4), [], [keyword('defaultTest', Str('suite', lineno=77, col_offset=30))], None, None, lineno=77, col_offset=4), lineno=77, col_offset=4)], [], lineno=76, col_offset=0)])
