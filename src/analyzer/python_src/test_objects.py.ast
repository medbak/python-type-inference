Module([Expr(Str('\nThis tests the \'_objects\' attribute of ctypes instances.  \'_objects\'\nholds references to objects that must be kept alive as long as the\nctypes instance, to make sure that the memory buffer is valid.\n\nWARNING: The \'_objects\' attribute is exposed ONLY for debugging ctypes itself,\nit MUST NEVER BE MODIFIED!\n\n\'_objects\' is initialized to a dictionary on first use, before that it\nis None.\n\nHere is an array of string pointers:\n\n>>> from ctypes import *\n>>> array = (c_char_p * 5)()\n>>> print array._objects\nNone\n>>>\n\nThe memory block stores pointers to strings, and the strings itself\nassigned from Python must be kept.\n\n>>> array[4] = \'foo bar\'\n>>> array._objects\n{\'4\': \'foo bar\'}\n>>> array[4]\n\'foo bar\'\n>>>\n\nIt gets more complicated when the ctypes instance itself is contained\nin a \'base\' object.\n\n>>> class X(Structure):\n...     _fields_ = [("x", c_int), ("y", c_int), ("array", c_char_p * 5)]\n...\n>>> x = X()\n>>> print x._objects\nNone\n>>>\n\nThe\'array\' attribute of the \'x\' object shares part of the memory buffer\nof \'x\' (\'_b_base_\' is either None, or the root object owning the memory block):\n\n>>> print x.array._b_base_ # doctest: +ELLIPSIS\n<ctypes.test.test_objects.X object at 0x...>\n>>>\n\n>>> x.array[0] = \'spam spam spam\'\n>>> x._objects\n{\'0:2\': \'spam spam spam\'}\n>>> x.array._b_base_._objects\n{\'0:2\': \'spam spam spam\'}\n>>>\n\n', lineno=55, col_offset=-1), lineno=55, col_offset=-1), Import([alias('unittest', None), alias('doctest', None), alias('sys', None)], lineno=57, col_offset=0), Import([alias('ctypes.test.test_objects', None)], lineno=59, col_offset=0), ClassDef('TestCase', [Attribute(Name('unittest', Load(), lineno=61, col_offset=15), 'TestCase', Load(), lineno=61, col_offset=15)], [If(Compare(Attribute(Name('sys', Load(), lineno=62, col_offset=7), 'hexversion', Load(), lineno=62, col_offset=7), [Gt()], [Num(33816576, lineno=62, col_offset=24)], lineno=62, col_offset=7), [FunctionDef('test', arguments([Name('self', Param(), lineno=65, col_offset=17)], None, None, []), [Expr(Call(Attribute(Name('doctest', Load(), lineno=66, col_offset=12), 'testmod', Load(), lineno=66, col_offset=12), [Attribute(Attribute(Name('ctypes', Load(), lineno=66, col_offset=28), 'test', Load(), lineno=66, col_offset=28), 'test_objects', Load(), lineno=66, col_offset=28)], [], None, None, lineno=66, col_offset=12), lineno=66, col_offset=12)], [], lineno=65, col_offset=8)], [], lineno=62, col_offset=4)], [], lineno=61, col_offset=0), If(Compare(Name('__name__', Load(), lineno=68, col_offset=3), [Eq()], [Str('__main__', lineno=68, col_offset=15)], lineno=68, col_offset=3), [If(Compare(Attribute(Name('sys', Load(), lineno=69, col_offset=7), 'hexversion', Load(), lineno=69, col_offset=7), [Gt()], [Num(33816576, lineno=69, col_offset=24)], lineno=69, col_offset=7), [Expr(Call(Attribute(Name('doctest', Load(), lineno=70, col_offset=8), 'testmod', Load(), lineno=70, col_offset=8), [Attribute(Attribute(Name('ctypes', Load(), lineno=70, col_offset=24), 'test', Load(), lineno=70, col_offset=24), 'test_objects', Load(), lineno=70, col_offset=24)], [], None, None, lineno=70, col_offset=8), lineno=70, col_offset=8)], [], lineno=69, col_offset=4)], [], lineno=68, col_offset=0)])
