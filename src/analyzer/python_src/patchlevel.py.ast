Module([Expr(Str('\n    patchlevel.py\n    ~~~~~~~~~~~~~\n\n    Extract version info from Include/patchlevel.h.\n    Adapted from Doc/tools/getversioninfo.\n\n    :copyright: 2007-2008 by Georg Brandl.\n    :license: Python license.\n', lineno=11, col_offset=-1), lineno=11, col_offset=-1), Import([alias('os', None)], lineno=13, col_offset=0), Import([alias('re', None)], lineno=14, col_offset=0), Import([alias('sys', None)], lineno=15, col_offset=0), FunctionDef('get_header_version_info', arguments([Name('srcdir', Param(), lineno=17, col_offset=28)], None, None, []), [Assign([Name('patchlevel_h', Store(), lineno=18, col_offset=4)], Call(Attribute(Attribute(Name('os', Load(), lineno=18, col_offset=19), 'path', Load(), lineno=18, col_offset=19), 'join', Load(), lineno=18, col_offset=19), [Name('srcdir', Load(), lineno=18, col_offset=32), Str('..', lineno=18, col_offset=40), Str('Include', lineno=18, col_offset=46), Str('patchlevel.h', lineno=18, col_offset=57)], [], None, None, lineno=18, col_offset=19), lineno=18, col_offset=4), Assign([Name('rx', Store(), lineno=22, col_offset=4)], Call(Attribute(Name('re', Load(), lineno=22, col_offset=9), 'compile', Load(), lineno=22, col_offset=9), [Str('\\s*#define\\s+([a-zA-Z][a-zA-Z_0-9]*)\\s+([a-zA-Z_0-9]+)', lineno=22, col_offset=20)], [], None, None, lineno=22, col_offset=9), lineno=22, col_offset=4), Assign([Name('d', Store(), lineno=24, col_offset=4)], Dict([], [], lineno=24, col_offset=8), lineno=24, col_offset=4), Assign([Name('f', Store(), lineno=25, col_offset=4)], Call(Name('open', Load(), lineno=25, col_offset=8), [Name('patchlevel_h', Load(), lineno=25, col_offset=13)], [], None, None, lineno=25, col_offset=8), lineno=25, col_offset=4), TryFinally([For(Name('line', Store(), lineno=27, col_offset=12), Name('f', Load(), lineno=27, col_offset=20), [Assign([Name('m', Store(), lineno=28, col_offset=12)], Call(Attribute(Name('rx', Load(), lineno=28, col_offset=16), 'match', Load(), lineno=28, col_offset=16), [Name('line', Load(), lineno=28, col_offset=25)], [], None, None, lineno=28, col_offset=16), lineno=28, col_offset=12), If(Compare(Name('m', Load(), lineno=29, col_offset=15), [IsNot()], [Name('None', Load(), lineno=29, col_offset=24)], lineno=29, col_offset=15), [Assign([Tuple([Name('name', Store(), lineno=30, col_offset=16), Name('value', Store(), lineno=30, col_offset=22)], Store(), lineno=30, col_offset=16)], Call(Attribute(Name('m', Load(), lineno=30, col_offset=30), 'group', Load(), lineno=30, col_offset=30), [Num(1, lineno=30, col_offset=38), Num(2, lineno=30, col_offset=41)], [], None, None, lineno=30, col_offset=30), lineno=30, col_offset=16), Assign([Subscript(Name('d', Load(), lineno=31, col_offset=16), Index(Name('name', Load(), lineno=31, col_offset=18)), Store(), lineno=31, col_offset=16)], Name('value', Load(), lineno=31, col_offset=26), lineno=31, col_offset=16)], [], lineno=29, col_offset=12)], [], lineno=27, col_offset=8)], [Expr(Call(Attribute(Name('f', Load(), lineno=33, col_offset=8), 'close', Load(), lineno=33, col_offset=8), [], [], None, None, lineno=33, col_offset=8), lineno=33, col_offset=8)], lineno=26, col_offset=4), Assign([Name('release', Store(), lineno=35, col_offset=4), Name('version', Store(), lineno=35, col_offset=14)], BinOp(Str('%s.%s', lineno=35, col_offset=24), Mod(), Tuple([Subscript(Name('d', Load(), lineno=35, col_offset=35), Index(Str('PY_MAJOR_VERSION', lineno=35, col_offset=37)), Load(), lineno=35, col_offset=35), Subscript(Name('d', Load(), lineno=35, col_offset=58), Index(Str('PY_MINOR_VERSION', lineno=35, col_offset=60)), Load(), lineno=35, col_offset=58)], Load(), lineno=35, col_offset=35), lineno=35, col_offset=24), lineno=35, col_offset=4), Assign([Name('micro', Store(), lineno=36, col_offset=4)], Call(Name('int', Load(), lineno=36, col_offset=12), [Subscript(Name('d', Load(), lineno=36, col_offset=16), Index(Str('PY_MICRO_VERSION', lineno=36, col_offset=18)), Load(), lineno=36, col_offset=16)], [], None, None, lineno=36, col_offset=12), lineno=36, col_offset=4), If(Compare(Name('micro', Load(), lineno=37, col_offset=7), [NotEq()], [Num(0, lineno=37, col_offset=16)], lineno=37, col_offset=7), [AugAssign(Name('release', Store(), lineno=38, col_offset=8), Add(), BinOp(Str('.', lineno=38, col_offset=19), Add(), Call(Name('str', Load(), lineno=38, col_offset=25), [Name('micro', Load(), lineno=38, col_offset=29)], [], None, None, lineno=38, col_offset=25), lineno=38, col_offset=19), lineno=38, col_offset=8)], [], lineno=37, col_offset=4), Assign([Name('level', Store(), lineno=40, col_offset=4)], Subscript(Name('d', Load(), lineno=40, col_offset=12), Index(Str('PY_RELEASE_LEVEL', lineno=40, col_offset=14)), Load(), lineno=40, col_offset=12), lineno=40, col_offset=4), Assign([Name('suffixes', Store(), lineno=41, col_offset=4)], Dict([Str('PY_RELEASE_LEVEL_ALPHA', lineno=42, col_offset=8), Str('PY_RELEASE_LEVEL_BETA', lineno=43, col_offset=8), Str('PY_RELEASE_LEVEL_GAMMA', lineno=44, col_offset=8)], [Str('a', lineno=42, col_offset=34), Str('b', lineno=43, col_offset=34), Str('rc', lineno=44, col_offset=34)], lineno=41, col_offset=15), lineno=41, col_offset=4), If(Compare(Name('level', Load(), lineno=46, col_offset=7), [NotEq()], [Str('PY_RELEASE_LEVEL_FINAL', lineno=46, col_offset=16)], lineno=46, col_offset=7), [AugAssign(Name('release', Store(), lineno=47, col_offset=8), Add(), BinOp(Subscript(Name('suffixes', Load(), lineno=47, col_offset=19), Index(Name('level', Load(), lineno=47, col_offset=28)), Load(), lineno=47, col_offset=19), Add(), Call(Name('str', Load(), lineno=47, col_offset=37), [Call(Name('int', Load(), lineno=47, col_offset=41), [Subscript(Name('d', Load(), lineno=47, col_offset=45), Index(Str('PY_RELEASE_SERIAL', lineno=47, col_offset=47)), Load(), lineno=47, col_offset=45)], [], None, None, lineno=47, col_offset=41)], [], None, None, lineno=47, col_offset=37), lineno=47, col_offset=19), lineno=47, col_offset=8)], [], lineno=46, col_offset=4), Return(Tuple([Name('version', Load(), lineno=48, col_offset=11), Name('release', Load(), lineno=48, col_offset=20)], Load(), lineno=48, col_offset=11), lineno=48, col_offset=4)], [], lineno=17, col_offset=0), FunctionDef('get_sys_version_info', arguments([], None, None, []), [Assign([Tuple([Name('major', Store(), lineno=52, col_offset=4), Name('minor', Store(), lineno=52, col_offset=11), Name('micro', Store(), lineno=52, col_offset=18), Name('level', Store(), lineno=52, col_offset=25), Name('serial', Store(), lineno=52, col_offset=32)], Store(), lineno=52, col_offset=4)], Attribute(Name('sys', Load(), lineno=52, col_offset=41), 'version_info', Load(), lineno=52, col_offset=41), lineno=52, col_offset=4), Assign([Name('release', Store(), lineno=53, col_offset=4), Name('version', Store(), lineno=53, col_offset=14)], BinOp(Str('%s.%s', lineno=53, col_offset=24), Mod(), Tuple([Name('major', Load(), lineno=53, col_offset=35), Name('minor', Load(), lineno=53, col_offset=42)], Load(), lineno=53, col_offset=35), lineno=53, col_offset=24), lineno=53, col_offset=4), If(Name('micro', Load(), lineno=54, col_offset=7), [AugAssign(Name('release', Store(), lineno=55, col_offset=8), Add(), BinOp(Str('.%s', lineno=55, col_offset=19), Mod(), Name('micro', Load(), lineno=55, col_offset=27), lineno=55, col_offset=19), lineno=55, col_offset=8)], [], lineno=54, col_offset=4), If(Compare(Name('level', Load(), lineno=56, col_offset=7), [NotEq()], [Str('final', lineno=56, col_offset=16)], lineno=56, col_offset=7), [AugAssign(Name('release', Store(), lineno=57, col_offset=8), Add(), BinOp(Str('%s%s', lineno=57, col_offset=19), Mod(), Tuple([Subscript(Name('level', Load(), lineno=57, col_offset=29), Index(Num(0, lineno=57, col_offset=35)), Load(), lineno=57, col_offset=29), Name('serial', Load(), lineno=57, col_offset=39)], Load(), lineno=57, col_offset=29), lineno=57, col_offset=19), lineno=57, col_offset=8)], [], lineno=56, col_offset=4), Return(Tuple([Name('version', Load(), lineno=58, col_offset=11), Name('release', Load(), lineno=58, col_offset=20)], Load(), lineno=58, col_offset=11), lineno=58, col_offset=4)], [], lineno=51, col_offset=0), FunctionDef('get_version_info', arguments([], None, None, []), [TryExcept([Return(Call(Name('get_header_version_info', Load(), lineno=63, col_offset=15), [Str('.', lineno=63, col_offset=39)], [], None, None, lineno=63, col_offset=15), lineno=63, col_offset=8)], [ExceptHandler(Tuple([Name('IOError', Load(), lineno=64, col_offset=12), Name('OSError', Load(), lineno=64, col_offset=21)], Load(), lineno=64, col_offset=12), None, [Assign([Tuple([Name('version', Store(), lineno=65, col_offset=8), Name('release', Store(), lineno=65, col_offset=17)], Store(), lineno=65, col_offset=8)], Call(Name('get_sys_version_info', Load(), lineno=65, col_offset=27), [], [], None, None, lineno=65, col_offset=27), lineno=65, col_offset=8), Print(Attribute(Name('sys', Load(), lineno=66, col_offset=16), 'stderr', Load(), lineno=66, col_offset=16), [BinOp(Str("Can't get version info from Include/patchlevel.h, using version of this interpreter (%s).", lineno=66, col_offset=28), Mod(), Name('release', Load(), lineno=67, col_offset=58), lineno=66, col_offset=28)], True, lineno=66, col_offset=8), Return(Tuple([Name('version', Load(), lineno=68, col_offset=15), Name('release', Load(), lineno=68, col_offset=24)], Load(), lineno=68, col_offset=15), lineno=68, col_offset=8)], lineno=64, col_offset=4)], [], lineno=62, col_offset=4)], [], lineno=61, col_offset=0), If(Compare(Name('__name__', Load(), lineno=70, col_offset=3), [Eq()], [Str('__main__', lineno=70, col_offset=15)], lineno=70, col_offset=3), [Print(None, [Subscript(Call(Name('get_header_version_info', Load(), lineno=71, col_offset=10), [Str('.', lineno=71, col_offset=34)], [], None, None, lineno=71, col_offset=10), Index(Num(1, lineno=71, col_offset=39)), Load(), lineno=71, col_offset=10)], True, lineno=71, col_offset=4)], [], lineno=70, col_offset=0)])
