Module([Expr(Str("HTTP server base class.\n\nNote: the class in this module doesn't implement any HTTP request; see\nSimpleHTTPServer for simple implementations of GET, HEAD and POST\n(including CGI scripts).  It does, however, optionally implement HTTP/1.1\npersistent connections, as of version 0.3.\n\nContents:\n\n- BaseHTTPRequestHandler: HTTP request handler base class\n- test: test function\n\nXXX To do:\n\n- log requests even later (to capture byte count)\n- log user-agent header and other interesting goodies\n- send error log to separate file\n", lineno=18, col_offset=-1), lineno=18, col_offset=-1), Assign([Name('__version__', Store(), lineno=69, col_offset=0)], Str('0.3', lineno=69, col_offset=14), lineno=69, col_offset=0), Assign([Name('__all__', Store(), lineno=71, col_offset=0)], List([Str('HTTPServer', lineno=71, col_offset=11), Str('BaseHTTPRequestHandler', lineno=71, col_offset=25)], Load(), lineno=71, col_offset=10), lineno=71, col_offset=0), Import([alias('sys', None)], lineno=73, col_offset=0), Import([alias('time', None)], lineno=74, col_offset=0), Import([alias('socket', None)], lineno=75, col_offset=0), ImportFrom('warnings', [alias('filterwarnings', None), alias('catch_warnings', None)], 0, lineno=76, col_offset=0), With(Call(Name('catch_warnings', Load(), lineno=77, col_offset=5), [], [], None, None, lineno=77, col_offset=5), None, [If(Attribute(Name('sys', Load(), lineno=78, col_offset=7), 'py3kwarning', Load(), lineno=78, col_offset=7), [Expr(Call(Name('filterwarnings', Load(), lineno=79, col_offset=8), [Str('ignore', lineno=79, col_offset=23), Str('.*mimetools has been removed', lineno=79, col_offset=33), Name('DeprecationWarning', Load(), lineno=80, col_offset=24)], [], None, None, lineno=79, col_offset=8), lineno=79, col_offset=8)], [], lineno=78, col_offset=4), Import([alias('mimetools', None)], lineno=81, col_offset=4)], lineno=77, col_offset=5), Import([alias('SocketServer', None)], lineno=82, col_offset=0), Assign([Name('DEFAULT_ERROR_MESSAGE', Store(), lineno=85, col_offset=0)], Str('<head>\n<title>Error response</title>\n</head>\n<body>\n<h1>Error response</h1>\n<p>Error code %(code)d.\n<p>Message: %(message)s.\n<p>Error code explanation: %(code)s = %(explain)s.\n</body>\n', lineno=95, col_offset=-1), lineno=85, col_offset=0), Assign([Name('DEFAULT_ERROR_CONTENT_TYPE', Store(), lineno=97, col_offset=0)], Str('text/html', lineno=97, col_offset=29), lineno=97, col_offset=0), FunctionDef('_quote_html', arguments([Name('html', Param(), lineno=99, col_offset=16)], None, None, []), [Return(Call(Attribute(Call(Attribute(Call(Attribute(Name('html', Load(), lineno=100, col_offset=11), 'replace', Load(), lineno=100, col_offset=11), [Str('&', lineno=100, col_offset=24), Str('&amp;', lineno=100, col_offset=29)], [], None, None, lineno=100, col_offset=11), 'replace', Load(), lineno=100, col_offset=11), [Str('<', lineno=100, col_offset=46), Str('&lt;', lineno=100, col_offset=51)], [], None, None, lineno=100, col_offset=11), 'replace', Load(), lineno=100, col_offset=11), [Str('>', lineno=100, col_offset=67), Str('&gt;', lineno=100, col_offset=72)], [], None, None, lineno=100, col_offset=11), lineno=100, col_offset=4)], [], lineno=99, col_offset=0), ClassDef('HTTPServer', [Attribute(Name('SocketServer', Load(), lineno=102, col_offset=17), 'TCPServer', Load(), lineno=102, col_offset=17)], [Assign([Name('allow_reuse_address', Store(), lineno=104, col_offset=4)], Num(1, lineno=104, col_offset=26), lineno=104, col_offset=4), FunctionDef('server_bind', arguments([Name('self', Param(), lineno=106, col_offset=20)], None, None, []), [Expr(Str('Override server_bind to store the server name.', lineno=107, col_offset=8), lineno=107, col_offset=8), Expr(Call(Attribute(Attribute(Name('SocketServer', Load(), lineno=108, col_offset=8), 'TCPServer', Load(), lineno=108, col_offset=8), 'server_bind', Load(), lineno=108, col_offset=8), [Name('self', Load(), lineno=108, col_offset=43)], [], None, None, lineno=108, col_offset=8), lineno=108, col_offset=8), Assign([Tuple([Name('host', Store(), lineno=109, col_offset=8), Name('port', Store(), lineno=109, col_offset=14)], Store(), lineno=109, col_offset=8)], Subscript(Call(Attribute(Attribute(Name('self', Load(), lineno=109, col_offset=21), 'socket', Load(), lineno=109, col_offset=21), 'getsockname', Load(), lineno=109, col_offset=21), [], [], None, None, lineno=109, col_offset=21), Slice(None, Num(2, lineno=109, col_offset=48), None), Load(), lineno=109, col_offset=21), lineno=109, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=110, col_offset=8), 'server_name', Store(), lineno=110, col_offset=8)], Call(Attribute(Name('socket', Load(), lineno=110, col_offset=27), 'getfqdn', Load(), lineno=110, col_offset=27), [Name('host', Load(), lineno=110, col_offset=42)], [], None, None, lineno=110, col_offset=27), lineno=110, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=111, col_offset=8), 'server_port', Store(), lineno=111, col_offset=8)], Name('port', Load(), lineno=111, col_offset=27), lineno=111, col_offset=8)], [], lineno=106, col_offset=4)], [], lineno=102, col_offset=0), ClassDef('BaseHTTPRequestHandler', [Attribute(Name('SocketServer', Load(), lineno=114, col_offset=29), 'StreamRequestHandler', Load(), lineno=114, col_offset=29)], [Expr(Str('HTTP request handler base class.\n\n    The following explanation of HTTP serves to guide you through the\n    code as well as to expose any misunderstandings I may have about\n    HTTP (so you don\'t need to read the code to figure out I\'m wrong\n    :-).\n\n    HTTP (HyperText Transfer Protocol) is an extensible protocol on\n    top of a reliable stream transport (e.g. TCP/IP).  The protocol\n    recognizes three parts to a request:\n\n    1. One line identifying the request type and path\n    2. An optional set of RFC-822-style headers\n    3. An optional data part\n\n    The headers and data are separated by a blank line.\n\n    The first line of the request has the form\n\n    <command> <path> <version>\n\n    where <command> is a (case-sensitive) keyword such as GET or POST,\n    <path> is a string containing path information for the request,\n    and <version> should be the string "HTTP/1.0" or "HTTP/1.1".\n    <path> is encoded using the URL encoding scheme (using %xx to signify\n    the ASCII character with hex code xx).\n\n    The specification specifies that lines are separated by CRLF but\n    for compatibility with the widest range of clients recommends\n    servers also handle LF.  Similarly, whitespace in the request line\n    is treated sensibly (allowing multiple spaces between components\n    and allowing trailing whitespace).\n\n    Similarly, for output, lines ought to be separated by CRLF pairs\n    but most clients grok LF characters just fine.\n\n    If the first line of the request has the form\n\n    <command> <path>\n\n    (i.e. <version> is left out) then this is assumed to be an HTTP\n    0.9 request; this form has no optional headers and data part and\n    the reply consists of just the data.\n\n    The reply form of the HTTP 1.x protocol again has three parts:\n\n    1. One line giving the response code\n    2. An optional set of RFC-822-style headers\n    3. The data\n\n    Again, the headers and data are separated by a blank line.\n\n    The response code line has the form\n\n    <version> <responsecode> <responsestring>\n\n    where <version> is the protocol version ("HTTP/1.0" or "HTTP/1.1"),\n    <responsecode> is a 3-digit response code indicating success or\n    failure of the request, and <responsestring> is an optional\n    human-readable string explaining what the response code means.\n\n    This server parses the request and the headers, and then calls a\n    function specific to the request type (<command>).  Specifically,\n    a request SPAM will be handled by a method do_SPAM().  If no\n    such method exists the server sends an error response to the\n    client.  If it exists, it is called with no arguments:\n\n    do_SPAM()\n\n    Note that the request name is case sensitive (i.e. SPAM and spam\n    are different requests).\n\n    The various request details are stored in instance variables:\n\n    - client_address is the client IP address in the form (host,\n    port);\n\n    - command, path and version are the broken-down request line;\n\n    - headers is an instance of mimetools.Message (or a derived\n    class) containing the header information;\n\n    - rfile is a file object open for reading positioned at the\n    start of the optional input data part;\n\n    - wfile is a file object open for writing.\n\n    IT IS IMPORTANT TO ADHERE TO THE PROTOCOL FOR WRITING!\n\n    The first thing to be written must be the response line.  Then\n    follow 0 or more header lines, then a blank line, and then the\n    actual data (if any).  The meaning of the header lines depends on\n    the command executed by the server; in most cases, when data is\n    returned, there should be at least one header line of the form\n\n    Content-type: <type>/<subtype>\n\n    where <type> and <subtype> should be registered MIME types,\n    e.g. "text/html" or "text/plain".\n\n    ', lineno=216, col_offset=-1), lineno=216, col_offset=-1), Assign([Name('sys_version', Store(), lineno=219, col_offset=4)], BinOp(Str('Python/', lineno=219, col_offset=18), Add(), Subscript(Call(Attribute(Attribute(Name('sys', Load(), lineno=219, col_offset=30), 'version', Load(), lineno=219, col_offset=30), 'split', Load(), lineno=219, col_offset=30), [], [], None, None, lineno=219, col_offset=30), Index(Num(0, lineno=219, col_offset=50)), Load(), lineno=219, col_offset=30), lineno=219, col_offset=18), lineno=219, col_offset=4), Assign([Name('server_version', Store(), lineno=224, col_offset=4)], BinOp(Str('BaseHTTP/', lineno=224, col_offset=21), Add(), Name('__version__', Load(), lineno=224, col_offset=35), lineno=224, col_offset=21), lineno=224, col_offset=4), Assign([Name('default_request_version', Store(), lineno=230, col_offset=4)], Str('HTTP/0.9', lineno=230, col_offset=30), lineno=230, col_offset=4), FunctionDef('parse_request', arguments([Name('self', Param(), lineno=232, col_offset=22)], None, None, []), [Expr(Str('Parse a request (internal).\n\n        The request should be stored in self.raw_requestline; the results\n        are in self.command, self.path, self.request_version and\n        self.headers.\n\n        Return True for success, False for failure; on failure, an\n        error is sent back.\n\n        ', lineno=242, col_offset=-1), lineno=242, col_offset=-1), Assign([Attribute(Name('self', Load(), lineno=243, col_offset=8), 'command', Store(), lineno=243, col_offset=8)], Name('None', Load(), lineno=243, col_offset=23), lineno=243, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=244, col_offset=8), 'request_version', Store(), lineno=244, col_offset=8), Name('version', Store(), lineno=244, col_offset=31)], Attribute(Name('self', Load(), lineno=244, col_offset=41), 'default_request_version', Load(), lineno=244, col_offset=41), lineno=244, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=245, col_offset=8), 'close_connection', Store(), lineno=245, col_offset=8)], Num(1, lineno=245, col_offset=32), lineno=245, col_offset=8), Assign([Name('requestline', Store(), lineno=246, col_offset=8)], Attribute(Name('self', Load(), lineno=246, col_offset=22), 'raw_requestline', Load(), lineno=246, col_offset=22), lineno=246, col_offset=8), If(Compare(Subscript(Name('requestline', Load(), lineno=247, col_offset=11), Slice(Num(-2, lineno=247, col_offset=24), None, None), Load(), lineno=247, col_offset=11), [Eq()], [Str('\r\n', lineno=247, col_offset=31)], lineno=247, col_offset=11), [Assign([Name('requestline', Store(), lineno=248, col_offset=12)], Subscript(Name('requestline', Load(), lineno=248, col_offset=26), Slice(None, Num(-2, lineno=248, col_offset=40), None), Load(), lineno=248, col_offset=26), lineno=248, col_offset=12)], [If(Compare(Subscript(Name('requestline', Load(), lineno=249, col_offset=13), Slice(Num(-1, lineno=249, col_offset=26), None, None), Load(), lineno=249, col_offset=13), [Eq()], [Str('\n', lineno=249, col_offset=33)], lineno=249, col_offset=13), [Assign([Name('requestline', Store(), lineno=250, col_offset=12)], Subscript(Name('requestline', Load(), lineno=250, col_offset=26), Slice(None, Num(-1, lineno=250, col_offset=40), None), Load(), lineno=250, col_offset=26), lineno=250, col_offset=12)], [], lineno=249, col_offset=13)], lineno=247, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=251, col_offset=8), 'requestline', Store(), lineno=251, col_offset=8)], Name('requestline', Load(), lineno=251, col_offset=27), lineno=251, col_offset=8), Assign([Name('words', Store(), lineno=252, col_offset=8)], Call(Attribute(Name('requestline', Load(), lineno=252, col_offset=16), 'split', Load(), lineno=252, col_offset=16), [], [], None, None, lineno=252, col_offset=16), lineno=252, col_offset=8), If(Compare(Call(Name('len', Load(), lineno=253, col_offset=11), [Name('words', Load(), lineno=253, col_offset=15)], [], None, None, lineno=253, col_offset=11), [Eq()], [Num(3, lineno=253, col_offset=25)], lineno=253, col_offset=11), [Assign([List([Name('command', Store(), lineno=254, col_offset=13), Name('path', Store(), lineno=254, col_offset=22), Name('version', Store(), lineno=254, col_offset=28)], Store(), lineno=254, col_offset=12)], Name('words', Load(), lineno=254, col_offset=39), lineno=254, col_offset=12), If(Compare(Subscript(Name('version', Load(), lineno=255, col_offset=15), Slice(None, Num(5, lineno=255, col_offset=24), None), Load(), lineno=255, col_offset=15), [NotEq()], [Str('HTTP/', lineno=255, col_offset=30)], lineno=255, col_offset=15), [Expr(Call(Attribute(Name('self', Load(), lineno=256, col_offset=16), 'send_error', Load(), lineno=256, col_offset=16), [Num(400, lineno=256, col_offset=32), BinOp(Str('Bad request version (%r)', lineno=256, col_offset=37), Mod(), Name('version', Load(), lineno=256, col_offset=66), lineno=256, col_offset=37)], [], None, None, lineno=256, col_offset=16), lineno=256, col_offset=16), Return(Name('False', Load(), lineno=257, col_offset=23), lineno=257, col_offset=16)], [], lineno=255, col_offset=12), TryExcept([Assign([Name('base_version_number', Store(), lineno=259, col_offset=16)], Subscript(Call(Attribute(Name('version', Load(), lineno=259, col_offset=38), 'split', Load(), lineno=259, col_offset=38), [Str('/', lineno=259, col_offset=52), Num(1, lineno=259, col_offset=57)], [], None, None, lineno=259, col_offset=38), Index(Num(1, lineno=259, col_offset=60)), Load(), lineno=259, col_offset=38), lineno=259, col_offset=16), Assign([Name('version_number', Store(), lineno=260, col_offset=16)], Call(Attribute(Name('base_version_number', Load(), lineno=260, col_offset=33), 'split', Load(), lineno=260, col_offset=33), [Str('.', lineno=260, col_offset=59)], [], None, None, lineno=260, col_offset=33), lineno=260, col_offset=16), If(Compare(Call(Name('len', Load(), lineno=267, col_offset=19), [Name('version_number', Load(), lineno=267, col_offset=23)], [], None, None, lineno=267, col_offset=19), [NotEq()], [Num(2, lineno=267, col_offset=42)], lineno=267, col_offset=19), [Raise(Name('ValueError', Load(), lineno=268, col_offset=26), None, None, lineno=268, col_offset=20)], [], lineno=267, col_offset=16), Assign([Name('version_number', Store(), lineno=269, col_offset=16)], Tuple([Call(Name('int', Load(), lineno=269, col_offset=33), [Subscript(Name('version_number', Load(), lineno=269, col_offset=37), Index(Num(0, lineno=269, col_offset=52)), Load(), lineno=269, col_offset=37)], [], None, None, lineno=269, col_offset=33), Call(Name('int', Load(), lineno=269, col_offset=57), [Subscript(Name('version_number', Load(), lineno=269, col_offset=61), Index(Num(1, lineno=269, col_offset=76)), Load(), lineno=269, col_offset=61)], [], None, None, lineno=269, col_offset=57)], Load(), lineno=269, col_offset=33), lineno=269, col_offset=16)], [ExceptHandler(Tuple([Name('ValueError', Load(), lineno=270, col_offset=20), Name('IndexError', Load(), lineno=270, col_offset=32)], Load(), lineno=270, col_offset=20), None, [Expr(Call(Attribute(Name('self', Load(), lineno=271, col_offset=16), 'send_error', Load(), lineno=271, col_offset=16), [Num(400, lineno=271, col_offset=32), BinOp(Str('Bad request version (%r)', lineno=271, col_offset=37), Mod(), Name('version', Load(), lineno=271, col_offset=66), lineno=271, col_offset=37)], [], None, None, lineno=271, col_offset=16), lineno=271, col_offset=16), Return(Name('False', Load(), lineno=272, col_offset=23), lineno=272, col_offset=16)], lineno=270, col_offset=12)], [], lineno=258, col_offset=12), If(BoolOp(And(), [Compare(Name('version_number', Load(), lineno=273, col_offset=15), [GtE()], [Tuple([Num(1, lineno=273, col_offset=34), Num(1, lineno=273, col_offset=37)], Load(), lineno=273, col_offset=34)], lineno=273, col_offset=15), Compare(Attribute(Name('self', Load(), lineno=273, col_offset=44), 'protocol_version', Load(), lineno=273, col_offset=44), [GtE()], [Str('HTTP/1.1', lineno=273, col_offset=69)], lineno=273, col_offset=44)], lineno=273, col_offset=15), [Assign([Attribute(Name('self', Load(), lineno=274, col_offset=16), 'close_connection', Store(), lineno=274, col_offset=16)], Num(0, lineno=274, col_offset=40), lineno=274, col_offset=16)], [], lineno=273, col_offset=12), If(Compare(Name('version_number', Load(), lineno=275, col_offset=15), [GtE()], [Tuple([Num(2, lineno=275, col_offset=34), Num(0, lineno=275, col_offset=37)], Load(), lineno=275, col_offset=34)], lineno=275, col_offset=15), [Expr(Call(Attribute(Name('self', Load(), lineno=276, col_offset=16), 'send_error', Load(), lineno=276, col_offset=16), [Num(505, lineno=276, col_offset=32), BinOp(Str('Invalid HTTP Version (%s)', lineno=277, col_offset=26), Mod(), Name('base_version_number', Load(), lineno=277, col_offset=56), lineno=277, col_offset=26)], [], None, None, lineno=276, col_offset=16), lineno=276, col_offset=16), Return(Name('False', Load(), lineno=278, col_offset=23), lineno=278, col_offset=16)], [], lineno=275, col_offset=12)], [If(Compare(Call(Name('len', Load(), lineno=279, col_offset=13), [Name('words', Load(), lineno=279, col_offset=17)], [], None, None, lineno=279, col_offset=13), [Eq()], [Num(2, lineno=279, col_offset=27)], lineno=279, col_offset=13), [Assign([List([Name('command', Store(), lineno=280, col_offset=13), Name('path', Store(), lineno=280, col_offset=22)], Store(), lineno=280, col_offset=12)], Name('words', Load(), lineno=280, col_offset=30), lineno=280, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=281, col_offset=12), 'close_connection', Store(), lineno=281, col_offset=12)], Num(1, lineno=281, col_offset=36), lineno=281, col_offset=12), If(Compare(Name('command', Load(), lineno=282, col_offset=15), [NotEq()], [Str('GET', lineno=282, col_offset=26)], lineno=282, col_offset=15), [Expr(Call(Attribute(Name('self', Load(), lineno=283, col_offset=16), 'send_error', Load(), lineno=283, col_offset=16), [Num(400, lineno=283, col_offset=32), BinOp(Str('Bad HTTP/0.9 request type (%r)', lineno=284, col_offset=32), Mod(), Name('command', Load(), lineno=284, col_offset=67), lineno=284, col_offset=32)], [], None, None, lineno=283, col_offset=16), lineno=283, col_offset=16), Return(Name('False', Load(), lineno=285, col_offset=23), lineno=285, col_offset=16)], [], lineno=282, col_offset=12)], [If(UnaryOp(Not(), Name('words', Load(), lineno=286, col_offset=17), lineno=286, col_offset=13), [Return(Name('False', Load(), lineno=287, col_offset=19), lineno=287, col_offset=12)], [Expr(Call(Attribute(Name('self', Load(), lineno=289, col_offset=12), 'send_error', Load(), lineno=289, col_offset=12), [Num(400, lineno=289, col_offset=28), BinOp(Str('Bad request syntax (%r)', lineno=289, col_offset=33), Mod(), Name('requestline', Load(), lineno=289, col_offset=61), lineno=289, col_offset=33)], [], None, None, lineno=289, col_offset=12), lineno=289, col_offset=12), Return(Name('False', Load(), lineno=290, col_offset=19), lineno=290, col_offset=12)], lineno=286, col_offset=13)], lineno=279, col_offset=13)], lineno=253, col_offset=8), Assign([Tuple([Attribute(Name('self', Load(), lineno=291, col_offset=8), 'command', Store(), lineno=291, col_offset=8), Attribute(Name('self', Load(), lineno=291, col_offset=22), 'path', Store(), lineno=291, col_offset=22), Attribute(Name('self', Load(), lineno=291, col_offset=33), 'request_version', Store(), lineno=291, col_offset=33)], Store(), lineno=291, col_offset=8)], Tuple([Name('command', Load(), lineno=291, col_offset=56), Name('path', Load(), lineno=291, col_offset=65), Name('version', Load(), lineno=291, col_offset=71)], Load(), lineno=291, col_offset=56), lineno=291, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=294, col_offset=8), 'headers', Store(), lineno=294, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=294, col_offset=23), 'MessageClass', Load(), lineno=294, col_offset=23), [Attribute(Name('self', Load(), lineno=294, col_offset=41), 'rfile', Load(), lineno=294, col_offset=41), Num(0, lineno=294, col_offset=53)], [], None, None, lineno=294, col_offset=23), lineno=294, col_offset=8), Assign([Name('conntype', Store(), lineno=296, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=296, col_offset=19), 'headers', Load(), lineno=296, col_offset=19), 'get', Load(), lineno=296, col_offset=19), [Str('Connection', lineno=296, col_offset=36), Str('', lineno=296, col_offset=50)], [], None, None, lineno=296, col_offset=19), lineno=296, col_offset=8), If(Compare(Call(Attribute(Name('conntype', Load(), lineno=297, col_offset=11), 'lower', Load(), lineno=297, col_offset=11), [], [], None, None, lineno=297, col_offset=11), [Eq()], [Str('close', lineno=297, col_offset=31)], lineno=297, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=298, col_offset=12), 'close_connection', Store(), lineno=298, col_offset=12)], Num(1, lineno=298, col_offset=36), lineno=298, col_offset=12)], [If(BoolOp(And(), [Compare(Call(Attribute(Name('conntype', Load(), lineno=299, col_offset=14), 'lower', Load(), lineno=299, col_offset=14), [], [], None, None, lineno=299, col_offset=14), [Eq()], [Str('keep-alive', lineno=299, col_offset=34)], lineno=299, col_offset=14), Compare(Attribute(Name('self', Load(), lineno=300, col_offset=14), 'protocol_version', Load(), lineno=300, col_offset=14), [GtE()], [Str('HTTP/1.1', lineno=300, col_offset=39)], lineno=300, col_offset=14)], lineno=299, col_offset=14), [Assign([Attribute(Name('self', Load(), lineno=301, col_offset=12), 'close_connection', Store(), lineno=301, col_offset=12)], Num(0, lineno=301, col_offset=36), lineno=301, col_offset=12)], [], lineno=299, col_offset=13)], lineno=297, col_offset=8), Return(Name('True', Load(), lineno=302, col_offset=15), lineno=302, col_offset=8)], [], lineno=232, col_offset=4), FunctionDef('handle_one_request', arguments([Name('self', Param(), lineno=304, col_offset=27)], None, None, []), [Expr(Str("Handle a single HTTP request.\n\n        You normally don't need to override this method; see the class\n        __doc__ string for information on how to handle specific HTTP\n        commands such as GET and POST.\n\n        ", lineno=311, col_offset=-1), lineno=311, col_offset=-1), TryExcept([Assign([Attribute(Name('self', Load(), lineno=313, col_offset=12), 'raw_requestline', Store(), lineno=313, col_offset=12)], Call(Attribute(Attribute(Name('self', Load(), lineno=313, col_offset=35), 'rfile', Load(), lineno=313, col_offset=35), 'readline', Load(), lineno=313, col_offset=35), [], [], None, None, lineno=313, col_offset=35), lineno=313, col_offset=12), If(UnaryOp(Not(), Attribute(Name('self', Load(), lineno=314, col_offset=19), 'raw_requestline', Load(), lineno=314, col_offset=19), lineno=314, col_offset=15), [Assign([Attribute(Name('self', Load(), lineno=315, col_offset=16), 'close_connection', Store(), lineno=315, col_offset=16)], Num(1, lineno=315, col_offset=40), lineno=315, col_offset=16), Return(None, lineno=316, col_offset=16)], [], lineno=314, col_offset=12), If(UnaryOp(Not(), Call(Attribute(Name('self', Load(), lineno=317, col_offset=19), 'parse_request', Load(), lineno=317, col_offset=19), [], [], None, None, lineno=317, col_offset=19), lineno=317, col_offset=15), [Return(None, lineno=319, col_offset=16)], [], lineno=317, col_offset=12), Assign([Name('mname', Store(), lineno=320, col_offset=12)], BinOp(Str('do_', lineno=320, col_offset=20), Add(), Attribute(Name('self', Load(), lineno=320, col_offset=28), 'command', Load(), lineno=320, col_offset=28), lineno=320, col_offset=20), lineno=320, col_offset=12), If(UnaryOp(Not(), Call(Name('hasattr', Load(), lineno=321, col_offset=19), [Name('self', Load(), lineno=321, col_offset=27), Name('mname', Load(), lineno=321, col_offset=33)], [], None, None, lineno=321, col_offset=19), lineno=321, col_offset=15), [Expr(Call(Attribute(Name('self', Load(), lineno=322, col_offset=16), 'send_error', Load(), lineno=322, col_offset=16), [Num(501, lineno=322, col_offset=32), BinOp(Str('Unsupported method (%r)', lineno=322, col_offset=37), Mod(), Attribute(Name('self', Load(), lineno=322, col_offset=65), 'command', Load(), lineno=322, col_offset=65), lineno=322, col_offset=37)], [], None, None, lineno=322, col_offset=16), lineno=322, col_offset=16), Return(None, lineno=323, col_offset=16)], [], lineno=321, col_offset=12), Assign([Name('method', Store(), lineno=324, col_offset=12)], Call(Name('getattr', Load(), lineno=324, col_offset=21), [Name('self', Load(), lineno=324, col_offset=29), Name('mname', Load(), lineno=324, col_offset=35)], [], None, None, lineno=324, col_offset=21), lineno=324, col_offset=12), Expr(Call(Name('method', Load(), lineno=325, col_offset=12), [], [], None, None, lineno=325, col_offset=12), lineno=325, col_offset=12), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=326, col_offset=12), 'wfile', Load(), lineno=326, col_offset=12), 'flush', Load(), lineno=326, col_offset=12), [], [], None, None, lineno=326, col_offset=12), lineno=326, col_offset=12)], [ExceptHandler(Attribute(Name('socket', Load(), lineno=327, col_offset=15), 'timeout', Load(), lineno=327, col_offset=15), Name('e', Store(), lineno=327, col_offset=31), [Expr(Call(Attribute(Name('self', Load(), lineno=329, col_offset=12), 'log_error', Load(), lineno=329, col_offset=12), [Str('Request timed out: %r', lineno=329, col_offset=27), Name('e', Load(), lineno=329, col_offset=52)], [], None, None, lineno=329, col_offset=12), lineno=329, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=330, col_offset=12), 'close_connection', Store(), lineno=330, col_offset=12)], Num(1, lineno=330, col_offset=36), lineno=330, col_offset=12), Return(None, lineno=331, col_offset=12)], lineno=327, col_offset=8)], [], lineno=312, col_offset=8)], [], lineno=304, col_offset=4), FunctionDef('handle', arguments([Name('self', Param(), lineno=333, col_offset=15)], None, None, []), [Expr(Str('Handle multiple requests if necessary.', lineno=334, col_offset=8), lineno=334, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=335, col_offset=8), 'close_connection', Store(), lineno=335, col_offset=8)], Num(1, lineno=335, col_offset=32), lineno=335, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=337, col_offset=8), 'handle_one_request', Load(), lineno=337, col_offset=8), [], [], None, None, lineno=337, col_offset=8), lineno=337, col_offset=8), While(UnaryOp(Not(), Attribute(Name('self', Load(), lineno=338, col_offset=18), 'close_connection', Load(), lineno=338, col_offset=18), lineno=338, col_offset=14), [Expr(Call(Attribute(Name('self', Load(), lineno=339, col_offset=12), 'handle_one_request', Load(), lineno=339, col_offset=12), [], [], None, None, lineno=339, col_offset=12), lineno=339, col_offset=12)], [], lineno=338, col_offset=8)], [], lineno=333, col_offset=4), FunctionDef('send_error', arguments([Name('self', Param(), lineno=341, col_offset=19), Name('code', Param(), lineno=341, col_offset=25), Name('message', Param(), lineno=341, col_offset=31)], None, None, [Name('None', Load(), lineno=341, col_offset=39)]), [Expr(Str('Send and log an error reply.\n\n        Arguments are the error code, and a detailed message.\n        The detailed message defaults to the short entry matching the\n        response code.\n\n        This sends an error response (so it must be called before any\n        output has been generated), logs the error, and finally sends\n        a piece of HTML explaining the error to the user.\n\n        ', lineno=352, col_offset=-1), lineno=352, col_offset=-1), TryExcept([Assign([Tuple([Name('short', Store(), lineno=355, col_offset=12), Name('long', Store(), lineno=355, col_offset=19)], Store(), lineno=355, col_offset=12)], Subscript(Attribute(Name('self', Load(), lineno=355, col_offset=26), 'responses', Load(), lineno=355, col_offset=26), Index(Name('code', Load(), lineno=355, col_offset=41)), Load(), lineno=355, col_offset=26), lineno=355, col_offset=12)], [ExceptHandler(Name('KeyError', Load(), lineno=356, col_offset=15), None, [Assign([Tuple([Name('short', Store(), lineno=357, col_offset=12), Name('long', Store(), lineno=357, col_offset=19)], Store(), lineno=357, col_offset=12)], Tuple([Str('???', lineno=357, col_offset=26), Str('???', lineno=357, col_offset=33)], Load(), lineno=357, col_offset=26), lineno=357, col_offset=12)], lineno=356, col_offset=8)], [], lineno=354, col_offset=8), If(Compare(Name('message', Load(), lineno=358, col_offset=11), [Is()], [Name('None', Load(), lineno=358, col_offset=22)], lineno=358, col_offset=11), [Assign([Name('message', Store(), lineno=359, col_offset=12)], Name('short', Load(), lineno=359, col_offset=22), lineno=359, col_offset=12)], [], lineno=358, col_offset=8), Assign([Name('explain', Store(), lineno=360, col_offset=8)], Name('long', Load(), lineno=360, col_offset=18), lineno=360, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=361, col_offset=8), 'log_error', Load(), lineno=361, col_offset=8), [Str('code %d, message %s', lineno=361, col_offset=23), Name('code', Load(), lineno=361, col_offset=46), Name('message', Load(), lineno=361, col_offset=52)], [], None, None, lineno=361, col_offset=8), lineno=361, col_offset=8), Assign([Name('content', Store(), lineno=363, col_offset=8)], BinOp(Attribute(Name('self', Load(), lineno=363, col_offset=19), 'error_message_format', Load(), lineno=363, col_offset=19), Mod(), Dict([Str('code', lineno=364, col_offset=20), Str('message', lineno=364, col_offset=34), Str('explain', lineno=364, col_offset=67)], [Name('code', Load(), lineno=364, col_offset=28), Call(Name('_quote_html', Load(), lineno=364, col_offset=45), [Name('message', Load(), lineno=364, col_offset=57)], [], None, None, lineno=364, col_offset=45), Name('explain', Load(), lineno=364, col_offset=78)], lineno=364, col_offset=19), lineno=363, col_offset=19), lineno=363, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=365, col_offset=8), 'send_response', Load(), lineno=365, col_offset=8), [Name('code', Load(), lineno=365, col_offset=27), Name('message', Load(), lineno=365, col_offset=33)], [], None, None, lineno=365, col_offset=8), lineno=365, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=366, col_offset=8), 'send_header', Load(), lineno=366, col_offset=8), [Str('Content-Type', lineno=366, col_offset=25), Attribute(Name('self', Load(), lineno=366, col_offset=41), 'error_content_type', Load(), lineno=366, col_offset=41)], [], None, None, lineno=366, col_offset=8), lineno=366, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=367, col_offset=8), 'send_header', Load(), lineno=367, col_offset=8), [Str('Connection', lineno=367, col_offset=25), Str('close', lineno=367, col_offset=39)], [], None, None, lineno=367, col_offset=8), lineno=367, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=368, col_offset=8), 'end_headers', Load(), lineno=368, col_offset=8), [], [], None, None, lineno=368, col_offset=8), lineno=368, col_offset=8), If(BoolOp(And(), [Compare(Attribute(Name('self', Load(), lineno=369, col_offset=11), 'command', Load(), lineno=369, col_offset=11), [NotEq()], [Str('HEAD', lineno=369, col_offset=27)], lineno=369, col_offset=11), Compare(Name('code', Load(), lineno=369, col_offset=38), [GtE()], [Num(200, lineno=369, col_offset=46)], lineno=369, col_offset=38), Compare(Name('code', Load(), lineno=369, col_offset=54), [NotIn()], [Tuple([Num(204, lineno=369, col_offset=67), Num(304, lineno=369, col_offset=72)], Load(), lineno=369, col_offset=67)], lineno=369, col_offset=54)], lineno=369, col_offset=11), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=370, col_offset=12), 'wfile', Load(), lineno=370, col_offset=12), 'write', Load(), lineno=370, col_offset=12), [Name('content', Load(), lineno=370, col_offset=29)], [], None, None, lineno=370, col_offset=12), lineno=370, col_offset=12)], [], lineno=369, col_offset=8)], [], lineno=341, col_offset=4), Assign([Name('error_message_format', Store(), lineno=372, col_offset=4)], Name('DEFAULT_ERROR_MESSAGE', Load(), lineno=372, col_offset=27), lineno=372, col_offset=4), Assign([Name('error_content_type', Store(), lineno=373, col_offset=4)], Name('DEFAULT_ERROR_CONTENT_TYPE', Load(), lineno=373, col_offset=25), lineno=373, col_offset=4), FunctionDef('send_response', arguments([Name('self', Param(), lineno=375, col_offset=22), Name('code', Param(), lineno=375, col_offset=28), Name('message', Param(), lineno=375, col_offset=34)], None, None, [Name('None', Load(), lineno=375, col_offset=42)]), [Expr(Str('Send the response header and log the response code.\n\n        Also send two standard headers with the server software\n        version and the current date.\n\n        ', lineno=381, col_offset=-1), lineno=381, col_offset=-1), Expr(Call(Attribute(Name('self', Load(), lineno=382, col_offset=8), 'log_request', Load(), lineno=382, col_offset=8), [Name('code', Load(), lineno=382, col_offset=25)], [], None, None, lineno=382, col_offset=8), lineno=382, col_offset=8), If(Compare(Name('message', Load(), lineno=383, col_offset=11), [Is()], [Name('None', Load(), lineno=383, col_offset=22)], lineno=383, col_offset=11), [If(Compare(Name('code', Load(), lineno=384, col_offset=15), [In()], [Attribute(Name('self', Load(), lineno=384, col_offset=23), 'responses', Load(), lineno=384, col_offset=23)], lineno=384, col_offset=15), [Assign([Name('message', Store(), lineno=385, col_offset=16)], Subscript(Subscript(Attribute(Name('self', Load(), lineno=385, col_offset=26), 'responses', Load(), lineno=385, col_offset=26), Index(Name('code', Load(), lineno=385, col_offset=41)), Load(), lineno=385, col_offset=26), Index(Num(0, lineno=385, col_offset=47)), Load(), lineno=385, col_offset=26), lineno=385, col_offset=16)], [Assign([Name('message', Store(), lineno=387, col_offset=16)], Str('', lineno=387, col_offset=26), lineno=387, col_offset=16)], lineno=384, col_offset=12)], [], lineno=383, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=388, col_offset=11), 'request_version', Load(), lineno=388, col_offset=11), [NotEq()], [Str('HTTP/0.9', lineno=388, col_offset=35)], lineno=388, col_offset=11), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=389, col_offset=12), 'wfile', Load(), lineno=389, col_offset=12), 'write', Load(), lineno=389, col_offset=12), [BinOp(Str('%s %d %s\r\n', lineno=389, col_offset=29), Mod(), Tuple([Attribute(Name('self', Load(), lineno=390, col_offset=30), 'protocol_version', Load(), lineno=390, col_offset=30), Name('code', Load(), lineno=390, col_offset=53), Name('message', Load(), lineno=390, col_offset=59)], Load(), lineno=390, col_offset=30), lineno=389, col_offset=29)], [], None, None, lineno=389, col_offset=12), lineno=389, col_offset=12)], [], lineno=388, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=392, col_offset=8), 'send_header', Load(), lineno=392, col_offset=8), [Str('Server', lineno=392, col_offset=25), Call(Attribute(Name('self', Load(), lineno=392, col_offset=35), 'version_string', Load(), lineno=392, col_offset=35), [], [], None, None, lineno=392, col_offset=35)], [], None, None, lineno=392, col_offset=8), lineno=392, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=393, col_offset=8), 'send_header', Load(), lineno=393, col_offset=8), [Str('Date', lineno=393, col_offset=25), Call(Attribute(Name('self', Load(), lineno=393, col_offset=33), 'date_time_string', Load(), lineno=393, col_offset=33), [], [], None, None, lineno=393, col_offset=33)], [], None, None, lineno=393, col_offset=8), lineno=393, col_offset=8)], [], lineno=375, col_offset=4), FunctionDef('send_header', arguments([Name('self', Param(), lineno=395, col_offset=20), Name('keyword', Param(), lineno=395, col_offset=26), Name('value', Param(), lineno=395, col_offset=35)], None, None, []), [Expr(Str('Send a MIME header.', lineno=396, col_offset=8), lineno=396, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=397, col_offset=11), 'request_version', Load(), lineno=397, col_offset=11), [NotEq()], [Str('HTTP/0.9', lineno=397, col_offset=35)], lineno=397, col_offset=11), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=398, col_offset=12), 'wfile', Load(), lineno=398, col_offset=12), 'write', Load(), lineno=398, col_offset=12), [BinOp(Str('%s: %s\r\n', lineno=398, col_offset=29), Mod(), Tuple([Name('keyword', Load(), lineno=398, col_offset=45), Name('value', Load(), lineno=398, col_offset=54)], Load(), lineno=398, col_offset=45), lineno=398, col_offset=29)], [], None, None, lineno=398, col_offset=12), lineno=398, col_offset=12)], [], lineno=397, col_offset=8), If(Compare(Call(Attribute(Name('keyword', Load(), lineno=400, col_offset=11), 'lower', Load(), lineno=400, col_offset=11), [], [], None, None, lineno=400, col_offset=11), [Eq()], [Str('connection', lineno=400, col_offset=30)], lineno=400, col_offset=11), [If(Compare(Call(Attribute(Name('value', Load(), lineno=401, col_offset=15), 'lower', Load(), lineno=401, col_offset=15), [], [], None, None, lineno=401, col_offset=15), [Eq()], [Str('close', lineno=401, col_offset=32)], lineno=401, col_offset=15), [Assign([Attribute(Name('self', Load(), lineno=402, col_offset=16), 'close_connection', Store(), lineno=402, col_offset=16)], Num(1, lineno=402, col_offset=40), lineno=402, col_offset=16)], [If(Compare(Call(Attribute(Name('value', Load(), lineno=403, col_offset=17), 'lower', Load(), lineno=403, col_offset=17), [], [], None, None, lineno=403, col_offset=17), [Eq()], [Str('keep-alive', lineno=403, col_offset=34)], lineno=403, col_offset=17), [Assign([Attribute(Name('self', Load(), lineno=404, col_offset=16), 'close_connection', Store(), lineno=404, col_offset=16)], Num(0, lineno=404, col_offset=40), lineno=404, col_offset=16)], [], lineno=403, col_offset=17)], lineno=401, col_offset=12)], [], lineno=400, col_offset=8)], [], lineno=395, col_offset=4), FunctionDef('end_headers', arguments([Name('self', Param(), lineno=406, col_offset=20)], None, None, []), [Expr(Str('Send the blank line ending the MIME headers.', lineno=407, col_offset=8), lineno=407, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=408, col_offset=11), 'request_version', Load(), lineno=408, col_offset=11), [NotEq()], [Str('HTTP/0.9', lineno=408, col_offset=35)], lineno=408, col_offset=11), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=409, col_offset=12), 'wfile', Load(), lineno=409, col_offset=12), 'write', Load(), lineno=409, col_offset=12), [Str('\r\n', lineno=409, col_offset=29)], [], None, None, lineno=409, col_offset=12), lineno=409, col_offset=12)], [], lineno=408, col_offset=8)], [], lineno=406, col_offset=4), FunctionDef('log_request', arguments([Name('self', Param(), lineno=411, col_offset=20), Name('code', Param(), lineno=411, col_offset=26), Name('size', Param(), lineno=411, col_offset=36)], None, None, [Str('-', lineno=411, col_offset=31), Str('-', lineno=411, col_offset=41)]), [Expr(Str('Log an accepted request.\n\n        This is called by send_response().\n\n        ', lineno=416, col_offset=-1), lineno=416, col_offset=-1), Expr(Call(Attribute(Name('self', Load(), lineno=418, col_offset=8), 'log_message', Load(), lineno=418, col_offset=8), [Str('"%s" %s %s', lineno=418, col_offset=25), Attribute(Name('self', Load(), lineno=419, col_offset=25), 'requestline', Load(), lineno=419, col_offset=25), Call(Name('str', Load(), lineno=419, col_offset=43), [Name('code', Load(), lineno=419, col_offset=47)], [], None, None, lineno=419, col_offset=43), Call(Name('str', Load(), lineno=419, col_offset=54), [Name('size', Load(), lineno=419, col_offset=58)], [], None, None, lineno=419, col_offset=54)], [], None, None, lineno=418, col_offset=8), lineno=418, col_offset=8)], [], lineno=411, col_offset=4), FunctionDef('log_error', arguments([Name('self', Param(), lineno=421, col_offset=18), Name('format', Param(), lineno=421, col_offset=24)], 'args', None, []), [Expr(Str('Log an error.\n\n        This is called when a request cannot be fulfilled.  By\n        default it passes the message on to log_message().\n\n        Arguments are the same as for log_message().\n\n        XXX This should go to the separate error log.\n\n        ', lineno=431, col_offset=-1), lineno=431, col_offset=-1), Expr(Call(Attribute(Name('self', Load(), lineno=433, col_offset=8), 'log_message', Load(), lineno=433, col_offset=8), [Name('format', Load(), lineno=433, col_offset=25)], [], Name('args', Load(), lineno=433, col_offset=34), None, lineno=433, col_offset=8), lineno=433, col_offset=8)], [], lineno=421, col_offset=4), FunctionDef('log_message', arguments([Name('self', Param(), lineno=435, col_offset=20), Name('format', Param(), lineno=435, col_offset=26)], 'args', None, []), [Expr(Str("Log an arbitrary message.\n\n        This is used by all other logging functions.  Override\n        it if you have specific logging wishes.\n\n        The first argument, FORMAT, is a format string for the\n        message to be logged.  If the format string contains\n        any % escapes requiring parameters, they should be\n        specified as subsequent arguments (it's just like\n        printf!).\n\n        The client host and current date/time are prefixed to\n        every message.\n\n        ", lineno=450, col_offset=-1), lineno=450, col_offset=-1), Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=452, col_offset=8), 'stderr', Load(), lineno=452, col_offset=8), 'write', Load(), lineno=452, col_offset=8), [BinOp(Str('%s - - [%s] %s\n', lineno=452, col_offset=25), Mod(), Tuple([Call(Attribute(Name('self', Load(), lineno=453, col_offset=26), 'address_string', Load(), lineno=453, col_offset=26), [], [], None, None, lineno=453, col_offset=26), Call(Attribute(Name('self', Load(), lineno=454, col_offset=26), 'log_date_time_string', Load(), lineno=454, col_offset=26), [], [], None, None, lineno=454, col_offset=26), BinOp(Name('format', Load(), lineno=455, col_offset=26), Mod(), Name('args', Load(), lineno=455, col_offset=33), lineno=455, col_offset=26)], Load(), lineno=453, col_offset=26), lineno=452, col_offset=25)], [], None, None, lineno=452, col_offset=8), lineno=452, col_offset=8)], [], lineno=435, col_offset=4), FunctionDef('version_string', arguments([Name('self', Param(), lineno=457, col_offset=23)], None, None, []), [Expr(Str('Return the server software version string.', lineno=458, col_offset=8), lineno=458, col_offset=8), Return(BinOp(BinOp(Attribute(Name('self', Load(), lineno=459, col_offset=15), 'server_version', Load(), lineno=459, col_offset=15), Add(), Str(' ', lineno=459, col_offset=37), lineno=459, col_offset=15), Add(), Attribute(Name('self', Load(), lineno=459, col_offset=43), 'sys_version', Load(), lineno=459, col_offset=43), lineno=459, col_offset=41), lineno=459, col_offset=8)], [], lineno=457, col_offset=4), FunctionDef('date_time_string', arguments([Name('self', Param(), lineno=461, col_offset=25), Name('timestamp', Param(), lineno=461, col_offset=31)], None, None, [Name('None', Load(), lineno=461, col_offset=41)]), [Expr(Str('Return the current date and time formatted for a message header.', lineno=462, col_offset=8), lineno=462, col_offset=8), If(Compare(Name('timestamp', Load(), lineno=463, col_offset=11), [Is()], [Name('None', Load(), lineno=463, col_offset=24)], lineno=463, col_offset=11), [Assign([Name('timestamp', Store(), lineno=464, col_offset=12)], Call(Attribute(Name('time', Load(), lineno=464, col_offset=24), 'time', Load(), lineno=464, col_offset=24), [], [], None, None, lineno=464, col_offset=24), lineno=464, col_offset=12)], [], lineno=463, col_offset=8), Assign([Tuple([Name('year', Store(), lineno=465, col_offset=8), Name('month', Store(), lineno=465, col_offset=14), Name('day', Store(), lineno=465, col_offset=21), Name('hh', Store(), lineno=465, col_offset=26), Name('mm', Store(), lineno=465, col_offset=30), Name('ss', Store(), lineno=465, col_offset=34), Name('wd', Store(), lineno=465, col_offset=38), Name('y', Store(), lineno=465, col_offset=42), Name('z', Store(), lineno=465, col_offset=45)], Store(), lineno=465, col_offset=8)], Call(Attribute(Name('time', Load(), lineno=465, col_offset=49), 'gmtime', Load(), lineno=465, col_offset=49), [Name('timestamp', Load(), lineno=465, col_offset=61)], [], None, None, lineno=465, col_offset=49), lineno=465, col_offset=8), Assign([Name('s', Store(), lineno=466, col_offset=8)], BinOp(Str('%s, %02d %3s %4d %02d:%02d:%02d GMT', lineno=466, col_offset=12), Mod(), Tuple([Subscript(Attribute(Name('self', Load(), lineno=467, col_offset=16), 'weekdayname', Load(), lineno=467, col_offset=16), Index(Name('wd', Load(), lineno=467, col_offset=33)), Load(), lineno=467, col_offset=16), Name('day', Load(), lineno=468, col_offset=16), Subscript(Attribute(Name('self', Load(), lineno=468, col_offset=21), 'monthname', Load(), lineno=468, col_offset=21), Index(Name('month', Load(), lineno=468, col_offset=36)), Load(), lineno=468, col_offset=21), Name('year', Load(), lineno=468, col_offset=44), Name('hh', Load(), lineno=469, col_offset=16), Name('mm', Load(), lineno=469, col_offset=20), Name('ss', Load(), lineno=469, col_offset=24)], Load(), lineno=467, col_offset=16), lineno=466, col_offset=12), lineno=466, col_offset=8), Return(Name('s', Load(), lineno=470, col_offset=15), lineno=470, col_offset=8)], [], lineno=461, col_offset=4), FunctionDef('log_date_time_string', arguments([Name('self', Param(), lineno=472, col_offset=29)], None, None, []), [Expr(Str('Return the current time formatted for logging.', lineno=473, col_offset=8), lineno=473, col_offset=8), Assign([Name('now', Store(), lineno=474, col_offset=8)], Call(Attribute(Name('time', Load(), lineno=474, col_offset=14), 'time', Load(), lineno=474, col_offset=14), [], [], None, None, lineno=474, col_offset=14), lineno=474, col_offset=8), Assign([Tuple([Name('year', Store(), lineno=475, col_offset=8), Name('month', Store(), lineno=475, col_offset=14), Name('day', Store(), lineno=475, col_offset=21), Name('hh', Store(), lineno=475, col_offset=26), Name('mm', Store(), lineno=475, col_offset=30), Name('ss', Store(), lineno=475, col_offset=34), Name('x', Store(), lineno=475, col_offset=38), Name('y', Store(), lineno=475, col_offset=41), Name('z', Store(), lineno=475, col_offset=44)], Store(), lineno=475, col_offset=8)], Call(Attribute(Name('time', Load(), lineno=475, col_offset=48), 'localtime', Load(), lineno=475, col_offset=48), [Name('now', Load(), lineno=475, col_offset=63)], [], None, None, lineno=475, col_offset=48), lineno=475, col_offset=8), Assign([Name('s', Store(), lineno=476, col_offset=8)], BinOp(Str('%02d/%3s/%04d %02d:%02d:%02d', lineno=476, col_offset=12), Mod(), Tuple([Name('day', Load(), lineno=477, col_offset=16), Subscript(Attribute(Name('self', Load(), lineno=477, col_offset=21), 'monthname', Load(), lineno=477, col_offset=21), Index(Name('month', Load(), lineno=477, col_offset=36)), Load(), lineno=477, col_offset=21), Name('year', Load(), lineno=477, col_offset=44), Name('hh', Load(), lineno=477, col_offset=50), Name('mm', Load(), lineno=477, col_offset=54), Name('ss', Load(), lineno=477, col_offset=58)], Load(), lineno=477, col_offset=16), lineno=476, col_offset=12), lineno=476, col_offset=8), Return(Name('s', Load(), lineno=478, col_offset=15), lineno=478, col_offset=8)], [], lineno=472, col_offset=4), Assign([Name('weekdayname', Store(), lineno=480, col_offset=4)], List([Str('Mon', lineno=480, col_offset=19), Str('Tue', lineno=480, col_offset=26), Str('Wed', lineno=480, col_offset=33), Str('Thu', lineno=480, col_offset=40), Str('Fri', lineno=480, col_offset=47), Str('Sat', lineno=480, col_offset=54), Str('Sun', lineno=480, col_offset=61)], Load(), lineno=480, col_offset=18), lineno=480, col_offset=4), Assign([Name('monthname', Store(), lineno=482, col_offset=4)], List([Name('None', Load(), lineno=482, col_offset=17), Str('Jan', lineno=483, col_offset=17), Str('Feb', lineno=483, col_offset=24), Str('Mar', lineno=483, col_offset=31), Str('Apr', lineno=483, col_offset=38), Str('May', lineno=483, col_offset=45), Str('Jun', lineno=483, col_offset=52), Str('Jul', lineno=484, col_offset=17), Str('Aug', lineno=484, col_offset=24), Str('Sep', lineno=484, col_offset=31), Str('Oct', lineno=484, col_offset=38), Str('Nov', lineno=484, col_offset=45), Str('Dec', lineno=484, col_offset=52)], Load(), lineno=482, col_offset=16), lineno=482, col_offset=4), FunctionDef('address_string', arguments([Name('self', Param(), lineno=486, col_offset=23)], None, None, []), [Expr(Str('Return the client address formatted for logging.\n\n        This version looks up the full hostname using gethostbyaddr(),\n        and tries to find a name that contains at least one dot.\n\n        ', lineno=492, col_offset=-1), lineno=492, col_offset=-1), Assign([Tuple([Name('host', Store(), lineno=494, col_offset=8), Name('port', Store(), lineno=494, col_offset=14)], Store(), lineno=494, col_offset=8)], Subscript(Attribute(Name('self', Load(), lineno=494, col_offset=21), 'client_address', Load(), lineno=494, col_offset=21), Slice(None, Num(2, lineno=494, col_offset=42), None), Load(), lineno=494, col_offset=21), lineno=494, col_offset=8), Return(Call(Attribute(Name('socket', Load(), lineno=495, col_offset=15), 'getfqdn', Load(), lineno=495, col_offset=15), [Name('host', Load(), lineno=495, col_offset=30)], [], None, None, lineno=495, col_offset=15), lineno=495, col_offset=8)], [], lineno=486, col_offset=4), Assign([Name('protocol_version', Store(), lineno=501, col_offset=4)], Str('HTTP/1.0', lineno=501, col_offset=23), lineno=501, col_offset=4), Assign([Name('MessageClass', Store(), lineno=504, col_offset=4)], Attribute(Name('mimetools', Load(), lineno=504, col_offset=19), 'Message', Load(), lineno=504, col_offset=19), lineno=504, col_offset=4), Assign([Name('responses', Store(), lineno=509, col_offset=4)], Dict([Num(100, lineno=510, col_offset=8), Num(101, lineno=511, col_offset=8), Num(200, lineno=514, col_offset=8), Num(201, lineno=515, col_offset=8), Num(202, lineno=516, col_offset=8), Num(203, lineno=518, col_offset=8), Num(204, lineno=519, col_offset=8), Num(205, lineno=520, col_offset=8), Num(206, lineno=521, col_offset=8), Num(300, lineno=523, col_offset=8), Num(301, lineno=525, col_offset=8), Num(302, lineno=526, col_offset=8), Num(303, lineno=527, col_offset=8), Num(304, lineno=528, col_offset=8), Num(305, lineno=530, col_offset=8), Num(307, lineno=533, col_offset=8), Num(400, lineno=536, col_offset=8), Num(401, lineno=538, col_offset=8), Num(402, lineno=540, col_offset=8), Num(403, lineno=542, col_offset=8), Num(404, lineno=544, col_offset=8), Num(405, lineno=545, col_offset=8), Num(406, lineno=547, col_offset=8), Num(407, lineno=548, col_offset=8), Num(408, lineno=550, col_offset=8), Num(409, lineno=551, col_offset=8), Num(410, lineno=552, col_offset=8), Num(411, lineno=554, col_offset=8), Num(412, lineno=555, col_offset=8), Num(413, lineno=556, col_offset=8), Num(414, lineno=557, col_offset=8), Num(415, lineno=558, col_offset=8), Num(416, lineno=559, col_offset=8), Num(417, lineno=561, col_offset=8), Num(500, lineno=564, col_offset=8), Num(501, lineno=565, col_offset=8), Num(502, lineno=567, col_offset=8), Num(503, lineno=568, col_offset=8), Num(504, lineno=570, col_offset=8), Num(505, lineno=572, col_offset=8)], [Tuple([Str('Continue', lineno=510, col_offset=14), Str('Request received, please continue', lineno=510, col_offset=26)], Load(), lineno=510, col_offset=14), Tuple([Str('Switching Protocols', lineno=511, col_offset=14), Str('Switching to new protocol; obey Upgrade header', lineno=512, col_offset=14)], Load(), lineno=511, col_offset=14), Tuple([Str('OK', lineno=514, col_offset=14), Str('Request fulfilled, document follows', lineno=514, col_offset=20)], Load(), lineno=514, col_offset=14), Tuple([Str('Created', lineno=515, col_offset=14), Str('Document created, URL follows', lineno=515, col_offset=25)], Load(), lineno=515, col_offset=14), Tuple([Str('Accepted', lineno=516, col_offset=14), Str('Request accepted, processing continues off-line', lineno=517, col_offset=14)], Load(), lineno=516, col_offset=14), Tuple([Str('Non-Authoritative Information', lineno=518, col_offset=14), Str('Request fulfilled from cache', lineno=518, col_offset=47)], Load(), lineno=518, col_offset=14), Tuple([Str('No Content', lineno=519, col_offset=14), Str('Request fulfilled, nothing follows', lineno=519, col_offset=28)], Load(), lineno=519, col_offset=14), Tuple([Str('Reset Content', lineno=520, col_offset=14), Str('Clear input form for further input.', lineno=520, col_offset=31)], Load(), lineno=520, col_offset=14), Tuple([Str('Partial Content', lineno=521, col_offset=14), Str('Partial content follows.', lineno=521, col_offset=33)], Load(), lineno=521, col_offset=14), Tuple([Str('Multiple Choices', lineno=523, col_offset=14), Str('Object has several resources -- see URI list', lineno=524, col_offset=14)], Load(), lineno=523, col_offset=14), Tuple([Str('Moved Permanently', lineno=525, col_offset=14), Str('Object moved permanently -- see URI list', lineno=525, col_offset=35)], Load(), lineno=525, col_offset=14), Tuple([Str('Found', lineno=526, col_offset=14), Str('Object moved temporarily -- see URI list', lineno=526, col_offset=23)], Load(), lineno=526, col_offset=14), Tuple([Str('See Other', lineno=527, col_offset=14), Str('Object moved -- see Method and URL list', lineno=527, col_offset=27)], Load(), lineno=527, col_offset=14), Tuple([Str('Not Modified', lineno=528, col_offset=14), Str('Document has not changed since given time', lineno=529, col_offset=14)], Load(), lineno=528, col_offset=14), Tuple([Str('Use Proxy', lineno=530, col_offset=14), Str('You must use proxy specified in Location to access this resource.', lineno=531, col_offset=14)], Load(), lineno=530, col_offset=14), Tuple([Str('Temporary Redirect', lineno=533, col_offset=14), Str('Object moved temporarily -- see URI list', lineno=534, col_offset=14)], Load(), lineno=533, col_offset=14), Tuple([Str('Bad Request', lineno=536, col_offset=14), Str('Bad request syntax or unsupported method', lineno=537, col_offset=14)], Load(), lineno=536, col_offset=14), Tuple([Str('Unauthorized', lineno=538, col_offset=14), Str('No permission -- see authorization schemes', lineno=539, col_offset=14)], Load(), lineno=538, col_offset=14), Tuple([Str('Payment Required', lineno=540, col_offset=14), Str('No payment -- see charging schemes', lineno=541, col_offset=14)], Load(), lineno=540, col_offset=14), Tuple([Str('Forbidden', lineno=542, col_offset=14), Str('Request forbidden -- authorization will not help', lineno=543, col_offset=14)], Load(), lineno=542, col_offset=14), Tuple([Str('Not Found', lineno=544, col_offset=14), Str('Nothing matches the given URI', lineno=544, col_offset=27)], Load(), lineno=544, col_offset=14), Tuple([Str('Method Not Allowed', lineno=545, col_offset=14), Str('Specified method is invalid for this resource.', lineno=546, col_offset=14)], Load(), lineno=545, col_offset=14), Tuple([Str('Not Acceptable', lineno=547, col_offset=14), Str('URI not available in preferred format.', lineno=547, col_offset=32)], Load(), lineno=547, col_offset=14), Tuple([Str('Proxy Authentication Required', lineno=548, col_offset=14), Str('You must authenticate with this proxy before proceeding.', lineno=548, col_offset=47)], Load(), lineno=548, col_offset=14), Tuple([Str('Request Timeout', lineno=550, col_offset=14), Str('Request timed out; try again later.', lineno=550, col_offset=33)], Load(), lineno=550, col_offset=14), Tuple([Str('Conflict', lineno=551, col_offset=14), Str('Request conflict.', lineno=551, col_offset=26)], Load(), lineno=551, col_offset=14), Tuple([Str('Gone', lineno=552, col_offset=14), Str('URI no longer exists and has been permanently removed.', lineno=553, col_offset=14)], Load(), lineno=552, col_offset=14), Tuple([Str('Length Required', lineno=554, col_offset=14), Str('Client must specify Content-Length.', lineno=554, col_offset=33)], Load(), lineno=554, col_offset=14), Tuple([Str('Precondition Failed', lineno=555, col_offset=14), Str('Precondition in headers is false.', lineno=555, col_offset=37)], Load(), lineno=555, col_offset=14), Tuple([Str('Request Entity Too Large', lineno=556, col_offset=14), Str('Entity is too large.', lineno=556, col_offset=42)], Load(), lineno=556, col_offset=14), Tuple([Str('Request-URI Too Long', lineno=557, col_offset=14), Str('URI is too long.', lineno=557, col_offset=38)], Load(), lineno=557, col_offset=14), Tuple([Str('Unsupported Media Type', lineno=558, col_offset=14), Str('Entity body in unsupported format.', lineno=558, col_offset=40)], Load(), lineno=558, col_offset=14), Tuple([Str('Requested Range Not Satisfiable', lineno=559, col_offset=14), Str('Cannot satisfy request range.', lineno=560, col_offset=14)], Load(), lineno=559, col_offset=14), Tuple([Str('Expectation Failed', lineno=561, col_offset=14), Str('Expect condition could not be satisfied.', lineno=562, col_offset=14)], Load(), lineno=561, col_offset=14), Tuple([Str('Internal Server Error', lineno=564, col_offset=14), Str('Server got itself in trouble', lineno=564, col_offset=39)], Load(), lineno=564, col_offset=14), Tuple([Str('Not Implemented', lineno=565, col_offset=14), Str('Server does not support this operation', lineno=566, col_offset=14)], Load(), lineno=565, col_offset=14), Tuple([Str('Bad Gateway', lineno=567, col_offset=14), Str('Invalid responses from another server/proxy.', lineno=567, col_offset=29)], Load(), lineno=567, col_offset=14), Tuple([Str('Service Unavailable', lineno=568, col_offset=14), Str('The server cannot process the request due to a high load', lineno=569, col_offset=14)], Load(), lineno=568, col_offset=14), Tuple([Str('Gateway Timeout', lineno=570, col_offset=14), Str('The gateway server did not receive a timely response', lineno=571, col_offset=14)], Load(), lineno=570, col_offset=14), Tuple([Str('HTTP Version Not Supported', lineno=572, col_offset=14), Str('Cannot fulfill request.', lineno=572, col_offset=44)], Load(), lineno=572, col_offset=14)], lineno=509, col_offset=16), lineno=509, col_offset=4)], [], lineno=114, col_offset=0), FunctionDef('test', arguments([Name('HandlerClass', Param(), lineno=576, col_offset=9), Name('ServerClass', Param(), lineno=577, col_offset=9), Name('protocol', Param(), lineno=577, col_offset=35)], None, None, [Name('BaseHTTPRequestHandler', Load(), lineno=576, col_offset=24), Name('HTTPServer', Load(), lineno=577, col_offset=23), Str('HTTP/1.0', lineno=577, col_offset=44)]), [Expr(Str('Test the HTTP request handler class.\n\n    This runs an HTTP server on port 8000 (or the first command line\n    argument).\n\n    ', lineno=583, col_offset=-1), lineno=583, col_offset=-1), If(Subscript(Attribute(Name('sys', Load(), lineno=585, col_offset=7), 'argv', Load(), lineno=585, col_offset=7), Slice(Num(1, lineno=585, col_offset=16), None, None), Load(), lineno=585, col_offset=7), [Assign([Name('port', Store(), lineno=586, col_offset=8)], Call(Name('int', Load(), lineno=586, col_offset=15), [Subscript(Attribute(Name('sys', Load(), lineno=586, col_offset=19), 'argv', Load(), lineno=586, col_offset=19), Index(Num(1, lineno=586, col_offset=28)), Load(), lineno=586, col_offset=19)], [], None, None, lineno=586, col_offset=15), lineno=586, col_offset=8)], [Assign([Name('port', Store(), lineno=588, col_offset=8)], Num(8000, lineno=588, col_offset=15), lineno=588, col_offset=8)], lineno=585, col_offset=4), Assign([Name('server_address', Store(), lineno=589, col_offset=4)], Tuple([Str('', lineno=589, col_offset=22), Name('port', Load(), lineno=589, col_offset=26)], Load(), lineno=589, col_offset=22), lineno=589, col_offset=4), Assign([Attribute(Name('HandlerClass', Load(), lineno=591, col_offset=4), 'protocol_version', Store(), lineno=591, col_offset=4)], Name('protocol', Load(), lineno=591, col_offset=36), lineno=591, col_offset=4), Assign([Name('httpd', Store(), lineno=592, col_offset=4)], Call(Name('ServerClass', Load(), lineno=592, col_offset=12), [Name('server_address', Load(), lineno=592, col_offset=24), Name('HandlerClass', Load(), lineno=592, col_offset=40)], [], None, None, lineno=592, col_offset=12), lineno=592, col_offset=4), Assign([Name('sa', Store(), lineno=594, col_offset=4)], Call(Attribute(Attribute(Name('httpd', Load(), lineno=594, col_offset=9), 'socket', Load(), lineno=594, col_offset=9), 'getsockname', Load(), lineno=594, col_offset=9), [], [], None, None, lineno=594, col_offset=9), lineno=594, col_offset=4), Print(None, [Str('Serving HTTP on', lineno=595, col_offset=10), Subscript(Name('sa', Load(), lineno=595, col_offset=29), Index(Num(0, lineno=595, col_offset=32)), Load(), lineno=595, col_offset=29), Str('port', lineno=595, col_offset=36), Subscript(Name('sa', Load(), lineno=595, col_offset=44), Index(Num(1, lineno=595, col_offset=47)), Load(), lineno=595, col_offset=44), Str('...', lineno=595, col_offset=51)], True, lineno=595, col_offset=4), Expr(Call(Attribute(Name('httpd', Load(), lineno=596, col_offset=4), 'serve_forever', Load(), lineno=596, col_offset=4), [], [], None, None, lineno=596, col_offset=4), lineno=596, col_offset=4)], [], lineno=576, col_offset=0), If(Compare(Name('__name__', Load(), lineno=599, col_offset=3), [Eq()], [Str('__main__', lineno=599, col_offset=15)], lineno=599, col_offset=3), [Expr(Call(Name('test', Load(), lineno=600, col_offset=4), [], [], None, None, lineno=600, col_offset=4), lineno=600, col_offset=4)], [], lineno=599, col_offset=0)])
