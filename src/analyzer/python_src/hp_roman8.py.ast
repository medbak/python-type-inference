Module([Expr(Str(" Python Character Mapping Codec generated from 'hp_roman8.txt' with gencodec.py.\n\n    Based on data from ftp://dkuug.dk/i18n/charmaps/HP-ROMAN8 (Keld Simonsen)\n\n    Original source: LaserJet IIP Printer User's Manual HP part no\n    33471-90901, Hewlet-Packard, June 1989.\n\n", lineno=8, col_offset=-1), lineno=8, col_offset=-1), Import([alias('codecs', None)], lineno=10, col_offset=0), ClassDef('Codec', [Attribute(Name('codecs', Load(), lineno=14, col_offset=12), 'Codec', Load(), lineno=14, col_offset=12)], [FunctionDef('encode', arguments([Name('self', Param(), lineno=16, col_offset=15), Name('input', Param(), lineno=16, col_offset=20), Name('errors', Param(), lineno=16, col_offset=26)], None, None, [Str('strict', lineno=16, col_offset=33)]), [Return(Call(Attribute(Name('codecs', Load(), lineno=17, col_offset=15), 'charmap_encode', Load(), lineno=17, col_offset=15), [Name('input', Load(), lineno=17, col_offset=37), Name('errors', Load(), lineno=17, col_offset=43), Name('encoding_map', Load(), lineno=17, col_offset=50)], [], None, None, lineno=17, col_offset=15), lineno=17, col_offset=8)], [], lineno=16, col_offset=4), FunctionDef('decode', arguments([Name('self', Param(), lineno=19, col_offset=15), Name('input', Param(), lineno=19, col_offset=20), Name('errors', Param(), lineno=19, col_offset=26)], None, None, [Str('strict', lineno=19, col_offset=33)]), [Return(Call(Attribute(Name('codecs', Load(), lineno=20, col_offset=15), 'charmap_decode', Load(), lineno=20, col_offset=15), [Name('input', Load(), lineno=20, col_offset=37), Name('errors', Load(), lineno=20, col_offset=43), Name('decoding_map', Load(), lineno=20, col_offset=50)], [], None, None, lineno=20, col_offset=15), lineno=20, col_offset=8)], [], lineno=19, col_offset=4)], [], lineno=14, col_offset=0), ClassDef('IncrementalEncoder', [Attribute(Name('codecs', Load(), lineno=22, col_offset=25), 'IncrementalEncoder', Load(), lineno=22, col_offset=25)], [FunctionDef('encode', arguments([Name('self', Param(), lineno=23, col_offset=15), Name('input', Param(), lineno=23, col_offset=21), Name('final', Param(), lineno=23, col_offset=28)], None, None, [Name('False', Load(), lineno=23, col_offset=34)]), [Return(Subscript(Call(Attribute(Name('codecs', Load(), lineno=24, col_offset=15), 'charmap_encode', Load(), lineno=24, col_offset=15), [Name('input', Load(), lineno=24, col_offset=37), Attribute(Name('self', Load(), lineno=24, col_offset=43), 'errors', Load(), lineno=24, col_offset=43), Name('encoding_map', Load(), lineno=24, col_offset=55)], [], None, None, lineno=24, col_offset=15), Index(Num(0, lineno=24, col_offset=69)), Load(), lineno=24, col_offset=15), lineno=24, col_offset=8)], [], lineno=23, col_offset=4)], [], lineno=22, col_offset=0), ClassDef('IncrementalDecoder', [Attribute(Name('codecs', Load(), lineno=26, col_offset=25), 'IncrementalDecoder', Load(), lineno=26, col_offset=25)], [FunctionDef('decode', arguments([Name('self', Param(), lineno=27, col_offset=15), Name('input', Param(), lineno=27, col_offset=21), Name('final', Param(), lineno=27, col_offset=28)], None, None, [Name('False', Load(), lineno=27, col_offset=34)]), [Return(Subscript(Call(Attribute(Name('codecs', Load(), lineno=28, col_offset=15), 'charmap_decode', Load(), lineno=28, col_offset=15), [Name('input', Load(), lineno=28, col_offset=37), Attribute(Name('self', Load(), lineno=28, col_offset=43), 'errors', Load(), lineno=28, col_offset=43), Name('decoding_map', Load(), lineno=28, col_offset=55)], [], None, None, lineno=28, col_offset=15), Index(Num(0, lineno=28, col_offset=69)), Load(), lineno=28, col_offset=15), lineno=28, col_offset=8)], [], lineno=27, col_offset=4)], [], lineno=26, col_offset=0), ClassDef('StreamWriter', [Name('Codec', Load(), lineno=30, col_offset=19), Attribute(Name('codecs', Load(), lineno=30, col_offset=25), 'StreamWriter', Load(), lineno=30, col_offset=25)], [Pass( lineno=31, col_offset=4)], [], lineno=30, col_offset=0), ClassDef('StreamReader', [Name('Codec', Load(), lineno=33, col_offset=19), Attribute(Name('codecs', Load(), lineno=33, col_offset=25), 'StreamReader', Load(), lineno=33, col_offset=25)], [Pass( lineno=34, col_offset=4)], [], lineno=33, col_offset=0), FunctionDef('getregentry', arguments([], None, None, []), [Return(Call(Attribute(Name('codecs', Load(), lineno=39, col_offset=11), 'CodecInfo', Load(), lineno=39, col_offset=11), [], [keyword('name', Str('hp-roman8', lineno=40, col_offset=13)), keyword('encode', Attribute(Call(Name('Codec', Load(), lineno=41, col_offset=15), [], [], None, None, lineno=41, col_offset=15), 'encode', Load(), lineno=41, col_offset=15)), keyword('decode', Attribute(Call(Name('Codec', Load(), lineno=42, col_offset=15), [], [], None, None, lineno=42, col_offset=15), 'decode', Load(), lineno=42, col_offset=15)), keyword('incrementalencoder', Name('IncrementalEncoder', Load(), lineno=43, col_offset=27)), keyword('incrementaldecoder', Name('IncrementalDecoder', Load(), lineno=44, col_offset=27)), keyword('streamwriter', Name('StreamWriter', Load(), lineno=45, col_offset=21)), keyword('streamreader', Name('StreamReader', Load(), lineno=46, col_offset=21))], None, None, lineno=39, col_offset=11), lineno=39, col_offset=4)], [], lineno=38, col_offset=0), Assign([Name('decoding_map', Store(), lineno=51, col_offset=0)], Call(Attribute(Name('codecs', Load(), lineno=51, col_offset=15), 'make_identity_dict', Load(), lineno=51, col_offset=15), [Call(Name('range', Load(), lineno=51, col_offset=41), [Num(256, lineno=51, col_offset=47)], [], None, None, lineno=51, col_offset=41)], [], None, None, lineno=51, col_offset=15), lineno=51, col_offset=0), Expr(Call(Attribute(Name('decoding_map', Load(), lineno=52, col_offset=0), 'update', Load(), lineno=52, col_offset=0), [Dict([Num(161, lineno=53, col_offset=8), Num(162, lineno=54, col_offset=8), Num(163, lineno=55, col_offset=8), Num(164, lineno=56, col_offset=8), Num(165, lineno=57, col_offset=8), Num(166, lineno=58, col_offset=8), Num(167, lineno=59, col_offset=8), Num(168, lineno=60, col_offset=8), Num(169, lineno=61, col_offset=8), Num(170, lineno=62, col_offset=8), Num(171, lineno=63, col_offset=8), Num(172, lineno=64, col_offset=8), Num(173, lineno=65, col_offset=8), Num(174, lineno=66, col_offset=8), Num(175, lineno=67, col_offset=8), Num(176, lineno=68, col_offset=8), Num(177, lineno=69, col_offset=8), Num(178, lineno=70, col_offset=8), Num(179, lineno=71, col_offset=8), Num(180, lineno=72, col_offset=8), Num(181, lineno=73, col_offset=8), Num(182, lineno=74, col_offset=8), Num(183, lineno=75, col_offset=8), Num(184, lineno=76, col_offset=8), Num(185, lineno=77, col_offset=8), Num(186, lineno=78, col_offset=8), Num(187, lineno=79, col_offset=8), Num(188, lineno=80, col_offset=8), Num(189, lineno=81, col_offset=8), Num(190, lineno=82, col_offset=8), Num(191, lineno=83, col_offset=8), Num(192, lineno=84, col_offset=8), Num(193, lineno=85, col_offset=8), Num(194, lineno=86, col_offset=8), Num(195, lineno=87, col_offset=8), Num(196, lineno=88, col_offset=8), Num(197, lineno=89, col_offset=8), Num(198, lineno=90, col_offset=8), Num(199, lineno=91, col_offset=8), Num(200, lineno=92, col_offset=8), Num(201, lineno=93, col_offset=8), Num(202, lineno=94, col_offset=8), Num(203, lineno=95, col_offset=8), Num(204, lineno=96, col_offset=8), Num(205, lineno=97, col_offset=8), Num(206, lineno=98, col_offset=8), Num(207, lineno=99, col_offset=8), Num(208, lineno=100, col_offset=8), Num(209, lineno=101, col_offset=8), Num(210, lineno=102, col_offset=8), Num(211, lineno=103, col_offset=8), Num(212, lineno=104, col_offset=8), Num(213, lineno=105, col_offset=8), Num(214, lineno=106, col_offset=8), Num(215, lineno=107, col_offset=8), Num(216, lineno=108, col_offset=8), Num(217, lineno=109, col_offset=8), Num(218, lineno=110, col_offset=8), Num(219, lineno=111, col_offset=8), Num(220, lineno=112, col_offset=8), Num(221, lineno=113, col_offset=8), Num(222, lineno=114, col_offset=8), Num(223, lineno=115, col_offset=8), Num(224, lineno=116, col_offset=8), Num(225, lineno=117, col_offset=8), Num(226, lineno=118, col_offset=8), Num(227, lineno=119, col_offset=8), Num(228, lineno=120, col_offset=8), Num(229, lineno=121, col_offset=8), Num(230, lineno=122, col_offset=8), Num(231, lineno=123, col_offset=8), Num(232, lineno=124, col_offset=8), Num(233, lineno=125, col_offset=8), Num(234, lineno=126, col_offset=8), Num(235, lineno=127, col_offset=8), Num(236, lineno=128, col_offset=8), Num(237, lineno=129, col_offset=8), Num(238, lineno=130, col_offset=8), Num(239, lineno=131, col_offset=8), Num(240, lineno=132, col_offset=8), Num(241, lineno=133, col_offset=8), Num(242, lineno=134, col_offset=8), Num(243, lineno=135, col_offset=8), Num(244, lineno=136, col_offset=8), Num(245, lineno=137, col_offset=8), Num(246, lineno=138, col_offset=8), Num(247, lineno=139, col_offset=8), Num(248, lineno=140, col_offset=8), Num(249, lineno=141, col_offset=8), Num(250, lineno=142, col_offset=8), Num(251, lineno=143, col_offset=8), Num(252, lineno=144, col_offset=8), Num(253, lineno=145, col_offset=8), Num(254, lineno=146, col_offset=8), Num(255, lineno=147, col_offset=8)], [Num(192, lineno=53, col_offset=16), Num(194, lineno=54, col_offset=16), Num(200, lineno=55, col_offset=16), Num(202, lineno=56, col_offset=16), Num(203, lineno=57, col_offset=16), Num(206, lineno=58, col_offset=16), Num(207, lineno=59, col_offset=16), Num(180, lineno=60, col_offset=16), Num(715, lineno=61, col_offset=16), Num(710, lineno=62, col_offset=16), Num(168, lineno=63, col_offset=16), Num(732, lineno=64, col_offset=16), Num(217, lineno=65, col_offset=16), Num(219, lineno=66, col_offset=16), Num(8356, lineno=67, col_offset=16), Num(175, lineno=68, col_offset=16), Num(221, lineno=69, col_offset=16), Num(253, lineno=70, col_offset=16), Num(176, lineno=71, col_offset=16), Num(199, lineno=72, col_offset=16), Num(231, lineno=73, col_offset=16), Num(209, lineno=74, col_offset=16), Num(241, lineno=75, col_offset=16), Num(161, lineno=76, col_offset=16), Num(191, lineno=77, col_offset=16), Num(164, lineno=78, col_offset=16), Num(163, lineno=79, col_offset=16), Num(165, lineno=80, col_offset=16), Num(167, lineno=81, col_offset=16), Num(402, lineno=82, col_offset=16), Num(162, lineno=83, col_offset=16), Num(226, lineno=84, col_offset=16), Num(234, lineno=85, col_offset=16), Num(244, lineno=86, col_offset=16), Num(251, lineno=87, col_offset=16), Num(225, lineno=88, col_offset=16), Num(233, lineno=89, col_offset=16), Num(243, lineno=90, col_offset=16), Num(250, lineno=91, col_offset=16), Num(224, lineno=92, col_offset=16), Num(232, lineno=93, col_offset=16), Num(242, lineno=94, col_offset=16), Num(249, lineno=95, col_offset=16), Num(228, lineno=96, col_offset=16), Num(235, lineno=97, col_offset=16), Num(246, lineno=98, col_offset=16), Num(252, lineno=99, col_offset=16), Num(197, lineno=100, col_offset=16), Num(238, lineno=101, col_offset=16), Num(216, lineno=102, col_offset=16), Num(198, lineno=103, col_offset=16), Num(229, lineno=104, col_offset=16), Num(237, lineno=105, col_offset=16), Num(248, lineno=106, col_offset=16), Num(230, lineno=107, col_offset=16), Num(196, lineno=108, col_offset=16), Num(236, lineno=109, col_offset=16), Num(214, lineno=110, col_offset=16), Num(220, lineno=111, col_offset=16), Num(201, lineno=112, col_offset=16), Num(239, lineno=113, col_offset=16), Num(223, lineno=114, col_offset=16), Num(212, lineno=115, col_offset=16), Num(193, lineno=116, col_offset=16), Num(195, lineno=117, col_offset=16), Num(227, lineno=118, col_offset=16), Num(208, lineno=119, col_offset=16), Num(240, lineno=120, col_offset=16), Num(205, lineno=121, col_offset=16), Num(204, lineno=122, col_offset=16), Num(211, lineno=123, col_offset=16), Num(210, lineno=124, col_offset=16), Num(213, lineno=125, col_offset=16), Num(245, lineno=126, col_offset=16), Num(352, lineno=127, col_offset=16), Num(353, lineno=128, col_offset=16), Num(218, lineno=129, col_offset=16), Num(376, lineno=130, col_offset=16), Num(255, lineno=131, col_offset=16), Num(222, lineno=132, col_offset=16), Num(254, lineno=133, col_offset=16), Num(183, lineno=134, col_offset=16), Num(181, lineno=135, col_offset=16), Num(182, lineno=136, col_offset=16), Num(190, lineno=137, col_offset=16), Num(8212, lineno=138, col_offset=16), Num(188, lineno=139, col_offset=16), Num(189, lineno=140, col_offset=16), Num(170, lineno=141, col_offset=16), Num(186, lineno=142, col_offset=16), Num(171, lineno=143, col_offset=16), Num(9632, lineno=144, col_offset=16), Num(187, lineno=145, col_offset=16), Num(177, lineno=146, col_offset=16), Name('None', Load(), lineno=147, col_offset=16)], lineno=52, col_offset=20)], [], None, None, lineno=52, col_offset=0), lineno=52, col_offset=0), Assign([Name('encoding_map', Store(), lineno=152, col_offset=0)], Call(Attribute(Name('codecs', Load(), lineno=152, col_offset=15), 'make_encoding_map', Load(), lineno=152, col_offset=15), [Name('decoding_map', Load(), lineno=152, col_offset=40)], [], None, None, lineno=152, col_offset=15), lineno=152, col_offset=0)])
