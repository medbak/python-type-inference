Module([Expr(Str('Execute shell commands via os.popen() and return status, output.\n\nInterface summary:\n\n       import commands\n\n       outtext = commands.getoutput(cmd)\n       (exitstatus, outtext) = commands.getstatusoutput(cmd)\n       outtext = commands.getstatus(file)  # returns output of "ls -ld file"\n\nA trailing newline is removed from the output string.\n\nEncapsulates the basic operation:\n\n      pipe = os.popen(\'{ \' + cmd + \'; } 2>&1\', \'r\')\n      text = pipe.read()\n      sts = pipe.close()\n\n [Note:  it would be nice to add functions to interpret the exit status.]\n', lineno=20, col_offset=-1), lineno=20, col_offset=-1), ImportFrom('warnings', [alias('warnpy3k', None)], 0, lineno=21, col_offset=0), Expr(Call(Name('warnpy3k', Load(), lineno=22, col_offset=0), [Str('the commands module has been removed in Python 3.0; use the subprocess module instead', lineno=22, col_offset=9)], [keyword('stacklevel', Num(2, lineno=23, col_offset=57))], None, None, lineno=22, col_offset=0), lineno=22, col_offset=0), Delete([Name('warnpy3k', Del(), lineno=24, col_offset=4)], lineno=24, col_offset=0), Assign([Name('__all__', Store(), lineno=26, col_offset=0)], List([Str('getstatusoutput', lineno=26, col_offset=11), Str('getoutput', lineno=26, col_offset=29), Str('getstatus', lineno=26, col_offset=41)], Load(), lineno=26, col_offset=10), lineno=26, col_offset=0), FunctionDef('getstatus', arguments([Name('file', Param(), lineno=37, col_offset=14)], None, None, []), [Expr(Str('Return output of "ls -ld <file>" in a string.', lineno=38, col_offset=4), lineno=38, col_offset=4), Import([alias('warnings', None)], lineno=39, col_offset=4), Expr(Call(Attribute(Name('warnings', Load(), lineno=40, col_offset=4), 'warn', Load(), lineno=40, col_offset=4), [Str('commands.getstatus() is deprecated', lineno=40, col_offset=18), Name('DeprecationWarning', Load(), lineno=40, col_offset=56), Num(2, lineno=40, col_offset=76)], [], None, None, lineno=40, col_offset=4), lineno=40, col_offset=4), Return(Call(Name('getoutput', Load(), lineno=41, col_offset=11), [BinOp(Str('ls -ld', lineno=41, col_offset=21), Add(), Call(Name('mkarg', Load(), lineno=41, col_offset=32), [Name('file', Load(), lineno=41, col_offset=38)], [], None, None, lineno=41, col_offset=32), lineno=41, col_offset=21)], [], None, None, lineno=41, col_offset=11), lineno=41, col_offset=4)], [], lineno=37, col_offset=0), FunctionDef('getoutput', arguments([Name('cmd', Param(), lineno=48, col_offset=14)], None, None, []), [Expr(Str('Return output (stdout or stderr) of executing cmd in a shell.', lineno=49, col_offset=4), lineno=49, col_offset=4), Return(Subscript(Call(Name('getstatusoutput', Load(), lineno=50, col_offset=11), [Name('cmd', Load(), lineno=50, col_offset=27)], [], None, None, lineno=50, col_offset=11), Index(Num(1, lineno=50, col_offset=32)), Load(), lineno=50, col_offset=11), lineno=50, col_offset=4)], [], lineno=48, col_offset=0), FunctionDef('getstatusoutput', arguments([Name('cmd', Param(), lineno=56, col_offset=20)], None, None, []), [Expr(Str('Return (status, output) of executing cmd in a shell.', lineno=57, col_offset=4), lineno=57, col_offset=4), Import([alias('os', None)], lineno=58, col_offset=4), Assign([Name('pipe', Store(), lineno=59, col_offset=4)], Call(Attribute(Name('os', Load(), lineno=59, col_offset=11), 'popen', Load(), lineno=59, col_offset=11), [BinOp(BinOp(Str('{ ', lineno=59, col_offset=20), Add(), Name('cmd', Load(), lineno=59, col_offset=27), lineno=59, col_offset=20), Add(), Str('; } 2>&1', lineno=59, col_offset=33), lineno=59, col_offset=31), Str('r', lineno=59, col_offset=45)], [], None, None, lineno=59, col_offset=11), lineno=59, col_offset=4), Assign([Name('text', Store(), lineno=60, col_offset=4)], Call(Attribute(Name('pipe', Load(), lineno=60, col_offset=11), 'read', Load(), lineno=60, col_offset=11), [], [], None, None, lineno=60, col_offset=11), lineno=60, col_offset=4), Assign([Name('sts', Store(), lineno=61, col_offset=4)], Call(Attribute(Name('pipe', Load(), lineno=61, col_offset=10), 'close', Load(), lineno=61, col_offset=10), [], [], None, None, lineno=61, col_offset=10), lineno=61, col_offset=4), If(Compare(Name('sts', Load(), lineno=62, col_offset=7), [Is()], [Name('None', Load(), lineno=62, col_offset=14)], lineno=62, col_offset=7), [Assign([Name('sts', Store(), lineno=62, col_offset=20)], Num(0, lineno=62, col_offset=26), lineno=62, col_offset=20)], [], lineno=62, col_offset=4), If(Compare(Subscript(Name('text', Load(), lineno=63, col_offset=7), Slice(Num(-1, lineno=63, col_offset=13), None, None), Load(), lineno=63, col_offset=7), [Eq()], [Str('\n', lineno=63, col_offset=20)], lineno=63, col_offset=7), [Assign([Name('text', Store(), lineno=63, col_offset=26)], Subscript(Name('text', Load(), lineno=63, col_offset=33), Slice(None, Num(-1, lineno=63, col_offset=40), None), Load(), lineno=63, col_offset=33), lineno=63, col_offset=26)], [], lineno=63, col_offset=4), Return(Tuple([Name('sts', Load(), lineno=64, col_offset=11), Name('text', Load(), lineno=64, col_offset=16)], Load(), lineno=64, col_offset=11), lineno=64, col_offset=4)], [], lineno=56, col_offset=0), FunctionDef('mk2arg', arguments([Name('head', Param(), lineno=69, col_offset=11), Name('x', Param(), lineno=69, col_offset=17)], None, None, []), [Import([alias('os', None)], lineno=70, col_offset=4), Return(Call(Name('mkarg', Load(), lineno=71, col_offset=11), [Call(Attribute(Attribute(Name('os', Load(), lineno=71, col_offset=17), 'path', Load(), lineno=71, col_offset=17), 'join', Load(), lineno=71, col_offset=17), [Name('head', Load(), lineno=71, col_offset=30), Name('x', Load(), lineno=71, col_offset=36)], [], None, None, lineno=71, col_offset=17)], [], None, None, lineno=71, col_offset=11), lineno=71, col_offset=4)], [], lineno=69, col_offset=0), FunctionDef('mkarg', arguments([Name('x', Param(), lineno=81, col_offset=10)], None, None, []), [If(Compare(Str("'", lineno=82, col_offset=7), [NotIn()], [Name('x', Load(), lineno=82, col_offset=19)], lineno=82, col_offset=7), [Return(BinOp(BinOp(Str(" '", lineno=83, col_offset=15), Add(), Name('x', Load(), lineno=83, col_offset=23), lineno=83, col_offset=15), Add(), Str("'", lineno=83, col_offset=27), lineno=83, col_offset=25), lineno=83, col_offset=8)], [], lineno=82, col_offset=4), Assign([Name('s', Store(), lineno=84, col_offset=4)], Str(' "', lineno=84, col_offset=8), lineno=84, col_offset=4), For(Name('c', Store(), lineno=85, col_offset=8), Name('x', Load(), lineno=85, col_offset=13), [If(Compare(Name('c', Load(), lineno=86, col_offset=11), [In()], [Str('\\$"`', lineno=86, col_offset=16)], lineno=86, col_offset=11), [Assign([Name('s', Store(), lineno=87, col_offset=12)], BinOp(Name('s', Load(), lineno=87, col_offset=16), Add(), Str('\\', lineno=87, col_offset=20), lineno=87, col_offset=16), lineno=87, col_offset=12)], [], lineno=86, col_offset=8), Assign([Name('s', Store(), lineno=88, col_offset=8)], BinOp(Name('s', Load(), lineno=88, col_offset=12), Add(), Name('c', Load(), lineno=88, col_offset=16), lineno=88, col_offset=12), lineno=88, col_offset=8)], [], lineno=85, col_offset=4), Assign([Name('s', Store(), lineno=89, col_offset=4)], BinOp(Name('s', Load(), lineno=89, col_offset=8), Add(), Str('"', lineno=89, col_offset=12), lineno=89, col_offset=8), lineno=89, col_offset=4), Return(Name('s', Load(), lineno=90, col_offset=11), lineno=90, col_offset=4)], [], lineno=81, col_offset=0)])
