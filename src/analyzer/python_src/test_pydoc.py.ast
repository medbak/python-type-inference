Module([Import([alias('sys', None)], lineno=1, col_offset=0), Import([alias('os', None)], lineno=2, col_offset=0), Import([alias('os.path', None)], lineno=3, col_offset=0), Import([alias('difflib', None)], lineno=4, col_offset=0), Import([alias('subprocess', None)], lineno=5, col_offset=0), Import([alias('re', None)], lineno=6, col_offset=0), Import([alias('pydoc', None)], lineno=7, col_offset=0), Import([alias('inspect', None)], lineno=8, col_offset=0), Import([alias('unittest', None)], lineno=9, col_offset=0), Import([alias('xml.etree', None)], lineno=10, col_offset=0), Import([alias('test.test_support', None)], lineno=11, col_offset=0), ImportFrom('contextlib', [alias('contextmanager', None)], 0, lineno=12, col_offset=0), ImportFrom('test.test_support', [alias('TESTFN', None), alias('forget', None), alias('rmtree', None), alias('EnvironmentVarGuard', None), alias('reap_children', None)], 0, lineno=13, col_offset=0), ImportFrom('test', [alias('pydoc_mod', None)], 0, lineno=16, col_offset=0), Assign([Name('expected_text_pattern', Store(), lineno=18, col_offset=0)], Call(Attribute(Str("\nNAME\n    test.pydoc_mod - This is a test module for test_pydoc\n\nFILE\n    %s\n%s\nCLASSES\n    __builtin__.object\n        B\n    A\n    \n    class A\n     |  Hello and goodbye\n     |  \n     |  Methods defined here:\n     |  \n     |  __init__()\n     |      Wow, I have no function!\n    \n    class B(__builtin__.object)\n     |  Data descriptors defined here:\n     |  \n     |  __dict__\n     |      dictionary for instance variables (if defined)\n     |  \n     |  __weakref__\n     |      list of weak references to the object (if defined)\n     |  \n     |  ----------------------------------------------------------------------\n     |  Data and other attributes defined here:\n     |  \n     |  NO_MEANING = 'eggs'\n\nFUNCTIONS\n    doc_func()\n        This function solves all of the world's problems:\n        hunger\n        lack of Python\n        war\n    \n    nodoc_func()\n\nDATA\n    __author__ = 'Benjamin Peterson'\n    __credits__ = 'Nobody'\n    __version__ = '1.2.3.4'\n\nVERSION\n    1.2.3.4\n\nAUTHOR\n    Benjamin Peterson\n\nCREDITS\n    Nobody\n", lineno=75, col_offset=-1), 'strip', Load(), lineno=75, col_offset=-1), [], [], None, None, lineno=75, col_offset=-1), lineno=18, col_offset=0), Assign([Name('expected_html_pattern', Store(), lineno=77, col_offset=0)], Call(Attribute(Str('\n<table width="100%%" cellspacing=0 cellpadding=2 border=0 summary="heading">\n<tr bgcolor="#7799ee">\n<td valign=bottom>&nbsp;<br>\n<font color="#ffffff" face="helvetica, arial">&nbsp;<br><big><big><strong><a href="test.html"><font color="#ffffff">test</font></a>.pydoc_mod</strong></big></big> (version 1.2.3.4)</font></td\n><td align=right valign=bottom\n><font color="#ffffff" face="helvetica, arial"><a href=".">index</a><br><a href="file:%s">%s</a>%s</font></td></tr></table>\n    <p><tt>This&nbsp;is&nbsp;a&nbsp;test&nbsp;module&nbsp;for&nbsp;test_pydoc</tt></p>\n<p>\n<table width="100%%" cellspacing=0 cellpadding=2 border=0 summary="section">\n<tr bgcolor="#ee77aa">\n<td colspan=3 valign=bottom>&nbsp;<br>\n<font color="#ffffff" face="helvetica, arial"><big><strong>Classes</strong></big></font></td></tr>\n    \n<tr><td bgcolor="#ee77aa"><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</tt></td><td>&nbsp;</td>\n<td width="100%%"><dl>\n<dt><font face="helvetica, arial"><a href="__builtin__.html#object">__builtin__.object</a>\n</font></dt><dd>\n<dl>\n<dt><font face="helvetica, arial"><a href="test.pydoc_mod.html#B">B</a>\n</font></dt></dl>\n</dd>\n<dt><font face="helvetica, arial"><a href="test.pydoc_mod.html#A">A</a>\n</font></dt></dl>\n <p>\n<table width="100%%" cellspacing=0 cellpadding=2 border=0 summary="section">\n<tr bgcolor="#ffc8d8">\n<td colspan=3 valign=bottom>&nbsp;<br>\n<font color="#000000" face="helvetica, arial"><a name="A">class <strong>A</strong></a></font></td></tr>\n    \n<tr bgcolor="#ffc8d8"><td rowspan=2><tt>&nbsp;&nbsp;&nbsp;</tt></td>\n<td colspan=2><tt>Hello&nbsp;and&nbsp;goodbye<br>&nbsp;</tt></td></tr>\n<tr><td>&nbsp;</td>\n<td width="100%%">Methods defined here:<br>\n<dl><dt><a name="A-__init__"><strong>__init__</strong></a>()</dt><dd><tt>Wow,&nbsp;I&nbsp;have&nbsp;no&nbsp;function!</tt></dd></dl>\n\n</td></tr></table> <p>\n<table width="100%%" cellspacing=0 cellpadding=2 border=0 summary="section">\n<tr bgcolor="#ffc8d8">\n<td colspan=3 valign=bottom>&nbsp;<br>\n<font color="#000000" face="helvetica, arial"><a name="B">class <strong>B</strong></a>(<a href="__builtin__.html#object">__builtin__.object</a>)</font></td></tr>\n    \n<tr><td bgcolor="#ffc8d8"><tt>&nbsp;&nbsp;&nbsp;</tt></td><td>&nbsp;</td>\n<td width="100%%">Data descriptors defined here:<br>\n<dl><dt><strong>__dict__</strong></dt>\n<dd><tt>dictionary&nbsp;for&nbsp;instance&nbsp;variables&nbsp;(if&nbsp;defined)</tt></dd>\n</dl>\n<dl><dt><strong>__weakref__</strong></dt>\n<dd><tt>list&nbsp;of&nbsp;weak&nbsp;references&nbsp;to&nbsp;the&nbsp;object&nbsp;(if&nbsp;defined)</tt></dd>\n</dl>\n<hr>\nData and other attributes defined here:<br>\n<dl><dt><strong>NO_MEANING</strong> = \'eggs\'</dl>\n\n</td></tr></table></td></tr></table><p>\n<table width="100%%" cellspacing=0 cellpadding=2 border=0 summary="section">\n<tr bgcolor="#eeaa77">\n<td colspan=3 valign=bottom>&nbsp;<br>\n<font color="#ffffff" face="helvetica, arial"><big><strong>Functions</strong></big></font></td></tr>\n    \n<tr><td bgcolor="#eeaa77"><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</tt></td><td>&nbsp;</td>\n<td width="100%%"><dl><dt><a name="-doc_func"><strong>doc_func</strong></a>()</dt><dd><tt>This&nbsp;function&nbsp;solves&nbsp;all&nbsp;of&nbsp;the&nbsp;world\'s&nbsp;problems:<br>\nhunger<br>\nlack&nbsp;of&nbsp;Python<br>\nwar</tt></dd></dl>\n <dl><dt><a name="-nodoc_func"><strong>nodoc_func</strong></a>()</dt></dl>\n</td></tr></table><p>\n<table width="100%%" cellspacing=0 cellpadding=2 border=0 summary="section">\n<tr bgcolor="#55aa55">\n<td colspan=3 valign=bottom>&nbsp;<br>\n<font color="#ffffff" face="helvetica, arial"><big><strong>Data</strong></big></font></td></tr>\n    \n<tr><td bgcolor="#55aa55"><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</tt></td><td>&nbsp;</td>\n<td width="100%%"><strong>__author__</strong> = \'Benjamin Peterson\'<br>\n<strong>__credits__</strong> = \'Nobody\'<br>\n<strong>__version__</strong> = \'1.2.3.4\'</td></tr></table><p>\n<table width="100%%" cellspacing=0 cellpadding=2 border=0 summary="section">\n<tr bgcolor="#7799ee">\n<td colspan=3 valign=bottom>&nbsp;<br>\n<font color="#ffffff" face="helvetica, arial"><big><strong>Author</strong></big></font></td></tr>\n    \n<tr><td bgcolor="#7799ee"><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</tt></td><td>&nbsp;</td>\n<td width="100%%">Benjamin&nbsp;Peterson</td></tr></table><p>\n<table width="100%%" cellspacing=0 cellpadding=2 border=0 summary="section">\n<tr bgcolor="#7799ee">\n<td colspan=3 valign=bottom>&nbsp;<br>\n<font color="#ffffff" face="helvetica, arial"><big><strong>Credits</strong></big></font></td></tr>\n    \n<tr><td bgcolor="#7799ee"><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</tt></td><td>&nbsp;</td>\n<td width="100%%">Nobody</td></tr></table>\n', lineno=168, col_offset=-1), 'strip', Load(), lineno=168, col_offset=-1), [], [], None, None, lineno=168, col_offset=-1), lineno=77, col_offset=0), Assign([Name('missing_pattern', Store(), lineno=172, col_offset=0)], Str("no Python documentation found for '%s'", lineno=172, col_offset=18), lineno=172, col_offset=0), Assign([Name('badimport_pattern', Store(), lineno=175, col_offset=0)], Str("problem in %s - <type 'exceptions.ImportError'>: No module named %s", lineno=175, col_offset=20), lineno=175, col_offset=0), FunctionDef('run_pydoc', arguments([Name('module_name', Param(), lineno=177, col_offset=14)], 'args', None, []), [Expr(Str('\n    Runs pydoc on the specified module. Returns the stripped\n    output of pydoc.\n    ', lineno=181, col_offset=-1), lineno=181, col_offset=-1), Assign([Name('cmd', Store(), lineno=182, col_offset=4)], List([Attribute(Name('sys', Load(), lineno=182, col_offset=11), 'executable', Load(), lineno=182, col_offset=11), Attribute(Name('pydoc', Load(), lineno=182, col_offset=27), '__file__', Load(), lineno=182, col_offset=27), Call(Attribute(Str(' ', lineno=182, col_offset=43), 'join', Load(), lineno=182, col_offset=43), [Name('args', Load(), lineno=182, col_offset=52)], [], None, None, lineno=182, col_offset=43), Name('module_name', Load(), lineno=182, col_offset=59)], Load(), lineno=182, col_offset=10), lineno=182, col_offset=4), TryFinally([Assign([Name('output', Store(), lineno=184, col_offset=8)], Subscript(Call(Attribute(Call(Attribute(Name('subprocess', Load(), lineno=184, col_offset=17), 'Popen', Load(), lineno=184, col_offset=17), [Name('cmd', Load(), lineno=184, col_offset=34)], [keyword('stdout', Attribute(Name('subprocess', Load(), lineno=184, col_offset=46), 'PIPE', Load(), lineno=184, col_offset=46))], None, None, lineno=184, col_offset=17), 'communicate', Load(), lineno=184, col_offset=17), [], [], None, None, lineno=184, col_offset=17), Index(Num(0, lineno=184, col_offset=77)), Load(), lineno=184, col_offset=17), lineno=184, col_offset=8), Return(Call(Attribute(Name('output', Load(), lineno=185, col_offset=15), 'strip', Load(), lineno=185, col_offset=15), [], [], None, None, lineno=185, col_offset=15), lineno=185, col_offset=8)], [Expr(Call(Name('reap_children', Load(), lineno=187, col_offset=8), [], [], None, None, lineno=187, col_offset=8), lineno=187, col_offset=8)], lineno=183, col_offset=4)], [], lineno=177, col_offset=0), FunctionDef('get_pydoc_html', arguments([Name('module', Param(), lineno=189, col_offset=19)], None, None, []), [Expr(Str('Returns pydoc generated output as html', lineno=190, col_offset=4), lineno=190, col_offset=4), Assign([Name('doc', Store(), lineno=191, col_offset=4)], Call(Attribute(Name('pydoc', Load(), lineno=191, col_offset=10), 'HTMLDoc', Load(), lineno=191, col_offset=10), [], [], None, None, lineno=191, col_offset=10), lineno=191, col_offset=4), Assign([Name('output', Store(), lineno=192, col_offset=4)], Call(Attribute(Name('doc', Load(), lineno=192, col_offset=13), 'docmodule', Load(), lineno=192, col_offset=13), [Name('module', Load(), lineno=192, col_offset=27)], [], None, None, lineno=192, col_offset=13), lineno=192, col_offset=4), Assign([Name('loc', Store(), lineno=193, col_offset=4)], BoolOp(Or(), [Call(Attribute(Name('doc', Load(), lineno=193, col_offset=10), 'getdocloc', Load(), lineno=193, col_offset=10), [Name('pydoc_mod', Load(), lineno=193, col_offset=24)], [], None, None, lineno=193, col_offset=10), Str('', lineno=193, col_offset=38)], lineno=193, col_offset=10), lineno=193, col_offset=4), If(Name('loc', Load(), lineno=194, col_offset=7), [Assign([Name('loc', Store(), lineno=195, col_offset=8)], BinOp(BinOp(Str('<br><a href="', lineno=195, col_offset=14), Add(), Name('loc', Load(), lineno=195, col_offset=33), lineno=195, col_offset=14), Add(), Str('">Module Docs</a>', lineno=195, col_offset=39), lineno=195, col_offset=37), lineno=195, col_offset=8)], [], lineno=194, col_offset=4), Return(Tuple([Call(Attribute(Name('output', Load(), lineno=196, col_offset=11), 'strip', Load(), lineno=196, col_offset=11), [], [], None, None, lineno=196, col_offset=11), Name('loc', Load(), lineno=196, col_offset=27)], Load(), lineno=196, col_offset=11), lineno=196, col_offset=4)], [], lineno=189, col_offset=0), FunctionDef('get_pydoc_text', arguments([Name('module', Param(), lineno=198, col_offset=19)], None, None, []), [Expr(Str('Returns pydoc generated output as text', lineno=199, col_offset=4), lineno=199, col_offset=4), Assign([Name('doc', Store(), lineno=200, col_offset=4)], Call(Attribute(Name('pydoc', Load(), lineno=200, col_offset=10), 'TextDoc', Load(), lineno=200, col_offset=10), [], [], None, None, lineno=200, col_offset=10), lineno=200, col_offset=4), Assign([Name('loc', Store(), lineno=201, col_offset=4)], BoolOp(Or(), [Call(Attribute(Name('doc', Load(), lineno=201, col_offset=10), 'getdocloc', Load(), lineno=201, col_offset=10), [Name('pydoc_mod', Load(), lineno=201, col_offset=24)], [], None, None, lineno=201, col_offset=10), Str('', lineno=201, col_offset=38)], lineno=201, col_offset=10), lineno=201, col_offset=4), If(Name('loc', Load(), lineno=202, col_offset=7), [Assign([Name('loc', Store(), lineno=203, col_offset=8)], BinOp(BinOp(Str('\nMODULE DOCS\n    ', lineno=203, col_offset=14), Add(), Name('loc', Load(), lineno=203, col_offset=38), lineno=203, col_offset=14), Add(), Str('\n', lineno=203, col_offset=44), lineno=203, col_offset=42), lineno=203, col_offset=8)], [], lineno=202, col_offset=4), Assign([Name('output', Store(), lineno=205, col_offset=4)], Call(Attribute(Name('doc', Load(), lineno=205, col_offset=13), 'docmodule', Load(), lineno=205, col_offset=13), [Name('module', Load(), lineno=205, col_offset=27)], [], None, None, lineno=205, col_offset=13), lineno=205, col_offset=4), Assign([Name('patt', Store(), lineno=208, col_offset=4)], Call(Attribute(Name('re', Load(), lineno=208, col_offset=11), 'compile', Load(), lineno=208, col_offset=11), [Str('\x08.', lineno=208, col_offset=22)], [], None, None, lineno=208, col_offset=11), lineno=208, col_offset=4), Assign([Name('output', Store(), lineno=209, col_offset=4)], Call(Attribute(Name('patt', Load(), lineno=209, col_offset=13), 'sub', Load(), lineno=209, col_offset=13), [Str('', lineno=209, col_offset=22), Name('output', Load(), lineno=209, col_offset=26)], [], None, None, lineno=209, col_offset=13), lineno=209, col_offset=4), Return(Tuple([Call(Attribute(Name('output', Load(), lineno=210, col_offset=11), 'strip', Load(), lineno=210, col_offset=11), [], [], None, None, lineno=210, col_offset=11), Name('loc', Load(), lineno=210, col_offset=27)], Load(), lineno=210, col_offset=11), lineno=210, col_offset=4)], [], lineno=198, col_offset=0), FunctionDef('print_diffs', arguments([Name('text1', Param(), lineno=212, col_offset=16), Name('text2', Param(), lineno=212, col_offset=23)], None, None, []), [Expr(Str('Prints unified diffs for two texts', lineno=213, col_offset=4), lineno=213, col_offset=4), Assign([Name('lines1', Store(), lineno=214, col_offset=4)], Call(Attribute(Name('text1', Load(), lineno=214, col_offset=13), 'splitlines', Load(), lineno=214, col_offset=13), [Name('True', Load(), lineno=214, col_offset=30)], [], None, None, lineno=214, col_offset=13), lineno=214, col_offset=4), Assign([Name('lines2', Store(), lineno=215, col_offset=4)], Call(Attribute(Name('text2', Load(), lineno=215, col_offset=13), 'splitlines', Load(), lineno=215, col_offset=13), [Name('True', Load(), lineno=215, col_offset=30)], [], None, None, lineno=215, col_offset=13), lineno=215, col_offset=4), Assign([Name('diffs', Store(), lineno=216, col_offset=4)], Call(Attribute(Name('difflib', Load(), lineno=216, col_offset=12), 'unified_diff', Load(), lineno=216, col_offset=12), [Name('lines1', Load(), lineno=216, col_offset=33), Name('lines2', Load(), lineno=216, col_offset=41)], [keyword('n', Num(0, lineno=216, col_offset=51)), keyword('fromfile', Str('expected', lineno=216, col_offset=63)), keyword('tofile', Str('got', lineno=217, col_offset=40))], None, None, lineno=216, col_offset=12), lineno=216, col_offset=4), Print(None, [BinOp(Str('\n', lineno=218, col_offset=10), Add(), Call(Attribute(Str('', lineno=218, col_offset=17), 'join', Load(), lineno=218, col_offset=17), [Name('diffs', Load(), lineno=218, col_offset=25)], [], None, None, lineno=218, col_offset=17), lineno=218, col_offset=10)], True, lineno=218, col_offset=4)], [], lineno=212, col_offset=0), ClassDef('PyDocDocTest', [Attribute(Name('unittest', Load(), lineno=221, col_offset=19), 'TestCase', Load(), lineno=221, col_offset=19)], [FunctionDef('test_html_doc', arguments([Name('self', Param(), lineno=225, col_offset=22)], None, None, []), [Assign([Tuple([Name('result', Store(), lineno=226, col_offset=8), Name('doc_loc', Store(), lineno=226, col_offset=16)], Store(), lineno=226, col_offset=8)], Call(Name('get_pydoc_html', Load(), lineno=226, col_offset=26), [Name('pydoc_mod', Load(), lineno=226, col_offset=41)], [], None, None, lineno=226, col_offset=26), lineno=226, col_offset=8), Assign([Name('mod_file', Store(), lineno=227, col_offset=8)], Call(Attribute(Name('inspect', Load(), lineno=227, col_offset=19), 'getabsfile', Load(), lineno=227, col_offset=19), [Name('pydoc_mod', Load(), lineno=227, col_offset=38)], [], None, None, lineno=227, col_offset=19), lineno=227, col_offset=8), If(Compare(Attribute(Name('sys', Load(), lineno=228, col_offset=11), 'platform', Load(), lineno=228, col_offset=11), [Eq()], [Str('win32', lineno=228, col_offset=27)], lineno=228, col_offset=11), [Import([alias('nturl2path', None)], lineno=229, col_offset=12), Assign([Name('mod_url', Store(), lineno=230, col_offset=12)], Call(Attribute(Name('nturl2path', Load(), lineno=230, col_offset=22), 'pathname2url', Load(), lineno=230, col_offset=22), [Name('mod_file', Load(), lineno=230, col_offset=46)], [], None, None, lineno=230, col_offset=22), lineno=230, col_offset=12)], [Assign([Name('mod_url', Store(), lineno=232, col_offset=12)], Name('mod_file', Load(), lineno=232, col_offset=22), lineno=232, col_offset=12)], lineno=228, col_offset=8), Assign([Name('expected_html', Store(), lineno=233, col_offset=8)], BinOp(Name('expected_html_pattern', Load(), lineno=233, col_offset=24), Mod(), Tuple([Name('mod_url', Load(), lineno=233, col_offset=49), Name('mod_file', Load(), lineno=233, col_offset=58), Name('doc_loc', Load(), lineno=233, col_offset=68)], Load(), lineno=233, col_offset=49), lineno=233, col_offset=24), lineno=233, col_offset=8), If(Compare(Name('result', Load(), lineno=234, col_offset=11), [NotEq()], [Name('expected_html', Load(), lineno=234, col_offset=21)], lineno=234, col_offset=11), [Expr(Call(Name('print_diffs', Load(), lineno=235, col_offset=12), [Name('expected_html', Load(), lineno=235, col_offset=24), Name('result', Load(), lineno=235, col_offset=39)], [], None, None, lineno=235, col_offset=12), lineno=235, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=236, col_offset=12), 'fail', Load(), lineno=236, col_offset=12), [Str('outputs are not equal, see diff above', lineno=236, col_offset=22)], [], None, None, lineno=236, col_offset=12), lineno=236, col_offset=12)], [], lineno=234, col_offset=8)], [Call(Attribute(Name('unittest', Load(), lineno=223, col_offset=5), 'skipIf', Load(), lineno=223, col_offset=5), [Compare(Attribute(Attribute(Name('sys', Load(), lineno=223, col_offset=21), 'flags', Load(), lineno=223, col_offset=21), 'optimize', Load(), lineno=223, col_offset=21), [GtE()], [Num(2, lineno=223, col_offset=43)], lineno=223, col_offset=21), Str('Docstrings are omitted with -O2 and above', lineno=224, col_offset=21)], [], None, None, lineno=223, col_offset=5)], lineno=223, col_offset=4), FunctionDef('test_text_doc', arguments([Name('self', Param(), lineno=240, col_offset=22)], None, None, []), [Assign([Tuple([Name('result', Store(), lineno=241, col_offset=8), Name('doc_loc', Store(), lineno=241, col_offset=16)], Store(), lineno=241, col_offset=8)], Call(Name('get_pydoc_text', Load(), lineno=241, col_offset=26), [Name('pydoc_mod', Load(), lineno=241, col_offset=41)], [], None, None, lineno=241, col_offset=26), lineno=241, col_offset=8), Assign([Name('expected_text', Store(), lineno=242, col_offset=8)], BinOp(Name('expected_text_pattern', Load(), lineno=242, col_offset=24), Mod(), Tuple([Call(Attribute(Name('inspect', Load(), lineno=243, col_offset=25), 'getabsfile', Load(), lineno=243, col_offset=25), [Name('pydoc_mod', Load(), lineno=243, col_offset=44)], [], None, None, lineno=243, col_offset=25), Name('doc_loc', Load(), lineno=243, col_offset=56)], Load(), lineno=243, col_offset=25), lineno=242, col_offset=24), lineno=242, col_offset=8), If(Compare(Name('result', Load(), lineno=244, col_offset=11), [NotEq()], [Name('expected_text', Load(), lineno=244, col_offset=21)], lineno=244, col_offset=11), [Expr(Call(Name('print_diffs', Load(), lineno=245, col_offset=12), [Name('expected_text', Load(), lineno=245, col_offset=24), Name('result', Load(), lineno=245, col_offset=39)], [], None, None, lineno=245, col_offset=12), lineno=245, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=246, col_offset=12), 'fail', Load(), lineno=246, col_offset=12), [Str('outputs are not equal, see diff above', lineno=246, col_offset=22)], [], None, None, lineno=246, col_offset=12), lineno=246, col_offset=12)], [], lineno=244, col_offset=8)], [Call(Attribute(Name('unittest', Load(), lineno=238, col_offset=5), 'skipIf', Load(), lineno=238, col_offset=5), [Compare(Attribute(Attribute(Name('sys', Load(), lineno=238, col_offset=21), 'flags', Load(), lineno=238, col_offset=21), 'optimize', Load(), lineno=238, col_offset=21), [GtE()], [Num(2, lineno=238, col_offset=43)], lineno=238, col_offset=21), Str('Docstrings are omitted with -O2 and above', lineno=239, col_offset=21)], [], None, None, lineno=238, col_offset=5)], lineno=238, col_offset=4), FunctionDef('test_issue8225', arguments([Name('self', Param(), lineno=248, col_offset=23)], None, None, []), [Assign([Tuple([Name('result', Store(), lineno=250, col_offset=8), Name('doc_loc', Store(), lineno=250, col_offset=16)], Store(), lineno=250, col_offset=8)], Call(Name('get_pydoc_text', Load(), lineno=250, col_offset=26), [Attribute(Name('xml', Load(), lineno=250, col_offset=41), 'etree', Load(), lineno=250, col_offset=41)], [], None, None, lineno=250, col_offset=26), lineno=250, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=251, col_offset=8), 'assertEqual', Load(), lineno=251, col_offset=8), [Name('doc_loc', Load(), lineno=251, col_offset=25), Str('', lineno=251, col_offset=34), Str('MODULE DOCS incorrectly includes a link', lineno=251, col_offset=38)], [], None, None, lineno=251, col_offset=8), lineno=251, col_offset=8)], [], lineno=248, col_offset=4), FunctionDef('test_not_here', arguments([Name('self', Param(), lineno=253, col_offset=22)], None, None, []), [Assign([Name('missing_module', Store(), lineno=254, col_offset=8)], Str('test.i_am_not_here', lineno=254, col_offset=25), lineno=254, col_offset=8), Assign([Name('result', Store(), lineno=255, col_offset=8)], Call(Name('run_pydoc', Load(), lineno=255, col_offset=17), [Name('missing_module', Load(), lineno=255, col_offset=27)], [], None, None, lineno=255, col_offset=17), lineno=255, col_offset=8), Assign([Name('expected', Store(), lineno=256, col_offset=8)], BinOp(Name('missing_pattern', Load(), lineno=256, col_offset=19), Mod(), Name('missing_module', Load(), lineno=256, col_offset=37), lineno=256, col_offset=19), lineno=256, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=257, col_offset=8), 'assertEqual', Load(), lineno=257, col_offset=8), [Name('expected', Load(), lineno=257, col_offset=25), Name('result', Load(), lineno=257, col_offset=35), Str('documentation for missing module found', lineno=258, col_offset=12)], [], None, None, lineno=257, col_offset=8), lineno=257, col_offset=8)], [], lineno=253, col_offset=4), FunctionDef('test_badimport', arguments([Name('self', Param(), lineno=260, col_offset=23)], None, None, []), [Assign([Name('modname', Store(), lineno=264, col_offset=8)], Str('testmod_xyzzy', lineno=264, col_offset=18), lineno=264, col_offset=8), Assign([Name('testpairs', Store(), lineno=265, col_offset=8)], Tuple([Tuple([Str('i_am_not_here', lineno=266, col_offset=13), Str('i_am_not_here', lineno=266, col_offset=30)], Load(), lineno=266, col_offset=13), Tuple([Str('test.i_am_not_here_either', lineno=267, col_offset=13), Str('i_am_not_here_either', lineno=267, col_offset=42)], Load(), lineno=267, col_offset=13), Tuple([Str('test.i_am_not_here.neither_am_i', lineno=268, col_offset=13), Str('i_am_not_here.neither_am_i', lineno=268, col_offset=48)], Load(), lineno=268, col_offset=13), Tuple([Call(Attribute(Str('i_am_not_here.{}', lineno=269, col_offset=13), 'format', Load(), lineno=269, col_offset=13), [Name('modname', Load(), lineno=269, col_offset=39)], [], None, None, lineno=269, col_offset=13), Call(Attribute(Str('i_am_not_here.{}', lineno=269, col_offset=49), 'format', Load(), lineno=269, col_offset=49), [Name('modname', Load(), lineno=269, col_offset=75)], [], None, None, lineno=269, col_offset=49)], Load(), lineno=269, col_offset=13), Tuple([Call(Attribute(Str('test.{}', lineno=270, col_offset=13), 'format', Load(), lineno=270, col_offset=13), [Name('modname', Load(), lineno=270, col_offset=30)], [], None, None, lineno=270, col_offset=13), Name('modname', Load(), lineno=270, col_offset=40)], Load(), lineno=270, col_offset=13)], Load(), lineno=266, col_offset=12), lineno=265, col_offset=8), FunctionDef('newdirinpath', arguments([Name('dir', Param(), lineno=274, col_offset=25)], None, None, []), [Expr(Call(Attribute(Name('os', Load(), lineno=275, col_offset=12), 'mkdir', Load(), lineno=275, col_offset=12), [Name('dir', Load(), lineno=275, col_offset=21)], [], None, None, lineno=275, col_offset=12), lineno=275, col_offset=12), Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=276, col_offset=12), 'path', Load(), lineno=276, col_offset=12), 'insert', Load(), lineno=276, col_offset=12), [Num(0, lineno=276, col_offset=28), Name('dir', Load(), lineno=276, col_offset=31)], [], None, None, lineno=276, col_offset=12), lineno=276, col_offset=12), Expr(Yield(None, lineno=277, col_offset=12), lineno=277, col_offset=12), Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=278, col_offset=12), 'path', Load(), lineno=278, col_offset=12), 'pop', Load(), lineno=278, col_offset=12), [Num(0, lineno=278, col_offset=25)], [], None, None, lineno=278, col_offset=12), lineno=278, col_offset=12), Expr(Call(Name('rmtree', Load(), lineno=279, col_offset=12), [Name('dir', Load(), lineno=279, col_offset=19)], [], None, None, lineno=279, col_offset=12), lineno=279, col_offset=12)], [Name('contextmanager', Load(), lineno=273, col_offset=9)], lineno=273, col_offset=8), With(Call(Name('newdirinpath', Load(), lineno=281, col_offset=13), [Name('TESTFN', Load(), lineno=281, col_offset=26)], [], None, None, lineno=281, col_offset=13), None, [With(Call(Name('EnvironmentVarGuard', Load(), lineno=281, col_offset=35), [], [], None, None, lineno=281, col_offset=35), Name('env', Store(), lineno=281, col_offset=60), [Assign([Subscript(Name('env', Load(), lineno=282, col_offset=12), Index(Str('PYTHONPATH', lineno=282, col_offset=16)), Store(), lineno=282, col_offset=12)], Name('TESTFN', Load(), lineno=282, col_offset=32), lineno=282, col_offset=12), Assign([Name('fullmodname', Store(), lineno=283, col_offset=12)], Call(Attribute(Attribute(Name('os', Load(), lineno=283, col_offset=26), 'path', Load(), lineno=283, col_offset=26), 'join', Load(), lineno=283, col_offset=26), [Name('TESTFN', Load(), lineno=283, col_offset=39), Name('modname', Load(), lineno=283, col_offset=47)], [], None, None, lineno=283, col_offset=26), lineno=283, col_offset=12), Assign([Name('sourcefn', Store(), lineno=284, col_offset=12)], BinOp(BinOp(Name('fullmodname', Load(), lineno=284, col_offset=23), Add(), Attribute(Name('os', Load(), lineno=284, col_offset=37), 'extsep', Load(), lineno=284, col_offset=37), lineno=284, col_offset=23), Add(), Str('py', lineno=284, col_offset=49), lineno=284, col_offset=47), lineno=284, col_offset=12), For(Tuple([Name('importstring', Store(), lineno=285, col_offset=16), Name('expectedinmsg', Store(), lineno=285, col_offset=30)], Store(), lineno=285, col_offset=16), Name('testpairs', Load(), lineno=285, col_offset=47), [Assign([Name('f', Store(), lineno=286, col_offset=16)], Call(Name('open', Load(), lineno=286, col_offset=20), [Name('sourcefn', Load(), lineno=286, col_offset=25), Str('w', lineno=286, col_offset=35)], [], None, None, lineno=286, col_offset=20), lineno=286, col_offset=16), Expr(Call(Attribute(Name('f', Load(), lineno=287, col_offset=16), 'write', Load(), lineno=287, col_offset=16), [Call(Attribute(Str('import {}\n', lineno=287, col_offset=24), 'format', Load(), lineno=287, col_offset=24), [Name('importstring', Load(), lineno=287, col_offset=45)], [], None, None, lineno=287, col_offset=24)], [], None, None, lineno=287, col_offset=16), lineno=287, col_offset=16), Expr(Call(Attribute(Name('f', Load(), lineno=288, col_offset=16), 'close', Load(), lineno=288, col_offset=16), [], [], None, None, lineno=288, col_offset=16), lineno=288, col_offset=16), TryFinally([Assign([Name('result', Store(), lineno=290, col_offset=20)], Call(Name('run_pydoc', Load(), lineno=290, col_offset=29), [Name('modname', Load(), lineno=290, col_offset=39)], [], None, None, lineno=290, col_offset=29), lineno=290, col_offset=20)], [Expr(Call(Name('forget', Load(), lineno=292, col_offset=20), [Name('modname', Load(), lineno=292, col_offset=27)], [], None, None, lineno=292, col_offset=20), lineno=292, col_offset=20)], lineno=289, col_offset=16), Assign([Name('expected', Store(), lineno=293, col_offset=16)], BinOp(Name('badimport_pattern', Load(), lineno=293, col_offset=27), Mod(), Tuple([Name('modname', Load(), lineno=293, col_offset=48), Name('expectedinmsg', Load(), lineno=293, col_offset=57)], Load(), lineno=293, col_offset=48), lineno=293, col_offset=27), lineno=293, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=294, col_offset=16), 'assertEqual', Load(), lineno=294, col_offset=16), [Name('expected', Load(), lineno=294, col_offset=33), Name('result', Load(), lineno=294, col_offset=43)], [], None, None, lineno=294, col_offset=16), lineno=294, col_offset=16)], [], lineno=285, col_offset=12)], lineno=281, col_offset=35)], lineno=281, col_offset=13)], [], lineno=260, col_offset=4), FunctionDef('test_input_strip', arguments([Name('self', Param(), lineno=296, col_offset=25)], None, None, []), [Assign([Name('missing_module', Store(), lineno=297, col_offset=8)], Str(' test.i_am_not_here ', lineno=297, col_offset=25), lineno=297, col_offset=8), Assign([Name('result', Store(), lineno=298, col_offset=8)], Call(Name('run_pydoc', Load(), lineno=298, col_offset=17), [Name('missing_module', Load(), lineno=298, col_offset=27)], [], None, None, lineno=298, col_offset=17), lineno=298, col_offset=8), Assign([Name('expected', Store(), lineno=299, col_offset=8)], BinOp(Name('missing_pattern', Load(), lineno=299, col_offset=19), Mod(), Call(Attribute(Name('missing_module', Load(), lineno=299, col_offset=37), 'strip', Load(), lineno=299, col_offset=37), [], [], None, None, lineno=299, col_offset=37), lineno=299, col_offset=19), lineno=299, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=300, col_offset=8), 'assertEqual', Load(), lineno=300, col_offset=8), [Name('expected', Load(), lineno=300, col_offset=25), Name('result', Load(), lineno=300, col_offset=35), Str('white space was not stripped from module name or other error output mismatch', lineno=301, col_offset=12)], [], None, None, lineno=300, col_offset=8), lineno=300, col_offset=8)], [], lineno=296, col_offset=4), FunctionDef('test_stripid', arguments([Name('self', Param(), lineno=304, col_offset=21)], None, None, []), [Assign([Name('stripid', Store(), lineno=306, col_offset=8)], Attribute(Name('pydoc', Load(), lineno=306, col_offset=18), 'stripid', Load(), lineno=306, col_offset=18), lineno=306, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=308, col_offset=8), 'assertEqual', Load(), lineno=308, col_offset=8), [Call(Name('stripid', Load(), lineno=308, col_offset=25), [Str('<function stripid at 0x88dcee4>', lineno=308, col_offset=33)], [], None, None, lineno=308, col_offset=25), Str('<function stripid>', lineno=309, col_offset=25)], [], None, None, lineno=308, col_offset=8), lineno=308, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=310, col_offset=8), 'assertEqual', Load(), lineno=310, col_offset=8), [Call(Name('stripid', Load(), lineno=310, col_offset=25), [Str('<function stripid at 0x01F65390>', lineno=310, col_offset=33)], [], None, None, lineno=310, col_offset=25), Str('<function stripid>', lineno=311, col_offset=25)], [], None, None, lineno=310, col_offset=8), lineno=310, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=313, col_offset=8), 'assertEqual', Load(), lineno=313, col_offset=8), [Call(Name('stripid', Load(), lineno=313, col_offset=25), [Str('42', lineno=313, col_offset=33)], [], None, None, lineno=313, col_offset=25), Str('42', lineno=313, col_offset=40)], [], None, None, lineno=313, col_offset=8), lineno=313, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=314, col_offset=8), 'assertEqual', Load(), lineno=314, col_offset=8), [Call(Name('stripid', Load(), lineno=314, col_offset=25), [Str("<type 'exceptions.Exception'>", lineno=314, col_offset=33)], [], None, None, lineno=314, col_offset=25), Str("<type 'exceptions.Exception'>", lineno=315, col_offset=25)], [], None, None, lineno=314, col_offset=8), lineno=314, col_offset=8)], [], lineno=304, col_offset=4)], [], lineno=221, col_offset=0), ClassDef('TestDescriptions', [Attribute(Name('unittest', Load(), lineno=318, col_offset=23), 'TestCase', Load(), lineno=318, col_offset=23)], [FunctionDef('test_module', arguments([Name('self', Param(), lineno=320, col_offset=20)], None, None, []), [ImportFrom('test', [alias('pydocfodder', None)], 0, lineno=322, col_offset=8), Assign([Name('doc', Store(), lineno=323, col_offset=8)], Call(Attribute(Name('pydoc', Load(), lineno=323, col_offset=14), 'render_doc', Load(), lineno=323, col_offset=14), [Name('pydocfodder', Load(), lineno=323, col_offset=31)], [], None, None, lineno=323, col_offset=14), lineno=323, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=324, col_offset=8), 'assertIn', Load(), lineno=324, col_offset=8), [Str('pydocfodder', lineno=324, col_offset=22), Name('doc', Load(), lineno=324, col_offset=37)], [], None, None, lineno=324, col_offset=8), lineno=324, col_offset=8)], [], lineno=320, col_offset=4), FunctionDef('test_classic_class', arguments([Name('self', Param(), lineno=326, col_offset=27)], None, None, []), [ClassDef('C', [], [Expr(Str('Classic class', lineno=327, col_offset=17), lineno=327, col_offset=17)], [], lineno=327, col_offset=8), Assign([Name('c', Store(), lineno=328, col_offset=8)], Call(Name('C', Load(), lineno=328, col_offset=12), [], [], None, None, lineno=328, col_offset=12), lineno=328, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=329, col_offset=8), 'assertEqual', Load(), lineno=329, col_offset=8), [Call(Attribute(Name('pydoc', Load(), lineno=329, col_offset=25), 'describe', Load(), lineno=329, col_offset=25), [Name('C', Load(), lineno=329, col_offset=40)], [], None, None, lineno=329, col_offset=25), Str('class C', lineno=329, col_offset=44)], [], None, None, lineno=329, col_offset=8), lineno=329, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=330, col_offset=8), 'assertEqual', Load(), lineno=330, col_offset=8), [Call(Attribute(Name('pydoc', Load(), lineno=330, col_offset=25), 'describe', Load(), lineno=330, col_offset=25), [Name('c', Load(), lineno=330, col_offset=40)], [], None, None, lineno=330, col_offset=25), Str('instance of C', lineno=330, col_offset=44)], [], None, None, lineno=330, col_offset=8), lineno=330, col_offset=8), Assign([Name('expected', Store(), lineno=331, col_offset=8)], BinOp(Str('instance of C in module %s', lineno=331, col_offset=19), Mod(), Name('__name__', Load(), lineno=331, col_offset=50), lineno=331, col_offset=19), lineno=331, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=332, col_offset=8), 'assertIn', Load(), lineno=332, col_offset=8), [Name('expected', Load(), lineno=332, col_offset=22), Call(Attribute(Name('pydoc', Load(), lineno=332, col_offset=32), 'render_doc', Load(), lineno=332, col_offset=32), [Name('c', Load(), lineno=332, col_offset=49)], [], None, None, lineno=332, col_offset=32)], [], None, None, lineno=332, col_offset=8), lineno=332, col_offset=8)], [], lineno=326, col_offset=4), FunctionDef('test_class', arguments([Name('self', Param(), lineno=334, col_offset=19)], None, None, []), [ClassDef('C', [Name('object', Load(), lineno=335, col_offset=16)], [Expr(Str('New-style class', lineno=335, col_offset=25), lineno=335, col_offset=25)], [], lineno=335, col_offset=8), Assign([Name('c', Store(), lineno=336, col_offset=8)], Call(Name('C', Load(), lineno=336, col_offset=12), [], [], None, None, lineno=336, col_offset=12), lineno=336, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=338, col_offset=8), 'assertEqual', Load(), lineno=338, col_offset=8), [Call(Attribute(Name('pydoc', Load(), lineno=338, col_offset=25), 'describe', Load(), lineno=338, col_offset=25), [Name('C', Load(), lineno=338, col_offset=40)], [], None, None, lineno=338, col_offset=25), Str('class C', lineno=338, col_offset=44)], [], None, None, lineno=338, col_offset=8), lineno=338, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=339, col_offset=8), 'assertEqual', Load(), lineno=339, col_offset=8), [Call(Attribute(Name('pydoc', Load(), lineno=339, col_offset=25), 'describe', Load(), lineno=339, col_offset=25), [Name('c', Load(), lineno=339, col_offset=40)], [], None, None, lineno=339, col_offset=25), Str('C', lineno=339, col_offset=44)], [], None, None, lineno=339, col_offset=8), lineno=339, col_offset=8), Assign([Name('expected', Store(), lineno=340, col_offset=8)], BinOp(Str('C in module %s object', lineno=340, col_offset=19), Mod(), Name('__name__', Load(), lineno=340, col_offset=45), lineno=340, col_offset=19), lineno=340, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=341, col_offset=8), 'assertIn', Load(), lineno=341, col_offset=8), [Name('expected', Load(), lineno=341, col_offset=22), Call(Attribute(Name('pydoc', Load(), lineno=341, col_offset=32), 'render_doc', Load(), lineno=341, col_offset=32), [Name('c', Load(), lineno=341, col_offset=49)], [], None, None, lineno=341, col_offset=32)], [], None, None, lineno=341, col_offset=8), lineno=341, col_offset=8)], [], lineno=334, col_offset=4)], [], lineno=318, col_offset=0), FunctionDef('test_main', arguments([], None, None, []), [Expr(Call(Attribute(Attribute(Name('test', Load(), lineno=345, col_offset=4), 'test_support', Load(), lineno=345, col_offset=4), 'run_unittest', Load(), lineno=345, col_offset=4), [Name('PyDocDocTest', Load(), lineno=345, col_offset=35), Name('TestDescriptions', Load(), lineno=346, col_offset=35)], [], None, None, lineno=345, col_offset=4), lineno=345, col_offset=4)], [], lineno=344, col_offset=0), If(Compare(Name('__name__', Load(), lineno=348, col_offset=3), [Eq()], [Str('__main__', lineno=348, col_offset=15)], lineno=348, col_offset=3), [Expr(Call(Name('test_main', Load(), lineno=349, col_offset=4), [], [], None, None, lineno=349, col_offset=4), lineno=349, col_offset=4)], [], lineno=348, col_offset=0)])
