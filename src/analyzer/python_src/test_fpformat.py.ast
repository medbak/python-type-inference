Module([Expr(Str('\n   Tests for fpformat module\n   Nick Mathewson\n', lineno=4, col_offset=-1), lineno=4, col_offset=-1), ImportFrom('test.test_support', [alias('run_unittest', None), alias('import_module', None)], 0, lineno=5, col_offset=0), Import([alias('unittest', None)], lineno=6, col_offset=0), Assign([Name('fpformat', Store(), lineno=7, col_offset=0)], Call(Name('import_module', Load(), lineno=7, col_offset=11), [Str('fpformat', lineno=7, col_offset=25)], [keyword('deprecated', Name('True', Load(), lineno=7, col_offset=48))], None, None, lineno=7, col_offset=11), lineno=7, col_offset=0), Assign([Tuple([Name('fix', Store(), lineno=8, col_offset=0), Name('sci', Store(), lineno=8, col_offset=5), Name('NotANumber', Store(), lineno=8, col_offset=10)], Store(), lineno=8, col_offset=0)], Tuple([Attribute(Name('fpformat', Load(), lineno=8, col_offset=23), 'fix', Load(), lineno=8, col_offset=23), Attribute(Name('fpformat', Load(), lineno=8, col_offset=37), 'sci', Load(), lineno=8, col_offset=37), Attribute(Name('fpformat', Load(), lineno=8, col_offset=51), 'NotANumber', Load(), lineno=8, col_offset=51)], Load(), lineno=8, col_offset=23), lineno=8, col_offset=0), Assign([Name('StringType', Store(), lineno=10, col_offset=0)], Call(Name('type', Load(), lineno=10, col_offset=13), [Str('', lineno=10, col_offset=18)], [], None, None, lineno=10, col_offset=13), lineno=10, col_offset=0), ClassDef('FpformatTest', [Attribute(Name('unittest', Load(), lineno=21, col_offset=19), 'TestCase', Load(), lineno=21, col_offset=19)], [FunctionDef('checkFix', arguments([Name('self', Param(), lineno=23, col_offset=17), Name('n', Param(), lineno=23, col_offset=23), Name('digits', Param(), lineno=23, col_offset=26)], None, None, []), [Assign([Name('result', Store(), lineno=24, col_offset=8)], Call(Name('fix', Load(), lineno=24, col_offset=17), [Name('n', Load(), lineno=24, col_offset=21), Name('digits', Load(), lineno=24, col_offset=24)], [], None, None, lineno=24, col_offset=17), lineno=24, col_offset=8), If(Call(Name('isinstance', Load(), lineno=25, col_offset=11), [Name('n', Load(), lineno=25, col_offset=22), Name('StringType', Load(), lineno=25, col_offset=25)], [], None, None, lineno=25, col_offset=11), [Assign([Name('n', Store(), lineno=26, col_offset=12)], Call(Name('repr', Load(), lineno=26, col_offset=16), [Name('n', Load(), lineno=26, col_offset=21)], [], None, None, lineno=26, col_offset=16), lineno=26, col_offset=12)], [], lineno=25, col_offset=8), Assign([Name('expected', Store(), lineno=27, col_offset=8)], BinOp(Str('%.*f', lineno=27, col_offset=19), Mod(), Tuple([Name('digits', Load(), lineno=27, col_offset=29), Call(Name('float', Load(), lineno=27, col_offset=37), [Name('n', Load(), lineno=27, col_offset=43)], [], None, None, lineno=27, col_offset=37)], Load(), lineno=27, col_offset=29), lineno=27, col_offset=19), lineno=27, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=29, col_offset=8), 'assertEqual', Load(), lineno=29, col_offset=8), [Name('result', Load(), lineno=29, col_offset=25), Name('expected', Load(), lineno=29, col_offset=33)], [], None, None, lineno=29, col_offset=8), lineno=29, col_offset=8)], [], lineno=23, col_offset=4), FunctionDef('checkSci', arguments([Name('self', Param(), lineno=31, col_offset=17), Name('n', Param(), lineno=31, col_offset=23), Name('digits', Param(), lineno=31, col_offset=26)], None, None, []), [Assign([Name('result', Store(), lineno=32, col_offset=8)], Call(Name('sci', Load(), lineno=32, col_offset=17), [Name('n', Load(), lineno=32, col_offset=21), Name('digits', Load(), lineno=32, col_offset=24)], [], None, None, lineno=32, col_offset=17), lineno=32, col_offset=8), If(Call(Name('isinstance', Load(), lineno=33, col_offset=11), [Name('n', Load(), lineno=33, col_offset=22), Name('StringType', Load(), lineno=33, col_offset=25)], [], None, None, lineno=33, col_offset=11), [Assign([Name('n', Store(), lineno=34, col_offset=12)], Call(Name('repr', Load(), lineno=34, col_offset=16), [Name('n', Load(), lineno=34, col_offset=21)], [], None, None, lineno=34, col_offset=16), lineno=34, col_offset=12)], [], lineno=33, col_offset=8), Assign([Name('expected', Store(), lineno=35, col_offset=8)], BinOp(Str('%.*e', lineno=35, col_offset=19), Mod(), Tuple([Name('digits', Load(), lineno=35, col_offset=29), Call(Name('float', Load(), lineno=35, col_offset=37), [Name('n', Load(), lineno=35, col_offset=43)], [], None, None, lineno=35, col_offset=37)], Load(), lineno=35, col_offset=29), lineno=35, col_offset=19), lineno=35, col_offset=8), Assign([Tuple([Name('num', Store(), lineno=37, col_offset=8), Name('exp', Store(), lineno=37, col_offset=13)], Store(), lineno=37, col_offset=8)], Call(Attribute(Name('expected', Load(), lineno=37, col_offset=19), 'split', Load(), lineno=37, col_offset=19), [Str('e', lineno=37, col_offset=34)], [], None, None, lineno=37, col_offset=19), lineno=37, col_offset=8), If(Compare(Call(Name('len', Load(), lineno=38, col_offset=11), [Name('exp', Load(), lineno=38, col_offset=15)], [], None, None, lineno=38, col_offset=11), [Lt()], [Num(4, lineno=38, col_offset=22)], lineno=38, col_offset=11), [Assign([Name('exp', Store(), lineno=39, col_offset=12)], BinOp(BinOp(Subscript(Name('exp', Load(), lineno=39, col_offset=18), Index(Num(0, lineno=39, col_offset=22)), Load(), lineno=39, col_offset=18), Add(), Str('0', lineno=39, col_offset=27), lineno=39, col_offset=18), Add(), Subscript(Name('exp', Load(), lineno=39, col_offset=33), Slice(Num(1, lineno=39, col_offset=37), None, None), Load(), lineno=39, col_offset=33), lineno=39, col_offset=31), lineno=39, col_offset=12)], [], lineno=38, col_offset=8), Assign([Name('expected', Store(), lineno=40, col_offset=8)], BinOp(Str('%se%s', lineno=40, col_offset=19), Mod(), Tuple([Name('num', Load(), lineno=40, col_offset=30), Name('exp', Load(), lineno=40, col_offset=35)], Load(), lineno=40, col_offset=30), lineno=40, col_offset=19), lineno=40, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=42, col_offset=8), 'assertEqual', Load(), lineno=42, col_offset=8), [Name('result', Load(), lineno=42, col_offset=25), Name('expected', Load(), lineno=42, col_offset=33)], [], None, None, lineno=42, col_offset=8), lineno=42, col_offset=8)], [], lineno=31, col_offset=4), FunctionDef('test_basic_cases', arguments([Name('self', Param(), lineno=44, col_offset=25)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=45, col_offset=8), 'assertEqual', Load(), lineno=45, col_offset=8), [Call(Name('fix', Load(), lineno=45, col_offset=25), [BinOp(Num(100.0, lineno=45, col_offset=29), Div(), Num(3, lineno=45, col_offset=35), lineno=45, col_offset=29), Num(3, lineno=45, col_offset=38)], [], None, None, lineno=45, col_offset=25), Str('33.333', lineno=45, col_offset=42)], [], None, None, lineno=45, col_offset=8), lineno=45, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=46, col_offset=8), 'assertEqual', Load(), lineno=46, col_offset=8), [Call(Name('sci', Load(), lineno=46, col_offset=25), [BinOp(Num(100.0, lineno=46, col_offset=29), Div(), Num(3, lineno=46, col_offset=35), lineno=46, col_offset=29), Num(3, lineno=46, col_offset=38)], [], None, None, lineno=46, col_offset=25), Str('3.333e+001', lineno=46, col_offset=42)], [], None, None, lineno=46, col_offset=8), lineno=46, col_offset=8)], [], lineno=44, col_offset=4), FunctionDef('test_reasonable_values', arguments([Name('self', Param(), lineno=48, col_offset=31)], None, None, []), [For(Name('d', Store(), lineno=49, col_offset=12), Call(Name('range', Load(), lineno=49, col_offset=17), [Num(7, lineno=49, col_offset=23)], [], None, None, lineno=49, col_offset=17), [For(Name('val', Store(), lineno=50, col_offset=16), Tuple([BinOp(Num(1000.0, lineno=50, col_offset=24), Div(), Num(3, lineno=50, col_offset=31), lineno=50, col_offset=24), Num(1000, lineno=50, col_offset=34), Num(1000.0, lineno=50, col_offset=40), Num(0.002, lineno=50, col_offset=48), BinOp(Num(1.0, lineno=50, col_offset=54), Div(), Num(3, lineno=50, col_offset=58), lineno=50, col_offset=54), Num(10000000000.0, lineno=50, col_offset=61)], Load(), lineno=50, col_offset=24), [For(Name('realVal', Store(), lineno=51, col_offset=20), Tuple([Name('val', Load(), lineno=51, col_offset=32), BinOp(Num(1.0, lineno=51, col_offset=37), Div(), Name('val', Load(), lineno=51, col_offset=41), lineno=51, col_offset=37), UnaryOp(USub(), Name('val', Load(), lineno=51, col_offset=47), lineno=51, col_offset=46), BinOp(Num(-1.0, lineno=51, col_offset=53), Div(), Name('val', Load(), lineno=51, col_offset=57), lineno=51, col_offset=52)], Load(), lineno=51, col_offset=32), [Expr(Call(Attribute(Name('self', Load(), lineno=52, col_offset=20), 'checkFix', Load(), lineno=52, col_offset=20), [Name('realVal', Load(), lineno=52, col_offset=34), Name('d', Load(), lineno=52, col_offset=43)], [], None, None, lineno=52, col_offset=20), lineno=52, col_offset=20), Expr(Call(Attribute(Name('self', Load(), lineno=53, col_offset=20), 'checkSci', Load(), lineno=53, col_offset=20), [Name('realVal', Load(), lineno=53, col_offset=34), Name('d', Load(), lineno=53, col_offset=43)], [], None, None, lineno=53, col_offset=20), lineno=53, col_offset=20)], [], lineno=51, col_offset=16)], [], lineno=50, col_offset=12)], [], lineno=49, col_offset=8)], [], lineno=48, col_offset=4), FunctionDef('test_failing_values', arguments([Name('self', Param(), lineno=55, col_offset=28)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=57, col_offset=8), 'assertEqual', Load(), lineno=57, col_offset=8), [Call(Name('fix', Load(), lineno=57, col_offset=25), [Num(1.0, lineno=57, col_offset=29), Num(1000, lineno=57, col_offset=34)], [], None, None, lineno=57, col_offset=25), BinOp(Str('1.', lineno=57, col_offset=41), Add(), BinOp(Str('0', lineno=57, col_offset=47), Mult(), Num(1000, lineno=57, col_offset=51), lineno=57, col_offset=47), lineno=57, col_offset=41)], [], None, None, lineno=57, col_offset=8), lineno=57, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=58, col_offset=8), 'assertEqual', Load(), lineno=58, col_offset=8), [Call(Name('sci', Load(), lineno=58, col_offset=25), [BinOp(Str('1', lineno=58, col_offset=29), Add(), BinOp(Str('0', lineno=58, col_offset=34), Mult(), Num(1000, lineno=58, col_offset=38), lineno=58, col_offset=34), lineno=58, col_offset=29), Num(0, lineno=58, col_offset=45)], [], None, None, lineno=58, col_offset=25), Str('1e+1000', lineno=58, col_offset=49)], [], None, None, lineno=58, col_offset=8), lineno=58, col_offset=8), Assign([Name('yacht', Store(), lineno=61, col_offset=8)], Str('Throatwobbler Mangrove', lineno=61, col_offset=16), lineno=61, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=62, col_offset=8), 'assertEqual', Load(), lineno=62, col_offset=8), [Call(Name('fix', Load(), lineno=62, col_offset=25), [Name('yacht', Load(), lineno=62, col_offset=29), Num(10, lineno=62, col_offset=36)], [], None, None, lineno=62, col_offset=25), Name('yacht', Load(), lineno=62, col_offset=41)], [], None, None, lineno=62, col_offset=8), lineno=62, col_offset=8), TryExcept([Expr(Call(Name('sci', Load(), lineno=64, col_offset=12), [Name('yacht', Load(), lineno=64, col_offset=16), Num(10, lineno=64, col_offset=23)], [], None, None, lineno=64, col_offset=12), lineno=64, col_offset=12)], [ExceptHandler(Name('NotANumber', Load(), lineno=65, col_offset=15), None, [Pass( lineno=66, col_offset=12)], lineno=65, col_offset=8)], [Expr(Call(Attribute(Name('self', Load(), lineno=68, col_offset=12), 'fail', Load(), lineno=68, col_offset=12), [Str('No exception on non-numeric sci', lineno=68, col_offset=22)], [], None, None, lineno=68, col_offset=12), lineno=68, col_offset=12)], lineno=63, col_offset=8)], [], lineno=55, col_offset=4)], [], lineno=21, col_offset=0), FunctionDef('test_main', arguments([], None, None, []), [Expr(Call(Name('run_unittest', Load(), lineno=72, col_offset=4), [Name('FpformatTest', Load(), lineno=72, col_offset=17)], [], None, None, lineno=72, col_offset=4), lineno=72, col_offset=4)], [], lineno=71, col_offset=0), If(Compare(Name('__name__', Load(), lineno=75, col_offset=3), [Eq()], [Str('__main__', lineno=75, col_offset=15)], lineno=75, col_offset=3), [Expr(Call(Name('test_main', Load(), lineno=76, col_offset=4), [], [], None, None, lineno=76, col_offset=4), lineno=76, col_offset=4)], [], lineno=75, col_offset=0)])
