Module([Expr(Str('Filename matching with shell patterns.\n\nfnmatch(FILENAME, PATTERN) matches according to the local convention.\nfnmatchcase(FILENAME, PATTERN) always takes case in account.\n\nThe functions operate by translating the pattern into a regular\nexpression.  They cache the compiled regular expressions for speed.\n\nThe function translate(PATTERN) returns a regular expression\ncorresponding to PATTERN.  (It does not compile it.)\n', lineno=11, col_offset=-1), lineno=11, col_offset=-1), Import([alias('re', None)], lineno=13, col_offset=0), Assign([Name('__all__', Store(), lineno=15, col_offset=0)], List([Str('filter', lineno=15, col_offset=11), Str('fnmatch', lineno=15, col_offset=21), Str('fnmatchcase', lineno=15, col_offset=32), Str('translate', lineno=15, col_offset=47)], Load(), lineno=15, col_offset=10), lineno=15, col_offset=0), Assign([Name('_cache', Store(), lineno=17, col_offset=0)], Dict([], [], lineno=17, col_offset=9), lineno=17, col_offset=0), Assign([Name('_MAXCACHE', Store(), lineno=18, col_offset=0)], Num(100, lineno=18, col_offset=12), lineno=18, col_offset=0), FunctionDef('_purge', arguments([], None, None, []), [Expr(Str('Clear the pattern cache', lineno=21, col_offset=4), lineno=21, col_offset=4), Expr(Call(Attribute(Name('_cache', Load(), lineno=22, col_offset=4), 'clear', Load(), lineno=22, col_offset=4), [], [], None, None, lineno=22, col_offset=4), lineno=22, col_offset=4)], [], lineno=20, col_offset=0), FunctionDef('fnmatch', arguments([Name('name', Param(), lineno=24, col_offset=12), Name('pat', Param(), lineno=24, col_offset=18)], None, None, []), [Expr(Str("Test whether FILENAME matches PATTERN.\n\n    Patterns are Unix shell style:\n\n    *       matches everything\n    ?       matches any single character\n    [seq]   matches any character in seq\n    [!seq]  matches any char not in seq\n\n    An initial period in FILENAME is not special.\n    Both FILENAME and PATTERN are first case-normalized\n    if the operating system requires it.\n    If you don't want this, use fnmatchcase(FILENAME, PATTERN).\n    ", lineno=38, col_offset=-1), lineno=38, col_offset=-1), Import([alias('os', None)], lineno=40, col_offset=4), Assign([Name('name', Store(), lineno=41, col_offset=4)], Call(Attribute(Attribute(Name('os', Load(), lineno=41, col_offset=11), 'path', Load(), lineno=41, col_offset=11), 'normcase', Load(), lineno=41, col_offset=11), [Name('name', Load(), lineno=41, col_offset=28)], [], None, None, lineno=41, col_offset=11), lineno=41, col_offset=4), Assign([Name('pat', Store(), lineno=42, col_offset=4)], Call(Attribute(Attribute(Name('os', Load(), lineno=42, col_offset=10), 'path', Load(), lineno=42, col_offset=10), 'normcase', Load(), lineno=42, col_offset=10), [Name('pat', Load(), lineno=42, col_offset=27)], [], None, None, lineno=42, col_offset=10), lineno=42, col_offset=4), Return(Call(Name('fnmatchcase', Load(), lineno=43, col_offset=11), [Name('name', Load(), lineno=43, col_offset=23), Name('pat', Load(), lineno=43, col_offset=29)], [], None, None, lineno=43, col_offset=11), lineno=43, col_offset=4)], [], lineno=24, col_offset=0), FunctionDef('filter', arguments([Name('names', Param(), lineno=45, col_offset=11), Name('pat', Param(), lineno=45, col_offset=18)], None, None, []), [Expr(Str('Return the subset of the list NAMES that match PAT', lineno=46, col_offset=4), lineno=46, col_offset=4), Import([alias('os', None), alias('posixpath', None)], lineno=47, col_offset=4), Assign([Name('result', Store(), lineno=48, col_offset=4)], List([], Load(), lineno=48, col_offset=11), lineno=48, col_offset=4), Assign([Name('pat', Store(), lineno=49, col_offset=4)], Call(Attribute(Attribute(Name('os', Load(), lineno=49, col_offset=8), 'path', Load(), lineno=49, col_offset=8), 'normcase', Load(), lineno=49, col_offset=8), [Name('pat', Load(), lineno=49, col_offset=25)], [], None, None, lineno=49, col_offset=8), lineno=49, col_offset=4), If(UnaryOp(Not(), Compare(Name('pat', Load(), lineno=50, col_offset=11), [In()], [Name('_cache', Load(), lineno=50, col_offset=18)], lineno=50, col_offset=11), lineno=50, col_offset=7), [Assign([Name('res', Store(), lineno=51, col_offset=8)], Call(Name('translate', Load(), lineno=51, col_offset=14), [Name('pat', Load(), lineno=51, col_offset=24)], [], None, None, lineno=51, col_offset=14), lineno=51, col_offset=8), If(Compare(Call(Name('len', Load(), lineno=52, col_offset=11), [Name('_cache', Load(), lineno=52, col_offset=15)], [], None, None, lineno=52, col_offset=11), [GtE()], [Name('_MAXCACHE', Load(), lineno=52, col_offset=26)], lineno=52, col_offset=11), [Expr(Call(Attribute(Name('_cache', Load(), lineno=53, col_offset=12), 'clear', Load(), lineno=53, col_offset=12), [], [], None, None, lineno=53, col_offset=12), lineno=53, col_offset=12)], [], lineno=52, col_offset=8), Assign([Subscript(Name('_cache', Load(), lineno=54, col_offset=8), Index(Name('pat', Load(), lineno=54, col_offset=15)), Store(), lineno=54, col_offset=8)], Call(Attribute(Name('re', Load(), lineno=54, col_offset=22), 'compile', Load(), lineno=54, col_offset=22), [Name('res', Load(), lineno=54, col_offset=33)], [], None, None, lineno=54, col_offset=22), lineno=54, col_offset=8)], [], lineno=50, col_offset=4), Assign([Name('match', Store(), lineno=55, col_offset=4)], Attribute(Subscript(Name('_cache', Load(), lineno=55, col_offset=10), Index(Name('pat', Load(), lineno=55, col_offset=17)), Load(), lineno=55, col_offset=10), 'match', Load(), lineno=55, col_offset=10), lineno=55, col_offset=4), If(Compare(Attribute(Name('os', Load(), lineno=56, col_offset=7), 'path', Load(), lineno=56, col_offset=7), [Is()], [Name('posixpath', Load(), lineno=56, col_offset=18)], lineno=56, col_offset=7), [For(Name('name', Store(), lineno=58, col_offset=12), Name('names', Load(), lineno=58, col_offset=20), [If(Call(Name('match', Load(), lineno=59, col_offset=15), [Name('name', Load(), lineno=59, col_offset=21)], [], None, None, lineno=59, col_offset=15), [Expr(Call(Attribute(Name('result', Load(), lineno=60, col_offset=16), 'append', Load(), lineno=60, col_offset=16), [Name('name', Load(), lineno=60, col_offset=30)], [], None, None, lineno=60, col_offset=16), lineno=60, col_offset=16)], [], lineno=59, col_offset=12)], [], lineno=58, col_offset=8)], [For(Name('name', Store(), lineno=62, col_offset=12), Name('names', Load(), lineno=62, col_offset=20), [If(Call(Name('match', Load(), lineno=63, col_offset=15), [Call(Attribute(Attribute(Name('os', Load(), lineno=63, col_offset=21), 'path', Load(), lineno=63, col_offset=21), 'normcase', Load(), lineno=63, col_offset=21), [Name('name', Load(), lineno=63, col_offset=38)], [], None, None, lineno=63, col_offset=21)], [], None, None, lineno=63, col_offset=15), [Expr(Call(Attribute(Name('result', Load(), lineno=64, col_offset=16), 'append', Load(), lineno=64, col_offset=16), [Name('name', Load(), lineno=64, col_offset=30)], [], None, None, lineno=64, col_offset=16), lineno=64, col_offset=16)], [], lineno=63, col_offset=12)], [], lineno=62, col_offset=8)], lineno=56, col_offset=4), Return(Name('result', Load(), lineno=65, col_offset=11), lineno=65, col_offset=4)], [], lineno=45, col_offset=0), FunctionDef('fnmatchcase', arguments([Name('name', Param(), lineno=67, col_offset=16), Name('pat', Param(), lineno=67, col_offset=22)], None, None, []), [Expr(Str("Test whether FILENAME matches PATTERN, including case.\n\n    This is a version of fnmatch() which doesn't case-normalize\n    its arguments.\n    ", lineno=72, col_offset=-1), lineno=72, col_offset=-1), If(UnaryOp(Not(), Compare(Name('pat', Load(), lineno=74, col_offset=11), [In()], [Name('_cache', Load(), lineno=74, col_offset=18)], lineno=74, col_offset=11), lineno=74, col_offset=7), [Assign([Name('res', Store(), lineno=75, col_offset=8)], Call(Name('translate', Load(), lineno=75, col_offset=14), [Name('pat', Load(), lineno=75, col_offset=24)], [], None, None, lineno=75, col_offset=14), lineno=75, col_offset=8), If(Compare(Call(Name('len', Load(), lineno=76, col_offset=11), [Name('_cache', Load(), lineno=76, col_offset=15)], [], None, None, lineno=76, col_offset=11), [GtE()], [Name('_MAXCACHE', Load(), lineno=76, col_offset=26)], lineno=76, col_offset=11), [Expr(Call(Attribute(Name('_cache', Load(), lineno=77, col_offset=12), 'clear', Load(), lineno=77, col_offset=12), [], [], None, None, lineno=77, col_offset=12), lineno=77, col_offset=12)], [], lineno=76, col_offset=8), Assign([Subscript(Name('_cache', Load(), lineno=78, col_offset=8), Index(Name('pat', Load(), lineno=78, col_offset=15)), Store(), lineno=78, col_offset=8)], Call(Attribute(Name('re', Load(), lineno=78, col_offset=22), 'compile', Load(), lineno=78, col_offset=22), [Name('res', Load(), lineno=78, col_offset=33)], [], None, None, lineno=78, col_offset=22), lineno=78, col_offset=8)], [], lineno=74, col_offset=4), Return(Compare(Call(Attribute(Subscript(Name('_cache', Load(), lineno=79, col_offset=11), Index(Name('pat', Load(), lineno=79, col_offset=18)), Load(), lineno=79, col_offset=11), 'match', Load(), lineno=79, col_offset=11), [Name('name', Load(), lineno=79, col_offset=29)], [], None, None, lineno=79, col_offset=11), [IsNot()], [Name('None', Load(), lineno=79, col_offset=42)], lineno=79, col_offset=11), lineno=79, col_offset=4)], [], lineno=67, col_offset=0), FunctionDef('translate', arguments([Name('pat', Param(), lineno=81, col_offset=14)], None, None, []), [Expr(Str('Translate a shell PATTERN to a regular expression.\n\n    There is no way to quote meta-characters.\n    ', lineno=85, col_offset=-1), lineno=85, col_offset=-1), Assign([Tuple([Name('i', Store(), lineno=87, col_offset=4), Name('n', Store(), lineno=87, col_offset=7)], Store(), lineno=87, col_offset=4)], Tuple([Num(0, lineno=87, col_offset=11), Call(Name('len', Load(), lineno=87, col_offset=14), [Name('pat', Load(), lineno=87, col_offset=18)], [], None, None, lineno=87, col_offset=14)], Load(), lineno=87, col_offset=11), lineno=87, col_offset=4), Assign([Name('res', Store(), lineno=88, col_offset=4)], Str('', lineno=88, col_offset=10), lineno=88, col_offset=4), While(Compare(Name('i', Load(), lineno=89, col_offset=10), [Lt()], [Name('n', Load(), lineno=89, col_offset=14)], lineno=89, col_offset=10), [Assign([Name('c', Store(), lineno=90, col_offset=8)], Subscript(Name('pat', Load(), lineno=90, col_offset=12), Index(Name('i', Load(), lineno=90, col_offset=16)), Load(), lineno=90, col_offset=12), lineno=90, col_offset=8), Assign([Name('i', Store(), lineno=91, col_offset=8)], BinOp(Name('i', Load(), lineno=91, col_offset=12), Add(), Num(1, lineno=91, col_offset=14), lineno=91, col_offset=12), lineno=91, col_offset=8), If(Compare(Name('c', Load(), lineno=92, col_offset=11), [Eq()], [Str('*', lineno=92, col_offset=16)], lineno=92, col_offset=11), [Assign([Name('res', Store(), lineno=93, col_offset=12)], BinOp(Name('res', Load(), lineno=93, col_offset=18), Add(), Str('.*', lineno=93, col_offset=24), lineno=93, col_offset=18), lineno=93, col_offset=12)], [If(Compare(Name('c', Load(), lineno=94, col_offset=13), [Eq()], [Str('?', lineno=94, col_offset=18)], lineno=94, col_offset=13), [Assign([Name('res', Store(), lineno=95, col_offset=12)], BinOp(Name('res', Load(), lineno=95, col_offset=18), Add(), Str('.', lineno=95, col_offset=24), lineno=95, col_offset=18), lineno=95, col_offset=12)], [If(Compare(Name('c', Load(), lineno=96, col_offset=13), [Eq()], [Str('[', lineno=96, col_offset=18)], lineno=96, col_offset=13), [Assign([Name('j', Store(), lineno=97, col_offset=12)], Name('i', Load(), lineno=97, col_offset=16), lineno=97, col_offset=12), If(BoolOp(And(), [Compare(Name('j', Load(), lineno=98, col_offset=15), [Lt()], [Name('n', Load(), lineno=98, col_offset=19)], lineno=98, col_offset=15), Compare(Subscript(Name('pat', Load(), lineno=98, col_offset=25), Index(Name('j', Load(), lineno=98, col_offset=29)), Load(), lineno=98, col_offset=25), [Eq()], [Str('!', lineno=98, col_offset=35)], lineno=98, col_offset=25)], lineno=98, col_offset=15), [Assign([Name('j', Store(), lineno=99, col_offset=16)], BinOp(Name('j', Load(), lineno=99, col_offset=20), Add(), Num(1, lineno=99, col_offset=22), lineno=99, col_offset=20), lineno=99, col_offset=16)], [], lineno=98, col_offset=12), If(BoolOp(And(), [Compare(Name('j', Load(), lineno=100, col_offset=15), [Lt()], [Name('n', Load(), lineno=100, col_offset=19)], lineno=100, col_offset=15), Compare(Subscript(Name('pat', Load(), lineno=100, col_offset=25), Index(Name('j', Load(), lineno=100, col_offset=29)), Load(), lineno=100, col_offset=25), [Eq()], [Str(']', lineno=100, col_offset=35)], lineno=100, col_offset=25)], lineno=100, col_offset=15), [Assign([Name('j', Store(), lineno=101, col_offset=16)], BinOp(Name('j', Load(), lineno=101, col_offset=20), Add(), Num(1, lineno=101, col_offset=22), lineno=101, col_offset=20), lineno=101, col_offset=16)], [], lineno=100, col_offset=12), While(BoolOp(And(), [Compare(Name('j', Load(), lineno=102, col_offset=18), [Lt()], [Name('n', Load(), lineno=102, col_offset=22)], lineno=102, col_offset=18), Compare(Subscript(Name('pat', Load(), lineno=102, col_offset=28), Index(Name('j', Load(), lineno=102, col_offset=32)), Load(), lineno=102, col_offset=28), [NotEq()], [Str(']', lineno=102, col_offset=38)], lineno=102, col_offset=28)], lineno=102, col_offset=18), [Assign([Name('j', Store(), lineno=103, col_offset=16)], BinOp(Name('j', Load(), lineno=103, col_offset=20), Add(), Num(1, lineno=103, col_offset=22), lineno=103, col_offset=20), lineno=103, col_offset=16)], [], lineno=102, col_offset=12), If(Compare(Name('j', Load(), lineno=104, col_offset=15), [GtE()], [Name('n', Load(), lineno=104, col_offset=20)], lineno=104, col_offset=15), [Assign([Name('res', Store(), lineno=105, col_offset=16)], BinOp(Name('res', Load(), lineno=105, col_offset=22), Add(), Str('\\[', lineno=105, col_offset=28), lineno=105, col_offset=22), lineno=105, col_offset=16)], [Assign([Name('stuff', Store(), lineno=107, col_offset=16)], Call(Attribute(Subscript(Name('pat', Load(), lineno=107, col_offset=24), Slice(Name('i', Load(), lineno=107, col_offset=28), Name('j', Load(), lineno=107, col_offset=30), None), Load(), lineno=107, col_offset=24), 'replace', Load(), lineno=107, col_offset=24), [Str('\\', lineno=107, col_offset=41), Str('\\\\', lineno=107, col_offset=46)], [], None, None, lineno=107, col_offset=24), lineno=107, col_offset=16), Assign([Name('i', Store(), lineno=108, col_offset=16)], BinOp(Name('j', Load(), lineno=108, col_offset=20), Add(), Num(1, lineno=108, col_offset=22), lineno=108, col_offset=20), lineno=108, col_offset=16), If(Compare(Subscript(Name('stuff', Load(), lineno=109, col_offset=19), Index(Num(0, lineno=109, col_offset=25)), Load(), lineno=109, col_offset=19), [Eq()], [Str('!', lineno=109, col_offset=31)], lineno=109, col_offset=19), [Assign([Name('stuff', Store(), lineno=110, col_offset=20)], BinOp(Str('^', lineno=110, col_offset=28), Add(), Subscript(Name('stuff', Load(), lineno=110, col_offset=34), Slice(Num(1, lineno=110, col_offset=40), None, None), Load(), lineno=110, col_offset=34), lineno=110, col_offset=28), lineno=110, col_offset=20)], [If(Compare(Subscript(Name('stuff', Load(), lineno=111, col_offset=21), Index(Num(0, lineno=111, col_offset=27)), Load(), lineno=111, col_offset=21), [Eq()], [Str('^', lineno=111, col_offset=33)], lineno=111, col_offset=21), [Assign([Name('stuff', Store(), lineno=112, col_offset=20)], BinOp(Str('\\', lineno=112, col_offset=28), Add(), Name('stuff', Load(), lineno=112, col_offset=35), lineno=112, col_offset=28), lineno=112, col_offset=20)], [], lineno=111, col_offset=21)], lineno=109, col_offset=16), Assign([Name('res', Store(), lineno=113, col_offset=16)], BinOp(Str('%s[%s]', lineno=113, col_offset=22), Mod(), Tuple([Name('res', Load(), lineno=113, col_offset=34), Name('stuff', Load(), lineno=113, col_offset=39)], Load(), lineno=113, col_offset=34), lineno=113, col_offset=22), lineno=113, col_offset=16)], lineno=104, col_offset=12)], [Assign([Name('res', Store(), lineno=115, col_offset=12)], BinOp(Name('res', Load(), lineno=115, col_offset=18), Add(), Call(Attribute(Name('re', Load(), lineno=115, col_offset=24), 'escape', Load(), lineno=115, col_offset=24), [Name('c', Load(), lineno=115, col_offset=34)], [], None, None, lineno=115, col_offset=24), lineno=115, col_offset=18), lineno=115, col_offset=12)], lineno=96, col_offset=13)], lineno=94, col_offset=13)], lineno=92, col_offset=8)], [], lineno=89, col_offset=4), Return(BinOp(Name('res', Load(), lineno=116, col_offset=11), Add(), Str('\\Z(?ms)', lineno=116, col_offset=17), lineno=116, col_offset=11), lineno=116, col_offset=4)], [], lineno=81, col_offset=0)])
