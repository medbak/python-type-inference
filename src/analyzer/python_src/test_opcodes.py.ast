Module([ImportFrom('test.test_support', [alias('run_unittest', None), alias('check_py3k_warnings', None)], 0, lineno=3, col_offset=0), Import([alias('unittest', None)], lineno=4, col_offset=0), ClassDef('OpcodeTest', [Attribute(Name('unittest', Load(), lineno=6, col_offset=17), 'TestCase', Load(), lineno=6, col_offset=17)], [FunctionDef('test_try_inside_for_loop', arguments([Name('self', Param(), lineno=8, col_offset=33)], None, None, []), [Assign([Name('n', Store(), lineno=9, col_offset=8)], Num(0, lineno=9, col_offset=12), lineno=9, col_offset=8), For(Name('i', Store(), lineno=10, col_offset=12), Call(Name('range', Load(), lineno=10, col_offset=17), [Num(10, lineno=10, col_offset=23)], [], None, None, lineno=10, col_offset=17), [Assign([Name('n', Store(), lineno=11, col_offset=12)], BinOp(Name('n', Load(), lineno=11, col_offset=16), Add(), Name('i', Load(), lineno=11, col_offset=18), lineno=11, col_offset=16), lineno=11, col_offset=12), TryExcept([Expr(BinOp(Num(1, lineno=12, col_offset=17), FloorDiv(), Num(0, lineno=12, col_offset=22), lineno=12, col_offset=17), lineno=12, col_offset=17)], [ExceptHandler(Name('NameError', Load(), lineno=13, col_offset=19), None, [Pass( lineno=13, col_offset=30)], lineno=13, col_offset=12), ExceptHandler(Name('ZeroDivisionError', Load(), lineno=14, col_offset=19), None, [Pass( lineno=14, col_offset=38)], lineno=14, col_offset=12), ExceptHandler(Name('TypeError', Load(), lineno=15, col_offset=19), None, [Pass( lineno=15, col_offset=30)], lineno=15, col_offset=12)], [], lineno=12, col_offset=12), TryExcept([Pass( lineno=16, col_offset=17)], [ExceptHandler(None, None, [Pass( lineno=17, col_offset=20)], lineno=17, col_offset=12)], [], lineno=16, col_offset=12), TryFinally([Pass( lineno=18, col_offset=17)], [Pass( lineno=19, col_offset=21)], lineno=18, col_offset=12), Assign([Name('n', Store(), lineno=20, col_offset=12)], BinOp(Name('n', Load(), lineno=20, col_offset=16), Add(), Name('i', Load(), lineno=20, col_offset=18), lineno=20, col_offset=16), lineno=20, col_offset=12)], [], lineno=10, col_offset=8), If(Compare(Name('n', Load(), lineno=21, col_offset=11), [NotEq()], [Num(90, lineno=21, col_offset=16)], lineno=21, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=22, col_offset=12), 'fail', Load(), lineno=22, col_offset=12), [Str('try inside for', lineno=22, col_offset=22)], [], None, None, lineno=22, col_offset=12), lineno=22, col_offset=12)], [], lineno=21, col_offset=8)], [], lineno=8, col_offset=4), FunctionDef('test_raise_class_exceptions', arguments([Name('self', Param(), lineno=24, col_offset=36)], None, None, []), [ClassDef('AClass', [], [Pass( lineno=26, col_offset=22)], [], lineno=26, col_offset=8), ClassDef('BClass', [Name('AClass', Load(), lineno=27, col_offset=21)], [Pass( lineno=27, col_offset=30)], [], lineno=27, col_offset=8), ClassDef('CClass', [], [Pass( lineno=28, col_offset=22)], [], lineno=28, col_offset=8), ClassDef('DClass', [Name('AClass', Load(), lineno=29, col_offset=21)], [FunctionDef('__init__', arguments([Name('self', Param(), lineno=30, col_offset=25), Name('ignore', Param(), lineno=30, col_offset=31)], None, None, []), [Pass( lineno=31, col_offset=16)], [], lineno=30, col_offset=12)], [], lineno=29, col_offset=8), TryExcept([Raise(Call(Name('AClass', Load(), lineno=33, col_offset=19), [], [], None, None, lineno=33, col_offset=19), None, None, lineno=33, col_offset=13)], [ExceptHandler(None, None, [Pass( lineno=34, col_offset=16)], lineno=34, col_offset=8)], [], lineno=33, col_offset=8), TryExcept([Raise(Call(Name('AClass', Load(), lineno=36, col_offset=19), [], [], None, None, lineno=36, col_offset=19), None, None, lineno=36, col_offset=13)], [ExceptHandler(Name('AClass', Load(), lineno=37, col_offset=15), None, [Pass( lineno=37, col_offset=23)], lineno=37, col_offset=8)], [], lineno=36, col_offset=8), TryExcept([Raise(Call(Name('BClass', Load(), lineno=39, col_offset=19), [], [], None, None, lineno=39, col_offset=19), None, None, lineno=39, col_offset=13)], [ExceptHandler(Name('AClass', Load(), lineno=40, col_offset=15), None, [Pass( lineno=40, col_offset=23)], lineno=40, col_offset=8)], [], lineno=39, col_offset=8), TryExcept([Raise(Call(Name('BClass', Load(), lineno=42, col_offset=19), [], [], None, None, lineno=42, col_offset=19), None, None, lineno=42, col_offset=13)], [ExceptHandler(Name('CClass', Load(), lineno=43, col_offset=15), None, [Expr(Call(Attribute(Name('self', Load(), lineno=43, col_offset=23), 'fail', Load(), lineno=43, col_offset=23), [], [], None, None, lineno=43, col_offset=23), lineno=43, col_offset=23)], lineno=43, col_offset=8), ExceptHandler(None, None, [Pass( lineno=44, col_offset=16)], lineno=44, col_offset=8)], [], lineno=42, col_offset=8), Assign([Name('a', Store(), lineno=46, col_offset=8)], Call(Name('AClass', Load(), lineno=46, col_offset=12), [], [], None, None, lineno=46, col_offset=12), lineno=46, col_offset=8), Assign([Name('b', Store(), lineno=47, col_offset=8)], Call(Name('BClass', Load(), lineno=47, col_offset=12), [], [], None, None, lineno=47, col_offset=12), lineno=47, col_offset=8), TryExcept([Raise(Name('AClass', Load(), lineno=49, col_offset=19), Name('b', Load(), lineno=49, col_offset=27), None, lineno=49, col_offset=13)], [ExceptHandler(Name('BClass', Load(), lineno=50, col_offset=15), Name('v', Store(), lineno=50, col_offset=23), [Expr(Call(Attribute(Name('self', Load(), lineno=51, col_offset=12), 'assertEqual', Load(), lineno=51, col_offset=12), [Name('v', Load(), lineno=51, col_offset=29), Name('b', Load(), lineno=51, col_offset=32)], [], None, None, lineno=51, col_offset=12), lineno=51, col_offset=12)], lineno=50, col_offset=8)], [Expr(Call(Attribute(Name('self', Load(), lineno=52, col_offset=14), 'fail', Load(), lineno=52, col_offset=14), [Str('no exception', lineno=52, col_offset=24)], [], None, None, lineno=52, col_offset=14), lineno=52, col_offset=14)], lineno=49, col_offset=8), TryExcept([Raise(Name('b', Load(), lineno=54, col_offset=19), None, None, lineno=54, col_offset=13)], [ExceptHandler(Name('AClass', Load(), lineno=55, col_offset=15), Name('v', Store(), lineno=55, col_offset=23), [Expr(Call(Attribute(Name('self', Load(), lineno=56, col_offset=12), 'assertEqual', Load(), lineno=56, col_offset=12), [Name('v', Load(), lineno=56, col_offset=29), Name('b', Load(), lineno=56, col_offset=32)], [], None, None, lineno=56, col_offset=12), lineno=56, col_offset=12)], lineno=55, col_offset=8)], [Expr(Call(Attribute(Name('self', Load(), lineno=58, col_offset=12), 'fail', Load(), lineno=58, col_offset=12), [Str('no exception', lineno=58, col_offset=22)], [], None, None, lineno=58, col_offset=12), lineno=58, col_offset=12)], lineno=54, col_offset=8), TryExcept([Raise(Name('BClass', Load(), lineno=61, col_offset=20), Name('a', Load(), lineno=61, col_offset=28), None, lineno=61, col_offset=14)], [ExceptHandler(Name('TypeError', Load(), lineno=62, col_offset=15), None, [Pass( lineno=62, col_offset=26)], lineno=62, col_offset=8)], [Expr(Call(Attribute(Name('self', Load(), lineno=63, col_offset=14), 'fail', Load(), lineno=63, col_offset=14), [Str('no exception', lineno=63, col_offset=24)], [], None, None, lineno=63, col_offset=14), lineno=63, col_offset=14)], lineno=61, col_offset=8), TryExcept([Raise(Name('DClass', Load(), lineno=65, col_offset=20), Name('a', Load(), lineno=65, col_offset=28), None, lineno=65, col_offset=14)], [ExceptHandler(Name('DClass', Load(), lineno=66, col_offset=15), Name('v', Store(), lineno=66, col_offset=23), [Expr(Call(Attribute(Name('self', Load(), lineno=67, col_offset=12), 'assertIsInstance', Load(), lineno=67, col_offset=12), [Name('v', Load(), lineno=67, col_offset=34), Name('DClass', Load(), lineno=67, col_offset=37)], [], None, None, lineno=67, col_offset=12), lineno=67, col_offset=12)], lineno=66, col_offset=8)], [Expr(Call(Attribute(Name('self', Load(), lineno=69, col_offset=12), 'fail', Load(), lineno=69, col_offset=12), [Str('no exception', lineno=69, col_offset=22)], [], None, None, lineno=69, col_offset=12), lineno=69, col_offset=12)], lineno=65, col_offset=8)], [], lineno=24, col_offset=4), FunctionDef('test_compare_function_objects', arguments([Name('self', Param(), lineno=71, col_offset=38)], None, None, []), [Assign([Name('f', Store(), lineno=73, col_offset=8)], Call(Name('eval', Load(), lineno=73, col_offset=12), [Str('lambda: None', lineno=73, col_offset=17)], [], None, None, lineno=73, col_offset=12), lineno=73, col_offset=8), Assign([Name('g', Store(), lineno=74, col_offset=8)], Call(Name('eval', Load(), lineno=74, col_offset=12), [Str('lambda: None', lineno=74, col_offset=17)], [], None, None, lineno=74, col_offset=12), lineno=74, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=75, col_offset=8), 'assertNotEqual', Load(), lineno=75, col_offset=8), [Name('f', Load(), lineno=75, col_offset=28), Name('g', Load(), lineno=75, col_offset=31)], [], None, None, lineno=75, col_offset=8), lineno=75, col_offset=8), Assign([Name('f', Store(), lineno=77, col_offset=8)], Call(Name('eval', Load(), lineno=77, col_offset=12), [Str('lambda a: a', lineno=77, col_offset=17)], [], None, None, lineno=77, col_offset=12), lineno=77, col_offset=8), Assign([Name('g', Store(), lineno=78, col_offset=8)], Call(Name('eval', Load(), lineno=78, col_offset=12), [Str('lambda a: a', lineno=78, col_offset=17)], [], None, None, lineno=78, col_offset=12), lineno=78, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=79, col_offset=8), 'assertNotEqual', Load(), lineno=79, col_offset=8), [Name('f', Load(), lineno=79, col_offset=28), Name('g', Load(), lineno=79, col_offset=31)], [], None, None, lineno=79, col_offset=8), lineno=79, col_offset=8), Assign([Name('f', Store(), lineno=81, col_offset=8)], Call(Name('eval', Load(), lineno=81, col_offset=12), [Str('lambda a=1: a', lineno=81, col_offset=17)], [], None, None, lineno=81, col_offset=12), lineno=81, col_offset=8), Assign([Name('g', Store(), lineno=82, col_offset=8)], Call(Name('eval', Load(), lineno=82, col_offset=12), [Str('lambda a=1: a', lineno=82, col_offset=17)], [], None, None, lineno=82, col_offset=12), lineno=82, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=83, col_offset=8), 'assertNotEqual', Load(), lineno=83, col_offset=8), [Name('f', Load(), lineno=83, col_offset=28), Name('g', Load(), lineno=83, col_offset=31)], [], None, None, lineno=83, col_offset=8), lineno=83, col_offset=8), Assign([Name('f', Store(), lineno=85, col_offset=8)], Call(Name('eval', Load(), lineno=85, col_offset=12), [Str('lambda: 0', lineno=85, col_offset=17)], [], None, None, lineno=85, col_offset=12), lineno=85, col_offset=8), Assign([Name('g', Store(), lineno=86, col_offset=8)], Call(Name('eval', Load(), lineno=86, col_offset=12), [Str('lambda: 1', lineno=86, col_offset=17)], [], None, None, lineno=86, col_offset=12), lineno=86, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=87, col_offset=8), 'assertNotEqual', Load(), lineno=87, col_offset=8), [Name('f', Load(), lineno=87, col_offset=28), Name('g', Load(), lineno=87, col_offset=31)], [], None, None, lineno=87, col_offset=8), lineno=87, col_offset=8), Assign([Name('f', Store(), lineno=89, col_offset=8)], Call(Name('eval', Load(), lineno=89, col_offset=12), [Str('lambda: None', lineno=89, col_offset=17)], [], None, None, lineno=89, col_offset=12), lineno=89, col_offset=8), Assign([Name('g', Store(), lineno=90, col_offset=8)], Call(Name('eval', Load(), lineno=90, col_offset=12), [Str('lambda a: None', lineno=90, col_offset=17)], [], None, None, lineno=90, col_offset=12), lineno=90, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=91, col_offset=8), 'assertNotEqual', Load(), lineno=91, col_offset=8), [Name('f', Load(), lineno=91, col_offset=28), Name('g', Load(), lineno=91, col_offset=31)], [], None, None, lineno=91, col_offset=8), lineno=91, col_offset=8), Assign([Name('f', Store(), lineno=93, col_offset=8)], Call(Name('eval', Load(), lineno=93, col_offset=12), [Str('lambda a: None', lineno=93, col_offset=17)], [], None, None, lineno=93, col_offset=12), lineno=93, col_offset=8), Assign([Name('g', Store(), lineno=94, col_offset=8)], Call(Name('eval', Load(), lineno=94, col_offset=12), [Str('lambda b: None', lineno=94, col_offset=17)], [], None, None, lineno=94, col_offset=12), lineno=94, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=95, col_offset=8), 'assertNotEqual', Load(), lineno=95, col_offset=8), [Name('f', Load(), lineno=95, col_offset=28), Name('g', Load(), lineno=95, col_offset=31)], [], None, None, lineno=95, col_offset=8), lineno=95, col_offset=8), Assign([Name('f', Store(), lineno=97, col_offset=8)], Call(Name('eval', Load(), lineno=97, col_offset=12), [Str('lambda a: None', lineno=97, col_offset=17)], [], None, None, lineno=97, col_offset=12), lineno=97, col_offset=8), Assign([Name('g', Store(), lineno=98, col_offset=8)], Call(Name('eval', Load(), lineno=98, col_offset=12), [Str('lambda a=None: None', lineno=98, col_offset=17)], [], None, None, lineno=98, col_offset=12), lineno=98, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=99, col_offset=8), 'assertNotEqual', Load(), lineno=99, col_offset=8), [Name('f', Load(), lineno=99, col_offset=28), Name('g', Load(), lineno=99, col_offset=31)], [], None, None, lineno=99, col_offset=8), lineno=99, col_offset=8), Assign([Name('f', Store(), lineno=101, col_offset=8)], Call(Name('eval', Load(), lineno=101, col_offset=12), [Str('lambda a=0: None', lineno=101, col_offset=17)], [], None, None, lineno=101, col_offset=12), lineno=101, col_offset=8), Assign([Name('g', Store(), lineno=102, col_offset=8)], Call(Name('eval', Load(), lineno=102, col_offset=12), [Str('lambda a=1: None', lineno=102, col_offset=17)], [], None, None, lineno=102, col_offset=12), lineno=102, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=103, col_offset=8), 'assertNotEqual', Load(), lineno=103, col_offset=8), [Name('f', Load(), lineno=103, col_offset=28), Name('g', Load(), lineno=103, col_offset=31)], [], None, None, lineno=103, col_offset=8), lineno=103, col_offset=8)], [], lineno=71, col_offset=4), FunctionDef('test_modulo_of_string_subclasses', arguments([Name('self', Param(), lineno=105, col_offset=41)], None, None, []), [ClassDef('MyString', [Name('str', Load(), lineno=106, col_offset=23)], [FunctionDef('__mod__', arguments([Name('self', Param(), lineno=107, col_offset=24), Name('value', Param(), lineno=107, col_offset=30)], None, None, []), [Return(Num(42, lineno=108, col_offset=23), lineno=108, col_offset=16)], [], lineno=107, col_offset=12)], [], lineno=106, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=109, col_offset=8), 'assertEqual', Load(), lineno=109, col_offset=8), [BinOp(Call(Name('MyString', Load(), lineno=109, col_offset=25), [], [], None, None, lineno=109, col_offset=25), Mod(), Num(3, lineno=109, col_offset=38), lineno=109, col_offset=25), Num(42, lineno=109, col_offset=41)], [], None, None, lineno=109, col_offset=8), lineno=109, col_offset=8)], [], lineno=105, col_offset=4)], [], lineno=6, col_offset=0), FunctionDef('test_main', arguments([], None, None, []), [With(Call(Name('check_py3k_warnings', Load(), lineno=113, col_offset=9), [Tuple([Str('exceptions must derive from BaseException', lineno=113, col_offset=30), Name('DeprecationWarning', Load(), lineno=114, col_offset=30)], Load(), lineno=113, col_offset=30), Tuple([Str("catching classes that don't inherit from BaseException is not allowed", lineno=115, col_offset=30), Name('DeprecationWarning', Load(), lineno=117, col_offset=30)], Load(), lineno=115, col_offset=30)], [], None, None, lineno=113, col_offset=9), None, [Expr(Call(Name('run_unittest', Load(), lineno=118, col_offset=8), [Name('OpcodeTest', Load(), lineno=118, col_offset=21)], [], None, None, lineno=118, col_offset=8), lineno=118, col_offset=8)], lineno=113, col_offset=9)], [], lineno=112, col_offset=0), If(Compare(Name('__name__', Load(), lineno=120, col_offset=3), [Eq()], [Str('__main__', lineno=120, col_offset=15)], lineno=120, col_offset=3), [Expr(Call(Name('test_main', Load(), lineno=121, col_offset=4), [], [], None, None, lineno=121, col_offset=4), lineno=121, col_offset=4)], [], lineno=120, col_offset=0)])
