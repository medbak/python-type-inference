Module([Expr(Str("Fixer for removing uses of the types module.\n\nThese work for only the known names in the types module.  The forms above\ncan include types. or not.  ie, It is assumed the module is imported either as:\n\n    import types\n    from types import ... # either * or specific types\n\nThe import statements are not modified.\n\nThere should be another fixer that handles at least the following constants:\n\n   type([]) -> list\n   type(()) -> tuple\n   type('') -> str\n\n", lineno=20, col_offset=-1), lineno=20, col_offset=-1), ImportFrom('pgen2', [alias('token', None)], 2, lineno=23, col_offset=0), ImportFrom(None, [alias('fixer_base', None)], 2, lineno=24, col_offset=0), ImportFrom('fixer_util', [alias('Name', None)], 2, lineno=25, col_offset=0), Assign([Name('_TYPE_MAPPING', Store(), lineno=27, col_offset=0)], Dict([Str('BooleanType', lineno=28, col_offset=8), Str('BufferType', lineno=29, col_offset=8), Str('ClassType', lineno=30, col_offset=8), Str('ComplexType', lineno=31, col_offset=8), Str('DictType', lineno=32, col_offset=8), Str('DictionaryType', lineno=33, col_offset=8), Str('EllipsisType', lineno=34, col_offset=8), Str('FloatType', lineno=36, col_offset=8), Str('IntType', lineno=37, col_offset=8), Str('ListType', lineno=38, col_offset=8), Str('LongType', lineno=39, col_offset=8), Str('ObjectType', lineno=40, col_offset=8), Str('NoneType', lineno=41, col_offset=8), Str('NotImplementedType', lineno=42, col_offset=8), Str('SliceType', lineno=43, col_offset=8), Str('StringType', lineno=44, col_offset=8), Str('StringTypes', lineno=45, col_offset=8), Str('TupleType', lineno=46, col_offset=8), Str('TypeType', lineno=47, col_offset=8), Str('UnicodeType', lineno=48, col_offset=8), Str('XRangeType', lineno=49, col_offset=8)], [Str('bool', lineno=28, col_offset=24), Str('memoryview', lineno=29, col_offset=23), Str('type', lineno=30, col_offset=22), Str('complex', lineno=31, col_offset=24), Str('dict', lineno=32, col_offset=20), Str('dict', lineno=33, col_offset=27), Str('type(Ellipsis)', lineno=34, col_offset=25), Str('float', lineno=36, col_offset=21), Str('int', lineno=37, col_offset=19), Str('list', lineno=38, col_offset=20), Str('int', lineno=39, col_offset=20), Str('object', lineno=40, col_offset=23), Str('type(None)', lineno=41, col_offset=20), Str('type(NotImplemented)', lineno=42, col_offset=31), Str('slice', lineno=43, col_offset=22), Str('bytes', lineno=44, col_offset=22), Str('str', lineno=45, col_offset=24), Str('tuple', lineno=46, col_offset=21), Str('type', lineno=47, col_offset=21), Str('str', lineno=48, col_offset=23), Str('range', lineno=49, col_offset=23)], lineno=27, col_offset=16), lineno=27, col_offset=0), Assign([Name('_pats', Store(), lineno=52, col_offset=0)], ListComp(BinOp(Str("power< 'types' trailer< '.' name='%s' > >", lineno=52, col_offset=9), Mod(), Name('t', Load(), lineno=52, col_offset=55), lineno=52, col_offset=9), [comprehension(Name('t', Store(), lineno=52, col_offset=61), Name('_TYPE_MAPPING', Load(), lineno=52, col_offset=66), [])], lineno=52, col_offset=9), lineno=52, col_offset=0), ClassDef('FixTypes', [Attribute(Name('fixer_base', Load(), lineno=54, col_offset=15), 'BaseFix', Load(), lineno=54, col_offset=15)], [Assign([Name('BM_compatible', Store(), lineno=55, col_offset=4)], Name('True', Load(), lineno=55, col_offset=20), lineno=55, col_offset=4), Assign([Name('PATTERN', Store(), lineno=56, col_offset=4)], Call(Attribute(Str('|', lineno=56, col_offset=14), 'join', Load(), lineno=56, col_offset=14), [Name('_pats', Load(), lineno=56, col_offset=23)], [], None, None, lineno=56, col_offset=14), lineno=56, col_offset=4), FunctionDef('transform', arguments([Name('self', Param(), lineno=58, col_offset=18), Name('node', Param(), lineno=58, col_offset=24), Name('results', Param(), lineno=58, col_offset=30)], None, None, []), [Assign([Name('new_value', Store(), lineno=59, col_offset=8)], Call(Name('unicode', Load(), lineno=59, col_offset=20), [Call(Attribute(Name('_TYPE_MAPPING', Load(), lineno=59, col_offset=28), 'get', Load(), lineno=59, col_offset=28), [Attribute(Subscript(Name('results', Load(), lineno=59, col_offset=46), Index(Str('name', lineno=59, col_offset=54)), Load(), lineno=59, col_offset=46), 'value', Load(), lineno=59, col_offset=46)], [], None, None, lineno=59, col_offset=28)], [], None, None, lineno=59, col_offset=20), lineno=59, col_offset=8), If(Name('new_value', Load(), lineno=60, col_offset=11), [Return(Call(Name('Name', Load(), lineno=61, col_offset=19), [Name('new_value', Load(), lineno=61, col_offset=24)], [keyword('prefix', Attribute(Name('node', Load(), lineno=61, col_offset=42), 'prefix', Load(), lineno=61, col_offset=42))], None, None, lineno=61, col_offset=19), lineno=61, col_offset=12)], [], lineno=60, col_offset=8), Return(Name('None', Load(), lineno=62, col_offset=15), lineno=62, col_offset=8)], [], lineno=58, col_offset=4)], [], lineno=54, col_offset=0)])
