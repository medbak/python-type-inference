Module([Expr(Str('distutils.fancy_getopt\n\nWrapper around the standard getopt module that provides the following\nadditional features:\n  * short and long options are tied together\n  * options have help strings, so fancy_getopt could potentially\n    create a complete usage summary\n  * options set attributes of a passed-in object\n', lineno=9, col_offset=-1), lineno=9, col_offset=-1), Assign([Name('__revision__', Store(), lineno=11, col_offset=0)], Str('$Id: fancy_getopt.py 76956 2009-12-21 01:22:46Z tarek.ziade $', lineno=11, col_offset=15), lineno=11, col_offset=0), Import([alias('sys', None)], lineno=13, col_offset=0), Import([alias('string', None)], lineno=14, col_offset=0), Import([alias('re', None)], lineno=15, col_offset=0), Import([alias('getopt', None)], lineno=16, col_offset=0), ImportFrom('distutils.errors', [alias('DistutilsGetoptError', None), alias('DistutilsArgError', None)], 0, lineno=17, col_offset=0), Assign([Name('longopt_pat', Store(), lineno=23, col_offset=0)], Str('[a-zA-Z](?:[a-zA-Z0-9-]*)', lineno=23, col_offset=14), lineno=23, col_offset=0), Assign([Name('longopt_re', Store(), lineno=24, col_offset=0)], Call(Attribute(Name('re', Load(), lineno=24, col_offset=13), 'compile', Load(), lineno=24, col_offset=13), [BinOp(Str('^%s$', lineno=24, col_offset=24), Mod(), Name('longopt_pat', Load(), lineno=24, col_offset=34), lineno=24, col_offset=24)], [], None, None, lineno=24, col_offset=13), lineno=24, col_offset=0), Assign([Name('neg_alias_re', Store(), lineno=27, col_offset=0)], Call(Attribute(Name('re', Load(), lineno=27, col_offset=15), 'compile', Load(), lineno=27, col_offset=15), [BinOp(Str('^(%s)=!(%s)$', lineno=27, col_offset=26), Mod(), Tuple([Name('longopt_pat', Load(), lineno=27, col_offset=44), Name('longopt_pat', Load(), lineno=27, col_offset=57)], Load(), lineno=27, col_offset=44), lineno=27, col_offset=26)], [], None, None, lineno=27, col_offset=15), lineno=27, col_offset=0), Assign([Name('longopt_xlate', Store(), lineno=31, col_offset=0)], Call(Attribute(Name('string', Load(), lineno=31, col_offset=16), 'maketrans', Load(), lineno=31, col_offset=16), [Str('-', lineno=31, col_offset=33), Str('_', lineno=31, col_offset=38)], [], None, None, lineno=31, col_offset=16), lineno=31, col_offset=0), ClassDef('FancyGetopt', [], [Expr(Str('Wrapper around the standard \'getopt()\' module that provides some\n    handy extra functionality:\n      * short and long options are tied together\n      * options have help strings, and help text can be assembled\n        from them\n      * options set attributes of a passed-in object\n      * boolean options can have "negative aliases" -- eg. if\n        --quiet is the "negative alias" of --verbose, then "--quiet"\n        on the command line sets \'verbose\' to false\n    ', lineno=43, col_offset=-1), lineno=43, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=45, col_offset=18), Name('option_table', Param(), lineno=45, col_offset=24)], None, None, [Name('None', Load(), lineno=45, col_offset=37)]), [Assign([Attribute(Name('self', Load(), lineno=55, col_offset=8), 'option_table', Store(), lineno=55, col_offset=8)], Name('option_table', Load(), lineno=55, col_offset=28), lineno=55, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=59, col_offset=8), 'option_index', Store(), lineno=59, col_offset=8)], Dict([], [], lineno=59, col_offset=28), lineno=59, col_offset=8), If(Attribute(Name('self', Load(), lineno=60, col_offset=11), 'option_table', Load(), lineno=60, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=61, col_offset=12), '_build_index', Load(), lineno=61, col_offset=12), [], [], None, None, lineno=61, col_offset=12), lineno=61, col_offset=12)], [], lineno=60, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=65, col_offset=8), 'alias', Store(), lineno=65, col_offset=8)], Dict([], [], lineno=65, col_offset=21), lineno=65, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=69, col_offset=8), 'negative_alias', Store(), lineno=69, col_offset=8)], Dict([], [], lineno=69, col_offset=30), lineno=69, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=75, col_offset=8), 'short_opts', Store(), lineno=75, col_offset=8)], List([], Load(), lineno=75, col_offset=26), lineno=75, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=76, col_offset=8), 'long_opts', Store(), lineno=76, col_offset=8)], List([], Load(), lineno=76, col_offset=25), lineno=76, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=77, col_offset=8), 'short2long', Store(), lineno=77, col_offset=8)], Dict([], [], lineno=77, col_offset=26), lineno=77, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=78, col_offset=8), 'attr_name', Store(), lineno=78, col_offset=8)], Dict([], [], lineno=78, col_offset=25), lineno=78, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=79, col_offset=8), 'takes_arg', Store(), lineno=79, col_offset=8)], Dict([], [], lineno=79, col_offset=25), lineno=79, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=84, col_offset=8), 'option_order', Store(), lineno=84, col_offset=8)], List([], Load(), lineno=84, col_offset=28), lineno=84, col_offset=8)], [], lineno=45, col_offset=4), FunctionDef('_build_index', arguments([Name('self', Param(), lineno=89, col_offset=22)], None, None, []), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=90, col_offset=8), 'option_index', Load(), lineno=90, col_offset=8), 'clear', Load(), lineno=90, col_offset=8), [], [], None, None, lineno=90, col_offset=8), lineno=90, col_offset=8), For(Name('option', Store(), lineno=91, col_offset=12), Attribute(Name('self', Load(), lineno=91, col_offset=22), 'option_table', Load(), lineno=91, col_offset=22), [Assign([Subscript(Attribute(Name('self', Load(), lineno=92, col_offset=12), 'option_index', Load(), lineno=92, col_offset=12), Index(Subscript(Name('option', Load(), lineno=92, col_offset=30), Index(Num(0, lineno=92, col_offset=37)), Load(), lineno=92, col_offset=30)), Store(), lineno=92, col_offset=12)], Name('option', Load(), lineno=92, col_offset=43), lineno=92, col_offset=12)], [], lineno=91, col_offset=8)], [], lineno=89, col_offset=4), FunctionDef('set_option_table', arguments([Name('self', Param(), lineno=94, col_offset=26), Name('option_table', Param(), lineno=94, col_offset=32)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=95, col_offset=8), 'option_table', Store(), lineno=95, col_offset=8)], Name('option_table', Load(), lineno=95, col_offset=28), lineno=95, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=96, col_offset=8), '_build_index', Load(), lineno=96, col_offset=8), [], [], None, None, lineno=96, col_offset=8), lineno=96, col_offset=8)], [], lineno=94, col_offset=4), FunctionDef('add_option', arguments([Name('self', Param(), lineno=98, col_offset=20), Name('long_option', Param(), lineno=98, col_offset=26), Name('short_option', Param(), lineno=98, col_offset=39), Name('help_string', Param(), lineno=98, col_offset=58)], None, None, [Name('None', Load(), lineno=98, col_offset=52), Name('None', Load(), lineno=98, col_offset=70)]), [If(Compare(Name('long_option', Load(), lineno=99, col_offset=11), [In()], [Attribute(Name('self', Load(), lineno=99, col_offset=26), 'option_index', Load(), lineno=99, col_offset=26)], lineno=99, col_offset=11), [Raise(Name('DistutilsGetoptError', Load(), lineno=100, col_offset=18), BinOp(Str("option conflict: already an option '%s'", lineno=101, col_offset=18), Mod(), Name('long_option', Load(), lineno=101, col_offset=62), lineno=101, col_offset=18), None, lineno=100, col_offset=12)], [Assign([Name('option', Store(), lineno=103, col_offset=12)], Tuple([Name('long_option', Load(), lineno=103, col_offset=22), Name('short_option', Load(), lineno=103, col_offset=35), Name('help_string', Load(), lineno=103, col_offset=49)], Load(), lineno=103, col_offset=22), lineno=103, col_offset=12), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=104, col_offset=12), 'option_table', Load(), lineno=104, col_offset=12), 'append', Load(), lineno=104, col_offset=12), [Name('option', Load(), lineno=104, col_offset=37)], [], None, None, lineno=104, col_offset=12), lineno=104, col_offset=12), Assign([Subscript(Attribute(Name('self', Load(), lineno=105, col_offset=12), 'option_index', Load(), lineno=105, col_offset=12), Index(Name('long_option', Load(), lineno=105, col_offset=30)), Store(), lineno=105, col_offset=12)], Name('option', Load(), lineno=105, col_offset=45), lineno=105, col_offset=12)], lineno=99, col_offset=8)], [], lineno=98, col_offset=4), FunctionDef('has_option', arguments([Name('self', Param(), lineno=108, col_offset=20), Name('long_option', Param(), lineno=108, col_offset=26)], None, None, []), [Expr(Str("Return true if the option table for this parser has an\n        option with long name 'long_option'.", lineno=110, col_offset=-1), lineno=110, col_offset=-1), Return(Compare(Name('long_option', Load(), lineno=111, col_offset=15), [In()], [Attribute(Name('self', Load(), lineno=111, col_offset=30), 'option_index', Load(), lineno=111, col_offset=30)], lineno=111, col_offset=15), lineno=111, col_offset=8)], [], lineno=108, col_offset=4), FunctionDef('get_attr_name', arguments([Name('self', Param(), lineno=113, col_offset=23), Name('long_option', Param(), lineno=113, col_offset=29)], None, None, []), [Expr(Str("Translate long option name 'long_option' to the form it\n        has as an attribute of some object: ie., translate hyphens\n        to underscores.", lineno=116, col_offset=-1), lineno=116, col_offset=-1), Return(Call(Attribute(Name('string', Load(), lineno=117, col_offset=15), 'translate', Load(), lineno=117, col_offset=15), [Name('long_option', Load(), lineno=117, col_offset=32), Name('longopt_xlate', Load(), lineno=117, col_offset=45)], [], None, None, lineno=117, col_offset=15), lineno=117, col_offset=8)], [], lineno=113, col_offset=4), FunctionDef('_check_alias_dict', arguments([Name('self', Param(), lineno=120, col_offset=27), Name('aliases', Param(), lineno=120, col_offset=33), Name('what', Param(), lineno=120, col_offset=42)], None, None, []), [Assert(Call(Name('isinstance', Load(), lineno=121, col_offset=15), [Name('aliases', Load(), lineno=121, col_offset=26), Name('dict', Load(), lineno=121, col_offset=35)], [], None, None, lineno=121, col_offset=15), None, lineno=121, col_offset=8), For(Tuple([Name('alias', Store(), lineno=122, col_offset=13), Name('opt', Store(), lineno=122, col_offset=20)], Store(), lineno=122, col_offset=13), Call(Attribute(Name('aliases', Load(), lineno=122, col_offset=28), 'items', Load(), lineno=122, col_offset=28), [], [], None, None, lineno=122, col_offset=28), [If(Compare(Name('alias', Load(), lineno=123, col_offset=15), [NotIn()], [Attribute(Name('self', Load(), lineno=123, col_offset=28), 'option_index', Load(), lineno=123, col_offset=28)], lineno=123, col_offset=15), [Raise(Name('DistutilsGetoptError', Load(), lineno=124, col_offset=22), BinOp(Str("invalid %s '%s': option '%s' not defined", lineno=125, col_offset=23), Mod(), Tuple([Name('what', Load(), lineno=126, col_offset=53), Name('alias', Load(), lineno=126, col_offset=59), Name('alias', Load(), lineno=126, col_offset=66)], Load(), lineno=126, col_offset=53), lineno=125, col_offset=22), None, lineno=124, col_offset=16)], [], lineno=123, col_offset=12), If(Compare(Name('opt', Load(), lineno=127, col_offset=15), [NotIn()], [Attribute(Name('self', Load(), lineno=127, col_offset=26), 'option_index', Load(), lineno=127, col_offset=26)], lineno=127, col_offset=15), [Raise(Name('DistutilsGetoptError', Load(), lineno=128, col_offset=22), BinOp(Str("invalid %s '%s': aliased option '%s' not defined", lineno=129, col_offset=23), Mod(), Tuple([Name('what', Load(), lineno=130, col_offset=61), Name('alias', Load(), lineno=130, col_offset=67), Name('opt', Load(), lineno=130, col_offset=74)], Load(), lineno=130, col_offset=61), lineno=129, col_offset=22), None, lineno=128, col_offset=16)], [], lineno=127, col_offset=12)], [], lineno=122, col_offset=8)], [], lineno=120, col_offset=4), FunctionDef('set_aliases', arguments([Name('self', Param(), lineno=132, col_offset=21), Name('alias', Param(), lineno=132, col_offset=27)], None, None, []), [Expr(Str('Set the aliases for this option parser.', lineno=133, col_offset=8), lineno=133, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=134, col_offset=8), '_check_alias_dict', Load(), lineno=134, col_offset=8), [Name('alias', Load(), lineno=134, col_offset=31), Str('alias', lineno=134, col_offset=38)], [], None, None, lineno=134, col_offset=8), lineno=134, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=135, col_offset=8), 'alias', Store(), lineno=135, col_offset=8)], Name('alias', Load(), lineno=135, col_offset=21), lineno=135, col_offset=8)], [], lineno=132, col_offset=4), FunctionDef('set_negative_aliases', arguments([Name('self', Param(), lineno=137, col_offset=30), Name('negative_alias', Param(), lineno=137, col_offset=36)], None, None, []), [Expr(Str("Set the negative aliases for this option parser.\n        'negative_alias' should be a dictionary mapping option names to\n        option names, both the key and value must already be defined\n        in the option table.", lineno=141, col_offset=-1), lineno=141, col_offset=-1), Expr(Call(Attribute(Name('self', Load(), lineno=142, col_offset=8), '_check_alias_dict', Load(), lineno=142, col_offset=8), [Name('negative_alias', Load(), lineno=142, col_offset=31), Str('negative alias', lineno=142, col_offset=47)], [], None, None, lineno=142, col_offset=8), lineno=142, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=143, col_offset=8), 'negative_alias', Store(), lineno=143, col_offset=8)], Name('negative_alias', Load(), lineno=143, col_offset=30), lineno=143, col_offset=8)], [], lineno=137, col_offset=4), FunctionDef('_grok_option_table', arguments([Name('self', Param(), lineno=146, col_offset=28)], None, None, []), [Expr(Str("Populate the various data structures that keep tabs on the\n        option table.  Called by 'getopt()' before it can do anything\n        worthwhile.\n        ", lineno=150, col_offset=-1), lineno=150, col_offset=-1), Assign([Attribute(Name('self', Load(), lineno=151, col_offset=8), 'long_opts', Store(), lineno=151, col_offset=8)], List([], Load(), lineno=151, col_offset=25), lineno=151, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=152, col_offset=8), 'short_opts', Store(), lineno=152, col_offset=8)], List([], Load(), lineno=152, col_offset=26), lineno=152, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=153, col_offset=8), 'short2long', Load(), lineno=153, col_offset=8), 'clear', Load(), lineno=153, col_offset=8), [], [], None, None, lineno=153, col_offset=8), lineno=153, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=154, col_offset=8), 'repeat', Store(), lineno=154, col_offset=8)], Dict([], [], lineno=154, col_offset=22), lineno=154, col_offset=8), For(Name('option', Store(), lineno=156, col_offset=12), Attribute(Name('self', Load(), lineno=156, col_offset=22), 'option_table', Load(), lineno=156, col_offset=22), [If(Compare(Call(Name('len', Load(), lineno=157, col_offset=15), [Name('option', Load(), lineno=157, col_offset=19)], [], None, None, lineno=157, col_offset=15), [Eq()], [Num(3, lineno=157, col_offset=30)], lineno=157, col_offset=15), [Assign([Tuple([Name('long', Store(), lineno=158, col_offset=16), Name('short', Store(), lineno=158, col_offset=22), Name('help', Store(), lineno=158, col_offset=29)], Store(), lineno=158, col_offset=16)], Name('option', Load(), lineno=158, col_offset=36), lineno=158, col_offset=16), Assign([Name('repeat', Store(), lineno=159, col_offset=16)], Num(0, lineno=159, col_offset=25), lineno=159, col_offset=16)], [If(Compare(Call(Name('len', Load(), lineno=160, col_offset=17), [Name('option', Load(), lineno=160, col_offset=21)], [], None, None, lineno=160, col_offset=17), [Eq()], [Num(4, lineno=160, col_offset=32)], lineno=160, col_offset=17), [Assign([Tuple([Name('long', Store(), lineno=161, col_offset=16), Name('short', Store(), lineno=161, col_offset=22), Name('help', Store(), lineno=161, col_offset=29), Name('repeat', Store(), lineno=161, col_offset=35)], Store(), lineno=161, col_offset=16)], Name('option', Load(), lineno=161, col_offset=44), lineno=161, col_offset=16)], [Raise(Name('ValueError', Load(), lineno=165, col_offset=22), BinOp(Str('invalid option tuple: %r', lineno=165, col_offset=34), Mod(), Tuple([Name('option', Load(), lineno=165, col_offset=64)], Load(), lineno=165, col_offset=64), lineno=165, col_offset=34), None, lineno=165, col_offset=16)], lineno=160, col_offset=17)], lineno=157, col_offset=12), If(BoolOp(Or(), [UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=168, col_offset=19), [Name('long', Load(), lineno=168, col_offset=30), Name('str', Load(), lineno=168, col_offset=36)], [], None, None, lineno=168, col_offset=19), lineno=168, col_offset=15), Compare(Call(Name('len', Load(), lineno=168, col_offset=44), [Name('long', Load(), lineno=168, col_offset=48)], [], None, None, lineno=168, col_offset=44), [Lt()], [Num(2, lineno=168, col_offset=56)], lineno=168, col_offset=44)], lineno=168, col_offset=15), [Raise(Name('DistutilsGetoptError', Load(), lineno=169, col_offset=22), BinOp(Str("invalid long option '%s': must be a string of length >= 2", lineno=170, col_offset=23), Mod(), Name('long', Load(), lineno=171, col_offset=60), lineno=170, col_offset=22), None, lineno=169, col_offset=16)], [], lineno=168, col_offset=12), If(UnaryOp(Not(), BoolOp(Or(), [Compare(Name('short', Load(), lineno=173, col_offset=22), [Is()], [Name('None', Load(), lineno=173, col_offset=31)], lineno=173, col_offset=22), BoolOp(And(), [Call(Name('isinstance', Load(), lineno=174, col_offset=22), [Name('short', Load(), lineno=174, col_offset=33), Name('str', Load(), lineno=174, col_offset=40)], [], None, None, lineno=174, col_offset=22), Compare(Call(Name('len', Load(), lineno=174, col_offset=49), [Name('short', Load(), lineno=174, col_offset=53)], [], None, None, lineno=174, col_offset=49), [Eq()], [Num(1, lineno=174, col_offset=63)], lineno=174, col_offset=49)], lineno=174, col_offset=22)], lineno=173, col_offset=21), lineno=173, col_offset=16), [Raise(Name('DistutilsGetoptError', Load(), lineno=175, col_offset=22), BinOp(Str("invalid short option '%s': must a single character or None", lineno=176, col_offset=23), Mod(), Name('short', Load(), lineno=177, col_offset=60), lineno=176, col_offset=22), None, lineno=175, col_offset=16)], [], lineno=173, col_offset=12), Assign([Subscript(Attribute(Name('self', Load(), lineno=179, col_offset=12), 'repeat', Load(), lineno=179, col_offset=12), Index(Name('long', Load(), lineno=179, col_offset=24)), Store(), lineno=179, col_offset=12)], Name('repeat', Load(), lineno=179, col_offset=32), lineno=179, col_offset=12), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=180, col_offset=12), 'long_opts', Load(), lineno=180, col_offset=12), 'append', Load(), lineno=180, col_offset=12), [Name('long', Load(), lineno=180, col_offset=34)], [], None, None, lineno=180, col_offset=12), lineno=180, col_offset=12), If(Compare(Subscript(Name('long', Load(), lineno=182, col_offset=15), Index(Num(-1, lineno=182, col_offset=21)), Load(), lineno=182, col_offset=15), [Eq()], [Str('=', lineno=182, col_offset=27)], lineno=182, col_offset=15), [If(Name('short', Load(), lineno=183, col_offset=19), [Assign([Name('short', Store(), lineno=183, col_offset=26)], BinOp(Name('short', Load(), lineno=183, col_offset=34), Add(), Str(':', lineno=183, col_offset=42), lineno=183, col_offset=34), lineno=183, col_offset=26)], [], lineno=183, col_offset=16), Assign([Name('long', Store(), lineno=184, col_offset=16)], Subscript(Name('long', Load(), lineno=184, col_offset=23), Slice(Num(0, lineno=184, col_offset=28), Num(-1, lineno=184, col_offset=31), None), Load(), lineno=184, col_offset=23), lineno=184, col_offset=16), Assign([Subscript(Attribute(Name('self', Load(), lineno=185, col_offset=16), 'takes_arg', Load(), lineno=185, col_offset=16), Index(Name('long', Load(), lineno=185, col_offset=31)), Store(), lineno=185, col_offset=16)], Num(1, lineno=185, col_offset=39), lineno=185, col_offset=16)], [Assign([Name('alias_to', Store(), lineno=190, col_offset=16)], Call(Attribute(Attribute(Name('self', Load(), lineno=190, col_offset=27), 'negative_alias', Load(), lineno=190, col_offset=27), 'get', Load(), lineno=190, col_offset=27), [Name('long', Load(), lineno=190, col_offset=51)], [], None, None, lineno=190, col_offset=27), lineno=190, col_offset=16), If(Compare(Name('alias_to', Load(), lineno=191, col_offset=19), [IsNot()], [Name('None', Load(), lineno=191, col_offset=35)], lineno=191, col_offset=19), [If(Subscript(Attribute(Name('self', Load(), lineno=192, col_offset=23), 'takes_arg', Load(), lineno=192, col_offset=23), Index(Name('alias_to', Load(), lineno=192, col_offset=38)), Load(), lineno=192, col_offset=23), [Raise(Name('DistutilsGetoptError', Load(), lineno=193, col_offset=30), BinOp(Str("invalid negative alias '%s': aliased option '%s' takes a value", lineno=194, col_offset=31), Mod(), Tuple([Name('long', Load(), lineno=196, col_offset=32), Name('alias_to', Load(), lineno=196, col_offset=38)], Load(), lineno=196, col_offset=32), lineno=194, col_offset=30), None, lineno=193, col_offset=24)], [], lineno=192, col_offset=20), Assign([Subscript(Attribute(Name('self', Load(), lineno=198, col_offset=20), 'long_opts', Load(), lineno=198, col_offset=20), Index(Num(-1, lineno=198, col_offset=36)), Store(), lineno=198, col_offset=20)], Name('long', Load(), lineno=198, col_offset=41), lineno=198, col_offset=20), Assign([Subscript(Attribute(Name('self', Load(), lineno=199, col_offset=20), 'takes_arg', Load(), lineno=199, col_offset=20), Index(Name('long', Load(), lineno=199, col_offset=35)), Store(), lineno=199, col_offset=20)], Num(0, lineno=199, col_offset=43), lineno=199, col_offset=20)], [Assign([Subscript(Attribute(Name('self', Load(), lineno=202, col_offset=20), 'takes_arg', Load(), lineno=202, col_offset=20), Index(Name('long', Load(), lineno=202, col_offset=35)), Store(), lineno=202, col_offset=20)], Num(0, lineno=202, col_offset=43), lineno=202, col_offset=20)], lineno=191, col_offset=16)], lineno=182, col_offset=12), Assign([Name('alias_to', Store(), lineno=206, col_offset=12)], Call(Attribute(Attribute(Name('self', Load(), lineno=206, col_offset=23), 'alias', Load(), lineno=206, col_offset=23), 'get', Load(), lineno=206, col_offset=23), [Name('long', Load(), lineno=206, col_offset=38)], [], None, None, lineno=206, col_offset=23), lineno=206, col_offset=12), If(Compare(Name('alias_to', Load(), lineno=207, col_offset=15), [IsNot()], [Name('None', Load(), lineno=207, col_offset=31)], lineno=207, col_offset=15), [If(Compare(Subscript(Attribute(Name('self', Load(), lineno=208, col_offset=19), 'takes_arg', Load(), lineno=208, col_offset=19), Index(Name('long', Load(), lineno=208, col_offset=34)), Load(), lineno=208, col_offset=19), [NotEq()], [Subscript(Attribute(Name('self', Load(), lineno=208, col_offset=43), 'takes_arg', Load(), lineno=208, col_offset=43), Index(Name('alias_to', Load(), lineno=208, col_offset=58)), Load(), lineno=208, col_offset=43)], lineno=208, col_offset=19), [Raise(Name('DistutilsGetoptError', Load(), lineno=209, col_offset=26), BinOp(Str("invalid alias '%s': inconsistent with aliased option '%s' (one of them takes a value, the other doesn't", lineno=210, col_offset=27), Mod(), Tuple([Name('long', Load(), lineno=212, col_offset=51), Name('alias_to', Load(), lineno=212, col_offset=57)], Load(), lineno=212, col_offset=51), lineno=210, col_offset=26), None, lineno=209, col_offset=20)], [], lineno=208, col_offset=16)], [], lineno=207, col_offset=12), If(UnaryOp(Not(), Call(Attribute(Name('longopt_re', Load(), lineno=219, col_offset=19), 'match', Load(), lineno=219, col_offset=19), [Name('long', Load(), lineno=219, col_offset=36)], [], None, None, lineno=219, col_offset=19), lineno=219, col_offset=15), [Raise(Name('DistutilsGetoptError', Load(), lineno=220, col_offset=22), BinOp(BinOp(Str("invalid long option name '%s' ", lineno=221, col_offset=23), Add(), Str('(must be letters, numbers, hyphens only', lineno=222, col_offset=23), lineno=221, col_offset=23), Mod(), Name('long', Load(), lineno=222, col_offset=68), lineno=221, col_offset=22), None, lineno=220, col_offset=16)], [], lineno=219, col_offset=12), Assign([Subscript(Attribute(Name('self', Load(), lineno=224, col_offset=12), 'attr_name', Load(), lineno=224, col_offset=12), Index(Name('long', Load(), lineno=224, col_offset=27)), Store(), lineno=224, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=224, col_offset=35), 'get_attr_name', Load(), lineno=224, col_offset=35), [Name('long', Load(), lineno=224, col_offset=54)], [], None, None, lineno=224, col_offset=35), lineno=224, col_offset=12), If(Name('short', Load(), lineno=225, col_offset=15), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=226, col_offset=16), 'short_opts', Load(), lineno=226, col_offset=16), 'append', Load(), lineno=226, col_offset=16), [Name('short', Load(), lineno=226, col_offset=39)], [], None, None, lineno=226, col_offset=16), lineno=226, col_offset=16), Assign([Subscript(Attribute(Name('self', Load(), lineno=227, col_offset=16), 'short2long', Load(), lineno=227, col_offset=16), Index(Subscript(Name('short', Load(), lineno=227, col_offset=32), Index(Num(0, lineno=227, col_offset=38)), Load(), lineno=227, col_offset=32)), Store(), lineno=227, col_offset=16)], Name('long', Load(), lineno=227, col_offset=44), lineno=227, col_offset=16)], [], lineno=225, col_offset=12)], [], lineno=156, col_offset=8)], [], lineno=146, col_offset=4), FunctionDef('getopt', arguments([Name('self', Param(), lineno=234, col_offset=16), Name('args', Param(), lineno=234, col_offset=22), Name('object', Param(), lineno=234, col_offset=33)], None, None, [Name('None', Load(), lineno=234, col_offset=27), Name('None', Load(), lineno=234, col_offset=40)]), [Expr(Str("Parse command-line options in args. Store as attributes on object.\n\n        If 'args' is None or not supplied, uses 'sys.argv[1:]'.  If\n        'object' is None or not supplied, creates a new OptionDummy\n        object, stores option values there, and returns a tuple (args,\n        object).  If 'object' is supplied, it is modified in place and\n        'getopt()' just returns 'args'; in both cases, the returned\n        'args' is a modified copy of the passed-in 'args' list, which\n        is left untouched.\n        ", lineno=244, col_offset=-1), lineno=244, col_offset=-1), If(Compare(Name('args', Load(), lineno=245, col_offset=11), [Is()], [Name('None', Load(), lineno=245, col_offset=19)], lineno=245, col_offset=11), [Assign([Name('args', Store(), lineno=246, col_offset=12)], Subscript(Attribute(Name('sys', Load(), lineno=246, col_offset=19), 'argv', Load(), lineno=246, col_offset=19), Slice(Num(1, lineno=246, col_offset=28), None, None), Load(), lineno=246, col_offset=19), lineno=246, col_offset=12)], [], lineno=245, col_offset=8), If(Compare(Name('object', Load(), lineno=247, col_offset=11), [Is()], [Name('None', Load(), lineno=247, col_offset=21)], lineno=247, col_offset=11), [Assign([Name('object', Store(), lineno=248, col_offset=12)], Call(Name('OptionDummy', Load(), lineno=248, col_offset=21), [], [], None, None, lineno=248, col_offset=21), lineno=248, col_offset=12), Assign([Name('created_object', Store(), lineno=249, col_offset=12)], Num(1, lineno=249, col_offset=29), lineno=249, col_offset=12)], [Assign([Name('created_object', Store(), lineno=251, col_offset=12)], Num(0, lineno=251, col_offset=29), lineno=251, col_offset=12)], lineno=247, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=253, col_offset=8), '_grok_option_table', Load(), lineno=253, col_offset=8), [], [], None, None, lineno=253, col_offset=8), lineno=253, col_offset=8), Assign([Name('short_opts', Store(), lineno=255, col_offset=8)], Call(Attribute(Name('string', Load(), lineno=255, col_offset=21), 'join', Load(), lineno=255, col_offset=21), [Attribute(Name('self', Load(), lineno=255, col_offset=33), 'short_opts', Load(), lineno=255, col_offset=33)], [], None, None, lineno=255, col_offset=21), lineno=255, col_offset=8), TryExcept([Assign([Tuple([Name('opts', Store(), lineno=257, col_offset=12), Name('args', Store(), lineno=257, col_offset=18)], Store(), lineno=257, col_offset=12)], Call(Attribute(Name('getopt', Load(), lineno=257, col_offset=25), 'getopt', Load(), lineno=257, col_offset=25), [Name('args', Load(), lineno=257, col_offset=39), Name('short_opts', Load(), lineno=257, col_offset=45), Attribute(Name('self', Load(), lineno=257, col_offset=57), 'long_opts', Load(), lineno=257, col_offset=57)], [], None, None, lineno=257, col_offset=25), lineno=257, col_offset=12)], [ExceptHandler(Attribute(Name('getopt', Load(), lineno=258, col_offset=15), 'error', Load(), lineno=258, col_offset=15), Name('msg', Store(), lineno=258, col_offset=29), [Raise(Name('DistutilsArgError', Load(), lineno=259, col_offset=18), Name('msg', Load(), lineno=259, col_offset=37), None, lineno=259, col_offset=12)], lineno=258, col_offset=8)], [], lineno=256, col_offset=8), For(Tuple([Name('opt', Store(), lineno=261, col_offset=12), Name('val', Store(), lineno=261, col_offset=17)], Store(), lineno=261, col_offset=12), Name('opts', Load(), lineno=261, col_offset=24), [If(BoolOp(And(), [Compare(Call(Name('len', Load(), lineno=262, col_offset=15), [Name('opt', Load(), lineno=262, col_offset=19)], [], None, None, lineno=262, col_offset=15), [Eq()], [Num(2, lineno=262, col_offset=27)], lineno=262, col_offset=15), Compare(Subscript(Name('opt', Load(), lineno=262, col_offset=33), Index(Num(0, lineno=262, col_offset=37)), Load(), lineno=262, col_offset=33), [Eq()], [Str('-', lineno=262, col_offset=43)], lineno=262, col_offset=33)], lineno=262, col_offset=15), [Assign([Name('opt', Store(), lineno=263, col_offset=16)], Subscript(Attribute(Name('self', Load(), lineno=263, col_offset=22), 'short2long', Load(), lineno=263, col_offset=22), Index(Subscript(Name('opt', Load(), lineno=263, col_offset=38), Index(Num(1, lineno=263, col_offset=42)), Load(), lineno=263, col_offset=38)), Load(), lineno=263, col_offset=22), lineno=263, col_offset=16)], [Assert(BoolOp(And(), [Compare(Call(Name('len', Load(), lineno=265, col_offset=23), [Name('opt', Load(), lineno=265, col_offset=27)], [], None, None, lineno=265, col_offset=23), [Gt()], [Num(2, lineno=265, col_offset=34)], lineno=265, col_offset=23), Compare(Subscript(Name('opt', Load(), lineno=265, col_offset=40), Slice(None, Num(2, lineno=265, col_offset=45), None), Load(), lineno=265, col_offset=40), [Eq()], [Str('--', lineno=265, col_offset=51)], lineno=265, col_offset=40)], lineno=265, col_offset=23), None, lineno=265, col_offset=16), Assign([Name('opt', Store(), lineno=266, col_offset=16)], Subscript(Name('opt', Load(), lineno=266, col_offset=22), Slice(Num(2, lineno=266, col_offset=26), None, None), Load(), lineno=266, col_offset=22), lineno=266, col_offset=16)], lineno=262, col_offset=12), Assign([Name('alias', Store(), lineno=268, col_offset=12)], Call(Attribute(Attribute(Name('self', Load(), lineno=268, col_offset=20), 'alias', Load(), lineno=268, col_offset=20), 'get', Load(), lineno=268, col_offset=20), [Name('opt', Load(), lineno=268, col_offset=35)], [], None, None, lineno=268, col_offset=20), lineno=268, col_offset=12), If(Name('alias', Load(), lineno=269, col_offset=15), [Assign([Name('opt', Store(), lineno=270, col_offset=16)], Name('alias', Load(), lineno=270, col_offset=22), lineno=270, col_offset=16)], [], lineno=269, col_offset=12), If(UnaryOp(Not(), Subscript(Attribute(Name('self', Load(), lineno=272, col_offset=19), 'takes_arg', Load(), lineno=272, col_offset=19), Index(Name('opt', Load(), lineno=272, col_offset=34)), Load(), lineno=272, col_offset=19), lineno=272, col_offset=15), [Assert(Compare(Name('val', Load(), lineno=273, col_offset=23), [Eq()], [Str('', lineno=273, col_offset=30)], lineno=273, col_offset=23), Str("boolean option can't have value", lineno=273, col_offset=34), lineno=273, col_offset=16), Assign([Name('alias', Store(), lineno=274, col_offset=16)], Call(Attribute(Attribute(Name('self', Load(), lineno=274, col_offset=24), 'negative_alias', Load(), lineno=274, col_offset=24), 'get', Load(), lineno=274, col_offset=24), [Name('opt', Load(), lineno=274, col_offset=48)], [], None, None, lineno=274, col_offset=24), lineno=274, col_offset=16), If(Name('alias', Load(), lineno=275, col_offset=19), [Assign([Name('opt', Store(), lineno=276, col_offset=20)], Name('alias', Load(), lineno=276, col_offset=26), lineno=276, col_offset=20), Assign([Name('val', Store(), lineno=277, col_offset=20)], Num(0, lineno=277, col_offset=26), lineno=277, col_offset=20)], [Assign([Name('val', Store(), lineno=279, col_offset=20)], Num(1, lineno=279, col_offset=26), lineno=279, col_offset=20)], lineno=275, col_offset=16)], [], lineno=272, col_offset=12), Assign([Name('attr', Store(), lineno=281, col_offset=12)], Subscript(Attribute(Name('self', Load(), lineno=281, col_offset=19), 'attr_name', Load(), lineno=281, col_offset=19), Index(Name('opt', Load(), lineno=281, col_offset=34)), Load(), lineno=281, col_offset=19), lineno=281, col_offset=12), If(BoolOp(And(), [Name('val', Load(), lineno=284, col_offset=15), Compare(Call(Attribute(Attribute(Name('self', Load(), lineno=284, col_offset=23), 'repeat', Load(), lineno=284, col_offset=23), 'get', Load(), lineno=284, col_offset=23), [Name('attr', Load(), lineno=284, col_offset=39)], [], None, None, lineno=284, col_offset=23), [IsNot()], [Name('None', Load(), lineno=284, col_offset=52)], lineno=284, col_offset=23)], lineno=284, col_offset=15), [Assign([Name('val', Store(), lineno=285, col_offset=16)], BinOp(Call(Name('getattr', Load(), lineno=285, col_offset=22), [Name('object', Load(), lineno=285, col_offset=30), Name('attr', Load(), lineno=285, col_offset=38), Num(0, lineno=285, col_offset=44)], [], None, None, lineno=285, col_offset=22), Add(), Num(1, lineno=285, col_offset=49), lineno=285, col_offset=22), lineno=285, col_offset=16)], [], lineno=284, col_offset=12), Expr(Call(Name('setattr', Load(), lineno=286, col_offset=12), [Name('object', Load(), lineno=286, col_offset=20), Name('attr', Load(), lineno=286, col_offset=28), Name('val', Load(), lineno=286, col_offset=34)], [], None, None, lineno=286, col_offset=12), lineno=286, col_offset=12), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=287, col_offset=12), 'option_order', Load(), lineno=287, col_offset=12), 'append', Load(), lineno=287, col_offset=12), [Tuple([Name('opt', Load(), lineno=287, col_offset=38), Name('val', Load(), lineno=287, col_offset=43)], Load(), lineno=287, col_offset=38)], [], None, None, lineno=287, col_offset=12), lineno=287, col_offset=12)], [], lineno=261, col_offset=8), If(Name('created_object', Load(), lineno=290, col_offset=11), [Return(Tuple([Name('args', Load(), lineno=291, col_offset=19), Name('object', Load(), lineno=291, col_offset=25)], Load(), lineno=291, col_offset=19), lineno=291, col_offset=12)], [Return(Name('args', Load(), lineno=293, col_offset=19), lineno=293, col_offset=12)], lineno=290, col_offset=8)], [], lineno=234, col_offset=4), FunctionDef('get_option_order', arguments([Name('self', Param(), lineno=298, col_offset=26)], None, None, []), [Expr(Str("Returns the list of (option, value) tuples processed by the\n        previous run of 'getopt()'.  Raises RuntimeError if\n        'getopt()' hasn't been called yet.\n        ", lineno=302, col_offset=-1), lineno=302, col_offset=-1), If(Compare(Attribute(Name('self', Load(), lineno=303, col_offset=11), 'option_order', Load(), lineno=303, col_offset=11), [Is()], [Name('None', Load(), lineno=303, col_offset=32)], lineno=303, col_offset=11), [Raise(Name('RuntimeError', Load(), lineno=304, col_offset=18), Str("'getopt()' hasn't been called yet", lineno=304, col_offset=32), None, lineno=304, col_offset=12)], [Return(Attribute(Name('self', Load(), lineno=306, col_offset=19), 'option_order', Load(), lineno=306, col_offset=19), lineno=306, col_offset=12)], lineno=303, col_offset=8)], [], lineno=298, col_offset=4), FunctionDef('generate_help', arguments([Name('self', Param(), lineno=309, col_offset=23), Name('header', Param(), lineno=309, col_offset=29)], None, None, [Name('None', Load(), lineno=309, col_offset=36)]), [Expr(Str('Generate help text (a list of strings, one per suggested line of\n        output) from the option table for this FancyGetopt object.\n        ', lineno=312, col_offset=-1), lineno=312, col_offset=-1), Assign([Name('max_opt', Store(), lineno=317, col_offset=8)], Num(0, lineno=317, col_offset=18), lineno=317, col_offset=8), For(Name('option', Store(), lineno=318, col_offset=12), Attribute(Name('self', Load(), lineno=318, col_offset=22), 'option_table', Load(), lineno=318, col_offset=22), [Assign([Name('long', Store(), lineno=319, col_offset=12)], Subscript(Name('option', Load(), lineno=319, col_offset=19), Index(Num(0, lineno=319, col_offset=26)), Load(), lineno=319, col_offset=19), lineno=319, col_offset=12), Assign([Name('short', Store(), lineno=320, col_offset=12)], Subscript(Name('option', Load(), lineno=320, col_offset=20), Index(Num(1, lineno=320, col_offset=27)), Load(), lineno=320, col_offset=20), lineno=320, col_offset=12), Assign([Name('l', Store(), lineno=321, col_offset=12)], Call(Name('len', Load(), lineno=321, col_offset=16), [Name('long', Load(), lineno=321, col_offset=20)], [], None, None, lineno=321, col_offset=16), lineno=321, col_offset=12), If(Compare(Subscript(Name('long', Load(), lineno=322, col_offset=15), Index(Num(-1, lineno=322, col_offset=21)), Load(), lineno=322, col_offset=15), [Eq()], [Str('=', lineno=322, col_offset=27)], lineno=322, col_offset=15), [Assign([Name('l', Store(), lineno=323, col_offset=16)], BinOp(Name('l', Load(), lineno=323, col_offset=20), Sub(), Num(1, lineno=323, col_offset=24), lineno=323, col_offset=20), lineno=323, col_offset=16)], [], lineno=322, col_offset=12), If(Compare(Name('short', Load(), lineno=324, col_offset=15), [IsNot()], [Name('None', Load(), lineno=324, col_offset=28)], lineno=324, col_offset=15), [Assign([Name('l', Store(), lineno=325, col_offset=16)], BinOp(Name('l', Load(), lineno=325, col_offset=20), Add(), Num(5, lineno=325, col_offset=24), lineno=325, col_offset=20), lineno=325, col_offset=16)], [], lineno=324, col_offset=12), If(Compare(Name('l', Load(), lineno=326, col_offset=15), [Gt()], [Name('max_opt', Load(), lineno=326, col_offset=19)], lineno=326, col_offset=15), [Assign([Name('max_opt', Store(), lineno=327, col_offset=16)], Name('l', Load(), lineno=327, col_offset=26), lineno=327, col_offset=16)], [], lineno=326, col_offset=12)], [], lineno=318, col_offset=8), Assign([Name('opt_width', Store(), lineno=329, col_offset=8)], BinOp(BinOp(BinOp(Name('max_opt', Load(), lineno=329, col_offset=20), Add(), Num(2, lineno=329, col_offset=30), lineno=329, col_offset=20), Add(), Num(2, lineno=329, col_offset=34), lineno=329, col_offset=32), Add(), Num(2, lineno=329, col_offset=38), lineno=329, col_offset=36), lineno=329, col_offset=8), Assign([Name('line_width', Store(), lineno=353, col_offset=8)], Num(78, lineno=353, col_offset=21), lineno=353, col_offset=8), Assign([Name('text_width', Store(), lineno=354, col_offset=8)], BinOp(Name('line_width', Load(), lineno=354, col_offset=21), Sub(), Name('opt_width', Load(), lineno=354, col_offset=34), lineno=354, col_offset=21), lineno=354, col_offset=8), Assign([Name('big_indent', Store(), lineno=355, col_offset=8)], BinOp(Str(' ', lineno=355, col_offset=21), Mult(), Name('opt_width', Load(), lineno=355, col_offset=27), lineno=355, col_offset=21), lineno=355, col_offset=8), If(Name('header', Load(), lineno=356, col_offset=11), [Assign([Name('lines', Store(), lineno=357, col_offset=12)], List([Name('header', Load(), lineno=357, col_offset=21)], Load(), lineno=357, col_offset=20), lineno=357, col_offset=12)], [Assign([Name('lines', Store(), lineno=359, col_offset=12)], List([Str('Option summary:', lineno=359, col_offset=21)], Load(), lineno=359, col_offset=20), lineno=359, col_offset=12)], lineno=356, col_offset=8), For(Name('option', Store(), lineno=361, col_offset=12), Attribute(Name('self', Load(), lineno=361, col_offset=22), 'option_table', Load(), lineno=361, col_offset=22), [Assign([Tuple([Name('long', Store(), lineno=362, col_offset=12), Name('short', Store(), lineno=362, col_offset=18), Name('help', Store(), lineno=362, col_offset=25)], Store(), lineno=362, col_offset=12)], Subscript(Name('option', Load(), lineno=362, col_offset=32), Slice(None, Num(3, lineno=362, col_offset=40), None), Load(), lineno=362, col_offset=32), lineno=362, col_offset=12), Assign([Name('text', Store(), lineno=363, col_offset=12)], Call(Name('wrap_text', Load(), lineno=363, col_offset=19), [Name('help', Load(), lineno=363, col_offset=29), Name('text_width', Load(), lineno=363, col_offset=35)], [], None, None, lineno=363, col_offset=19), lineno=363, col_offset=12), If(Compare(Subscript(Name('long', Load(), lineno=364, col_offset=15), Index(Num(-1, lineno=364, col_offset=21)), Load(), lineno=364, col_offset=15), [Eq()], [Str('=', lineno=364, col_offset=27)], lineno=364, col_offset=15), [Assign([Name('long', Store(), lineno=365, col_offset=16)], Subscript(Name('long', Load(), lineno=365, col_offset=23), Slice(Num(0, lineno=365, col_offset=28), Num(-1, lineno=365, col_offset=31), None), Load(), lineno=365, col_offset=23), lineno=365, col_offset=16)], [], lineno=364, col_offset=12), If(Compare(Name('short', Load(), lineno=368, col_offset=15), [Is()], [Name('None', Load(), lineno=368, col_offset=24)], lineno=368, col_offset=15), [If(Name('text', Load(), lineno=369, col_offset=19), [Expr(Call(Attribute(Name('lines', Load(), lineno=370, col_offset=20), 'append', Load(), lineno=370, col_offset=20), [BinOp(Str('  --%-*s  %s', lineno=370, col_offset=33), Mod(), Tuple([Name('max_opt', Load(), lineno=370, col_offset=51), Name('long', Load(), lineno=370, col_offset=60), Subscript(Name('text', Load(), lineno=370, col_offset=66), Index(Num(0, lineno=370, col_offset=71)), Load(), lineno=370, col_offset=66)], Load(), lineno=370, col_offset=51), lineno=370, col_offset=33)], [], None, None, lineno=370, col_offset=20), lineno=370, col_offset=20)], [Expr(Call(Attribute(Name('lines', Load(), lineno=372, col_offset=20), 'append', Load(), lineno=372, col_offset=20), [BinOp(Str('  --%-*s  ', lineno=372, col_offset=33), Mod(), Tuple([Name('max_opt', Load(), lineno=372, col_offset=49), Name('long', Load(), lineno=372, col_offset=58)], Load(), lineno=372, col_offset=49), lineno=372, col_offset=33)], [], None, None, lineno=372, col_offset=20), lineno=372, col_offset=20)], lineno=369, col_offset=16)], [Assign([Name('opt_names', Store(), lineno=377, col_offset=16)], BinOp(Str('%s (-%s)', lineno=377, col_offset=28), Mod(), Tuple([Name('long', Load(), lineno=377, col_offset=42), Name('short', Load(), lineno=377, col_offset=48)], Load(), lineno=377, col_offset=42), lineno=377, col_offset=28), lineno=377, col_offset=16), If(Name('text', Load(), lineno=378, col_offset=19), [Expr(Call(Attribute(Name('lines', Load(), lineno=379, col_offset=20), 'append', Load(), lineno=379, col_offset=20), [BinOp(Str('  --%-*s  %s', lineno=379, col_offset=33), Mod(), Tuple([Name('max_opt', Load(), lineno=380, col_offset=34), Name('opt_names', Load(), lineno=380, col_offset=43), Subscript(Name('text', Load(), lineno=380, col_offset=54), Index(Num(0, lineno=380, col_offset=59)), Load(), lineno=380, col_offset=54)], Load(), lineno=380, col_offset=34), lineno=379, col_offset=33)], [], None, None, lineno=379, col_offset=20), lineno=379, col_offset=20)], [Expr(Call(Attribute(Name('lines', Load(), lineno=382, col_offset=20), 'append', Load(), lineno=382, col_offset=20), [BinOp(Str('  --%-*s', lineno=382, col_offset=33), Mod(), Name('opt_names', Load(), lineno=382, col_offset=46), lineno=382, col_offset=33)], [], None, None, lineno=382, col_offset=20), lineno=382, col_offset=20)], lineno=378, col_offset=16)], lineno=368, col_offset=12), For(Name('l', Store(), lineno=384, col_offset=16), Subscript(Name('text', Load(), lineno=384, col_offset=21), Slice(Num(1, lineno=384, col_offset=26), None, None), Load(), lineno=384, col_offset=21), [Expr(Call(Attribute(Name('lines', Load(), lineno=385, col_offset=16), 'append', Load(), lineno=385, col_offset=16), [BinOp(Name('big_indent', Load(), lineno=385, col_offset=29), Add(), Name('l', Load(), lineno=385, col_offset=42), lineno=385, col_offset=29)], [], None, None, lineno=385, col_offset=16), lineno=385, col_offset=16)], [], lineno=384, col_offset=12)], [], lineno=361, col_offset=8), Return(Name('lines', Load(), lineno=389, col_offset=15), lineno=389, col_offset=8)], [], lineno=309, col_offset=4), FunctionDef('print_help', arguments([Name('self', Param(), lineno=393, col_offset=20), Name('header', Param(), lineno=393, col_offset=26), Name('file', Param(), lineno=393, col_offset=39)], None, None, [Name('None', Load(), lineno=393, col_offset=33), Name('None', Load(), lineno=393, col_offset=44)]), [If(Compare(Name('file', Load(), lineno=394, col_offset=11), [Is()], [Name('None', Load(), lineno=394, col_offset=19)], lineno=394, col_offset=11), [Assign([Name('file', Store(), lineno=395, col_offset=12)], Attribute(Name('sys', Load(), lineno=395, col_offset=19), 'stdout', Load(), lineno=395, col_offset=19), lineno=395, col_offset=12)], [], lineno=394, col_offset=8), For(Name('line', Store(), lineno=396, col_offset=12), Call(Attribute(Name('self', Load(), lineno=396, col_offset=20), 'generate_help', Load(), lineno=396, col_offset=20), [Name('header', Load(), lineno=396, col_offset=39)], [], None, None, lineno=396, col_offset=20), [Expr(Call(Attribute(Name('file', Load(), lineno=397, col_offset=12), 'write', Load(), lineno=397, col_offset=12), [BinOp(Name('line', Load(), lineno=397, col_offset=23), Add(), Str('\n', lineno=397, col_offset=30), lineno=397, col_offset=23)], [], None, None, lineno=397, col_offset=12), lineno=397, col_offset=12)], [], lineno=396, col_offset=8)], [], lineno=393, col_offset=4)], [], lineno=33, col_offset=0), FunctionDef('fancy_getopt', arguments([Name('options', Param(), lineno=402, col_offset=18), Name('negative_opt', Param(), lineno=402, col_offset=27), Name('object', Param(), lineno=402, col_offset=41), Name('args', Param(), lineno=402, col_offset=49)], None, None, []), [Assign([Name('parser', Store(), lineno=403, col_offset=4)], Call(Name('FancyGetopt', Load(), lineno=403, col_offset=13), [Name('options', Load(), lineno=403, col_offset=25)], [], None, None, lineno=403, col_offset=13), lineno=403, col_offset=4), Expr(Call(Attribute(Name('parser', Load(), lineno=404, col_offset=4), 'set_negative_aliases', Load(), lineno=404, col_offset=4), [Name('negative_opt', Load(), lineno=404, col_offset=32)], [], None, None, lineno=404, col_offset=4), lineno=404, col_offset=4), Return(Call(Attribute(Name('parser', Load(), lineno=405, col_offset=11), 'getopt', Load(), lineno=405, col_offset=11), [Name('args', Load(), lineno=405, col_offset=25), Name('object', Load(), lineno=405, col_offset=31)], [], None, None, lineno=405, col_offset=11), lineno=405, col_offset=4)], [], lineno=402, col_offset=0), Assign([Name('WS_TRANS', Store(), lineno=408, col_offset=0)], Call(Attribute(Name('string', Load(), lineno=408, col_offset=11), 'maketrans', Load(), lineno=408, col_offset=11), [Attribute(Name('string', Load(), lineno=408, col_offset=28), 'whitespace', Load(), lineno=408, col_offset=28), BinOp(Str(' ', lineno=408, col_offset=47), Mult(), Call(Name('len', Load(), lineno=408, col_offset=53), [Attribute(Name('string', Load(), lineno=408, col_offset=57), 'whitespace', Load(), lineno=408, col_offset=57)], [], None, None, lineno=408, col_offset=53), lineno=408, col_offset=47)], [], None, None, lineno=408, col_offset=11), lineno=408, col_offset=0), FunctionDef('wrap_text', arguments([Name('text', Param(), lineno=410, col_offset=15), Name('width', Param(), lineno=410, col_offset=21)], None, None, []), [Expr(Str("wrap_text(text : string, width : int) -> [string]\n\n    Split 'text' into multiple lines of no more than 'width' characters\n    each, and return the list of strings that results.\n    ", lineno=415, col_offset=-1), lineno=415, col_offset=-1), If(Compare(Name('text', Load(), lineno=417, col_offset=7), [Is()], [Name('None', Load(), lineno=417, col_offset=15)], lineno=417, col_offset=7), [Return(List([], Load(), lineno=418, col_offset=15), lineno=418, col_offset=8)], [], lineno=417, col_offset=4), If(Compare(Call(Name('len', Load(), lineno=419, col_offset=7), [Name('text', Load(), lineno=419, col_offset=11)], [], None, None, lineno=419, col_offset=7), [LtE()], [Name('width', Load(), lineno=419, col_offset=20)], lineno=419, col_offset=7), [Return(List([Name('text', Load(), lineno=420, col_offset=16)], Load(), lineno=420, col_offset=15), lineno=420, col_offset=8)], [], lineno=419, col_offset=4), Assign([Name('text', Store(), lineno=422, col_offset=4)], Call(Attribute(Name('string', Load(), lineno=422, col_offset=11), 'expandtabs', Load(), lineno=422, col_offset=11), [Name('text', Load(), lineno=422, col_offset=29)], [], None, None, lineno=422, col_offset=11), lineno=422, col_offset=4), Assign([Name('text', Store(), lineno=423, col_offset=4)], Call(Attribute(Name('string', Load(), lineno=423, col_offset=11), 'translate', Load(), lineno=423, col_offset=11), [Name('text', Load(), lineno=423, col_offset=28), Name('WS_TRANS', Load(), lineno=423, col_offset=34)], [], None, None, lineno=423, col_offset=11), lineno=423, col_offset=4), Assign([Name('chunks', Store(), lineno=424, col_offset=4)], Call(Attribute(Name('re', Load(), lineno=424, col_offset=13), 'split', Load(), lineno=424, col_offset=13), [Str('( +|-+)', lineno=424, col_offset=22), Name('text', Load(), lineno=424, col_offset=34)], [], None, None, lineno=424, col_offset=13), lineno=424, col_offset=4), Assign([Name('chunks', Store(), lineno=425, col_offset=4)], Call(Name('filter', Load(), lineno=425, col_offset=13), [Name('None', Load(), lineno=425, col_offset=20), Name('chunks', Load(), lineno=425, col_offset=26)], [], None, None, lineno=425, col_offset=13), lineno=425, col_offset=4), Assign([Name('lines', Store(), lineno=426, col_offset=4)], List([], Load(), lineno=426, col_offset=12), lineno=426, col_offset=4), While(Name('chunks', Load(), lineno=428, col_offset=10), [Assign([Name('cur_line', Store(), lineno=430, col_offset=8)], List([], Load(), lineno=430, col_offset=19), lineno=430, col_offset=8), Assign([Name('cur_len', Store(), lineno=431, col_offset=8)], Num(0, lineno=431, col_offset=18), lineno=431, col_offset=8), While(Name('chunks', Load(), lineno=433, col_offset=14), [Assign([Name('l', Store(), lineno=434, col_offset=12)], Call(Name('len', Load(), lineno=434, col_offset=16), [Subscript(Name('chunks', Load(), lineno=434, col_offset=20), Index(Num(0, lineno=434, col_offset=27)), Load(), lineno=434, col_offset=20)], [], None, None, lineno=434, col_offset=16), lineno=434, col_offset=12), If(Compare(BinOp(Name('cur_len', Load(), lineno=435, col_offset=15), Add(), Name('l', Load(), lineno=435, col_offset=25), lineno=435, col_offset=15), [LtE()], [Name('width', Load(), lineno=435, col_offset=30)], lineno=435, col_offset=15), [Expr(Call(Attribute(Name('cur_line', Load(), lineno=436, col_offset=16), 'append', Load(), lineno=436, col_offset=16), [Subscript(Name('chunks', Load(), lineno=436, col_offset=32), Index(Num(0, lineno=436, col_offset=39)), Load(), lineno=436, col_offset=32)], [], None, None, lineno=436, col_offset=16), lineno=436, col_offset=16), Delete([Subscript(Name('chunks', Load(), lineno=437, col_offset=20), Index(Num(0, lineno=437, col_offset=27)), Del(), lineno=437, col_offset=20)], lineno=437, col_offset=16), Assign([Name('cur_len', Store(), lineno=438, col_offset=16)], BinOp(Name('cur_len', Load(), lineno=438, col_offset=26), Add(), Name('l', Load(), lineno=438, col_offset=36), lineno=438, col_offset=26), lineno=438, col_offset=16)], [If(BoolOp(And(), [Name('cur_line', Load(), lineno=441, col_offset=19), Compare(Subscript(Subscript(Name('cur_line', Load(), lineno=441, col_offset=32), Index(Num(-1, lineno=441, col_offset=42)), Load(), lineno=441, col_offset=32), Index(Num(0, lineno=441, col_offset=45)), Load(), lineno=441, col_offset=32), [Eq()], [Str(' ', lineno=441, col_offset=51)], lineno=441, col_offset=32)], lineno=441, col_offset=19), [Delete([Subscript(Name('cur_line', Load(), lineno=442, col_offset=24), Index(Num(-1, lineno=442, col_offset=34)), Del(), lineno=442, col_offset=24)], lineno=442, col_offset=20)], [], lineno=441, col_offset=16), Break( lineno=443, col_offset=16)], lineno=435, col_offset=12)], [], lineno=433, col_offset=8), If(Name('chunks', Load(), lineno=445, col_offset=11), [If(Compare(Name('cur_len', Load(), lineno=450, col_offset=15), [Eq()], [Num(0, lineno=450, col_offset=26)], lineno=450, col_offset=15), [Expr(Call(Attribute(Name('cur_line', Load(), lineno=451, col_offset=16), 'append', Load(), lineno=451, col_offset=16), [Subscript(Subscript(Name('chunks', Load(), lineno=451, col_offset=32), Index(Num(0, lineno=451, col_offset=39)), Load(), lineno=451, col_offset=32), Slice(Num(0, lineno=451, col_offset=42), Name('width', Load(), lineno=451, col_offset=44), None), Load(), lineno=451, col_offset=32)], [], None, None, lineno=451, col_offset=16), lineno=451, col_offset=16), Assign([Subscript(Name('chunks', Load(), lineno=452, col_offset=16), Index(Num(0, lineno=452, col_offset=23)), Store(), lineno=452, col_offset=16)], Subscript(Subscript(Name('chunks', Load(), lineno=452, col_offset=28), Index(Num(0, lineno=452, col_offset=35)), Load(), lineno=452, col_offset=28), Slice(Name('width', Load(), lineno=452, col_offset=38), None, None), Load(), lineno=452, col_offset=28), lineno=452, col_offset=16)], [], lineno=450, col_offset=12), If(Compare(Subscript(Subscript(Name('chunks', Load(), lineno=457, col_offset=15), Index(Num(0, lineno=457, col_offset=22)), Load(), lineno=457, col_offset=15), Index(Num(0, lineno=457, col_offset=25)), Load(), lineno=457, col_offset=15), [Eq()], [Str(' ', lineno=457, col_offset=31)], lineno=457, col_offset=15), [Delete([Subscript(Name('chunks', Load(), lineno=458, col_offset=20), Index(Num(0, lineno=458, col_offset=27)), Del(), lineno=458, col_offset=20)], lineno=458, col_offset=16)], [], lineno=457, col_offset=12)], [], lineno=445, col_offset=8), Expr(Call(Attribute(Name('lines', Load(), lineno=462, col_offset=8), 'append', Load(), lineno=462, col_offset=8), [Call(Attribute(Name('string', Load(), lineno=462, col_offset=21), 'join', Load(), lineno=462, col_offset=21), [Name('cur_line', Load(), lineno=462, col_offset=33), Str('', lineno=462, col_offset=43)], [], None, None, lineno=462, col_offset=21)], [], None, None, lineno=462, col_offset=8), lineno=462, col_offset=8)], [], lineno=428, col_offset=4), Return(Name('lines', Load(), lineno=466, col_offset=11), lineno=466, col_offset=4)], [], lineno=410, col_offset=0), FunctionDef('translate_longopt', arguments([Name('opt', Param(), lineno=469, col_offset=22)], None, None, []), [Expr(Str('Convert a long option name to a valid Python identifier by\n    changing "-" to "_".\n    ', lineno=472, col_offset=-1), lineno=472, col_offset=-1), Return(Call(Attribute(Name('string', Load(), lineno=473, col_offset=11), 'translate', Load(), lineno=473, col_offset=11), [Name('opt', Load(), lineno=473, col_offset=28), Name('longopt_xlate', Load(), lineno=473, col_offset=33)], [], None, None, lineno=473, col_offset=11), lineno=473, col_offset=4)], [], lineno=469, col_offset=0), ClassDef('OptionDummy', [], [Expr(Str('Dummy class just used as a place to hold command-line option\n    values as instance attributes.', lineno=478, col_offset=-1), lineno=478, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=480, col_offset=18), Name('options', Param(), lineno=480, col_offset=24)], None, None, [List([], Load(), lineno=480, col_offset=32)]), [Expr(Str("Create a new OptionDummy instance.  The attributes listed in\n        'options' will be initialized to None.", lineno=482, col_offset=-1), lineno=482, col_offset=-1), For(Name('opt', Store(), lineno=483, col_offset=12), Name('options', Load(), lineno=483, col_offset=19), [Expr(Call(Name('setattr', Load(), lineno=484, col_offset=12), [Name('self', Load(), lineno=484, col_offset=20), Name('opt', Load(), lineno=484, col_offset=26), Name('None', Load(), lineno=484, col_offset=31)], [], None, None, lineno=484, col_offset=12), lineno=484, col_offset=12)], [], lineno=483, col_offset=8)], [], lineno=480, col_offset=4)], [], lineno=476, col_offset=0)])
