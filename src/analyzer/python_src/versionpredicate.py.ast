Module([Expr(Str('Module for parsing and testing package version predicate strings.\n', lineno=2, col_offset=-1), lineno=2, col_offset=-1), Import([alias('re', None)], lineno=3, col_offset=0), Import([alias('distutils.version', None)], lineno=4, col_offset=0), Import([alias('operator', None)], lineno=5, col_offset=0), Assign([Name('re_validPackage', Store(), lineno=8, col_offset=0)], Call(Attribute(Name('re', Load(), lineno=8, col_offset=18), 'compile', Load(), lineno=8, col_offset=18), [Str('(?i)^\\s*([a-z_]\\w*(?:\\.[a-z_]\\w*)*)(.*)', lineno=8, col_offset=29)], [], None, None, lineno=8, col_offset=18), lineno=8, col_offset=0), Assign([Name('re_paren', Store(), lineno=11, col_offset=0)], Call(Attribute(Name('re', Load(), lineno=11, col_offset=11), 'compile', Load(), lineno=11, col_offset=11), [Str('^\\s*\\((.*)\\)\\s*$', lineno=11, col_offset=22)], [], None, None, lineno=11, col_offset=11), lineno=11, col_offset=0), Assign([Name('re_splitComparison', Store(), lineno=12, col_offset=0)], Call(Attribute(Name('re', Load(), lineno=12, col_offset=21), 'compile', Load(), lineno=12, col_offset=21), [Str('^\\s*(<=|>=|<|>|!=|==)\\s*([^\\s,]+)\\s*$', lineno=12, col_offset=32)], [], None, None, lineno=12, col_offset=21), lineno=12, col_offset=0), FunctionDef('splitUp', arguments([Name('pred', Param(), lineno=16, col_offset=12)], None, None, []), [Expr(Str('Parse a single version comparison.\n\n    Return (comparison string, StrictVersion)\n    ', lineno=20, col_offset=-1), lineno=20, col_offset=-1), Assign([Name('res', Store(), lineno=21, col_offset=4)], Call(Attribute(Name('re_splitComparison', Load(), lineno=21, col_offset=10), 'match', Load(), lineno=21, col_offset=10), [Name('pred', Load(), lineno=21, col_offset=35)], [], None, None, lineno=21, col_offset=10), lineno=21, col_offset=4), If(UnaryOp(Not(), Name('res', Load(), lineno=22, col_offset=11), lineno=22, col_offset=7), [Raise(Call(Name('ValueError', Load(), lineno=23, col_offset=14), [BinOp(Str('bad package restriction syntax: %r', lineno=23, col_offset=25), Mod(), Name('pred', Load(), lineno=23, col_offset=64), lineno=23, col_offset=25)], [], None, None, lineno=23, col_offset=14), None, None, lineno=23, col_offset=8)], [], lineno=22, col_offset=4), Assign([Tuple([Name('comp', Store(), lineno=24, col_offset=4), Name('verStr', Store(), lineno=24, col_offset=10)], Store(), lineno=24, col_offset=4)], Call(Attribute(Name('res', Load(), lineno=24, col_offset=19), 'groups', Load(), lineno=24, col_offset=19), [], [], None, None, lineno=24, col_offset=19), lineno=24, col_offset=4), Return(Tuple([Name('comp', Load(), lineno=25, col_offset=12), Call(Attribute(Attribute(Name('distutils', Load(), lineno=25, col_offset=18), 'version', Load(), lineno=25, col_offset=18), 'StrictVersion', Load(), lineno=25, col_offset=18), [Name('verStr', Load(), lineno=25, col_offset=50)], [], None, None, lineno=25, col_offset=18)], Load(), lineno=25, col_offset=12), lineno=25, col_offset=4)], [], lineno=16, col_offset=0), Assign([Name('compmap', Store(), lineno=27, col_offset=0)], Dict([Str('<', lineno=27, col_offset=11), Str('<=', lineno=27, col_offset=29), Str('==', lineno=27, col_offset=48), Str('>', lineno=28, col_offset=11), Str('>=', lineno=28, col_offset=29), Str('!=', lineno=28, col_offset=48)], [Attribute(Name('operator', Load(), lineno=27, col_offset=16), 'lt', Load(), lineno=27, col_offset=16), Attribute(Name('operator', Load(), lineno=27, col_offset=35), 'le', Load(), lineno=27, col_offset=35), Attribute(Name('operator', Load(), lineno=27, col_offset=54), 'eq', Load(), lineno=27, col_offset=54), Attribute(Name('operator', Load(), lineno=28, col_offset=16), 'gt', Load(), lineno=28, col_offset=16), Attribute(Name('operator', Load(), lineno=28, col_offset=35), 'ge', Load(), lineno=28, col_offset=35), Attribute(Name('operator', Load(), lineno=28, col_offset=54), 'ne', Load(), lineno=28, col_offset=54)], lineno=27, col_offset=10), lineno=27, col_offset=0), ClassDef('VersionPredicate', [], [Expr(Str("Parse and test package version predicates.\n\n    >>> v = VersionPredicate('pyepat.abc (>1.0, <3333.3a1, !=1555.1b3)')\n\n    The `name` attribute provides the full dotted name that is given::\n\n    >>> v.name\n    'pyepat.abc'\n\n    The str() of a `VersionPredicate` provides a normalized\n    human-readable version of the expression::\n\n    >>> print v\n    pyepat.abc (> 1.0, < 3333.3a1, != 1555.1b3)\n\n    The `satisfied_by()` method can be used to determine with a given\n    version number is included in the set described by the version\n    restrictions::\n\n    >>> v.satisfied_by('1.1')\n    True\n    >>> v.satisfied_by('1.4')\n    True\n    >>> v.satisfied_by('1.0')\n    False\n    >>> v.satisfied_by('4444.4')\n    False\n    >>> v.satisfied_by('1555.1b3')\n    False\n\n    `VersionPredicate` is flexible in accepting extra whitespace::\n\n    >>> v = VersionPredicate(' pat( ==  0.1  )  ')\n    >>> v.name\n    'pat'\n    >>> v.satisfied_by('0.1')\n    True\n    >>> v.satisfied_by('0.2')\n    False\n\n    If any version numbers passed in do not conform to the\n    restrictions of `StrictVersion`, a `ValueError` is raised::\n\n    >>> v = VersionPredicate('p1.p2.p3.p4(>=1.0, <=1.3a1, !=1.2zb3)')\n    Traceback (most recent call last):\n      ...\n    ValueError: invalid version number '1.2zb3'\n\n    It the module or package name given does not conform to what's\n    allowed as a legal module or package name, `ValueError` is\n    raised::\n\n    >>> v = VersionPredicate('foo-bar')\n    Traceback (most recent call last):\n      ...\n    ValueError: expected parenthesized list: '-bar'\n\n    >>> v = VersionPredicate('foo bar (12.21)')\n    Traceback (most recent call last):\n      ...\n    ValueError: expected parenthesized list: 'bar (12.21)'\n\n    ", lineno=93, col_offset=-1), lineno=93, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=95, col_offset=17), Name('versionPredicateStr', Param(), lineno=95, col_offset=23)], None, None, []), [Expr(Str('Parse a version predicate string.\n        ', lineno=97, col_offset=-1), lineno=97, col_offset=-1), Assign([Name('versionPredicateStr', Store(), lineno=102, col_offset=8)], Call(Attribute(Name('versionPredicateStr', Load(), lineno=102, col_offset=30), 'strip', Load(), lineno=102, col_offset=30), [], [], None, None, lineno=102, col_offset=30), lineno=102, col_offset=8), If(UnaryOp(Not(), Name('versionPredicateStr', Load(), lineno=103, col_offset=15), lineno=103, col_offset=11), [Raise(Call(Name('ValueError', Load(), lineno=104, col_offset=18), [Str('empty package restriction', lineno=104, col_offset=29)], [], None, None, lineno=104, col_offset=18), None, None, lineno=104, col_offset=12)], [], lineno=103, col_offset=8), Assign([Name('match', Store(), lineno=105, col_offset=8)], Call(Attribute(Name('re_validPackage', Load(), lineno=105, col_offset=16), 'match', Load(), lineno=105, col_offset=16), [Name('versionPredicateStr', Load(), lineno=105, col_offset=38)], [], None, None, lineno=105, col_offset=16), lineno=105, col_offset=8), If(UnaryOp(Not(), Name('match', Load(), lineno=106, col_offset=15), lineno=106, col_offset=11), [Raise(Call(Name('ValueError', Load(), lineno=107, col_offset=18), [BinOp(Str('bad package name in %r', lineno=107, col_offset=29), Mod(), Name('versionPredicateStr', Load(), lineno=107, col_offset=56), lineno=107, col_offset=29)], [], None, None, lineno=107, col_offset=18), None, None, lineno=107, col_offset=12)], [], lineno=106, col_offset=8), Assign([Tuple([Attribute(Name('self', Load(), lineno=108, col_offset=8), 'name', Store(), lineno=108, col_offset=8), Name('paren', Store(), lineno=108, col_offset=19)], Store(), lineno=108, col_offset=8)], Call(Attribute(Name('match', Load(), lineno=108, col_offset=27), 'groups', Load(), lineno=108, col_offset=27), [], [], None, None, lineno=108, col_offset=27), lineno=108, col_offset=8), Assign([Name('paren', Store(), lineno=109, col_offset=8)], Call(Attribute(Name('paren', Load(), lineno=109, col_offset=16), 'strip', Load(), lineno=109, col_offset=16), [], [], None, None, lineno=109, col_offset=16), lineno=109, col_offset=8), If(Name('paren', Load(), lineno=110, col_offset=11), [Assign([Name('match', Store(), lineno=111, col_offset=12)], Call(Attribute(Name('re_paren', Load(), lineno=111, col_offset=20), 'match', Load(), lineno=111, col_offset=20), [Name('paren', Load(), lineno=111, col_offset=35)], [], None, None, lineno=111, col_offset=20), lineno=111, col_offset=12), If(UnaryOp(Not(), Name('match', Load(), lineno=112, col_offset=19), lineno=112, col_offset=15), [Raise(Call(Name('ValueError', Load(), lineno=113, col_offset=22), [BinOp(Str('expected parenthesized list: %r', lineno=113, col_offset=33), Mod(), Name('paren', Load(), lineno=113, col_offset=69), lineno=113, col_offset=33)], [], None, None, lineno=113, col_offset=22), None, None, lineno=113, col_offset=16)], [], lineno=112, col_offset=12), Assign([Name('str', Store(), lineno=114, col_offset=12)], Subscript(Call(Attribute(Name('match', Load(), lineno=114, col_offset=18), 'groups', Load(), lineno=114, col_offset=18), [], [], None, None, lineno=114, col_offset=18), Index(Num(0, lineno=114, col_offset=33)), Load(), lineno=114, col_offset=18), lineno=114, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=115, col_offset=12), 'pred', Store(), lineno=115, col_offset=12)], ListComp(Call(Name('splitUp', Load(), lineno=115, col_offset=25), [Name('aPred', Load(), lineno=115, col_offset=33)], [], None, None, lineno=115, col_offset=25), [comprehension(Name('aPred', Store(), lineno=115, col_offset=44), Call(Attribute(Name('str', Load(), lineno=115, col_offset=53), 'split', Load(), lineno=115, col_offset=53), [Str(',', lineno=115, col_offset=63)], [], None, None, lineno=115, col_offset=53), [])], lineno=115, col_offset=25), lineno=115, col_offset=12), If(UnaryOp(Not(), Attribute(Name('self', Load(), lineno=116, col_offset=19), 'pred', Load(), lineno=116, col_offset=19), lineno=116, col_offset=15), [Raise(Call(Name('ValueError', Load(), lineno=117, col_offset=22), [BinOp(Str('empty parenthesized list in %r', lineno=117, col_offset=33), Mod(), Name('versionPredicateStr', Load(), lineno=118, col_offset=35), lineno=117, col_offset=33)], [], None, None, lineno=117, col_offset=22), None, None, lineno=117, col_offset=16)], [], lineno=116, col_offset=12)], [Assign([Attribute(Name('self', Load(), lineno=120, col_offset=12), 'pred', Store(), lineno=120, col_offset=12)], List([], Load(), lineno=120, col_offset=24), lineno=120, col_offset=12)], lineno=110, col_offset=8)], [], lineno=95, col_offset=4), FunctionDef('__str__', arguments([Name('self', Param(), lineno=122, col_offset=16)], None, None, []), [If(Attribute(Name('self', Load(), lineno=123, col_offset=11), 'pred', Load(), lineno=123, col_offset=11), [Assign([Name('seq', Store(), lineno=124, col_offset=12)], ListComp(BinOp(BinOp(Name('cond', Load(), lineno=124, col_offset=19), Add(), Str(' ', lineno=124, col_offset=26), lineno=124, col_offset=19), Add(), Call(Name('str', Load(), lineno=124, col_offset=32), [Name('ver', Load(), lineno=124, col_offset=36)], [], None, None, lineno=124, col_offset=32), lineno=124, col_offset=30), [comprehension(Tuple([Name('cond', Store(), lineno=124, col_offset=45), Name('ver', Store(), lineno=124, col_offset=51)], Store(), lineno=124, col_offset=45), Attribute(Name('self', Load(), lineno=124, col_offset=58), 'pred', Load(), lineno=124, col_offset=58), [])], lineno=124, col_offset=19), lineno=124, col_offset=12), Return(BinOp(BinOp(BinOp(Attribute(Name('self', Load(), lineno=125, col_offset=19), 'name', Load(), lineno=125, col_offset=19), Add(), Str(' (', lineno=125, col_offset=31), lineno=125, col_offset=19), Add(), Call(Attribute(Str(', ', lineno=125, col_offset=38), 'join', Load(), lineno=125, col_offset=38), [Name('seq', Load(), lineno=125, col_offset=48)], [], None, None, lineno=125, col_offset=38), lineno=125, col_offset=36), Add(), Str(')', lineno=125, col_offset=55), lineno=125, col_offset=53), lineno=125, col_offset=12)], [Return(Attribute(Name('self', Load(), lineno=127, col_offset=19), 'name', Load(), lineno=127, col_offset=19), lineno=127, col_offset=12)], lineno=123, col_offset=8)], [], lineno=122, col_offset=4), FunctionDef('satisfied_by', arguments([Name('self', Param(), lineno=129, col_offset=21), Name('version', Param(), lineno=129, col_offset=27)], None, None, []), [Expr(Str('True if version is compatible with all the predicates in self.\n        The parameter version must be acceptable to the StrictVersion\n        constructor.  It may be either a string or StrictVersion.\n        ', lineno=133, col_offset=-1), lineno=133, col_offset=-1), For(Tuple([Name('cond', Store(), lineno=134, col_offset=12), Name('ver', Store(), lineno=134, col_offset=18)], Store(), lineno=134, col_offset=12), Attribute(Name('self', Load(), lineno=134, col_offset=25), 'pred', Load(), lineno=134, col_offset=25), [If(UnaryOp(Not(), Call(Subscript(Name('compmap', Load(), lineno=135, col_offset=19), Index(Name('cond', Load(), lineno=135, col_offset=27)), Load(), lineno=135, col_offset=19), [Name('version', Load(), lineno=135, col_offset=33), Name('ver', Load(), lineno=135, col_offset=42)], [], None, None, lineno=135, col_offset=19), lineno=135, col_offset=15), [Return(Name('False', Load(), lineno=136, col_offset=23), lineno=136, col_offset=16)], [], lineno=135, col_offset=12)], [], lineno=134, col_offset=8), Return(Name('True', Load(), lineno=137, col_offset=15), lineno=137, col_offset=8)], [], lineno=129, col_offset=4)], [], lineno=30, col_offset=0), Assign([Name('_provision_rx', Store(), lineno=140, col_offset=0)], Name('None', Load(), lineno=140, col_offset=16), lineno=140, col_offset=0), FunctionDef('split_provision', arguments([Name('value', Param(), lineno=142, col_offset=20)], None, None, []), [Expr(Str("Return the name and optional version number of a provision.\n\n    The version number, if given, will be returned as a `StrictVersion`\n    instance, otherwise it will be `None`.\n\n    >>> split_provision('mypkg')\n    ('mypkg', None)\n    >>> split_provision(' mypkg( 1.2 ) ')\n    ('mypkg', StrictVersion ('1.2'))\n    ", lineno=152, col_offset=-1), lineno=152, col_offset=-1), Global(['_provision_rx'], lineno=153, col_offset=4), If(Compare(Name('_provision_rx', Load(), lineno=154, col_offset=7), [Is()], [Name('None', Load(), lineno=154, col_offset=24)], lineno=154, col_offset=7), [Assign([Name('_provision_rx', Store(), lineno=155, col_offset=8)], Call(Attribute(Name('re', Load(), lineno=155, col_offset=24), 'compile', Load(), lineno=155, col_offset=24), [Str('([a-zA-Z_]\\w*(?:\\.[a-zA-Z_]\\w*)*)(?:\\s*\\(\\s*([^)\\s]+)\\s*\\))?$', lineno=156, col_offset=12)], [], None, None, lineno=155, col_offset=24), lineno=155, col_offset=8)], [], lineno=154, col_offset=4), Assign([Name('value', Store(), lineno=157, col_offset=4)], Call(Attribute(Name('value', Load(), lineno=157, col_offset=12), 'strip', Load(), lineno=157, col_offset=12), [], [], None, None, lineno=157, col_offset=12), lineno=157, col_offset=4), Assign([Name('m', Store(), lineno=158, col_offset=4)], Call(Attribute(Name('_provision_rx', Load(), lineno=158, col_offset=8), 'match', Load(), lineno=158, col_offset=8), [Name('value', Load(), lineno=158, col_offset=28)], [], None, None, lineno=158, col_offset=8), lineno=158, col_offset=4), If(UnaryOp(Not(), Name('m', Load(), lineno=159, col_offset=11), lineno=159, col_offset=7), [Raise(Call(Name('ValueError', Load(), lineno=160, col_offset=14), [BinOp(Str('illegal provides specification: %r', lineno=160, col_offset=25), Mod(), Name('value', Load(), lineno=160, col_offset=64), lineno=160, col_offset=25)], [], None, None, lineno=160, col_offset=14), None, None, lineno=160, col_offset=8)], [], lineno=159, col_offset=4), Assign([Name('ver', Store(), lineno=161, col_offset=4)], BoolOp(Or(), [Call(Attribute(Name('m', Load(), lineno=161, col_offset=10), 'group', Load(), lineno=161, col_offset=10), [Num(2, lineno=161, col_offset=18)], [], None, None, lineno=161, col_offset=10), Name('None', Load(), lineno=161, col_offset=24)], lineno=161, col_offset=10), lineno=161, col_offset=4), If(Name('ver', Load(), lineno=162, col_offset=7), [Assign([Name('ver', Store(), lineno=163, col_offset=8)], Call(Attribute(Attribute(Name('distutils', Load(), lineno=163, col_offset=14), 'version', Load(), lineno=163, col_offset=14), 'StrictVersion', Load(), lineno=163, col_offset=14), [Name('ver', Load(), lineno=163, col_offset=46)], [], None, None, lineno=163, col_offset=14), lineno=163, col_offset=8)], [], lineno=162, col_offset=4), Return(Tuple([Call(Attribute(Name('m', Load(), lineno=164, col_offset=11), 'group', Load(), lineno=164, col_offset=11), [Num(1, lineno=164, col_offset=19)], [], None, None, lineno=164, col_offset=11), Name('ver', Load(), lineno=164, col_offset=23)], Load(), lineno=164, col_offset=11), lineno=164, col_offset=4)], [], lineno=142, col_offset=0)])
