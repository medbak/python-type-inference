Module([Import([alias('unittest', None)], lineno=1, col_offset=0), ImportFrom('test', [alias('test_support', None)], 0, lineno=2, col_offset=0), ImportFrom('contextlib', [alias('closing', None)], 0, lineno=3, col_offset=0), Import([alias('gc', None)], lineno=4, col_offset=0), Import([alias('pickle', None)], lineno=5, col_offset=0), Import([alias('select', None)], lineno=6, col_offset=0), Import([alias('signal', None)], lineno=7, col_offset=0), Import([alias('subprocess', None)], lineno=8, col_offset=0), Import([alias('traceback', None)], lineno=9, col_offset=0), Import([alias('sys', None), alias('os', None), alias('time', None), alias('errno', None)], lineno=10, col_offset=0), If(Compare(Attribute(Name('sys', Load(), lineno=12, col_offset=3), 'platform', Load(), lineno=12, col_offset=3), [In()], [Tuple([Str('os2', lineno=12, col_offset=20), Str('riscos', lineno=12, col_offset=27)], Load(), lineno=12, col_offset=20)], lineno=12, col_offset=3), [Raise(Call(Attribute(Name('unittest', Load(), lineno=13, col_offset=10), 'SkipTest', Load(), lineno=13, col_offset=10), [BinOp(Str("Can't test signal on %s", lineno=13, col_offset=28), Mod(), Attribute(Name('sys', Load(), lineno=13, col_offset=56), 'platform', Load(), lineno=13, col_offset=56), lineno=13, col_offset=28)], [], None, None, lineno=13, col_offset=10), None, None, lineno=13, col_offset=4)], [], lineno=12, col_offset=0), ClassDef('HandlerBCalled', [Name('Exception', Load(), lineno=16, col_offset=21)], [Pass( lineno=17, col_offset=4)], [], lineno=16, col_offset=0), FunctionDef('exit_subprocess', arguments([], None, None, []), [Expr(Str('Use os._exit(0) to exit the current subprocess.\n\n    Otherwise, the test catches the SystemExit and continues executing\n    in parallel with the original test, so you wind up with an\n    exponential number of tests running concurrently.\n    ', lineno=26, col_offset=-1), lineno=26, col_offset=-1), Expr(Call(Attribute(Name('os', Load(), lineno=27, col_offset=4), '_exit', Load(), lineno=27, col_offset=4), [Num(0, lineno=27, col_offset=13)], [], None, None, lineno=27, col_offset=4), lineno=27, col_offset=4)], [], lineno=20, col_offset=0), FunctionDef('ignoring_eintr', arguments([Name('__func', Param(), lineno=30, col_offset=19)], 'args', 'kwargs', []), [TryExcept([Return(Call(Name('__func', Load(), lineno=32, col_offset=15), [], [], Name('args', Load(), lineno=32, col_offset=23), Name('kwargs', Load(), lineno=32, col_offset=31), lineno=32, col_offset=15), lineno=32, col_offset=8)], [ExceptHandler(Name('EnvironmentError', Load(), lineno=33, col_offset=11), Name('e', Store(), lineno=33, col_offset=31), [If(Compare(Attribute(Name('e', Load(), lineno=34, col_offset=11), 'errno', Load(), lineno=34, col_offset=11), [NotEq()], [Attribute(Name('errno', Load(), lineno=34, col_offset=22), 'EINTR', Load(), lineno=34, col_offset=22)], lineno=34, col_offset=11), [Raise(None, None, None, lineno=35, col_offset=12)], [], lineno=34, col_offset=8), Return(Name('None', Load(), lineno=36, col_offset=15), lineno=36, col_offset=8)], lineno=33, col_offset=4)], [], lineno=31, col_offset=4)], [], lineno=30, col_offset=0), ClassDef('InterProcessSignalTests', [Attribute(Name('unittest', Load(), lineno=40, col_offset=30), 'TestCase', Load(), lineno=40, col_offset=30)], [Assign([Name('MAX_DURATION', Store(), lineno=41, col_offset=4)], Num(20, lineno=41, col_offset=19), lineno=41, col_offset=4), FunctionDef('setUp', arguments([Name('self', Param(), lineno=43, col_offset=14)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=44, col_offset=8), 'using_gc', Store(), lineno=44, col_offset=8)], Call(Attribute(Name('gc', Load(), lineno=44, col_offset=24), 'isenabled', Load(), lineno=44, col_offset=24), [], [], None, None, lineno=44, col_offset=24), lineno=44, col_offset=8), Expr(Call(Attribute(Name('gc', Load(), lineno=45, col_offset=8), 'disable', Load(), lineno=45, col_offset=8), [], [], None, None, lineno=45, col_offset=8), lineno=45, col_offset=8)], [], lineno=43, col_offset=4), FunctionDef('tearDown', arguments([Name('self', Param(), lineno=47, col_offset=17)], None, None, []), [If(Attribute(Name('self', Load(), lineno=48, col_offset=11), 'using_gc', Load(), lineno=48, col_offset=11), [Expr(Call(Attribute(Name('gc', Load(), lineno=49, col_offset=12), 'enable', Load(), lineno=49, col_offset=12), [], [], None, None, lineno=49, col_offset=12), lineno=49, col_offset=12)], [], lineno=48, col_offset=8)], [], lineno=47, col_offset=4), FunctionDef('format_frame', arguments([Name('self', Param(), lineno=51, col_offset=21), Name('frame', Param(), lineno=51, col_offset=27), Name('limit', Param(), lineno=51, col_offset=34)], None, None, [Name('None', Load(), lineno=51, col_offset=40)]), [Return(Call(Attribute(Str('', lineno=52, col_offset=15), 'join', Load(), lineno=52, col_offset=15), [Call(Attribute(Name('traceback', Load(), lineno=52, col_offset=23), 'format_stack', Load(), lineno=52, col_offset=23), [Name('frame', Load(), lineno=52, col_offset=46)], [keyword('limit', Name('limit', Load(), lineno=52, col_offset=59))], None, None, lineno=52, col_offset=23)], [], None, None, lineno=52, col_offset=15), lineno=52, col_offset=8)], [], lineno=51, col_offset=4), FunctionDef('handlerA', arguments([Name('self', Param(), lineno=54, col_offset=17), Name('signum', Param(), lineno=54, col_offset=23), Name('frame', Param(), lineno=54, col_offset=31)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=55, col_offset=8), 'a_called', Store(), lineno=55, col_offset=8)], Name('True', Load(), lineno=55, col_offset=24), lineno=55, col_offset=8), If(Attribute(Name('test_support', Load(), lineno=56, col_offset=11), 'verbose', Load(), lineno=56, col_offset=11), [Print(None, [BinOp(Str('handlerA invoked from signal %s at:\n%s', lineno=57, col_offset=18), Mod(), Tuple([Name('signum', Load(), lineno=58, col_offset=16), Call(Attribute(Name('self', Load(), lineno=58, col_offset=24), 'format_frame', Load(), lineno=58, col_offset=24), [Name('frame', Load(), lineno=58, col_offset=42)], [keyword('limit', Num(1, lineno=58, col_offset=55))], None, None, lineno=58, col_offset=24)], Load(), lineno=58, col_offset=16), lineno=57, col_offset=18)], True, lineno=57, col_offset=12)], [], lineno=56, col_offset=8)], [], lineno=54, col_offset=4), FunctionDef('handlerB', arguments([Name('self', Param(), lineno=60, col_offset=17), Name('signum', Param(), lineno=60, col_offset=23), Name('frame', Param(), lineno=60, col_offset=31)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=61, col_offset=8), 'b_called', Store(), lineno=61, col_offset=8)], Name('True', Load(), lineno=61, col_offset=24), lineno=61, col_offset=8), If(Attribute(Name('test_support', Load(), lineno=62, col_offset=11), 'verbose', Load(), lineno=62, col_offset=11), [Print(None, [BinOp(Str('handlerB invoked from signal %s at:\n%s', lineno=63, col_offset=18), Mod(), Tuple([Name('signum', Load(), lineno=64, col_offset=16), Call(Attribute(Name('self', Load(), lineno=64, col_offset=24), 'format_frame', Load(), lineno=64, col_offset=24), [Name('frame', Load(), lineno=64, col_offset=42)], [keyword('limit', Num(1, lineno=64, col_offset=55))], None, None, lineno=64, col_offset=24)], Load(), lineno=64, col_offset=16), lineno=63, col_offset=18)], True, lineno=63, col_offset=12)], [], lineno=62, col_offset=8), Raise(Call(Name('HandlerBCalled', Load(), lineno=65, col_offset=14), [Name('signum', Load(), lineno=65, col_offset=29), Call(Attribute(Name('self', Load(), lineno=65, col_offset=37), 'format_frame', Load(), lineno=65, col_offset=37), [Name('frame', Load(), lineno=65, col_offset=55)], [], None, None, lineno=65, col_offset=37)], [], None, None, lineno=65, col_offset=14), None, None, lineno=65, col_offset=8)], [], lineno=60, col_offset=4), FunctionDef('wait', arguments([Name('self', Param(), lineno=67, col_offset=13), Name('child', Param(), lineno=67, col_offset=19)], None, None, []), [Expr(Str('Wait for child to finish, ignoring EINTR.', lineno=68, col_offset=8), lineno=68, col_offset=8), While(Name('True', Load(), lineno=69, col_offset=14), [TryExcept([Expr(Call(Attribute(Name('child', Load(), lineno=71, col_offset=16), 'wait', Load(), lineno=71, col_offset=16), [], [], None, None, lineno=71, col_offset=16), lineno=71, col_offset=16), Return(None, lineno=72, col_offset=16)], [ExceptHandler(Name('OSError', Load(), lineno=73, col_offset=19), Name('e', Store(), lineno=73, col_offset=30), [If(Compare(Attribute(Name('e', Load(), lineno=74, col_offset=19), 'errno', Load(), lineno=74, col_offset=19), [NotEq()], [Attribute(Name('errno', Load(), lineno=74, col_offset=30), 'EINTR', Load(), lineno=74, col_offset=30)], lineno=74, col_offset=19), [Raise(None, None, None, lineno=75, col_offset=20)], [], lineno=74, col_offset=16)], lineno=73, col_offset=12)], [], lineno=70, col_offset=12)], [], lineno=69, col_offset=8)], [], lineno=67, col_offset=4), FunctionDef('run_test', arguments([Name('self', Param(), lineno=77, col_offset=17)], None, None, []), [Expr(Call(Attribute(Name('signal', Load(), lineno=80, col_offset=8), 'signal', Load(), lineno=80, col_offset=8), [Attribute(Name('signal', Load(), lineno=80, col_offset=22), 'SIGHUP', Load(), lineno=80, col_offset=22), Attribute(Name('self', Load(), lineno=80, col_offset=37), 'handlerA', Load(), lineno=80, col_offset=37)], [], None, None, lineno=80, col_offset=8), lineno=80, col_offset=8), Expr(Call(Attribute(Name('signal', Load(), lineno=81, col_offset=8), 'signal', Load(), lineno=81, col_offset=8), [Attribute(Name('signal', Load(), lineno=81, col_offset=22), 'SIGUSR1', Load(), lineno=81, col_offset=22), Attribute(Name('self', Load(), lineno=81, col_offset=38), 'handlerB', Load(), lineno=81, col_offset=38)], [], None, None, lineno=81, col_offset=8), lineno=81, col_offset=8), Expr(Call(Attribute(Name('signal', Load(), lineno=82, col_offset=8), 'signal', Load(), lineno=82, col_offset=8), [Attribute(Name('signal', Load(), lineno=82, col_offset=22), 'SIGUSR2', Load(), lineno=82, col_offset=22), Attribute(Name('signal', Load(), lineno=82, col_offset=38), 'SIG_IGN', Load(), lineno=82, col_offset=38)], [], None, None, lineno=82, col_offset=8), lineno=82, col_offset=8), Expr(Call(Attribute(Name('signal', Load(), lineno=83, col_offset=8), 'signal', Load(), lineno=83, col_offset=8), [Attribute(Name('signal', Load(), lineno=83, col_offset=22), 'SIGALRM', Load(), lineno=83, col_offset=22), Attribute(Name('signal', Load(), lineno=83, col_offset=38), 'default_int_handler', Load(), lineno=83, col_offset=38)], [], None, None, lineno=83, col_offset=8), lineno=83, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=86, col_offset=8), 'a_called', Store(), lineno=86, col_offset=8)], Name('False', Load(), lineno=86, col_offset=24), lineno=86, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=87, col_offset=8), 'b_called', Store(), lineno=87, col_offset=8)], Name('False', Load(), lineno=87, col_offset=24), lineno=87, col_offset=8), Assign([Name('pid', Store(), lineno=90, col_offset=8)], Call(Attribute(Name('os', Load(), lineno=90, col_offset=14), 'getpid', Load(), lineno=90, col_offset=14), [], [], None, None, lineno=90, col_offset=14), lineno=90, col_offset=8), If(Attribute(Name('test_support', Load(), lineno=91, col_offset=11), 'verbose', Load(), lineno=91, col_offset=11), [Print(None, [Str("test runner's pid is", lineno=92, col_offset=18), Name('pid', Load(), lineno=92, col_offset=42)], True, lineno=92, col_offset=12)], [], lineno=91, col_offset=8), Assign([Name('child', Store(), lineno=94, col_offset=8)], Call(Name('ignoring_eintr', Load(), lineno=94, col_offset=16), [Attribute(Name('subprocess', Load(), lineno=94, col_offset=31), 'Popen', Load(), lineno=94, col_offset=31), List([Str('kill', lineno=94, col_offset=50), Str('-HUP', lineno=94, col_offset=58), Call(Name('str', Load(), lineno=94, col_offset=66), [Name('pid', Load(), lineno=94, col_offset=70)], [], None, None, lineno=94, col_offset=66)], Load(), lineno=94, col_offset=49)], [], None, None, lineno=94, col_offset=16), lineno=94, col_offset=8), If(Name('child', Load(), lineno=95, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=96, col_offset=12), 'wait', Load(), lineno=96, col_offset=12), [Name('child', Load(), lineno=96, col_offset=22)], [], None, None, lineno=96, col_offset=12), lineno=96, col_offset=12), If(UnaryOp(Not(), Attribute(Name('self', Load(), lineno=97, col_offset=19), 'a_called', Load(), lineno=97, col_offset=19), lineno=97, col_offset=15), [Expr(Call(Attribute(Name('time', Load(), lineno=98, col_offset=16), 'sleep', Load(), lineno=98, col_offset=16), [Num(1, lineno=98, col_offset=27)], [], None, None, lineno=98, col_offset=16), lineno=98, col_offset=16)], [], lineno=97, col_offset=12)], [], lineno=95, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=99, col_offset=8), 'assertTrue', Load(), lineno=99, col_offset=8), [Attribute(Name('self', Load(), lineno=99, col_offset=24), 'a_called', Load(), lineno=99, col_offset=24)], [], None, None, lineno=99, col_offset=8), lineno=99, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=100, col_offset=8), 'assertFalse', Load(), lineno=100, col_offset=8), [Attribute(Name('self', Load(), lineno=100, col_offset=25), 'b_called', Load(), lineno=100, col_offset=25)], [], None, None, lineno=100, col_offset=8), lineno=100, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=101, col_offset=8), 'a_called', Store(), lineno=101, col_offset=8)], Name('False', Load(), lineno=101, col_offset=24), lineno=101, col_offset=8), Delete([Name('child', Del(), lineno=106, col_offset=12)], lineno=106, col_offset=8), TryExcept([Assign([Name('child', Store(), lineno=108, col_offset=12)], Call(Attribute(Name('subprocess', Load(), lineno=108, col_offset=20), 'Popen', Load(), lineno=108, col_offset=20), [List([Str('kill', lineno=108, col_offset=38), Str('-USR1', lineno=108, col_offset=46), Call(Name('str', Load(), lineno=108, col_offset=55), [Name('pid', Load(), lineno=108, col_offset=59)], [], None, None, lineno=108, col_offset=55)], Load(), lineno=108, col_offset=37)], [], None, None, lineno=108, col_offset=20), lineno=108, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=110, col_offset=12), 'wait', Load(), lineno=110, col_offset=12), [Name('child', Load(), lineno=110, col_offset=22)], [], None, None, lineno=110, col_offset=12), lineno=110, col_offset=12), Expr(Call(Attribute(Name('time', Load(), lineno=111, col_offset=12), 'sleep', Load(), lineno=111, col_offset=12), [Num(1, lineno=111, col_offset=23)], [], None, None, lineno=111, col_offset=12), lineno=111, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=112, col_offset=12), 'fail', Load(), lineno=112, col_offset=12), [Str('HandlerBCalled exception not thrown', lineno=112, col_offset=22)], [], None, None, lineno=112, col_offset=12), lineno=112, col_offset=12)], [ExceptHandler(Name('HandlerBCalled', Load(), lineno=113, col_offset=15), None, [Expr(Call(Attribute(Name('self', Load(), lineno=114, col_offset=12), 'assertTrue', Load(), lineno=114, col_offset=12), [Attribute(Name('self', Load(), lineno=114, col_offset=28), 'b_called', Load(), lineno=114, col_offset=28)], [], None, None, lineno=114, col_offset=12), lineno=114, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=115, col_offset=12), 'assertFalse', Load(), lineno=115, col_offset=12), [Attribute(Name('self', Load(), lineno=115, col_offset=29), 'a_called', Load(), lineno=115, col_offset=29)], [], None, None, lineno=115, col_offset=12), lineno=115, col_offset=12), If(Attribute(Name('test_support', Load(), lineno=116, col_offset=15), 'verbose', Load(), lineno=116, col_offset=15), [Print(None, [Str('HandlerBCalled exception caught', lineno=117, col_offset=22)], True, lineno=117, col_offset=16)], [], lineno=116, col_offset=12)], lineno=113, col_offset=8)], [], lineno=107, col_offset=8), Assign([Name('child', Store(), lineno=119, col_offset=8)], Call(Name('ignoring_eintr', Load(), lineno=119, col_offset=16), [Attribute(Name('subprocess', Load(), lineno=119, col_offset=31), 'Popen', Load(), lineno=119, col_offset=31), List([Str('kill', lineno=119, col_offset=50), Str('-USR2', lineno=119, col_offset=58), Call(Name('str', Load(), lineno=119, col_offset=67), [Name('pid', Load(), lineno=119, col_offset=71)], [], None, None, lineno=119, col_offset=67)], Load(), lineno=119, col_offset=49)], [], None, None, lineno=119, col_offset=16), lineno=119, col_offset=8), If(Name('child', Load(), lineno=120, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=121, col_offset=12), 'wait', Load(), lineno=121, col_offset=12), [Name('child', Load(), lineno=121, col_offset=22)], [], None, None, lineno=121, col_offset=12), lineno=121, col_offset=12)], [], lineno=120, col_offset=8), TryExcept([Expr(Call(Attribute(Name('signal', Load(), lineno=124, col_offset=12), 'alarm', Load(), lineno=124, col_offset=12), [Num(1, lineno=124, col_offset=25)], [], None, None, lineno=124, col_offset=12), lineno=124, col_offset=12), Expr(Call(Attribute(Name('signal', Load(), lineno=128, col_offset=12), 'pause', Load(), lineno=128, col_offset=12), [], [], None, None, lineno=128, col_offset=12), lineno=128, col_offset=12), Expr(Call(Attribute(Name('time', Load(), lineno=131, col_offset=12), 'sleep', Load(), lineno=131, col_offset=12), [Num(1, lineno=131, col_offset=23)], [], None, None, lineno=131, col_offset=12), lineno=131, col_offset=12)], [ExceptHandler(Name('KeyboardInterrupt', Load(), lineno=132, col_offset=15), None, [If(Attribute(Name('test_support', Load(), lineno=133, col_offset=15), 'verbose', Load(), lineno=133, col_offset=15), [Print(None, [Str('KeyboardInterrupt (the alarm() went off)', lineno=134, col_offset=22)], True, lineno=134, col_offset=16)], [], lineno=133, col_offset=12)], lineno=132, col_offset=8), ExceptHandler(None, None, [Expr(Call(Attribute(Name('self', Load(), lineno=136, col_offset=12), 'fail', Load(), lineno=136, col_offset=12), [BinOp(Str('Some other exception woke us from pause: %s', lineno=136, col_offset=22), Mod(), Call(Attribute(Name('traceback', Load(), lineno=137, col_offset=22), 'format_exc', Load(), lineno=137, col_offset=22), [], [], None, None, lineno=137, col_offset=22), lineno=136, col_offset=22)], [], None, None, lineno=136, col_offset=12), lineno=136, col_offset=12)], lineno=135, col_offset=8)], [Expr(Call(Attribute(Name('self', Load(), lineno=139, col_offset=12), 'fail', Load(), lineno=139, col_offset=12), [Str("pause returned of its own accord, and the signal didn't arrive after another second.", lineno=139, col_offset=22)], [], None, None, lineno=139, col_offset=12), lineno=139, col_offset=12)], lineno=123, col_offset=8)], [], lineno=77, col_offset=4), FunctionDef('test_main', arguments([Name('self', Param(), lineno=146, col_offset=18)], None, None, []), [Assign([Tuple([Name('os_done_r', Store(), lineno=152, col_offset=8), Name('os_done_w', Store(), lineno=152, col_offset=19)], Store(), lineno=152, col_offset=8)], Call(Attribute(Name('os', Load(), lineno=152, col_offset=31), 'pipe', Load(), lineno=152, col_offset=31), [], [], None, None, lineno=152, col_offset=31), lineno=152, col_offset=8), With(Call(Name('closing', Load(), lineno=153, col_offset=13), [Call(Attribute(Name('os', Load(), lineno=153, col_offset=21), 'fdopen', Load(), lineno=153, col_offset=21), [Name('os_done_r', Load(), lineno=153, col_offset=31)], [], None, None, lineno=153, col_offset=21)], [], None, None, lineno=153, col_offset=13), Name('done_r', Store(), lineno=153, col_offset=46), [With(Call(Name('closing', Load(), lineno=154, col_offset=13), [Call(Attribute(Name('os', Load(), lineno=154, col_offset=21), 'fdopen', Load(), lineno=154, col_offset=21), [Name('os_done_w', Load(), lineno=154, col_offset=31), Str('w', lineno=154, col_offset=42)], [], None, None, lineno=154, col_offset=21)], [], None, None, lineno=154, col_offset=13), Name('done_w', Store(), lineno=154, col_offset=51), [Assign([Name('child', Store(), lineno=155, col_offset=12)], Call(Attribute(Name('os', Load(), lineno=155, col_offset=20), 'fork', Load(), lineno=155, col_offset=20), [], [], None, None, lineno=155, col_offset=20), lineno=155, col_offset=12), If(Compare(Name('child', Load(), lineno=156, col_offset=15), [Eq()], [Num(0, lineno=156, col_offset=24)], lineno=156, col_offset=15), [TryFinally([TryExcept([Expr(Call(Attribute(Name('done_r', Load(), lineno=160, col_offset=20), 'close', Load(), lineno=160, col_offset=20), [], [], None, None, lineno=160, col_offset=20), lineno=160, col_offset=20), With(Call(Name('closing', Load(), lineno=163, col_offset=25), [Name('done_w', Load(), lineno=163, col_offset=33)], [], None, None, lineno=163, col_offset=25), None, [TryExcept([Expr(Call(Attribute(Name('self', Load(), lineno=165, col_offset=28), 'run_test', Load(), lineno=165, col_offset=28), [], [], None, None, lineno=165, col_offset=28), lineno=165, col_offset=28)], [ExceptHandler(None, None, [Expr(Call(Attribute(Name('pickle', Load(), lineno=167, col_offset=28), 'dump', Load(), lineno=167, col_offset=28), [Call(Attribute(Name('traceback', Load(), lineno=167, col_offset=40), 'format_exc', Load(), lineno=167, col_offset=40), [], [], None, None, lineno=167, col_offset=40), Name('done_w', Load(), lineno=167, col_offset=64)], [], None, None, lineno=167, col_offset=28), lineno=167, col_offset=28)], lineno=166, col_offset=24)], [Expr(Call(Attribute(Name('pickle', Load(), lineno=169, col_offset=28), 'dump', Load(), lineno=169, col_offset=28), [Name('None', Load(), lineno=169, col_offset=40), Name('done_w', Load(), lineno=169, col_offset=46)], [], None, None, lineno=169, col_offset=28), lineno=169, col_offset=28)], lineno=164, col_offset=24)], lineno=163, col_offset=25)], [ExceptHandler(None, None, [Print(None, [Str('Uh oh, raised from pickle.', lineno=171, col_offset=26)], True, lineno=171, col_offset=20), Expr(Call(Attribute(Name('traceback', Load(), lineno=172, col_offset=20), 'print_exc', Load(), lineno=172, col_offset=20), [], [], None, None, lineno=172, col_offset=20), lineno=172, col_offset=20)], lineno=170, col_offset=16)], [], lineno=159, col_offset=16)], [Expr(Call(Name('exit_subprocess', Load(), lineno=174, col_offset=20), [], [], None, None, lineno=174, col_offset=20), lineno=174, col_offset=20)], lineno=159, col_offset=16)], [], lineno=156, col_offset=12), Expr(Call(Attribute(Name('done_w', Load(), lineno=176, col_offset=12), 'close', Load(), lineno=176, col_offset=12), [], [], None, None, lineno=176, col_offset=12), lineno=176, col_offset=12), Assign([Tuple([Name('r', Store(), lineno=178, col_offset=12), Name('w', Store(), lineno=178, col_offset=15), Name('x', Store(), lineno=178, col_offset=18)], Store(), lineno=178, col_offset=12)], Call(Attribute(Name('select', Load(), lineno=178, col_offset=22), 'select', Load(), lineno=178, col_offset=22), [List([Name('done_r', Load(), lineno=178, col_offset=37)], Load(), lineno=178, col_offset=36), List([], Load(), lineno=178, col_offset=46), List([], Load(), lineno=178, col_offset=50), Attribute(Name('self', Load(), lineno=178, col_offset=54), 'MAX_DURATION', Load(), lineno=178, col_offset=54)], [], None, None, lineno=178, col_offset=22), lineno=178, col_offset=12), If(Compare(Name('done_r', Load(), lineno=179, col_offset=15), [In()], [Name('r', Load(), lineno=179, col_offset=25)], lineno=179, col_offset=15), [Assign([Name('tb', Store(), lineno=180, col_offset=16)], Call(Attribute(Name('pickle', Load(), lineno=180, col_offset=21), 'load', Load(), lineno=180, col_offset=21), [Name('done_r', Load(), lineno=180, col_offset=33)], [], None, None, lineno=180, col_offset=21), lineno=180, col_offset=16), If(Name('tb', Load(), lineno=181, col_offset=19), [Expr(Call(Attribute(Name('self', Load(), lineno=182, col_offset=20), 'fail', Load(), lineno=182, col_offset=20), [Name('tb', Load(), lineno=182, col_offset=30)], [], None, None, lineno=182, col_offset=20), lineno=182, col_offset=20)], [], lineno=181, col_offset=16)], [Expr(Call(Attribute(Name('os', Load(), lineno=184, col_offset=16), 'kill', Load(), lineno=184, col_offset=16), [Name('child', Load(), lineno=184, col_offset=24), Attribute(Name('signal', Load(), lineno=184, col_offset=31), 'SIGKILL', Load(), lineno=184, col_offset=31)], [], None, None, lineno=184, col_offset=16), lineno=184, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=185, col_offset=16), 'fail', Load(), lineno=185, col_offset=16), [BinOp(Str('Test deadlocked after %d seconds.', lineno=185, col_offset=26), Mod(), Attribute(Name('self', Load(), lineno=186, col_offset=26), 'MAX_DURATION', Load(), lineno=186, col_offset=26), lineno=185, col_offset=26)], [], None, None, lineno=185, col_offset=16), lineno=185, col_offset=16)], lineno=179, col_offset=12)], lineno=154, col_offset=13)], lineno=153, col_offset=13)], [Call(Attribute(Name('unittest', Load(), lineno=143, col_offset=5), 'skipIf', Load(), lineno=143, col_offset=5), [Compare(Attribute(Name('sys', Load(), lineno=143, col_offset=21), 'platform', Load(), lineno=143, col_offset=21), [Eq()], [Str('freebsd6', lineno=143, col_offset=35)], lineno=143, col_offset=21), Str('inter process signals not reliable (do not mix well with threading) on freebsd6', lineno=144, col_offset=8)], [], None, None, lineno=143, col_offset=5)], lineno=143, col_offset=4)], [Call(Attribute(Name('unittest', Load(), lineno=39, col_offset=1), 'skipIf', Load(), lineno=39, col_offset=1), [Compare(Attribute(Name('sys', Load(), lineno=39, col_offset=17), 'platform', Load(), lineno=39, col_offset=17), [Eq()], [Str('win32', lineno=39, col_offset=33)], lineno=39, col_offset=17), Str('Not valid on Windows', lineno=39, col_offset=42)], [], None, None, lineno=39, col_offset=1)], lineno=39, col_offset=0), ClassDef('BasicSignalTests', [Attribute(Name('unittest', Load(), lineno=190, col_offset=23), 'TestCase', Load(), lineno=190, col_offset=23)], [FunctionDef('trivial_signal_handler', arguments([Name('self', Param(), lineno=191, col_offset=31)], 'args', None, []), [Pass( lineno=192, col_offset=8)], [], lineno=191, col_offset=4), FunctionDef('test_out_of_range_signal_number_raises_error', arguments([Name('self', Param(), lineno=194, col_offset=53)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=195, col_offset=8), 'assertRaises', Load(), lineno=195, col_offset=8), [Name('ValueError', Load(), lineno=195, col_offset=26), Attribute(Name('signal', Load(), lineno=195, col_offset=38), 'getsignal', Load(), lineno=195, col_offset=38), Num(4242, lineno=195, col_offset=56)], [], None, None, lineno=195, col_offset=8), lineno=195, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=197, col_offset=8), 'assertRaises', Load(), lineno=197, col_offset=8), [Name('ValueError', Load(), lineno=197, col_offset=26), Attribute(Name('signal', Load(), lineno=197, col_offset=38), 'signal', Load(), lineno=197, col_offset=38), Num(4242, lineno=197, col_offset=53), Attribute(Name('self', Load(), lineno=198, col_offset=26), 'trivial_signal_handler', Load(), lineno=198, col_offset=26)], [], None, None, lineno=197, col_offset=8), lineno=197, col_offset=8)], [], lineno=194, col_offset=4), FunctionDef('test_setting_signal_handler_to_none_raises_error', arguments([Name('self', Param(), lineno=200, col_offset=57)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=201, col_offset=8), 'assertRaises', Load(), lineno=201, col_offset=8), [Name('TypeError', Load(), lineno=201, col_offset=26), Attribute(Name('signal', Load(), lineno=201, col_offset=37), 'signal', Load(), lineno=201, col_offset=37), Attribute(Name('signal', Load(), lineno=202, col_offset=26), 'SIGUSR1', Load(), lineno=202, col_offset=26), Name('None', Load(), lineno=202, col_offset=42)], [], None, None, lineno=201, col_offset=8), lineno=201, col_offset=8)], [], lineno=200, col_offset=4), FunctionDef('test_getsignal', arguments([Name('self', Param(), lineno=204, col_offset=23)], None, None, []), [Assign([Name('hup', Store(), lineno=205, col_offset=8)], Call(Attribute(Name('signal', Load(), lineno=205, col_offset=14), 'signal', Load(), lineno=205, col_offset=14), [Attribute(Name('signal', Load(), lineno=205, col_offset=28), 'SIGHUP', Load(), lineno=205, col_offset=28), Attribute(Name('self', Load(), lineno=205, col_offset=43), 'trivial_signal_handler', Load(), lineno=205, col_offset=43)], [], None, None, lineno=205, col_offset=14), lineno=205, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=206, col_offset=8), 'assertEqual', Load(), lineno=206, col_offset=8), [Call(Attribute(Name('signal', Load(), lineno=206, col_offset=25), 'getsignal', Load(), lineno=206, col_offset=25), [Attribute(Name('signal', Load(), lineno=206, col_offset=42), 'SIGHUP', Load(), lineno=206, col_offset=42)], [], None, None, lineno=206, col_offset=25), Attribute(Name('self', Load(), lineno=207, col_offset=25), 'trivial_signal_handler', Load(), lineno=207, col_offset=25)], [], None, None, lineno=206, col_offset=8), lineno=206, col_offset=8), Expr(Call(Attribute(Name('signal', Load(), lineno=208, col_offset=8), 'signal', Load(), lineno=208, col_offset=8), [Attribute(Name('signal', Load(), lineno=208, col_offset=22), 'SIGHUP', Load(), lineno=208, col_offset=22), Name('hup', Load(), lineno=208, col_offset=37)], [], None, None, lineno=208, col_offset=8), lineno=208, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=209, col_offset=8), 'assertEqual', Load(), lineno=209, col_offset=8), [Call(Attribute(Name('signal', Load(), lineno=209, col_offset=25), 'getsignal', Load(), lineno=209, col_offset=25), [Attribute(Name('signal', Load(), lineno=209, col_offset=42), 'SIGHUP', Load(), lineno=209, col_offset=42)], [], None, None, lineno=209, col_offset=25), Name('hup', Load(), lineno=209, col_offset=58)], [], None, None, lineno=209, col_offset=8), lineno=209, col_offset=8)], [], lineno=204, col_offset=4)], [Call(Attribute(Name('unittest', Load(), lineno=189, col_offset=1), 'skipIf', Load(), lineno=189, col_offset=1), [Compare(Attribute(Name('sys', Load(), lineno=189, col_offset=17), 'platform', Load(), lineno=189, col_offset=17), [Eq()], [Str('win32', lineno=189, col_offset=33)], lineno=189, col_offset=17), Str('Not valid on Windows', lineno=189, col_offset=42)], [], None, None, lineno=189, col_offset=1)], lineno=189, col_offset=0), ClassDef('WindowsSignalTests', [Attribute(Name('unittest', Load(), lineno=213, col_offset=25), 'TestCase', Load(), lineno=213, col_offset=25)], [FunctionDef('test_issue9324', arguments([Name('self', Param(), lineno=214, col_offset=23)], None, None, []), [Assign([Name('handler', Store(), lineno=216, col_offset=8)], Lambda(arguments([Name('x', Param(), lineno=216, col_offset=25), Name('y', Param(), lineno=216, col_offset=28)], None, None, []), Name('None', Load(), lineno=216, col_offset=31), lineno=216, col_offset=18), lineno=216, col_offset=8), For(Name('sig', Store(), lineno=217, col_offset=12), Tuple([Attribute(Name('signal', Load(), lineno=217, col_offset=20), 'SIGABRT', Load(), lineno=217, col_offset=20), Attribute(Name('signal', Load(), lineno=217, col_offset=36), 'SIGBREAK', Load(), lineno=217, col_offset=36), Attribute(Name('signal', Load(), lineno=217, col_offset=53), 'SIGFPE', Load(), lineno=217, col_offset=53), Attribute(Name('signal', Load(), lineno=218, col_offset=20), 'SIGILL', Load(), lineno=218, col_offset=20), Attribute(Name('signal', Load(), lineno=218, col_offset=35), 'SIGINT', Load(), lineno=218, col_offset=35), Attribute(Name('signal', Load(), lineno=218, col_offset=50), 'SIGSEGV', Load(), lineno=218, col_offset=50), Attribute(Name('signal', Load(), lineno=219, col_offset=20), 'SIGTERM', Load(), lineno=219, col_offset=20)], Load(), lineno=217, col_offset=20), [Expr(Call(Attribute(Name('signal', Load(), lineno=221, col_offset=12), 'signal', Load(), lineno=221, col_offset=12), [Name('sig', Load(), lineno=221, col_offset=26), Call(Attribute(Name('signal', Load(), lineno=221, col_offset=31), 'signal', Load(), lineno=221, col_offset=31), [Name('sig', Load(), lineno=221, col_offset=45), Name('handler', Load(), lineno=221, col_offset=50)], [], None, None, lineno=221, col_offset=31)], [], None, None, lineno=221, col_offset=12), lineno=221, col_offset=12)], [], lineno=217, col_offset=8), With(Call(Attribute(Name('self', Load(), lineno=223, col_offset=13), 'assertRaises', Load(), lineno=223, col_offset=13), [Name('ValueError', Load(), lineno=223, col_offset=31)], [], None, None, lineno=223, col_offset=13), None, [Expr(Call(Attribute(Name('signal', Load(), lineno=224, col_offset=12), 'signal', Load(), lineno=224, col_offset=12), [Num(-1, lineno=224, col_offset=27), Name('handler', Load(), lineno=224, col_offset=30)], [], None, None, lineno=224, col_offset=12), lineno=224, col_offset=12)], lineno=223, col_offset=13), With(Call(Attribute(Name('self', Load(), lineno=226, col_offset=13), 'assertRaises', Load(), lineno=226, col_offset=13), [Name('ValueError', Load(), lineno=226, col_offset=31)], [], None, None, lineno=226, col_offset=13), None, [Expr(Call(Attribute(Name('signal', Load(), lineno=227, col_offset=12), 'signal', Load(), lineno=227, col_offset=12), [Num(7, lineno=227, col_offset=26), Name('handler', Load(), lineno=227, col_offset=29)], [], None, None, lineno=227, col_offset=12), lineno=227, col_offset=12)], lineno=226, col_offset=13)], [], lineno=214, col_offset=4)], [Call(Attribute(Name('unittest', Load(), lineno=212, col_offset=1), 'skipUnless', Load(), lineno=212, col_offset=1), [Compare(Attribute(Name('sys', Load(), lineno=212, col_offset=21), 'platform', Load(), lineno=212, col_offset=21), [Eq()], [Str('win32', lineno=212, col_offset=37)], lineno=212, col_offset=21), Str('Windows specific', lineno=212, col_offset=46)], [], None, None, lineno=212, col_offset=1)], lineno=212, col_offset=0), ClassDef('WakeupSignalTests', [Attribute(Name('unittest', Load(), lineno=231, col_offset=24), 'TestCase', Load(), lineno=231, col_offset=24)], [Assign([Name('TIMEOUT_FULL', Store(), lineno=232, col_offset=4)], Num(10, lineno=232, col_offset=19), lineno=232, col_offset=4), Assign([Name('TIMEOUT_HALF', Store(), lineno=233, col_offset=4)], Num(5, lineno=233, col_offset=19), lineno=233, col_offset=4), FunctionDef('test_wakeup_fd_early', arguments([Name('self', Param(), lineno=235, col_offset=29)], None, None, []), [Import([alias('select', None)], lineno=236, col_offset=8), Expr(Call(Attribute(Name('signal', Load(), lineno=238, col_offset=8), 'alarm', Load(), lineno=238, col_offset=8), [Num(1, lineno=238, col_offset=21)], [], None, None, lineno=238, col_offset=8), lineno=238, col_offset=8), Assign([Name('before_time', Store(), lineno=239, col_offset=8)], Call(Attribute(Name('time', Load(), lineno=239, col_offset=22), 'time', Load(), lineno=239, col_offset=22), [], [], None, None, lineno=239, col_offset=22), lineno=239, col_offset=8), Expr(Call(Attribute(Name('time', Load(), lineno=242, col_offset=8), 'sleep', Load(), lineno=242, col_offset=8), [Attribute(Name('self', Load(), lineno=242, col_offset=19), 'TIMEOUT_FULL', Load(), lineno=242, col_offset=19)], [], None, None, lineno=242, col_offset=8), lineno=242, col_offset=8), Assign([Name('mid_time', Store(), lineno=243, col_offset=8)], Call(Attribute(Name('time', Load(), lineno=243, col_offset=19), 'time', Load(), lineno=243, col_offset=19), [], [], None, None, lineno=243, col_offset=19), lineno=243, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=244, col_offset=8), 'assertTrue', Load(), lineno=244, col_offset=8), [Compare(BinOp(Name('mid_time', Load(), lineno=244, col_offset=24), Sub(), Name('before_time', Load(), lineno=244, col_offset=35), lineno=244, col_offset=24), [Lt()], [Attribute(Name('self', Load(), lineno=244, col_offset=49), 'TIMEOUT_HALF', Load(), lineno=244, col_offset=49)], lineno=244, col_offset=24)], [], None, None, lineno=244, col_offset=8), lineno=244, col_offset=8), Expr(Call(Attribute(Name('select', Load(), lineno=245, col_offset=8), 'select', Load(), lineno=245, col_offset=8), [List([Attribute(Name('self', Load(), lineno=245, col_offset=23), 'read', Load(), lineno=245, col_offset=23)], Load(), lineno=245, col_offset=22), List([], Load(), lineno=245, col_offset=35), List([], Load(), lineno=245, col_offset=39), Attribute(Name('self', Load(), lineno=245, col_offset=43), 'TIMEOUT_FULL', Load(), lineno=245, col_offset=43)], [], None, None, lineno=245, col_offset=8), lineno=245, col_offset=8), Assign([Name('after_time', Store(), lineno=246, col_offset=8)], Call(Attribute(Name('time', Load(), lineno=246, col_offset=21), 'time', Load(), lineno=246, col_offset=21), [], [], None, None, lineno=246, col_offset=21), lineno=246, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=247, col_offset=8), 'assertTrue', Load(), lineno=247, col_offset=8), [Compare(BinOp(Name('after_time', Load(), lineno=247, col_offset=24), Sub(), Name('mid_time', Load(), lineno=247, col_offset=37), lineno=247, col_offset=24), [Lt()], [Attribute(Name('self', Load(), lineno=247, col_offset=48), 'TIMEOUT_HALF', Load(), lineno=247, col_offset=48)], lineno=247, col_offset=24)], [], None, None, lineno=247, col_offset=8), lineno=247, col_offset=8)], [], lineno=235, col_offset=4), FunctionDef('test_wakeup_fd_during', arguments([Name('self', Param(), lineno=249, col_offset=30)], None, None, []), [Import([alias('select', None)], lineno=250, col_offset=8), Expr(Call(Attribute(Name('signal', Load(), lineno=252, col_offset=8), 'alarm', Load(), lineno=252, col_offset=8), [Num(1, lineno=252, col_offset=21)], [], None, None, lineno=252, col_offset=8), lineno=252, col_offset=8), Assign([Name('before_time', Store(), lineno=253, col_offset=8)], Call(Attribute(Name('time', Load(), lineno=253, col_offset=22), 'time', Load(), lineno=253, col_offset=22), [], [], None, None, lineno=253, col_offset=22), lineno=253, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=255, col_offset=8), 'assertRaises', Load(), lineno=255, col_offset=8), [Attribute(Name('select', Load(), lineno=255, col_offset=26), 'error', Load(), lineno=255, col_offset=26), Attribute(Name('select', Load(), lineno=255, col_offset=40), 'select', Load(), lineno=255, col_offset=40), List([Attribute(Name('self', Load(), lineno=256, col_offset=13), 'read', Load(), lineno=256, col_offset=13)], Load(), lineno=256, col_offset=12), List([], Load(), lineno=256, col_offset=25), List([], Load(), lineno=256, col_offset=29), Attribute(Name('self', Load(), lineno=256, col_offset=33), 'TIMEOUT_FULL', Load(), lineno=256, col_offset=33)], [], None, None, lineno=255, col_offset=8), lineno=255, col_offset=8), Assign([Name('after_time', Store(), lineno=257, col_offset=8)], Call(Attribute(Name('time', Load(), lineno=257, col_offset=21), 'time', Load(), lineno=257, col_offset=21), [], [], None, None, lineno=257, col_offset=21), lineno=257, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=258, col_offset=8), 'assertTrue', Load(), lineno=258, col_offset=8), [Compare(BinOp(Name('after_time', Load(), lineno=258, col_offset=24), Sub(), Name('before_time', Load(), lineno=258, col_offset=37), lineno=258, col_offset=24), [Lt()], [Attribute(Name('self', Load(), lineno=258, col_offset=51), 'TIMEOUT_HALF', Load(), lineno=258, col_offset=51)], lineno=258, col_offset=24)], [], None, None, lineno=258, col_offset=8), lineno=258, col_offset=8)], [], lineno=249, col_offset=4), FunctionDef('setUp', arguments([Name('self', Param(), lineno=260, col_offset=14)], None, None, []), [Import([alias('fcntl', None)], lineno=261, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=263, col_offset=8), 'alrm', Store(), lineno=263, col_offset=8)], Call(Attribute(Name('signal', Load(), lineno=263, col_offset=20), 'signal', Load(), lineno=263, col_offset=20), [Attribute(Name('signal', Load(), lineno=263, col_offset=34), 'SIGALRM', Load(), lineno=263, col_offset=34), Lambda(arguments([Name('x', Param(), lineno=263, col_offset=57), Name('y', Param(), lineno=263, col_offset=59)], None, None, []), Name('None', Load(), lineno=263, col_offset=61), lineno=263, col_offset=50)], [], None, None, lineno=263, col_offset=20), lineno=263, col_offset=8), Assign([Tuple([Attribute(Name('self', Load(), lineno=264, col_offset=8), 'read', Store(), lineno=264, col_offset=8), Attribute(Name('self', Load(), lineno=264, col_offset=19), 'write', Store(), lineno=264, col_offset=19)], Store(), lineno=264, col_offset=8)], Call(Attribute(Name('os', Load(), lineno=264, col_offset=32), 'pipe', Load(), lineno=264, col_offset=32), [], [], None, None, lineno=264, col_offset=32), lineno=264, col_offset=8), Assign([Name('flags', Store(), lineno=265, col_offset=8)], Call(Attribute(Name('fcntl', Load(), lineno=265, col_offset=16), 'fcntl', Load(), lineno=265, col_offset=16), [Attribute(Name('self', Load(), lineno=265, col_offset=28), 'write', Load(), lineno=265, col_offset=28), Attribute(Name('fcntl', Load(), lineno=265, col_offset=40), 'F_GETFL', Load(), lineno=265, col_offset=40), Num(0, lineno=265, col_offset=55)], [], None, None, lineno=265, col_offset=16), lineno=265, col_offset=8), Assign([Name('flags', Store(), lineno=266, col_offset=8)], BinOp(Name('flags', Load(), lineno=266, col_offset=16), BitOr(), Attribute(Name('os', Load(), lineno=266, col_offset=24), 'O_NONBLOCK', Load(), lineno=266, col_offset=24), lineno=266, col_offset=16), lineno=266, col_offset=8), Expr(Call(Attribute(Name('fcntl', Load(), lineno=267, col_offset=8), 'fcntl', Load(), lineno=267, col_offset=8), [Attribute(Name('self', Load(), lineno=267, col_offset=20), 'write', Load(), lineno=267, col_offset=20), Attribute(Name('fcntl', Load(), lineno=267, col_offset=32), 'F_SETFL', Load(), lineno=267, col_offset=32), Name('flags', Load(), lineno=267, col_offset=47)], [], None, None, lineno=267, col_offset=8), lineno=267, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=268, col_offset=8), 'old_wakeup', Store(), lineno=268, col_offset=8)], Call(Attribute(Name('signal', Load(), lineno=268, col_offset=26), 'set_wakeup_fd', Load(), lineno=268, col_offset=26), [Attribute(Name('self', Load(), lineno=268, col_offset=47), 'write', Load(), lineno=268, col_offset=47)], [], None, None, lineno=268, col_offset=26), lineno=268, col_offset=8)], [], lineno=260, col_offset=4), FunctionDef('tearDown', arguments([Name('self', Param(), lineno=270, col_offset=17)], None, None, []), [Expr(Call(Attribute(Name('signal', Load(), lineno=271, col_offset=8), 'set_wakeup_fd', Load(), lineno=271, col_offset=8), [Attribute(Name('self', Load(), lineno=271, col_offset=29), 'old_wakeup', Load(), lineno=271, col_offset=29)], [], None, None, lineno=271, col_offset=8), lineno=271, col_offset=8), Expr(Call(Attribute(Name('os', Load(), lineno=272, col_offset=8), 'close', Load(), lineno=272, col_offset=8), [Attribute(Name('self', Load(), lineno=272, col_offset=17), 'read', Load(), lineno=272, col_offset=17)], [], None, None, lineno=272, col_offset=8), lineno=272, col_offset=8), Expr(Call(Attribute(Name('os', Load(), lineno=273, col_offset=8), 'close', Load(), lineno=273, col_offset=8), [Attribute(Name('self', Load(), lineno=273, col_offset=17), 'write', Load(), lineno=273, col_offset=17)], [], None, None, lineno=273, col_offset=8), lineno=273, col_offset=8), Expr(Call(Attribute(Name('signal', Load(), lineno=274, col_offset=8), 'signal', Load(), lineno=274, col_offset=8), [Attribute(Name('signal', Load(), lineno=274, col_offset=22), 'SIGALRM', Load(), lineno=274, col_offset=22), Attribute(Name('self', Load(), lineno=274, col_offset=38), 'alrm', Load(), lineno=274, col_offset=38)], [], None, None, lineno=274, col_offset=8), lineno=274, col_offset=8)], [], lineno=270, col_offset=4)], [Call(Attribute(Name('unittest', Load(), lineno=230, col_offset=1), 'skipIf', Load(), lineno=230, col_offset=1), [Compare(Attribute(Name('sys', Load(), lineno=230, col_offset=17), 'platform', Load(), lineno=230, col_offset=17), [Eq()], [Str('win32', lineno=230, col_offset=33)], lineno=230, col_offset=17), Str('Not valid on Windows', lineno=230, col_offset=42)], [], None, None, lineno=230, col_offset=1)], lineno=230, col_offset=0), ClassDef('SiginterruptTest', [Attribute(Name('unittest', Load(), lineno=277, col_offset=23), 'TestCase', Load(), lineno=277, col_offset=23)], [FunctionDef('setUp', arguments([Name('self', Param(), lineno=279, col_offset=14)], None, None, []), [Expr(Str('Install a no-op signal handler that can be set to allow\n        interrupts or not, and arrange for the original signal handler to be\n        re-installed when the test is finished.\n        ', lineno=283, col_offset=-1), lineno=283, col_offset=-1), Assign([Attribute(Name('self', Load(), lineno=284, col_offset=8), 'signum', Store(), lineno=284, col_offset=8)], Attribute(Name('signal', Load(), lineno=284, col_offset=22), 'SIGUSR1', Load(), lineno=284, col_offset=22), lineno=284, col_offset=8), Assign([Name('oldhandler', Store(), lineno=285, col_offset=8)], Call(Attribute(Name('signal', Load(), lineno=285, col_offset=21), 'signal', Load(), lineno=285, col_offset=21), [Attribute(Name('self', Load(), lineno=285, col_offset=35), 'signum', Load(), lineno=285, col_offset=35), Lambda(arguments([Name('x', Param(), lineno=285, col_offset=55), Name('y', Param(), lineno=285, col_offset=57)], None, None, []), Name('None', Load(), lineno=285, col_offset=60), lineno=285, col_offset=48)], [], None, None, lineno=285, col_offset=21), lineno=285, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=286, col_offset=8), 'addCleanup', Load(), lineno=286, col_offset=8), [Attribute(Name('signal', Load(), lineno=286, col_offset=24), 'signal', Load(), lineno=286, col_offset=24), Attribute(Name('self', Load(), lineno=286, col_offset=39), 'signum', Load(), lineno=286, col_offset=39), Name('oldhandler', Load(), lineno=286, col_offset=52)], [], None, None, lineno=286, col_offset=8), lineno=286, col_offset=8)], [], lineno=279, col_offset=4), FunctionDef('readpipe_interrupted', arguments([Name('self', Param(), lineno=288, col_offset=29)], None, None, []), [Expr(Str('Perform a read during which a signal will arrive.  Return True if the\n        read is interrupted by the signal and raises an exception.  Return False\n        if it returns normally.\n        ', lineno=292, col_offset=-1), lineno=292, col_offset=-1), Assign([Tuple([Name('r', Store(), lineno=296, col_offset=8), Name('w', Store(), lineno=296, col_offset=11)], Store(), lineno=296, col_offset=8)], Call(Attribute(Name('os', Load(), lineno=296, col_offset=15), 'pipe', Load(), lineno=296, col_offset=15), [], [], None, None, lineno=296, col_offset=15), lineno=296, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=297, col_offset=8), 'addCleanup', Load(), lineno=297, col_offset=8), [Attribute(Name('os', Load(), lineno=297, col_offset=24), 'close', Load(), lineno=297, col_offset=24), Name('r', Load(), lineno=297, col_offset=34)], [], None, None, lineno=297, col_offset=8), lineno=297, col_offset=8), Assign([Name('ppid', Store(), lineno=301, col_offset=8)], Call(Attribute(Name('os', Load(), lineno=301, col_offset=15), 'getpid', Load(), lineno=301, col_offset=15), [], [], None, None, lineno=301, col_offset=15), lineno=301, col_offset=8), Assign([Name('pid', Store(), lineno=302, col_offset=8)], Call(Attribute(Name('os', Load(), lineno=302, col_offset=14), 'fork', Load(), lineno=302, col_offset=14), [], [], None, None, lineno=302, col_offset=14), lineno=302, col_offset=8), If(Compare(Name('pid', Load(), lineno=304, col_offset=11), [Eq()], [Num(0, lineno=304, col_offset=18)], lineno=304, col_offset=11), [TryFinally([Expr(Call(Attribute(Name('time', Load(), lineno=313, col_offset=16), 'sleep', Load(), lineno=313, col_offset=16), [Num(0.2, lineno=313, col_offset=27)], [], None, None, lineno=313, col_offset=16), lineno=313, col_offset=16), Expr(Call(Attribute(Name('os', Load(), lineno=314, col_offset=16), 'kill', Load(), lineno=314, col_offset=16), [Name('ppid', Load(), lineno=314, col_offset=24), Attribute(Name('self', Load(), lineno=314, col_offset=30), 'signum', Load(), lineno=314, col_offset=30)], [], None, None, lineno=314, col_offset=16), lineno=314, col_offset=16), Expr(Call(Attribute(Name('time', Load(), lineno=315, col_offset=16), 'sleep', Load(), lineno=315, col_offset=16), [Num(0.2, lineno=315, col_offset=27)], [], None, None, lineno=315, col_offset=16), lineno=315, col_offset=16)], [Expr(Call(Name('exit_subprocess', Load(), lineno=318, col_offset=16), [], [], None, None, lineno=318, col_offset=16), lineno=318, col_offset=16)], lineno=312, col_offset=12)], [Expr(Call(Attribute(Name('self', Load(), lineno=323, col_offset=12), 'addCleanup', Load(), lineno=323, col_offset=12), [Attribute(Name('os', Load(), lineno=323, col_offset=28), 'waitpid', Load(), lineno=323, col_offset=28), Name('pid', Load(), lineno=323, col_offset=40), Num(0, lineno=323, col_offset=45)], [], None, None, lineno=323, col_offset=12), lineno=323, col_offset=12), Expr(Call(Attribute(Name('os', Load(), lineno=330, col_offset=12), 'close', Load(), lineno=330, col_offset=12), [Name('w', Load(), lineno=330, col_offset=21)], [], None, None, lineno=330, col_offset=12), lineno=330, col_offset=12), TryExcept([Assign([Name('d', Store(), lineno=335, col_offset=16)], Call(Attribute(Name('os', Load(), lineno=335, col_offset=20), 'read', Load(), lineno=335, col_offset=20), [Name('r', Load(), lineno=335, col_offset=28), Num(1, lineno=335, col_offset=31)], [], None, None, lineno=335, col_offset=20), lineno=335, col_offset=16), Return(Name('False', Load(), lineno=336, col_offset=23), lineno=336, col_offset=16)], [ExceptHandler(Name('OSError', Load(), lineno=337, col_offset=19), Name('err', Store(), lineno=337, col_offset=28), [If(Compare(Attribute(Name('err', Load(), lineno=338, col_offset=19), 'errno', Load(), lineno=338, col_offset=19), [NotEq()], [Attribute(Name('errno', Load(), lineno=338, col_offset=32), 'EINTR', Load(), lineno=338, col_offset=32)], lineno=338, col_offset=19), [Raise(None, None, None, lineno=339, col_offset=20)], [], lineno=338, col_offset=16), Return(Name('True', Load(), lineno=340, col_offset=23), lineno=340, col_offset=16)], lineno=337, col_offset=12)], [], lineno=334, col_offset=12)], lineno=304, col_offset=8)], [], lineno=288, col_offset=4), FunctionDef('test_without_siginterrupt', arguments([Name('self', Param(), lineno=342, col_offset=34)], None, None, []), [Expr(Str("If a signal handler is installed and siginterrupt is not called\n        at all, when that signal arrives, it interrupts a syscall that's in\n        progress.\n        ", lineno=346, col_offset=-1), lineno=346, col_offset=-1), Assign([Name('i', Store(), lineno=347, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=347, col_offset=12), 'readpipe_interrupted', Load(), lineno=347, col_offset=12), [], [], None, None, lineno=347, col_offset=12), lineno=347, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=348, col_offset=8), 'assertTrue', Load(), lineno=348, col_offset=8), [Name('i', Load(), lineno=348, col_offset=24)], [], None, None, lineno=348, col_offset=8), lineno=348, col_offset=8), Assign([Name('i', Store(), lineno=350, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=350, col_offset=12), 'readpipe_interrupted', Load(), lineno=350, col_offset=12), [], [], None, None, lineno=350, col_offset=12), lineno=350, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=351, col_offset=8), 'assertTrue', Load(), lineno=351, col_offset=8), [Name('i', Load(), lineno=351, col_offset=24)], [], None, None, lineno=351, col_offset=8), lineno=351, col_offset=8)], [], lineno=342, col_offset=4), FunctionDef('test_siginterrupt_on', arguments([Name('self', Param(), lineno=353, col_offset=29)], None, None, []), [Expr(Str("If a signal handler is installed and siginterrupt is called with\n        a true value for the second argument, when that signal arrives, it\n        interrupts a syscall that's in progress.\n        ", lineno=357, col_offset=-1), lineno=357, col_offset=-1), Expr(Call(Attribute(Name('signal', Load(), lineno=358, col_offset=8), 'siginterrupt', Load(), lineno=358, col_offset=8), [Attribute(Name('self', Load(), lineno=358, col_offset=28), 'signum', Load(), lineno=358, col_offset=28), Num(1, lineno=358, col_offset=41)], [], None, None, lineno=358, col_offset=8), lineno=358, col_offset=8), Assign([Name('i', Store(), lineno=359, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=359, col_offset=12), 'readpipe_interrupted', Load(), lineno=359, col_offset=12), [], [], None, None, lineno=359, col_offset=12), lineno=359, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=360, col_offset=8), 'assertTrue', Load(), lineno=360, col_offset=8), [Name('i', Load(), lineno=360, col_offset=24)], [], None, None, lineno=360, col_offset=8), lineno=360, col_offset=8), Assign([Name('i', Store(), lineno=362, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=362, col_offset=12), 'readpipe_interrupted', Load(), lineno=362, col_offset=12), [], [], None, None, lineno=362, col_offset=12), lineno=362, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=363, col_offset=8), 'assertTrue', Load(), lineno=363, col_offset=8), [Name('i', Load(), lineno=363, col_offset=24)], [], None, None, lineno=363, col_offset=8), lineno=363, col_offset=8)], [], lineno=353, col_offset=4), FunctionDef('test_siginterrupt_off', arguments([Name('self', Param(), lineno=365, col_offset=30)], None, None, []), [Expr(Str("If a signal handler is installed and siginterrupt is called with\n        a false value for the second argument, when that signal arrives, it\n        does not interrupt a syscall that's in progress.\n        ", lineno=369, col_offset=-1), lineno=369, col_offset=-1), Expr(Call(Attribute(Name('signal', Load(), lineno=370, col_offset=8), 'siginterrupt', Load(), lineno=370, col_offset=8), [Attribute(Name('self', Load(), lineno=370, col_offset=28), 'signum', Load(), lineno=370, col_offset=28), Num(0, lineno=370, col_offset=41)], [], None, None, lineno=370, col_offset=8), lineno=370, col_offset=8), Assign([Name('i', Store(), lineno=371, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=371, col_offset=12), 'readpipe_interrupted', Load(), lineno=371, col_offset=12), [], [], None, None, lineno=371, col_offset=12), lineno=371, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=372, col_offset=8), 'assertFalse', Load(), lineno=372, col_offset=8), [Name('i', Load(), lineno=372, col_offset=25)], [], None, None, lineno=372, col_offset=8), lineno=372, col_offset=8), Assign([Name('i', Store(), lineno=374, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=374, col_offset=12), 'readpipe_interrupted', Load(), lineno=374, col_offset=12), [], [], None, None, lineno=374, col_offset=12), lineno=374, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=375, col_offset=8), 'assertFalse', Load(), lineno=375, col_offset=8), [Name('i', Load(), lineno=375, col_offset=25)], [], None, None, lineno=375, col_offset=8), lineno=375, col_offset=8)], [], lineno=365, col_offset=4)], [Call(Attribute(Name('unittest', Load(), lineno=276, col_offset=1), 'skipIf', Load(), lineno=276, col_offset=1), [Compare(Attribute(Name('sys', Load(), lineno=276, col_offset=17), 'platform', Load(), lineno=276, col_offset=17), [Eq()], [Str('win32', lineno=276, col_offset=33)], lineno=276, col_offset=17), Str('Not valid on Windows', lineno=276, col_offset=42)], [], None, None, lineno=276, col_offset=1)], lineno=276, col_offset=0), ClassDef('ItimerTest', [Attribute(Name('unittest', Load(), lineno=379, col_offset=17), 'TestCase', Load(), lineno=379, col_offset=17)], [FunctionDef('setUp', arguments([Name('self', Param(), lineno=380, col_offset=14)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=381, col_offset=8), 'hndl_called', Store(), lineno=381, col_offset=8)], Name('False', Load(), lineno=381, col_offset=27), lineno=381, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=382, col_offset=8), 'hndl_count', Store(), lineno=382, col_offset=8)], Num(0, lineno=382, col_offset=26), lineno=382, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=383, col_offset=8), 'itimer', Store(), lineno=383, col_offset=8)], Name('None', Load(), lineno=383, col_offset=22), lineno=383, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=384, col_offset=8), 'old_alarm', Store(), lineno=384, col_offset=8)], Call(Attribute(Name('signal', Load(), lineno=384, col_offset=25), 'signal', Load(), lineno=384, col_offset=25), [Attribute(Name('signal', Load(), lineno=384, col_offset=39), 'SIGALRM', Load(), lineno=384, col_offset=39), Attribute(Name('self', Load(), lineno=384, col_offset=55), 'sig_alrm', Load(), lineno=384, col_offset=55)], [], None, None, lineno=384, col_offset=25), lineno=384, col_offset=8)], [], lineno=380, col_offset=4), FunctionDef('tearDown', arguments([Name('self', Param(), lineno=386, col_offset=17)], None, None, []), [Expr(Call(Attribute(Name('signal', Load(), lineno=387, col_offset=8), 'signal', Load(), lineno=387, col_offset=8), [Attribute(Name('signal', Load(), lineno=387, col_offset=22), 'SIGALRM', Load(), lineno=387, col_offset=22), Attribute(Name('self', Load(), lineno=387, col_offset=38), 'old_alarm', Load(), lineno=387, col_offset=38)], [], None, None, lineno=387, col_offset=8), lineno=387, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=388, col_offset=11), 'itimer', Load(), lineno=388, col_offset=11), [IsNot()], [Name('None', Load(), lineno=388, col_offset=30)], lineno=388, col_offset=11), [Expr(Call(Attribute(Name('signal', Load(), lineno=390, col_offset=12), 'setitimer', Load(), lineno=390, col_offset=12), [Attribute(Name('self', Load(), lineno=390, col_offset=29), 'itimer', Load(), lineno=390, col_offset=29), Num(0, lineno=390, col_offset=42)], [], None, None, lineno=390, col_offset=12), lineno=390, col_offset=12)], [], lineno=388, col_offset=8)], [], lineno=386, col_offset=4), FunctionDef('sig_alrm', arguments([Name('self', Param(), lineno=392, col_offset=17)], 'args', None, []), [Assign([Attribute(Name('self', Load(), lineno=393, col_offset=8), 'hndl_called', Store(), lineno=393, col_offset=8)], Name('True', Load(), lineno=393, col_offset=27), lineno=393, col_offset=8), If(Attribute(Name('test_support', Load(), lineno=394, col_offset=11), 'verbose', Load(), lineno=394, col_offset=11), [Print(None, [Tuple([Str('SIGALRM handler invoked', lineno=395, col_offset=18), Name('args', Load(), lineno=395, col_offset=45)], Load(), lineno=395, col_offset=18)], True, lineno=395, col_offset=12)], [], lineno=394, col_offset=8)], [], lineno=392, col_offset=4), FunctionDef('sig_vtalrm', arguments([Name('self', Param(), lineno=397, col_offset=19)], 'args', None, []), [Assign([Attribute(Name('self', Load(), lineno=398, col_offset=8), 'hndl_called', Store(), lineno=398, col_offset=8)], Name('True', Load(), lineno=398, col_offset=27), lineno=398, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=400, col_offset=11), 'hndl_count', Load(), lineno=400, col_offset=11), [Gt()], [Num(3, lineno=400, col_offset=29)], lineno=400, col_offset=11), [Raise(Call(Attribute(Name('signal', Load(), lineno=402, col_offset=18), 'ItimerError', Load(), lineno=402, col_offset=18), [Str("setitimer didn't disable ITIMER_VIRTUAL timer.", lineno=402, col_offset=37)], [], None, None, lineno=402, col_offset=18), None, None, lineno=402, col_offset=12)], [If(Compare(Attribute(Name('self', Load(), lineno=404, col_offset=13), 'hndl_count', Load(), lineno=404, col_offset=13), [Eq()], [Num(3, lineno=404, col_offset=32)], lineno=404, col_offset=13), [Expr(Call(Attribute(Name('signal', Load(), lineno=406, col_offset=12), 'setitimer', Load(), lineno=406, col_offset=12), [Attribute(Name('signal', Load(), lineno=406, col_offset=29), 'ITIMER_VIRTUAL', Load(), lineno=406, col_offset=29), Num(0, lineno=406, col_offset=52)], [], None, None, lineno=406, col_offset=12), lineno=406, col_offset=12), If(Attribute(Name('test_support', Load(), lineno=407, col_offset=15), 'verbose', Load(), lineno=407, col_offset=15), [Print(None, [Str('last SIGVTALRM handler call', lineno=408, col_offset=22)], True, lineno=408, col_offset=16)], [], lineno=407, col_offset=12)], [], lineno=404, col_offset=13)], lineno=400, col_offset=8), AugAssign(Attribute(Name('self', Load(), lineno=410, col_offset=8), 'hndl_count', Store(), lineno=410, col_offset=8), Add(), Num(1, lineno=410, col_offset=27), lineno=410, col_offset=8), If(Attribute(Name('test_support', Load(), lineno=412, col_offset=11), 'verbose', Load(), lineno=412, col_offset=11), [Print(None, [Tuple([Str('SIGVTALRM handler invoked', lineno=413, col_offset=18), Name('args', Load(), lineno=413, col_offset=47)], Load(), lineno=413, col_offset=18)], True, lineno=413, col_offset=12)], [], lineno=412, col_offset=8)], [], lineno=397, col_offset=4), FunctionDef('sig_prof', arguments([Name('self', Param(), lineno=415, col_offset=17)], 'args', None, []), [Assign([Attribute(Name('self', Load(), lineno=416, col_offset=8), 'hndl_called', Store(), lineno=416, col_offset=8)], Name('True', Load(), lineno=416, col_offset=27), lineno=416, col_offset=8), Expr(Call(Attribute(Name('signal', Load(), lineno=417, col_offset=8), 'setitimer', Load(), lineno=417, col_offset=8), [Attribute(Name('signal', Load(), lineno=417, col_offset=25), 'ITIMER_PROF', Load(), lineno=417, col_offset=25), Num(0, lineno=417, col_offset=45)], [], None, None, lineno=417, col_offset=8), lineno=417, col_offset=8), If(Attribute(Name('test_support', Load(), lineno=419, col_offset=11), 'verbose', Load(), lineno=419, col_offset=11), [Print(None, [Tuple([Str('SIGPROF handler invoked', lineno=420, col_offset=18), Name('args', Load(), lineno=420, col_offset=45)], Load(), lineno=420, col_offset=18)], True, lineno=420, col_offset=12)], [], lineno=419, col_offset=8)], [], lineno=415, col_offset=4), FunctionDef('test_itimer_exc', arguments([Name('self', Param(), lineno=422, col_offset=24)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=425, col_offset=8), 'assertRaises', Load(), lineno=425, col_offset=8), [Attribute(Name('signal', Load(), lineno=425, col_offset=26), 'ItimerError', Load(), lineno=425, col_offset=26), Attribute(Name('signal', Load(), lineno=425, col_offset=46), 'setitimer', Load(), lineno=425, col_offset=46), Num(-1, lineno=425, col_offset=65), Num(0, lineno=425, col_offset=68)], [], None, None, lineno=425, col_offset=8), lineno=425, col_offset=8), If(Num(0, lineno=427, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=428, col_offset=12), 'assertRaises', Load(), lineno=428, col_offset=12), [Attribute(Name('signal', Load(), lineno=428, col_offset=30), 'ItimerError', Load(), lineno=428, col_offset=30), Attribute(Name('signal', Load(), lineno=429, col_offset=30), 'setitimer', Load(), lineno=429, col_offset=30), Attribute(Name('signal', Load(), lineno=429, col_offset=48), 'ITIMER_REAL', Load(), lineno=429, col_offset=48), Num(-1, lineno=429, col_offset=69)], [], None, None, lineno=428, col_offset=12), lineno=428, col_offset=12)], [], lineno=427, col_offset=8)], [], lineno=422, col_offset=4), FunctionDef('test_itimer_real', arguments([Name('self', Param(), lineno=431, col_offset=25)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=432, col_offset=8), 'itimer', Store(), lineno=432, col_offset=8)], Attribute(Name('signal', Load(), lineno=432, col_offset=22), 'ITIMER_REAL', Load(), lineno=432, col_offset=22), lineno=432, col_offset=8), Expr(Call(Attribute(Name('signal', Load(), lineno=433, col_offset=8), 'setitimer', Load(), lineno=433, col_offset=8), [Attribute(Name('self', Load(), lineno=433, col_offset=25), 'itimer', Load(), lineno=433, col_offset=25), Num(1.0, lineno=433, col_offset=38)], [], None, None, lineno=433, col_offset=8), lineno=433, col_offset=8), If(Attribute(Name('test_support', Load(), lineno=434, col_offset=11), 'verbose', Load(), lineno=434, col_offset=11), [Print(None, [Str('\ncall pause()...', lineno=435, col_offset=18)], True, lineno=435, col_offset=12)], [], lineno=434, col_offset=8), Expr(Call(Attribute(Name('signal', Load(), lineno=436, col_offset=8), 'pause', Load(), lineno=436, col_offset=8), [], [], None, None, lineno=436, col_offset=8), lineno=436, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=438, col_offset=8), 'assertEqual', Load(), lineno=438, col_offset=8), [Attribute(Name('self', Load(), lineno=438, col_offset=25), 'hndl_called', Load(), lineno=438, col_offset=25), Name('True', Load(), lineno=438, col_offset=43)], [], None, None, lineno=438, col_offset=8), lineno=438, col_offset=8)], [], lineno=431, col_offset=4), FunctionDef('test_itimer_virtual', arguments([Name('self', Param(), lineno=443, col_offset=28)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=444, col_offset=8), 'itimer', Store(), lineno=444, col_offset=8)], Attribute(Name('signal', Load(), lineno=444, col_offset=22), 'ITIMER_VIRTUAL', Load(), lineno=444, col_offset=22), lineno=444, col_offset=8), Expr(Call(Attribute(Name('signal', Load(), lineno=445, col_offset=8), 'signal', Load(), lineno=445, col_offset=8), [Attribute(Name('signal', Load(), lineno=445, col_offset=22), 'SIGVTALRM', Load(), lineno=445, col_offset=22), Attribute(Name('self', Load(), lineno=445, col_offset=40), 'sig_vtalrm', Load(), lineno=445, col_offset=40)], [], None, None, lineno=445, col_offset=8), lineno=445, col_offset=8), Expr(Call(Attribute(Name('signal', Load(), lineno=446, col_offset=8), 'setitimer', Load(), lineno=446, col_offset=8), [Attribute(Name('self', Load(), lineno=446, col_offset=25), 'itimer', Load(), lineno=446, col_offset=25), Num(0.3, lineno=446, col_offset=38), Num(0.2, lineno=446, col_offset=43)], [], None, None, lineno=446, col_offset=8), lineno=446, col_offset=8), Assign([Name('start_time', Store(), lineno=448, col_offset=8)], Call(Attribute(Name('time', Load(), lineno=448, col_offset=21), 'time', Load(), lineno=448, col_offset=21), [], [], None, None, lineno=448, col_offset=21), lineno=448, col_offset=8), While(Compare(BinOp(Call(Attribute(Name('time', Load(), lineno=449, col_offset=14), 'time', Load(), lineno=449, col_offset=14), [], [], None, None, lineno=449, col_offset=14), Sub(), Name('start_time', Load(), lineno=449, col_offset=28), lineno=449, col_offset=14), [Lt()], [Num(60.0, lineno=449, col_offset=41)], lineno=449, col_offset=14), [Assign([Name('_', Store(), lineno=451, col_offset=12)], Call(Name('pow', Load(), lineno=451, col_offset=16), [Num(12345, lineno=451, col_offset=20), Num(67890, lineno=451, col_offset=27), Num(10000019, lineno=451, col_offset=34)], [], None, None, lineno=451, col_offset=16), lineno=451, col_offset=12), If(Compare(Call(Attribute(Name('signal', Load(), lineno=452, col_offset=15), 'getitimer', Load(), lineno=452, col_offset=15), [Attribute(Name('self', Load(), lineno=452, col_offset=32), 'itimer', Load(), lineno=452, col_offset=32)], [], None, None, lineno=452, col_offset=15), [Eq()], [Tuple([Num(0.0, lineno=452, col_offset=49), Num(0.0, lineno=452, col_offset=54)], Load(), lineno=452, col_offset=49)], lineno=452, col_offset=15), [Break( lineno=453, col_offset=16)], [], lineno=452, col_offset=12)], [Expr(Call(Attribute(Name('self', Load(), lineno=455, col_offset=12), 'skipTest', Load(), lineno=455, col_offset=12), [Str('timeout: likely cause: machine too slow or load too high', lineno=455, col_offset=26)], [], None, None, lineno=455, col_offset=12), lineno=455, col_offset=12)], lineno=449, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=459, col_offset=8), 'assertEqual', Load(), lineno=459, col_offset=8), [Call(Attribute(Name('signal', Load(), lineno=459, col_offset=25), 'getitimer', Load(), lineno=459, col_offset=25), [Attribute(Name('self', Load(), lineno=459, col_offset=42), 'itimer', Load(), lineno=459, col_offset=42)], [], None, None, lineno=459, col_offset=25), Tuple([Num(0.0, lineno=459, col_offset=57), Num(0.0, lineno=459, col_offset=62)], Load(), lineno=459, col_offset=57)], [], None, None, lineno=459, col_offset=8), lineno=459, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=461, col_offset=8), 'assertEqual', Load(), lineno=461, col_offset=8), [Attribute(Name('self', Load(), lineno=461, col_offset=25), 'hndl_called', Load(), lineno=461, col_offset=25), Name('True', Load(), lineno=461, col_offset=43)], [], None, None, lineno=461, col_offset=8), lineno=461, col_offset=8)], [Call(Attribute(Name('unittest', Load(), lineno=441, col_offset=5), 'skipIf', Load(), lineno=441, col_offset=5), [Compare(Attribute(Name('sys', Load(), lineno=441, col_offset=21), 'platform', Load(), lineno=441, col_offset=21), [In()], [Tuple([Str('freebsd6', lineno=441, col_offset=38), Str('netbsd5', lineno=441, col_offset=50)], Load(), lineno=441, col_offset=38)], lineno=441, col_offset=21), Str('itimer not reliable (does not mix well with threading) on some BSDs.', lineno=442, col_offset=8)], [], None, None, lineno=441, col_offset=5)], lineno=441, col_offset=4), FunctionDef('test_itimer_prof', arguments([Name('self', Param(), lineno=466, col_offset=25)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=467, col_offset=8), 'itimer', Store(), lineno=467, col_offset=8)], Attribute(Name('signal', Load(), lineno=467, col_offset=22), 'ITIMER_PROF', Load(), lineno=467, col_offset=22), lineno=467, col_offset=8), Expr(Call(Attribute(Name('signal', Load(), lineno=468, col_offset=8), 'signal', Load(), lineno=468, col_offset=8), [Attribute(Name('signal', Load(), lineno=468, col_offset=22), 'SIGPROF', Load(), lineno=468, col_offset=22), Attribute(Name('self', Load(), lineno=468, col_offset=38), 'sig_prof', Load(), lineno=468, col_offset=38)], [], None, None, lineno=468, col_offset=8), lineno=468, col_offset=8), Expr(Call(Attribute(Name('signal', Load(), lineno=469, col_offset=8), 'setitimer', Load(), lineno=469, col_offset=8), [Attribute(Name('self', Load(), lineno=469, col_offset=25), 'itimer', Load(), lineno=469, col_offset=25), Num(0.2, lineno=469, col_offset=38), Num(0.2, lineno=469, col_offset=43)], [], None, None, lineno=469, col_offset=8), lineno=469, col_offset=8), Assign([Name('start_time', Store(), lineno=471, col_offset=8)], Call(Attribute(Name('time', Load(), lineno=471, col_offset=21), 'time', Load(), lineno=471, col_offset=21), [], [], None, None, lineno=471, col_offset=21), lineno=471, col_offset=8), While(Compare(BinOp(Call(Attribute(Name('time', Load(), lineno=472, col_offset=14), 'time', Load(), lineno=472, col_offset=14), [], [], None, None, lineno=472, col_offset=14), Sub(), Name('start_time', Load(), lineno=472, col_offset=28), lineno=472, col_offset=14), [Lt()], [Num(60.0, lineno=472, col_offset=41)], lineno=472, col_offset=14), [Assign([Name('_', Store(), lineno=474, col_offset=12)], Call(Name('pow', Load(), lineno=474, col_offset=16), [Num(12345, lineno=474, col_offset=20), Num(67890, lineno=474, col_offset=27), Num(10000019, lineno=474, col_offset=34)], [], None, None, lineno=474, col_offset=16), lineno=474, col_offset=12), If(Compare(Call(Attribute(Name('signal', Load(), lineno=475, col_offset=15), 'getitimer', Load(), lineno=475, col_offset=15), [Attribute(Name('self', Load(), lineno=475, col_offset=32), 'itimer', Load(), lineno=475, col_offset=32)], [], None, None, lineno=475, col_offset=15), [Eq()], [Tuple([Num(0.0, lineno=475, col_offset=49), Num(0.0, lineno=475, col_offset=54)], Load(), lineno=475, col_offset=49)], lineno=475, col_offset=15), [Break( lineno=476, col_offset=16)], [], lineno=475, col_offset=12)], [Expr(Call(Attribute(Name('self', Load(), lineno=478, col_offset=12), 'skipTest', Load(), lineno=478, col_offset=12), [Str('timeout: likely cause: machine too slow or load too high', lineno=478, col_offset=26)], [], None, None, lineno=478, col_offset=12), lineno=478, col_offset=12)], lineno=472, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=482, col_offset=8), 'assertEqual', Load(), lineno=482, col_offset=8), [Call(Attribute(Name('signal', Load(), lineno=482, col_offset=25), 'getitimer', Load(), lineno=482, col_offset=25), [Attribute(Name('self', Load(), lineno=482, col_offset=42), 'itimer', Load(), lineno=482, col_offset=42)], [], None, None, lineno=482, col_offset=25), Tuple([Num(0.0, lineno=482, col_offset=57), Num(0.0, lineno=482, col_offset=62)], Load(), lineno=482, col_offset=57)], [], None, None, lineno=482, col_offset=8), lineno=482, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=484, col_offset=8), 'assertEqual', Load(), lineno=484, col_offset=8), [Attribute(Name('self', Load(), lineno=484, col_offset=25), 'hndl_called', Load(), lineno=484, col_offset=25), Name('True', Load(), lineno=484, col_offset=43)], [], None, None, lineno=484, col_offset=8), lineno=484, col_offset=8)], [Call(Attribute(Name('unittest', Load(), lineno=464, col_offset=5), 'skipIf', Load(), lineno=464, col_offset=5), [Compare(Attribute(Name('sys', Load(), lineno=464, col_offset=21), 'platform', Load(), lineno=464, col_offset=21), [Eq()], [Str('freebsd6', lineno=464, col_offset=35)], lineno=464, col_offset=21), Str('itimer not reliable (does not mix well with threading) on freebsd6', lineno=465, col_offset=8)], [], None, None, lineno=464, col_offset=5)], lineno=464, col_offset=4)], [Call(Attribute(Name('unittest', Load(), lineno=378, col_offset=1), 'skipIf', Load(), lineno=378, col_offset=1), [Compare(Attribute(Name('sys', Load(), lineno=378, col_offset=17), 'platform', Load(), lineno=378, col_offset=17), [Eq()], [Str('win32', lineno=378, col_offset=33)], lineno=378, col_offset=17), Str('Not valid on Windows', lineno=378, col_offset=42)], [], None, None, lineno=378, col_offset=1)], lineno=378, col_offset=0), FunctionDef('test_main', arguments([], None, None, []), [Expr(Call(Attribute(Name('test_support', Load(), lineno=487, col_offset=4), 'run_unittest', Load(), lineno=487, col_offset=4), [Name('BasicSignalTests', Load(), lineno=487, col_offset=30), Name('InterProcessSignalTests', Load(), lineno=487, col_offset=48), Name('WakeupSignalTests', Load(), lineno=488, col_offset=30), Name('SiginterruptTest', Load(), lineno=488, col_offset=49), Name('ItimerTest', Load(), lineno=489, col_offset=30), Name('WindowsSignalTests', Load(), lineno=489, col_offset=42)], [], None, None, lineno=487, col_offset=4), lineno=487, col_offset=4)], [], lineno=486, col_offset=0), If(Compare(Name('__name__', Load(), lineno=492, col_offset=3), [Eq()], [Str('__main__', lineno=492, col_offset=15)], lineno=492, col_offset=3), [Expr(Call(Name('test_main', Load(), lineno=493, col_offset=4), [], [], None, None, lineno=493, col_offset=4), lineno=493, col_offset=4)], [], lineno=492, col_offset=0)])
