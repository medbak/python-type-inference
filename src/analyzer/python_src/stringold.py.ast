Module([Expr(Str('Common string manipulations.\n\nPublic module variables:\n\nwhitespace -- a string containing all characters considered whitespace\nlowercase -- a string containing all characters considered lowercase letters\nuppercase -- a string containing all characters considered uppercase letters\nletters -- a string containing all characters considered letters\ndigits -- a string containing all characters considered decimal digits\nhexdigits -- a string containing all characters considered hexadecimal digits\noctdigits -- a string containing all characters considered octal digits\n\n', lineno=20, col_offset=-1), lineno=20, col_offset=-1), ImportFrom('warnings', [alias('warnpy3k', None)], 0, lineno=21, col_offset=0), Expr(Call(Name('warnpy3k', Load(), lineno=22, col_offset=0), [Str('the stringold module has been removed in Python 3.0', lineno=22, col_offset=9)], [keyword('stacklevel', Num(2, lineno=22, col_offset=75))], None, None, lineno=22, col_offset=0), lineno=22, col_offset=0), Delete([Name('warnpy3k', Del(), lineno=23, col_offset=4)], lineno=23, col_offset=0), Assign([Name('whitespace', Store(), lineno=26, col_offset=0)], Str(' \t\n\r\x0b\x0c', lineno=26, col_offset=13), lineno=26, col_offset=0), Assign([Name('lowercase', Store(), lineno=27, col_offset=0)], Str('abcdefghijklmnopqrstuvwxyz', lineno=27, col_offset=12), lineno=27, col_offset=0), Assign([Name('uppercase', Store(), lineno=28, col_offset=0)], Str('ABCDEFGHIJKLMNOPQRSTUVWXYZ', lineno=28, col_offset=12), lineno=28, col_offset=0), Assign([Name('letters', Store(), lineno=29, col_offset=0)], BinOp(Name('lowercase', Load(), lineno=29, col_offset=10), Add(), Name('uppercase', Load(), lineno=29, col_offset=22), lineno=29, col_offset=10), lineno=29, col_offset=0), Assign([Name('digits', Store(), lineno=30, col_offset=0)], Str('0123456789', lineno=30, col_offset=9), lineno=30, col_offset=0), Assign([Name('hexdigits', Store(), lineno=31, col_offset=0)], BinOp(BinOp(Name('digits', Load(), lineno=31, col_offset=12), Add(), Str('abcdef', lineno=31, col_offset=21), lineno=31, col_offset=12), Add(), Str('ABCDEF', lineno=31, col_offset=32), lineno=31, col_offset=30), lineno=31, col_offset=0), Assign([Name('octdigits', Store(), lineno=32, col_offset=0)], Str('01234567', lineno=32, col_offset=12), lineno=32, col_offset=0), Assign([Name('_idmap', Store(), lineno=35, col_offset=0)], Str('', lineno=35, col_offset=9), lineno=35, col_offset=0), For(Name('i', Store(), lineno=36, col_offset=4), Call(Name('range', Load(), lineno=36, col_offset=9), [Num(256, lineno=36, col_offset=15)], [], None, None, lineno=36, col_offset=9), [Assign([Name('_idmap', Store(), lineno=36, col_offset=21)], BinOp(Name('_idmap', Load(), lineno=36, col_offset=30), Add(), Call(Name('chr', Load(), lineno=36, col_offset=39), [Name('i', Load(), lineno=36, col_offset=43)], [], None, None, lineno=36, col_offset=39), lineno=36, col_offset=30), lineno=36, col_offset=21)], [], lineno=36, col_offset=0), Delete([Name('i', Del(), lineno=37, col_offset=4)], lineno=37, col_offset=0), Assign([Name('index_error', Store(), lineno=40, col_offset=0)], Name('ValueError', Load(), lineno=40, col_offset=14), lineno=40, col_offset=0), Assign([Name('atoi_error', Store(), lineno=41, col_offset=0)], Name('ValueError', Load(), lineno=41, col_offset=13), lineno=41, col_offset=0), Assign([Name('atof_error', Store(), lineno=42, col_offset=0)], Name('ValueError', Load(), lineno=42, col_offset=13), lineno=42, col_offset=0), Assign([Name('atol_error', Store(), lineno=43, col_offset=0)], Name('ValueError', Load(), lineno=43, col_offset=13), lineno=43, col_offset=0), FunctionDef('lower', arguments([Name('s', Param(), lineno=46, col_offset=10)], None, None, []), [Expr(Str('lower(s) -> string\n\n    Return a copy of the string s converted to lowercase.\n\n    ', lineno=51, col_offset=-1), lineno=51, col_offset=-1), Return(Call(Attribute(Name('s', Load(), lineno=52, col_offset=11), 'lower', Load(), lineno=52, col_offset=11), [], [], None, None, lineno=52, col_offset=11), lineno=52, col_offset=4)], [], lineno=46, col_offset=0), FunctionDef('upper', arguments([Name('s', Param(), lineno=55, col_offset=10)], None, None, []), [Expr(Str('upper(s) -> string\n\n    Return a copy of the string s converted to uppercase.\n\n    ', lineno=60, col_offset=-1), lineno=60, col_offset=-1), Return(Call(Attribute(Name('s', Load(), lineno=61, col_offset=11), 'upper', Load(), lineno=61, col_offset=11), [], [], None, None, lineno=61, col_offset=11), lineno=61, col_offset=4)], [], lineno=55, col_offset=0), FunctionDef('swapcase', arguments([Name('s', Param(), lineno=64, col_offset=13)], None, None, []), [Expr(Str('swapcase(s) -> string\n\n    Return a copy of the string s with upper case characters\n    converted to lowercase and vice versa.\n\n    ', lineno=70, col_offset=-1), lineno=70, col_offset=-1), Return(Call(Attribute(Name('s', Load(), lineno=71, col_offset=11), 'swapcase', Load(), lineno=71, col_offset=11), [], [], None, None, lineno=71, col_offset=11), lineno=71, col_offset=4)], [], lineno=64, col_offset=0), FunctionDef('strip', arguments([Name('s', Param(), lineno=74, col_offset=10)], None, None, []), [Expr(Str('strip(s) -> string\n\n    Return a copy of the string s with leading and trailing\n    whitespace removed.\n\n    ', lineno=80, col_offset=-1), lineno=80, col_offset=-1), Return(Call(Attribute(Name('s', Load(), lineno=81, col_offset=11), 'strip', Load(), lineno=81, col_offset=11), [], [], None, None, lineno=81, col_offset=11), lineno=81, col_offset=4)], [], lineno=74, col_offset=0), FunctionDef('lstrip', arguments([Name('s', Param(), lineno=84, col_offset=11)], None, None, []), [Expr(Str('lstrip(s) -> string\n\n    Return a copy of the string s with leading whitespace removed.\n\n    ', lineno=89, col_offset=-1), lineno=89, col_offset=-1), Return(Call(Attribute(Name('s', Load(), lineno=90, col_offset=11), 'lstrip', Load(), lineno=90, col_offset=11), [], [], None, None, lineno=90, col_offset=11), lineno=90, col_offset=4)], [], lineno=84, col_offset=0), FunctionDef('rstrip', arguments([Name('s', Param(), lineno=93, col_offset=11)], None, None, []), [Expr(Str('rstrip(s) -> string\n\n    Return a copy of the string s with trailing whitespace\n    removed.\n\n    ', lineno=99, col_offset=-1), lineno=99, col_offset=-1), Return(Call(Attribute(Name('s', Load(), lineno=100, col_offset=11), 'rstrip', Load(), lineno=100, col_offset=11), [], [], None, None, lineno=100, col_offset=11), lineno=100, col_offset=4)], [], lineno=93, col_offset=0), FunctionDef('split', arguments([Name('s', Param(), lineno=104, col_offset=10), Name('sep', Param(), lineno=104, col_offset=13), Name('maxsplit', Param(), lineno=104, col_offset=23)], None, None, [Name('None', Load(), lineno=104, col_offset=17), Num(0, lineno=104, col_offset=32)]), [Expr(Str('split(str [,sep [,maxsplit]]) -> list of strings\n\n    Return a list of the words in the string s, using sep as the\n    delimiter string.  If maxsplit is nonzero, splits into at most\n    maxsplit words If sep is not specified, any whitespace string\n    is a separator.  Maxsplit defaults to 0.\n\n    (split and splitfields are synonymous)\n\n    ', lineno=114, col_offset=-1), lineno=114, col_offset=-1), Return(Call(Attribute(Name('s', Load(), lineno=115, col_offset=11), 'split', Load(), lineno=115, col_offset=11), [Name('sep', Load(), lineno=115, col_offset=19), Name('maxsplit', Load(), lineno=115, col_offset=24)], [], None, None, lineno=115, col_offset=11), lineno=115, col_offset=4)], [], lineno=104, col_offset=0), Assign([Name('splitfields', Store(), lineno=116, col_offset=0)], Name('split', Load(), lineno=116, col_offset=14), lineno=116, col_offset=0), FunctionDef('join', arguments([Name('words', Param(), lineno=119, col_offset=9), Name('sep', Param(), lineno=119, col_offset=16)], None, None, [Str(' ', lineno=119, col_offset=22)]), [Expr(Str('join(list [,sep]) -> string\n\n    Return a string composed of the words in list, with\n    intervening occurrences of sep.  The default separator is a\n    single space.\n\n    (joinfields and join are synonymous)\n\n    ', lineno=128, col_offset=-1), lineno=128, col_offset=-1), Return(Call(Attribute(Name('sep', Load(), lineno=129, col_offset=11), 'join', Load(), lineno=129, col_offset=11), [Name('words', Load(), lineno=129, col_offset=20)], [], None, None, lineno=129, col_offset=11), lineno=129, col_offset=4)], [], lineno=119, col_offset=0), Assign([Name('joinfields', Store(), lineno=130, col_offset=0)], Name('join', Load(), lineno=130, col_offset=13), lineno=130, col_offset=0), Assign([Name('_apply', Store(), lineno=133, col_offset=0)], Name('apply', Load(), lineno=133, col_offset=9), lineno=133, col_offset=0), FunctionDef('index', arguments([Name('s', Param(), lineno=136, col_offset=10)], 'args', None, []), [Expr(Str('index(s, sub [,start [,end]]) -> int\n\n    Like find but raises ValueError when the substring is not found.\n\n    ', lineno=141, col_offset=-1), lineno=141, col_offset=-1), Return(Call(Name('_apply', Load(), lineno=142, col_offset=11), [Attribute(Name('s', Load(), lineno=142, col_offset=18), 'index', Load(), lineno=142, col_offset=18), Name('args', Load(), lineno=142, col_offset=27)], [], None, None, lineno=142, col_offset=11), lineno=142, col_offset=4)], [], lineno=136, col_offset=0), FunctionDef('rindex', arguments([Name('s', Param(), lineno=145, col_offset=11)], 'args', None, []), [Expr(Str('rindex(s, sub [,start [,end]]) -> int\n\n    Like rfind but raises ValueError when the substring is not found.\n\n    ', lineno=150, col_offset=-1), lineno=150, col_offset=-1), Return(Call(Name('_apply', Load(), lineno=151, col_offset=11), [Attribute(Name('s', Load(), lineno=151, col_offset=18), 'rindex', Load(), lineno=151, col_offset=18), Name('args', Load(), lineno=151, col_offset=28)], [], None, None, lineno=151, col_offset=11), lineno=151, col_offset=4)], [], lineno=145, col_offset=0), FunctionDef('count', arguments([Name('s', Param(), lineno=154, col_offset=10)], 'args', None, []), [Expr(Str('count(s, sub[, start[,end]]) -> int\n\n    Return the number of occurrences of substring sub in string\n    s[start:end].  Optional arguments start and end are\n    interpreted as in slice notation.\n\n    ', lineno=161, col_offset=-1), lineno=161, col_offset=-1), Return(Call(Name('_apply', Load(), lineno=162, col_offset=11), [Attribute(Name('s', Load(), lineno=162, col_offset=18), 'count', Load(), lineno=162, col_offset=18), Name('args', Load(), lineno=162, col_offset=27)], [], None, None, lineno=162, col_offset=11), lineno=162, col_offset=4)], [], lineno=154, col_offset=0), FunctionDef('find', arguments([Name('s', Param(), lineno=165, col_offset=9)], 'args', None, []), [Expr(Str('find(s, sub [,start [,end]]) -> in\n\n    Return the lowest index in s where substring sub is found,\n    such that sub is contained within s[start,end].  Optional\n    arguments start and end are interpreted as in slice notation.\n\n    Return -1 on failure.\n\n    ', lineno=174, col_offset=-1), lineno=174, col_offset=-1), Return(Call(Name('_apply', Load(), lineno=175, col_offset=11), [Attribute(Name('s', Load(), lineno=175, col_offset=18), 'find', Load(), lineno=175, col_offset=18), Name('args', Load(), lineno=175, col_offset=26)], [], None, None, lineno=175, col_offset=11), lineno=175, col_offset=4)], [], lineno=165, col_offset=0), FunctionDef('rfind', arguments([Name('s', Param(), lineno=178, col_offset=10)], 'args', None, []), [Expr(Str('rfind(s, sub [,start [,end]]) -> int\n\n    Return the highest index in s where substring sub is found,\n    such that sub is contained within s[start,end].  Optional\n    arguments start and end are interpreted as in slice notation.\n\n    Return -1 on failure.\n\n    ', lineno=187, col_offset=-1), lineno=187, col_offset=-1), Return(Call(Name('_apply', Load(), lineno=188, col_offset=11), [Attribute(Name('s', Load(), lineno=188, col_offset=18), 'rfind', Load(), lineno=188, col_offset=18), Name('args', Load(), lineno=188, col_offset=27)], [], None, None, lineno=188, col_offset=11), lineno=188, col_offset=4)], [], lineno=178, col_offset=0), Assign([Name('_float', Store(), lineno=191, col_offset=0)], Name('float', Load(), lineno=191, col_offset=9), lineno=191, col_offset=0), Assign([Name('_int', Store(), lineno=192, col_offset=0)], Name('int', Load(), lineno=192, col_offset=7), lineno=192, col_offset=0), Assign([Name('_long', Store(), lineno=193, col_offset=0)], Name('long', Load(), lineno=193, col_offset=8), lineno=193, col_offset=0), Assign([Name('_StringType', Store(), lineno=194, col_offset=0)], Call(Name('type', Load(), lineno=194, col_offset=14), [Str('', lineno=194, col_offset=19)], [], None, None, lineno=194, col_offset=14), lineno=194, col_offset=0), FunctionDef('atof', arguments([Name('s', Param(), lineno=197, col_offset=9)], None, None, []), [Expr(Str('atof(s) -> float\n\n    Return the floating point number represented by the string s.\n\n    ', lineno=202, col_offset=-1), lineno=202, col_offset=-1), If(Compare(Call(Name('type', Load(), lineno=203, col_offset=7), [Name('s', Load(), lineno=203, col_offset=12)], [], None, None, lineno=203, col_offset=7), [Eq()], [Name('_StringType', Load(), lineno=203, col_offset=18)], lineno=203, col_offset=7), [Return(Call(Name('_float', Load(), lineno=204, col_offset=15), [Name('s', Load(), lineno=204, col_offset=22)], [], None, None, lineno=204, col_offset=15), lineno=204, col_offset=8)], [Raise(Call(Name('TypeError', Load(), lineno=206, col_offset=14), [BinOp(Str('argument 1: expected string, %s found', lineno=206, col_offset=24), Mod(), Attribute(Call(Name('type', Load(), lineno=207, col_offset=24), [Name('s', Load(), lineno=207, col_offset=29)], [], None, None, lineno=207, col_offset=24), '__name__', Load(), lineno=207, col_offset=24), lineno=206, col_offset=24)], [], None, None, lineno=206, col_offset=14), None, None, lineno=206, col_offset=8)], lineno=203, col_offset=4)], [], lineno=197, col_offset=0), FunctionDef('atoi', arguments([], 'args', None, []), [Expr(Str('atoi(s [,base]) -> int\n\n    Return the integer represented by the string s in the given\n    base, which defaults to 10.  The string s must consist of one\n    or more digits, possibly preceded by a sign.  If base is 0, it\n    is chosen from the leading characters of s, 0 for octal, 0x or\n    0X for hexadecimal.  If base is 16, a preceding 0x or 0X is\n    accepted.\n\n    ', lineno=220, col_offset=-1), lineno=220, col_offset=-1), TryExcept([Assign([Name('s', Store(), lineno=222, col_offset=8)], Subscript(Name('args', Load(), lineno=222, col_offset=12), Index(Num(0, lineno=222, col_offset=17)), Load(), lineno=222, col_offset=12), lineno=222, col_offset=8)], [ExceptHandler(Name('IndexError', Load(), lineno=223, col_offset=11), None, [Raise(Call(Name('TypeError', Load(), lineno=224, col_offset=14), [BinOp(Str('function requires at least 1 argument: %d given', lineno=224, col_offset=24), Mod(), Call(Name('len', Load(), lineno=225, col_offset=24), [Name('args', Load(), lineno=225, col_offset=28)], [], None, None, lineno=225, col_offset=24), lineno=224, col_offset=24)], [], None, None, lineno=224, col_offset=14), None, None, lineno=224, col_offset=8)], lineno=223, col_offset=4)], [], lineno=221, col_offset=4), If(Compare(Call(Name('type', Load(), lineno=229, col_offset=7), [Name('s', Load(), lineno=229, col_offset=12)], [], None, None, lineno=229, col_offset=7), [Eq()], [Name('_StringType', Load(), lineno=229, col_offset=18)], lineno=229, col_offset=7), [Return(Call(Name('_apply', Load(), lineno=230, col_offset=15), [Name('_int', Load(), lineno=230, col_offset=22), Name('args', Load(), lineno=230, col_offset=28)], [], None, None, lineno=230, col_offset=15), lineno=230, col_offset=8)], [Raise(Call(Name('TypeError', Load(), lineno=232, col_offset=14), [BinOp(Str('argument 1: expected string, %s found', lineno=232, col_offset=24), Mod(), Attribute(Call(Name('type', Load(), lineno=233, col_offset=24), [Name('s', Load(), lineno=233, col_offset=29)], [], None, None, lineno=233, col_offset=24), '__name__', Load(), lineno=233, col_offset=24), lineno=232, col_offset=24)], [], None, None, lineno=232, col_offset=14), None, None, lineno=232, col_offset=8)], lineno=229, col_offset=4)], [], lineno=210, col_offset=0), FunctionDef('atol', arguments([], 'args', None, []), [Expr(Str('atol(s [,base]) -> long\n\n    Return the long integer represented by the string s in the\n    given base, which defaults to 10.  The string s must consist\n    of one or more digits, possibly preceded by a sign.  If base\n    is 0, it is chosen from the leading characters of s, 0 for\n    octal, 0x or 0X for hexadecimal.  If base is 16, a preceding\n    0x or 0X is accepted.  A trailing L or l is not accepted,\n    unless base is 0.\n\n    ', lineno=248, col_offset=-1), lineno=248, col_offset=-1), TryExcept([Assign([Name('s', Store(), lineno=250, col_offset=8)], Subscript(Name('args', Load(), lineno=250, col_offset=12), Index(Num(0, lineno=250, col_offset=17)), Load(), lineno=250, col_offset=12), lineno=250, col_offset=8)], [ExceptHandler(Name('IndexError', Load(), lineno=251, col_offset=11), None, [Raise(Call(Name('TypeError', Load(), lineno=252, col_offset=14), [BinOp(Str('function requires at least 1 argument: %d given', lineno=252, col_offset=24), Mod(), Call(Name('len', Load(), lineno=253, col_offset=24), [Name('args', Load(), lineno=253, col_offset=28)], [], None, None, lineno=253, col_offset=24), lineno=252, col_offset=24)], [], None, None, lineno=252, col_offset=14), None, None, lineno=252, col_offset=8)], lineno=251, col_offset=4)], [], lineno=249, col_offset=4), If(Compare(Call(Name('type', Load(), lineno=257, col_offset=7), [Name('s', Load(), lineno=257, col_offset=12)], [], None, None, lineno=257, col_offset=7), [Eq()], [Name('_StringType', Load(), lineno=257, col_offset=18)], lineno=257, col_offset=7), [Return(Call(Name('_apply', Load(), lineno=258, col_offset=15), [Name('_long', Load(), lineno=258, col_offset=22), Name('args', Load(), lineno=258, col_offset=29)], [], None, None, lineno=258, col_offset=15), lineno=258, col_offset=8)], [Raise(Call(Name('TypeError', Load(), lineno=260, col_offset=14), [BinOp(Str('argument 1: expected string, %s found', lineno=260, col_offset=24), Mod(), Attribute(Call(Name('type', Load(), lineno=261, col_offset=24), [Name('s', Load(), lineno=261, col_offset=29)], [], None, None, lineno=261, col_offset=24), '__name__', Load(), lineno=261, col_offset=24), lineno=260, col_offset=24)], [], None, None, lineno=260, col_offset=14), None, None, lineno=260, col_offset=8)], lineno=257, col_offset=4)], [], lineno=237, col_offset=0), FunctionDef('ljust', arguments([Name('s', Param(), lineno=265, col_offset=10), Name('width', Param(), lineno=265, col_offset=13)], None, None, []), [Expr(Str('ljust(s, width) -> string\n\n    Return a left-justified version of s, in a field of the\n    specified width, padded with spaces as needed.  The string is\n    never truncated.\n\n    ', lineno=272, col_offset=-1), lineno=272, col_offset=-1), Assign([Name('n', Store(), lineno=273, col_offset=4)], BinOp(Name('width', Load(), lineno=273, col_offset=8), Sub(), Call(Name('len', Load(), lineno=273, col_offset=16), [Name('s', Load(), lineno=273, col_offset=20)], [], None, None, lineno=273, col_offset=16), lineno=273, col_offset=8), lineno=273, col_offset=4), If(Compare(Name('n', Load(), lineno=274, col_offset=7), [LtE()], [Num(0, lineno=274, col_offset=12)], lineno=274, col_offset=7), [Return(Name('s', Load(), lineno=274, col_offset=22), lineno=274, col_offset=15)], [], lineno=274, col_offset=4), Return(BinOp(Name('s', Load(), lineno=275, col_offset=11), Add(), BinOp(Str(' ', lineno=275, col_offset=15), Mult(), Name('n', Load(), lineno=275, col_offset=19), lineno=275, col_offset=15), lineno=275, col_offset=11), lineno=275, col_offset=4)], [], lineno=265, col_offset=0), FunctionDef('rjust', arguments([Name('s', Param(), lineno=278, col_offset=10), Name('width', Param(), lineno=278, col_offset=13)], None, None, []), [Expr(Str('rjust(s, width) -> string\n\n    Return a right-justified version of s, in a field of the\n    specified width, padded with spaces as needed.  The string is\n    never truncated.\n\n    ', lineno=285, col_offset=-1), lineno=285, col_offset=-1), Assign([Name('n', Store(), lineno=286, col_offset=4)], BinOp(Name('width', Load(), lineno=286, col_offset=8), Sub(), Call(Name('len', Load(), lineno=286, col_offset=16), [Name('s', Load(), lineno=286, col_offset=20)], [], None, None, lineno=286, col_offset=16), lineno=286, col_offset=8), lineno=286, col_offset=4), If(Compare(Name('n', Load(), lineno=287, col_offset=7), [LtE()], [Num(0, lineno=287, col_offset=12)], lineno=287, col_offset=7), [Return(Name('s', Load(), lineno=287, col_offset=22), lineno=287, col_offset=15)], [], lineno=287, col_offset=4), Return(BinOp(BinOp(Str(' ', lineno=288, col_offset=11), Mult(), Name('n', Load(), lineno=288, col_offset=15), lineno=288, col_offset=11), Add(), Name('s', Load(), lineno=288, col_offset=19), lineno=288, col_offset=11), lineno=288, col_offset=4)], [], lineno=278, col_offset=0), FunctionDef('center', arguments([Name('s', Param(), lineno=291, col_offset=11), Name('width', Param(), lineno=291, col_offset=14)], None, None, []), [Expr(Str('center(s, width) -> string\n\n    Return a center version of s, in a field of the specified\n    width. padded with spaces as needed.  The string is never\n    truncated.\n\n    ', lineno=298, col_offset=-1), lineno=298, col_offset=-1), Assign([Name('n', Store(), lineno=299, col_offset=4)], BinOp(Name('width', Load(), lineno=299, col_offset=8), Sub(), Call(Name('len', Load(), lineno=299, col_offset=16), [Name('s', Load(), lineno=299, col_offset=20)], [], None, None, lineno=299, col_offset=16), lineno=299, col_offset=8), lineno=299, col_offset=4), If(Compare(Name('n', Load(), lineno=300, col_offset=7), [LtE()], [Num(0, lineno=300, col_offset=12)], lineno=300, col_offset=7), [Return(Name('s', Load(), lineno=300, col_offset=22), lineno=300, col_offset=15)], [], lineno=300, col_offset=4), Assign([Name('half', Store(), lineno=301, col_offset=4)], BinOp(Name('n', Load(), lineno=301, col_offset=11), Div(), Num(2, lineno=301, col_offset=13), lineno=301, col_offset=11), lineno=301, col_offset=4), If(BoolOp(And(), [BinOp(Name('n', Load(), lineno=302, col_offset=7), Mod(), Num(2, lineno=302, col_offset=9), lineno=302, col_offset=7), BinOp(Name('width', Load(), lineno=302, col_offset=15), Mod(), Num(2, lineno=302, col_offset=21), lineno=302, col_offset=15)], lineno=302, col_offset=7), [Assign([Name('half', Store(), lineno=304, col_offset=8)], BinOp(Name('half', Load(), lineno=304, col_offset=15), Add(), Num(1, lineno=304, col_offset=20), lineno=304, col_offset=15), lineno=304, col_offset=8)], [], lineno=302, col_offset=4), Return(BinOp(BinOp(BinOp(Str(' ', lineno=305, col_offset=11), Mult(), Name('half', Load(), lineno=305, col_offset=15), lineno=305, col_offset=11), Add(), Name('s', Load(), lineno=305, col_offset=23), lineno=305, col_offset=11), Add(), BinOp(Str(' ', lineno=305, col_offset=27), Mult(), BinOp(Name('n', Load(), lineno=305, col_offset=32), Sub(), Name('half', Load(), lineno=305, col_offset=34), lineno=305, col_offset=32), lineno=305, col_offset=27), lineno=305, col_offset=25), lineno=305, col_offset=4)], [], lineno=291, col_offset=0), FunctionDef('zfill', arguments([Name('x', Param(), lineno=310, col_offset=10), Name('width', Param(), lineno=310, col_offset=13)], None, None, []), [Expr(Str('zfill(x, width) -> string\n\n    Pad a numeric string x with zeros on the left, to fill a field\n    of the specified width.  The string x is never truncated.\n\n    ', lineno=316, col_offset=-1), lineno=316, col_offset=-1), If(Compare(Call(Name('type', Load(), lineno=317, col_offset=7), [Name('x', Load(), lineno=317, col_offset=12)], [], None, None, lineno=317, col_offset=7), [Eq()], [Call(Name('type', Load(), lineno=317, col_offset=18), [Str('', lineno=317, col_offset=23)], [], None, None, lineno=317, col_offset=18)], lineno=317, col_offset=7), [Assign([Name('s', Store(), lineno=317, col_offset=28)], Name('x', Load(), lineno=317, col_offset=32), lineno=317, col_offset=28)], [Assign([Name('s', Store(), lineno=318, col_offset=10)], Call(Name('repr', Load(), lineno=318, col_offset=14), [Name('x', Load(), lineno=318, col_offset=19)], [], None, None, lineno=318, col_offset=14), lineno=318, col_offset=10)], lineno=317, col_offset=4), Assign([Name('n', Store(), lineno=319, col_offset=4)], Call(Name('len', Load(), lineno=319, col_offset=8), [Name('s', Load(), lineno=319, col_offset=12)], [], None, None, lineno=319, col_offset=8), lineno=319, col_offset=4), If(Compare(Name('n', Load(), lineno=320, col_offset=7), [GtE()], [Name('width', Load(), lineno=320, col_offset=12)], lineno=320, col_offset=7), [Return(Name('s', Load(), lineno=320, col_offset=26), lineno=320, col_offset=19)], [], lineno=320, col_offset=4), Assign([Name('sign', Store(), lineno=321, col_offset=4)], Str('', lineno=321, col_offset=11), lineno=321, col_offset=4), If(Compare(Subscript(Name('s', Load(), lineno=322, col_offset=7), Index(Num(0, lineno=322, col_offset=9)), Load(), lineno=322, col_offset=7), [In()], [Tuple([Str('-', lineno=322, col_offset=16), Str('+', lineno=322, col_offset=21)], Load(), lineno=322, col_offset=16)], lineno=322, col_offset=7), [Assign([Tuple([Name('sign', Store(), lineno=323, col_offset=8), Name('s', Store(), lineno=323, col_offset=14)], Store(), lineno=323, col_offset=8)], Tuple([Subscript(Name('s', Load(), lineno=323, col_offset=18), Index(Num(0, lineno=323, col_offset=20)), Load(), lineno=323, col_offset=18), Subscript(Name('s', Load(), lineno=323, col_offset=24), Slice(Num(1, lineno=323, col_offset=26), None, None), Load(), lineno=323, col_offset=24)], Load(), lineno=323, col_offset=18), lineno=323, col_offset=8)], [], lineno=322, col_offset=4), Return(BinOp(BinOp(Name('sign', Load(), lineno=324, col_offset=11), Add(), BinOp(Str('0', lineno=324, col_offset=18), Mult(), BinOp(Name('width', Load(), lineno=324, col_offset=23), Sub(), Name('n', Load(), lineno=324, col_offset=29), lineno=324, col_offset=23), lineno=324, col_offset=18), lineno=324, col_offset=11), Add(), Name('s', Load(), lineno=324, col_offset=34), lineno=324, col_offset=32), lineno=324, col_offset=4)], [], lineno=310, col_offset=0), FunctionDef('expandtabs', arguments([Name('s', Param(), lineno=328, col_offset=15), Name('tabsize', Param(), lineno=328, col_offset=18)], None, None, [Num(8, lineno=328, col_offset=26)]), [Expr(Str('expandtabs(s [,tabsize]) -> string\n\n    Return a copy of the string s with all tab characters replaced\n    by the appropriate number of spaces, depending on the current\n    column, and the tabsize (default 8).\n\n    ', lineno=335, col_offset=-1), lineno=335, col_offset=-1), Assign([Name('res', Store(), lineno=336, col_offset=4), Name('line', Store(), lineno=336, col_offset=10)], Str('', lineno=336, col_offset=17), lineno=336, col_offset=4), For(Name('c', Store(), lineno=337, col_offset=8), Name('s', Load(), lineno=337, col_offset=13), [If(Compare(Name('c', Load(), lineno=338, col_offset=11), [Eq()], [Str('\t', lineno=338, col_offset=16)], lineno=338, col_offset=11), [Assign([Name('c', Store(), lineno=339, col_offset=12)], BinOp(Str(' ', lineno=339, col_offset=16), Mult(), BinOp(Name('tabsize', Load(), lineno=339, col_offset=21), Sub(), BinOp(Call(Name('len', Load(), lineno=339, col_offset=31), [Name('line', Load(), lineno=339, col_offset=35)], [], None, None, lineno=339, col_offset=31), Mod(), Name('tabsize', Load(), lineno=339, col_offset=43), lineno=339, col_offset=31), lineno=339, col_offset=21), lineno=339, col_offset=16), lineno=339, col_offset=12)], [], lineno=338, col_offset=8), Assign([Name('line', Store(), lineno=340, col_offset=8)], BinOp(Name('line', Load(), lineno=340, col_offset=15), Add(), Name('c', Load(), lineno=340, col_offset=22), lineno=340, col_offset=15), lineno=340, col_offset=8), If(Compare(Name('c', Load(), lineno=341, col_offset=11), [Eq()], [Str('\n', lineno=341, col_offset=16)], lineno=341, col_offset=11), [Assign([Name('res', Store(), lineno=342, col_offset=12)], BinOp(Name('res', Load(), lineno=342, col_offset=18), Add(), Name('line', Load(), lineno=342, col_offset=24), lineno=342, col_offset=18), lineno=342, col_offset=12), Assign([Name('line', Store(), lineno=343, col_offset=12)], Str('', lineno=343, col_offset=19), lineno=343, col_offset=12)], [], lineno=341, col_offset=8)], [], lineno=337, col_offset=4), Return(BinOp(Name('res', Load(), lineno=344, col_offset=11), Add(), Name('line', Load(), lineno=344, col_offset=17), lineno=344, col_offset=11), lineno=344, col_offset=4)], [], lineno=328, col_offset=0), FunctionDef('translate', arguments([Name('s', Param(), lineno=347, col_offset=14), Name('table', Param(), lineno=347, col_offset=17), Name('deletions', Param(), lineno=347, col_offset=24)], None, None, [Str('', lineno=347, col_offset=34)]), [Expr(Str('translate(s,table [,deletechars]) -> string\n\n    Return a copy of the string s, where all characters occurring\n    in the optional argument deletechars are removed, and the\n    remaining characters have been mapped through the given\n    translation table, which must be a string of length 256.\n\n    ', lineno=355, col_offset=-1), lineno=355, col_offset=-1), Return(Call(Attribute(Name('s', Load(), lineno=356, col_offset=11), 'translate', Load(), lineno=356, col_offset=11), [Name('table', Load(), lineno=356, col_offset=23), Name('deletions', Load(), lineno=356, col_offset=30)], [], None, None, lineno=356, col_offset=11), lineno=356, col_offset=4)], [], lineno=347, col_offset=0), FunctionDef('capitalize', arguments([Name('s', Param(), lineno=359, col_offset=15)], None, None, []), [Expr(Str('capitalize(s) -> string\n\n    Return a copy of the string s with only its first character\n    capitalized.\n\n    ', lineno=365, col_offset=-1), lineno=365, col_offset=-1), Return(Call(Attribute(Name('s', Load(), lineno=366, col_offset=11), 'capitalize', Load(), lineno=366, col_offset=11), [], [], None, None, lineno=366, col_offset=11), lineno=366, col_offset=4)], [], lineno=359, col_offset=0), FunctionDef('capwords', arguments([Name('s', Param(), lineno=369, col_offset=13), Name('sep', Param(), lineno=369, col_offset=16)], None, None, [Name('None', Load(), lineno=369, col_offset=20)]), [Expr(Str('capwords(s, [sep]) -> string\n\n    Split the argument into words using split, capitalize each\n    word using capitalize, and join the capitalized words using\n    join. Note that this replaces runs of whitespace characters by\n    a single space.\n\n    ', lineno=377, col_offset=-1), lineno=377, col_offset=-1), Return(Call(Name('join', Load(), lineno=378, col_offset=11), [Call(Name('map', Load(), lineno=378, col_offset=16), [Name('capitalize', Load(), lineno=378, col_offset=20), Call(Attribute(Name('s', Load(), lineno=378, col_offset=32), 'split', Load(), lineno=378, col_offset=32), [Name('sep', Load(), lineno=378, col_offset=40)], [], None, None, lineno=378, col_offset=32)], [], None, None, lineno=378, col_offset=16), BoolOp(Or(), [Name('sep', Load(), lineno=378, col_offset=47), Str(' ', lineno=378, col_offset=54)], lineno=378, col_offset=47)], [], None, None, lineno=378, col_offset=11), lineno=378, col_offset=4)], [], lineno=369, col_offset=0), Assign([Name('_idmapL', Store(), lineno=381, col_offset=0)], Name('None', Load(), lineno=381, col_offset=10), lineno=381, col_offset=0), FunctionDef('maketrans', arguments([Name('fromstr', Param(), lineno=382, col_offset=14), Name('tostr', Param(), lineno=382, col_offset=23)], None, None, []), [Expr(Str('maketrans(frm, to) -> string\n\n    Return a translation table (a string of 256 bytes long)\n    suitable for use in string.translate.  The strings frm and to\n    must be of the same length.\n\n    ', lineno=389, col_offset=-1), lineno=389, col_offset=-1), If(Compare(Call(Name('len', Load(), lineno=390, col_offset=7), [Name('fromstr', Load(), lineno=390, col_offset=11)], [], None, None, lineno=390, col_offset=7), [NotEq()], [Call(Name('len', Load(), lineno=390, col_offset=23), [Name('tostr', Load(), lineno=390, col_offset=27)], [], None, None, lineno=390, col_offset=23)], lineno=390, col_offset=7), [Raise(Name('ValueError', Load(), lineno=391, col_offset=14), Str('maketrans arguments must have same length', lineno=391, col_offset=26), None, lineno=391, col_offset=8)], [], lineno=390, col_offset=4), Global(['_idmapL'], lineno=392, col_offset=4), If(UnaryOp(Not(), Name('_idmapL', Load(), lineno=393, col_offset=11), lineno=393, col_offset=7), [Assign([Name('_idmapL', Store(), lineno=394, col_offset=8)], Call(Name('list', Load(), lineno=394, col_offset=18), [Name('_idmap', Load(), lineno=394, col_offset=23)], [], None, None, lineno=394, col_offset=18), lineno=394, col_offset=8)], [], lineno=393, col_offset=4), Assign([Name('L', Store(), lineno=395, col_offset=4)], Subscript(Name('_idmapL', Load(), lineno=395, col_offset=8), Slice(None, None, None), Load(), lineno=395, col_offset=8), lineno=395, col_offset=4), Assign([Name('fromstr', Store(), lineno=396, col_offset=4)], Call(Name('map', Load(), lineno=396, col_offset=14), [Name('ord', Load(), lineno=396, col_offset=18), Name('fromstr', Load(), lineno=396, col_offset=23)], [], None, None, lineno=396, col_offset=14), lineno=396, col_offset=4), For(Name('i', Store(), lineno=397, col_offset=8), Call(Name('range', Load(), lineno=397, col_offset=13), [Call(Name('len', Load(), lineno=397, col_offset=19), [Name('fromstr', Load(), lineno=397, col_offset=23)], [], None, None, lineno=397, col_offset=19)], [], None, None, lineno=397, col_offset=13), [Assign([Subscript(Name('L', Load(), lineno=398, col_offset=8), Index(Subscript(Name('fromstr', Load(), lineno=398, col_offset=10), Index(Name('i', Load(), lineno=398, col_offset=18)), Load(), lineno=398, col_offset=10)), Store(), lineno=398, col_offset=8)], Subscript(Name('tostr', Load(), lineno=398, col_offset=24), Index(Name('i', Load(), lineno=398, col_offset=30)), Load(), lineno=398, col_offset=24), lineno=398, col_offset=8)], [], lineno=397, col_offset=4), Return(Call(Name('join', Load(), lineno=399, col_offset=11), [Name('L', Load(), lineno=399, col_offset=16), Str('', lineno=399, col_offset=19)], [], None, None, lineno=399, col_offset=11), lineno=399, col_offset=4)], [], lineno=382, col_offset=0), FunctionDef('replace', arguments([Name('s', Param(), lineno=402, col_offset=12), Name('old', Param(), lineno=402, col_offset=15), Name('new', Param(), lineno=402, col_offset=20), Name('maxsplit', Param(), lineno=402, col_offset=25)], None, None, [Num(0, lineno=402, col_offset=34)]), [Expr(Str('replace (str, old, new[, maxsplit]) -> string\n\n    Return a copy of string str with all occurrences of substring\n    old replaced by new. If the optional argument maxsplit is\n    given, only the first maxsplit occurrences are replaced.\n\n    ', lineno=409, col_offset=-1), lineno=409, col_offset=-1), Return(Call(Attribute(Name('s', Load(), lineno=410, col_offset=11), 'replace', Load(), lineno=410, col_offset=11), [Name('old', Load(), lineno=410, col_offset=21), Name('new', Load(), lineno=410, col_offset=26), Name('maxsplit', Load(), lineno=410, col_offset=31)], [], None, None, lineno=410, col_offset=11), lineno=410, col_offset=4)], [], lineno=402, col_offset=0), TryExcept([Expr(Attribute(Str('', lineno=419, col_offset=4), 'upper', Load(), lineno=419, col_offset=4), lineno=419, col_offset=4)], [ExceptHandler(Name('AttributeError', Load(), lineno=420, col_offset=7), None, [ImportFrom('stringold', [alias('*', None)], 0, lineno=421, col_offset=4)], lineno=420, col_offset=0)], [], lineno=418, col_offset=0), TryExcept([ImportFrom('strop', [alias('maketrans', None), alias('lowercase', None), alias('uppercase', None), alias('whitespace', None)], 0, lineno=429, col_offset=4), Assign([Name('letters', Store(), lineno=430, col_offset=4)], BinOp(Name('lowercase', Load(), lineno=430, col_offset=14), Add(), Name('uppercase', Load(), lineno=430, col_offset=26), lineno=430, col_offset=14), lineno=430, col_offset=4)], [ExceptHandler(Name('ImportError', Load(), lineno=431, col_offset=7), None, [Pass( lineno=432, col_offset=4)], lineno=431, col_offset=0)], [], lineno=428, col_offset=0)])
