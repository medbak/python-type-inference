Module([Import([alias('warnings', None)], lineno=7, col_offset=0), Expr(Call(Attribute(Name('warnings', Load(), lineno=8, col_offset=0), 'filterwarnings', Load(), lineno=8, col_offset=0), [Str('ignore', lineno=8, col_offset=24), Str('the sha module is deprecated.*', lineno=8, col_offset=34), Name('DeprecationWarning', Load(), lineno=9, col_offset=24)], [], None, None, lineno=8, col_offset=0), lineno=8, col_offset=0), Import([alias('sha', None)], lineno=11, col_offset=0), Import([alias('unittest', None)], lineno=12, col_offset=0), ImportFrom('test', [alias('test_support', None)], 0, lineno=13, col_offset=0), ClassDef('SHATestCase', [Attribute(Name('unittest', Load(), lineno=16, col_offset=18), 'TestCase', Load(), lineno=16, col_offset=18)], [FunctionDef('check', arguments([Name('self', Param(), lineno=17, col_offset=14), Name('data', Param(), lineno=17, col_offset=20), Name('digest', Param(), lineno=17, col_offset=26)], None, None, []), [Assign([Name('obj', Store(), lineno=19, col_offset=8)], Call(Attribute(Name('sha', Load(), lineno=19, col_offset=14), 'new', Load(), lineno=19, col_offset=14), [Name('data', Load(), lineno=19, col_offset=22)], [], None, None, lineno=19, col_offset=14), lineno=19, col_offset=8), Assign([Name('computed', Store(), lineno=20, col_offset=8)], Call(Attribute(Name('obj', Load(), lineno=20, col_offset=19), 'hexdigest', Load(), lineno=20, col_offset=19), [], [], None, None, lineno=20, col_offset=19), lineno=20, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=21, col_offset=8), 'assertTrue', Load(), lineno=21, col_offset=8), [Compare(Name('computed', Load(), lineno=21, col_offset=24), [Eq()], [Name('digest', Load(), lineno=21, col_offset=36)], lineno=21, col_offset=24)], [], None, None, lineno=21, col_offset=8), lineno=21, col_offset=8), Assign([Name('computed_again', Store(), lineno=25, col_offset=8)], Call(Attribute(Name('obj', Load(), lineno=25, col_offset=25), 'hexdigest', Load(), lineno=25, col_offset=25), [], [], None, None, lineno=25, col_offset=25), lineno=25, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=26, col_offset=8), 'assertTrue', Load(), lineno=26, col_offset=8), [Compare(Name('computed', Load(), lineno=26, col_offset=24), [Eq()], [Name('computed_again', Load(), lineno=26, col_offset=36)], lineno=26, col_offset=24)], [], None, None, lineno=26, col_offset=8), lineno=26, col_offset=8), Assign([Name('digest', Store(), lineno=29, col_offset=8)], Call(Attribute(Name('obj', Load(), lineno=29, col_offset=17), 'digest', Load(), lineno=29, col_offset=17), [], [], None, None, lineno=29, col_offset=17), lineno=29, col_offset=8), Assign([Name('hexd', Store(), lineno=30, col_offset=8)], Str('', lineno=30, col_offset=15), lineno=30, col_offset=8), For(Name('c', Store(), lineno=31, col_offset=12), Name('digest', Load(), lineno=31, col_offset=17), [AugAssign(Name('hexd', Store(), lineno=32, col_offset=12), Add(), BinOp(Str('%02x', lineno=32, col_offset=20), Mod(), Call(Name('ord', Load(), lineno=32, col_offset=29), [Name('c', Load(), lineno=32, col_offset=33)], [], None, None, lineno=32, col_offset=29), lineno=32, col_offset=20), lineno=32, col_offset=12)], [], lineno=31, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=33, col_offset=8), 'assertTrue', Load(), lineno=33, col_offset=8), [Compare(Name('computed', Load(), lineno=33, col_offset=24), [Eq()], [Name('hexd', Load(), lineno=33, col_offset=36)], lineno=33, col_offset=24)], [], None, None, lineno=33, col_offset=8), lineno=33, col_offset=8)], [], lineno=17, col_offset=4), FunctionDef('test_case_1', arguments([Name('self', Param(), lineno=35, col_offset=20)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=36, col_offset=8), 'check', Load(), lineno=36, col_offset=8), [Str('abc', lineno=36, col_offset=19), Str('a9993e364706816aba3e25717850c26c9cd0d89d', lineno=37, col_offset=19)], [], None, None, lineno=36, col_offset=8), lineno=36, col_offset=8)], [], lineno=35, col_offset=4), FunctionDef('test_case_2', arguments([Name('self', Param(), lineno=39, col_offset=20)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=40, col_offset=8), 'check', Load(), lineno=40, col_offset=8), [Str('abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq', lineno=40, col_offset=19), Str('84983e441c3bd26ebaae4aa1f95129e5e54670f1', lineno=41, col_offset=19)], [], None, None, lineno=40, col_offset=8), lineno=40, col_offset=8)], [], lineno=39, col_offset=4), FunctionDef('test_case_3', arguments([Name('self', Param(), lineno=43, col_offset=20)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=44, col_offset=8), 'check', Load(), lineno=44, col_offset=8), [BinOp(Str('a', lineno=44, col_offset=19), Mult(), Num(1000000, lineno=44, col_offset=25), lineno=44, col_offset=19), Str('34aa973cd4c4daa4f61eeb2bdbad27316534016f', lineno=45, col_offset=19)], [], None, None, lineno=44, col_offset=8), lineno=44, col_offset=8)], [], lineno=43, col_offset=4), FunctionDef('test_case_4', arguments([Name('self', Param(), lineno=47, col_offset=20)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=48, col_offset=8), 'check', Load(), lineno=48, col_offset=8), [BinOp(Call(Name('chr', Load(), lineno=48, col_offset=19), [Num(170, lineno=48, col_offset=23)], [], None, None, lineno=48, col_offset=19), Mult(), Num(80, lineno=48, col_offset=31), lineno=48, col_offset=19), Str('4ca0ef38f1794b28a8f8ee110ee79d48ce13be25', lineno=49, col_offset=19)], [], None, None, lineno=48, col_offset=8), lineno=48, col_offset=8)], [], lineno=47, col_offset=4)], [], lineno=16, col_offset=0), FunctionDef('test_main', arguments([], None, None, []), [Expr(Call(Attribute(Name('test_support', Load(), lineno=52, col_offset=4), 'run_unittest', Load(), lineno=52, col_offset=4), [Name('SHATestCase', Load(), lineno=52, col_offset=30)], [], None, None, lineno=52, col_offset=4), lineno=52, col_offset=4)], [], lineno=51, col_offset=0), If(Compare(Name('__name__', Load(), lineno=55, col_offset=3), [Eq()], [Str('__main__', lineno=55, col_offset=15)], lineno=55, col_offset=3), [Expr(Call(Name('test_main', Load(), lineno=56, col_offset=4), [], [], None, None, lineno=56, col_offset=4), lineno=56, col_offset=4)], [], lineno=55, col_offset=0)])
