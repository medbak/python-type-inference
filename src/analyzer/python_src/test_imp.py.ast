Module([Import([alias('imp', None)], lineno=1, col_offset=0), Import([alias('unittest', None)], lineno=2, col_offset=0), ImportFrom('test', [alias('test_support', None)], 0, lineno=3, col_offset=0), ClassDef('LockTests', [Attribute(Name('unittest', Load(), lineno=6, col_offset=16), 'TestCase', Load(), lineno=6, col_offset=16)], [Expr(Str('Very basic test of import lock functions.', lineno=8, col_offset=4), lineno=8, col_offset=4), FunctionDef('verify_lock_state', arguments([Name('self', Param(), lineno=10, col_offset=26), Name('expected', Param(), lineno=10, col_offset=32)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=11, col_offset=8), 'assertEqual', Load(), lineno=11, col_offset=8), [Call(Attribute(Name('imp', Load(), lineno=11, col_offset=25), 'lock_held', Load(), lineno=11, col_offset=25), [], [], None, None, lineno=11, col_offset=25), Name('expected', Load(), lineno=11, col_offset=42), BinOp(Str('expected imp.lock_held() to be %r', lineno=12, col_offset=29), Mod(), Name('expected', Load(), lineno=12, col_offset=67), lineno=12, col_offset=29)], [], None, None, lineno=11, col_offset=8), lineno=11, col_offset=8)], [], lineno=10, col_offset=4), FunctionDef('testLock', arguments([Name('self', Param(), lineno=13, col_offset=17)], None, None, []), [Assign([Name('LOOPS', Store(), lineno=14, col_offset=8)], Num(50, lineno=14, col_offset=16), lineno=14, col_offset=8), Assign([Name('lock_held_at_start', Store(), lineno=18, col_offset=8)], Call(Attribute(Name('imp', Load(), lineno=18, col_offset=29), 'lock_held', Load(), lineno=18, col_offset=29), [], [], None, None, lineno=18, col_offset=29), lineno=18, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=19, col_offset=8), 'verify_lock_state', Load(), lineno=19, col_offset=8), [Name('lock_held_at_start', Load(), lineno=19, col_offset=31)], [], None, None, lineno=19, col_offset=8), lineno=19, col_offset=8), For(Name('i', Store(), lineno=21, col_offset=12), Call(Name('range', Load(), lineno=21, col_offset=17), [Name('LOOPS', Load(), lineno=21, col_offset=23)], [], None, None, lineno=21, col_offset=17), [Expr(Call(Attribute(Name('imp', Load(), lineno=22, col_offset=12), 'acquire_lock', Load(), lineno=22, col_offset=12), [], [], None, None, lineno=22, col_offset=12), lineno=22, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=23, col_offset=12), 'verify_lock_state', Load(), lineno=23, col_offset=12), [Name('True', Load(), lineno=23, col_offset=35)], [], None, None, lineno=23, col_offset=12), lineno=23, col_offset=12)], [], lineno=21, col_offset=8), For(Name('i', Store(), lineno=25, col_offset=12), Call(Name('range', Load(), lineno=25, col_offset=17), [Name('LOOPS', Load(), lineno=25, col_offset=23)], [], None, None, lineno=25, col_offset=17), [Expr(Call(Attribute(Name('imp', Load(), lineno=26, col_offset=12), 'release_lock', Load(), lineno=26, col_offset=12), [], [], None, None, lineno=26, col_offset=12), lineno=26, col_offset=12)], [], lineno=25, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=29, col_offset=8), 'verify_lock_state', Load(), lineno=29, col_offset=8), [Name('lock_held_at_start', Load(), lineno=29, col_offset=31)], [], None, None, lineno=29, col_offset=8), lineno=29, col_offset=8), If(UnaryOp(Not(), Name('lock_held_at_start', Load(), lineno=31, col_offset=15), lineno=31, col_offset=11), [TryExcept([Expr(Call(Attribute(Name('imp', Load(), lineno=33, col_offset=16), 'release_lock', Load(), lineno=33, col_offset=16), [], [], None, None, lineno=33, col_offset=16), lineno=33, col_offset=16)], [ExceptHandler(Name('RuntimeError', Load(), lineno=34, col_offset=19), None, [Pass( lineno=35, col_offset=16)], lineno=34, col_offset=12)], [Expr(Call(Attribute(Name('self', Load(), lineno=37, col_offset=16), 'fail', Load(), lineno=37, col_offset=16), [Str('release_lock() without lock should raise RuntimeError', lineno=37, col_offset=26)], [], None, None, lineno=37, col_offset=16), lineno=37, col_offset=16)], lineno=32, col_offset=12)], [], lineno=31, col_offset=8)], [], lineno=13, col_offset=4)], [], lineno=6, col_offset=0), ClassDef('ReloadTests', [Attribute(Name('unittest', Load(), lineno=40, col_offset=18), 'TestCase', Load(), lineno=40, col_offset=18)], [Expr(Str('Very basic tests to make sure that imp.reload() operates just like\n    reload().', lineno=43, col_offset=-1), lineno=43, col_offset=-1), FunctionDef('test_source', arguments([Name('self', Param(), lineno=45, col_offset=20)], None, None, []), [With(Call(Attribute(Name('test_support', Load(), lineno=53, col_offset=13), 'EnvironmentVarGuard', Load(), lineno=53, col_offset=13), [], [], None, None, lineno=53, col_offset=13), None, [Import([alias('os', None)], lineno=54, col_offset=12), Expr(Call(Attribute(Name('imp', Load(), lineno=55, col_offset=12), 'reload', Load(), lineno=55, col_offset=12), [Name('os', Load(), lineno=55, col_offset=23)], [], None, None, lineno=55, col_offset=12), lineno=55, col_offset=12)], lineno=53, col_offset=13)], [], lineno=45, col_offset=4), FunctionDef('test_extension', arguments([Name('self', Param(), lineno=57, col_offset=23)], None, None, []), [With(Call(Attribute(Name('test_support', Load(), lineno=58, col_offset=13), 'CleanImport', Load(), lineno=58, col_offset=13), [Str('time', lineno=58, col_offset=38)], [], None, None, lineno=58, col_offset=13), None, [Import([alias('time', None)], lineno=59, col_offset=12), Expr(Call(Attribute(Name('imp', Load(), lineno=60, col_offset=12), 'reload', Load(), lineno=60, col_offset=12), [Name('time', Load(), lineno=60, col_offset=23)], [], None, None, lineno=60, col_offset=12), lineno=60, col_offset=12)], lineno=58, col_offset=13)], [], lineno=57, col_offset=4), FunctionDef('test_builtin', arguments([Name('self', Param(), lineno=62, col_offset=21)], None, None, []), [With(Call(Attribute(Name('test_support', Load(), lineno=63, col_offset=13), 'CleanImport', Load(), lineno=63, col_offset=13), [Str('marshal', lineno=63, col_offset=38)], [], None, None, lineno=63, col_offset=13), None, [Import([alias('marshal', None)], lineno=64, col_offset=12), Expr(Call(Attribute(Name('imp', Load(), lineno=65, col_offset=12), 'reload', Load(), lineno=65, col_offset=12), [Name('marshal', Load(), lineno=65, col_offset=23)], [], None, None, lineno=65, col_offset=12), lineno=65, col_offset=12)], lineno=63, col_offset=13)], [], lineno=62, col_offset=4)], [], lineno=40, col_offset=0), FunctionDef('test_main', arguments([], None, None, []), [Assign([Name('tests', Store(), lineno=69, col_offset=4)], List([Name('ReloadTests', Load(), lineno=70, col_offset=8)], Load(), lineno=69, col_offset=12), lineno=69, col_offset=4), TryExcept([Import([alias('thread', None)], lineno=73, col_offset=8)], [ExceptHandler(Name('ImportError', Load(), lineno=74, col_offset=11), None, [Pass( lineno=75, col_offset=8)], lineno=74, col_offset=4)], [Expr(Call(Attribute(Name('tests', Load(), lineno=77, col_offset=8), 'append', Load(), lineno=77, col_offset=8), [Name('LockTests', Load(), lineno=77, col_offset=21)], [], None, None, lineno=77, col_offset=8), lineno=77, col_offset=8)], lineno=72, col_offset=4), Expr(Call(Attribute(Name('test_support', Load(), lineno=78, col_offset=4), 'run_unittest', Load(), lineno=78, col_offset=4), [], [], Name('tests', Load(), lineno=78, col_offset=31), None, lineno=78, col_offset=4), lineno=78, col_offset=4)], [], lineno=68, col_offset=0), If(Compare(Name('__name__', Load(), lineno=80, col_offset=3), [Eq()], [Str('__main__', lineno=80, col_offset=15)], lineno=80, col_offset=3), [Expr(Call(Name('test_main', Load(), lineno=81, col_offset=4), [], [], None, None, lineno=81, col_offset=4), lineno=81, col_offset=4)], [], lineno=80, col_offset=0)])
