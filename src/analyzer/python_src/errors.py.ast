Module([Expr(Str('email package exception classes.', lineno=5, col_offset=0), lineno=5, col_offset=0), ClassDef('MessageError', [Name('Exception', Load(), lineno=9, col_offset=19)], [Expr(Str('Base class for errors in the email package.', lineno=10, col_offset=4), lineno=10, col_offset=4)], [], lineno=9, col_offset=0), ClassDef('MessageParseError', [Name('MessageError', Load(), lineno=13, col_offset=24)], [Expr(Str('Base class for message parsing errors.', lineno=14, col_offset=4), lineno=14, col_offset=4)], [], lineno=13, col_offset=0), ClassDef('HeaderParseError', [Name('MessageParseError', Load(), lineno=17, col_offset=23)], [Expr(Str('Error while parsing headers.', lineno=18, col_offset=4), lineno=18, col_offset=4)], [], lineno=17, col_offset=0), ClassDef('BoundaryError', [Name('MessageParseError', Load(), lineno=21, col_offset=20)], [Expr(Str("Couldn't find terminating boundary.", lineno=22, col_offset=4), lineno=22, col_offset=4)], [], lineno=21, col_offset=0), ClassDef('MultipartConversionError', [Name('MessageError', Load(), lineno=25, col_offset=31), Name('TypeError', Load(), lineno=25, col_offset=45)], [Expr(Str('Conversion to a multipart is prohibited.', lineno=26, col_offset=4), lineno=26, col_offset=4)], [], lineno=25, col_offset=0), ClassDef('CharsetError', [Name('MessageError', Load(), lineno=29, col_offset=19)], [Expr(Str('An illegal charset was given.', lineno=30, col_offset=4), lineno=30, col_offset=4)], [], lineno=29, col_offset=0), ClassDef('MessageDefect', [], [Expr(Str('Base class for a message defect.', lineno=36, col_offset=4), lineno=36, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=38, col_offset=17), Name('line', Param(), lineno=38, col_offset=23)], None, None, [Name('None', Load(), lineno=38, col_offset=28)]), [Assign([Attribute(Name('self', Load(), lineno=39, col_offset=8), 'line', Store(), lineno=39, col_offset=8)], Name('line', Load(), lineno=39, col_offset=20), lineno=39, col_offset=8)], [], lineno=38, col_offset=4)], [], lineno=35, col_offset=0), ClassDef('NoBoundaryInMultipartDefect', [Name('MessageDefect', Load(), lineno=41, col_offset=34)], [Expr(Str('A message claimed to be a multipart but had no boundary parameter.', lineno=42, col_offset=4), lineno=42, col_offset=4)], [], lineno=41, col_offset=0), ClassDef('StartBoundaryNotFoundDefect', [Name('MessageDefect', Load(), lineno=44, col_offset=34)], [Expr(Str('The claimed start boundary was never found.', lineno=45, col_offset=4), lineno=45, col_offset=4)], [], lineno=44, col_offset=0), ClassDef('FirstHeaderLineIsContinuationDefect', [Name('MessageDefect', Load(), lineno=47, col_offset=42)], [Expr(Str('A message had a continuation line as its first header line.', lineno=48, col_offset=4), lineno=48, col_offset=4)], [], lineno=47, col_offset=0), ClassDef('MisplacedEnvelopeHeaderDefect', [Name('MessageDefect', Load(), lineno=50, col_offset=36)], [Expr(Str("A 'Unix-from' header was found in the middle of a header block.", lineno=51, col_offset=4), lineno=51, col_offset=4)], [], lineno=50, col_offset=0), ClassDef('MalformedHeaderDefect', [Name('MessageDefect', Load(), lineno=53, col_offset=28)], [Expr(Str('Found a header that was missing a colon, or was otherwise malformed.', lineno=54, col_offset=4), lineno=54, col_offset=4)], [], lineno=53, col_offset=0), ClassDef('MultipartInvariantViolationDefect', [Name('MessageDefect', Load(), lineno=56, col_offset=40)], [Expr(Str('A message claimed to be a multipart but no subparts were found.', lineno=57, col_offset=4), lineno=57, col_offset=4)], [], lineno=56, col_offset=0)])
