Module([Expr(Str('\n   Tests for commands module\n   Nick Mathewson\n', lineno=4, col_offset=-1), lineno=4, col_offset=-1), Import([alias('unittest', None)], lineno=5, col_offset=0), Import([alias('os', None), alias('tempfile', None), alias('re', None)], lineno=6, col_offset=0), ImportFrom('test.test_support', [alias('run_unittest', None), alias('reap_children', None), alias('import_module', None), alias('check_warnings', None)], 0, lineno=8, col_offset=0), Assign([Name('commands', Store(), lineno=12, col_offset=0)], Call(Name('import_module', Load(), lineno=12, col_offset=11), [Str('commands', lineno=12, col_offset=25)], [keyword('deprecated', Name('True', Load(), lineno=12, col_offset=48))], None, None, lineno=12, col_offset=11), lineno=12, col_offset=0), If(Compare(Attribute(Name('os', Load(), lineno=20, col_offset=3), 'name', Load(), lineno=20, col_offset=3), [NotEq()], [Str('posix', lineno=20, col_offset=14)], lineno=20, col_offset=3), [Raise(Call(Attribute(Name('unittest', Load(), lineno=21, col_offset=10), 'SkipTest', Load(), lineno=21, col_offset=10), [Str('Not posix; skipping test_commands', lineno=21, col_offset=28)], [], None, None, lineno=21, col_offset=10), None, None, lineno=21, col_offset=4)], [], lineno=20, col_offset=0), ClassDef('CommandTests', [Attribute(Name('unittest', Load(), lineno=24, col_offset=19), 'TestCase', Load(), lineno=24, col_offset=19)], [FunctionDef('test_getoutput', arguments([Name('self', Param(), lineno=26, col_offset=23)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=27, col_offset=8), 'assertEqual', Load(), lineno=27, col_offset=8), [Call(Attribute(Name('commands', Load(), lineno=27, col_offset=25), 'getoutput', Load(), lineno=27, col_offset=25), [Str('echo xyzzy', lineno=27, col_offset=44)], [], None, None, lineno=27, col_offset=25), Str('xyzzy', lineno=27, col_offset=59)], [], None, None, lineno=27, col_offset=8), lineno=27, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=28, col_offset=8), 'assertEqual', Load(), lineno=28, col_offset=8), [Call(Attribute(Name('commands', Load(), lineno=28, col_offset=25), 'getstatusoutput', Load(), lineno=28, col_offset=25), [Str('echo xyzzy', lineno=28, col_offset=50)], [], None, None, lineno=28, col_offset=25), Tuple([Num(0, lineno=28, col_offset=66), Str('xyzzy', lineno=28, col_offset=69)], Load(), lineno=28, col_offset=66)], [], None, None, lineno=28, col_offset=8), lineno=28, col_offset=8), Assign([Name('dir', Store(), lineno=33, col_offset=8)], Name('None', Load(), lineno=33, col_offset=14), lineno=33, col_offset=8), TryFinally([Assign([Name('dir', Store(), lineno=35, col_offset=12)], Call(Attribute(Name('tempfile', Load(), lineno=35, col_offset=18), 'mkdtemp', Load(), lineno=35, col_offset=18), [], [], None, None, lineno=35, col_offset=18), lineno=35, col_offset=12), Assign([Name('name', Store(), lineno=36, col_offset=12)], Call(Attribute(Attribute(Name('os', Load(), lineno=36, col_offset=19), 'path', Load(), lineno=36, col_offset=19), 'join', Load(), lineno=36, col_offset=19), [Name('dir', Load(), lineno=36, col_offset=32), Str('foo', lineno=36, col_offset=37)], [], None, None, lineno=36, col_offset=19), lineno=36, col_offset=12), Assign([Tuple([Name('status', Store(), lineno=38, col_offset=12), Name('output', Store(), lineno=38, col_offset=20)], Store(), lineno=38, col_offset=12)], Call(Attribute(Name('commands', Load(), lineno=38, col_offset=29), 'getstatusoutput', Load(), lineno=38, col_offset=29), [BinOp(Str('cat ', lineno=38, col_offset=54), Add(), Name('name', Load(), lineno=38, col_offset=63), lineno=38, col_offset=54)], [], None, None, lineno=38, col_offset=29), lineno=38, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=39, col_offset=12), 'assertNotEqual', Load(), lineno=39, col_offset=12), [Name('status', Load(), lineno=39, col_offset=32), Num(0, lineno=39, col_offset=40)], [], None, None, lineno=39, col_offset=12), lineno=39, col_offset=12)], [If(Compare(Name('dir', Load(), lineno=41, col_offset=15), [IsNot()], [Name('None', Load(), lineno=41, col_offset=26)], lineno=41, col_offset=15), [Expr(Call(Attribute(Name('os', Load(), lineno=42, col_offset=16), 'rmdir', Load(), lineno=42, col_offset=16), [Name('dir', Load(), lineno=42, col_offset=25)], [], None, None, lineno=42, col_offset=16), lineno=42, col_offset=16)], [], lineno=41, col_offset=12)], lineno=34, col_offset=8)], [], lineno=26, col_offset=4), FunctionDef('test_getstatus', arguments([Name('self', Param(), lineno=44, col_offset=23)], None, None, []), [Assign([Name('pat', Store(), lineno=52, col_offset=8)], Str('d.........   # It is a directory.\n                  \\+?          # It may have ACLs.\n                  \\s+\\d+       # It has some number of links.\n                  [^/]*        # Skip user, group, size, and date.\n                  /\\.          # and end with the name of the file.\n               ', lineno=57, col_offset=-1), lineno=52, col_offset=8), With(Call(Name('check_warnings', Load(), lineno=59, col_offset=13), [Tuple([Str('.*commands.getstatus.. is deprecated', lineno=59, col_offset=29), Name('DeprecationWarning', Load(), lineno=60, col_offset=29)], Load(), lineno=59, col_offset=29)], [], None, None, lineno=59, col_offset=13), None, [Expr(Call(Attribute(Name('self', Load(), lineno=61, col_offset=12), 'assertTrue', Load(), lineno=61, col_offset=12), [Call(Attribute(Name('re', Load(), lineno=61, col_offset=28), 'match', Load(), lineno=61, col_offset=28), [Name('pat', Load(), lineno=61, col_offset=37), Call(Attribute(Name('commands', Load(), lineno=61, col_offset=42), 'getstatus', Load(), lineno=61, col_offset=42), [Str('/.', lineno=61, col_offset=61)], [], None, None, lineno=61, col_offset=42), Attribute(Name('re', Load(), lineno=61, col_offset=68), 'VERBOSE', Load(), lineno=61, col_offset=68)], [], None, None, lineno=61, col_offset=28)], [], None, None, lineno=61, col_offset=12), lineno=61, col_offset=12)], lineno=59, col_offset=13)], [], lineno=44, col_offset=4)], [], lineno=24, col_offset=0), FunctionDef('test_main', arguments([], None, None, []), [Expr(Call(Name('run_unittest', Load(), lineno=65, col_offset=4), [Name('CommandTests', Load(), lineno=65, col_offset=17)], [], None, None, lineno=65, col_offset=4), lineno=65, col_offset=4), Expr(Call(Name('reap_children', Load(), lineno=66, col_offset=4), [], [], None, None, lineno=66, col_offset=4), lineno=66, col_offset=4)], [], lineno=64, col_offset=0), If(Compare(Name('__name__', Load(), lineno=69, col_offset=3), [Eq()], [Str('__main__', lineno=69, col_offset=15)], lineno=69, col_offset=3), [Expr(Call(Name('test_main', Load(), lineno=70, col_offset=4), [], [], None, None, lineno=70, col_offset=4), lineno=70, col_offset=4)], [], lineno=69, col_offset=0)])
