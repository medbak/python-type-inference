Module([ImportFrom('__future__', [alias('with_statement', None)], 0, lineno=1, col_offset=0), Import([alias('keyword', None)], lineno=3, col_offset=0), Import([alias('exceptions', None)], lineno=4, col_offset=0), Import([alias('__builtin__', None)], lineno=5, col_offset=0), ImportFrom('string', [alias('Template', None)], 0, lineno=6, col_offset=0), ImportFrom('sys', [alias('subversion', None)], 0, lineno=7, col_offset=0), Assign([Name('comment_header', Store(), lineno=9, col_offset=0)], Str('" Auto-generated Vim syntax file for Python (%s: r%s).\n"\n" To use: copy or symlink to ~/.vim/syntax/python.vim', lineno=11, col_offset=-1), lineno=9, col_offset=0), Assign([Name('statement_header', Store(), lineno=13, col_offset=0)], Str('\nif exists("b:current_syntax")\n  finish\nendif', lineno=16, col_offset=-1), lineno=13, col_offset=0), Assign([Name('statement_footer', Store(), lineno=18, col_offset=0)], Str('\n" Uncomment the \'minlines\' statement line and comment out the \'maxlines\'\n" statement line; changes behaviour to look at least 2000 lines previously for\n" syntax matches instead of at most 200 lines\nsyn sync match pythonSync grouphere NONE "):$"\nsyn sync maxlines=200\n"syn sync minlines=2000\n\nlet b:current_syntax = "python"', lineno=26, col_offset=-1), lineno=18, col_offset=0), Assign([Name('looping', Store(), lineno=28, col_offset=0)], Tuple([Str('for', lineno=28, col_offset=11), Str('while', lineno=28, col_offset=18)], Load(), lineno=28, col_offset=11), lineno=28, col_offset=0), Assign([Name('conditionals', Store(), lineno=29, col_offset=0)], Tuple([Str('if', lineno=29, col_offset=16), Str('elif', lineno=29, col_offset=22), Str('else', lineno=29, col_offset=30)], Load(), lineno=29, col_offset=16), lineno=29, col_offset=0), Assign([Name('boolean_ops', Store(), lineno=30, col_offset=0)], Tuple([Str('and', lineno=30, col_offset=15), Str('in', lineno=30, col_offset=22), Str('is', lineno=30, col_offset=28), Str('not', lineno=30, col_offset=34), Str('or', lineno=30, col_offset=41)], Load(), lineno=30, col_offset=15), lineno=30, col_offset=0), Assign([Name('import_stmts', Store(), lineno=31, col_offset=0)], Tuple([Str('import', lineno=31, col_offset=16), Str('from', lineno=31, col_offset=26)], Load(), lineno=31, col_offset=16), lineno=31, col_offset=0), Assign([Name('object_defs', Store(), lineno=32, col_offset=0)], Tuple([Str('def', lineno=32, col_offset=15), Str('class', lineno=32, col_offset=22)], Load(), lineno=32, col_offset=15), lineno=32, col_offset=0), Assign([Name('exception_names', Store(), lineno=34, col_offset=0)], Call(Name('sorted', Load(), lineno=34, col_offset=18), [GeneratorExp(Name('exc', Load(), lineno=34, col_offset=25), [comprehension(Name('exc', Store(), lineno=34, col_offset=33), Call(Name('dir', Load(), lineno=34, col_offset=40), [Name('exceptions', Load(), lineno=34, col_offset=44)], [], None, None, lineno=34, col_offset=40), [UnaryOp(Not(), Call(Attribute(Name('exc', Load(), lineno=35, col_offset=39), 'startswith', Load(), lineno=35, col_offset=39), [Str('__', lineno=35, col_offset=54)], [], None, None, lineno=35, col_offset=39), lineno=35, col_offset=35)])], lineno=34, col_offset=25)], [], None, None, lineno=34, col_offset=18), lineno=34, col_offset=0), Assign([Name('builtin_names', Store(), lineno=41, col_offset=0)], Call(Name('sorted', Load(), lineno=41, col_offset=16), [GeneratorExp(Name('builtin', Load(), lineno=41, col_offset=23), [comprehension(Name('builtin', Store(), lineno=41, col_offset=35), Call(Name('dir', Load(), lineno=41, col_offset=46), [Name('__builtin__', Load(), lineno=41, col_offset=50)], [], None, None, lineno=41, col_offset=46), [Compare(Name('builtin', Load(), lineno=42, col_offset=31), [NotIn()], [Call(Name('dir', Load(), lineno=42, col_offset=46), [Name('exceptions', Load(), lineno=42, col_offset=50)], [], None, None, lineno=42, col_offset=46)], lineno=42, col_offset=31)])], lineno=41, col_offset=23)], [], None, None, lineno=41, col_offset=16), lineno=41, col_offset=0), Assign([Name('escapes', Store(), lineno=44, col_offset=0)], Tuple([Str('+\\\\[abfnrtv\\\'"\\\\]+', lineno=44, col_offset=11), Str('"\\\\\\o\\{1,3}"', lineno=44, col_offset=34), Str('"\\\\x\\x\\{2}"', lineno=44, col_offset=51), Str('"\\(\\\\u\\x\\{4}\\|\\\\U\\x\\{8}\\)"', lineno=45, col_offset=12), Str('"\\\\$"', lineno=45, col_offset=43)], Load(), lineno=44, col_offset=11), lineno=44, col_offset=0), Assign([Name('todos', Store(), lineno=47, col_offset=0)], Tuple([Str('TODO', lineno=47, col_offset=9), Str('FIXME', lineno=47, col_offset=17), Str('XXX', lineno=47, col_offset=26)], Load(), lineno=47, col_offset=9), lineno=47, col_offset=0), Assign([Name('numbers', Store(), lineno=50, col_offset=0)], Tuple([Str('"\\<0x\\x\\+[Ll]\\=\\>"', lineno=50, col_offset=11), Str('"\\<\\d\\+[LljJ]\\=\\>"', lineno=50, col_offset=34), Str('"\\.\\d\\+\\([eE][+-]\\=\\d\\+\\)\\=[jJ]\\=\\>"', lineno=51, col_offset=12), Str('"\\<\\d\\+\\.\\([eE][+-]\\=\\d\\+\\)\\=[jJ]\\=\\>"', lineno=52, col_offset=12), Str('"\\<\\d\\+\\.\\d\\+\\([eE][+-]\\=\\d\\+\\)\\=[jJ]\\=\\>"', lineno=53, col_offset=12)], Load(), lineno=50, col_offset=11), lineno=50, col_offset=0), Assign([Name('contained', Store(), lineno=55, col_offset=0)], Lambda(arguments([Name('x', Param(), lineno=55, col_offset=19)], None, None, []), BinOp(Str('%s contained', lineno=55, col_offset=22), Mod(), Name('x', Load(), lineno=55, col_offset=39), lineno=55, col_offset=22), lineno=55, col_offset=12), lineno=55, col_offset=0), FunctionDef('str_regexes', arguments([], None, None, []), [Expr(Str('Generator to yield various combinations of strings regexes', lineno=58, col_offset=4), lineno=58, col_offset=4), Assign([Name('regex_template', Store(), lineno=59, col_offset=4)], Call(Name('Template', Load(), lineno=59, col_offset=21), [BinOp(BinOp(BinOp(BinOp(Str('matchgroup=Normal ', lineno=59, col_offset=30), Add(), Str('start=+[uU]\\=${raw}${sep}+ ', lineno=60, col_offset=32), lineno=59, col_offset=30), Add(), Str('end=+${sep}+ ', lineno=61, col_offset=32), lineno=60, col_offset=62), Add(), Str('${skip} ', lineno=62, col_offset=32), lineno=61, col_offset=48), Add(), Str('${contains}', lineno=63, col_offset=32), lineno=62, col_offset=43)], [], None, None, lineno=59, col_offset=21), lineno=59, col_offset=4), Assign([Name('skip_regex', Store(), lineno=64, col_offset=4)], Call(Name('Template', Load(), lineno=64, col_offset=17), [Str('skip=+\\\\\\\\\\|\\\\${sep}+', lineno=64, col_offset=26)], [], None, None, lineno=64, col_offset=17), lineno=64, col_offset=4), For(Name('raw', Store(), lineno=65, col_offset=8), Tuple([Str('', lineno=65, col_offset=16), Str('[rR]', lineno=65, col_offset=20)], Load(), lineno=65, col_offset=16), [For(Name('separator', Store(), lineno=66, col_offset=12), Tuple([Str("'", lineno=66, col_offset=26), Str('"', lineno=66, col_offset=31), Str('"""', lineno=66, col_offset=36), Str("'''", lineno=66, col_offset=43)], Load(), lineno=66, col_offset=26), [If(Compare(Call(Name('len', Load(), lineno=67, col_offset=15), [Name('separator', Load(), lineno=67, col_offset=19)], [], None, None, lineno=67, col_offset=15), [Eq()], [Num(1, lineno=67, col_offset=33)], lineno=67, col_offset=15), [Assign([Name('skip', Store(), lineno=68, col_offset=16)], Call(Attribute(Name('skip_regex', Load(), lineno=68, col_offset=23), 'substitute', Load(), lineno=68, col_offset=23), [], [keyword('sep', Name('separator', Load(), lineno=68, col_offset=49))], None, None, lineno=68, col_offset=23), lineno=68, col_offset=16)], [Assign([Name('skip', Store(), lineno=70, col_offset=16)], Str('', lineno=70, col_offset=23), lineno=70, col_offset=16)], lineno=67, col_offset=12), Assign([Name('contains', Store(), lineno=71, col_offset=12)], IfExp(UnaryOp(Not(), Name('raw', Load(), lineno=71, col_offset=54), lineno=71, col_offset=50), Str('contains=pythonEscape', lineno=71, col_offset=23), Str('', lineno=71, col_offset=63), lineno=71, col_offset=23), lineno=71, col_offset=12), Expr(Yield(Call(Attribute(Name('regex_template', Load(), lineno=72, col_offset=18), 'substitute', Load(), lineno=72, col_offset=18), [], [keyword('raw', Name('raw', Load(), lineno=72, col_offset=48)), keyword('sep', Name('separator', Load(), lineno=72, col_offset=57)), keyword('skip', Name('skip', Load(), lineno=72, col_offset=73)), keyword('contains', Name('contains', Load(), lineno=73, col_offset=55))], None, None, lineno=72, col_offset=18), lineno=72, col_offset=12), lineno=72, col_offset=12)], [], lineno=66, col_offset=8)], [], lineno=65, col_offset=4)], [], lineno=57, col_offset=0), Assign([Name('space_errors', Store(), lineno=75, col_offset=0)], Tuple([Str('excludenl "\\S\\s\\+$"ms=s+1', lineno=75, col_offset=16), Str('" \\+\\t"', lineno=75, col_offset=46), Str('"\\t\\+ "', lineno=75, col_offset=58)], Load(), lineno=75, col_offset=16), lineno=75, col_offset=0), Assign([Name('statements', Store(), lineno=77, col_offset=0)], Tuple([Tuple([Str('', lineno=78, col_offset=17), List([Tuple([Str('Statement', lineno=82, col_offset=22), Str('pythonStatement', lineno=82, col_offset=35), Str('keyword', lineno=82, col_offset=54), GeneratorExp(Name('kw', Load(), lineno=83, col_offset=25), [comprehension(Name('kw', Store(), lineno=83, col_offset=32), Attribute(Name('keyword', Load(), lineno=83, col_offset=38), 'kwlist', Load(), lineno=83, col_offset=38), [Compare(Name('kw', Load(), lineno=84, col_offset=31), [NotIn()], [BinOp(BinOp(BinOp(BinOp(Name('looping', Load(), lineno=84, col_offset=42), Add(), Name('conditionals', Load(), lineno=84, col_offset=52), lineno=84, col_offset=42), Add(), Name('boolean_ops', Load(), lineno=84, col_offset=67), lineno=84, col_offset=65), Add(), Name('import_stmts', Load(), lineno=85, col_offset=40), lineno=84, col_offset=79), Add(), Name('object_defs', Load(), lineno=85, col_offset=55), lineno=85, col_offset=53)], lineno=84, col_offset=31)])], lineno=83, col_offset=25)], Load(), lineno=82, col_offset=22), Tuple([Str('Statement', lineno=87, col_offset=22), Str('pythonStatement', lineno=87, col_offset=35), Str('keyword', lineno=87, col_offset=54), BinOp(Call(Attribute(Str(' ', lineno=88, col_offset=26), 'join', Load(), lineno=88, col_offset=26), [Name('object_defs', Load(), lineno=88, col_offset=35)], [], None, None, lineno=88, col_offset=26), Add(), Str(' nextgroup=pythonFunction skipwhite', lineno=89, col_offset=29), lineno=88, col_offset=26)], Load(), lineno=87, col_offset=22), Tuple([Str('Function', lineno=90, col_offset=22), Str('pythonFunction', lineno=90, col_offset=33), Str('match', lineno=90, col_offset=51), Call(Name('contained', Load(), lineno=91, col_offset=25), [Str('"[a-zA-Z_][a-zA-Z0-9_]*"', lineno=91, col_offset=35)], [], None, None, lineno=91, col_offset=25)], Load(), lineno=90, col_offset=22), Tuple([Str('Repeat', lineno=92, col_offset=22), Str('pythonRepeat', lineno=92, col_offset=32), Str('keyword', lineno=92, col_offset=48), Name('looping', Load(), lineno=92, col_offset=59)], Load(), lineno=92, col_offset=22), Tuple([Str('Conditional', lineno=93, col_offset=22), Str('pythonConditional', lineno=93, col_offset=37), Str('keyword', lineno=93, col_offset=58), Name('conditionals', Load(), lineno=94, col_offset=25)], Load(), lineno=93, col_offset=22), Tuple([Str('Operator', lineno=95, col_offset=22), Str('pythonOperator', lineno=95, col_offset=34), Str('keyword', lineno=95, col_offset=52), Name('boolean_ops', Load(), lineno=95, col_offset=63)], Load(), lineno=95, col_offset=22), Tuple([Str('PreCondit', lineno=96, col_offset=22), Str('pythonPreCondit', lineno=96, col_offset=35), Str('keyword', lineno=96, col_offset=54), Name('import_stmts', Load(), lineno=96, col_offset=65)], Load(), lineno=96, col_offset=22), Tuple([Str('Comment', lineno=97, col_offset=22), Str('pythonComment', lineno=97, col_offset=33), Str('match', lineno=97, col_offset=50), Str('"#.*$" contains=pythonTodo', lineno=98, col_offset=25)], Load(), lineno=97, col_offset=22), Tuple([Str('Todo', lineno=99, col_offset=22), Str('pythonTodo', lineno=99, col_offset=30), Str('keyword', lineno=99, col_offset=44), Call(Name('contained', Load(), lineno=100, col_offset=25), [Call(Attribute(Str(' ', lineno=100, col_offset=35), 'join', Load(), lineno=100, col_offset=35), [Name('todos', Load(), lineno=100, col_offset=44)], [], None, None, lineno=100, col_offset=35)], [], None, None, lineno=100, col_offset=25)], Load(), lineno=99, col_offset=22), Tuple([Str('String', lineno=101, col_offset=22), Str('pythonString', lineno=101, col_offset=32), Str('region', lineno=101, col_offset=48), Call(Name('str_regexes', Load(), lineno=101, col_offset=58), [], [], None, None, lineno=101, col_offset=58)], Load(), lineno=101, col_offset=22), Tuple([Str('Special', lineno=102, col_offset=22), Str('pythonEscape', lineno=102, col_offset=33), Str('match', lineno=102, col_offset=49), GeneratorExp(Call(Name('contained', Load(), lineno=103, col_offset=26), [Name('esc', Load(), lineno=103, col_offset=36)], [], None, None, lineno=103, col_offset=26), [comprehension(Name('esc', Store(), lineno=103, col_offset=45), Name('escapes', Load(), lineno=103, col_offset=52), [UnaryOp(Not(), Compare(Str('$', lineno=104, col_offset=36), [In()], [Name('esc', Load(), lineno=104, col_offset=43)], lineno=104, col_offset=36), lineno=104, col_offset=32)])], lineno=103, col_offset=26)], Load(), lineno=102, col_offset=22), Tuple([Str('Special', lineno=105, col_offset=22), Str('pythonEscape', lineno=105, col_offset=33), Str('match', lineno=105, col_offset=49), Str('"\\\\$"', lineno=105, col_offset=58)], Load(), lineno=105, col_offset=22)], Load(), lineno=82, col_offset=20)], Load(), lineno=78, col_offset=17), Tuple([Str('python_highlight_numbers', lineno=108, col_offset=17), List([Tuple([Str('Number', lineno=109, col_offset=22), Str('pythonNumber', lineno=109, col_offset=32), Str('match', lineno=109, col_offset=48), Name('numbers', Load(), lineno=109, col_offset=57)], Load(), lineno=109, col_offset=22)], Load(), lineno=109, col_offset=20)], Load(), lineno=108, col_offset=17), Tuple([Str('python_highlight_builtins', lineno=111, col_offset=17), List([Tuple([Str('Function', lineno=112, col_offset=22), Str('pythonBuiltin', lineno=112, col_offset=34), Str('keyword', lineno=112, col_offset=51), Name('builtin_names', Load(), lineno=112, col_offset=62)], Load(), lineno=112, col_offset=22)], Load(), lineno=112, col_offset=20)], Load(), lineno=111, col_offset=17), Tuple([Str('python_highlight_exceptions', lineno=114, col_offset=17), List([Tuple([Str('Exception', lineno=115, col_offset=22), Str('pythonException', lineno=115, col_offset=35), Str('keyword', lineno=115, col_offset=54), Name('exception_names', Load(), lineno=116, col_offset=24)], Load(), lineno=115, col_offset=22)], Load(), lineno=115, col_offset=20)], Load(), lineno=114, col_offset=17), Tuple([Str('python_highlight_space_errors', lineno=118, col_offset=17), List([Tuple([Str('Error', lineno=119, col_offset=22), Str('pythonSpaceError', lineno=119, col_offset=31), Str('match', lineno=119, col_offset=51), GeneratorExp(BinOp(Str('display ', lineno=120, col_offset=25), Add(), Name('err', Load(), lineno=120, col_offset=38), lineno=120, col_offset=25), [comprehension(Name('err', Store(), lineno=120, col_offset=46), Name('space_errors', Load(), lineno=120, col_offset=53), [])], lineno=120, col_offset=25)], Load(), lineno=119, col_offset=22)], Load(), lineno=119, col_offset=20)], Load(), lineno=118, col_offset=17)], Load(), lineno=78, col_offset=16), lineno=77, col_offset=0), FunctionDef('syn_prefix', arguments([Name('type_', Param(), lineno=124, col_offset=15), Name('kind', Param(), lineno=124, col_offset=22)], None, None, []), [Return(BinOp(Str('syn %s %s    ', lineno=125, col_offset=11), Mod(), Tuple([Name('type_', Load(), lineno=125, col_offset=30), Name('kind', Load(), lineno=125, col_offset=37)], Load(), lineno=125, col_offset=30), lineno=125, col_offset=11), lineno=125, col_offset=4)], [], lineno=124, col_offset=0), FunctionDef('fill_stmt', arguments([Name('iterable', Param(), lineno=127, col_offset=14), Name('fill_len', Param(), lineno=127, col_offset=24)], None, None, []), [Expr(Str("Yield a string that fills at most fill_len characters with strings\n    returned by 'iterable' and separated by a space", lineno=129, col_offset=-1), lineno=129, col_offset=-1), AugAssign(Name('fill_len', Store(), lineno=131, col_offset=4), Add(), Num(1, lineno=131, col_offset=16), lineno=131, col_offset=4), Assign([Name('overflow', Store(), lineno=132, col_offset=4)], Name('None', Load(), lineno=132, col_offset=15), lineno=132, col_offset=4), Assign([Name('it', Store(), lineno=133, col_offset=4)], Call(Name('iter', Load(), lineno=133, col_offset=9), [Name('iterable', Load(), lineno=133, col_offset=14)], [], None, None, lineno=133, col_offset=9), lineno=133, col_offset=4), While(Name('True', Load(), lineno=134, col_offset=10), [Assign([Name('buffer_', Store(), lineno=135, col_offset=8)], List([], Load(), lineno=135, col_offset=18), lineno=135, col_offset=8), Assign([Name('total_len', Store(), lineno=136, col_offset=8)], Num(0, lineno=136, col_offset=20), lineno=136, col_offset=8), If(Name('overflow', Load(), lineno=137, col_offset=11), [Expr(Call(Attribute(Name('buffer_', Load(), lineno=138, col_offset=12), 'append', Load(), lineno=138, col_offset=12), [Name('overflow', Load(), lineno=138, col_offset=27)], [], None, None, lineno=138, col_offset=12), lineno=138, col_offset=12), AugAssign(Name('total_len', Store(), lineno=139, col_offset=12), Add(), BinOp(Call(Name('len', Load(), lineno=139, col_offset=25), [Name('overflow', Load(), lineno=139, col_offset=29)], [], None, None, lineno=139, col_offset=25), Add(), Num(1, lineno=139, col_offset=41), lineno=139, col_offset=25), lineno=139, col_offset=12), Assign([Name('overflow', Store(), lineno=140, col_offset=12)], Name('None', Load(), lineno=140, col_offset=23), lineno=140, col_offset=12)], [], lineno=137, col_offset=8), While(Compare(Name('total_len', Load(), lineno=141, col_offset=14), [Lt()], [Name('fill_len', Load(), lineno=141, col_offset=26)], lineno=141, col_offset=14), [TryExcept([Assign([Name('new_item', Store(), lineno=143, col_offset=16)], Call(Attribute(Name('it', Load(), lineno=143, col_offset=27), 'next', Load(), lineno=143, col_offset=27), [], [], None, None, lineno=143, col_offset=27), lineno=143, col_offset=16), Expr(Call(Attribute(Name('buffer_', Load(), lineno=144, col_offset=16), 'append', Load(), lineno=144, col_offset=16), [Name('new_item', Load(), lineno=144, col_offset=31)], [], None, None, lineno=144, col_offset=16), lineno=144, col_offset=16), AugAssign(Name('total_len', Store(), lineno=145, col_offset=16), Add(), BinOp(Call(Name('len', Load(), lineno=145, col_offset=29), [Name('new_item', Load(), lineno=145, col_offset=33)], [], None, None, lineno=145, col_offset=29), Add(), Num(1, lineno=145, col_offset=45), lineno=145, col_offset=29), lineno=145, col_offset=16)], [ExceptHandler(Name('StopIteration', Load(), lineno=146, col_offset=19), None, [If(Name('buffer_', Load(), lineno=147, col_offset=19), [Break( lineno=148, col_offset=20)], [], lineno=147, col_offset=16), If(Name('overflow', Load(), lineno=149, col_offset=19), [Expr(Yield(Name('overflow', Load(), lineno=150, col_offset=26), lineno=150, col_offset=20), lineno=150, col_offset=20)], [], lineno=149, col_offset=16), Return(None, lineno=151, col_offset=16)], lineno=146, col_offset=12)], [], lineno=142, col_offset=12)], [], lineno=141, col_offset=8), If(Compare(Name('total_len', Load(), lineno=152, col_offset=11), [Gt()], [Name('fill_len', Load(), lineno=152, col_offset=23)], lineno=152, col_offset=11), [Assign([Name('overflow', Store(), lineno=153, col_offset=12)], Call(Attribute(Name('buffer_', Load(), lineno=153, col_offset=23), 'pop', Load(), lineno=153, col_offset=23), [], [], None, None, lineno=153, col_offset=23), lineno=153, col_offset=12), AugAssign(Name('total_len', Store(), lineno=154, col_offset=12), Sub(), BinOp(Call(Name('len', Load(), lineno=154, col_offset=25), [Name('overflow', Load(), lineno=154, col_offset=29)], [], None, None, lineno=154, col_offset=25), Sub(), Num(1, lineno=154, col_offset=41), lineno=154, col_offset=25), lineno=154, col_offset=12)], [], lineno=152, col_offset=8), Assign([Name('ret', Store(), lineno=155, col_offset=8)], Call(Attribute(Str(' ', lineno=155, col_offset=14), 'join', Load(), lineno=155, col_offset=14), [Name('buffer_', Load(), lineno=155, col_offset=23)], [], None, None, lineno=155, col_offset=14), lineno=155, col_offset=8), Assert(Compare(Call(Name('len', Load(), lineno=156, col_offset=15), [Name('ret', Load(), lineno=156, col_offset=19)], [], None, None, lineno=156, col_offset=15), [LtE()], [Name('fill_len', Load(), lineno=156, col_offset=27)], lineno=156, col_offset=15), None, lineno=156, col_offset=8), Expr(Yield(Name('ret', Load(), lineno=157, col_offset=14), lineno=157, col_offset=8), lineno=157, col_offset=8)], [], lineno=134, col_offset=4)], [], lineno=127, col_offset=0), Assign([Name('FILL', Store(), lineno=159, col_offset=0)], Num(80, lineno=159, col_offset=7), lineno=159, col_offset=0), FunctionDef('main', arguments([Name('file_path', Param(), lineno=161, col_offset=9)], None, None, []), [With(Call(Name('open', Load(), lineno=162, col_offset=9), [Name('file_path', Load(), lineno=162, col_offset=14), Str('w', lineno=162, col_offset=25)], [], None, None, lineno=162, col_offset=9), Name('FILE', Store(), lineno=162, col_offset=33), [Print(Name('FILE', Load(), lineno=164, col_offset=15), [BinOp(Name('comment_header', Load(), lineno=164, col_offset=21), Mod(), Subscript(Name('subversion', Load(), lineno=164, col_offset=38), Slice(Num(1, lineno=164, col_offset=49), None, None), Load(), lineno=164, col_offset=38), lineno=164, col_offset=21)], True, lineno=164, col_offset=8), Print(Name('FILE', Load(), lineno=165, col_offset=15), [Str('', lineno=165, col_offset=21)], True, lineno=165, col_offset=8), Print(Name('FILE', Load(), lineno=167, col_offset=15), [Name('statement_header', Load(), lineno=167, col_offset=21)], True, lineno=167, col_offset=8), Print(Name('FILE', Load(), lineno=168, col_offset=15), [Str('', lineno=168, col_offset=21)], True, lineno=168, col_offset=8), Print(Name('FILE', Load(), lineno=170, col_offset=15), [Str('if exists("python_highlight_all")', lineno=170, col_offset=21)], True, lineno=170, col_offset=8), For(Tuple([Name('statement_var', Store(), lineno=171, col_offset=12), Name('statement_parts', Store(), lineno=171, col_offset=27)], Store(), lineno=171, col_offset=12), Name('statements', Load(), lineno=171, col_offset=46), [If(Name('statement_var', Load(), lineno=172, col_offset=15), [Print(Name('FILE', Load(), lineno=173, col_offset=23), [BinOp(Str('  let %s = 1', lineno=173, col_offset=29), Mod(), Name('statement_var', Load(), lineno=173, col_offset=46), lineno=173, col_offset=29)], True, lineno=173, col_offset=16)], [], lineno=172, col_offset=12)], [Print(Name('FILE', Load(), lineno=175, col_offset=19), [Str('endif', lineno=175, col_offset=25)], True, lineno=175, col_offset=12), Print(Name('FILE', Load(), lineno=176, col_offset=19), [Str('', lineno=176, col_offset=25)], True, lineno=176, col_offset=12)], lineno=171, col_offset=8), For(Tuple([Name('statement_var', Store(), lineno=178, col_offset=12), Name('statement_parts', Store(), lineno=178, col_offset=27)], Store(), lineno=178, col_offset=12), Name('statements', Load(), lineno=178, col_offset=46), [If(Name('statement_var', Load(), lineno=179, col_offset=15), [Print(Name('FILE', Load(), lineno=180, col_offset=23), [BinOp(Str('if exists("%s")', lineno=180, col_offset=29), Mod(), Name('statement_var', Load(), lineno=180, col_offset=49), lineno=180, col_offset=29)], True, lineno=180, col_offset=16), Assign([Name('indent', Store(), lineno=181, col_offset=16)], Str('  ', lineno=181, col_offset=25), lineno=181, col_offset=16)], [Assign([Name('indent', Store(), lineno=183, col_offset=16)], Str('', lineno=183, col_offset=25), lineno=183, col_offset=16)], lineno=179, col_offset=12), For(Tuple([Name('colour_group', Store(), lineno=184, col_offset=16), Name('group', Store(), lineno=184, col_offset=30), Name('type_', Store(), lineno=184, col_offset=37), Name('arguments', Store(), lineno=184, col_offset=44)], Store(), lineno=184, col_offset=16), Name('statement_parts', Load(), lineno=184, col_offset=57), [If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=185, col_offset=23), [Name('arguments', Load(), lineno=185, col_offset=34), Name('basestring', Load(), lineno=185, col_offset=45)], [], None, None, lineno=185, col_offset=23), lineno=185, col_offset=19), [Assign([Name('prefix', Store(), lineno=186, col_offset=20)], Call(Name('syn_prefix', Load(), lineno=186, col_offset=29), [Name('type_', Load(), lineno=186, col_offset=40), Name('group', Load(), lineno=186, col_offset=47)], [], None, None, lineno=186, col_offset=29), lineno=186, col_offset=20), If(Compare(Name('type_', Load(), lineno=187, col_offset=23), [Eq()], [Str('keyword', lineno=187, col_offset=32)], lineno=187, col_offset=23), [Assign([Name('stmt_iter', Store(), lineno=188, col_offset=24)], Call(Name('fill_stmt', Load(), lineno=188, col_offset=36), [Name('arguments', Load(), lineno=188, col_offset=46), BinOp(BinOp(Name('FILL', Load(), lineno=189, col_offset=44), Sub(), Call(Name('len', Load(), lineno=189, col_offset=51), [Name('prefix', Load(), lineno=189, col_offset=55)], [], None, None, lineno=189, col_offset=51), lineno=189, col_offset=44), Sub(), Call(Name('len', Load(), lineno=189, col_offset=65), [Name('indent', Load(), lineno=189, col_offset=69)], [], None, None, lineno=189, col_offset=65), lineno=189, col_offset=63)], [], None, None, lineno=188, col_offset=36), lineno=188, col_offset=24), TryExcept([While(Name('True', Load(), lineno=191, col_offset=34), [Print(Name('FILE', Load(), lineno=192, col_offset=39), [BinOp(BinOp(Name('indent', Load(), lineno=192, col_offset=45), Add(), Name('prefix', Load(), lineno=192, col_offset=54), lineno=192, col_offset=45), Add(), Call(Attribute(Name('stmt_iter', Load(), lineno=192, col_offset=63), 'next', Load(), lineno=192, col_offset=63), [], [], None, None, lineno=192, col_offset=63), lineno=192, col_offset=61)], True, lineno=192, col_offset=32)], [], lineno=191, col_offset=28)], [ExceptHandler(Name('StopIteration', Load(), lineno=193, col_offset=31), None, [Print(Name('FILE', Load(), lineno=194, col_offset=35), [Str('', lineno=194, col_offset=41)], True, lineno=194, col_offset=28)], lineno=193, col_offset=24)], [], lineno=190, col_offset=24)], [For(Name('argument', Store(), lineno=196, col_offset=28), Name('arguments', Load(), lineno=196, col_offset=40), [Print(Name('FILE', Load(), lineno=197, col_offset=35), [BinOp(BinOp(Name('indent', Load(), lineno=197, col_offset=41), Add(), Name('prefix', Load(), lineno=197, col_offset=50), lineno=197, col_offset=41), Add(), Name('argument', Load(), lineno=197, col_offset=59), lineno=197, col_offset=57)], True, lineno=197, col_offset=28)], [Print(Name('FILE', Load(), lineno=199, col_offset=35), [Str('', lineno=199, col_offset=41)], True, lineno=199, col_offset=28)], lineno=196, col_offset=24)], lineno=187, col_offset=20)], [Print(Name('FILE', Load(), lineno=202, col_offset=27), [BinOp(BinOp(Name('indent', Load(), lineno=202, col_offset=33), Add(), Call(Name('syn_prefix', Load(), lineno=202, col_offset=42), [Name('type_', Load(), lineno=202, col_offset=53), Name('group', Load(), lineno=202, col_offset=60)], [], None, None, lineno=202, col_offset=42), lineno=202, col_offset=33), Add(), Name('arguments', Load(), lineno=202, col_offset=69), lineno=202, col_offset=67)], True, lineno=202, col_offset=20), Print(Name('FILE', Load(), lineno=203, col_offset=27), [Str('', lineno=203, col_offset=33)], True, lineno=203, col_offset=20)], lineno=185, col_offset=16)], [If(Name('statement_var', Load(), lineno=205, col_offset=19), [Print(Name('FILE', Load(), lineno=206, col_offset=27), [Str('endif', lineno=206, col_offset=33)], True, lineno=206, col_offset=20), Print(Name('FILE', Load(), lineno=207, col_offset=27), [Str('', lineno=207, col_offset=33)], True, lineno=207, col_offset=20)], [], lineno=205, col_offset=16)], lineno=184, col_offset=12), Print(Name('FILE', Load(), lineno=208, col_offset=19), [Str('', lineno=208, col_offset=25)], True, lineno=208, col_offset=12)], [], lineno=178, col_offset=8), For(Tuple([Name('statement_var', Store(), lineno=210, col_offset=12), Name('statement_parts', Store(), lineno=210, col_offset=27)], Store(), lineno=210, col_offset=12), Name('statements', Load(), lineno=210, col_offset=46), [If(Name('statement_var', Load(), lineno=211, col_offset=15), [Print(Name('FILE', Load(), lineno=212, col_offset=23), [BinOp(Str('  if exists("%s")', lineno=212, col_offset=29), Mod(), Name('statement_var', Load(), lineno=212, col_offset=51), lineno=212, col_offset=29)], True, lineno=212, col_offset=16), Assign([Name('indent', Store(), lineno=213, col_offset=16)], Str('    ', lineno=213, col_offset=25), lineno=213, col_offset=16)], [Assign([Name('indent', Store(), lineno=215, col_offset=16)], Str('  ', lineno=215, col_offset=25), lineno=215, col_offset=16)], lineno=211, col_offset=12), For(Tuple([Name('colour_group', Store(), lineno=216, col_offset=16), Name('group', Store(), lineno=216, col_offset=30), Name('type_', Store(), lineno=216, col_offset=37), Name('arguments', Store(), lineno=216, col_offset=44)], Store(), lineno=216, col_offset=16), Name('statement_parts', Load(), lineno=216, col_offset=57), [Print(Name('FILE', Load(), lineno=217, col_offset=23), [BinOp(Name('indent', Load(), lineno=217, col_offset=30), Add(), BinOp(Str('hi def link %s %s', lineno=217, col_offset=39), Mod(), Tuple([Name('group', Load(), lineno=218, col_offset=33), Name('colour_group', Load(), lineno=218, col_offset=40)], Load(), lineno=218, col_offset=33), lineno=217, col_offset=39), lineno=217, col_offset=30)], True, lineno=217, col_offset=16)], [If(Name('statement_var', Load(), lineno=220, col_offset=19), [Print(Name('FILE', Load(), lineno=221, col_offset=27), [Str('  endif', lineno=221, col_offset=33)], True, lineno=221, col_offset=20)], [], lineno=220, col_offset=16), Print(Name('FILE', Load(), lineno=222, col_offset=23), [Str('', lineno=222, col_offset=29)], True, lineno=222, col_offset=16)], lineno=216, col_offset=12)], [], lineno=210, col_offset=8), Print(Name('FILE', Load(), lineno=224, col_offset=15), [Name('statement_footer', Load(), lineno=224, col_offset=21)], True, lineno=224, col_offset=8)], lineno=162, col_offset=9)], [], lineno=161, col_offset=0), If(Compare(Name('__name__', Load(), lineno=226, col_offset=3), [Eq()], [Str('__main__', lineno=226, col_offset=15)], lineno=226, col_offset=3), [Expr(Call(Name('main', Load(), lineno=227, col_offset=4), [Str('python.vim', lineno=227, col_offset=9)], [], None, None, lineno=227, col_offset=4), lineno=227, col_offset=4)], [], lineno=226, col_offset=0)])
