Module([Import([alias('difflib', None)], lineno=1, col_offset=0), ImportFrom('test.test_support', [alias('run_unittest', None), alias('findfile', None)], 0, lineno=2, col_offset=0), Import([alias('unittest', None)], lineno=3, col_offset=0), Import([alias('doctest', None)], lineno=4, col_offset=0), Import([alias('sys', None)], lineno=5, col_offset=0), ClassDef('TestWithAscii', [Attribute(Name('unittest', Load(), lineno=8, col_offset=20), 'TestCase', Load(), lineno=8, col_offset=20)], [FunctionDef('test_one_insert', arguments([Name('self', Param(), lineno=9, col_offset=24)], None, None, []), [Assign([Name('sm', Store(), lineno=10, col_offset=8)], Call(Attribute(Name('difflib', Load(), lineno=10, col_offset=13), 'SequenceMatcher', Load(), lineno=10, col_offset=13), [Name('None', Load(), lineno=10, col_offset=37), BinOp(Str('b', lineno=10, col_offset=43), Mult(), Num(100, lineno=10, col_offset=49), lineno=10, col_offset=43), BinOp(Str('a', lineno=10, col_offset=54), Add(), BinOp(Str('b', lineno=10, col_offset=60), Mult(), Num(100, lineno=10, col_offset=66), lineno=10, col_offset=60), lineno=10, col_offset=54)], [], None, None, lineno=10, col_offset=13), lineno=10, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=11, col_offset=8), 'assertAlmostEqual', Load(), lineno=11, col_offset=8), [Call(Attribute(Name('sm', Load(), lineno=11, col_offset=31), 'ratio', Load(), lineno=11, col_offset=31), [], [], None, None, lineno=11, col_offset=31), Num(0.995, lineno=11, col_offset=43)], [keyword('places', Num(3, lineno=11, col_offset=57))], None, None, lineno=11, col_offset=8), lineno=11, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=12, col_offset=8), 'assertEqual', Load(), lineno=12, col_offset=8), [Call(Name('list', Load(), lineno=12, col_offset=25), [Call(Attribute(Name('sm', Load(), lineno=12, col_offset=30), 'get_opcodes', Load(), lineno=12, col_offset=30), [], [], None, None, lineno=12, col_offset=30)], [], None, None, lineno=12, col_offset=25), List([Tuple([Str('insert', lineno=13, col_offset=17), Num(0, lineno=13, col_offset=27), Num(0, lineno=13, col_offset=30), Num(0, lineno=13, col_offset=33), Num(1, lineno=13, col_offset=36)], Load(), lineno=13, col_offset=17), Tuple([Str('equal', lineno=14, col_offset=17), Num(0, lineno=14, col_offset=26), Num(100, lineno=14, col_offset=29), Num(1, lineno=14, col_offset=34), Num(101, lineno=14, col_offset=37)], Load(), lineno=14, col_offset=17)], Load(), lineno=13, col_offset=12)], [], None, None, lineno=12, col_offset=8), lineno=12, col_offset=8), Assign([Name('sm', Store(), lineno=15, col_offset=8)], Call(Attribute(Name('difflib', Load(), lineno=15, col_offset=13), 'SequenceMatcher', Load(), lineno=15, col_offset=13), [Name('None', Load(), lineno=15, col_offset=37), BinOp(Str('b', lineno=15, col_offset=43), Mult(), Num(100, lineno=15, col_offset=49), lineno=15, col_offset=43), BinOp(BinOp(BinOp(Str('b', lineno=15, col_offset=54), Mult(), Num(50, lineno=15, col_offset=60), lineno=15, col_offset=54), Add(), Str('a', lineno=15, col_offset=65), lineno=15, col_offset=54), Add(), BinOp(Str('b', lineno=15, col_offset=71), Mult(), Num(50, lineno=15, col_offset=77), lineno=15, col_offset=71), lineno=15, col_offset=69)], [], None, None, lineno=15, col_offset=13), lineno=15, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=16, col_offset=8), 'assertAlmostEqual', Load(), lineno=16, col_offset=8), [Call(Attribute(Name('sm', Load(), lineno=16, col_offset=31), 'ratio', Load(), lineno=16, col_offset=31), [], [], None, None, lineno=16, col_offset=31), Num(0.995, lineno=16, col_offset=43)], [keyword('places', Num(3, lineno=16, col_offset=57))], None, None, lineno=16, col_offset=8), lineno=16, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=17, col_offset=8), 'assertEqual', Load(), lineno=17, col_offset=8), [Call(Name('list', Load(), lineno=17, col_offset=25), [Call(Attribute(Name('sm', Load(), lineno=17, col_offset=30), 'get_opcodes', Load(), lineno=17, col_offset=30), [], [], None, None, lineno=17, col_offset=30)], [], None, None, lineno=17, col_offset=25), List([Tuple([Str('equal', lineno=18, col_offset=17), Num(0, lineno=18, col_offset=26), Num(50, lineno=18, col_offset=29), Num(0, lineno=18, col_offset=33), Num(50, lineno=18, col_offset=36)], Load(), lineno=18, col_offset=17), Tuple([Str('insert', lineno=19, col_offset=17), Num(50, lineno=19, col_offset=27), Num(50, lineno=19, col_offset=31), Num(50, lineno=19, col_offset=35), Num(51, lineno=19, col_offset=39)], Load(), lineno=19, col_offset=17), Tuple([Str('equal', lineno=20, col_offset=17), Num(50, lineno=20, col_offset=26), Num(100, lineno=20, col_offset=30), Num(51, lineno=20, col_offset=35), Num(101, lineno=20, col_offset=39)], Load(), lineno=20, col_offset=17)], Load(), lineno=18, col_offset=12)], [], None, None, lineno=17, col_offset=8), lineno=17, col_offset=8)], [], lineno=9, col_offset=4), FunctionDef('test_one_delete', arguments([Name('self', Param(), lineno=22, col_offset=24)], None, None, []), [Assign([Name('sm', Store(), lineno=23, col_offset=8)], Call(Attribute(Name('difflib', Load(), lineno=23, col_offset=13), 'SequenceMatcher', Load(), lineno=23, col_offset=13), [Name('None', Load(), lineno=23, col_offset=37), BinOp(BinOp(BinOp(Str('a', lineno=23, col_offset=43), Mult(), Num(40, lineno=23, col_offset=49), lineno=23, col_offset=43), Add(), Str('c', lineno=23, col_offset=54), lineno=23, col_offset=43), Add(), BinOp(Str('b', lineno=23, col_offset=60), Mult(), Num(40, lineno=23, col_offset=66), lineno=23, col_offset=60), lineno=23, col_offset=58), BinOp(BinOp(Str('a', lineno=23, col_offset=70), Mult(), Num(40, lineno=23, col_offset=76), lineno=23, col_offset=70), Add(), BinOp(Str('b', lineno=23, col_offset=81), Mult(), Num(40, lineno=23, col_offset=87), lineno=23, col_offset=81), lineno=23, col_offset=70)], [], None, None, lineno=23, col_offset=13), lineno=23, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=24, col_offset=8), 'assertAlmostEqual', Load(), lineno=24, col_offset=8), [Call(Attribute(Name('sm', Load(), lineno=24, col_offset=31), 'ratio', Load(), lineno=24, col_offset=31), [], [], None, None, lineno=24, col_offset=31), Num(0.994, lineno=24, col_offset=43)], [keyword('places', Num(3, lineno=24, col_offset=57))], None, None, lineno=24, col_offset=8), lineno=24, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=25, col_offset=8), 'assertEqual', Load(), lineno=25, col_offset=8), [Call(Name('list', Load(), lineno=25, col_offset=25), [Call(Attribute(Name('sm', Load(), lineno=25, col_offset=30), 'get_opcodes', Load(), lineno=25, col_offset=30), [], [], None, None, lineno=25, col_offset=30)], [], None, None, lineno=25, col_offset=25), List([Tuple([Str('equal', lineno=26, col_offset=17), Num(0, lineno=26, col_offset=26), Num(40, lineno=26, col_offset=29), Num(0, lineno=26, col_offset=33), Num(40, lineno=26, col_offset=36)], Load(), lineno=26, col_offset=17), Tuple([Str('delete', lineno=27, col_offset=17), Num(40, lineno=27, col_offset=27), Num(41, lineno=27, col_offset=31), Num(40, lineno=27, col_offset=35), Num(40, lineno=27, col_offset=39)], Load(), lineno=27, col_offset=17), Tuple([Str('equal', lineno=28, col_offset=17), Num(41, lineno=28, col_offset=26), Num(81, lineno=28, col_offset=30), Num(40, lineno=28, col_offset=34), Num(80, lineno=28, col_offset=38)], Load(), lineno=28, col_offset=17)], Load(), lineno=26, col_offset=12)], [], None, None, lineno=25, col_offset=8), lineno=25, col_offset=8)], [], lineno=22, col_offset=4)], [], lineno=8, col_offset=0), ClassDef('TestAutojunk', [Attribute(Name('unittest', Load(), lineno=31, col_offset=19), 'TestCase', Load(), lineno=31, col_offset=19)], [Expr(Str('Tests for the autojunk parameter added in 2.7', lineno=32, col_offset=4), lineno=32, col_offset=4), FunctionDef('test_one_insert_homogenous_sequence', arguments([Name('self', Param(), lineno=33, col_offset=44)], None, None, []), [Assign([Name('seq1', Store(), lineno=36, col_offset=8)], BinOp(Str('b', lineno=36, col_offset=15), Mult(), Num(200, lineno=36, col_offset=21), lineno=36, col_offset=15), lineno=36, col_offset=8), Assign([Name('seq2', Store(), lineno=37, col_offset=8)], BinOp(Str('a', lineno=37, col_offset=15), Add(), BinOp(Str('b', lineno=37, col_offset=21), Mult(), Num(200, lineno=37, col_offset=27), lineno=37, col_offset=21), lineno=37, col_offset=15), lineno=37, col_offset=8), Assign([Name('sm', Store(), lineno=39, col_offset=8)], Call(Attribute(Name('difflib', Load(), lineno=39, col_offset=13), 'SequenceMatcher', Load(), lineno=39, col_offset=13), [Name('None', Load(), lineno=39, col_offset=37), Name('seq1', Load(), lineno=39, col_offset=43), Name('seq2', Load(), lineno=39, col_offset=49)], [], None, None, lineno=39, col_offset=13), lineno=39, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=40, col_offset=8), 'assertAlmostEqual', Load(), lineno=40, col_offset=8), [Call(Attribute(Name('sm', Load(), lineno=40, col_offset=31), 'ratio', Load(), lineno=40, col_offset=31), [], [], None, None, lineno=40, col_offset=31), Num(0, lineno=40, col_offset=43)], [keyword('places', Num(3, lineno=40, col_offset=53))], None, None, lineno=40, col_offset=8), lineno=40, col_offset=8), Assign([Name('sm', Store(), lineno=43, col_offset=8)], Call(Attribute(Name('difflib', Load(), lineno=43, col_offset=13), 'SequenceMatcher', Load(), lineno=43, col_offset=13), [Name('None', Load(), lineno=43, col_offset=37), Name('seq1', Load(), lineno=43, col_offset=43), Name('seq2', Load(), lineno=43, col_offset=49)], [keyword('autojunk', Name('False', Load(), lineno=43, col_offset=64))], None, None, lineno=43, col_offset=13), lineno=43, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=44, col_offset=8), 'assertAlmostEqual', Load(), lineno=44, col_offset=8), [Call(Attribute(Name('sm', Load(), lineno=44, col_offset=31), 'ratio', Load(), lineno=44, col_offset=31), [], [], None, None, lineno=44, col_offset=31), Num(0.9975, lineno=44, col_offset=43)], [keyword('places', Num(3, lineno=44, col_offset=58))], None, None, lineno=44, col_offset=8), lineno=44, col_offset=8)], [], lineno=33, col_offset=4)], [], lineno=31, col_offset=0), ClassDef('TestSFbugs', [Attribute(Name('unittest', Load(), lineno=47, col_offset=17), 'TestCase', Load(), lineno=47, col_offset=17)], [FunctionDef('test_ratio_for_null_seqn', arguments([Name('self', Param(), lineno=48, col_offset=33)], None, None, []), [Assign([Name('s', Store(), lineno=50, col_offset=8)], Call(Attribute(Name('difflib', Load(), lineno=50, col_offset=12), 'SequenceMatcher', Load(), lineno=50, col_offset=12), [Name('None', Load(), lineno=50, col_offset=36), List([], Load(), lineno=50, col_offset=42), List([], Load(), lineno=50, col_offset=46)], [], None, None, lineno=50, col_offset=12), lineno=50, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=51, col_offset=8), 'assertEqual', Load(), lineno=51, col_offset=8), [Call(Attribute(Name('s', Load(), lineno=51, col_offset=25), 'ratio', Load(), lineno=51, col_offset=25), [], [], None, None, lineno=51, col_offset=25), Num(1, lineno=51, col_offset=36)], [], None, None, lineno=51, col_offset=8), lineno=51, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=52, col_offset=8), 'assertEqual', Load(), lineno=52, col_offset=8), [Call(Attribute(Name('s', Load(), lineno=52, col_offset=25), 'quick_ratio', Load(), lineno=52, col_offset=25), [], [], None, None, lineno=52, col_offset=25), Num(1, lineno=52, col_offset=42)], [], None, None, lineno=52, col_offset=8), lineno=52, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=53, col_offset=8), 'assertEqual', Load(), lineno=53, col_offset=8), [Call(Attribute(Name('s', Load(), lineno=53, col_offset=25), 'real_quick_ratio', Load(), lineno=53, col_offset=25), [], [], None, None, lineno=53, col_offset=25), Num(1, lineno=53, col_offset=47)], [], None, None, lineno=53, col_offset=8), lineno=53, col_offset=8)], [], lineno=48, col_offset=4), FunctionDef('test_comparing_empty_lists', arguments([Name('self', Param(), lineno=55, col_offset=35)], None, None, []), [Assign([Name('group_gen', Store(), lineno=57, col_offset=8)], Call(Attribute(Call(Attribute(Name('difflib', Load(), lineno=57, col_offset=20), 'SequenceMatcher', Load(), lineno=57, col_offset=20), [Name('None', Load(), lineno=57, col_offset=44), List([], Load(), lineno=57, col_offset=50), List([], Load(), lineno=57, col_offset=54)], [], None, None, lineno=57, col_offset=20), 'get_grouped_opcodes', Load(), lineno=57, col_offset=20), [], [], None, None, lineno=57, col_offset=20), lineno=57, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=58, col_offset=8), 'assertRaises', Load(), lineno=58, col_offset=8), [Name('StopIteration', Load(), lineno=58, col_offset=26), Attribute(Name('group_gen', Load(), lineno=58, col_offset=41), 'next', Load(), lineno=58, col_offset=41)], [], None, None, lineno=58, col_offset=8), lineno=58, col_offset=8), Assign([Name('diff_gen', Store(), lineno=59, col_offset=8)], Call(Attribute(Name('difflib', Load(), lineno=59, col_offset=19), 'unified_diff', Load(), lineno=59, col_offset=19), [List([], Load(), lineno=59, col_offset=40), List([], Load(), lineno=59, col_offset=44)], [], None, None, lineno=59, col_offset=19), lineno=59, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=60, col_offset=8), 'assertRaises', Load(), lineno=60, col_offset=8), [Name('StopIteration', Load(), lineno=60, col_offset=26), Attribute(Name('diff_gen', Load(), lineno=60, col_offset=41), 'next', Load(), lineno=60, col_offset=41)], [], None, None, lineno=60, col_offset=8), lineno=60, col_offset=8)], [], lineno=55, col_offset=4), FunctionDef('test_added_tab_hint', arguments([Name('self', Param(), lineno=62, col_offset=28)], None, None, []), [Assign([Name('diff', Store(), lineno=64, col_offset=8)], Call(Name('list', Load(), lineno=64, col_offset=15), [Call(Attribute(Call(Attribute(Name('difflib', Load(), lineno=64, col_offset=20), 'Differ', Load(), lineno=64, col_offset=20), [], [], None, None, lineno=64, col_offset=20), 'compare', Load(), lineno=64, col_offset=20), [List([Str('\tI am a buggy', lineno=64, col_offset=46)], Load(), lineno=64, col_offset=45), List([Str('\t\tI am a bug', lineno=64, col_offset=65)], Load(), lineno=64, col_offset=64)], [], None, None, lineno=64, col_offset=20)], [], None, None, lineno=64, col_offset=15), lineno=64, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=65, col_offset=8), 'assertEqual', Load(), lineno=65, col_offset=8), [Str('- \tI am a buggy', lineno=65, col_offset=25), Subscript(Name('diff', Load(), lineno=65, col_offset=45), Index(Num(0, lineno=65, col_offset=50)), Load(), lineno=65, col_offset=45)], [], None, None, lineno=65, col_offset=8), lineno=65, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=66, col_offset=8), 'assertEqual', Load(), lineno=66, col_offset=8), [Str('?            --\n', lineno=66, col_offset=25), Subscript(Name('diff', Load(), lineno=66, col_offset=46), Index(Num(1, lineno=66, col_offset=51)), Load(), lineno=66, col_offset=46)], [], None, None, lineno=66, col_offset=8), lineno=66, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=67, col_offset=8), 'assertEqual', Load(), lineno=67, col_offset=8), [Str('+ \t\tI am a bug', lineno=67, col_offset=25), Subscript(Name('diff', Load(), lineno=67, col_offset=45), Index(Num(2, lineno=67, col_offset=50)), Load(), lineno=67, col_offset=45)], [], None, None, lineno=67, col_offset=8), lineno=67, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=68, col_offset=8), 'assertEqual', Load(), lineno=68, col_offset=8), [Str('? +\n', lineno=68, col_offset=25), Subscript(Name('diff', Load(), lineno=68, col_offset=34), Index(Num(3, lineno=68, col_offset=39)), Load(), lineno=68, col_offset=34)], [], None, None, lineno=68, col_offset=8), lineno=68, col_offset=8)], [], lineno=62, col_offset=4)], [], lineno=47, col_offset=0), Assign([Name('patch914575_from1', Store(), lineno=70, col_offset=0)], Str('\n   1. Beautiful is beTTer than ugly.\n   2. Explicit is better than implicit.\n   3. Simple is better than complex.\n   4. Complex is better than complicated.\n', lineno=75, col_offset=-1), lineno=70, col_offset=0), Assign([Name('patch914575_to1', Store(), lineno=77, col_offset=0)], Str('\n   1. Beautiful is better than ugly.\n   3.   Simple is better than complex.\n   4. Complicated is better than complex.\n   5. Flat is better than nested.\n', lineno=82, col_offset=-1), lineno=77, col_offset=0), Assign([Name('patch914575_from2', Store(), lineno=84, col_offset=0)], Str('\n\t\tLine 1: preceeded by from:[tt] to:[ssss]\n  \t\tLine 2: preceeded by from:[sstt] to:[sssst]\n  \t \tLine 3: preceeded by from:[sstst] to:[ssssss]\nLine 4:  \thas from:[sst] to:[sss] after :\nLine 5: has from:[t] to:[ss] at end\t\n', lineno=90, col_offset=-1), lineno=84, col_offset=0), Assign([Name('patch914575_to2', Store(), lineno=92, col_offset=0)], Str('\n    Line 1: preceeded by from:[tt] to:[ssss]\n    \tLine 2: preceeded by from:[sstt] to:[sssst]\n      Line 3: preceeded by from:[sstst] to:[ssssss]\nLine 4:   has from:[sst] to:[sss] after :\nLine 5: has from:[t] to:[ss] at end\n', lineno=98, col_offset=-1), lineno=92, col_offset=0), Assign([Name('patch914575_from3', Store(), lineno=100, col_offset=0)], Str('line 0\n1234567890123456789012345689012345\nline 1\nline 2\nline 3\nline 4   changed\nline 5   changed\nline 6   changed\nline 7\nline 8  subtracted\nline 9\n1234567890123456789012345689012345\nshort line\njust fits in!!\njust fits in two lines yup!!\nthe end', lineno=115, col_offset=-1), lineno=100, col_offset=0), Assign([Name('patch914575_to3', Store(), lineno=117, col_offset=0)], Str('line 0\n1234567890123456789012345689012345\nline 1\nline 2    added\nline 3\nline 4   chanGEd\nline 5a  chanGed\nline 6a  changEd\nline 7\nline 8\nline 9\n1234567890\nanother long line that needs to be wrapped\njust fitS in!!\njust fits in two lineS yup!!\nthe end', lineno=132, col_offset=-1), lineno=117, col_offset=0), ClassDef('TestSFpatches', [Attribute(Name('unittest', Load(), lineno=134, col_offset=20), 'TestCase', Load(), lineno=134, col_offset=20)], [FunctionDef('test_html_diff', arguments([Name('self', Param(), lineno=136, col_offset=23)], None, None, []), [Assign([Name('f1a', Store(), lineno=138, col_offset=8)], BinOp(BinOp(Name('patch914575_from1', Load(), lineno=138, col_offset=16), Add(), BinOp(Str('123\n', lineno=138, col_offset=36), Mult(), Num(10, lineno=138, col_offset=44), lineno=138, col_offset=36), lineno=138, col_offset=16), Mult(), Num(3, lineno=138, col_offset=48), lineno=138, col_offset=15), lineno=138, col_offset=8), Assign([Name('t1a', Store(), lineno=139, col_offset=8)], BinOp(BinOp(Name('patch914575_to1', Load(), lineno=139, col_offset=15), Add(), BinOp(Str('123\n', lineno=139, col_offset=33), Mult(), Num(10, lineno=139, col_offset=41), lineno=139, col_offset=33), lineno=139, col_offset=15), Mult(), Num(3, lineno=139, col_offset=45), lineno=139, col_offset=14), lineno=139, col_offset=8), Assign([Name('f1b', Store(), lineno=140, col_offset=8)], BinOp(BinOp(Str('456\n', lineno=140, col_offset=14), Mult(), Num(10, lineno=140, col_offset=22), lineno=140, col_offset=14), Add(), Name('f1a', Load(), lineno=140, col_offset=27), lineno=140, col_offset=14), lineno=140, col_offset=8), Assign([Name('t1b', Store(), lineno=141, col_offset=8)], BinOp(BinOp(Str('456\n', lineno=141, col_offset=14), Mult(), Num(10, lineno=141, col_offset=22), lineno=141, col_offset=14), Add(), Name('t1a', Load(), lineno=141, col_offset=27), lineno=141, col_offset=14), lineno=141, col_offset=8), Assign([Name('f1a', Store(), lineno=142, col_offset=8)], Call(Attribute(Name('f1a', Load(), lineno=142, col_offset=14), 'splitlines', Load(), lineno=142, col_offset=14), [], [], None, None, lineno=142, col_offset=14), lineno=142, col_offset=8), Assign([Name('t1a', Store(), lineno=143, col_offset=8)], Call(Attribute(Name('t1a', Load(), lineno=143, col_offset=14), 'splitlines', Load(), lineno=143, col_offset=14), [], [], None, None, lineno=143, col_offset=14), lineno=143, col_offset=8), Assign([Name('f1b', Store(), lineno=144, col_offset=8)], Call(Attribute(Name('f1b', Load(), lineno=144, col_offset=14), 'splitlines', Load(), lineno=144, col_offset=14), [], [], None, None, lineno=144, col_offset=14), lineno=144, col_offset=8), Assign([Name('t1b', Store(), lineno=145, col_offset=8)], Call(Attribute(Name('t1b', Load(), lineno=145, col_offset=14), 'splitlines', Load(), lineno=145, col_offset=14), [], [], None, None, lineno=145, col_offset=14), lineno=145, col_offset=8), Assign([Name('f2', Store(), lineno=146, col_offset=8)], Call(Attribute(Name('patch914575_from2', Load(), lineno=146, col_offset=13), 'splitlines', Load(), lineno=146, col_offset=13), [], [], None, None, lineno=146, col_offset=13), lineno=146, col_offset=8), Assign([Name('t2', Store(), lineno=147, col_offset=8)], Call(Attribute(Name('patch914575_to2', Load(), lineno=147, col_offset=13), 'splitlines', Load(), lineno=147, col_offset=13), [], [], None, None, lineno=147, col_offset=13), lineno=147, col_offset=8), Assign([Name('f3', Store(), lineno=148, col_offset=8)], Name('patch914575_from3', Load(), lineno=148, col_offset=13), lineno=148, col_offset=8), Assign([Name('t3', Store(), lineno=149, col_offset=8)], Name('patch914575_to3', Load(), lineno=149, col_offset=13), lineno=149, col_offset=8), Assign([Name('i', Store(), lineno=150, col_offset=8)], Call(Attribute(Name('difflib', Load(), lineno=150, col_offset=12), 'HtmlDiff', Load(), lineno=150, col_offset=12), [], [], None, None, lineno=150, col_offset=12), lineno=150, col_offset=8), Assign([Name('j', Store(), lineno=151, col_offset=8)], Call(Attribute(Name('difflib', Load(), lineno=151, col_offset=12), 'HtmlDiff', Load(), lineno=151, col_offset=12), [], [keyword('tabsize', Num(2, lineno=151, col_offset=37))], None, None, lineno=151, col_offset=12), lineno=151, col_offset=8), Assign([Name('k', Store(), lineno=152, col_offset=8)], Call(Attribute(Name('difflib', Load(), lineno=152, col_offset=12), 'HtmlDiff', Load(), lineno=152, col_offset=12), [], [keyword('wrapcolumn', Num(14, lineno=152, col_offset=40))], None, None, lineno=152, col_offset=12), lineno=152, col_offset=8), Assign([Name('full', Store(), lineno=154, col_offset=8)], Call(Attribute(Name('i', Load(), lineno=154, col_offset=15), 'make_file', Load(), lineno=154, col_offset=15), [Name('f1a', Load(), lineno=154, col_offset=27), Name('t1a', Load(), lineno=154, col_offset=31), Str('from', lineno=154, col_offset=35), Str('to', lineno=154, col_offset=42)], [keyword('context', Name('False', Load(), lineno=154, col_offset=55)), keyword('numlines', Num(5, lineno=154, col_offset=70))], None, None, lineno=154, col_offset=15), lineno=154, col_offset=8), Assign([Name('tables', Store(), lineno=155, col_offset=8)], Call(Attribute(Str('\n', lineno=155, col_offset=17), 'join', Load(), lineno=155, col_offset=17), [List([Str('<h2>Context (first diff within numlines=5(default))</h2>', lineno=157, col_offset=13), Call(Attribute(Name('i', Load(), lineno=158, col_offset=13), 'make_table', Load(), lineno=158, col_offset=13), [Name('f1a', Load(), lineno=158, col_offset=26), Name('t1a', Load(), lineno=158, col_offset=30), Str('from', lineno=158, col_offset=34), Str('to', lineno=158, col_offset=41)], [keyword('context', Name('True', Load(), lineno=158, col_offset=54))], None, None, lineno=158, col_offset=13), Str('<h2>Context (first diff after numlines=5(default))</h2>', lineno=159, col_offset=13), Call(Attribute(Name('i', Load(), lineno=160, col_offset=13), 'make_table', Load(), lineno=160, col_offset=13), [Name('f1b', Load(), lineno=160, col_offset=26), Name('t1b', Load(), lineno=160, col_offset=30), Str('from', lineno=160, col_offset=34), Str('to', lineno=160, col_offset=41)], [keyword('context', Name('True', Load(), lineno=160, col_offset=54))], None, None, lineno=160, col_offset=13), Str('<h2>Context (numlines=6)</h2>', lineno=161, col_offset=13), Call(Attribute(Name('i', Load(), lineno=162, col_offset=13), 'make_table', Load(), lineno=162, col_offset=13), [Name('f1a', Load(), lineno=162, col_offset=26), Name('t1a', Load(), lineno=162, col_offset=30), Str('from', lineno=162, col_offset=34), Str('to', lineno=162, col_offset=41)], [keyword('context', Name('True', Load(), lineno=162, col_offset=54)), keyword('numlines', Num(6, lineno=162, col_offset=68))], None, None, lineno=162, col_offset=13), Str('<h2>Context (numlines=0)</h2>', lineno=163, col_offset=13), Call(Attribute(Name('i', Load(), lineno=164, col_offset=13), 'make_table', Load(), lineno=164, col_offset=13), [Name('f1a', Load(), lineno=164, col_offset=26), Name('t1a', Load(), lineno=164, col_offset=30), Str('from', lineno=164, col_offset=34), Str('to', lineno=164, col_offset=41)], [keyword('context', Name('True', Load(), lineno=164, col_offset=54)), keyword('numlines', Num(0, lineno=164, col_offset=68))], None, None, lineno=164, col_offset=13), Str('<h2>Same Context</h2>', lineno=165, col_offset=13), Call(Attribute(Name('i', Load(), lineno=166, col_offset=13), 'make_table', Load(), lineno=166, col_offset=13), [Name('f1a', Load(), lineno=166, col_offset=26), Name('f1a', Load(), lineno=166, col_offset=30), Str('from', lineno=166, col_offset=34), Str('to', lineno=166, col_offset=41)], [keyword('context', Name('True', Load(), lineno=166, col_offset=54))], None, None, lineno=166, col_offset=13), Str('<h2>Same Full</h2>', lineno=167, col_offset=13), Call(Attribute(Name('i', Load(), lineno=168, col_offset=13), 'make_table', Load(), lineno=168, col_offset=13), [Name('f1a', Load(), lineno=168, col_offset=26), Name('f1a', Load(), lineno=168, col_offset=30), Str('from', lineno=168, col_offset=34), Str('to', lineno=168, col_offset=41)], [keyword('context', Name('False', Load(), lineno=168, col_offset=54))], None, None, lineno=168, col_offset=13), Str('<h2>Empty Context</h2>', lineno=169, col_offset=13), Call(Attribute(Name('i', Load(), lineno=170, col_offset=13), 'make_table', Load(), lineno=170, col_offset=13), [List([], Load(), lineno=170, col_offset=26), List([], Load(), lineno=170, col_offset=29), Str('from', lineno=170, col_offset=32), Str('to', lineno=170, col_offset=39)], [keyword('context', Name('True', Load(), lineno=170, col_offset=52))], None, None, lineno=170, col_offset=13), Str('<h2>Empty Full</h2>', lineno=171, col_offset=13), Call(Attribute(Name('i', Load(), lineno=172, col_offset=13), 'make_table', Load(), lineno=172, col_offset=13), [List([], Load(), lineno=172, col_offset=26), List([], Load(), lineno=172, col_offset=29), Str('from', lineno=172, col_offset=32), Str('to', lineno=172, col_offset=39)], [keyword('context', Name('False', Load(), lineno=172, col_offset=52))], None, None, lineno=172, col_offset=13), Str('<h2>tabsize=2</h2>', lineno=173, col_offset=13), Call(Attribute(Name('j', Load(), lineno=174, col_offset=13), 'make_table', Load(), lineno=174, col_offset=13), [Name('f2', Load(), lineno=174, col_offset=26), Name('t2', Load(), lineno=174, col_offset=29)], [], None, None, lineno=174, col_offset=13), Str('<h2>tabsize=default</h2>', lineno=175, col_offset=13), Call(Attribute(Name('i', Load(), lineno=176, col_offset=13), 'make_table', Load(), lineno=176, col_offset=13), [Name('f2', Load(), lineno=176, col_offset=26), Name('t2', Load(), lineno=176, col_offset=29)], [], None, None, lineno=176, col_offset=13), Str('<h2>Context (wrapcolumn=14,numlines=0)</h2>', lineno=177, col_offset=13), Call(Attribute(Name('k', Load(), lineno=178, col_offset=13), 'make_table', Load(), lineno=178, col_offset=13), [Call(Attribute(Name('f3', Load(), lineno=178, col_offset=26), 'splitlines', Load(), lineno=178, col_offset=26), [], [], None, None, lineno=178, col_offset=26), Call(Attribute(Name('t3', Load(), lineno=178, col_offset=42), 'splitlines', Load(), lineno=178, col_offset=42), [], [], None, None, lineno=178, col_offset=42)], [keyword('context', Name('True', Load(), lineno=178, col_offset=66)), keyword('numlines', Num(0, lineno=178, col_offset=80))], None, None, lineno=178, col_offset=13), Str('<h2>wrapcolumn=14,splitlines()</h2>', lineno=179, col_offset=13), Call(Attribute(Name('k', Load(), lineno=180, col_offset=13), 'make_table', Load(), lineno=180, col_offset=13), [Call(Attribute(Name('f3', Load(), lineno=180, col_offset=26), 'splitlines', Load(), lineno=180, col_offset=26), [], [], None, None, lineno=180, col_offset=26), Call(Attribute(Name('t3', Load(), lineno=180, col_offset=42), 'splitlines', Load(), lineno=180, col_offset=42), [], [], None, None, lineno=180, col_offset=42)], [], None, None, lineno=180, col_offset=13), Str('<h2>wrapcolumn=14,splitlines(True)</h2>', lineno=181, col_offset=13), Call(Attribute(Name('k', Load(), lineno=182, col_offset=13), 'make_table', Load(), lineno=182, col_offset=13), [Call(Attribute(Name('f3', Load(), lineno=182, col_offset=26), 'splitlines', Load(), lineno=182, col_offset=26), [Name('True', Load(), lineno=182, col_offset=40)], [], None, None, lineno=182, col_offset=26), Call(Attribute(Name('t3', Load(), lineno=182, col_offset=46), 'splitlines', Load(), lineno=182, col_offset=46), [Name('True', Load(), lineno=182, col_offset=60)], [], None, None, lineno=182, col_offset=46)], [], None, None, lineno=182, col_offset=13)], Load(), lineno=156, col_offset=12)], [], None, None, lineno=155, col_offset=17), lineno=155, col_offset=8), Assign([Name('actual', Store(), lineno=184, col_offset=8)], Call(Attribute(Name('full', Load(), lineno=184, col_offset=17), 'replace', Load(), lineno=184, col_offset=17), [Str('</body>', lineno=184, col_offset=30), BinOp(Str('\n%s\n</body>', lineno=184, col_offset=40), Mod(), Name('tables', Load(), lineno=184, col_offset=58), lineno=184, col_offset=40)], [], None, None, lineno=184, col_offset=17), lineno=184, col_offset=8), With(Call(Name('open', Load(), lineno=190, col_offset=13), [Call(Name('findfile', Load(), lineno=190, col_offset=18), [Str('test_difflib_expect.html', lineno=190, col_offset=27)], [], None, None, lineno=190, col_offset=18)], [], None, None, lineno=190, col_offset=13), Name('fp', Store(), lineno=190, col_offset=59), [Expr(Call(Attribute(Name('self', Load(), lineno=191, col_offset=12), 'assertEqual', Load(), lineno=191, col_offset=12), [Name('actual', Load(), lineno=191, col_offset=29), Call(Attribute(Name('fp', Load(), lineno=191, col_offset=37), 'read', Load(), lineno=191, col_offset=37), [], [], None, None, lineno=191, col_offset=37)], [], None, None, lineno=191, col_offset=12), lineno=191, col_offset=12)], lineno=190, col_offset=13)], [], lineno=136, col_offset=4), FunctionDef('test_recursion_limit', arguments([Name('self', Param(), lineno=193, col_offset=29)], None, None, []), [Assign([Name('limit', Store(), lineno=195, col_offset=8)], Call(Attribute(Name('sys', Load(), lineno=195, col_offset=16), 'getrecursionlimit', Load(), lineno=195, col_offset=16), [], [], None, None, lineno=195, col_offset=16), lineno=195, col_offset=8), Assign([Name('old', Store(), lineno=196, col_offset=8)], ListComp(BinOp(BoolOp(Or(), [BoolOp(And(), [BinOp(Name('i', Load(), lineno=196, col_offset=16), Mod(), Num(2, lineno=196, col_offset=18), lineno=196, col_offset=16), Str('K:%d', lineno=196, col_offset=24)], lineno=196, col_offset=16), Str('V:A:%d', lineno=196, col_offset=34)], lineno=196, col_offset=16), Mod(), Name('i', Load(), lineno=196, col_offset=46), lineno=196, col_offset=15), [comprehension(Name('i', Store(), lineno=196, col_offset=52), Call(Name('range', Load(), lineno=196, col_offset=57), [BinOp(Name('limit', Load(), lineno=196, col_offset=63), Mult(), Num(2, lineno=196, col_offset=69), lineno=196, col_offset=63)], [], None, None, lineno=196, col_offset=57), [])], lineno=196, col_offset=15), lineno=196, col_offset=8), Assign([Name('new', Store(), lineno=197, col_offset=8)], ListComp(BinOp(BoolOp(Or(), [BoolOp(And(), [BinOp(Name('i', Load(), lineno=197, col_offset=16), Mod(), Num(2, lineno=197, col_offset=18), lineno=197, col_offset=16), Str('K:%d', lineno=197, col_offset=24)], lineno=197, col_offset=16), Str('V:B:%d', lineno=197, col_offset=34)], lineno=197, col_offset=16), Mod(), Name('i', Load(), lineno=197, col_offset=46), lineno=197, col_offset=15), [comprehension(Name('i', Store(), lineno=197, col_offset=52), Call(Name('range', Load(), lineno=197, col_offset=57), [BinOp(Name('limit', Load(), lineno=197, col_offset=63), Mult(), Num(2, lineno=197, col_offset=69), lineno=197, col_offset=63)], [], None, None, lineno=197, col_offset=57), [])], lineno=197, col_offset=15), lineno=197, col_offset=8), Expr(Call(Attribute(Call(Attribute(Name('difflib', Load(), lineno=198, col_offset=8), 'SequenceMatcher', Load(), lineno=198, col_offset=8), [Name('None', Load(), lineno=198, col_offset=32), Name('old', Load(), lineno=198, col_offset=38), Name('new', Load(), lineno=198, col_offset=43)], [], None, None, lineno=198, col_offset=8), 'get_opcodes', Load(), lineno=198, col_offset=8), [], [], None, None, lineno=198, col_offset=8), lineno=198, col_offset=8)], [], lineno=193, col_offset=4)], [], lineno=134, col_offset=0), ClassDef('TestOutputFormat', [Attribute(Name('unittest', Load(), lineno=201, col_offset=23), 'TestCase', Load(), lineno=201, col_offset=23)], [FunctionDef('test_tab_delimiter', arguments([Name('self', Param(), lineno=202, col_offset=27)], None, None, []), [Assign([Name('args', Store(), lineno=203, col_offset=8)], List([Str('one', lineno=203, col_offset=16), Str('two', lineno=203, col_offset=23), Str('Original', lineno=203, col_offset=30), Str('Current', lineno=203, col_offset=42), Str('2005-01-26 23:30:50', lineno=204, col_offset=12), Str('2010-04-02 10:20:52', lineno=204, col_offset=35)], Load(), lineno=203, col_offset=15), lineno=203, col_offset=8), Assign([Name('ud', Store(), lineno=205, col_offset=8)], Call(Attribute(Name('difflib', Load(), lineno=205, col_offset=13), 'unified_diff', Load(), lineno=205, col_offset=13), [], [keyword('lineterm', Str('', lineno=205, col_offset=50))], Name('args', Load(), lineno=205, col_offset=35), None, lineno=205, col_offset=13), lineno=205, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=206, col_offset=8), 'assertEqual', Load(), lineno=206, col_offset=8), [Subscript(Call(Name('list', Load(), lineno=206, col_offset=25), [Name('ud', Load(), lineno=206, col_offset=30)], [], None, None, lineno=206, col_offset=25), Slice(Num(0, lineno=206, col_offset=34), Num(2, lineno=206, col_offset=36), None), Load(), lineno=206, col_offset=25), List([Str('--- Original\t2005-01-26 23:30:50', lineno=207, col_offset=27), Str('+++ Current\t2010-04-02 10:20:52', lineno=208, col_offset=27)], Load(), lineno=206, col_offset=40)], [], None, None, lineno=206, col_offset=8), lineno=206, col_offset=8), Assign([Name('cd', Store(), lineno=209, col_offset=8)], Call(Attribute(Name('difflib', Load(), lineno=209, col_offset=13), 'context_diff', Load(), lineno=209, col_offset=13), [], [keyword('lineterm', Str('', lineno=209, col_offset=50))], Name('args', Load(), lineno=209, col_offset=35), None, lineno=209, col_offset=13), lineno=209, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=210, col_offset=8), 'assertEqual', Load(), lineno=210, col_offset=8), [Subscript(Call(Name('list', Load(), lineno=210, col_offset=25), [Name('cd', Load(), lineno=210, col_offset=30)], [], None, None, lineno=210, col_offset=25), Slice(Num(0, lineno=210, col_offset=34), Num(2, lineno=210, col_offset=36), None), Load(), lineno=210, col_offset=25), List([Str('*** Original\t2005-01-26 23:30:50', lineno=211, col_offset=27), Str('--- Current\t2010-04-02 10:20:52', lineno=212, col_offset=27)], Load(), lineno=210, col_offset=40)], [], None, None, lineno=210, col_offset=8), lineno=210, col_offset=8)], [], lineno=202, col_offset=4), FunctionDef('test_no_trailing_tab_on_empty_filedate', arguments([Name('self', Param(), lineno=214, col_offset=47)], None, None, []), [Assign([Name('args', Store(), lineno=215, col_offset=8)], List([Str('one', lineno=215, col_offset=16), Str('two', lineno=215, col_offset=23), Str('Original', lineno=215, col_offset=30), Str('Current', lineno=215, col_offset=42)], Load(), lineno=215, col_offset=15), lineno=215, col_offset=8), Assign([Name('ud', Store(), lineno=216, col_offset=8)], Call(Attribute(Name('difflib', Load(), lineno=216, col_offset=13), 'unified_diff', Load(), lineno=216, col_offset=13), [], [keyword('lineterm', Str('', lineno=216, col_offset=50))], Name('args', Load(), lineno=216, col_offset=35), None, lineno=216, col_offset=13), lineno=216, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=217, col_offset=8), 'assertEqual', Load(), lineno=217, col_offset=8), [Subscript(Call(Name('list', Load(), lineno=217, col_offset=25), [Name('ud', Load(), lineno=217, col_offset=30)], [], None, None, lineno=217, col_offset=25), Slice(Num(0, lineno=217, col_offset=34), Num(2, lineno=217, col_offset=36), None), Load(), lineno=217, col_offset=25), List([Str('--- Original', lineno=217, col_offset=41), Str('+++ Current', lineno=217, col_offset=57)], Load(), lineno=217, col_offset=40)], [], None, None, lineno=217, col_offset=8), lineno=217, col_offset=8), Assign([Name('cd', Store(), lineno=219, col_offset=8)], Call(Attribute(Name('difflib', Load(), lineno=219, col_offset=13), 'context_diff', Load(), lineno=219, col_offset=13), [], [keyword('lineterm', Str('', lineno=219, col_offset=50))], Name('args', Load(), lineno=219, col_offset=35), None, lineno=219, col_offset=13), lineno=219, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=220, col_offset=8), 'assertEqual', Load(), lineno=220, col_offset=8), [Subscript(Call(Name('list', Load(), lineno=220, col_offset=25), [Name('cd', Load(), lineno=220, col_offset=30)], [], None, None, lineno=220, col_offset=25), Slice(Num(0, lineno=220, col_offset=34), Num(2, lineno=220, col_offset=36), None), Load(), lineno=220, col_offset=25), List([Str('*** Original', lineno=220, col_offset=41), Str('--- Current', lineno=220, col_offset=57)], Load(), lineno=220, col_offset=40)], [], None, None, lineno=220, col_offset=8), lineno=220, col_offset=8)], [], lineno=214, col_offset=4)], [], lineno=201, col_offset=0), FunctionDef('test_main', arguments([], None, None, []), [Assign([Attribute(Attribute(Name('difflib', Load(), lineno=224, col_offset=4), 'HtmlDiff', Load(), lineno=224, col_offset=4), '_default_prefix', Store(), lineno=224, col_offset=4)], Num(0, lineno=224, col_offset=39), lineno=224, col_offset=4), Assign([Name('Doctests', Store(), lineno=225, col_offset=4)], Call(Attribute(Name('doctest', Load(), lineno=225, col_offset=15), 'DocTestSuite', Load(), lineno=225, col_offset=15), [Name('difflib', Load(), lineno=225, col_offset=36)], [], None, None, lineno=225, col_offset=15), lineno=225, col_offset=4), Expr(Call(Name('run_unittest', Load(), lineno=226, col_offset=4), [Name('TestWithAscii', Load(), lineno=227, col_offset=8), Name('TestAutojunk', Load(), lineno=227, col_offset=23), Name('TestSFpatches', Load(), lineno=227, col_offset=37), Name('TestSFbugs', Load(), lineno=227, col_offset=52), Name('TestOutputFormat', Load(), lineno=228, col_offset=8), Name('Doctests', Load(), lineno=228, col_offset=26)], [], None, None, lineno=226, col_offset=4), lineno=226, col_offset=4)], [], lineno=223, col_offset=0), If(Compare(Name('__name__', Load(), lineno=230, col_offset=3), [Eq()], [Str('__main__', lineno=230, col_offset=15)], lineno=230, col_offset=3), [Expr(Call(Name('test_main', Load(), lineno=231, col_offset=4), [], [], None, None, lineno=231, col_offset=4), lineno=231, col_offset=4)], [], lineno=230, col_offset=0)])
