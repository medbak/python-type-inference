Module([Expr(Str('Support for regular expressions (RE).\n\nThis module provides regular expression matching operations similar to\nthose found in Perl.  It supports both 8-bit and Unicode strings; both\nthe pattern and the strings being processed can contain null bytes and\ncharacters outside the US ASCII range.\n\nRegular expressions can contain both special and ordinary characters.\nMost ordinary characters, like "A", "a", or "0", are the simplest\nregular expressions; they simply match themselves.  You can\nconcatenate ordinary characters, so last matches the string \'last\'.\n\nThe special characters are:\n    "."      Matches any character except a newline.\n    "^"      Matches the start of the string.\n    "$"      Matches the end of the string or just before the newline at\n             the end of the string.\n    "*"      Matches 0 or more (greedy) repetitions of the preceding RE.\n             Greedy means that it will match as many repetitions as possible.\n    "+"      Matches 1 or more (greedy) repetitions of the preceding RE.\n    "?"      Matches 0 or 1 (greedy) of the preceding RE.\n    *?,+?,?? Non-greedy versions of the previous three special characters.\n    {m,n}    Matches from m to n repetitions of the preceding RE.\n    {m,n}?   Non-greedy version of the above.\n    "\\\\"     Either escapes special characters or signals a special sequence.\n    []       Indicates a set of characters.\n             A "^" as the first character indicates a complementing set.\n    "|"      A|B, creates an RE that will match either A or B.\n    (...)    Matches the RE inside the parentheses.\n             The contents can be retrieved or matched later in the string.\n    (?iLmsux) Set the I, L, M, S, U, or X flag for the RE (see below).\n    (?:...)  Non-grouping version of regular parentheses.\n    (?P<name>...) The substring matched by the group is accessible by name.\n    (?P=name)     Matches the text matched earlier by the group named name.\n    (?#...)  A comment; ignored.\n    (?=...)  Matches if ... matches next, but doesn\'t consume the string.\n    (?!...)  Matches if ... doesn\'t match next.\n    (?<=...) Matches if preceded by ... (must be fixed length).\n    (?<!...) Matches if not preceded by ... (must be fixed length).\n    (?(id/name)yes|no) Matches yes pattern if the group with id/name matched,\n                       the (optional) no pattern otherwise.\n\nThe special sequences consist of "\\\\" and a character from the list\nbelow.  If the ordinary character is not on the list, then the\nresulting RE will match the second character.\n    \\number  Matches the contents of the group of the same number.\n    \\A       Matches only at the start of the string.\n    \\Z       Matches only at the end of the string.\n    \\b       Matches the empty string, but only at the start or end of a word.\n    \\B       Matches the empty string, but not at the start or end of a word.\n    \\d       Matches any decimal digit; equivalent to the set [0-9].\n    \\D       Matches any non-digit character; equivalent to the set [^0-9].\n    \\s       Matches any whitespace character; equivalent to [ \\t\\n\\r\\f\\v].\n    \\S       Matches any non-whitespace character; equiv. to [^ \\t\\n\\r\\f\\v].\n    \\w       Matches any alphanumeric character; equivalent to [a-zA-Z0-9_].\n             With LOCALE, it will match the set [0-9_] plus characters defined\n             as letters for the current locale.\n    \\W       Matches the complement of \\w.\n    \\\\       Matches a literal backslash.\n\nThis module exports the following functions:\n    match    Match a regular expression pattern to the beginning of a string.\n    search   Search a string for the presence of a pattern.\n    sub      Substitute occurrences of a pattern found in a string.\n    subn     Same as sub, but also return the number of substitutions made.\n    split    Split a string by the occurrences of a pattern.\n    findall  Find all occurrences of a pattern in a string.\n    finditer Return an iterator yielding a match object for each match.\n    compile  Compile a pattern into a RegexObject.\n    purge    Clear the regular expression cache.\n    escape   Backslash all non-alphanumerics in a string.\n\nSome of the functions in this module takes flags as optional parameters:\n    I  IGNORECASE  Perform case-insensitive matching.\n    L  LOCALE      Make \\w, \\W, \\b, \\B, dependent on the current locale.\n    M  MULTILINE   "^" matches the beginning of lines (after a newline)\n                   as well as the string.\n                   "$" matches the end of lines (before a newline) as well\n                   as the end of the string.\n    S  DOTALL      "." matches any character at all, including the newline.\n    X  VERBOSE     Ignore whitespace and comments for nicer looking RE\'s.\n    U  UNICODE     Make \\w, \\W, \\b, \\B, dependent on the Unicode locale.\n\nThis module also defines an exception \'error\'.\n\n', lineno=102, col_offset=-1), lineno=102, col_offset=-1), Import([alias('sys', None)], lineno=104, col_offset=0), Import([alias('sre_compile', None)], lineno=105, col_offset=0), Import([alias('sre_parse', None)], lineno=106, col_offset=0), Assign([Name('__all__', Store(), lineno=109, col_offset=0)], List([Str('match', lineno=109, col_offset=12), Str('search', lineno=109, col_offset=21), Str('sub', lineno=109, col_offset=31), Str('subn', lineno=109, col_offset=38), Str('split', lineno=109, col_offset=46), Str('findall', lineno=109, col_offset=55), Str('compile', lineno=110, col_offset=4), Str('purge', lineno=110, col_offset=15), Str('template', lineno=110, col_offset=24), Str('escape', lineno=110, col_offset=36), Str('I', lineno=110, col_offset=46), Str('L', lineno=110, col_offset=51), Str('M', lineno=110, col_offset=56), Str('S', lineno=110, col_offset=61), Str('X', lineno=110, col_offset=66), Str('U', lineno=111, col_offset=4), Str('IGNORECASE', lineno=111, col_offset=9), Str('LOCALE', lineno=111, col_offset=23), Str('MULTILINE', lineno=111, col_offset=33), Str('DOTALL', lineno=111, col_offset=46), Str('VERBOSE', lineno=111, col_offset=56), Str('UNICODE', lineno=112, col_offset=4), Str('error', lineno=112, col_offset=15)], Load(), lineno=109, col_offset=10), lineno=109, col_offset=0), Assign([Name('__version__', Store(), lineno=114, col_offset=0)], Str('2.2.1', lineno=114, col_offset=14), lineno=114, col_offset=0), Assign([Name('I', Store(), lineno=117, col_offset=0), Name('IGNORECASE', Store(), lineno=117, col_offset=4)], Attribute(Name('sre_compile', Load(), lineno=117, col_offset=17), 'SRE_FLAG_IGNORECASE', Load(), lineno=117, col_offset=17), lineno=117, col_offset=0), Assign([Name('L', Store(), lineno=118, col_offset=0), Name('LOCALE', Store(), lineno=118, col_offset=4)], Attribute(Name('sre_compile', Load(), lineno=118, col_offset=13), 'SRE_FLAG_LOCALE', Load(), lineno=118, col_offset=13), lineno=118, col_offset=0), Assign([Name('U', Store(), lineno=119, col_offset=0), Name('UNICODE', Store(), lineno=119, col_offset=4)], Attribute(Name('sre_compile', Load(), lineno=119, col_offset=14), 'SRE_FLAG_UNICODE', Load(), lineno=119, col_offset=14), lineno=119, col_offset=0), Assign([Name('M', Store(), lineno=120, col_offset=0), Name('MULTILINE', Store(), lineno=120, col_offset=4)], Attribute(Name('sre_compile', Load(), lineno=120, col_offset=16), 'SRE_FLAG_MULTILINE', Load(), lineno=120, col_offset=16), lineno=120, col_offset=0), Assign([Name('S', Store(), lineno=121, col_offset=0), Name('DOTALL', Store(), lineno=121, col_offset=4)], Attribute(Name('sre_compile', Load(), lineno=121, col_offset=13), 'SRE_FLAG_DOTALL', Load(), lineno=121, col_offset=13), lineno=121, col_offset=0), Assign([Name('X', Store(), lineno=122, col_offset=0), Name('VERBOSE', Store(), lineno=122, col_offset=4)], Attribute(Name('sre_compile', Load(), lineno=122, col_offset=14), 'SRE_FLAG_VERBOSE', Load(), lineno=122, col_offset=14), lineno=122, col_offset=0), Assign([Name('T', Store(), lineno=125, col_offset=0), Name('TEMPLATE', Store(), lineno=125, col_offset=4)], Attribute(Name('sre_compile', Load(), lineno=125, col_offset=15), 'SRE_FLAG_TEMPLATE', Load(), lineno=125, col_offset=15), lineno=125, col_offset=0), Assign([Name('DEBUG', Store(), lineno=126, col_offset=0)], Attribute(Name('sre_compile', Load(), lineno=126, col_offset=8), 'SRE_FLAG_DEBUG', Load(), lineno=126, col_offset=8), lineno=126, col_offset=0), Assign([Name('error', Store(), lineno=129, col_offset=0)], Attribute(Name('sre_compile', Load(), lineno=129, col_offset=8), 'error', Load(), lineno=129, col_offset=8), lineno=129, col_offset=0), FunctionDef('match', arguments([Name('pattern', Param(), lineno=134, col_offset=10), Name('string', Param(), lineno=134, col_offset=19), Name('flags', Param(), lineno=134, col_offset=27)], None, None, [Num(0, lineno=134, col_offset=33)]), [Expr(Str('Try to apply the pattern at the start of the string, returning\n    a match object, or None if no match was found.', lineno=136, col_offset=-1), lineno=136, col_offset=-1), Return(Call(Attribute(Call(Name('_compile', Load(), lineno=137, col_offset=11), [Name('pattern', Load(), lineno=137, col_offset=20), Name('flags', Load(), lineno=137, col_offset=29)], [], None, None, lineno=137, col_offset=11), 'match', Load(), lineno=137, col_offset=11), [Name('string', Load(), lineno=137, col_offset=42)], [], None, None, lineno=137, col_offset=11), lineno=137, col_offset=4)], [], lineno=134, col_offset=0), FunctionDef('search', arguments([Name('pattern', Param(), lineno=139, col_offset=11), Name('string', Param(), lineno=139, col_offset=20), Name('flags', Param(), lineno=139, col_offset=28)], None, None, [Num(0, lineno=139, col_offset=34)]), [Expr(Str('Scan through string looking for a match to the pattern, returning\n    a match object, or None if no match was found.', lineno=141, col_offset=-1), lineno=141, col_offset=-1), Return(Call(Attribute(Call(Name('_compile', Load(), lineno=142, col_offset=11), [Name('pattern', Load(), lineno=142, col_offset=20), Name('flags', Load(), lineno=142, col_offset=29)], [], None, None, lineno=142, col_offset=11), 'search', Load(), lineno=142, col_offset=11), [Name('string', Load(), lineno=142, col_offset=43)], [], None, None, lineno=142, col_offset=11), lineno=142, col_offset=4)], [], lineno=139, col_offset=0), FunctionDef('sub', arguments([Name('pattern', Param(), lineno=144, col_offset=8), Name('repl', Param(), lineno=144, col_offset=17), Name('string', Param(), lineno=144, col_offset=23), Name('count', Param(), lineno=144, col_offset=31), Name('flags', Param(), lineno=144, col_offset=40)], None, None, [Num(0, lineno=144, col_offset=37), Num(0, lineno=144, col_offset=46)]), [Expr(Str("Return the string obtained by replacing the leftmost\n    non-overlapping occurrences of the pattern in string by the\n    replacement repl.  repl can be either a string or a callable;\n    if a string, backslash escapes in it are processed.  If it is\n    a callable, it's passed the match object and must return\n    a replacement string to be used.", lineno=150, col_offset=-1), lineno=150, col_offset=-1), Return(Call(Attribute(Call(Name('_compile', Load(), lineno=151, col_offset=11), [Name('pattern', Load(), lineno=151, col_offset=20), Name('flags', Load(), lineno=151, col_offset=29)], [], None, None, lineno=151, col_offset=11), 'sub', Load(), lineno=151, col_offset=11), [Name('repl', Load(), lineno=151, col_offset=40), Name('string', Load(), lineno=151, col_offset=46), Name('count', Load(), lineno=151, col_offset=54)], [], None, None, lineno=151, col_offset=11), lineno=151, col_offset=4)], [], lineno=144, col_offset=0), FunctionDef('subn', arguments([Name('pattern', Param(), lineno=153, col_offset=9), Name('repl', Param(), lineno=153, col_offset=18), Name('string', Param(), lineno=153, col_offset=24), Name('count', Param(), lineno=153, col_offset=32), Name('flags', Param(), lineno=153, col_offset=41)], None, None, [Num(0, lineno=153, col_offset=38), Num(0, lineno=153, col_offset=47)]), [Expr(Str("Return a 2-tuple containing (new_string, number).\n    new_string is the string obtained by replacing the leftmost\n    non-overlapping occurrences of the pattern in the source\n    string by the replacement repl.  number is the number of\n    substitutions that were made. repl can be either a string or a\n    callable; if a string, backslash escapes in it are processed.\n    If it is a callable, it's passed the match object and must\n    return a replacement string to be used.", lineno=161, col_offset=-1), lineno=161, col_offset=-1), Return(Call(Attribute(Call(Name('_compile', Load(), lineno=162, col_offset=11), [Name('pattern', Load(), lineno=162, col_offset=20), Name('flags', Load(), lineno=162, col_offset=29)], [], None, None, lineno=162, col_offset=11), 'subn', Load(), lineno=162, col_offset=11), [Name('repl', Load(), lineno=162, col_offset=41), Name('string', Load(), lineno=162, col_offset=47), Name('count', Load(), lineno=162, col_offset=55)], [], None, None, lineno=162, col_offset=11), lineno=162, col_offset=4)], [], lineno=153, col_offset=0), FunctionDef('split', arguments([Name('pattern', Param(), lineno=164, col_offset=10), Name('string', Param(), lineno=164, col_offset=19), Name('maxsplit', Param(), lineno=164, col_offset=27), Name('flags', Param(), lineno=164, col_offset=39)], None, None, [Num(0, lineno=164, col_offset=36), Num(0, lineno=164, col_offset=45)]), [Expr(Str('Split the source string by the occurrences of the pattern,\n    returning a list containing the resulting substrings.', lineno=166, col_offset=-1), lineno=166, col_offset=-1), Return(Call(Attribute(Call(Name('_compile', Load(), lineno=167, col_offset=11), [Name('pattern', Load(), lineno=167, col_offset=20), Name('flags', Load(), lineno=167, col_offset=29)], [], None, None, lineno=167, col_offset=11), 'split', Load(), lineno=167, col_offset=11), [Name('string', Load(), lineno=167, col_offset=42), Name('maxsplit', Load(), lineno=167, col_offset=50)], [], None, None, lineno=167, col_offset=11), lineno=167, col_offset=4)], [], lineno=164, col_offset=0), FunctionDef('findall', arguments([Name('pattern', Param(), lineno=169, col_offset=12), Name('string', Param(), lineno=169, col_offset=21), Name('flags', Param(), lineno=169, col_offset=29)], None, None, [Num(0, lineno=169, col_offset=35)]), [Expr(Str('Return a list of all non-overlapping matches in the string.\n\n    If one or more groups are present in the pattern, return a\n    list of groups; this will be a list of tuples if the pattern\n    has more than one group.\n\n    Empty matches are included in the result.', lineno=176, col_offset=-1), lineno=176, col_offset=-1), Return(Call(Attribute(Call(Name('_compile', Load(), lineno=177, col_offset=11), [Name('pattern', Load(), lineno=177, col_offset=20), Name('flags', Load(), lineno=177, col_offset=29)], [], None, None, lineno=177, col_offset=11), 'findall', Load(), lineno=177, col_offset=11), [Name('string', Load(), lineno=177, col_offset=44)], [], None, None, lineno=177, col_offset=11), lineno=177, col_offset=4)], [], lineno=169, col_offset=0), If(Compare(Attribute(Name('sys', Load(), lineno=179, col_offset=3), 'hexversion', Load(), lineno=179, col_offset=3), [GtE()], [Num(33685504, lineno=179, col_offset=21)], lineno=179, col_offset=3), [Expr(Call(Attribute(Name('__all__', Load(), lineno=180, col_offset=4), 'append', Load(), lineno=180, col_offset=4), [Str('finditer', lineno=180, col_offset=19)], [], None, None, lineno=180, col_offset=4), lineno=180, col_offset=4), FunctionDef('finditer', arguments([Name('pattern', Param(), lineno=181, col_offset=17), Name('string', Param(), lineno=181, col_offset=26), Name('flags', Param(), lineno=181, col_offset=34)], None, None, [Num(0, lineno=181, col_offset=40)]), [Expr(Str('Return an iterator over all non-overlapping matches in the\n        string.  For each match, the iterator returns a match object.\n\n        Empty matches are included in the result.', lineno=185, col_offset=-1), lineno=185, col_offset=-1), Return(Call(Attribute(Call(Name('_compile', Load(), lineno=186, col_offset=15), [Name('pattern', Load(), lineno=186, col_offset=24), Name('flags', Load(), lineno=186, col_offset=33)], [], None, None, lineno=186, col_offset=15), 'finditer', Load(), lineno=186, col_offset=15), [Name('string', Load(), lineno=186, col_offset=49)], [], None, None, lineno=186, col_offset=15), lineno=186, col_offset=8)], [], lineno=181, col_offset=4)], [], lineno=179, col_offset=0), FunctionDef('compile', arguments([Name('pattern', Param(), lineno=188, col_offset=12), Name('flags', Param(), lineno=188, col_offset=21)], None, None, [Num(0, lineno=188, col_offset=27)]), [Expr(Str('Compile a regular expression pattern, returning a pattern object.', lineno=189, col_offset=4), lineno=189, col_offset=4), Return(Call(Name('_compile', Load(), lineno=190, col_offset=11), [Name('pattern', Load(), lineno=190, col_offset=20), Name('flags', Load(), lineno=190, col_offset=29)], [], None, None, lineno=190, col_offset=11), lineno=190, col_offset=4)], [], lineno=188, col_offset=0), FunctionDef('purge', arguments([], None, None, []), [Expr(Str('Clear the regular expression cache', lineno=193, col_offset=4), lineno=193, col_offset=4), Expr(Call(Attribute(Name('_cache', Load(), lineno=194, col_offset=4), 'clear', Load(), lineno=194, col_offset=4), [], [], None, None, lineno=194, col_offset=4), lineno=194, col_offset=4), Expr(Call(Attribute(Name('_cache_repl', Load(), lineno=195, col_offset=4), 'clear', Load(), lineno=195, col_offset=4), [], [], None, None, lineno=195, col_offset=4), lineno=195, col_offset=4)], [], lineno=192, col_offset=0), FunctionDef('template', arguments([Name('pattern', Param(), lineno=197, col_offset=13), Name('flags', Param(), lineno=197, col_offset=22)], None, None, [Num(0, lineno=197, col_offset=28)]), [Expr(Str('Compile a template pattern, returning a pattern object', lineno=198, col_offset=4), lineno=198, col_offset=4), Return(Call(Name('_compile', Load(), lineno=199, col_offset=11), [Name('pattern', Load(), lineno=199, col_offset=20), BinOp(Name('flags', Load(), lineno=199, col_offset=29), BitOr(), Name('T', Load(), lineno=199, col_offset=35), lineno=199, col_offset=29)], [], None, None, lineno=199, col_offset=11), lineno=199, col_offset=4)], [], lineno=197, col_offset=0), Assign([Name('_alphanum', Store(), lineno=201, col_offset=0)], Dict([], [], lineno=201, col_offset=12), lineno=201, col_offset=0), For(Name('c', Store(), lineno=202, col_offset=4), Str('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ01234567890', lineno=202, col_offset=9), [Assign([Subscript(Name('_alphanum', Load(), lineno=203, col_offset=4), Index(Name('c', Load(), lineno=203, col_offset=14)), Store(), lineno=203, col_offset=4)], Num(1, lineno=203, col_offset=19), lineno=203, col_offset=4)], [], lineno=202, col_offset=0), Delete([Name('c', Del(), lineno=204, col_offset=4)], lineno=204, col_offset=0), FunctionDef('escape', arguments([Name('pattern', Param(), lineno=206, col_offset=11)], None, None, []), [Expr(Str('Escape all non-alphanumeric characters in pattern.', lineno=207, col_offset=4), lineno=207, col_offset=4), Assign([Name('s', Store(), lineno=208, col_offset=4)], Call(Name('list', Load(), lineno=208, col_offset=8), [Name('pattern', Load(), lineno=208, col_offset=13)], [], None, None, lineno=208, col_offset=8), lineno=208, col_offset=4), Assign([Name('alphanum', Store(), lineno=209, col_offset=4)], Name('_alphanum', Load(), lineno=209, col_offset=15), lineno=209, col_offset=4), For(Name('i', Store(), lineno=210, col_offset=8), Call(Name('range', Load(), lineno=210, col_offset=13), [Call(Name('len', Load(), lineno=210, col_offset=19), [Name('pattern', Load(), lineno=210, col_offset=23)], [], None, None, lineno=210, col_offset=19)], [], None, None, lineno=210, col_offset=13), [Assign([Name('c', Store(), lineno=211, col_offset=8)], Subscript(Name('pattern', Load(), lineno=211, col_offset=12), Index(Name('i', Load(), lineno=211, col_offset=20)), Load(), lineno=211, col_offset=12), lineno=211, col_offset=8), If(Compare(Name('c', Load(), lineno=212, col_offset=11), [NotIn()], [Name('alphanum', Load(), lineno=212, col_offset=20)], lineno=212, col_offset=11), [If(Compare(Name('c', Load(), lineno=213, col_offset=15), [Eq()], [Str('\x00', lineno=213, col_offset=20)], lineno=213, col_offset=15), [Assign([Subscript(Name('s', Load(), lineno=214, col_offset=16), Index(Name('i', Load(), lineno=214, col_offset=18)), Store(), lineno=214, col_offset=16)], Str('\\000', lineno=214, col_offset=23), lineno=214, col_offset=16)], [Assign([Subscript(Name('s', Load(), lineno=216, col_offset=16), Index(Name('i', Load(), lineno=216, col_offset=18)), Store(), lineno=216, col_offset=16)], BinOp(Str('\\', lineno=216, col_offset=23), Add(), Name('c', Load(), lineno=216, col_offset=30), lineno=216, col_offset=23), lineno=216, col_offset=16)], lineno=213, col_offset=12)], [], lineno=212, col_offset=8)], [], lineno=210, col_offset=4), Return(Call(Attribute(Subscript(Name('pattern', Load(), lineno=217, col_offset=11), Slice(None, Num(0, lineno=217, col_offset=20), None), Load(), lineno=217, col_offset=11), 'join', Load(), lineno=217, col_offset=11), [Name('s', Load(), lineno=217, col_offset=28)], [], None, None, lineno=217, col_offset=11), lineno=217, col_offset=4)], [], lineno=206, col_offset=0), Assign([Name('_cache', Store(), lineno=222, col_offset=0)], Dict([], [], lineno=222, col_offset=9), lineno=222, col_offset=0), Assign([Name('_cache_repl', Store(), lineno=223, col_offset=0)], Dict([], [], lineno=223, col_offset=14), lineno=223, col_offset=0), Assign([Name('_pattern_type', Store(), lineno=225, col_offset=0)], Call(Name('type', Load(), lineno=225, col_offset=16), [Call(Attribute(Name('sre_compile', Load(), lineno=225, col_offset=21), 'compile', Load(), lineno=225, col_offset=21), [Str('', lineno=225, col_offset=41), Num(0, lineno=225, col_offset=45)], [], None, None, lineno=225, col_offset=21)], [], None, None, lineno=225, col_offset=16), lineno=225, col_offset=0), Assign([Name('_MAXCACHE', Store(), lineno=227, col_offset=0)], Num(100, lineno=227, col_offset=12), lineno=227, col_offset=0), FunctionDef('_compile', arguments([], 'key', None, []), [Assign([Name('cachekey', Store(), lineno=231, col_offset=4)], BinOp(Tuple([Call(Name('type', Load(), lineno=231, col_offset=16), [Subscript(Name('key', Load(), lineno=231, col_offset=21), Index(Num(0, lineno=231, col_offset=25)), Load(), lineno=231, col_offset=21)], [], None, None, lineno=231, col_offset=16)], Load(), lineno=231, col_offset=16), Add(), Name('key', Load(), lineno=231, col_offset=33), lineno=231, col_offset=15), lineno=231, col_offset=4), Assign([Name('p', Store(), lineno=232, col_offset=4)], Call(Attribute(Name('_cache', Load(), lineno=232, col_offset=8), 'get', Load(), lineno=232, col_offset=8), [Name('cachekey', Load(), lineno=232, col_offset=19)], [], None, None, lineno=232, col_offset=8), lineno=232, col_offset=4), If(Compare(Name('p', Load(), lineno=233, col_offset=7), [IsNot()], [Name('None', Load(), lineno=233, col_offset=16)], lineno=233, col_offset=7), [Return(Name('p', Load(), lineno=234, col_offset=15), lineno=234, col_offset=8)], [], lineno=233, col_offset=4), Assign([Tuple([Name('pattern', Store(), lineno=235, col_offset=4), Name('flags', Store(), lineno=235, col_offset=13)], Store(), lineno=235, col_offset=4)], Name('key', Load(), lineno=235, col_offset=21), lineno=235, col_offset=4), If(Call(Name('isinstance', Load(), lineno=236, col_offset=7), [Name('pattern', Load(), lineno=236, col_offset=18), Name('_pattern_type', Load(), lineno=236, col_offset=27)], [], None, None, lineno=236, col_offset=7), [If(Name('flags', Load(), lineno=237, col_offset=11), [Raise(Call(Name('ValueError', Load(), lineno=238, col_offset=18), [Str('Cannot process flags argument with a compiled pattern', lineno=238, col_offset=29)], [], None, None, lineno=238, col_offset=18), None, None, lineno=238, col_offset=12)], [], lineno=237, col_offset=8), Return(Name('pattern', Load(), lineno=239, col_offset=15), lineno=239, col_offset=8)], [], lineno=236, col_offset=4), If(UnaryOp(Not(), Call(Attribute(Name('sre_compile', Load(), lineno=240, col_offset=11), 'isstring', Load(), lineno=240, col_offset=11), [Name('pattern', Load(), lineno=240, col_offset=32)], [], None, None, lineno=240, col_offset=11), lineno=240, col_offset=7), [Raise(Name('TypeError', Load(), lineno=241, col_offset=14), Str('first argument must be string or compiled pattern', lineno=241, col_offset=25), None, lineno=241, col_offset=8)], [], lineno=240, col_offset=4), TryExcept([Assign([Name('p', Store(), lineno=243, col_offset=8)], Call(Attribute(Name('sre_compile', Load(), lineno=243, col_offset=12), 'compile', Load(), lineno=243, col_offset=12), [Name('pattern', Load(), lineno=243, col_offset=32), Name('flags', Load(), lineno=243, col_offset=41)], [], None, None, lineno=243, col_offset=12), lineno=243, col_offset=8)], [ExceptHandler(Name('error', Load(), lineno=244, col_offset=11), Name('v', Store(), lineno=244, col_offset=18), [Raise(Name('error', Load(), lineno=245, col_offset=14), Name('v', Load(), lineno=245, col_offset=21), None, lineno=245, col_offset=8)], lineno=244, col_offset=4)], [], lineno=242, col_offset=4), If(Compare(Call(Name('len', Load(), lineno=246, col_offset=7), [Name('_cache', Load(), lineno=246, col_offset=11)], [], None, None, lineno=246, col_offset=7), [GtE()], [Name('_MAXCACHE', Load(), lineno=246, col_offset=22)], lineno=246, col_offset=7), [Expr(Call(Attribute(Name('_cache', Load(), lineno=247, col_offset=8), 'clear', Load(), lineno=247, col_offset=8), [], [], None, None, lineno=247, col_offset=8), lineno=247, col_offset=8)], [], lineno=246, col_offset=4), Assign([Subscript(Name('_cache', Load(), lineno=248, col_offset=4), Index(Name('cachekey', Load(), lineno=248, col_offset=11)), Store(), lineno=248, col_offset=4)], Name('p', Load(), lineno=248, col_offset=23), lineno=248, col_offset=4), Return(Name('p', Load(), lineno=249, col_offset=11), lineno=249, col_offset=4)], [], lineno=229, col_offset=0), FunctionDef('_compile_repl', arguments([], 'key', None, []), [Assign([Name('p', Store(), lineno=253, col_offset=4)], Call(Attribute(Name('_cache_repl', Load(), lineno=253, col_offset=8), 'get', Load(), lineno=253, col_offset=8), [Name('key', Load(), lineno=253, col_offset=24)], [], None, None, lineno=253, col_offset=8), lineno=253, col_offset=4), If(Compare(Name('p', Load(), lineno=254, col_offset=7), [IsNot()], [Name('None', Load(), lineno=254, col_offset=16)], lineno=254, col_offset=7), [Return(Name('p', Load(), lineno=255, col_offset=15), lineno=255, col_offset=8)], [], lineno=254, col_offset=4), Assign([Tuple([Name('repl', Store(), lineno=256, col_offset=4), Name('pattern', Store(), lineno=256, col_offset=10)], Store(), lineno=256, col_offset=4)], Name('key', Load(), lineno=256, col_offset=20), lineno=256, col_offset=4), TryExcept([Assign([Name('p', Store(), lineno=258, col_offset=8)], Call(Attribute(Name('sre_parse', Load(), lineno=258, col_offset=12), 'parse_template', Load(), lineno=258, col_offset=12), [Name('repl', Load(), lineno=258, col_offset=37), Name('pattern', Load(), lineno=258, col_offset=43)], [], None, None, lineno=258, col_offset=12), lineno=258, col_offset=8)], [ExceptHandler(Name('error', Load(), lineno=259, col_offset=11), Name('v', Store(), lineno=259, col_offset=18), [Raise(Name('error', Load(), lineno=260, col_offset=14), Name('v', Load(), lineno=260, col_offset=21), None, lineno=260, col_offset=8)], lineno=259, col_offset=4)], [], lineno=257, col_offset=4), If(Compare(Call(Name('len', Load(), lineno=261, col_offset=7), [Name('_cache_repl', Load(), lineno=261, col_offset=11)], [], None, None, lineno=261, col_offset=7), [GtE()], [Name('_MAXCACHE', Load(), lineno=261, col_offset=27)], lineno=261, col_offset=7), [Expr(Call(Attribute(Name('_cache_repl', Load(), lineno=262, col_offset=8), 'clear', Load(), lineno=262, col_offset=8), [], [], None, None, lineno=262, col_offset=8), lineno=262, col_offset=8)], [], lineno=261, col_offset=4), Assign([Subscript(Name('_cache_repl', Load(), lineno=263, col_offset=4), Index(Name('key', Load(), lineno=263, col_offset=16)), Store(), lineno=263, col_offset=4)], Name('p', Load(), lineno=263, col_offset=23), lineno=263, col_offset=4), Return(Name('p', Load(), lineno=264, col_offset=11), lineno=264, col_offset=4)], [], lineno=251, col_offset=0), FunctionDef('_expand', arguments([Name('pattern', Param(), lineno=266, col_offset=12), Name('match', Param(), lineno=266, col_offset=21), Name('template', Param(), lineno=266, col_offset=28)], None, None, []), [Assign([Name('template', Store(), lineno=268, col_offset=4)], Call(Attribute(Name('sre_parse', Load(), lineno=268, col_offset=15), 'parse_template', Load(), lineno=268, col_offset=15), [Name('template', Load(), lineno=268, col_offset=40), Name('pattern', Load(), lineno=268, col_offset=50)], [], None, None, lineno=268, col_offset=15), lineno=268, col_offset=4), Return(Call(Attribute(Name('sre_parse', Load(), lineno=269, col_offset=11), 'expand_template', Load(), lineno=269, col_offset=11), [Name('template', Load(), lineno=269, col_offset=37), Name('match', Load(), lineno=269, col_offset=47)], [], None, None, lineno=269, col_offset=11), lineno=269, col_offset=4)], [], lineno=266, col_offset=0), FunctionDef('_subx', arguments([Name('pattern', Param(), lineno=271, col_offset=10), Name('template', Param(), lineno=271, col_offset=19)], None, None, []), [Assign([Name('template', Store(), lineno=273, col_offset=4)], Call(Name('_compile_repl', Load(), lineno=273, col_offset=15), [Name('template', Load(), lineno=273, col_offset=29), Name('pattern', Load(), lineno=273, col_offset=39)], [], None, None, lineno=273, col_offset=15), lineno=273, col_offset=4), If(BoolOp(And(), [UnaryOp(Not(), Subscript(Name('template', Load(), lineno=274, col_offset=11), Index(Num(0, lineno=274, col_offset=20)), Load(), lineno=274, col_offset=11), lineno=274, col_offset=7), Compare(Call(Name('len', Load(), lineno=274, col_offset=27), [Subscript(Name('template', Load(), lineno=274, col_offset=31), Index(Num(1, lineno=274, col_offset=40)), Load(), lineno=274, col_offset=31)], [], None, None, lineno=274, col_offset=27), [Eq()], [Num(1, lineno=274, col_offset=47)], lineno=274, col_offset=27)], lineno=274, col_offset=7), [Return(Subscript(Subscript(Name('template', Load(), lineno=276, col_offset=15), Index(Num(1, lineno=276, col_offset=24)), Load(), lineno=276, col_offset=15), Index(Num(0, lineno=276, col_offset=27)), Load(), lineno=276, col_offset=15), lineno=276, col_offset=8)], [], lineno=274, col_offset=4), FunctionDef('filter', arguments([Name('match', Param(), lineno=277, col_offset=15), Name('template', Param(), lineno=277, col_offset=22)], None, None, [Name('template', Load(), lineno=277, col_offset=31)]), [Return(Call(Attribute(Name('sre_parse', Load(), lineno=278, col_offset=15), 'expand_template', Load(), lineno=278, col_offset=15), [Name('template', Load(), lineno=278, col_offset=41), Name('match', Load(), lineno=278, col_offset=51)], [], None, None, lineno=278, col_offset=15), lineno=278, col_offset=8)], [], lineno=277, col_offset=4), Return(Name('filter', Load(), lineno=279, col_offset=11), lineno=279, col_offset=4)], [], lineno=271, col_offset=0), Import([alias('copy_reg', None)], lineno=283, col_offset=0), FunctionDef('_pickle', arguments([Name('p', Param(), lineno=285, col_offset=12)], None, None, []), [Return(Tuple([Name('_compile', Load(), lineno=286, col_offset=11), Tuple([Attribute(Name('p', Load(), lineno=286, col_offset=22), 'pattern', Load(), lineno=286, col_offset=22), Attribute(Name('p', Load(), lineno=286, col_offset=33), 'flags', Load(), lineno=286, col_offset=33)], Load(), lineno=286, col_offset=22)], Load(), lineno=286, col_offset=11), lineno=286, col_offset=4)], [], lineno=285, col_offset=0), Expr(Call(Attribute(Name('copy_reg', Load(), lineno=288, col_offset=0), 'pickle', Load(), lineno=288, col_offset=0), [Name('_pattern_type', Load(), lineno=288, col_offset=16), Name('_pickle', Load(), lineno=288, col_offset=31), Name('_compile', Load(), lineno=288, col_offset=40)], [], None, None, lineno=288, col_offset=0), lineno=288, col_offset=0), ClassDef('Scanner', [], [FunctionDef('__init__', arguments([Name('self', Param(), lineno=294, col_offset=17), Name('lexicon', Param(), lineno=294, col_offset=23), Name('flags', Param(), lineno=294, col_offset=32)], None, None, [Num(0, lineno=294, col_offset=38)]), [ImportFrom('sre_constants', [alias('BRANCH', None), alias('SUBPATTERN', None)], 0, lineno=295, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=296, col_offset=8), 'lexicon', Store(), lineno=296, col_offset=8)], Name('lexicon', Load(), lineno=296, col_offset=23), lineno=296, col_offset=8), Assign([Name('p', Store(), lineno=298, col_offset=8)], List([], Load(), lineno=298, col_offset=12), lineno=298, col_offset=8), Assign([Name('s', Store(), lineno=299, col_offset=8)], Call(Attribute(Name('sre_parse', Load(), lineno=299, col_offset=12), 'Pattern', Load(), lineno=299, col_offset=12), [], [], None, None, lineno=299, col_offset=12), lineno=299, col_offset=8), Assign([Attribute(Name('s', Load(), lineno=300, col_offset=8), 'flags', Store(), lineno=300, col_offset=8)], Name('flags', Load(), lineno=300, col_offset=18), lineno=300, col_offset=8), For(Tuple([Name('phrase', Store(), lineno=301, col_offset=12), Name('action', Store(), lineno=301, col_offset=20)], Store(), lineno=301, col_offset=12), Name('lexicon', Load(), lineno=301, col_offset=30), [Expr(Call(Attribute(Name('p', Load(), lineno=302, col_offset=12), 'append', Load(), lineno=302, col_offset=12), [Call(Attribute(Name('sre_parse', Load(), lineno=302, col_offset=21), 'SubPattern', Load(), lineno=302, col_offset=21), [Name('s', Load(), lineno=302, col_offset=42), List([Tuple([Name('SUBPATTERN', Load(), lineno=303, col_offset=17), Tuple([BinOp(Call(Name('len', Load(), lineno=303, col_offset=30), [Name('p', Load(), lineno=303, col_offset=34)], [], None, None, lineno=303, col_offset=30), Add(), Num(1, lineno=303, col_offset=37), lineno=303, col_offset=30), Call(Attribute(Name('sre_parse', Load(), lineno=303, col_offset=40), 'parse', Load(), lineno=303, col_offset=40), [Name('phrase', Load(), lineno=303, col_offset=56), Name('flags', Load(), lineno=303, col_offset=64)], [], None, None, lineno=303, col_offset=40)], Load(), lineno=303, col_offset=30)], Load(), lineno=303, col_offset=17)], Load(), lineno=302, col_offset=45)], [], None, None, lineno=302, col_offset=21)], [], None, None, lineno=302, col_offset=12), lineno=302, col_offset=12)], [], lineno=301, col_offset=8), Assign([Attribute(Name('s', Load(), lineno=305, col_offset=8), 'groups', Store(), lineno=305, col_offset=8)], BinOp(Call(Name('len', Load(), lineno=305, col_offset=19), [Name('p', Load(), lineno=305, col_offset=23)], [], None, None, lineno=305, col_offset=19), Add(), Num(1, lineno=305, col_offset=26), lineno=305, col_offset=19), lineno=305, col_offset=8), Assign([Name('p', Store(), lineno=306, col_offset=8)], Call(Attribute(Name('sre_parse', Load(), lineno=306, col_offset=12), 'SubPattern', Load(), lineno=306, col_offset=12), [Name('s', Load(), lineno=306, col_offset=33), List([Tuple([Name('BRANCH', Load(), lineno=306, col_offset=38), Tuple([Name('None', Load(), lineno=306, col_offset=47), Name('p', Load(), lineno=306, col_offset=53)], Load(), lineno=306, col_offset=47)], Load(), lineno=306, col_offset=38)], Load(), lineno=306, col_offset=36)], [], None, None, lineno=306, col_offset=12), lineno=306, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=307, col_offset=8), 'scanner', Store(), lineno=307, col_offset=8)], Call(Attribute(Name('sre_compile', Load(), lineno=307, col_offset=23), 'compile', Load(), lineno=307, col_offset=23), [Name('p', Load(), lineno=307, col_offset=43)], [], None, None, lineno=307, col_offset=23), lineno=307, col_offset=8)], [], lineno=294, col_offset=4), FunctionDef('scan', arguments([Name('self', Param(), lineno=308, col_offset=13), Name('string', Param(), lineno=308, col_offset=19)], None, None, []), [Assign([Name('result', Store(), lineno=309, col_offset=8)], List([], Load(), lineno=309, col_offset=17), lineno=309, col_offset=8), Assign([Name('append', Store(), lineno=310, col_offset=8)], Attribute(Name('result', Load(), lineno=310, col_offset=17), 'append', Load(), lineno=310, col_offset=17), lineno=310, col_offset=8), Assign([Name('match', Store(), lineno=311, col_offset=8)], Attribute(Call(Attribute(Attribute(Name('self', Load(), lineno=311, col_offset=16), 'scanner', Load(), lineno=311, col_offset=16), 'scanner', Load(), lineno=311, col_offset=16), [Name('string', Load(), lineno=311, col_offset=37)], [], None, None, lineno=311, col_offset=16), 'match', Load(), lineno=311, col_offset=16), lineno=311, col_offset=8), Assign([Name('i', Store(), lineno=312, col_offset=8)], Num(0, lineno=312, col_offset=12), lineno=312, col_offset=8), While(Num(1, lineno=313, col_offset=14), [Assign([Name('m', Store(), lineno=314, col_offset=12)], Call(Name('match', Load(), lineno=314, col_offset=16), [], [], None, None, lineno=314, col_offset=16), lineno=314, col_offset=12), If(UnaryOp(Not(), Name('m', Load(), lineno=315, col_offset=19), lineno=315, col_offset=15), [Break( lineno=316, col_offset=16)], [], lineno=315, col_offset=12), Assign([Name('j', Store(), lineno=317, col_offset=12)], Call(Attribute(Name('m', Load(), lineno=317, col_offset=16), 'end', Load(), lineno=317, col_offset=16), [], [], None, None, lineno=317, col_offset=16), lineno=317, col_offset=12), If(Compare(Name('i', Load(), lineno=318, col_offset=15), [Eq()], [Name('j', Load(), lineno=318, col_offset=20)], lineno=318, col_offset=15), [Break( lineno=319, col_offset=16)], [], lineno=318, col_offset=12), Assign([Name('action', Store(), lineno=320, col_offset=12)], Subscript(Subscript(Attribute(Name('self', Load(), lineno=320, col_offset=21), 'lexicon', Load(), lineno=320, col_offset=21), Index(BinOp(Attribute(Name('m', Load(), lineno=320, col_offset=34), 'lastindex', Load(), lineno=320, col_offset=34), Sub(), Num(1, lineno=320, col_offset=46), lineno=320, col_offset=34)), Load(), lineno=320, col_offset=21), Index(Num(1, lineno=320, col_offset=49)), Load(), lineno=320, col_offset=21), lineno=320, col_offset=12), If(Call(Name('hasattr', Load(), lineno=321, col_offset=15), [Name('action', Load(), lineno=321, col_offset=23), Str('__call__', lineno=321, col_offset=31)], [], None, None, lineno=321, col_offset=15), [Assign([Attribute(Name('self', Load(), lineno=322, col_offset=16), 'match', Store(), lineno=322, col_offset=16)], Name('m', Load(), lineno=322, col_offset=29), lineno=322, col_offset=16), Assign([Name('action', Store(), lineno=323, col_offset=16)], Call(Name('action', Load(), lineno=323, col_offset=25), [Name('self', Load(), lineno=323, col_offset=32), Call(Attribute(Name('m', Load(), lineno=323, col_offset=38), 'group', Load(), lineno=323, col_offset=38), [], [], None, None, lineno=323, col_offset=38)], [], None, None, lineno=323, col_offset=25), lineno=323, col_offset=16)], [], lineno=321, col_offset=12), If(Compare(Name('action', Load(), lineno=324, col_offset=15), [IsNot()], [Name('None', Load(), lineno=324, col_offset=29)], lineno=324, col_offset=15), [Expr(Call(Name('append', Load(), lineno=325, col_offset=16), [Name('action', Load(), lineno=325, col_offset=23)], [], None, None, lineno=325, col_offset=16), lineno=325, col_offset=16)], [], lineno=324, col_offset=12), Assign([Name('i', Store(), lineno=326, col_offset=12)], Name('j', Load(), lineno=326, col_offset=16), lineno=326, col_offset=12)], [], lineno=313, col_offset=8), Return(Tuple([Name('result', Load(), lineno=327, col_offset=15), Subscript(Name('string', Load(), lineno=327, col_offset=23), Slice(Name('i', Load(), lineno=327, col_offset=30), None, None), Load(), lineno=327, col_offset=23)], Load(), lineno=327, col_offset=15), lineno=327, col_offset=8)], [], lineno=308, col_offset=4)], [], lineno=293, col_offset=0)])
