Module([Expr(Str("_emx_link.py is a simplistic emulation of the Unix link(2) library routine\nfor creating so-called hard links.  It is intended to be imported into\nthe os module in place of the unimplemented (on OS/2) Posix link()\nfunction (os.link()).\n\nWe do this on OS/2 by implementing a file copy, with link(2) semantics:-\n  - the target cannot already exist;\n  - we hope that the actual file open (if successful) is actually\n    atomic...\n\nLimitations of this approach/implementation include:-\n  - no support for correct link counts (EMX stat(target).st_nlink\n    is always 1);\n  - thread safety undefined;\n  - default file permissions (r+w) used, can't be over-ridden;\n  - implemented in Python so comparatively slow, especially for large\n    source files;\n  - need sufficient free disk space to store the copy.\n\nBehaviour:-\n  - any exception should propagate to the caller;\n  - want target to be an exact copy of the source, so use binary mode;\n  - returns None, same as os.link() which is implemented in posixmodule.c;\n  - target removed in the event of a failure where possible;\n  - given the motivation to write this emulation came from trying to\n    support a Unix resource lock implementation, where minimal overhead\n    during creation of the target is desirable and the files are small,\n    we read a source block before attempting to create the target so that\n    we're ready to immediately write some data into it.\n", lineno=34, col_offset=-1), lineno=34, col_offset=-1), Import([alias('os', None)], lineno=36, col_offset=0), Import([alias('errno', None)], lineno=37, col_offset=0), Assign([Name('__all__', Store(), lineno=39, col_offset=0)], List([Str('link', lineno=39, col_offset=11)], Load(), lineno=39, col_offset=10), lineno=39, col_offset=0), FunctionDef('link', arguments([Name('source', Param(), lineno=41, col_offset=9), Name('target', Param(), lineno=41, col_offset=17)], None, None, []), [Expr(Str('link(source, target) -> None\n\n    Attempt to hard link the source file to the target file name.\n    On OS/2, this creates a complete copy of the source file.\n    ', lineno=46, col_offset=-1), lineno=46, col_offset=-1), Assign([Name('s', Store(), lineno=48, col_offset=4)], Call(Attribute(Name('os', Load(), lineno=48, col_offset=8), 'open', Load(), lineno=48, col_offset=8), [Name('source', Load(), lineno=48, col_offset=16), BinOp(Attribute(Name('os', Load(), lineno=48, col_offset=24), 'O_RDONLY', Load(), lineno=48, col_offset=24), BitOr(), Attribute(Name('os', Load(), lineno=48, col_offset=38), 'O_BINARY', Load(), lineno=48, col_offset=38), lineno=48, col_offset=24)], [], None, None, lineno=48, col_offset=8), lineno=48, col_offset=4), If(Call(Attribute(Name('os', Load(), lineno=49, col_offset=7), 'isatty', Load(), lineno=49, col_offset=7), [Name('s', Load(), lineno=49, col_offset=17)], [], None, None, lineno=49, col_offset=7), [Raise(Name('OSError', Load(), lineno=50, col_offset=14), Tuple([Attribute(Name('errno', Load(), lineno=50, col_offset=24), 'EXDEV', Load(), lineno=50, col_offset=24), Str('Cross-device link', lineno=50, col_offset=37)], Load(), lineno=50, col_offset=24), None, lineno=50, col_offset=8)], [], lineno=49, col_offset=4), Assign([Name('data', Store(), lineno=51, col_offset=4)], Call(Attribute(Name('os', Load(), lineno=51, col_offset=11), 'read', Load(), lineno=51, col_offset=11), [Name('s', Load(), lineno=51, col_offset=19), Num(1024, lineno=51, col_offset=22)], [], None, None, lineno=51, col_offset=11), lineno=51, col_offset=4), TryExcept([Assign([Name('t', Store(), lineno=54, col_offset=8)], Call(Attribute(Name('os', Load(), lineno=54, col_offset=12), 'open', Load(), lineno=54, col_offset=12), [Name('target', Load(), lineno=54, col_offset=20), BinOp(BinOp(BinOp(Attribute(Name('os', Load(), lineno=54, col_offset=28), 'O_WRONLY', Load(), lineno=54, col_offset=28), BitOr(), Attribute(Name('os', Load(), lineno=54, col_offset=42), 'O_BINARY', Load(), lineno=54, col_offset=42), lineno=54, col_offset=28), BitOr(), Attribute(Name('os', Load(), lineno=54, col_offset=56), 'O_CREAT', Load(), lineno=54, col_offset=56), lineno=54, col_offset=54), BitOr(), Attribute(Name('os', Load(), lineno=54, col_offset=69), 'O_EXCL', Load(), lineno=54, col_offset=69), lineno=54, col_offset=67)], [], None, None, lineno=54, col_offset=12), lineno=54, col_offset=8)], [ExceptHandler(Name('OSError', Load(), lineno=55, col_offset=11), None, [Expr(Call(Attribute(Name('os', Load(), lineno=56, col_offset=8), 'close', Load(), lineno=56, col_offset=8), [Name('s', Load(), lineno=56, col_offset=17)], [], None, None, lineno=56, col_offset=8), lineno=56, col_offset=8), Raise(None, None, None, lineno=57, col_offset=8)], lineno=55, col_offset=4)], [], lineno=53, col_offset=4), TryExcept([While(Name('data', Load(), lineno=60, col_offset=14), [Expr(Call(Attribute(Name('os', Load(), lineno=61, col_offset=12), 'write', Load(), lineno=61, col_offset=12), [Name('t', Load(), lineno=61, col_offset=21), Name('data', Load(), lineno=61, col_offset=24)], [], None, None, lineno=61, col_offset=12), lineno=61, col_offset=12), Assign([Name('data', Store(), lineno=62, col_offset=12)], Call(Attribute(Name('os', Load(), lineno=62, col_offset=19), 'read', Load(), lineno=62, col_offset=19), [Name('s', Load(), lineno=62, col_offset=27), Num(1024, lineno=62, col_offset=30)], [], None, None, lineno=62, col_offset=19), lineno=62, col_offset=12)], [], lineno=60, col_offset=8)], [ExceptHandler(Name('OSError', Load(), lineno=63, col_offset=11), None, [Expr(Call(Attribute(Name('os', Load(), lineno=64, col_offset=8), 'close', Load(), lineno=64, col_offset=8), [Name('s', Load(), lineno=64, col_offset=17)], [], None, None, lineno=64, col_offset=8), lineno=64, col_offset=8), Expr(Call(Attribute(Name('os', Load(), lineno=65, col_offset=8), 'close', Load(), lineno=65, col_offset=8), [Name('t', Load(), lineno=65, col_offset=17)], [], None, None, lineno=65, col_offset=8), lineno=65, col_offset=8), Expr(Call(Attribute(Name('os', Load(), lineno=66, col_offset=8), 'unlink', Load(), lineno=66, col_offset=8), [Name('target', Load(), lineno=66, col_offset=18)], [], None, None, lineno=66, col_offset=8), lineno=66, col_offset=8), Raise(None, None, None, lineno=67, col_offset=8)], lineno=63, col_offset=4)], [], lineno=59, col_offset=4), Expr(Call(Attribute(Name('os', Load(), lineno=69, col_offset=4), 'close', Load(), lineno=69, col_offset=4), [Name('s', Load(), lineno=69, col_offset=13)], [], None, None, lineno=69, col_offset=4), lineno=69, col_offset=4), Expr(Call(Attribute(Name('os', Load(), lineno=70, col_offset=4), 'close', Load(), lineno=70, col_offset=4), [Name('t', Load(), lineno=70, col_offset=13)], [], None, None, lineno=70, col_offset=4), lineno=70, col_offset=4)], [], lineno=41, col_offset=0), If(Compare(Name('__name__', Load(), lineno=72, col_offset=3), [Eq()], [Str('__main__', lineno=72, col_offset=15)], lineno=72, col_offset=3), [Import([alias('sys', None)], lineno=73, col_offset=4), TryExcept([Expr(Call(Name('link', Load(), lineno=75, col_offset=8), [Subscript(Attribute(Name('sys', Load(), lineno=75, col_offset=13), 'argv', Load(), lineno=75, col_offset=13), Index(Num(1, lineno=75, col_offset=22)), Load(), lineno=75, col_offset=13), Subscript(Attribute(Name('sys', Load(), lineno=75, col_offset=26), 'argv', Load(), lineno=75, col_offset=26), Index(Num(2, lineno=75, col_offset=35)), Load(), lineno=75, col_offset=26)], [], None, None, lineno=75, col_offset=8), lineno=75, col_offset=8)], [ExceptHandler(Name('IndexError', Load(), lineno=76, col_offset=11), None, [Print(None, [Str('Usage: emx_link <source> <target>', lineno=77, col_offset=14)], True, lineno=77, col_offset=8)], lineno=76, col_offset=4), ExceptHandler(Name('OSError', Load(), lineno=78, col_offset=11), None, [Print(None, [BinOp(Str('emx_link: %s', lineno=79, col_offset=14), Mod(), Call(Name('str', Load(), lineno=79, col_offset=31), [Subscript(Call(Attribute(Name('sys', Load(), lineno=79, col_offset=35), 'exc_info', Load(), lineno=79, col_offset=35), [], [], None, None, lineno=79, col_offset=35), Index(Num(1, lineno=79, col_offset=50)), Load(), lineno=79, col_offset=35)], [], None, None, lineno=79, col_offset=31), lineno=79, col_offset=14)], True, lineno=79, col_offset=8)], lineno=78, col_offset=4)], [], lineno=74, col_offset=4)], [], lineno=72, col_offset=0)])
