Module([Expr(Str('Suite Required: Terms that every application should support\nLevel 1, version 1\n\nGenerated from /Volumes/Sap/Applications (Mac OS 9)/Metrowerks CodeWarrior 7.0/Metrowerks CodeWarrior/CodeWarrior IDE 4.2.5\nAETE/AEUT resource version 1/0, language 0, script 0\n', lineno=6, col_offset=-1), lineno=6, col_offset=-1), Import([alias('aetools', None)], lineno=8, col_offset=0), Import([alias('MacOS', None)], lineno=9, col_offset=0), Assign([Name('_code', Store(), lineno=11, col_offset=0)], Str('reqd', lineno=11, col_offset=8), lineno=11, col_offset=0), ImportFrom('StdSuites.Required_Suite', [alias('*', None)], 0, lineno=13, col_offset=0), ClassDef('Required_Events', [Name('Required_Suite_Events', Load(), lineno=14, col_offset=22)], [Assign([Name('_argmap_open', Store(), lineno=16, col_offset=4)], Dict([Str('converting', lineno=17, col_offset=8)], [Str('Conv', lineno=17, col_offset=23)], lineno=16, col_offset=19), lineno=16, col_offset=4), FunctionDef('open', arguments([Name('self', Param(), lineno=20, col_offset=13), Name('_object', Param(), lineno=20, col_offset=19), Name('_attributes', Param(), lineno=20, col_offset=28)], None, '_arguments', [Dict([], [], lineno=20, col_offset=40)]), [Expr(Str('open: Open the specified object(s)\n        Required argument: list of objects to open\n        Keyword argument converting: Whether to convert project to latest version (yes/no; default is ask).\n        Keyword argument _attributes: AppleEvent attribute dictionary\n        ', lineno=25, col_offset=-1), lineno=25, col_offset=-1), Assign([Name('_code', Store(), lineno=26, col_offset=8)], Str('aevt', lineno=26, col_offset=16), lineno=26, col_offset=8), Assign([Name('_subcode', Store(), lineno=27, col_offset=8)], Str('odoc', lineno=27, col_offset=19), lineno=27, col_offset=8), Expr(Call(Attribute(Name('aetools', Load(), lineno=29, col_offset=8), 'keysubst', Load(), lineno=29, col_offset=8), [Name('_arguments', Load(), lineno=29, col_offset=25), Attribute(Name('self', Load(), lineno=29, col_offset=37), '_argmap_open', Load(), lineno=29, col_offset=37)], [], None, None, lineno=29, col_offset=8), lineno=29, col_offset=8), Assign([Subscript(Name('_arguments', Load(), lineno=30, col_offset=8), Index(Str('----', lineno=30, col_offset=19)), Store(), lineno=30, col_offset=8)], Name('_object', Load(), lineno=30, col_offset=29), lineno=30, col_offset=8), Expr(Call(Attribute(Name('aetools', Load(), lineno=32, col_offset=8), 'enumsubst', Load(), lineno=32, col_offset=8), [Name('_arguments', Load(), lineno=32, col_offset=26), Str('Conv', lineno=32, col_offset=38), Name('_Enum_Conv', Load(), lineno=32, col_offset=46)], [], None, None, lineno=32, col_offset=8), lineno=32, col_offset=8), Assign([Tuple([Name('_reply', Store(), lineno=34, col_offset=8), Name('_arguments', Store(), lineno=34, col_offset=16), Name('_attributes', Store(), lineno=34, col_offset=28)], Store(), lineno=34, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=34, col_offset=42), 'send', Load(), lineno=34, col_offset=42), [Name('_code', Load(), lineno=34, col_offset=52), Name('_subcode', Load(), lineno=34, col_offset=59), Name('_arguments', Load(), lineno=35, col_offset=16), Name('_attributes', Load(), lineno=35, col_offset=28)], [], None, None, lineno=34, col_offset=42), lineno=34, col_offset=8), If(Call(Attribute(Name('_arguments', Load(), lineno=36, col_offset=11), 'get', Load(), lineno=36, col_offset=11), [Str('errn', lineno=36, col_offset=26), Num(0, lineno=36, col_offset=34)], [], None, None, lineno=36, col_offset=11), [Raise(Attribute(Name('aetools', Load(), lineno=37, col_offset=18), 'Error', Load(), lineno=37, col_offset=18), Call(Attribute(Name('aetools', Load(), lineno=37, col_offset=33), 'decodeerror', Load(), lineno=37, col_offset=33), [Name('_arguments', Load(), lineno=37, col_offset=53)], [], None, None, lineno=37, col_offset=33), None, lineno=37, col_offset=12)], [], lineno=36, col_offset=8), If(Call(Attribute(Name('_arguments', Load(), lineno=39, col_offset=11), 'has_key', Load(), lineno=39, col_offset=11), [Str('----', lineno=39, col_offset=30)], [], None, None, lineno=39, col_offset=11), [Return(Subscript(Name('_arguments', Load(), lineno=40, col_offset=19), Index(Str('----', lineno=40, col_offset=30)), Load(), lineno=40, col_offset=19), lineno=40, col_offset=12)], [], lineno=39, col_offset=8)], [], lineno=20, col_offset=4)], [], lineno=14, col_offset=0), Assign([Name('_Enum_Conv', Store(), lineno=42, col_offset=0)], Dict([Str('yes', lineno=43, col_offset=4), Str('no', lineno=44, col_offset=4)], [Str('yes ', lineno=43, col_offset=12), Str('no  ', lineno=44, col_offset=11)], lineno=42, col_offset=13), lineno=42, col_offset=0), Assign([Name('_classdeclarations', Store(), lineno=51, col_offset=0)], Dict([], [], lineno=51, col_offset=21), lineno=51, col_offset=0), Assign([Name('_propdeclarations', Store(), lineno=54, col_offset=0)], Dict([], [], lineno=54, col_offset=20), lineno=54, col_offset=0), Assign([Name('_compdeclarations', Store(), lineno=57, col_offset=0)], Dict([], [], lineno=57, col_offset=20), lineno=57, col_offset=0), Assign([Name('_enumdeclarations', Store(), lineno=60, col_offset=0)], Dict([Str('Conv', lineno=61, col_offset=4)], [Name('_Enum_Conv', Load(), lineno=61, col_offset=13)], lineno=60, col_offset=20), lineno=60, col_offset=0)])
