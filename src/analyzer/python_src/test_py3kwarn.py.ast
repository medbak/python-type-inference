Module([Import([alias('unittest', None)], lineno=1, col_offset=0), Import([alias('sys', None)], lineno=2, col_offset=0), ImportFrom('test.test_support', [alias('check_py3k_warnings', None), alias('CleanImport', None), alias('run_unittest', None)], 0, lineno=3, col_offset=0), Import([alias('warnings', None)], lineno=4, col_offset=0), If(UnaryOp(Not(), Attribute(Name('sys', Load(), lineno=6, col_offset=7), 'py3kwarning', Load(), lineno=6, col_offset=7), lineno=6, col_offset=3), [Raise(Call(Attribute(Name('unittest', Load(), lineno=7, col_offset=10), 'SkipTest', Load(), lineno=7, col_offset=10), [BinOp(Str('%s must be run with the -3 flag', lineno=7, col_offset=28), Mod(), Name('__name__', Load(), lineno=7, col_offset=64), lineno=7, col_offset=28)], [], None, None, lineno=7, col_offset=10), None, None, lineno=7, col_offset=4)], [], lineno=6, col_offset=0), TryExcept([ImportFrom('test.test_support', [alias('__warningregistry__', '_registry')], 0, lineno=10, col_offset=4)], [ExceptHandler(Name('ImportError', Load(), lineno=11, col_offset=7), None, [FunctionDef('check_deprecated_module', arguments([Name('module_name', Param(), lineno=12, col_offset=32)], None, None, []), [Return(Name('False', Load(), lineno=13, col_offset=15), lineno=13, col_offset=8)], [], lineno=12, col_offset=4)], lineno=11, col_offset=0)], [Assign([Name('past_warnings', Store(), lineno=15, col_offset=4)], Call(Attribute(Name('_registry', Load(), lineno=15, col_offset=20), 'keys', Load(), lineno=15, col_offset=20), [], [], None, None, lineno=15, col_offset=20), lineno=15, col_offset=4), Delete([Name('_registry', Del(), lineno=16, col_offset=8)], lineno=16, col_offset=4), FunctionDef('check_deprecated_module', arguments([Name('module_name', Param(), lineno=17, col_offset=32)], None, None, []), [Expr(Str('Lookup the past warnings for module already loaded using\n        test_support.import_module(..., deprecated=True)\n        ', lineno=20, col_offset=-1), lineno=20, col_offset=-1), Return(Call(Name('any', Load(), lineno=21, col_offset=15), [GeneratorExp(BoolOp(And(), [Compare(Name('module_name', Load(), lineno=21, col_offset=19), [In()], [Name('msg', Load(), lineno=21, col_offset=34)], lineno=21, col_offset=19), Compare(Str(' removed', lineno=21, col_offset=42), [In()], [Name('msg', Load(), lineno=21, col_offset=56)], lineno=21, col_offset=42), Call(Name('issubclass', Load(), lineno=22, col_offset=23), [Name('cls', Load(), lineno=22, col_offset=34), Name('DeprecationWarning', Load(), lineno=22, col_offset=39)], [], None, None, lineno=22, col_offset=23), BoolOp(Or(), [Compare(Str(' module', lineno=23, col_offset=24), [In()], [Name('msg', Load(), lineno=23, col_offset=37)], lineno=23, col_offset=24), Compare(Str(' package', lineno=23, col_offset=44), [In()], [Name('msg', Load(), lineno=23, col_offset=58)], lineno=23, col_offset=44)], lineno=23, col_offset=24)], lineno=21, col_offset=19), [comprehension(Tuple([Name('msg', Store(), lineno=24, col_offset=24), Name('cls', Store(), lineno=24, col_offset=29), Name('line', Store(), lineno=24, col_offset=34)], Store(), lineno=24, col_offset=24), Name('past_warnings', Load(), lineno=24, col_offset=43), [])], lineno=21, col_offset=19)], [], None, None, lineno=21, col_offset=15), lineno=21, col_offset=8)], [], lineno=17, col_offset=4)], lineno=9, col_offset=0), FunctionDef('reset_module_registry', arguments([Name('module', Param(), lineno=26, col_offset=26)], None, None, []), [TryExcept([Assign([Name('registry', Store(), lineno=28, col_offset=8)], Attribute(Name('module', Load(), lineno=28, col_offset=19), '__warningregistry__', Load(), lineno=28, col_offset=19), lineno=28, col_offset=8)], [ExceptHandler(Name('AttributeError', Load(), lineno=29, col_offset=11), None, [Pass( lineno=30, col_offset=8)], lineno=29, col_offset=4)], [Expr(Call(Attribute(Name('registry', Load(), lineno=32, col_offset=8), 'clear', Load(), lineno=32, col_offset=8), [], [], None, None, lineno=32, col_offset=8), lineno=32, col_offset=8)], lineno=27, col_offset=4)], [], lineno=26, col_offset=0), ClassDef('TestPy3KWarnings', [Attribute(Name('unittest', Load(), lineno=34, col_offset=23), 'TestCase', Load(), lineno=34, col_offset=23)], [FunctionDef('assertWarning', arguments([Name('self', Param(), lineno=36, col_offset=22), Name('_', Param(), lineno=36, col_offset=28), Name('warning', Param(), lineno=36, col_offset=31), Name('expected_message', Param(), lineno=36, col_offset=40)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=37, col_offset=8), 'assertEqual', Load(), lineno=37, col_offset=8), [Call(Name('str', Load(), lineno=37, col_offset=25), [Attribute(Name('warning', Load(), lineno=37, col_offset=29), 'message', Load(), lineno=37, col_offset=29)], [], None, None, lineno=37, col_offset=25), Name('expected_message', Load(), lineno=37, col_offset=47)], [], None, None, lineno=37, col_offset=8), lineno=37, col_offset=8)], [], lineno=36, col_offset=4), FunctionDef('assertNoWarning', arguments([Name('self', Param(), lineno=39, col_offset=24), Name('_', Param(), lineno=39, col_offset=30), Name('recorder', Param(), lineno=39, col_offset=33)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=40, col_offset=8), 'assertEqual', Load(), lineno=40, col_offset=8), [Call(Name('len', Load(), lineno=40, col_offset=25), [Attribute(Name('recorder', Load(), lineno=40, col_offset=29), 'warnings', Load(), lineno=40, col_offset=29)], [], None, None, lineno=40, col_offset=25), Num(0, lineno=40, col_offset=49)], [], None, None, lineno=40, col_offset=8), lineno=40, col_offset=8)], [], lineno=39, col_offset=4), FunctionDef('test_backquote', arguments([Name('self', Param(), lineno=42, col_offset=23)], None, None, []), [Assign([Name('expected', Store(), lineno=43, col_offset=8)], Str('backquote not supported in 3.x; use repr()', lineno=43, col_offset=19), lineno=43, col_offset=8), With(Call(Name('check_py3k_warnings', Load(), lineno=44, col_offset=13), [Tuple([Name('expected', Load(), lineno=44, col_offset=34), Name('SyntaxWarning', Load(), lineno=44, col_offset=44)], Load(), lineno=44, col_offset=34)], [], None, None, lineno=44, col_offset=13), None, [Exec(Str('`2`', lineno=45, col_offset=17), Dict([], [], lineno=45, col_offset=26), None, lineno=45, col_offset=12)], lineno=44, col_offset=13)], [], lineno=42, col_offset=4), FunctionDef('test_paren_arg_names', arguments([Name('self', Param(), lineno=47, col_offset=29)], None, None, []), [Assign([Name('expected', Store(), lineno=48, col_offset=8)], Str('parenthesized argument names are invalid in 3.x', lineno=48, col_offset=19), lineno=48, col_offset=8), FunctionDef('check', arguments([Name('s', Param(), lineno=49, col_offset=18)], None, None, []), [With(Call(Name('check_py3k_warnings', Load(), lineno=50, col_offset=17), [Tuple([Name('expected', Load(), lineno=50, col_offset=38), Name('SyntaxWarning', Load(), lineno=50, col_offset=48)], Load(), lineno=50, col_offset=38)], [], None, None, lineno=50, col_offset=17), None, [Exec(Name('s', Load(), lineno=51, col_offset=21), Dict([], [], lineno=51, col_offset=26), None, lineno=51, col_offset=16)], lineno=50, col_offset=17)], [], lineno=49, col_offset=8), Expr(Call(Name('check', Load(), lineno=52, col_offset=8), [Str('def f((x)): pass', lineno=52, col_offset=14)], [], None, None, lineno=52, col_offset=8), lineno=52, col_offset=8), Expr(Call(Name('check', Load(), lineno=53, col_offset=8), [Str('def f((((x))), (y)): pass', lineno=53, col_offset=14)], [], None, None, lineno=53, col_offset=8), lineno=53, col_offset=8), Expr(Call(Name('check', Load(), lineno=54, col_offset=8), [Str('def f((x), (((y))), m=32): pass', lineno=54, col_offset=14)], [], None, None, lineno=54, col_offset=8), lineno=54, col_offset=8)], [], lineno=47, col_offset=4), FunctionDef('test_forbidden_names', arguments([Name('self', Param(), lineno=58, col_offset=29)], None, None, []), [FunctionDef('safe_exec', arguments([Name('expr', Param(), lineno=60, col_offset=22)], None, None, []), [FunctionDef('f', arguments([], None, 'kwargs', []), [Pass( lineno=61, col_offset=29)], [], lineno=61, col_offset=12), Exec(Name('expr', Load(), lineno=62, col_offset=17), Dict([Str('f', lineno=62, col_offset=26)], [Name('f', Load(), lineno=62, col_offset=32)], lineno=62, col_offset=25), None, lineno=62, col_offset=12)], [], lineno=60, col_offset=8), Assign([Name('tests', Store(), lineno=64, col_offset=8)], List([Tuple([Str('True', lineno=64, col_offset=18), Str('assignment to True or False is forbidden in 3.x', lineno=64, col_offset=26)], Load(), lineno=64, col_offset=18), Tuple([Str('False', lineno=65, col_offset=18), Str('assignment to True or False is forbidden in 3.x', lineno=65, col_offset=27)], Load(), lineno=65, col_offset=18), Tuple([Str('nonlocal', lineno=66, col_offset=18), Str('nonlocal is a keyword in 3.x', lineno=66, col_offset=30)], Load(), lineno=66, col_offset=18)], Load(), lineno=64, col_offset=16), lineno=64, col_offset=8), With(Call(Name('check_py3k_warnings', Load(), lineno=67, col_offset=13), [Tuple([Str('', lineno=67, col_offset=34), Name('SyntaxWarning', Load(), lineno=67, col_offset=38)], Load(), lineno=67, col_offset=34)], [], None, None, lineno=67, col_offset=13), Name('w', Store(), lineno=67, col_offset=57), [For(Tuple([Name('keyword', Store(), lineno=68, col_offset=16), Name('expected', Store(), lineno=68, col_offset=25)], Store(), lineno=68, col_offset=16), Name('tests', Load(), lineno=68, col_offset=37), [Expr(Call(Name('safe_exec', Load(), lineno=69, col_offset=16), [Call(Attribute(Str('{0} = False', lineno=69, col_offset=26), 'format', Load(), lineno=69, col_offset=26), [Name('keyword', Load(), lineno=69, col_offset=47)], [], None, None, lineno=69, col_offset=26)], [], None, None, lineno=69, col_offset=16), lineno=69, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=70, col_offset=16), 'assertWarning', Load(), lineno=70, col_offset=16), [Name('None', Load(), lineno=70, col_offset=35), Name('w', Load(), lineno=70, col_offset=41), Name('expected', Load(), lineno=70, col_offset=44)], [], None, None, lineno=70, col_offset=16), lineno=70, col_offset=16), Expr(Call(Attribute(Name('w', Load(), lineno=71, col_offset=16), 'reset', Load(), lineno=71, col_offset=16), [], [], None, None, lineno=71, col_offset=16), lineno=71, col_offset=16), TryExcept([Expr(Call(Name('safe_exec', Load(), lineno=73, col_offset=20), [Call(Attribute(Str('obj.{0} = True', lineno=73, col_offset=30), 'format', Load(), lineno=73, col_offset=30), [Name('keyword', Load(), lineno=73, col_offset=54)], [], None, None, lineno=73, col_offset=30)], [], None, None, lineno=73, col_offset=20), lineno=73, col_offset=20)], [ExceptHandler(Name('NameError', Load(), lineno=74, col_offset=23), None, [Pass( lineno=75, col_offset=20)], lineno=74, col_offset=16)], [], lineno=72, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=76, col_offset=16), 'assertWarning', Load(), lineno=76, col_offset=16), [Name('None', Load(), lineno=76, col_offset=35), Name('w', Load(), lineno=76, col_offset=41), Name('expected', Load(), lineno=76, col_offset=44)], [], None, None, lineno=76, col_offset=16), lineno=76, col_offset=16), Expr(Call(Attribute(Name('w', Load(), lineno=77, col_offset=16), 'reset', Load(), lineno=77, col_offset=16), [], [], None, None, lineno=77, col_offset=16), lineno=77, col_offset=16), Expr(Call(Name('safe_exec', Load(), lineno=78, col_offset=16), [Call(Attribute(Str('def {0}(): pass', lineno=78, col_offset=26), 'format', Load(), lineno=78, col_offset=26), [Name('keyword', Load(), lineno=78, col_offset=51)], [], None, None, lineno=78, col_offset=26)], [], None, None, lineno=78, col_offset=16), lineno=78, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=79, col_offset=16), 'assertWarning', Load(), lineno=79, col_offset=16), [Name('None', Load(), lineno=79, col_offset=35), Name('w', Load(), lineno=79, col_offset=41), Name('expected', Load(), lineno=79, col_offset=44)], [], None, None, lineno=79, col_offset=16), lineno=79, col_offset=16), Expr(Call(Attribute(Name('w', Load(), lineno=80, col_offset=16), 'reset', Load(), lineno=80, col_offset=16), [], [], None, None, lineno=80, col_offset=16), lineno=80, col_offset=16), Expr(Call(Name('safe_exec', Load(), lineno=81, col_offset=16), [Call(Attribute(Str('class {0}: pass', lineno=81, col_offset=26), 'format', Load(), lineno=81, col_offset=26), [Name('keyword', Load(), lineno=81, col_offset=51)], [], None, None, lineno=81, col_offset=26)], [], None, None, lineno=81, col_offset=16), lineno=81, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=82, col_offset=16), 'assertWarning', Load(), lineno=82, col_offset=16), [Name('None', Load(), lineno=82, col_offset=35), Name('w', Load(), lineno=82, col_offset=41), Name('expected', Load(), lineno=82, col_offset=44)], [], None, None, lineno=82, col_offset=16), lineno=82, col_offset=16), Expr(Call(Attribute(Name('w', Load(), lineno=83, col_offset=16), 'reset', Load(), lineno=83, col_offset=16), [], [], None, None, lineno=83, col_offset=16), lineno=83, col_offset=16), Expr(Call(Name('safe_exec', Load(), lineno=84, col_offset=16), [Call(Attribute(Str('def f({0}=43): pass', lineno=84, col_offset=26), 'format', Load(), lineno=84, col_offset=26), [Name('keyword', Load(), lineno=84, col_offset=55)], [], None, None, lineno=84, col_offset=26)], [], None, None, lineno=84, col_offset=16), lineno=84, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=85, col_offset=16), 'assertWarning', Load(), lineno=85, col_offset=16), [Name('None', Load(), lineno=85, col_offset=35), Name('w', Load(), lineno=85, col_offset=41), Name('expected', Load(), lineno=85, col_offset=44)], [], None, None, lineno=85, col_offset=16), lineno=85, col_offset=16), Expr(Call(Attribute(Name('w', Load(), lineno=86, col_offset=16), 'reset', Load(), lineno=86, col_offset=16), [], [], None, None, lineno=86, col_offset=16), lineno=86, col_offset=16)], [], lineno=68, col_offset=12)], lineno=67, col_offset=13)], [], lineno=58, col_offset=4), FunctionDef('test_type_inequality_comparisons', arguments([Name('self', Param(), lineno=89, col_offset=41)], None, None, []), [Assign([Name('expected', Store(), lineno=90, col_offset=8)], Str('type inequality comparisons not supported in 3.x', lineno=90, col_offset=19), lineno=90, col_offset=8), With(Call(Name('check_py3k_warnings', Load(), lineno=91, col_offset=13), [], [], None, None, lineno=91, col_offset=13), Name('w', Store(), lineno=91, col_offset=38), [Expr(Call(Attribute(Name('self', Load(), lineno=92, col_offset=12), 'assertWarning', Load(), lineno=92, col_offset=12), [Compare(Name('int', Load(), lineno=92, col_offset=31), [Lt()], [Name('str', Load(), lineno=92, col_offset=37)], lineno=92, col_offset=31), Name('w', Load(), lineno=92, col_offset=42), Name('expected', Load(), lineno=92, col_offset=45)], [], None, None, lineno=92, col_offset=12), lineno=92, col_offset=12), Expr(Call(Attribute(Name('w', Load(), lineno=93, col_offset=12), 'reset', Load(), lineno=93, col_offset=12), [], [], None, None, lineno=93, col_offset=12), lineno=93, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=94, col_offset=12), 'assertWarning', Load(), lineno=94, col_offset=12), [Compare(Name('type', Load(), lineno=94, col_offset=31), [Lt()], [Name('object', Load(), lineno=94, col_offset=38)], lineno=94, col_offset=31), Name('w', Load(), lineno=94, col_offset=46), Name('expected', Load(), lineno=94, col_offset=49)], [], None, None, lineno=94, col_offset=12), lineno=94, col_offset=12)], lineno=91, col_offset=13)], [], lineno=89, col_offset=4), FunctionDef('test_object_inequality_comparisons', arguments([Name('self', Param(), lineno=96, col_offset=43)], None, None, []), [Assign([Name('expected', Store(), lineno=97, col_offset=8)], Str('comparing unequal types not supported in 3.x', lineno=97, col_offset=19), lineno=97, col_offset=8), With(Call(Name('check_py3k_warnings', Load(), lineno=98, col_offset=13), [], [], None, None, lineno=98, col_offset=13), Name('w', Store(), lineno=98, col_offset=38), [Expr(Call(Attribute(Name('self', Load(), lineno=99, col_offset=12), 'assertWarning', Load(), lineno=99, col_offset=12), [Compare(Name('str', Load(), lineno=99, col_offset=31), [Lt()], [List([], Load(), lineno=99, col_offset=37)], lineno=99, col_offset=31), Name('w', Load(), lineno=99, col_offset=41), Name('expected', Load(), lineno=99, col_offset=44)], [], None, None, lineno=99, col_offset=12), lineno=99, col_offset=12), Expr(Call(Attribute(Name('w', Load(), lineno=100, col_offset=12), 'reset', Load(), lineno=100, col_offset=12), [], [], None, None, lineno=100, col_offset=12), lineno=100, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=101, col_offset=12), 'assertWarning', Load(), lineno=101, col_offset=12), [Compare(Call(Name('object', Load(), lineno=101, col_offset=31), [], [], None, None, lineno=101, col_offset=31), [Lt()], [Tuple([Num(1, lineno=101, col_offset=43), Num(2, lineno=101, col_offset=46)], Load(), lineno=101, col_offset=43)], lineno=101, col_offset=31), Name('w', Load(), lineno=101, col_offset=50), Name('expected', Load(), lineno=101, col_offset=53)], [], None, None, lineno=101, col_offset=12), lineno=101, col_offset=12)], lineno=98, col_offset=13)], [], lineno=96, col_offset=4), FunctionDef('test_dict_inequality_comparisons', arguments([Name('self', Param(), lineno=103, col_offset=41)], None, None, []), [Assign([Name('expected', Store(), lineno=104, col_offset=8)], Str('dict inequality comparisons not supported in 3.x', lineno=104, col_offset=19), lineno=104, col_offset=8), With(Call(Name('check_py3k_warnings', Load(), lineno=105, col_offset=13), [], [], None, None, lineno=105, col_offset=13), Name('w', Store(), lineno=105, col_offset=38), [Expr(Call(Attribute(Name('self', Load(), lineno=106, col_offset=12), 'assertWarning', Load(), lineno=106, col_offset=12), [Compare(Dict([], [], lineno=106, col_offset=31), [Lt()], [Dict([Num(2, lineno=106, col_offset=37)], [Num(3, lineno=106, col_offset=39)], lineno=106, col_offset=36)], lineno=106, col_offset=31), Name('w', Load(), lineno=106, col_offset=43), Name('expected', Load(), lineno=106, col_offset=46)], [], None, None, lineno=106, col_offset=12), lineno=106, col_offset=12), Expr(Call(Attribute(Name('w', Load(), lineno=107, col_offset=12), 'reset', Load(), lineno=107, col_offset=12), [], [], None, None, lineno=107, col_offset=12), lineno=107, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=108, col_offset=12), 'assertWarning', Load(), lineno=108, col_offset=12), [Compare(Dict([], [], lineno=108, col_offset=31), [LtE()], [Dict([], [], lineno=108, col_offset=37)], lineno=108, col_offset=31), Name('w', Load(), lineno=108, col_offset=41), Name('expected', Load(), lineno=108, col_offset=44)], [], None, None, lineno=108, col_offset=12), lineno=108, col_offset=12), Expr(Call(Attribute(Name('w', Load(), lineno=109, col_offset=12), 'reset', Load(), lineno=109, col_offset=12), [], [], None, None, lineno=109, col_offset=12), lineno=109, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=110, col_offset=12), 'assertWarning', Load(), lineno=110, col_offset=12), [Compare(Dict([], [], lineno=110, col_offset=31), [Gt()], [Dict([Num(2, lineno=110, col_offset=37)], [Num(3, lineno=110, col_offset=39)], lineno=110, col_offset=36)], lineno=110, col_offset=31), Name('w', Load(), lineno=110, col_offset=43), Name('expected', Load(), lineno=110, col_offset=46)], [], None, None, lineno=110, col_offset=12), lineno=110, col_offset=12), Expr(Call(Attribute(Name('w', Load(), lineno=111, col_offset=12), 'reset', Load(), lineno=111, col_offset=12), [], [], None, None, lineno=111, col_offset=12), lineno=111, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=112, col_offset=12), 'assertWarning', Load(), lineno=112, col_offset=12), [Compare(Dict([Num(2, lineno=112, col_offset=32)], [Num(3, lineno=112, col_offset=34)], lineno=112, col_offset=31), [GtE()], [Dict([], [], lineno=112, col_offset=40)], lineno=112, col_offset=31), Name('w', Load(), lineno=112, col_offset=44), Name('expected', Load(), lineno=112, col_offset=47)], [], None, None, lineno=112, col_offset=12), lineno=112, col_offset=12)], lineno=105, col_offset=13)], [], lineno=103, col_offset=4), FunctionDef('test_cell_inequality_comparisons', arguments([Name('self', Param(), lineno=114, col_offset=41)], None, None, []), [Assign([Name('expected', Store(), lineno=115, col_offset=8)], Str('cell comparisons not supported in 3.x', lineno=115, col_offset=19), lineno=115, col_offset=8), FunctionDef('f', arguments([Name('x', Param(), lineno=116, col_offset=14)], None, None, []), [FunctionDef('g', arguments([], None, None, []), [Return(Name('x', Load(), lineno=118, col_offset=23), lineno=118, col_offset=16)], [], lineno=117, col_offset=12), Return(Name('g', Load(), lineno=119, col_offset=19), lineno=119, col_offset=12)], [], lineno=116, col_offset=8), Assign([Tuple([Name('cell0', Store(), lineno=120, col_offset=8)], Store(), lineno=120, col_offset=8)], Attribute(Call(Name('f', Load(), lineno=120, col_offset=17), [Num(0, lineno=120, col_offset=19)], [], None, None, lineno=120, col_offset=17), 'func_closure', Load(), lineno=120, col_offset=17), lineno=120, col_offset=8), Assign([Tuple([Name('cell1', Store(), lineno=121, col_offset=8)], Store(), lineno=121, col_offset=8)], Attribute(Call(Name('f', Load(), lineno=121, col_offset=17), [Num(1, lineno=121, col_offset=19)], [], None, None, lineno=121, col_offset=17), 'func_closure', Load(), lineno=121, col_offset=17), lineno=121, col_offset=8), With(Call(Name('check_py3k_warnings', Load(), lineno=122, col_offset=13), [], [], None, None, lineno=122, col_offset=13), Name('w', Store(), lineno=122, col_offset=38), [Expr(Call(Attribute(Name('self', Load(), lineno=123, col_offset=12), 'assertWarning', Load(), lineno=123, col_offset=12), [Compare(Name('cell0', Load(), lineno=123, col_offset=31), [Eq()], [Name('cell1', Load(), lineno=123, col_offset=40)], lineno=123, col_offset=31), Name('w', Load(), lineno=123, col_offset=47), Name('expected', Load(), lineno=123, col_offset=50)], [], None, None, lineno=123, col_offset=12), lineno=123, col_offset=12), Expr(Call(Attribute(Name('w', Load(), lineno=124, col_offset=12), 'reset', Load(), lineno=124, col_offset=12), [], [], None, None, lineno=124, col_offset=12), lineno=124, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=125, col_offset=12), 'assertWarning', Load(), lineno=125, col_offset=12), [Compare(Name('cell0', Load(), lineno=125, col_offset=31), [Lt()], [Name('cell1', Load(), lineno=125, col_offset=39)], lineno=125, col_offset=31), Name('w', Load(), lineno=125, col_offset=46), Name('expected', Load(), lineno=125, col_offset=49)], [], None, None, lineno=125, col_offset=12), lineno=125, col_offset=12)], lineno=122, col_offset=13)], [], lineno=114, col_offset=4), FunctionDef('test_code_inequality_comparisons', arguments([Name('self', Param(), lineno=127, col_offset=41)], None, None, []), [Assign([Name('expected', Store(), lineno=128, col_offset=8)], Str('code inequality comparisons not supported in 3.x', lineno=128, col_offset=19), lineno=128, col_offset=8), FunctionDef('f', arguments([Name('x', Param(), lineno=129, col_offset=14)], None, None, []), [Pass( lineno=130, col_offset=12)], [], lineno=129, col_offset=8), FunctionDef('g', arguments([Name('x', Param(), lineno=131, col_offset=14)], None, None, []), [Pass( lineno=132, col_offset=12)], [], lineno=131, col_offset=8), With(Call(Name('check_py3k_warnings', Load(), lineno=133, col_offset=13), [], [], None, None, lineno=133, col_offset=13), Name('w', Store(), lineno=133, col_offset=38), [Expr(Call(Attribute(Name('self', Load(), lineno=134, col_offset=12), 'assertWarning', Load(), lineno=134, col_offset=12), [Compare(Attribute(Name('f', Load(), lineno=134, col_offset=31), 'func_code', Load(), lineno=134, col_offset=31), [Lt()], [Attribute(Name('g', Load(), lineno=134, col_offset=45), 'func_code', Load(), lineno=134, col_offset=45)], lineno=134, col_offset=31), Name('w', Load(), lineno=134, col_offset=58), Name('expected', Load(), lineno=134, col_offset=61)], [], None, None, lineno=134, col_offset=12), lineno=134, col_offset=12), Expr(Call(Attribute(Name('w', Load(), lineno=135, col_offset=12), 'reset', Load(), lineno=135, col_offset=12), [], [], None, None, lineno=135, col_offset=12), lineno=135, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=136, col_offset=12), 'assertWarning', Load(), lineno=136, col_offset=12), [Compare(Attribute(Name('f', Load(), lineno=136, col_offset=31), 'func_code', Load(), lineno=136, col_offset=31), [LtE()], [Attribute(Name('g', Load(), lineno=136, col_offset=46), 'func_code', Load(), lineno=136, col_offset=46)], lineno=136, col_offset=31), Name('w', Load(), lineno=136, col_offset=59), Name('expected', Load(), lineno=136, col_offset=62)], [], None, None, lineno=136, col_offset=12), lineno=136, col_offset=12), Expr(Call(Attribute(Name('w', Load(), lineno=137, col_offset=12), 'reset', Load(), lineno=137, col_offset=12), [], [], None, None, lineno=137, col_offset=12), lineno=137, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=138, col_offset=12), 'assertWarning', Load(), lineno=138, col_offset=12), [Compare(Attribute(Name('f', Load(), lineno=138, col_offset=31), 'func_code', Load(), lineno=138, col_offset=31), [GtE()], [Attribute(Name('g', Load(), lineno=138, col_offset=46), 'func_code', Load(), lineno=138, col_offset=46)], lineno=138, col_offset=31), Name('w', Load(), lineno=138, col_offset=59), Name('expected', Load(), lineno=138, col_offset=62)], [], None, None, lineno=138, col_offset=12), lineno=138, col_offset=12), Expr(Call(Attribute(Name('w', Load(), lineno=139, col_offset=12), 'reset', Load(), lineno=139, col_offset=12), [], [], None, None, lineno=139, col_offset=12), lineno=139, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=140, col_offset=12), 'assertWarning', Load(), lineno=140, col_offset=12), [Compare(Attribute(Name('f', Load(), lineno=140, col_offset=31), 'func_code', Load(), lineno=140, col_offset=31), [Gt()], [Attribute(Name('g', Load(), lineno=140, col_offset=45), 'func_code', Load(), lineno=140, col_offset=45)], lineno=140, col_offset=31), Name('w', Load(), lineno=140, col_offset=58), Name('expected', Load(), lineno=140, col_offset=61)], [], None, None, lineno=140, col_offset=12), lineno=140, col_offset=12)], lineno=133, col_offset=13)], [], lineno=127, col_offset=4), FunctionDef('test_builtin_function_or_method_comparisons', arguments([Name('self', Param(), lineno=142, col_offset=52)], None, None, []), [Assign([Name('expected', Store(), lineno=143, col_offset=8)], Str('builtin_function_or_method order comparisons not supported in 3.x', lineno=143, col_offset=20), lineno=143, col_offset=8), Assign([Name('func', Store(), lineno=145, col_offset=8)], Name('eval', Load(), lineno=145, col_offset=15), lineno=145, col_offset=8), Assign([Name('meth', Store(), lineno=146, col_offset=8)], Attribute(Dict([], [], lineno=146, col_offset=15), 'get', Load(), lineno=146, col_offset=15), lineno=146, col_offset=8), With(Call(Name('check_py3k_warnings', Load(), lineno=147, col_offset=13), [], [], None, None, lineno=147, col_offset=13), Name('w', Store(), lineno=147, col_offset=38), [Expr(Call(Attribute(Name('self', Load(), lineno=148, col_offset=12), 'assertWarning', Load(), lineno=148, col_offset=12), [Compare(Name('func', Load(), lineno=148, col_offset=31), [Lt()], [Name('meth', Load(), lineno=148, col_offset=38)], lineno=148, col_offset=31), Name('w', Load(), lineno=148, col_offset=44), Name('expected', Load(), lineno=148, col_offset=47)], [], None, None, lineno=148, col_offset=12), lineno=148, col_offset=12), Expr(Call(Attribute(Name('w', Load(), lineno=149, col_offset=12), 'reset', Load(), lineno=149, col_offset=12), [], [], None, None, lineno=149, col_offset=12), lineno=149, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=150, col_offset=12), 'assertWarning', Load(), lineno=150, col_offset=12), [Compare(Name('func', Load(), lineno=150, col_offset=31), [Gt()], [Name('meth', Load(), lineno=150, col_offset=38)], lineno=150, col_offset=31), Name('w', Load(), lineno=150, col_offset=44), Name('expected', Load(), lineno=150, col_offset=47)], [], None, None, lineno=150, col_offset=12), lineno=150, col_offset=12), Expr(Call(Attribute(Name('w', Load(), lineno=151, col_offset=12), 'reset', Load(), lineno=151, col_offset=12), [], [], None, None, lineno=151, col_offset=12), lineno=151, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=152, col_offset=12), 'assertWarning', Load(), lineno=152, col_offset=12), [Compare(Name('meth', Load(), lineno=152, col_offset=31), [LtE()], [Name('func', Load(), lineno=152, col_offset=39)], lineno=152, col_offset=31), Name('w', Load(), lineno=152, col_offset=45), Name('expected', Load(), lineno=152, col_offset=48)], [], None, None, lineno=152, col_offset=12), lineno=152, col_offset=12), Expr(Call(Attribute(Name('w', Load(), lineno=153, col_offset=12), 'reset', Load(), lineno=153, col_offset=12), [], [], None, None, lineno=153, col_offset=12), lineno=153, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=154, col_offset=12), 'assertWarning', Load(), lineno=154, col_offset=12), [Compare(Name('meth', Load(), lineno=154, col_offset=31), [GtE()], [Name('func', Load(), lineno=154, col_offset=39)], lineno=154, col_offset=31), Name('w', Load(), lineno=154, col_offset=45), Name('expected', Load(), lineno=154, col_offset=48)], [], None, None, lineno=154, col_offset=12), lineno=154, col_offset=12), Expr(Call(Attribute(Name('w', Load(), lineno=155, col_offset=12), 'reset', Load(), lineno=155, col_offset=12), [], [], None, None, lineno=155, col_offset=12), lineno=155, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=156, col_offset=12), 'assertNoWarning', Load(), lineno=156, col_offset=12), [Compare(Name('meth', Load(), lineno=156, col_offset=33), [Eq()], [Name('func', Load(), lineno=156, col_offset=41)], lineno=156, col_offset=33), Name('w', Load(), lineno=156, col_offset=47)], [], None, None, lineno=156, col_offset=12), lineno=156, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=157, col_offset=12), 'assertNoWarning', Load(), lineno=157, col_offset=12), [Compare(Name('meth', Load(), lineno=157, col_offset=33), [NotEq()], [Name('func', Load(), lineno=157, col_offset=41)], lineno=157, col_offset=33), Name('w', Load(), lineno=157, col_offset=47)], [], None, None, lineno=157, col_offset=12), lineno=157, col_offset=12), Assign([Name('lam', Store(), lineno=158, col_offset=12)], Lambda(arguments([Name('x', Param(), lineno=158, col_offset=25)], None, None, []), Name('x', Load(), lineno=158, col_offset=28), lineno=158, col_offset=18), lineno=158, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=159, col_offset=12), 'assertNoWarning', Load(), lineno=159, col_offset=12), [Compare(Name('lam', Load(), lineno=159, col_offset=33), [Eq()], [Name('func', Load(), lineno=159, col_offset=40)], lineno=159, col_offset=33), Name('w', Load(), lineno=159, col_offset=46)], [], None, None, lineno=159, col_offset=12), lineno=159, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=160, col_offset=12), 'assertNoWarning', Load(), lineno=160, col_offset=12), [Compare(Name('lam', Load(), lineno=160, col_offset=33), [NotEq()], [Name('func', Load(), lineno=160, col_offset=40)], lineno=160, col_offset=33), Name('w', Load(), lineno=160, col_offset=46)], [], None, None, lineno=160, col_offset=12), lineno=160, col_offset=12)], lineno=147, col_offset=13)], [], lineno=142, col_offset=4), FunctionDef('test_frame_attributes', arguments([Name('self', Param(), lineno=162, col_offset=30)], None, None, []), [Assign([Name('template', Store(), lineno=163, col_offset=8)], Str('%s has been removed in 3.x', lineno=163, col_offset=19), lineno=163, col_offset=8), Assign([Name('f', Store(), lineno=164, col_offset=8)], Call(Attribute(Name('sys', Load(), lineno=164, col_offset=12), '_getframe', Load(), lineno=164, col_offset=12), [Num(0, lineno=164, col_offset=26)], [], None, None, lineno=164, col_offset=12), lineno=164, col_offset=8), For(Name('attr', Store(), lineno=165, col_offset=12), Tuple([Str('f_exc_traceback', lineno=165, col_offset=21), Str('f_exc_value', lineno=165, col_offset=40), Str('f_exc_type', lineno=165, col_offset=55)], Load(), lineno=165, col_offset=21), [Assign([Name('expected', Store(), lineno=166, col_offset=12)], BinOp(Name('template', Load(), lineno=166, col_offset=23), Mod(), Name('attr', Load(), lineno=166, col_offset=34), lineno=166, col_offset=23), lineno=166, col_offset=12), With(Call(Name('check_py3k_warnings', Load(), lineno=167, col_offset=17), [], [], None, None, lineno=167, col_offset=17), Name('w', Store(), lineno=167, col_offset=42), [Expr(Call(Attribute(Name('self', Load(), lineno=168, col_offset=16), 'assertWarning', Load(), lineno=168, col_offset=16), [Call(Name('getattr', Load(), lineno=168, col_offset=35), [Name('f', Load(), lineno=168, col_offset=43), Name('attr', Load(), lineno=168, col_offset=46)], [], None, None, lineno=168, col_offset=35), Name('w', Load(), lineno=168, col_offset=53), Name('expected', Load(), lineno=168, col_offset=56)], [], None, None, lineno=168, col_offset=16), lineno=168, col_offset=16), Expr(Call(Attribute(Name('w', Load(), lineno=169, col_offset=16), 'reset', Load(), lineno=169, col_offset=16), [], [], None, None, lineno=169, col_offset=16), lineno=169, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=170, col_offset=16), 'assertWarning', Load(), lineno=170, col_offset=16), [Call(Name('setattr', Load(), lineno=170, col_offset=35), [Name('f', Load(), lineno=170, col_offset=43), Name('attr', Load(), lineno=170, col_offset=46), Name('None', Load(), lineno=170, col_offset=52)], [], None, None, lineno=170, col_offset=35), Name('w', Load(), lineno=170, col_offset=59), Name('expected', Load(), lineno=170, col_offset=62)], [], None, None, lineno=170, col_offset=16), lineno=170, col_offset=16)], lineno=167, col_offset=17)], [], lineno=165, col_offset=8)], [], lineno=162, col_offset=4), FunctionDef('test_sort_cmp_arg', arguments([Name('self', Param(), lineno=172, col_offset=26)], None, None, []), [Assign([Name('expected', Store(), lineno=173, col_offset=8)], Str('the cmp argument is not supported in 3.x', lineno=173, col_offset=19), lineno=173, col_offset=8), Assign([Name('lst', Store(), lineno=174, col_offset=8)], Call(Name('range', Load(), lineno=174, col_offset=14), [Num(5, lineno=174, col_offset=20)], [], None, None, lineno=174, col_offset=14), lineno=174, col_offset=8), Assign([Name('cmp', Store(), lineno=175, col_offset=8)], Lambda(arguments([Name('x', Param(), lineno=175, col_offset=21), Name('y', Param(), lineno=175, col_offset=23)], None, None, []), Num(-1, lineno=175, col_offset=27), lineno=175, col_offset=14), lineno=175, col_offset=8), With(Call(Name('check_py3k_warnings', Load(), lineno=177, col_offset=13), [], [], None, None, lineno=177, col_offset=13), Name('w', Store(), lineno=177, col_offset=38), [Expr(Call(Attribute(Name('self', Load(), lineno=178, col_offset=12), 'assertWarning', Load(), lineno=178, col_offset=12), [Call(Attribute(Name('lst', Load(), lineno=178, col_offset=31), 'sort', Load(), lineno=178, col_offset=31), [], [keyword('cmp', Name('cmp', Load(), lineno=178, col_offset=44))], None, None, lineno=178, col_offset=31), Name('w', Load(), lineno=178, col_offset=50), Name('expected', Load(), lineno=178, col_offset=53)], [], None, None, lineno=178, col_offset=12), lineno=178, col_offset=12), Expr(Call(Attribute(Name('w', Load(), lineno=179, col_offset=12), 'reset', Load(), lineno=179, col_offset=12), [], [], None, None, lineno=179, col_offset=12), lineno=179, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=180, col_offset=12), 'assertWarning', Load(), lineno=180, col_offset=12), [Call(Name('sorted', Load(), lineno=180, col_offset=31), [Name('lst', Load(), lineno=180, col_offset=38)], [keyword('cmp', Name('cmp', Load(), lineno=180, col_offset=47))], None, None, lineno=180, col_offset=31), Name('w', Load(), lineno=180, col_offset=53), Name('expected', Load(), lineno=180, col_offset=56)], [], None, None, lineno=180, col_offset=12), lineno=180, col_offset=12), Expr(Call(Attribute(Name('w', Load(), lineno=181, col_offset=12), 'reset', Load(), lineno=181, col_offset=12), [], [], None, None, lineno=181, col_offset=12), lineno=181, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=182, col_offset=12), 'assertWarning', Load(), lineno=182, col_offset=12), [Call(Attribute(Name('lst', Load(), lineno=182, col_offset=31), 'sort', Load(), lineno=182, col_offset=31), [Name('cmp', Load(), lineno=182, col_offset=40)], [], None, None, lineno=182, col_offset=31), Name('w', Load(), lineno=182, col_offset=46), Name('expected', Load(), lineno=182, col_offset=49)], [], None, None, lineno=182, col_offset=12), lineno=182, col_offset=12), Expr(Call(Attribute(Name('w', Load(), lineno=183, col_offset=12), 'reset', Load(), lineno=183, col_offset=12), [], [], None, None, lineno=183, col_offset=12), lineno=183, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=184, col_offset=12), 'assertWarning', Load(), lineno=184, col_offset=12), [Call(Name('sorted', Load(), lineno=184, col_offset=31), [Name('lst', Load(), lineno=184, col_offset=38), Name('cmp', Load(), lineno=184, col_offset=43)], [], None, None, lineno=184, col_offset=31), Name('w', Load(), lineno=184, col_offset=49), Name('expected', Load(), lineno=184, col_offset=52)], [], None, None, lineno=184, col_offset=12), lineno=184, col_offset=12)], lineno=177, col_offset=13)], [], lineno=172, col_offset=4), FunctionDef('test_sys_exc_clear', arguments([Name('self', Param(), lineno=186, col_offset=27)], None, None, []), [Assign([Name('expected', Store(), lineno=187, col_offset=8)], Str('sys.exc_clear() not supported in 3.x; use except clauses', lineno=187, col_offset=19), lineno=187, col_offset=8), With(Call(Name('check_py3k_warnings', Load(), lineno=188, col_offset=13), [], [], None, None, lineno=188, col_offset=13), Name('w', Store(), lineno=188, col_offset=38), [Expr(Call(Attribute(Name('self', Load(), lineno=189, col_offset=12), 'assertWarning', Load(), lineno=189, col_offset=12), [Call(Attribute(Name('sys', Load(), lineno=189, col_offset=31), 'exc_clear', Load(), lineno=189, col_offset=31), [], [], None, None, lineno=189, col_offset=31), Name('w', Load(), lineno=189, col_offset=48), Name('expected', Load(), lineno=189, col_offset=51)], [], None, None, lineno=189, col_offset=12), lineno=189, col_offset=12)], lineno=188, col_offset=13)], [], lineno=186, col_offset=4), FunctionDef('test_methods_members', arguments([Name('self', Param(), lineno=191, col_offset=29)], None, None, []), [Assign([Name('expected', Store(), lineno=192, col_offset=8)], Str('__members__ and __methods__ not supported in 3.x', lineno=192, col_offset=19), lineno=192, col_offset=8), ClassDef('C', [], [Assign([Name('__methods__', Store(), lineno=194, col_offset=12)], List([Str('a', lineno=194, col_offset=27)], Load(), lineno=194, col_offset=26), lineno=194, col_offset=12), Assign([Name('__members__', Store(), lineno=195, col_offset=12)], List([Str('b', lineno=195, col_offset=27)], Load(), lineno=195, col_offset=26), lineno=195, col_offset=12)], [], lineno=193, col_offset=8), Assign([Name('c', Store(), lineno=196, col_offset=8)], Call(Name('C', Load(), lineno=196, col_offset=12), [], [], None, None, lineno=196, col_offset=12), lineno=196, col_offset=8), With(Call(Name('check_py3k_warnings', Load(), lineno=197, col_offset=13), [], [], None, None, lineno=197, col_offset=13), Name('w', Store(), lineno=197, col_offset=38), [Expr(Call(Attribute(Name('self', Load(), lineno=198, col_offset=12), 'assertWarning', Load(), lineno=198, col_offset=12), [Call(Name('dir', Load(), lineno=198, col_offset=31), [Name('c', Load(), lineno=198, col_offset=35)], [], None, None, lineno=198, col_offset=31), Name('w', Load(), lineno=198, col_offset=39), Name('expected', Load(), lineno=198, col_offset=42)], [], None, None, lineno=198, col_offset=12), lineno=198, col_offset=12)], lineno=197, col_offset=13)], [], lineno=191, col_offset=4), FunctionDef('test_softspace', arguments([Name('self', Param(), lineno=200, col_offset=23)], None, None, []), [Assign([Name('expected', Store(), lineno=201, col_offset=8)], Str('file.softspace not supported in 3.x', lineno=201, col_offset=19), lineno=201, col_offset=8), With(Call(Name('file', Load(), lineno=202, col_offset=13), [Name('__file__', Load(), lineno=202, col_offset=18)], [], None, None, lineno=202, col_offset=13), Name('f', Store(), lineno=202, col_offset=31), [With(Call(Name('check_py3k_warnings', Load(), lineno=203, col_offset=17), [], [], None, None, lineno=203, col_offset=17), Name('w', Store(), lineno=203, col_offset=42), [Expr(Call(Attribute(Name('self', Load(), lineno=204, col_offset=16), 'assertWarning', Load(), lineno=204, col_offset=16), [Attribute(Name('f', Load(), lineno=204, col_offset=35), 'softspace', Load(), lineno=204, col_offset=35), Name('w', Load(), lineno=204, col_offset=48), Name('expected', Load(), lineno=204, col_offset=51)], [], None, None, lineno=204, col_offset=16), lineno=204, col_offset=16)], lineno=203, col_offset=17), FunctionDef('set', arguments([], None, None, []), [Assign([Attribute(Name('f', Load(), lineno=206, col_offset=16), 'softspace', Store(), lineno=206, col_offset=16)], Num(0, lineno=206, col_offset=30), lineno=206, col_offset=16)], [], lineno=205, col_offset=12), With(Call(Name('check_py3k_warnings', Load(), lineno=207, col_offset=17), [], [], None, None, lineno=207, col_offset=17), Name('w', Store(), lineno=207, col_offset=42), [Expr(Call(Attribute(Name('self', Load(), lineno=208, col_offset=16), 'assertWarning', Load(), lineno=208, col_offset=16), [Call(Name('set', Load(), lineno=208, col_offset=35), [], [], None, None, lineno=208, col_offset=35), Name('w', Load(), lineno=208, col_offset=42), Name('expected', Load(), lineno=208, col_offset=45)], [], None, None, lineno=208, col_offset=16), lineno=208, col_offset=16)], lineno=207, col_offset=17)], lineno=202, col_offset=13)], [], lineno=200, col_offset=4), FunctionDef('test_slice_methods', arguments([Name('self', Param(), lineno=210, col_offset=27)], None, None, []), [ClassDef('Spam', [Name('object', Load(), lineno=211, col_offset=19)], [FunctionDef('__getslice__', arguments([Name('self', Param(), lineno=212, col_offset=29), Name('i', Param(), lineno=212, col_offset=35), Name('j', Param(), lineno=212, col_offset=38)], None, None, []), [Pass( lineno=212, col_offset=42)], [], lineno=212, col_offset=12), FunctionDef('__setslice__', arguments([Name('self', Param(), lineno=213, col_offset=29), Name('i', Param(), lineno=213, col_offset=35), Name('j', Param(), lineno=213, col_offset=38), Name('what', Param(), lineno=213, col_offset=41)], None, None, []), [Pass( lineno=213, col_offset=48)], [], lineno=213, col_offset=12), FunctionDef('__delslice__', arguments([Name('self', Param(), lineno=214, col_offset=29), Name('i', Param(), lineno=214, col_offset=35), Name('j', Param(), lineno=214, col_offset=38)], None, None, []), [Pass( lineno=214, col_offset=42)], [], lineno=214, col_offset=12)], [], lineno=211, col_offset=8), ClassDef('Egg', [], [FunctionDef('__getslice__', arguments([Name('self', Param(), lineno=216, col_offset=29), Name('i', Param(), lineno=216, col_offset=35), Name('h', Param(), lineno=216, col_offset=38)], None, None, []), [Pass( lineno=216, col_offset=42)], [], lineno=216, col_offset=12), FunctionDef('__setslice__', arguments([Name('self', Param(), lineno=217, col_offset=29), Name('i', Param(), lineno=217, col_offset=35), Name('j', Param(), lineno=217, col_offset=38), Name('what', Param(), lineno=217, col_offset=41)], None, None, []), [Pass( lineno=217, col_offset=48)], [], lineno=217, col_offset=12), FunctionDef('__delslice__', arguments([Name('self', Param(), lineno=218, col_offset=29), Name('i', Param(), lineno=218, col_offset=35), Name('j', Param(), lineno=218, col_offset=38)], None, None, []), [Pass( lineno=218, col_offset=42)], [], lineno=218, col_offset=12)], [], lineno=215, col_offset=8), Assign([Name('expected', Store(), lineno=220, col_offset=8)], Str('in 3.x, __{0}slice__ has been removed; use __{0}item__', lineno=220, col_offset=19), lineno=220, col_offset=8), For(Name('obj', Store(), lineno=222, col_offset=12), Tuple([Call(Name('Spam', Load(), lineno=222, col_offset=20), [], [], None, None, lineno=222, col_offset=20), Call(Name('Egg', Load(), lineno=222, col_offset=28), [], [], None, None, lineno=222, col_offset=28)], Load(), lineno=222, col_offset=20), [With(Call(Name('check_py3k_warnings', Load(), lineno=223, col_offset=17), [], [], None, None, lineno=223, col_offset=17), Name('w', Store(), lineno=223, col_offset=42), [Expr(Call(Attribute(Name('self', Load(), lineno=224, col_offset=16), 'assertWarning', Load(), lineno=224, col_offset=16), [Subscript(Name('obj', Load(), lineno=224, col_offset=35), Slice(Num(1, lineno=224, col_offset=39), Num(2, lineno=224, col_offset=41), None), Load(), lineno=224, col_offset=35), Name('w', Load(), lineno=224, col_offset=45), Call(Attribute(Name('expected', Load(), lineno=224, col_offset=48), 'format', Load(), lineno=224, col_offset=48), [Str('get', lineno=224, col_offset=64)], [], None, None, lineno=224, col_offset=48)], [], None, None, lineno=224, col_offset=16), lineno=224, col_offset=16), Expr(Call(Attribute(Name('w', Load(), lineno=225, col_offset=16), 'reset', Load(), lineno=225, col_offset=16), [], [], None, None, lineno=225, col_offset=16), lineno=225, col_offset=16), Delete([Subscript(Name('obj', Load(), lineno=226, col_offset=20), Slice(Num(3, lineno=226, col_offset=24), Num(4, lineno=226, col_offset=26), None), Del(), lineno=226, col_offset=20)], lineno=226, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=227, col_offset=16), 'assertWarning', Load(), lineno=227, col_offset=16), [Name('None', Load(), lineno=227, col_offset=35), Name('w', Load(), lineno=227, col_offset=41), Call(Attribute(Name('expected', Load(), lineno=227, col_offset=44), 'format', Load(), lineno=227, col_offset=44), [Str('del', lineno=227, col_offset=60)], [], None, None, lineno=227, col_offset=44)], [], None, None, lineno=227, col_offset=16), lineno=227, col_offset=16), Expr(Call(Attribute(Name('w', Load(), lineno=228, col_offset=16), 'reset', Load(), lineno=228, col_offset=16), [], [], None, None, lineno=228, col_offset=16), lineno=228, col_offset=16), Assign([Subscript(Name('obj', Load(), lineno=229, col_offset=16), Slice(Num(4, lineno=229, col_offset=20), Num(5, lineno=229, col_offset=22), None), Store(), lineno=229, col_offset=16)], Str('eggs', lineno=229, col_offset=27), lineno=229, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=230, col_offset=16), 'assertWarning', Load(), lineno=230, col_offset=16), [Name('None', Load(), lineno=230, col_offset=35), Name('w', Load(), lineno=230, col_offset=41), Call(Attribute(Name('expected', Load(), lineno=230, col_offset=44), 'format', Load(), lineno=230, col_offset=44), [Str('set', lineno=230, col_offset=60)], [], None, None, lineno=230, col_offset=44)], [], None, None, lineno=230, col_offset=16), lineno=230, col_offset=16)], lineno=223, col_offset=17)], [], lineno=222, col_offset=8)], [], lineno=210, col_offset=4), FunctionDef('test_tuple_parameter_unpacking', arguments([Name('self', Param(), lineno=232, col_offset=39)], None, None, []), [Assign([Name('expected', Store(), lineno=233, col_offset=8)], Str('tuple parameter unpacking has been removed in 3.x', lineno=233, col_offset=19), lineno=233, col_offset=8), With(Call(Name('check_py3k_warnings', Load(), lineno=234, col_offset=13), [Tuple([Name('expected', Load(), lineno=234, col_offset=34), Name('SyntaxWarning', Load(), lineno=234, col_offset=44)], Load(), lineno=234, col_offset=34)], [], None, None, lineno=234, col_offset=13), None, [Exec(Str('def f((a, b)): pass', lineno=235, col_offset=17), None, None, lineno=235, col_offset=12)], lineno=234, col_offset=13)], [], lineno=232, col_offset=4), FunctionDef('test_buffer', arguments([Name('self', Param(), lineno=237, col_offset=20)], None, None, []), [Assign([Name('expected', Store(), lineno=238, col_offset=8)], Str('buffer() not supported in 3.x', lineno=238, col_offset=19), lineno=238, col_offset=8), With(Call(Name('check_py3k_warnings', Load(), lineno=239, col_offset=13), [], [], None, None, lineno=239, col_offset=13), Name('w', Store(), lineno=239, col_offset=38), [Expr(Call(Attribute(Name('self', Load(), lineno=240, col_offset=12), 'assertWarning', Load(), lineno=240, col_offset=12), [Call(Name('buffer', Load(), lineno=240, col_offset=31), [Str('a', lineno=240, col_offset=38)], [], None, None, lineno=240, col_offset=31), Name('w', Load(), lineno=240, col_offset=44), Name('expected', Load(), lineno=240, col_offset=47)], [], None, None, lineno=240, col_offset=12), lineno=240, col_offset=12)], lineno=239, col_offset=13)], [], lineno=237, col_offset=4), FunctionDef('test_file_xreadlines', arguments([Name('self', Param(), lineno=242, col_offset=29)], None, None, []), [Assign([Name('expected', Store(), lineno=243, col_offset=8)], Str("f.xreadlines() not supported in 3.x, try 'for line in f' instead", lineno=243, col_offset=20), lineno=243, col_offset=8), With(Call(Name('file', Load(), lineno=245, col_offset=13), [Name('__file__', Load(), lineno=245, col_offset=18)], [], None, None, lineno=245, col_offset=13), Name('f', Store(), lineno=245, col_offset=31), [With(Call(Name('check_py3k_warnings', Load(), lineno=246, col_offset=17), [], [], None, None, lineno=246, col_offset=17), Name('w', Store(), lineno=246, col_offset=42), [Expr(Call(Attribute(Name('self', Load(), lineno=247, col_offset=16), 'assertWarning', Load(), lineno=247, col_offset=16), [Call(Attribute(Name('f', Load(), lineno=247, col_offset=35), 'xreadlines', Load(), lineno=247, col_offset=35), [], [], None, None, lineno=247, col_offset=35), Name('w', Load(), lineno=247, col_offset=51), Name('expected', Load(), lineno=247, col_offset=54)], [], None, None, lineno=247, col_offset=16), lineno=247, col_offset=16)], lineno=246, col_offset=17)], lineno=245, col_offset=13)], [], lineno=242, col_offset=4), FunctionDef('test_hash_inheritance', arguments([Name('self', Param(), lineno=249, col_offset=30)], None, None, []), [With(Call(Name('check_py3k_warnings', Load(), lineno=250, col_offset=13), [], [], None, None, lineno=250, col_offset=13), Name('w', Store(), lineno=250, col_offset=38), [ClassDef('WarnOnlyCmp', [Name('object', Load(), lineno=252, col_offset=30)], [FunctionDef('__cmp__', arguments([Name('self', Param(), lineno=253, col_offset=28), Name('other', Param(), lineno=253, col_offset=34)], None, None, []), [Pass( lineno=253, col_offset=42)], [], lineno=253, col_offset=16)], [], lineno=252, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=254, col_offset=12), 'assertEqual', Load(), lineno=254, col_offset=12), [Call(Name('len', Load(), lineno=254, col_offset=29), [Attribute(Name('w', Load(), lineno=254, col_offset=33), 'warnings', Load(), lineno=254, col_offset=33)], [], None, None, lineno=254, col_offset=29), Num(0, lineno=254, col_offset=46)], [], None, None, lineno=254, col_offset=12), lineno=254, col_offset=12), Expr(Call(Attribute(Name('w', Load(), lineno=255, col_offset=12), 'reset', Load(), lineno=255, col_offset=12), [], [], None, None, lineno=255, col_offset=12), lineno=255, col_offset=12), ClassDef('WarnOnlyEq', [Name('object', Load(), lineno=256, col_offset=29)], [FunctionDef('__eq__', arguments([Name('self', Param(), lineno=257, col_offset=27), Name('other', Param(), lineno=257, col_offset=33)], None, None, []), [Pass( lineno=257, col_offset=41)], [], lineno=257, col_offset=16)], [], lineno=256, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=258, col_offset=12), 'assertEqual', Load(), lineno=258, col_offset=12), [Call(Name('len', Load(), lineno=258, col_offset=29), [Attribute(Name('w', Load(), lineno=258, col_offset=33), 'warnings', Load(), lineno=258, col_offset=33)], [], None, None, lineno=258, col_offset=29), Num(1, lineno=258, col_offset=46)], [], None, None, lineno=258, col_offset=12), lineno=258, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=259, col_offset=12), 'assertWarning', Load(), lineno=259, col_offset=12), [Name('None', Load(), lineno=259, col_offset=31), Name('w', Load(), lineno=259, col_offset=37), Str('Overriding __eq__ blocks inheritance of __hash__ in 3.x', lineno=260, col_offset=17)], [], None, None, lineno=259, col_offset=12), lineno=259, col_offset=12), Expr(Call(Attribute(Name('w', Load(), lineno=261, col_offset=12), 'reset', Load(), lineno=261, col_offset=12), [], [], None, None, lineno=261, col_offset=12), lineno=261, col_offset=12), ClassDef('WarnCmpAndEq', [Name('object', Load(), lineno=262, col_offset=31)], [FunctionDef('__cmp__', arguments([Name('self', Param(), lineno=263, col_offset=28), Name('other', Param(), lineno=263, col_offset=34)], None, None, []), [Pass( lineno=263, col_offset=42)], [], lineno=263, col_offset=16), FunctionDef('__eq__', arguments([Name('self', Param(), lineno=264, col_offset=27), Name('other', Param(), lineno=264, col_offset=33)], None, None, []), [Pass( lineno=264, col_offset=41)], [], lineno=264, col_offset=16)], [], lineno=262, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=265, col_offset=12), 'assertEqual', Load(), lineno=265, col_offset=12), [Call(Name('len', Load(), lineno=265, col_offset=29), [Attribute(Name('w', Load(), lineno=265, col_offset=33), 'warnings', Load(), lineno=265, col_offset=33)], [], None, None, lineno=265, col_offset=29), Num(1, lineno=265, col_offset=46)], [], None, None, lineno=265, col_offset=12), lineno=265, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=266, col_offset=12), 'assertWarning', Load(), lineno=266, col_offset=12), [Name('None', Load(), lineno=266, col_offset=31), Name('w', Load(), lineno=266, col_offset=37), Str('Overriding __eq__ blocks inheritance of __hash__ in 3.x', lineno=267, col_offset=17)], [], None, None, lineno=266, col_offset=12), lineno=266, col_offset=12), Expr(Call(Attribute(Name('w', Load(), lineno=268, col_offset=12), 'reset', Load(), lineno=268, col_offset=12), [], [], None, None, lineno=268, col_offset=12), lineno=268, col_offset=12), ClassDef('NoWarningOnlyHash', [Name('object', Load(), lineno=269, col_offset=36)], [FunctionDef('__hash__', arguments([Name('self', Param(), lineno=270, col_offset=29)], None, None, []), [Pass( lineno=270, col_offset=36)], [], lineno=270, col_offset=16)], [], lineno=269, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=271, col_offset=12), 'assertEqual', Load(), lineno=271, col_offset=12), [Call(Name('len', Load(), lineno=271, col_offset=29), [Attribute(Name('w', Load(), lineno=271, col_offset=33), 'warnings', Load(), lineno=271, col_offset=33)], [], None, None, lineno=271, col_offset=29), Num(0, lineno=271, col_offset=46)], [], None, None, lineno=271, col_offset=12), lineno=271, col_offset=12), ClassDef('DefinesAllThree', [Name('object', Load(), lineno=273, col_offset=34)], [FunctionDef('__cmp__', arguments([Name('self', Param(), lineno=274, col_offset=28), Name('other', Param(), lineno=274, col_offset=34)], None, None, []), [Pass( lineno=274, col_offset=42)], [], lineno=274, col_offset=16), FunctionDef('__eq__', arguments([Name('self', Param(), lineno=275, col_offset=27), Name('other', Param(), lineno=275, col_offset=33)], None, None, []), [Pass( lineno=275, col_offset=41)], [], lineno=275, col_offset=16), FunctionDef('__hash__', arguments([Name('self', Param(), lineno=276, col_offset=29)], None, None, []), [Pass( lineno=276, col_offset=36)], [], lineno=276, col_offset=16)], [], lineno=273, col_offset=12), ClassDef('WarnOnlyCmp', [Name('DefinesAllThree', Load(), lineno=277, col_offset=30)], [FunctionDef('__cmp__', arguments([Name('self', Param(), lineno=278, col_offset=28), Name('other', Param(), lineno=278, col_offset=34)], None, None, []), [Pass( lineno=278, col_offset=42)], [], lineno=278, col_offset=16)], [], lineno=277, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=279, col_offset=12), 'assertEqual', Load(), lineno=279, col_offset=12), [Call(Name('len', Load(), lineno=279, col_offset=29), [Attribute(Name('w', Load(), lineno=279, col_offset=33), 'warnings', Load(), lineno=279, col_offset=33)], [], None, None, lineno=279, col_offset=29), Num(0, lineno=279, col_offset=46)], [], None, None, lineno=279, col_offset=12), lineno=279, col_offset=12), Expr(Call(Attribute(Name('w', Load(), lineno=280, col_offset=12), 'reset', Load(), lineno=280, col_offset=12), [], [], None, None, lineno=280, col_offset=12), lineno=280, col_offset=12), ClassDef('WarnOnlyEq', [Name('DefinesAllThree', Load(), lineno=281, col_offset=29)], [FunctionDef('__eq__', arguments([Name('self', Param(), lineno=282, col_offset=27), Name('other', Param(), lineno=282, col_offset=33)], None, None, []), [Pass( lineno=282, col_offset=41)], [], lineno=282, col_offset=16)], [], lineno=281, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=283, col_offset=12), 'assertEqual', Load(), lineno=283, col_offset=12), [Call(Name('len', Load(), lineno=283, col_offset=29), [Attribute(Name('w', Load(), lineno=283, col_offset=33), 'warnings', Load(), lineno=283, col_offset=33)], [], None, None, lineno=283, col_offset=29), Num(1, lineno=283, col_offset=46)], [], None, None, lineno=283, col_offset=12), lineno=283, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=284, col_offset=12), 'assertWarning', Load(), lineno=284, col_offset=12), [Name('None', Load(), lineno=284, col_offset=31), Name('w', Load(), lineno=284, col_offset=37), Str('Overriding __eq__ blocks inheritance of __hash__ in 3.x', lineno=285, col_offset=17)], [], None, None, lineno=284, col_offset=12), lineno=284, col_offset=12), Expr(Call(Attribute(Name('w', Load(), lineno=286, col_offset=12), 'reset', Load(), lineno=286, col_offset=12), [], [], None, None, lineno=286, col_offset=12), lineno=286, col_offset=12), ClassDef('WarnCmpAndEq', [Name('DefinesAllThree', Load(), lineno=287, col_offset=31)], [FunctionDef('__cmp__', arguments([Name('self', Param(), lineno=288, col_offset=28), Name('other', Param(), lineno=288, col_offset=34)], None, None, []), [Pass( lineno=288, col_offset=42)], [], lineno=288, col_offset=16), FunctionDef('__eq__', arguments([Name('self', Param(), lineno=289, col_offset=27), Name('other', Param(), lineno=289, col_offset=33)], None, None, []), [Pass( lineno=289, col_offset=41)], [], lineno=289, col_offset=16)], [], lineno=287, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=290, col_offset=12), 'assertEqual', Load(), lineno=290, col_offset=12), [Call(Name('len', Load(), lineno=290, col_offset=29), [Attribute(Name('w', Load(), lineno=290, col_offset=33), 'warnings', Load(), lineno=290, col_offset=33)], [], None, None, lineno=290, col_offset=29), Num(1, lineno=290, col_offset=46)], [], None, None, lineno=290, col_offset=12), lineno=290, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=291, col_offset=12), 'assertWarning', Load(), lineno=291, col_offset=12), [Name('None', Load(), lineno=291, col_offset=31), Name('w', Load(), lineno=291, col_offset=37), Str('Overriding __eq__ blocks inheritance of __hash__ in 3.x', lineno=292, col_offset=17)], [], None, None, lineno=291, col_offset=12), lineno=291, col_offset=12), Expr(Call(Attribute(Name('w', Load(), lineno=293, col_offset=12), 'reset', Load(), lineno=293, col_offset=12), [], [], None, None, lineno=293, col_offset=12), lineno=293, col_offset=12), ClassDef('NoWarningOnlyHash', [Name('DefinesAllThree', Load(), lineno=294, col_offset=36)], [FunctionDef('__hash__', arguments([Name('self', Param(), lineno=295, col_offset=29)], None, None, []), [Pass( lineno=295, col_offset=36)], [], lineno=295, col_offset=16)], [], lineno=294, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=296, col_offset=12), 'assertEqual', Load(), lineno=296, col_offset=12), [Call(Name('len', Load(), lineno=296, col_offset=29), [Attribute(Name('w', Load(), lineno=296, col_offset=33), 'warnings', Load(), lineno=296, col_offset=33)], [], None, None, lineno=296, col_offset=29), Num(0, lineno=296, col_offset=46)], [], None, None, lineno=296, col_offset=12), lineno=296, col_offset=12)], lineno=250, col_offset=13)], [], lineno=249, col_offset=4), FunctionDef('test_operator', arguments([Name('self', Param(), lineno=298, col_offset=22)], None, None, []), [ImportFrom('operator', [alias('isCallable', None), alias('sequenceIncludes', None)], 0, lineno=299, col_offset=8), Assign([Name('callable_warn', Store(), lineno=301, col_offset=8)], Str("operator.isCallable() is not supported in 3.x. Use hasattr(obj, '__call__').", lineno=301, col_offset=25), lineno=301, col_offset=8), Assign([Name('seq_warn', Store(), lineno=303, col_offset=8)], Str('operator.sequenceIncludes() is not supported in 3.x. Use operator.contains().', lineno=303, col_offset=20), lineno=303, col_offset=8), With(Call(Name('check_py3k_warnings', Load(), lineno=305, col_offset=13), [], [], None, None, lineno=305, col_offset=13), Name('w', Store(), lineno=305, col_offset=38), [Expr(Call(Attribute(Name('self', Load(), lineno=306, col_offset=12), 'assertWarning', Load(), lineno=306, col_offset=12), [Call(Name('isCallable', Load(), lineno=306, col_offset=31), [Name('self', Load(), lineno=306, col_offset=42)], [], None, None, lineno=306, col_offset=31), Name('w', Load(), lineno=306, col_offset=49), Name('callable_warn', Load(), lineno=306, col_offset=52)], [], None, None, lineno=306, col_offset=12), lineno=306, col_offset=12), Expr(Call(Attribute(Name('w', Load(), lineno=307, col_offset=12), 'reset', Load(), lineno=307, col_offset=12), [], [], None, None, lineno=307, col_offset=12), lineno=307, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=308, col_offset=12), 'assertWarning', Load(), lineno=308, col_offset=12), [Call(Name('sequenceIncludes', Load(), lineno=308, col_offset=31), [Call(Name('range', Load(), lineno=308, col_offset=48), [Num(3, lineno=308, col_offset=54)], [], None, None, lineno=308, col_offset=48), Num(2, lineno=308, col_offset=58)], [], None, None, lineno=308, col_offset=31), Name('w', Load(), lineno=308, col_offset=62), Name('seq_warn', Load(), lineno=308, col_offset=65)], [], None, None, lineno=308, col_offset=12), lineno=308, col_offset=12)], lineno=305, col_offset=13)], [], lineno=298, col_offset=4)], [], lineno=34, col_offset=0), ClassDef('TestStdlibRemovals', [Attribute(Name('unittest', Load(), lineno=311, col_offset=25), 'TestCase', Load(), lineno=311, col_offset=25)], [Assign([Name('all_platforms', Store(), lineno=315, col_offset=4)], Tuple([Str('audiodev', lineno=315, col_offset=21), Str('imputil', lineno=315, col_offset=33), Str('mutex', lineno=315, col_offset=44), Str('user', lineno=315, col_offset=53), Str('new', lineno=315, col_offset=61), Str('rexec', lineno=315, col_offset=68), Str('Bastion', lineno=316, col_offset=24), Str('compiler', lineno=316, col_offset=35), Str('dircache', lineno=316, col_offset=47), Str('mimetools', lineno=316, col_offset=59), Str('fpformat', lineno=317, col_offset=24), Str('ihooks', lineno=317, col_offset=36), Str('mhlib', lineno=317, col_offset=46), Str('statvfs', lineno=317, col_offset=55), Str('htmllib', lineno=317, col_offset=66), Str('sgmllib', lineno=318, col_offset=24), Str('rfc822', lineno=318, col_offset=35), Str('sunaudio', lineno=318, col_offset=45)], Load(), lineno=315, col_offset=21), lineno=315, col_offset=4), Assign([Name('inclusive_platforms', Store(), lineno=319, col_offset=4)], Dict([Str('irix', lineno=319, col_offset=27), Str('darwin', lineno=325, col_offset=26), Str('sunos5', lineno=346, col_offset=27)], [Tuple([Str('pure', lineno=319, col_offset=37), Str('AL', lineno=319, col_offset=45), Str('al', lineno=319, col_offset=51), Str('CD', lineno=319, col_offset=57), Str('cd', lineno=319, col_offset=63), Str('cddb', lineno=319, col_offset=69), Str('cdplayer', lineno=320, col_offset=37), Str('CL', lineno=320, col_offset=49), Str('cl', lineno=320, col_offset=55), Str('DEVICE', lineno=320, col_offset=61), Str('GL', lineno=320, col_offset=71), Str('gl', lineno=321, col_offset=37), Str('ERRNO', lineno=321, col_offset=43), Str('FILE', lineno=321, col_offset=52), Str('FL', lineno=321, col_offset=60), Str('flp', lineno=321, col_offset=66), Str('fl', lineno=321, col_offset=73), Str('fm', lineno=322, col_offset=37), Str('GET', lineno=322, col_offset=43), Str('GLWS', lineno=322, col_offset=50), Str('imgfile', lineno=322, col_offset=58), Str('IN', lineno=322, col_offset=69), Str('IOCTL', lineno=323, col_offset=37), Str('jpeg', lineno=323, col_offset=46), Str('panel', lineno=323, col_offset=54), Str('panelparser', lineno=323, col_offset=63), Str('readcd', lineno=324, col_offset=37), Str('SV', lineno=324, col_offset=47), Str('torgb', lineno=324, col_offset=53), Str('WAIT', lineno=324, col_offset=62)], Load(), lineno=319, col_offset=37), Tuple([Str('autoGIL', lineno=325, col_offset=38), Str('Carbon', lineno=325, col_offset=49), Str('OSATerminology', lineno=325, col_offset=59), Str('icglue', lineno=326, col_offset=38), Str('Nav', lineno=326, col_offset=48), Str('aepack', lineno=332, col_offset=38), Str('aetools', lineno=333, col_offset=38), Str('aetypes', lineno=333, col_offset=49), Str('applesingle', lineno=333, col_offset=60), Str('appletrawmain', lineno=334, col_offset=38), Str('appletrunner', lineno=334, col_offset=55), Str('argvemulator', lineno=335, col_offset=38), Str('bgenlocations', lineno=335, col_offset=54), Str('EasyDialogs', lineno=336, col_offset=38), Str('macerrors', lineno=336, col_offset=53), Str('macostools', lineno=336, col_offset=66), Str('findertools', lineno=337, col_offset=38), Str('FrameWork', lineno=337, col_offset=53), Str('ic', lineno=337, col_offset=66), Str('gensuitemodule', lineno=338, col_offset=38), Str('icopen', lineno=338, col_offset=56), Str('macresource', lineno=338, col_offset=66), Str('MiniAEFrame', lineno=339, col_offset=38), Str('pimp', lineno=339, col_offset=53), Str('PixMapWrapper', lineno=339, col_offset=61), Str('terminalcommand', lineno=340, col_offset=38), Str('videoreader', lineno=340, col_offset=57), Str('_builtinSuites', lineno=341, col_offset=38), Str('CodeWarrior', lineno=341, col_offset=56), Str('Explorer', lineno=342, col_offset=38), Str('Finder', lineno=342, col_offset=50), Str('Netscape', lineno=342, col_offset=60), Str('StdSuites', lineno=343, col_offset=38), Str('SystemEvents', lineno=343, col_offset=51), Str('Terminal', lineno=343, col_offset=67), Str('cfmfile', lineno=344, col_offset=38), Str('bundlebuilder', lineno=344, col_offset=49), Str('buildtools', lineno=344, col_offset=66), Str('ColorPicker', lineno=345, col_offset=38), Str('Audio_mac', lineno=345, col_offset=53)], Load(), lineno=325, col_offset=38), Tuple([Str('sunaudiodev', lineno=346, col_offset=39), Str('SUNAUDIODEV', lineno=346, col_offset=54)], Load(), lineno=346, col_offset=39)], lineno=319, col_offset=26), lineno=319, col_offset=4), Assign([Name('optional_modules', Store(), lineno=348, col_offset=4)], Tuple([Str('bsddb185', lineno=348, col_offset=24), Str('Canvas', lineno=348, col_offset=36), Str('dl', lineno=348, col_offset=46), Str('linuxaudiodev', lineno=348, col_offset=52), Str('imageop', lineno=348, col_offset=69), Str('sv', lineno=349, col_offset=24), Str('bsddb', lineno=349, col_offset=30), Str('dbhash', lineno=349, col_offset=39)], Load(), lineno=348, col_offset=24), lineno=348, col_offset=4), FunctionDef('check_removal', arguments([Name('self', Param(), lineno=351, col_offset=22), Name('module_name', Param(), lineno=351, col_offset=28), Name('optional', Param(), lineno=351, col_offset=41)], None, None, [Name('False', Load(), lineno=351, col_offset=50)]), [Expr(Str('Make sure the specified module, when imported, raises a\n        DeprecationWarning and specifies itself in the message.', lineno=353, col_offset=-1), lineno=353, col_offset=-1), With(Call(Name('CleanImport', Load(), lineno=354, col_offset=13), [Name('module_name', Load(), lineno=354, col_offset=25)], [], None, None, lineno=354, col_offset=13), None, [With(Call(Attribute(Name('warnings', Load(), lineno=354, col_offset=39), 'catch_warnings', Load(), lineno=354, col_offset=39), [], [], None, None, lineno=354, col_offset=39), None, [Expr(Call(Attribute(Name('warnings', Load(), lineno=355, col_offset=12), 'filterwarnings', Load(), lineno=355, col_offset=12), [Str('error', lineno=355, col_offset=36), Str('.+ (module|package) .+ removed', lineno=355, col_offset=45), Name('DeprecationWarning', Load(), lineno=356, col_offset=36), Name('__name__', Load(), lineno=356, col_offset=56)], [], None, None, lineno=355, col_offset=12), lineno=355, col_offset=12), Expr(Call(Attribute(Name('warnings', Load(), lineno=357, col_offset=12), 'filterwarnings', Load(), lineno=357, col_offset=12), [Str('error', lineno=357, col_offset=36), Str('.+ removed .+ (module|package)', lineno=357, col_offset=45), Name('DeprecationWarning', Load(), lineno=358, col_offset=36), Name('__name__', Load(), lineno=358, col_offset=56)], [], None, None, lineno=357, col_offset=12), lineno=357, col_offset=12), TryExcept([Expr(Call(Name('__import__', Load(), lineno=360, col_offset=16), [Name('module_name', Load(), lineno=360, col_offset=27)], [keyword('level', Num(0, lineno=360, col_offset=46))], None, None, lineno=360, col_offset=16), lineno=360, col_offset=16)], [ExceptHandler(Name('DeprecationWarning', Load(), lineno=361, col_offset=19), Name('exc', Store(), lineno=361, col_offset=41), [Expr(Call(Attribute(Name('self', Load(), lineno=362, col_offset=16), 'assertIn', Load(), lineno=362, col_offset=16), [Name('module_name', Load(), lineno=362, col_offset=30), Subscript(Attribute(Name('exc', Load(), lineno=362, col_offset=43), 'args', Load(), lineno=362, col_offset=43), Index(Num(0, lineno=362, col_offset=52)), Load(), lineno=362, col_offset=43), BinOp(Str("%s warning didn't contain module name", lineno=363, col_offset=30), Mod(), Name('module_name', Load(), lineno=364, col_offset=32), lineno=363, col_offset=30)], [], None, None, lineno=362, col_offset=16), lineno=362, col_offset=16)], lineno=361, col_offset=12), ExceptHandler(Name('ImportError', Load(), lineno=365, col_offset=19), None, [If(UnaryOp(Not(), Name('optional', Load(), lineno=366, col_offset=23), lineno=366, col_offset=19), [Expr(Call(Attribute(Name('self', Load(), lineno=367, col_offset=20), 'fail', Load(), lineno=367, col_offset=20), [Call(Attribute(Str('Non-optional module {0} raised an ImportError.', lineno=367, col_offset=30), 'format', Load(), lineno=367, col_offset=30), [Name('module_name', Load(), lineno=368, col_offset=52)], [], None, None, lineno=367, col_offset=30)], [], None, None, lineno=367, col_offset=20), lineno=367, col_offset=20)], [], lineno=366, col_offset=16)], lineno=365, col_offset=12)], [If(UnaryOp(Not(), Call(Name('check_deprecated_module', Load(), lineno=372, col_offset=23), [Name('module_name', Load(), lineno=372, col_offset=47)], [], None, None, lineno=372, col_offset=23), lineno=372, col_offset=19), [Expr(Call(Attribute(Name('self', Load(), lineno=373, col_offset=20), 'fail', Load(), lineno=373, col_offset=20), [Call(Attribute(Str('DeprecationWarning not raised for {0}', lineno=373, col_offset=30), 'format', Load(), lineno=373, col_offset=30), [Name('module_name', Load(), lineno=374, col_offset=38)], [], None, None, lineno=373, col_offset=30)], [], None, None, lineno=373, col_offset=20), lineno=373, col_offset=20)], [], lineno=372, col_offset=16)], lineno=359, col_offset=12)], lineno=354, col_offset=39)], lineno=354, col_offset=13)], [], lineno=351, col_offset=4), FunctionDef('test_platform_independent_removals', arguments([Name('self', Param(), lineno=376, col_offset=43)], None, None, []), [For(Name('module_name', Store(), lineno=379, col_offset=12), Attribute(Name('self', Load(), lineno=379, col_offset=27), 'all_platforms', Load(), lineno=379, col_offset=27), [Expr(Call(Attribute(Name('self', Load(), lineno=380, col_offset=12), 'check_removal', Load(), lineno=380, col_offset=12), [Name('module_name', Load(), lineno=380, col_offset=31)], [], None, None, lineno=380, col_offset=12), lineno=380, col_offset=12)], [], lineno=379, col_offset=8)], [], lineno=376, col_offset=4), FunctionDef('test_platform_specific_removals', arguments([Name('self', Param(), lineno=382, col_offset=40)], None, None, []), [For(Name('module_name', Store(), lineno=384, col_offset=12), Call(Attribute(Attribute(Name('self', Load(), lineno=384, col_offset=27), 'inclusive_platforms', Load(), lineno=384, col_offset=27), 'get', Load(), lineno=384, col_offset=27), [Attribute(Name('sys', Load(), lineno=384, col_offset=56), 'platform', Load(), lineno=384, col_offset=56), List([], Load(), lineno=384, col_offset=70)], [], None, None, lineno=384, col_offset=27), [Expr(Call(Attribute(Name('self', Load(), lineno=385, col_offset=12), 'check_removal', Load(), lineno=385, col_offset=12), [Name('module_name', Load(), lineno=385, col_offset=31)], [keyword('optional', Name('True', Load(), lineno=385, col_offset=53))], None, None, lineno=385, col_offset=12), lineno=385, col_offset=12)], [], lineno=384, col_offset=8)], [], lineno=382, col_offset=4), FunctionDef('test_optional_module_removals', arguments([Name('self', Param(), lineno=387, col_offset=38)], None, None, []), [For(Name('module_name', Store(), lineno=389, col_offset=12), Attribute(Name('self', Load(), lineno=389, col_offset=27), 'optional_modules', Load(), lineno=389, col_offset=27), [Expr(Call(Attribute(Name('self', Load(), lineno=390, col_offset=12), 'check_removal', Load(), lineno=390, col_offset=12), [Name('module_name', Load(), lineno=390, col_offset=31)], [keyword('optional', Name('True', Load(), lineno=390, col_offset=53))], None, None, lineno=390, col_offset=12), lineno=390, col_offset=12)], [], lineno=389, col_offset=8)], [], lineno=387, col_offset=4), FunctionDef('test_os_path_walk', arguments([Name('self', Param(), lineno=392, col_offset=26)], None, None, []), [Assign([Name('msg', Store(), lineno=393, col_offset=8)], Str('In 3.x, os.path.walk is removed in favor of os.walk.', lineno=393, col_offset=14), lineno=393, col_offset=8), FunctionDef('dumbo', arguments([Name('where', Param(), lineno=394, col_offset=18), Name('names', Param(), lineno=394, col_offset=25), Name('args', Param(), lineno=394, col_offset=32)], None, None, []), [Pass( lineno=394, col_offset=39)], [], lineno=394, col_offset=8), For(Name('path_mod', Store(), lineno=395, col_offset=12), Tuple([Str('ntpath', lineno=395, col_offset=25), Str('macpath', lineno=395, col_offset=35), Str('os2emxpath', lineno=395, col_offset=46), Str('posixpath', lineno=395, col_offset=60)], Load(), lineno=395, col_offset=25), [Assign([Name('mod', Store(), lineno=396, col_offset=12)], Call(Name('__import__', Load(), lineno=396, col_offset=18), [Name('path_mod', Load(), lineno=396, col_offset=29)], [], None, None, lineno=396, col_offset=18), lineno=396, col_offset=12), Expr(Call(Name('reset_module_registry', Load(), lineno=397, col_offset=12), [Name('mod', Load(), lineno=397, col_offset=34)], [], None, None, lineno=397, col_offset=12), lineno=397, col_offset=12), With(Call(Name('check_py3k_warnings', Load(), lineno=398, col_offset=17), [], [], None, None, lineno=398, col_offset=17), Name('w', Store(), lineno=398, col_offset=42), [Expr(Call(Attribute(Name('mod', Load(), lineno=399, col_offset=16), 'walk', Load(), lineno=399, col_offset=16), [Str('crashers', lineno=399, col_offset=25), Name('dumbo', Load(), lineno=399, col_offset=37), Name('None', Load(), lineno=399, col_offset=44)], [], None, None, lineno=399, col_offset=16), lineno=399, col_offset=16)], lineno=398, col_offset=17), Expr(Call(Attribute(Name('self', Load(), lineno=400, col_offset=12), 'assertEqual', Load(), lineno=400, col_offset=12), [Call(Name('str', Load(), lineno=400, col_offset=29), [Attribute(Name('w', Load(), lineno=400, col_offset=33), 'message', Load(), lineno=400, col_offset=33)], [], None, None, lineno=400, col_offset=29), Name('msg', Load(), lineno=400, col_offset=45)], [], None, None, lineno=400, col_offset=12), lineno=400, col_offset=12)], [], lineno=395, col_offset=8)], [], lineno=392, col_offset=4), FunctionDef('test_reduce_move', arguments([Name('self', Param(), lineno=402, col_offset=25)], None, None, []), [ImportFrom('operator', [alias('add', None)], 0, lineno=403, col_offset=8), Expr(Call(Name('reset_module_registry', Load(), lineno=405, col_offset=8), [Attribute(Name('unittest', Load(), lineno=405, col_offset=30), 'case', Load(), lineno=405, col_offset=30)], [], None, None, lineno=405, col_offset=8), lineno=405, col_offset=8), With(Call(Attribute(Name('warnings', Load(), lineno=406, col_offset=13), 'catch_warnings', Load(), lineno=406, col_offset=13), [], [], None, None, lineno=406, col_offset=13), None, [Expr(Call(Attribute(Name('warnings', Load(), lineno=407, col_offset=12), 'filterwarnings', Load(), lineno=407, col_offset=12), [Str('error', lineno=407, col_offset=36), Str('reduce', lineno=407, col_offset=45)], [], None, None, lineno=407, col_offset=12), lineno=407, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=408, col_offset=12), 'assertRaises', Load(), lineno=408, col_offset=12), [Name('DeprecationWarning', Load(), lineno=408, col_offset=30), Name('reduce', Load(), lineno=408, col_offset=50), Name('add', Load(), lineno=408, col_offset=58), Call(Name('range', Load(), lineno=408, col_offset=63), [Num(10, lineno=408, col_offset=69)], [], None, None, lineno=408, col_offset=63)], [], None, None, lineno=408, col_offset=12), lineno=408, col_offset=12)], lineno=406, col_offset=13)], [], lineno=402, col_offset=4), FunctionDef('test_mutablestring_removal', arguments([Name('self', Param(), lineno=410, col_offset=35)], None, None, []), [Import([alias('UserString', None)], lineno=412, col_offset=8), Expr(Call(Name('reset_module_registry', Load(), lineno=414, col_offset=8), [Name('UserString', Load(), lineno=414, col_offset=30)], [], None, None, lineno=414, col_offset=8), lineno=414, col_offset=8), With(Call(Attribute(Name('warnings', Load(), lineno=415, col_offset=13), 'catch_warnings', Load(), lineno=415, col_offset=13), [], [], None, None, lineno=415, col_offset=13), None, [Expr(Call(Attribute(Name('warnings', Load(), lineno=416, col_offset=12), 'filterwarnings', Load(), lineno=416, col_offset=12), [Str('error', lineno=416, col_offset=36), Str('.*MutableString', lineno=416, col_offset=45), Name('DeprecationWarning', Load(), lineno=417, col_offset=36)], [], None, None, lineno=416, col_offset=12), lineno=416, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=418, col_offset=12), 'assertRaises', Load(), lineno=418, col_offset=12), [Name('DeprecationWarning', Load(), lineno=418, col_offset=30), Attribute(Name('UserString', Load(), lineno=418, col_offset=50), 'MutableString', Load(), lineno=418, col_offset=50)], [], None, None, lineno=418, col_offset=12), lineno=418, col_offset=12)], lineno=415, col_offset=13)], [], lineno=410, col_offset=4)], [], lineno=311, col_offset=0), FunctionDef('test_main', arguments([], None, None, []), [Expr(Call(Name('run_unittest', Load(), lineno=422, col_offset=4), [Name('TestPy3KWarnings', Load(), lineno=422, col_offset=17), Name('TestStdlibRemovals', Load(), lineno=423, col_offset=17)], [], None, None, lineno=422, col_offset=4), lineno=422, col_offset=4)], [], lineno=421, col_offset=0), If(Compare(Name('__name__', Load(), lineno=425, col_offset=3), [Eq()], [Str('__main__', lineno=425, col_offset=15)], lineno=425, col_offset=3), [Expr(Call(Name('test_main', Load(), lineno=426, col_offset=4), [], [], None, None, lineno=426, col_offset=4), lineno=426, col_offset=4)], [], lineno=425, col_offset=0)])
