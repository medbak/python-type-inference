Module([Expr(Str('Unit tests for the with statement specified in PEP 343.', lineno=3, col_offset=0), lineno=3, col_offset=0), Assign([Name('__author__', Store(), lineno=6, col_offset=0)], Str('Mike Bland', lineno=6, col_offset=13), lineno=6, col_offset=0), Assign([Name('__email__', Store(), lineno=7, col_offset=0)], Str('mbland at acm dot org', lineno=7, col_offset=12), lineno=7, col_offset=0), Import([alias('sys', None)], lineno=9, col_offset=0), Import([alias('unittest', None)], lineno=10, col_offset=0), ImportFrom('collections', [alias('deque', None)], 0, lineno=11, col_offset=0), ImportFrom('contextlib', [alias('GeneratorContextManager', None), alias('contextmanager', None)], 0, lineno=12, col_offset=0), ImportFrom('test.test_support', [alias('run_unittest', None)], 0, lineno=13, col_offset=0), ClassDef('MockContextManager', [Name('GeneratorContextManager', Load(), lineno=16, col_offset=25)], [FunctionDef('__init__', arguments([Name('self', Param(), lineno=17, col_offset=17), Name('gen', Param(), lineno=17, col_offset=23)], None, None, []), [Expr(Call(Attribute(Name('GeneratorContextManager', Load(), lineno=18, col_offset=8), '__init__', Load(), lineno=18, col_offset=8), [Name('self', Load(), lineno=18, col_offset=41), Name('gen', Load(), lineno=18, col_offset=47)], [], None, None, lineno=18, col_offset=8), lineno=18, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=19, col_offset=8), 'enter_called', Store(), lineno=19, col_offset=8)], Name('False', Load(), lineno=19, col_offset=28), lineno=19, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=20, col_offset=8), 'exit_called', Store(), lineno=20, col_offset=8)], Name('False', Load(), lineno=20, col_offset=27), lineno=20, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=21, col_offset=8), 'exit_args', Store(), lineno=21, col_offset=8)], Name('None', Load(), lineno=21, col_offset=25), lineno=21, col_offset=8)], [], lineno=17, col_offset=4), FunctionDef('__enter__', arguments([Name('self', Param(), lineno=23, col_offset=18)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=24, col_offset=8), 'enter_called', Store(), lineno=24, col_offset=8)], Name('True', Load(), lineno=24, col_offset=28), lineno=24, col_offset=8), Return(Call(Attribute(Name('GeneratorContextManager', Load(), lineno=25, col_offset=15), '__enter__', Load(), lineno=25, col_offset=15), [Name('self', Load(), lineno=25, col_offset=49)], [], None, None, lineno=25, col_offset=15), lineno=25, col_offset=8)], [], lineno=23, col_offset=4), FunctionDef('__exit__', arguments([Name('self', Param(), lineno=27, col_offset=17), Name('type', Param(), lineno=27, col_offset=23), Name('value', Param(), lineno=27, col_offset=29), Name('traceback', Param(), lineno=27, col_offset=36)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=28, col_offset=8), 'exit_called', Store(), lineno=28, col_offset=8)], Name('True', Load(), lineno=28, col_offset=27), lineno=28, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=29, col_offset=8), 'exit_args', Store(), lineno=29, col_offset=8)], Tuple([Name('type', Load(), lineno=29, col_offset=26), Name('value', Load(), lineno=29, col_offset=32), Name('traceback', Load(), lineno=29, col_offset=39)], Load(), lineno=29, col_offset=26), lineno=29, col_offset=8), Return(Call(Attribute(Name('GeneratorContextManager', Load(), lineno=30, col_offset=15), '__exit__', Load(), lineno=30, col_offset=15), [Name('self', Load(), lineno=30, col_offset=48), Name('type', Load(), lineno=30, col_offset=54), Name('value', Load(), lineno=31, col_offset=48), Name('traceback', Load(), lineno=31, col_offset=55)], [], None, None, lineno=30, col_offset=15), lineno=30, col_offset=8)], [], lineno=27, col_offset=4)], [], lineno=16, col_offset=0), FunctionDef('mock_contextmanager', arguments([Name('func', Param(), lineno=34, col_offset=24)], None, None, []), [FunctionDef('helper', arguments([], 'args', 'kwds', []), [Return(Call(Name('MockContextManager', Load(), lineno=36, col_offset=15), [Call(Name('func', Load(), lineno=36, col_offset=34), [], [], Name('args', Load(), lineno=36, col_offset=40), Name('kwds', Load(), lineno=36, col_offset=48), lineno=36, col_offset=34)], [], None, None, lineno=36, col_offset=15), lineno=36, col_offset=8)], [], lineno=35, col_offset=4), Return(Name('helper', Load(), lineno=37, col_offset=11), lineno=37, col_offset=4)], [], lineno=34, col_offset=0), ClassDef('MockResource', [Name('object', Load(), lineno=40, col_offset=19)], [FunctionDef('__init__', arguments([Name('self', Param(), lineno=41, col_offset=17)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=42, col_offset=8), 'yielded', Store(), lineno=42, col_offset=8)], Name('False', Load(), lineno=42, col_offset=23), lineno=42, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=43, col_offset=8), 'stopped', Store(), lineno=43, col_offset=8)], Name('False', Load(), lineno=43, col_offset=23), lineno=43, col_offset=8)], [], lineno=41, col_offset=4)], [], lineno=40, col_offset=0), FunctionDef('mock_contextmanager_generator', arguments([], None, None, []), [Assign([Name('mock', Store(), lineno=48, col_offset=4)], Call(Name('MockResource', Load(), lineno=48, col_offset=11), [], [], None, None, lineno=48, col_offset=11), lineno=48, col_offset=4), TryFinally([Assign([Attribute(Name('mock', Load(), lineno=50, col_offset=8), 'yielded', Store(), lineno=50, col_offset=8)], Name('True', Load(), lineno=50, col_offset=23), lineno=50, col_offset=8), Expr(Yield(Name('mock', Load(), lineno=51, col_offset=14), lineno=51, col_offset=8), lineno=51, col_offset=8)], [Assign([Attribute(Name('mock', Load(), lineno=53, col_offset=8), 'stopped', Store(), lineno=53, col_offset=8)], Name('True', Load(), lineno=53, col_offset=23), lineno=53, col_offset=8)], lineno=49, col_offset=4)], [Name('mock_contextmanager', Load(), lineno=46, col_offset=1)], lineno=46, col_offset=0), ClassDef('Nested', [Name('object', Load(), lineno=56, col_offset=13)], [FunctionDef('__init__', arguments([Name('self', Param(), lineno=58, col_offset=17)], 'managers', None, []), [Assign([Attribute(Name('self', Load(), lineno=59, col_offset=8), 'managers', Store(), lineno=59, col_offset=8)], Name('managers', Load(), lineno=59, col_offset=24), lineno=59, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=60, col_offset=8), 'entered', Store(), lineno=60, col_offset=8)], Name('None', Load(), lineno=60, col_offset=23), lineno=60, col_offset=8)], [], lineno=58, col_offset=4), FunctionDef('__enter__', arguments([Name('self', Param(), lineno=62, col_offset=18)], None, None, []), [If(Compare(Attribute(Name('self', Load(), lineno=63, col_offset=11), 'entered', Load(), lineno=63, col_offset=11), [IsNot()], [Name('None', Load(), lineno=63, col_offset=31)], lineno=63, col_offset=11), [Raise(Call(Name('RuntimeError', Load(), lineno=64, col_offset=18), [Str('Context is not reentrant', lineno=64, col_offset=31)], [], None, None, lineno=64, col_offset=18), None, None, lineno=64, col_offset=12)], [], lineno=63, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=65, col_offset=8), 'entered', Store(), lineno=65, col_offset=8)], Call(Name('deque', Load(), lineno=65, col_offset=23), [], [], None, None, lineno=65, col_offset=23), lineno=65, col_offset=8), Assign([Name('vars', Store(), lineno=66, col_offset=8)], List([], Load(), lineno=66, col_offset=15), lineno=66, col_offset=8), TryExcept([For(Name('mgr', Store(), lineno=68, col_offset=16), Attribute(Name('self', Load(), lineno=68, col_offset=23), 'managers', Load(), lineno=68, col_offset=23), [Expr(Call(Attribute(Name('vars', Load(), lineno=69, col_offset=16), 'append', Load(), lineno=69, col_offset=16), [Call(Attribute(Name('mgr', Load(), lineno=69, col_offset=28), '__enter__', Load(), lineno=69, col_offset=28), [], [], None, None, lineno=69, col_offset=28)], [], None, None, lineno=69, col_offset=16), lineno=69, col_offset=16), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=70, col_offset=16), 'entered', Load(), lineno=70, col_offset=16), 'appendleft', Load(), lineno=70, col_offset=16), [Name('mgr', Load(), lineno=70, col_offset=40)], [], None, None, lineno=70, col_offset=16), lineno=70, col_offset=16)], [], lineno=68, col_offset=12)], [ExceptHandler(None, None, [If(UnaryOp(Not(), Call(Attribute(Name('self', Load(), lineno=72, col_offset=19), '__exit__', Load(), lineno=72, col_offset=19), [], [], Call(Attribute(Name('sys', Load(), lineno=72, col_offset=34), 'exc_info', Load(), lineno=72, col_offset=34), [], [], None, None, lineno=72, col_offset=34), None, lineno=72, col_offset=19), lineno=72, col_offset=15), [Raise(None, None, None, lineno=73, col_offset=16)], [], lineno=72, col_offset=12)], lineno=71, col_offset=8)], [], lineno=67, col_offset=8), Return(Name('vars', Load(), lineno=74, col_offset=15), lineno=74, col_offset=8)], [], lineno=62, col_offset=4), FunctionDef('__exit__', arguments([Name('self', Param(), lineno=76, col_offset=17)], 'exc_info', None, []), [Assign([Name('ex', Store(), lineno=80, col_offset=8)], Name('exc_info', Load(), lineno=80, col_offset=13), lineno=80, col_offset=8), For(Name('mgr', Store(), lineno=81, col_offset=12), Attribute(Name('self', Load(), lineno=81, col_offset=19), 'entered', Load(), lineno=81, col_offset=19), [TryExcept([If(Call(Attribute(Name('mgr', Load(), lineno=83, col_offset=19), '__exit__', Load(), lineno=83, col_offset=19), [], [], Name('ex', Load(), lineno=83, col_offset=33), None, lineno=83, col_offset=19), [Assign([Name('ex', Store(), lineno=84, col_offset=20)], Tuple([Name('None', Load(), lineno=84, col_offset=26), Name('None', Load(), lineno=84, col_offset=32), Name('None', Load(), lineno=84, col_offset=38)], Load(), lineno=84, col_offset=26), lineno=84, col_offset=20)], [], lineno=83, col_offset=16)], [ExceptHandler(None, None, [Assign([Name('ex', Store(), lineno=86, col_offset=16)], Call(Attribute(Name('sys', Load(), lineno=86, col_offset=21), 'exc_info', Load(), lineno=86, col_offset=21), [], [], None, None, lineno=86, col_offset=21), lineno=86, col_offset=16)], lineno=85, col_offset=12)], [], lineno=82, col_offset=12)], [], lineno=81, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=87, col_offset=8), 'entered', Store(), lineno=87, col_offset=8)], Name('None', Load(), lineno=87, col_offset=23), lineno=87, col_offset=8), If(Compare(Name('ex', Load(), lineno=88, col_offset=11), [IsNot()], [Name('exc_info', Load(), lineno=88, col_offset=21)], lineno=88, col_offset=11), [Raise(Subscript(Name('ex', Load(), lineno=89, col_offset=18), Index(Num(0, lineno=89, col_offset=21)), Load(), lineno=89, col_offset=18), Subscript(Name('ex', Load(), lineno=89, col_offset=25), Index(Num(1, lineno=89, col_offset=28)), Load(), lineno=89, col_offset=25), Subscript(Name('ex', Load(), lineno=89, col_offset=32), Index(Num(2, lineno=89, col_offset=35)), Load(), lineno=89, col_offset=32), lineno=89, col_offset=12)], [], lineno=88, col_offset=8)], [], lineno=76, col_offset=4)], [], lineno=56, col_offset=0), ClassDef('MockNested', [Name('Nested', Load(), lineno=92, col_offset=17)], [FunctionDef('__init__', arguments([Name('self', Param(), lineno=93, col_offset=17)], 'managers', None, []), [Expr(Call(Attribute(Name('Nested', Load(), lineno=94, col_offset=8), '__init__', Load(), lineno=94, col_offset=8), [Name('self', Load(), lineno=94, col_offset=24)], [], Name('managers', Load(), lineno=94, col_offset=31), None, lineno=94, col_offset=8), lineno=94, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=95, col_offset=8), 'enter_called', Store(), lineno=95, col_offset=8)], Name('False', Load(), lineno=95, col_offset=28), lineno=95, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=96, col_offset=8), 'exit_called', Store(), lineno=96, col_offset=8)], Name('False', Load(), lineno=96, col_offset=27), lineno=96, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=97, col_offset=8), 'exit_args', Store(), lineno=97, col_offset=8)], Name('None', Load(), lineno=97, col_offset=25), lineno=97, col_offset=8)], [], lineno=93, col_offset=4), FunctionDef('__enter__', arguments([Name('self', Param(), lineno=99, col_offset=18)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=100, col_offset=8), 'enter_called', Store(), lineno=100, col_offset=8)], Name('True', Load(), lineno=100, col_offset=28), lineno=100, col_offset=8), Return(Call(Attribute(Name('Nested', Load(), lineno=101, col_offset=15), '__enter__', Load(), lineno=101, col_offset=15), [Name('self', Load(), lineno=101, col_offset=32)], [], None, None, lineno=101, col_offset=15), lineno=101, col_offset=8)], [], lineno=99, col_offset=4), FunctionDef('__exit__', arguments([Name('self', Param(), lineno=103, col_offset=17)], 'exc_info', None, []), [Assign([Attribute(Name('self', Load(), lineno=104, col_offset=8), 'exit_called', Store(), lineno=104, col_offset=8)], Name('True', Load(), lineno=104, col_offset=27), lineno=104, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=105, col_offset=8), 'exit_args', Store(), lineno=105, col_offset=8)], Name('exc_info', Load(), lineno=105, col_offset=25), lineno=105, col_offset=8), Return(Call(Attribute(Name('Nested', Load(), lineno=106, col_offset=15), '__exit__', Load(), lineno=106, col_offset=15), [Name('self', Load(), lineno=106, col_offset=31)], [], Name('exc_info', Load(), lineno=106, col_offset=38), None, lineno=106, col_offset=15), lineno=106, col_offset=8)], [], lineno=103, col_offset=4)], [], lineno=92, col_offset=0), ClassDef('FailureTestCase', [Attribute(Name('unittest', Load(), lineno=109, col_offset=22), 'TestCase', Load(), lineno=109, col_offset=22)], [FunctionDef('testNameError', arguments([Name('self', Param(), lineno=110, col_offset=22)], None, None, []), [FunctionDef('fooNotDeclared', arguments([], None, None, []), [With(Name('foo', Load(), lineno=112, col_offset=17), None, [Pass( lineno=112, col_offset=22)], lineno=112, col_offset=17)], [], lineno=111, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=113, col_offset=8), 'assertRaises', Load(), lineno=113, col_offset=8), [Name('NameError', Load(), lineno=113, col_offset=26), Name('fooNotDeclared', Load(), lineno=113, col_offset=37)], [], None, None, lineno=113, col_offset=8), lineno=113, col_offset=8)], [], lineno=110, col_offset=4), FunctionDef('testEnterAttributeError', arguments([Name('self', Param(), lineno=115, col_offset=32)], None, None, []), [ClassDef('LacksEnter', [Name('object', Load(), lineno=116, col_offset=25)], [FunctionDef('__exit__', arguments([Name('self', Param(), lineno=117, col_offset=25), Name('type', Param(), lineno=117, col_offset=31), Name('value', Param(), lineno=117, col_offset=37), Name('traceback', Param(), lineno=117, col_offset=44)], None, None, []), [Pass( lineno=118, col_offset=16)], [], lineno=117, col_offset=12)], [], lineno=116, col_offset=8), FunctionDef('fooLacksEnter', arguments([], None, None, []), [Assign([Name('foo', Store(), lineno=121, col_offset=12)], Call(Name('LacksEnter', Load(), lineno=121, col_offset=18), [], [], None, None, lineno=121, col_offset=18), lineno=121, col_offset=12), With(Name('foo', Load(), lineno=122, col_offset=17), None, [Pass( lineno=122, col_offset=22)], lineno=122, col_offset=17)], [], lineno=120, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=123, col_offset=8), 'assertRaises', Load(), lineno=123, col_offset=8), [Name('AttributeError', Load(), lineno=123, col_offset=26), Name('fooLacksEnter', Load(), lineno=123, col_offset=42)], [], None, None, lineno=123, col_offset=8), lineno=123, col_offset=8)], [], lineno=115, col_offset=4), FunctionDef('testExitAttributeError', arguments([Name('self', Param(), lineno=125, col_offset=31)], None, None, []), [ClassDef('LacksExit', [Name('object', Load(), lineno=126, col_offset=24)], [FunctionDef('__enter__', arguments([Name('self', Param(), lineno=127, col_offset=26)], None, None, []), [Pass( lineno=128, col_offset=16)], [], lineno=127, col_offset=12)], [], lineno=126, col_offset=8), FunctionDef('fooLacksExit', arguments([], None, None, []), [Assign([Name('foo', Store(), lineno=131, col_offset=12)], Call(Name('LacksExit', Load(), lineno=131, col_offset=18), [], [], None, None, lineno=131, col_offset=18), lineno=131, col_offset=12), With(Name('foo', Load(), lineno=132, col_offset=17), None, [Pass( lineno=132, col_offset=22)], lineno=132, col_offset=17)], [], lineno=130, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=133, col_offset=8), 'assertRaises', Load(), lineno=133, col_offset=8), [Name('AttributeError', Load(), lineno=133, col_offset=26), Name('fooLacksExit', Load(), lineno=133, col_offset=42)], [], None, None, lineno=133, col_offset=8), lineno=133, col_offset=8)], [], lineno=125, col_offset=4), FunctionDef('assertRaisesSyntaxError', arguments([Name('self', Param(), lineno=135, col_offset=32), Name('codestr', Param(), lineno=135, col_offset=38)], None, None, []), [FunctionDef('shouldRaiseSyntaxError', arguments([Name('s', Param(), lineno=136, col_offset=35)], None, None, []), [Expr(Call(Name('compile', Load(), lineno=137, col_offset=12), [Name('s', Load(), lineno=137, col_offset=20), Str('', lineno=137, col_offset=23), Str('single', lineno=137, col_offset=27)], [], None, None, lineno=137, col_offset=12), lineno=137, col_offset=12)], [], lineno=136, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=138, col_offset=8), 'assertRaises', Load(), lineno=138, col_offset=8), [Name('SyntaxError', Load(), lineno=138, col_offset=26), Name('shouldRaiseSyntaxError', Load(), lineno=138, col_offset=39), Name('codestr', Load(), lineno=138, col_offset=63)], [], None, None, lineno=138, col_offset=8), lineno=138, col_offset=8)], [], lineno=135, col_offset=4), FunctionDef('testAssignmentToNoneError', arguments([Name('self', Param(), lineno=140, col_offset=34)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=141, col_offset=8), 'assertRaisesSyntaxError', Load(), lineno=141, col_offset=8), [Str('with mock as None:\n  pass', lineno=141, col_offset=37)], [], None, None, lineno=141, col_offset=8), lineno=141, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=142, col_offset=8), 'assertRaisesSyntaxError', Load(), lineno=142, col_offset=8), [Str('with mock as (None):\n  pass', lineno=143, col_offset=12)], [], None, None, lineno=142, col_offset=8), lineno=142, col_offset=8)], [], lineno=140, col_offset=4), FunctionDef('testAssignmentToEmptyTupleError', arguments([Name('self', Param(), lineno=146, col_offset=40)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=147, col_offset=8), 'assertRaisesSyntaxError', Load(), lineno=147, col_offset=8), [Str('with mock as ():\n  pass', lineno=148, col_offset=12)], [], None, None, lineno=147, col_offset=8), lineno=147, col_offset=8)], [], lineno=146, col_offset=4), FunctionDef('testAssignmentToTupleOnlyContainingNoneError', arguments([Name('self', Param(), lineno=151, col_offset=53)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=152, col_offset=8), 'assertRaisesSyntaxError', Load(), lineno=152, col_offset=8), [Str('with mock as None,:\n  pass', lineno=152, col_offset=37)], [], None, None, lineno=152, col_offset=8), lineno=152, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=153, col_offset=8), 'assertRaisesSyntaxError', Load(), lineno=153, col_offset=8), [Str('with mock as (None,):\n  pass', lineno=154, col_offset=12)], [], None, None, lineno=153, col_offset=8), lineno=153, col_offset=8)], [], lineno=151, col_offset=4), FunctionDef('testAssignmentToTupleContainingNoneError', arguments([Name('self', Param(), lineno=157, col_offset=49)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=158, col_offset=8), 'assertRaisesSyntaxError', Load(), lineno=158, col_offset=8), [Str('with mock as (foo, None, bar):\n  pass', lineno=159, col_offset=12)], [], None, None, lineno=158, col_offset=8), lineno=158, col_offset=8)], [], lineno=157, col_offset=4), FunctionDef('testEnterThrows', arguments([Name('self', Param(), lineno=162, col_offset=24)], None, None, []), [ClassDef('EnterThrows', [Name('object', Load(), lineno=163, col_offset=26)], [FunctionDef('__enter__', arguments([Name('self', Param(), lineno=164, col_offset=26)], None, None, []), [Raise(Call(Name('RuntimeError', Load(), lineno=165, col_offset=22), [Str('Enter threw', lineno=165, col_offset=35)], [], None, None, lineno=165, col_offset=22), None, None, lineno=165, col_offset=16)], [], lineno=164, col_offset=12), FunctionDef('__exit__', arguments([Name('self', Param(), lineno=166, col_offset=25)], 'args', None, []), [Pass( lineno=167, col_offset=16)], [], lineno=166, col_offset=12)], [], lineno=163, col_offset=8), FunctionDef('shouldThrow', arguments([], None, None, []), [Assign([Name('ct', Store(), lineno=170, col_offset=12)], Call(Name('EnterThrows', Load(), lineno=170, col_offset=17), [], [], None, None, lineno=170, col_offset=17), lineno=170, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=171, col_offset=12), 'foo', Store(), lineno=171, col_offset=12)], Name('None', Load(), lineno=171, col_offset=23), lineno=171, col_offset=12), With(Name('ct', Load(), lineno=172, col_offset=17), Attribute(Name('self', Load(), lineno=172, col_offset=23), 'foo', Store(), lineno=172, col_offset=23), [Pass( lineno=173, col_offset=16)], lineno=172, col_offset=17)], [], lineno=169, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=174, col_offset=8), 'assertRaises', Load(), lineno=174, col_offset=8), [Name('RuntimeError', Load(), lineno=174, col_offset=26), Name('shouldThrow', Load(), lineno=174, col_offset=40)], [], None, None, lineno=174, col_offset=8), lineno=174, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=175, col_offset=8), 'assertEqual', Load(), lineno=175, col_offset=8), [Attribute(Name('self', Load(), lineno=175, col_offset=25), 'foo', Load(), lineno=175, col_offset=25), Name('None', Load(), lineno=175, col_offset=35)], [], None, None, lineno=175, col_offset=8), lineno=175, col_offset=8)], [], lineno=162, col_offset=4), FunctionDef('testExitThrows', arguments([Name('self', Param(), lineno=177, col_offset=23)], None, None, []), [ClassDef('ExitThrows', [Name('object', Load(), lineno=178, col_offset=25)], [FunctionDef('__enter__', arguments([Name('self', Param(), lineno=179, col_offset=26)], None, None, []), [Return(None, lineno=180, col_offset=16)], [], lineno=179, col_offset=12), FunctionDef('__exit__', arguments([Name('self', Param(), lineno=181, col_offset=25)], 'args', None, []), [Raise(Call(Name('RuntimeError', Load(), lineno=182, col_offset=22), [Num(42, lineno=182, col_offset=35)], [], None, None, lineno=182, col_offset=22), None, None, lineno=182, col_offset=16)], [], lineno=181, col_offset=12)], [], lineno=178, col_offset=8), FunctionDef('shouldThrow', arguments([], None, None, []), [With(Call(Name('ExitThrows', Load(), lineno=184, col_offset=17), [], [], None, None, lineno=184, col_offset=17), None, [Pass( lineno=185, col_offset=16)], lineno=184, col_offset=17)], [], lineno=183, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=186, col_offset=8), 'assertRaises', Load(), lineno=186, col_offset=8), [Name('RuntimeError', Load(), lineno=186, col_offset=26), Name('shouldThrow', Load(), lineno=186, col_offset=40)], [], None, None, lineno=186, col_offset=8), lineno=186, col_offset=8)], [], lineno=177, col_offset=4)], [], lineno=109, col_offset=0), ClassDef('ContextmanagerAssertionMixin', [Name('object', Load(), lineno=188, col_offset=35)], [Assign([Name('TEST_EXCEPTION', Store(), lineno=189, col_offset=4)], Call(Name('RuntimeError', Load(), lineno=189, col_offset=21), [Str('test exception', lineno=189, col_offset=34)], [], None, None, lineno=189, col_offset=21), lineno=189, col_offset=4), FunctionDef('assertInWithManagerInvariants', arguments([Name('self', Param(), lineno=191, col_offset=38), Name('mock_manager', Param(), lineno=191, col_offset=44)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=192, col_offset=8), 'assertTrue', Load(), lineno=192, col_offset=8), [Attribute(Name('mock_manager', Load(), lineno=192, col_offset=24), 'enter_called', Load(), lineno=192, col_offset=24)], [], None, None, lineno=192, col_offset=8), lineno=192, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=193, col_offset=8), 'assertFalse', Load(), lineno=193, col_offset=8), [Attribute(Name('mock_manager', Load(), lineno=193, col_offset=25), 'exit_called', Load(), lineno=193, col_offset=25)], [], None, None, lineno=193, col_offset=8), lineno=193, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=194, col_offset=8), 'assertEqual', Load(), lineno=194, col_offset=8), [Attribute(Name('mock_manager', Load(), lineno=194, col_offset=25), 'exit_args', Load(), lineno=194, col_offset=25), Name('None', Load(), lineno=194, col_offset=49)], [], None, None, lineno=194, col_offset=8), lineno=194, col_offset=8)], [], lineno=191, col_offset=4), FunctionDef('assertAfterWithManagerInvariants', arguments([Name('self', Param(), lineno=196, col_offset=41), Name('mock_manager', Param(), lineno=196, col_offset=47), Name('exit_args', Param(), lineno=196, col_offset=61)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=197, col_offset=8), 'assertTrue', Load(), lineno=197, col_offset=8), [Attribute(Name('mock_manager', Load(), lineno=197, col_offset=24), 'enter_called', Load(), lineno=197, col_offset=24)], [], None, None, lineno=197, col_offset=8), lineno=197, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=198, col_offset=8), 'assertTrue', Load(), lineno=198, col_offset=8), [Attribute(Name('mock_manager', Load(), lineno=198, col_offset=24), 'exit_called', Load(), lineno=198, col_offset=24)], [], None, None, lineno=198, col_offset=8), lineno=198, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=199, col_offset=8), 'assertEqual', Load(), lineno=199, col_offset=8), [Attribute(Name('mock_manager', Load(), lineno=199, col_offset=25), 'exit_args', Load(), lineno=199, col_offset=25), Name('exit_args', Load(), lineno=199, col_offset=49)], [], None, None, lineno=199, col_offset=8), lineno=199, col_offset=8)], [], lineno=196, col_offset=4), FunctionDef('assertAfterWithManagerInvariantsNoError', arguments([Name('self', Param(), lineno=201, col_offset=48), Name('mock_manager', Param(), lineno=201, col_offset=54)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=202, col_offset=8), 'assertAfterWithManagerInvariants', Load(), lineno=202, col_offset=8), [Name('mock_manager', Load(), lineno=202, col_offset=46), Tuple([Name('None', Load(), lineno=203, col_offset=13), Name('None', Load(), lineno=203, col_offset=19), Name('None', Load(), lineno=203, col_offset=25)], Load(), lineno=203, col_offset=13)], [], None, None, lineno=202, col_offset=8), lineno=202, col_offset=8)], [], lineno=201, col_offset=4), FunctionDef('assertInWithGeneratorInvariants', arguments([Name('self', Param(), lineno=205, col_offset=40), Name('mock_generator', Param(), lineno=205, col_offset=46)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=206, col_offset=8), 'assertTrue', Load(), lineno=206, col_offset=8), [Attribute(Name('mock_generator', Load(), lineno=206, col_offset=24), 'yielded', Load(), lineno=206, col_offset=24)], [], None, None, lineno=206, col_offset=8), lineno=206, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=207, col_offset=8), 'assertFalse', Load(), lineno=207, col_offset=8), [Attribute(Name('mock_generator', Load(), lineno=207, col_offset=25), 'stopped', Load(), lineno=207, col_offset=25)], [], None, None, lineno=207, col_offset=8), lineno=207, col_offset=8)], [], lineno=205, col_offset=4), FunctionDef('assertAfterWithGeneratorInvariantsNoError', arguments([Name('self', Param(), lineno=209, col_offset=50), Name('mock_generator', Param(), lineno=209, col_offset=56)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=210, col_offset=8), 'assertTrue', Load(), lineno=210, col_offset=8), [Attribute(Name('mock_generator', Load(), lineno=210, col_offset=24), 'yielded', Load(), lineno=210, col_offset=24)], [], None, None, lineno=210, col_offset=8), lineno=210, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=211, col_offset=8), 'assertTrue', Load(), lineno=211, col_offset=8), [Attribute(Name('mock_generator', Load(), lineno=211, col_offset=24), 'stopped', Load(), lineno=211, col_offset=24)], [], None, None, lineno=211, col_offset=8), lineno=211, col_offset=8)], [], lineno=209, col_offset=4), FunctionDef('raiseTestException', arguments([Name('self', Param(), lineno=213, col_offset=27)], None, None, []), [Raise(Attribute(Name('self', Load(), lineno=214, col_offset=14), 'TEST_EXCEPTION', Load(), lineno=214, col_offset=14), None, None, lineno=214, col_offset=8)], [], lineno=213, col_offset=4), FunctionDef('assertAfterWithManagerInvariantsWithError', arguments([Name('self', Param(), lineno=216, col_offset=50), Name('mock_manager', Param(), lineno=216, col_offset=56), Name('exc_type', Param(), lineno=217, col_offset=50)], None, None, [Name('None', Load(), lineno=217, col_offset=59)]), [Expr(Call(Attribute(Name('self', Load(), lineno=218, col_offset=8), 'assertTrue', Load(), lineno=218, col_offset=8), [Attribute(Name('mock_manager', Load(), lineno=218, col_offset=24), 'enter_called', Load(), lineno=218, col_offset=24)], [], None, None, lineno=218, col_offset=8), lineno=218, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=219, col_offset=8), 'assertTrue', Load(), lineno=219, col_offset=8), [Attribute(Name('mock_manager', Load(), lineno=219, col_offset=24), 'exit_called', Load(), lineno=219, col_offset=24)], [], None, None, lineno=219, col_offset=8), lineno=219, col_offset=8), If(Compare(Name('exc_type', Load(), lineno=220, col_offset=11), [Is()], [Name('None', Load(), lineno=220, col_offset=23)], lineno=220, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=221, col_offset=12), 'assertEqual', Load(), lineno=221, col_offset=12), [Subscript(Attribute(Name('mock_manager', Load(), lineno=221, col_offset=29), 'exit_args', Load(), lineno=221, col_offset=29), Index(Num(1, lineno=221, col_offset=52)), Load(), lineno=221, col_offset=29), Attribute(Name('self', Load(), lineno=221, col_offset=56), 'TEST_EXCEPTION', Load(), lineno=221, col_offset=56)], [], None, None, lineno=221, col_offset=12), lineno=221, col_offset=12), Assign([Name('exc_type', Store(), lineno=222, col_offset=12)], Call(Name('type', Load(), lineno=222, col_offset=23), [Attribute(Name('self', Load(), lineno=222, col_offset=28), 'TEST_EXCEPTION', Load(), lineno=222, col_offset=28)], [], None, None, lineno=222, col_offset=23), lineno=222, col_offset=12)], [], lineno=220, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=223, col_offset=8), 'assertEqual', Load(), lineno=223, col_offset=8), [Subscript(Attribute(Name('mock_manager', Load(), lineno=223, col_offset=25), 'exit_args', Load(), lineno=223, col_offset=25), Index(Num(0, lineno=223, col_offset=48)), Load(), lineno=223, col_offset=25), Name('exc_type', Load(), lineno=223, col_offset=52)], [], None, None, lineno=223, col_offset=8), lineno=223, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=225, col_offset=8), 'assertIsInstance', Load(), lineno=225, col_offset=8), [Subscript(Attribute(Name('mock_manager', Load(), lineno=225, col_offset=30), 'exit_args', Load(), lineno=225, col_offset=30), Index(Num(1, lineno=225, col_offset=53)), Load(), lineno=225, col_offset=30), Name('exc_type', Load(), lineno=225, col_offset=57)], [], None, None, lineno=225, col_offset=8), lineno=225, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=226, col_offset=8), 'assertIsNot', Load(), lineno=226, col_offset=8), [Subscript(Attribute(Name('mock_manager', Load(), lineno=226, col_offset=25), 'exit_args', Load(), lineno=226, col_offset=25), Index(Num(2, lineno=226, col_offset=48)), Load(), lineno=226, col_offset=25), Name('None', Load(), lineno=226, col_offset=52)], [], None, None, lineno=226, col_offset=8), lineno=226, col_offset=8)], [], lineno=216, col_offset=4), FunctionDef('assertAfterWithGeneratorInvariantsWithError', arguments([Name('self', Param(), lineno=228, col_offset=52), Name('mock_generator', Param(), lineno=228, col_offset=58)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=229, col_offset=8), 'assertTrue', Load(), lineno=229, col_offset=8), [Attribute(Name('mock_generator', Load(), lineno=229, col_offset=24), 'yielded', Load(), lineno=229, col_offset=24)], [], None, None, lineno=229, col_offset=8), lineno=229, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=230, col_offset=8), 'assertTrue', Load(), lineno=230, col_offset=8), [Attribute(Name('mock_generator', Load(), lineno=230, col_offset=24), 'stopped', Load(), lineno=230, col_offset=24)], [], None, None, lineno=230, col_offset=8), lineno=230, col_offset=8)], [], lineno=228, col_offset=4)], [], lineno=188, col_offset=0), ClassDef('NonexceptionalTestCase', [Attribute(Name('unittest', Load(), lineno=233, col_offset=29), 'TestCase', Load(), lineno=233, col_offset=29), Name('ContextmanagerAssertionMixin', Load(), lineno=233, col_offset=48)], [FunctionDef('testInlineGeneratorSyntax', arguments([Name('self', Param(), lineno=234, col_offset=34)], None, None, []), [With(Call(Name('mock_contextmanager_generator', Load(), lineno=235, col_offset=13), [], [], None, None, lineno=235, col_offset=13), None, [Pass( lineno=236, col_offset=12)], lineno=235, col_offset=13)], [], lineno=234, col_offset=4), FunctionDef('testUnboundGenerator', arguments([Name('self', Param(), lineno=238, col_offset=29)], None, None, []), [Assign([Name('mock', Store(), lineno=239, col_offset=8)], Call(Name('mock_contextmanager_generator', Load(), lineno=239, col_offset=15), [], [], None, None, lineno=239, col_offset=15), lineno=239, col_offset=8), With(Name('mock', Load(), lineno=240, col_offset=13), None, [Pass( lineno=241, col_offset=12)], lineno=240, col_offset=13), Expr(Call(Attribute(Name('self', Load(), lineno=242, col_offset=8), 'assertAfterWithManagerInvariantsNoError', Load(), lineno=242, col_offset=8), [Name('mock', Load(), lineno=242, col_offset=53)], [], None, None, lineno=242, col_offset=8), lineno=242, col_offset=8)], [], lineno=238, col_offset=4), FunctionDef('testInlineGeneratorBoundSyntax', arguments([Name('self', Param(), lineno=244, col_offset=39)], None, None, []), [With(Call(Name('mock_contextmanager_generator', Load(), lineno=245, col_offset=13), [], [], None, None, lineno=245, col_offset=13), Name('foo', Store(), lineno=245, col_offset=48), [Expr(Call(Attribute(Name('self', Load(), lineno=246, col_offset=12), 'assertInWithGeneratorInvariants', Load(), lineno=246, col_offset=12), [Name('foo', Load(), lineno=246, col_offset=49)], [], None, None, lineno=246, col_offset=12), lineno=246, col_offset=12)], lineno=245, col_offset=13), Expr(Call(Attribute(Name('self', Load(), lineno=248, col_offset=8), 'assertAfterWithGeneratorInvariantsNoError', Load(), lineno=248, col_offset=8), [Name('foo', Load(), lineno=248, col_offset=55)], [], None, None, lineno=248, col_offset=8), lineno=248, col_offset=8)], [], lineno=244, col_offset=4), FunctionDef('testInlineGeneratorBoundToExistingVariable', arguments([Name('self', Param(), lineno=250, col_offset=51)], None, None, []), [Assign([Name('foo', Store(), lineno=251, col_offset=8)], Name('None', Load(), lineno=251, col_offset=14), lineno=251, col_offset=8), With(Call(Name('mock_contextmanager_generator', Load(), lineno=252, col_offset=13), [], [], None, None, lineno=252, col_offset=13), Name('foo', Store(), lineno=252, col_offset=48), [Expr(Call(Attribute(Name('self', Load(), lineno=253, col_offset=12), 'assertInWithGeneratorInvariants', Load(), lineno=253, col_offset=12), [Name('foo', Load(), lineno=253, col_offset=49)], [], None, None, lineno=253, col_offset=12), lineno=253, col_offset=12)], lineno=252, col_offset=13), Expr(Call(Attribute(Name('self', Load(), lineno=254, col_offset=8), 'assertAfterWithGeneratorInvariantsNoError', Load(), lineno=254, col_offset=8), [Name('foo', Load(), lineno=254, col_offset=55)], [], None, None, lineno=254, col_offset=8), lineno=254, col_offset=8)], [], lineno=250, col_offset=4), FunctionDef('testInlineGeneratorBoundToDottedVariable', arguments([Name('self', Param(), lineno=256, col_offset=49)], None, None, []), [With(Call(Name('mock_contextmanager_generator', Load(), lineno=257, col_offset=13), [], [], None, None, lineno=257, col_offset=13), Attribute(Name('self', Load(), lineno=257, col_offset=48), 'foo', Store(), lineno=257, col_offset=48), [Expr(Call(Attribute(Name('self', Load(), lineno=258, col_offset=12), 'assertInWithGeneratorInvariants', Load(), lineno=258, col_offset=12), [Attribute(Name('self', Load(), lineno=258, col_offset=49), 'foo', Load(), lineno=258, col_offset=49)], [], None, None, lineno=258, col_offset=12), lineno=258, col_offset=12)], lineno=257, col_offset=13), Expr(Call(Attribute(Name('self', Load(), lineno=259, col_offset=8), 'assertAfterWithGeneratorInvariantsNoError', Load(), lineno=259, col_offset=8), [Attribute(Name('self', Load(), lineno=259, col_offset=55), 'foo', Load(), lineno=259, col_offset=55)], [], None, None, lineno=259, col_offset=8), lineno=259, col_offset=8)], [], lineno=256, col_offset=4), FunctionDef('testBoundGenerator', arguments([Name('self', Param(), lineno=261, col_offset=27)], None, None, []), [Assign([Name('mock', Store(), lineno=262, col_offset=8)], Call(Name('mock_contextmanager_generator', Load(), lineno=262, col_offset=15), [], [], None, None, lineno=262, col_offset=15), lineno=262, col_offset=8), With(Name('mock', Load(), lineno=263, col_offset=13), Name('foo', Store(), lineno=263, col_offset=21), [Expr(Call(Attribute(Name('self', Load(), lineno=264, col_offset=12), 'assertInWithGeneratorInvariants', Load(), lineno=264, col_offset=12), [Name('foo', Load(), lineno=264, col_offset=49)], [], None, None, lineno=264, col_offset=12), lineno=264, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=265, col_offset=12), 'assertInWithManagerInvariants', Load(), lineno=265, col_offset=12), [Name('mock', Load(), lineno=265, col_offset=47)], [], None, None, lineno=265, col_offset=12), lineno=265, col_offset=12)], lineno=263, col_offset=13), Expr(Call(Attribute(Name('self', Load(), lineno=266, col_offset=8), 'assertAfterWithGeneratorInvariantsNoError', Load(), lineno=266, col_offset=8), [Name('foo', Load(), lineno=266, col_offset=55)], [], None, None, lineno=266, col_offset=8), lineno=266, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=267, col_offset=8), 'assertAfterWithManagerInvariantsNoError', Load(), lineno=267, col_offset=8), [Name('mock', Load(), lineno=267, col_offset=53)], [], None, None, lineno=267, col_offset=8), lineno=267, col_offset=8)], [], lineno=261, col_offset=4), FunctionDef('testNestedSingleStatements', arguments([Name('self', Param(), lineno=269, col_offset=35)], None, None, []), [Assign([Name('mock_a', Store(), lineno=270, col_offset=8)], Call(Name('mock_contextmanager_generator', Load(), lineno=270, col_offset=17), [], [], None, None, lineno=270, col_offset=17), lineno=270, col_offset=8), With(Name('mock_a', Load(), lineno=271, col_offset=13), Name('foo', Store(), lineno=271, col_offset=23), [Assign([Name('mock_b', Store(), lineno=272, col_offset=12)], Call(Name('mock_contextmanager_generator', Load(), lineno=272, col_offset=21), [], [], None, None, lineno=272, col_offset=21), lineno=272, col_offset=12), With(Name('mock_b', Load(), lineno=273, col_offset=17), Name('bar', Store(), lineno=273, col_offset=27), [Expr(Call(Attribute(Name('self', Load(), lineno=274, col_offset=16), 'assertInWithManagerInvariants', Load(), lineno=274, col_offset=16), [Name('mock_a', Load(), lineno=274, col_offset=51)], [], None, None, lineno=274, col_offset=16), lineno=274, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=275, col_offset=16), 'assertInWithManagerInvariants', Load(), lineno=275, col_offset=16), [Name('mock_b', Load(), lineno=275, col_offset=51)], [], None, None, lineno=275, col_offset=16), lineno=275, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=276, col_offset=16), 'assertInWithGeneratorInvariants', Load(), lineno=276, col_offset=16), [Name('foo', Load(), lineno=276, col_offset=53)], [], None, None, lineno=276, col_offset=16), lineno=276, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=277, col_offset=16), 'assertInWithGeneratorInvariants', Load(), lineno=277, col_offset=16), [Name('bar', Load(), lineno=277, col_offset=53)], [], None, None, lineno=277, col_offset=16), lineno=277, col_offset=16)], lineno=273, col_offset=17), Expr(Call(Attribute(Name('self', Load(), lineno=278, col_offset=12), 'assertAfterWithManagerInvariantsNoError', Load(), lineno=278, col_offset=12), [Name('mock_b', Load(), lineno=278, col_offset=57)], [], None, None, lineno=278, col_offset=12), lineno=278, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=279, col_offset=12), 'assertAfterWithGeneratorInvariantsNoError', Load(), lineno=279, col_offset=12), [Name('bar', Load(), lineno=279, col_offset=59)], [], None, None, lineno=279, col_offset=12), lineno=279, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=280, col_offset=12), 'assertInWithManagerInvariants', Load(), lineno=280, col_offset=12), [Name('mock_a', Load(), lineno=280, col_offset=47)], [], None, None, lineno=280, col_offset=12), lineno=280, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=281, col_offset=12), 'assertInWithGeneratorInvariants', Load(), lineno=281, col_offset=12), [Name('foo', Load(), lineno=281, col_offset=49)], [], None, None, lineno=281, col_offset=12), lineno=281, col_offset=12)], lineno=271, col_offset=13), Expr(Call(Attribute(Name('self', Load(), lineno=282, col_offset=8), 'assertAfterWithManagerInvariantsNoError', Load(), lineno=282, col_offset=8), [Name('mock_a', Load(), lineno=282, col_offset=53)], [], None, None, lineno=282, col_offset=8), lineno=282, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=283, col_offset=8), 'assertAfterWithGeneratorInvariantsNoError', Load(), lineno=283, col_offset=8), [Name('foo', Load(), lineno=283, col_offset=55)], [], None, None, lineno=283, col_offset=8), lineno=283, col_offset=8)], [], lineno=269, col_offset=4)], [], lineno=233, col_offset=0), ClassDef('NestedNonexceptionalTestCase', [Attribute(Name('unittest', Load(), lineno=286, col_offset=35), 'TestCase', Load(), lineno=286, col_offset=35), Name('ContextmanagerAssertionMixin', Load(), lineno=287, col_offset=4)], [FunctionDef('testSingleArgInlineGeneratorSyntax', arguments([Name('self', Param(), lineno=288, col_offset=43)], None, None, []), [With(Call(Name('Nested', Load(), lineno=289, col_offset=13), [Call(Name('mock_contextmanager_generator', Load(), lineno=289, col_offset=20), [], [], None, None, lineno=289, col_offset=20)], [], None, None, lineno=289, col_offset=13), None, [Pass( lineno=290, col_offset=12)], lineno=289, col_offset=13)], [], lineno=288, col_offset=4), FunctionDef('testSingleArgBoundToNonTuple', arguments([Name('self', Param(), lineno=292, col_offset=37)], None, None, []), [Assign([Name('m', Store(), lineno=293, col_offset=8)], Call(Name('mock_contextmanager_generator', Load(), lineno=293, col_offset=12), [], [], None, None, lineno=293, col_offset=12), lineno=293, col_offset=8), With(Call(Name('Nested', Load(), lineno=296, col_offset=13), [Name('m', Load(), lineno=296, col_offset=20)], [], None, None, lineno=296, col_offset=13), Name('foo', Store(), lineno=296, col_offset=26), [Expr(Call(Attribute(Name('self', Load(), lineno=297, col_offset=12), 'assertInWithManagerInvariants', Load(), lineno=297, col_offset=12), [Name('m', Load(), lineno=297, col_offset=47)], [], None, None, lineno=297, col_offset=12), lineno=297, col_offset=12)], lineno=296, col_offset=13), Expr(Call(Attribute(Name('self', Load(), lineno=298, col_offset=8), 'assertAfterWithManagerInvariantsNoError', Load(), lineno=298, col_offset=8), [Name('m', Load(), lineno=298, col_offset=53)], [], None, None, lineno=298, col_offset=8), lineno=298, col_offset=8)], [], lineno=292, col_offset=4), FunctionDef('testSingleArgBoundToSingleElementParenthesizedList', arguments([Name('self', Param(), lineno=300, col_offset=59)], None, None, []), [Assign([Name('m', Store(), lineno=301, col_offset=8)], Call(Name('mock_contextmanager_generator', Load(), lineno=301, col_offset=12), [], [], None, None, lineno=301, col_offset=12), lineno=301, col_offset=8), With(Call(Name('Nested', Load(), lineno=304, col_offset=13), [Name('m', Load(), lineno=304, col_offset=20)], [], None, None, lineno=304, col_offset=13), Name('foo', Store(), lineno=304, col_offset=27), [Expr(Call(Attribute(Name('self', Load(), lineno=305, col_offset=12), 'assertInWithManagerInvariants', Load(), lineno=305, col_offset=12), [Name('m', Load(), lineno=305, col_offset=47)], [], None, None, lineno=305, col_offset=12), lineno=305, col_offset=12)], lineno=304, col_offset=13), Expr(Call(Attribute(Name('self', Load(), lineno=306, col_offset=8), 'assertAfterWithManagerInvariantsNoError', Load(), lineno=306, col_offset=8), [Name('m', Load(), lineno=306, col_offset=53)], [], None, None, lineno=306, col_offset=8), lineno=306, col_offset=8)], [], lineno=300, col_offset=4), FunctionDef('testSingleArgBoundToMultipleElementTupleError', arguments([Name('self', Param(), lineno=308, col_offset=54)], None, None, []), [FunctionDef('shouldThrowValueError', arguments([], None, None, []), [With(Call(Name('Nested', Load(), lineno=310, col_offset=17), [Call(Name('mock_contextmanager_generator', Load(), lineno=310, col_offset=24), [], [], None, None, lineno=310, col_offset=24)], [], None, None, lineno=310, col_offset=17), Tuple([Name('foo', Store(), lineno=310, col_offset=61), Name('bar', Store(), lineno=310, col_offset=66)], Store(), lineno=310, col_offset=61), [Pass( lineno=311, col_offset=16)], lineno=310, col_offset=17)], [], lineno=309, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=312, col_offset=8), 'assertRaises', Load(), lineno=312, col_offset=8), [Name('ValueError', Load(), lineno=312, col_offset=26), Name('shouldThrowValueError', Load(), lineno=312, col_offset=38)], [], None, None, lineno=312, col_offset=8), lineno=312, col_offset=8)], [], lineno=308, col_offset=4), FunctionDef('testSingleArgUnbound', arguments([Name('self', Param(), lineno=314, col_offset=29)], None, None, []), [Assign([Name('mock_contextmanager', Store(), lineno=315, col_offset=8)], Call(Name('mock_contextmanager_generator', Load(), lineno=315, col_offset=30), [], [], None, None, lineno=315, col_offset=30), lineno=315, col_offset=8), Assign([Name('mock_nested', Store(), lineno=316, col_offset=8)], Call(Name('MockNested', Load(), lineno=316, col_offset=22), [Name('mock_contextmanager', Load(), lineno=316, col_offset=33)], [], None, None, lineno=316, col_offset=22), lineno=316, col_offset=8), With(Name('mock_nested', Load(), lineno=317, col_offset=13), None, [Expr(Call(Attribute(Name('self', Load(), lineno=318, col_offset=12), 'assertInWithManagerInvariants', Load(), lineno=318, col_offset=12), [Name('mock_contextmanager', Load(), lineno=318, col_offset=47)], [], None, None, lineno=318, col_offset=12), lineno=318, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=319, col_offset=12), 'assertInWithManagerInvariants', Load(), lineno=319, col_offset=12), [Name('mock_nested', Load(), lineno=319, col_offset=47)], [], None, None, lineno=319, col_offset=12), lineno=319, col_offset=12)], lineno=317, col_offset=13), Expr(Call(Attribute(Name('self', Load(), lineno=320, col_offset=8), 'assertAfterWithManagerInvariantsNoError', Load(), lineno=320, col_offset=8), [Name('mock_contextmanager', Load(), lineno=320, col_offset=53)], [], None, None, lineno=320, col_offset=8), lineno=320, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=321, col_offset=8), 'assertAfterWithManagerInvariantsNoError', Load(), lineno=321, col_offset=8), [Name('mock_nested', Load(), lineno=321, col_offset=53)], [], None, None, lineno=321, col_offset=8), lineno=321, col_offset=8)], [], lineno=314, col_offset=4), FunctionDef('testMultipleArgUnbound', arguments([Name('self', Param(), lineno=323, col_offset=31)], None, None, []), [Assign([Name('m', Store(), lineno=324, col_offset=8)], Call(Name('mock_contextmanager_generator', Load(), lineno=324, col_offset=12), [], [], None, None, lineno=324, col_offset=12), lineno=324, col_offset=8), Assign([Name('n', Store(), lineno=325, col_offset=8)], Call(Name('mock_contextmanager_generator', Load(), lineno=325, col_offset=12), [], [], None, None, lineno=325, col_offset=12), lineno=325, col_offset=8), Assign([Name('o', Store(), lineno=326, col_offset=8)], Call(Name('mock_contextmanager_generator', Load(), lineno=326, col_offset=12), [], [], None, None, lineno=326, col_offset=12), lineno=326, col_offset=8), Assign([Name('mock_nested', Store(), lineno=327, col_offset=8)], Call(Name('MockNested', Load(), lineno=327, col_offset=22), [Name('m', Load(), lineno=327, col_offset=33), Name('n', Load(), lineno=327, col_offset=36), Name('o', Load(), lineno=327, col_offset=39)], [], None, None, lineno=327, col_offset=22), lineno=327, col_offset=8), With(Name('mock_nested', Load(), lineno=328, col_offset=13), None, [Expr(Call(Attribute(Name('self', Load(), lineno=329, col_offset=12), 'assertInWithManagerInvariants', Load(), lineno=329, col_offset=12), [Name('m', Load(), lineno=329, col_offset=47)], [], None, None, lineno=329, col_offset=12), lineno=329, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=330, col_offset=12), 'assertInWithManagerInvariants', Load(), lineno=330, col_offset=12), [Name('n', Load(), lineno=330, col_offset=47)], [], None, None, lineno=330, col_offset=12), lineno=330, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=331, col_offset=12), 'assertInWithManagerInvariants', Load(), lineno=331, col_offset=12), [Name('o', Load(), lineno=331, col_offset=47)], [], None, None, lineno=331, col_offset=12), lineno=331, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=332, col_offset=12), 'assertInWithManagerInvariants', Load(), lineno=332, col_offset=12), [Name('mock_nested', Load(), lineno=332, col_offset=47)], [], None, None, lineno=332, col_offset=12), lineno=332, col_offset=12)], lineno=328, col_offset=13), Expr(Call(Attribute(Name('self', Load(), lineno=333, col_offset=8), 'assertAfterWithManagerInvariantsNoError', Load(), lineno=333, col_offset=8), [Name('m', Load(), lineno=333, col_offset=53)], [], None, None, lineno=333, col_offset=8), lineno=333, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=334, col_offset=8), 'assertAfterWithManagerInvariantsNoError', Load(), lineno=334, col_offset=8), [Name('n', Load(), lineno=334, col_offset=53)], [], None, None, lineno=334, col_offset=8), lineno=334, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=335, col_offset=8), 'assertAfterWithManagerInvariantsNoError', Load(), lineno=335, col_offset=8), [Name('o', Load(), lineno=335, col_offset=53)], [], None, None, lineno=335, col_offset=8), lineno=335, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=336, col_offset=8), 'assertAfterWithManagerInvariantsNoError', Load(), lineno=336, col_offset=8), [Name('mock_nested', Load(), lineno=336, col_offset=53)], [], None, None, lineno=336, col_offset=8), lineno=336, col_offset=8)], [], lineno=323, col_offset=4), FunctionDef('testMultipleArgBound', arguments([Name('self', Param(), lineno=338, col_offset=29)], None, None, []), [Assign([Name('mock_nested', Store(), lineno=339, col_offset=8)], Call(Name('MockNested', Load(), lineno=339, col_offset=22), [Call(Name('mock_contextmanager_generator', Load(), lineno=339, col_offset=33), [], [], None, None, lineno=339, col_offset=33), Call(Name('mock_contextmanager_generator', Load(), lineno=340, col_offset=12), [], [], None, None, lineno=340, col_offset=12), Call(Name('mock_contextmanager_generator', Load(), lineno=340, col_offset=45), [], [], None, None, lineno=340, col_offset=45)], [], None, None, lineno=339, col_offset=22), lineno=339, col_offset=8), With(Name('mock_nested', Load(), lineno=341, col_offset=13), Tuple([Name('m', Store(), lineno=341, col_offset=29), Name('n', Store(), lineno=341, col_offset=32), Name('o', Store(), lineno=341, col_offset=35)], Store(), lineno=341, col_offset=29), [Expr(Call(Attribute(Name('self', Load(), lineno=342, col_offset=12), 'assertInWithGeneratorInvariants', Load(), lineno=342, col_offset=12), [Name('m', Load(), lineno=342, col_offset=49)], [], None, None, lineno=342, col_offset=12), lineno=342, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=343, col_offset=12), 'assertInWithGeneratorInvariants', Load(), lineno=343, col_offset=12), [Name('n', Load(), lineno=343, col_offset=49)], [], None, None, lineno=343, col_offset=12), lineno=343, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=344, col_offset=12), 'assertInWithGeneratorInvariants', Load(), lineno=344, col_offset=12), [Name('o', Load(), lineno=344, col_offset=49)], [], None, None, lineno=344, col_offset=12), lineno=344, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=345, col_offset=12), 'assertInWithManagerInvariants', Load(), lineno=345, col_offset=12), [Name('mock_nested', Load(), lineno=345, col_offset=47)], [], None, None, lineno=345, col_offset=12), lineno=345, col_offset=12)], lineno=341, col_offset=13), Expr(Call(Attribute(Name('self', Load(), lineno=346, col_offset=8), 'assertAfterWithGeneratorInvariantsNoError', Load(), lineno=346, col_offset=8), [Name('m', Load(), lineno=346, col_offset=55)], [], None, None, lineno=346, col_offset=8), lineno=346, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=347, col_offset=8), 'assertAfterWithGeneratorInvariantsNoError', Load(), lineno=347, col_offset=8), [Name('n', Load(), lineno=347, col_offset=55)], [], None, None, lineno=347, col_offset=8), lineno=347, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=348, col_offset=8), 'assertAfterWithGeneratorInvariantsNoError', Load(), lineno=348, col_offset=8), [Name('o', Load(), lineno=348, col_offset=55)], [], None, None, lineno=348, col_offset=8), lineno=348, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=349, col_offset=8), 'assertAfterWithManagerInvariantsNoError', Load(), lineno=349, col_offset=8), [Name('mock_nested', Load(), lineno=349, col_offset=53)], [], None, None, lineno=349, col_offset=8), lineno=349, col_offset=8)], [], lineno=338, col_offset=4)], [], lineno=286, col_offset=0), ClassDef('ExceptionalTestCase', [Attribute(Name('unittest', Load(), lineno=352, col_offset=26), 'TestCase', Load(), lineno=352, col_offset=26), Name('ContextmanagerAssertionMixin', Load(), lineno=352, col_offset=45)], [FunctionDef('testSingleResource', arguments([Name('self', Param(), lineno=353, col_offset=27)], None, None, []), [Assign([Name('cm', Store(), lineno=354, col_offset=8)], Call(Name('mock_contextmanager_generator', Load(), lineno=354, col_offset=13), [], [], None, None, lineno=354, col_offset=13), lineno=354, col_offset=8), FunctionDef('shouldThrow', arguments([], None, None, []), [With(Name('cm', Load(), lineno=356, col_offset=17), Attribute(Name('self', Load(), lineno=356, col_offset=23), 'resource', Store(), lineno=356, col_offset=23), [Expr(Call(Attribute(Name('self', Load(), lineno=357, col_offset=16), 'assertInWithManagerInvariants', Load(), lineno=357, col_offset=16), [Name('cm', Load(), lineno=357, col_offset=51)], [], None, None, lineno=357, col_offset=16), lineno=357, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=358, col_offset=16), 'assertInWithGeneratorInvariants', Load(), lineno=358, col_offset=16), [Attribute(Name('self', Load(), lineno=358, col_offset=53), 'resource', Load(), lineno=358, col_offset=53)], [], None, None, lineno=358, col_offset=16), lineno=358, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=359, col_offset=16), 'raiseTestException', Load(), lineno=359, col_offset=16), [], [], None, None, lineno=359, col_offset=16), lineno=359, col_offset=16)], lineno=356, col_offset=17)], [], lineno=355, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=360, col_offset=8), 'assertRaises', Load(), lineno=360, col_offset=8), [Name('RuntimeError', Load(), lineno=360, col_offset=26), Name('shouldThrow', Load(), lineno=360, col_offset=40)], [], None, None, lineno=360, col_offset=8), lineno=360, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=361, col_offset=8), 'assertAfterWithManagerInvariantsWithError', Load(), lineno=361, col_offset=8), [Name('cm', Load(), lineno=361, col_offset=55)], [], None, None, lineno=361, col_offset=8), lineno=361, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=362, col_offset=8), 'assertAfterWithGeneratorInvariantsWithError', Load(), lineno=362, col_offset=8), [Attribute(Name('self', Load(), lineno=362, col_offset=57), 'resource', Load(), lineno=362, col_offset=57)], [], None, None, lineno=362, col_offset=8), lineno=362, col_offset=8)], [], lineno=353, col_offset=4), FunctionDef('testExceptionNormalized', arguments([Name('self', Param(), lineno=364, col_offset=32)], None, None, []), [Assign([Name('cm', Store(), lineno=365, col_offset=8)], Call(Name('mock_contextmanager_generator', Load(), lineno=365, col_offset=13), [], [], None, None, lineno=365, col_offset=13), lineno=365, col_offset=8), FunctionDef('shouldThrow', arguments([], None, None, []), [With(Name('cm', Load(), lineno=367, col_offset=17), Attribute(Name('self', Load(), lineno=367, col_offset=23), 'resource', Store(), lineno=367, col_offset=23), [Expr(BinOp(Num(1, lineno=370, col_offset=16), FloorDiv(), Num(0, lineno=370, col_offset=21), lineno=370, col_offset=16), lineno=370, col_offset=16)], lineno=367, col_offset=17)], [], lineno=366, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=371, col_offset=8), 'assertRaises', Load(), lineno=371, col_offset=8), [Name('ZeroDivisionError', Load(), lineno=371, col_offset=26), Name('shouldThrow', Load(), lineno=371, col_offset=45)], [], None, None, lineno=371, col_offset=8), lineno=371, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=372, col_offset=8), 'assertAfterWithManagerInvariantsWithError', Load(), lineno=372, col_offset=8), [Name('cm', Load(), lineno=372, col_offset=55), Name('ZeroDivisionError', Load(), lineno=372, col_offset=59)], [], None, None, lineno=372, col_offset=8), lineno=372, col_offset=8)], [], lineno=364, col_offset=4), FunctionDef('testNestedSingleStatements', arguments([Name('self', Param(), lineno=374, col_offset=35)], None, None, []), [Assign([Name('mock_a', Store(), lineno=375, col_offset=8)], Call(Name('mock_contextmanager_generator', Load(), lineno=375, col_offset=17), [], [], None, None, lineno=375, col_offset=17), lineno=375, col_offset=8), Assign([Name('mock_b', Store(), lineno=376, col_offset=8)], Call(Name('mock_contextmanager_generator', Load(), lineno=376, col_offset=17), [], [], None, None, lineno=376, col_offset=17), lineno=376, col_offset=8), FunctionDef('shouldThrow', arguments([], None, None, []), [With(Name('mock_a', Load(), lineno=378, col_offset=17), Attribute(Name('self', Load(), lineno=378, col_offset=27), 'foo', Store(), lineno=378, col_offset=27), [With(Name('mock_b', Load(), lineno=379, col_offset=21), Attribute(Name('self', Load(), lineno=379, col_offset=31), 'bar', Store(), lineno=379, col_offset=31), [Expr(Call(Attribute(Name('self', Load(), lineno=380, col_offset=20), 'assertInWithManagerInvariants', Load(), lineno=380, col_offset=20), [Name('mock_a', Load(), lineno=380, col_offset=55)], [], None, None, lineno=380, col_offset=20), lineno=380, col_offset=20), Expr(Call(Attribute(Name('self', Load(), lineno=381, col_offset=20), 'assertInWithManagerInvariants', Load(), lineno=381, col_offset=20), [Name('mock_b', Load(), lineno=381, col_offset=55)], [], None, None, lineno=381, col_offset=20), lineno=381, col_offset=20), Expr(Call(Attribute(Name('self', Load(), lineno=382, col_offset=20), 'assertInWithGeneratorInvariants', Load(), lineno=382, col_offset=20), [Attribute(Name('self', Load(), lineno=382, col_offset=57), 'foo', Load(), lineno=382, col_offset=57)], [], None, None, lineno=382, col_offset=20), lineno=382, col_offset=20), Expr(Call(Attribute(Name('self', Load(), lineno=383, col_offset=20), 'assertInWithGeneratorInvariants', Load(), lineno=383, col_offset=20), [Attribute(Name('self', Load(), lineno=383, col_offset=57), 'bar', Load(), lineno=383, col_offset=57)], [], None, None, lineno=383, col_offset=20), lineno=383, col_offset=20), Expr(Call(Attribute(Name('self', Load(), lineno=384, col_offset=20), 'raiseTestException', Load(), lineno=384, col_offset=20), [], [], None, None, lineno=384, col_offset=20), lineno=384, col_offset=20)], lineno=379, col_offset=21)], lineno=378, col_offset=17)], [], lineno=377, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=385, col_offset=8), 'assertRaises', Load(), lineno=385, col_offset=8), [Name('RuntimeError', Load(), lineno=385, col_offset=26), Name('shouldThrow', Load(), lineno=385, col_offset=40)], [], None, None, lineno=385, col_offset=8), lineno=385, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=386, col_offset=8), 'assertAfterWithManagerInvariantsWithError', Load(), lineno=386, col_offset=8), [Name('mock_a', Load(), lineno=386, col_offset=55)], [], None, None, lineno=386, col_offset=8), lineno=386, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=387, col_offset=8), 'assertAfterWithManagerInvariantsWithError', Load(), lineno=387, col_offset=8), [Name('mock_b', Load(), lineno=387, col_offset=55)], [], None, None, lineno=387, col_offset=8), lineno=387, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=388, col_offset=8), 'assertAfterWithGeneratorInvariantsWithError', Load(), lineno=388, col_offset=8), [Attribute(Name('self', Load(), lineno=388, col_offset=57), 'foo', Load(), lineno=388, col_offset=57)], [], None, None, lineno=388, col_offset=8), lineno=388, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=389, col_offset=8), 'assertAfterWithGeneratorInvariantsWithError', Load(), lineno=389, col_offset=8), [Attribute(Name('self', Load(), lineno=389, col_offset=57), 'bar', Load(), lineno=389, col_offset=57)], [], None, None, lineno=389, col_offset=8), lineno=389, col_offset=8)], [], lineno=374, col_offset=4), FunctionDef('testMultipleResourcesInSingleStatement', arguments([Name('self', Param(), lineno=391, col_offset=47)], None, None, []), [Assign([Name('cm_a', Store(), lineno=392, col_offset=8)], Call(Name('mock_contextmanager_generator', Load(), lineno=392, col_offset=15), [], [], None, None, lineno=392, col_offset=15), lineno=392, col_offset=8), Assign([Name('cm_b', Store(), lineno=393, col_offset=8)], Call(Name('mock_contextmanager_generator', Load(), lineno=393, col_offset=15), [], [], None, None, lineno=393, col_offset=15), lineno=393, col_offset=8), Assign([Name('mock_nested', Store(), lineno=394, col_offset=8)], Call(Name('MockNested', Load(), lineno=394, col_offset=22), [Name('cm_a', Load(), lineno=394, col_offset=33), Name('cm_b', Load(), lineno=394, col_offset=39)], [], None, None, lineno=394, col_offset=22), lineno=394, col_offset=8), FunctionDef('shouldThrow', arguments([], None, None, []), [With(Name('mock_nested', Load(), lineno=396, col_offset=17), Tuple([Attribute(Name('self', Load(), lineno=396, col_offset=33), 'resource_a', Store(), lineno=396, col_offset=33), Attribute(Name('self', Load(), lineno=396, col_offset=50), 'resource_b', Store(), lineno=396, col_offset=50)], Store(), lineno=396, col_offset=33), [Expr(Call(Attribute(Name('self', Load(), lineno=397, col_offset=16), 'assertInWithManagerInvariants', Load(), lineno=397, col_offset=16), [Name('cm_a', Load(), lineno=397, col_offset=51)], [], None, None, lineno=397, col_offset=16), lineno=397, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=398, col_offset=16), 'assertInWithManagerInvariants', Load(), lineno=398, col_offset=16), [Name('cm_b', Load(), lineno=398, col_offset=51)], [], None, None, lineno=398, col_offset=16), lineno=398, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=399, col_offset=16), 'assertInWithManagerInvariants', Load(), lineno=399, col_offset=16), [Name('mock_nested', Load(), lineno=399, col_offset=51)], [], None, None, lineno=399, col_offset=16), lineno=399, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=400, col_offset=16), 'assertInWithGeneratorInvariants', Load(), lineno=400, col_offset=16), [Attribute(Name('self', Load(), lineno=400, col_offset=53), 'resource_a', Load(), lineno=400, col_offset=53)], [], None, None, lineno=400, col_offset=16), lineno=400, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=401, col_offset=16), 'assertInWithGeneratorInvariants', Load(), lineno=401, col_offset=16), [Attribute(Name('self', Load(), lineno=401, col_offset=53), 'resource_b', Load(), lineno=401, col_offset=53)], [], None, None, lineno=401, col_offset=16), lineno=401, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=402, col_offset=16), 'raiseTestException', Load(), lineno=402, col_offset=16), [], [], None, None, lineno=402, col_offset=16), lineno=402, col_offset=16)], lineno=396, col_offset=17)], [], lineno=395, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=403, col_offset=8), 'assertRaises', Load(), lineno=403, col_offset=8), [Name('RuntimeError', Load(), lineno=403, col_offset=26), Name('shouldThrow', Load(), lineno=403, col_offset=40)], [], None, None, lineno=403, col_offset=8), lineno=403, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=404, col_offset=8), 'assertAfterWithManagerInvariantsWithError', Load(), lineno=404, col_offset=8), [Name('cm_a', Load(), lineno=404, col_offset=55)], [], None, None, lineno=404, col_offset=8), lineno=404, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=405, col_offset=8), 'assertAfterWithManagerInvariantsWithError', Load(), lineno=405, col_offset=8), [Name('cm_b', Load(), lineno=405, col_offset=55)], [], None, None, lineno=405, col_offset=8), lineno=405, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=406, col_offset=8), 'assertAfterWithManagerInvariantsWithError', Load(), lineno=406, col_offset=8), [Name('mock_nested', Load(), lineno=406, col_offset=55)], [], None, None, lineno=406, col_offset=8), lineno=406, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=407, col_offset=8), 'assertAfterWithGeneratorInvariantsWithError', Load(), lineno=407, col_offset=8), [Attribute(Name('self', Load(), lineno=407, col_offset=57), 'resource_a', Load(), lineno=407, col_offset=57)], [], None, None, lineno=407, col_offset=8), lineno=407, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=408, col_offset=8), 'assertAfterWithGeneratorInvariantsWithError', Load(), lineno=408, col_offset=8), [Attribute(Name('self', Load(), lineno=408, col_offset=57), 'resource_b', Load(), lineno=408, col_offset=57)], [], None, None, lineno=408, col_offset=8), lineno=408, col_offset=8)], [], lineno=391, col_offset=4), FunctionDef('testNestedExceptionBeforeInnerStatement', arguments([Name('self', Param(), lineno=410, col_offset=48)], None, None, []), [Assign([Name('mock_a', Store(), lineno=411, col_offset=8)], Call(Name('mock_contextmanager_generator', Load(), lineno=411, col_offset=17), [], [], None, None, lineno=411, col_offset=17), lineno=411, col_offset=8), Assign([Name('mock_b', Store(), lineno=412, col_offset=8)], Call(Name('mock_contextmanager_generator', Load(), lineno=412, col_offset=17), [], [], None, None, lineno=412, col_offset=17), lineno=412, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=413, col_offset=8), 'bar', Store(), lineno=413, col_offset=8)], Name('None', Load(), lineno=413, col_offset=19), lineno=413, col_offset=8), FunctionDef('shouldThrow', arguments([], None, None, []), [With(Name('mock_a', Load(), lineno=415, col_offset=17), Attribute(Name('self', Load(), lineno=415, col_offset=27), 'foo', Store(), lineno=415, col_offset=27), [Expr(Call(Attribute(Name('self', Load(), lineno=416, col_offset=16), 'assertInWithManagerInvariants', Load(), lineno=416, col_offset=16), [Name('mock_a', Load(), lineno=416, col_offset=51)], [], None, None, lineno=416, col_offset=16), lineno=416, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=417, col_offset=16), 'assertInWithGeneratorInvariants', Load(), lineno=417, col_offset=16), [Attribute(Name('self', Load(), lineno=417, col_offset=53), 'foo', Load(), lineno=417, col_offset=53)], [], None, None, lineno=417, col_offset=16), lineno=417, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=418, col_offset=16), 'raiseTestException', Load(), lineno=418, col_offset=16), [], [], None, None, lineno=418, col_offset=16), lineno=418, col_offset=16), With(Name('mock_b', Load(), lineno=419, col_offset=21), Attribute(Name('self', Load(), lineno=419, col_offset=31), 'bar', Store(), lineno=419, col_offset=31), [Pass( lineno=420, col_offset=20)], lineno=419, col_offset=21)], lineno=415, col_offset=17)], [], lineno=414, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=421, col_offset=8), 'assertRaises', Load(), lineno=421, col_offset=8), [Name('RuntimeError', Load(), lineno=421, col_offset=26), Name('shouldThrow', Load(), lineno=421, col_offset=40)], [], None, None, lineno=421, col_offset=8), lineno=421, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=422, col_offset=8), 'assertAfterWithManagerInvariantsWithError', Load(), lineno=422, col_offset=8), [Name('mock_a', Load(), lineno=422, col_offset=55)], [], None, None, lineno=422, col_offset=8), lineno=422, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=423, col_offset=8), 'assertAfterWithGeneratorInvariantsWithError', Load(), lineno=423, col_offset=8), [Attribute(Name('self', Load(), lineno=423, col_offset=57), 'foo', Load(), lineno=423, col_offset=57)], [], None, None, lineno=423, col_offset=8), lineno=423, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=426, col_offset=8), 'assertEqual', Load(), lineno=426, col_offset=8), [Attribute(Name('self', Load(), lineno=426, col_offset=25), 'bar', Load(), lineno=426, col_offset=25), Name('None', Load(), lineno=426, col_offset=35)], [], None, None, lineno=426, col_offset=8), lineno=426, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=427, col_offset=8), 'assertFalse', Load(), lineno=427, col_offset=8), [Attribute(Name('mock_b', Load(), lineno=427, col_offset=25), 'enter_called', Load(), lineno=427, col_offset=25)], [], None, None, lineno=427, col_offset=8), lineno=427, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=428, col_offset=8), 'assertFalse', Load(), lineno=428, col_offset=8), [Attribute(Name('mock_b', Load(), lineno=428, col_offset=25), 'exit_called', Load(), lineno=428, col_offset=25)], [], None, None, lineno=428, col_offset=8), lineno=428, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=429, col_offset=8), 'assertEqual', Load(), lineno=429, col_offset=8), [Attribute(Name('mock_b', Load(), lineno=429, col_offset=25), 'exit_args', Load(), lineno=429, col_offset=25), Name('None', Load(), lineno=429, col_offset=43)], [], None, None, lineno=429, col_offset=8), lineno=429, col_offset=8)], [], lineno=410, col_offset=4), FunctionDef('testNestedExceptionAfterInnerStatement', arguments([Name('self', Param(), lineno=431, col_offset=47)], None, None, []), [Assign([Name('mock_a', Store(), lineno=432, col_offset=8)], Call(Name('mock_contextmanager_generator', Load(), lineno=432, col_offset=17), [], [], None, None, lineno=432, col_offset=17), lineno=432, col_offset=8), Assign([Name('mock_b', Store(), lineno=433, col_offset=8)], Call(Name('mock_contextmanager_generator', Load(), lineno=433, col_offset=17), [], [], None, None, lineno=433, col_offset=17), lineno=433, col_offset=8), FunctionDef('shouldThrow', arguments([], None, None, []), [With(Name('mock_a', Load(), lineno=435, col_offset=17), Attribute(Name('self', Load(), lineno=435, col_offset=27), 'foo', Store(), lineno=435, col_offset=27), [With(Name('mock_b', Load(), lineno=436, col_offset=21), Attribute(Name('self', Load(), lineno=436, col_offset=31), 'bar', Store(), lineno=436, col_offset=31), [Expr(Call(Attribute(Name('self', Load(), lineno=437, col_offset=20), 'assertInWithManagerInvariants', Load(), lineno=437, col_offset=20), [Name('mock_a', Load(), lineno=437, col_offset=55)], [], None, None, lineno=437, col_offset=20), lineno=437, col_offset=20), Expr(Call(Attribute(Name('self', Load(), lineno=438, col_offset=20), 'assertInWithManagerInvariants', Load(), lineno=438, col_offset=20), [Name('mock_b', Load(), lineno=438, col_offset=55)], [], None, None, lineno=438, col_offset=20), lineno=438, col_offset=20), Expr(Call(Attribute(Name('self', Load(), lineno=439, col_offset=20), 'assertInWithGeneratorInvariants', Load(), lineno=439, col_offset=20), [Attribute(Name('self', Load(), lineno=439, col_offset=57), 'foo', Load(), lineno=439, col_offset=57)], [], None, None, lineno=439, col_offset=20), lineno=439, col_offset=20), Expr(Call(Attribute(Name('self', Load(), lineno=440, col_offset=20), 'assertInWithGeneratorInvariants', Load(), lineno=440, col_offset=20), [Attribute(Name('self', Load(), lineno=440, col_offset=57), 'bar', Load(), lineno=440, col_offset=57)], [], None, None, lineno=440, col_offset=20), lineno=440, col_offset=20)], lineno=436, col_offset=21), Expr(Call(Attribute(Name('self', Load(), lineno=441, col_offset=16), 'raiseTestException', Load(), lineno=441, col_offset=16), [], [], None, None, lineno=441, col_offset=16), lineno=441, col_offset=16)], lineno=435, col_offset=17)], [], lineno=434, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=442, col_offset=8), 'assertRaises', Load(), lineno=442, col_offset=8), [Name('RuntimeError', Load(), lineno=442, col_offset=26), Name('shouldThrow', Load(), lineno=442, col_offset=40)], [], None, None, lineno=442, col_offset=8), lineno=442, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=443, col_offset=8), 'assertAfterWithManagerInvariantsWithError', Load(), lineno=443, col_offset=8), [Name('mock_a', Load(), lineno=443, col_offset=55)], [], None, None, lineno=443, col_offset=8), lineno=443, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=444, col_offset=8), 'assertAfterWithManagerInvariantsNoError', Load(), lineno=444, col_offset=8), [Name('mock_b', Load(), lineno=444, col_offset=53)], [], None, None, lineno=444, col_offset=8), lineno=444, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=445, col_offset=8), 'assertAfterWithGeneratorInvariantsWithError', Load(), lineno=445, col_offset=8), [Attribute(Name('self', Load(), lineno=445, col_offset=57), 'foo', Load(), lineno=445, col_offset=57)], [], None, None, lineno=445, col_offset=8), lineno=445, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=446, col_offset=8), 'assertAfterWithGeneratorInvariantsNoError', Load(), lineno=446, col_offset=8), [Attribute(Name('self', Load(), lineno=446, col_offset=55), 'bar', Load(), lineno=446, col_offset=55)], [], None, None, lineno=446, col_offset=8), lineno=446, col_offset=8)], [], lineno=431, col_offset=4), FunctionDef('testRaisedStopIteration1', arguments([Name('self', Param(), lineno=448, col_offset=33)], None, None, []), [FunctionDef('cm', arguments([], None, None, []), [Expr(Yield(None, lineno=452, col_offset=12), lineno=452, col_offset=12)], [Name('contextmanager', Load(), lineno=450, col_offset=9)], lineno=450, col_offset=8), FunctionDef('shouldThrow', arguments([], None, None, []), [With(Call(Name('cm', Load(), lineno=455, col_offset=17), [], [], None, None, lineno=455, col_offset=17), None, [Raise(Call(Name('StopIteration', Load(), lineno=456, col_offset=22), [Str('from with', lineno=456, col_offset=36)], [], None, None, lineno=456, col_offset=22), None, None, lineno=456, col_offset=16)], lineno=455, col_offset=17)], [], lineno=454, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=458, col_offset=8), 'assertRaises', Load(), lineno=458, col_offset=8), [Name('StopIteration', Load(), lineno=458, col_offset=26), Name('shouldThrow', Load(), lineno=458, col_offset=41)], [], None, None, lineno=458, col_offset=8), lineno=458, col_offset=8)], [], lineno=448, col_offset=4), FunctionDef('testRaisedStopIteration2', arguments([Name('self', Param(), lineno=460, col_offset=33)], None, None, []), [ClassDef('cm', [Name('object', Load(), lineno=462, col_offset=17)], [FunctionDef('__enter__', arguments([Name('self', Param(), lineno=463, col_offset=26)], None, None, []), [Pass( lineno=464, col_offset=16)], [], lineno=463, col_offset=12), FunctionDef('__exit__', arguments([Name('self', Param(), lineno=465, col_offset=25), Name('type', Param(), lineno=465, col_offset=31), Name('value', Param(), lineno=465, col_offset=37), Name('traceback', Param(), lineno=465, col_offset=44)], None, None, []), [Pass( lineno=466, col_offset=16)], [], lineno=465, col_offset=12)], [], lineno=462, col_offset=8), FunctionDef('shouldThrow', arguments([], None, None, []), [With(Call(Name('cm', Load(), lineno=469, col_offset=17), [], [], None, None, lineno=469, col_offset=17), None, [Raise(Call(Name('StopIteration', Load(), lineno=470, col_offset=22), [Str('from with', lineno=470, col_offset=36)], [], None, None, lineno=470, col_offset=22), None, None, lineno=470, col_offset=16)], lineno=469, col_offset=17)], [], lineno=468, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=472, col_offset=8), 'assertRaises', Load(), lineno=472, col_offset=8), [Name('StopIteration', Load(), lineno=472, col_offset=26), Name('shouldThrow', Load(), lineno=472, col_offset=41)], [], None, None, lineno=472, col_offset=8), lineno=472, col_offset=8)], [], lineno=460, col_offset=4), FunctionDef('testRaisedStopIteration3', arguments([Name('self', Param(), lineno=474, col_offset=33)], None, None, []), [FunctionDef('cm', arguments([], None, None, []), [Expr(Yield(None, lineno=479, col_offset=12), lineno=479, col_offset=12)], [Name('contextmanager', Load(), lineno=477, col_offset=9)], lineno=477, col_offset=8), FunctionDef('shouldThrow', arguments([], None, None, []), [With(Call(Name('cm', Load(), lineno=482, col_offset=17), [], [], None, None, lineno=482, col_offset=17), None, [Raise(Call(Attribute(Call(Name('iter', Load(), lineno=483, col_offset=22), [List([], Load(), lineno=483, col_offset=27)], [], None, None, lineno=483, col_offset=22), 'next', Load(), lineno=483, col_offset=22), [], [], None, None, lineno=483, col_offset=22), None, None, lineno=483, col_offset=16)], lineno=482, col_offset=17)], [], lineno=481, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=485, col_offset=8), 'assertRaises', Load(), lineno=485, col_offset=8), [Name('StopIteration', Load(), lineno=485, col_offset=26), Name('shouldThrow', Load(), lineno=485, col_offset=41)], [], None, None, lineno=485, col_offset=8), lineno=485, col_offset=8)], [], lineno=474, col_offset=4), FunctionDef('testRaisedGeneratorExit1', arguments([Name('self', Param(), lineno=487, col_offset=33)], None, None, []), [FunctionDef('cm', arguments([], None, None, []), [Expr(Yield(None, lineno=491, col_offset=12), lineno=491, col_offset=12)], [Name('contextmanager', Load(), lineno=489, col_offset=9)], lineno=489, col_offset=8), FunctionDef('shouldThrow', arguments([], None, None, []), [With(Call(Name('cm', Load(), lineno=494, col_offset=17), [], [], None, None, lineno=494, col_offset=17), None, [Raise(Call(Name('GeneratorExit', Load(), lineno=495, col_offset=22), [Str('from with', lineno=495, col_offset=36)], [], None, None, lineno=495, col_offset=22), None, None, lineno=495, col_offset=16)], lineno=494, col_offset=17)], [], lineno=493, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=497, col_offset=8), 'assertRaises', Load(), lineno=497, col_offset=8), [Name('GeneratorExit', Load(), lineno=497, col_offset=26), Name('shouldThrow', Load(), lineno=497, col_offset=41)], [], None, None, lineno=497, col_offset=8), lineno=497, col_offset=8)], [], lineno=487, col_offset=4), FunctionDef('testRaisedGeneratorExit2', arguments([Name('self', Param(), lineno=499, col_offset=33)], None, None, []), [ClassDef('cm', [Name('object', Load(), lineno=501, col_offset=18)], [FunctionDef('__enter__', arguments([Name('self', Param(), lineno=502, col_offset=26)], None, None, []), [Pass( lineno=503, col_offset=16)], [], lineno=502, col_offset=12), FunctionDef('__exit__', arguments([Name('self', Param(), lineno=504, col_offset=25), Name('type', Param(), lineno=504, col_offset=31), Name('value', Param(), lineno=504, col_offset=37), Name('traceback', Param(), lineno=504, col_offset=44)], None, None, []), [Pass( lineno=505, col_offset=16)], [], lineno=504, col_offset=12)], [], lineno=501, col_offset=8), FunctionDef('shouldThrow', arguments([], None, None, []), [With(Call(Name('cm', Load(), lineno=508, col_offset=17), [], [], None, None, lineno=508, col_offset=17), None, [Raise(Call(Name('GeneratorExit', Load(), lineno=509, col_offset=22), [Str('from with', lineno=509, col_offset=36)], [], None, None, lineno=509, col_offset=22), None, None, lineno=509, col_offset=16)], lineno=508, col_offset=17)], [], lineno=507, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=511, col_offset=8), 'assertRaises', Load(), lineno=511, col_offset=8), [Name('GeneratorExit', Load(), lineno=511, col_offset=26), Name('shouldThrow', Load(), lineno=511, col_offset=41)], [], None, None, lineno=511, col_offset=8), lineno=511, col_offset=8)], [], lineno=499, col_offset=4), FunctionDef('testErrorsInBool', arguments([Name('self', Param(), lineno=513, col_offset=25)], None, None, []), [ClassDef('cm', [Name('object', Load(), lineno=517, col_offset=17)], [FunctionDef('__init__', arguments([Name('self', Param(), lineno=518, col_offset=25), Name('bool_conversion', Param(), lineno=518, col_offset=31)], None, None, []), [ClassDef('Bool', [], [FunctionDef('__nonzero__', arguments([Name('self', Param(), lineno=520, col_offset=36)], None, None, []), [Return(Call(Name('bool_conversion', Load(), lineno=521, col_offset=31), [], [], None, None, lineno=521, col_offset=31), lineno=521, col_offset=24)], [], lineno=520, col_offset=20)], [], lineno=519, col_offset=16), Assign([Attribute(Name('self', Load(), lineno=522, col_offset=16), 'exit_result', Store(), lineno=522, col_offset=16)], Call(Name('Bool', Load(), lineno=522, col_offset=35), [], [], None, None, lineno=522, col_offset=35), lineno=522, col_offset=16)], [], lineno=518, col_offset=12), FunctionDef('__enter__', arguments([Name('self', Param(), lineno=523, col_offset=26)], None, None, []), [Return(Num(3, lineno=524, col_offset=23), lineno=524, col_offset=16)], [], lineno=523, col_offset=12), FunctionDef('__exit__', arguments([Name('self', Param(), lineno=525, col_offset=25), Name('a', Param(), lineno=525, col_offset=31), Name('b', Param(), lineno=525, col_offset=34), Name('c', Param(), lineno=525, col_offset=37)], None, None, []), [Return(Attribute(Name('self', Load(), lineno=526, col_offset=23), 'exit_result', Load(), lineno=526, col_offset=23), lineno=526, col_offset=16)], [], lineno=525, col_offset=12)], [], lineno=517, col_offset=8), FunctionDef('trueAsBool', arguments([], None, None, []), [With(Call(Name('cm', Load(), lineno=529, col_offset=17), [Lambda(arguments([], None, None, []), Name('True', Load(), lineno=529, col_offset=28), lineno=529, col_offset=20)], [], None, None, lineno=529, col_offset=17), None, [Expr(Call(Attribute(Name('self', Load(), lineno=530, col_offset=16), 'fail', Load(), lineno=530, col_offset=16), [Str('Should NOT see this', lineno=530, col_offset=26)], [], None, None, lineno=530, col_offset=16), lineno=530, col_offset=16)], lineno=529, col_offset=17)], [], lineno=528, col_offset=8), Expr(Call(Name('trueAsBool', Load(), lineno=531, col_offset=8), [], [], None, None, lineno=531, col_offset=8), lineno=531, col_offset=8), FunctionDef('falseAsBool', arguments([], None, None, []), [With(Call(Name('cm', Load(), lineno=534, col_offset=17), [Lambda(arguments([], None, None, []), Name('False', Load(), lineno=534, col_offset=28), lineno=534, col_offset=20)], [], None, None, lineno=534, col_offset=17), None, [Expr(Call(Attribute(Name('self', Load(), lineno=535, col_offset=16), 'fail', Load(), lineno=535, col_offset=16), [Str('Should raise', lineno=535, col_offset=26)], [], None, None, lineno=535, col_offset=16), lineno=535, col_offset=16)], lineno=534, col_offset=17)], [], lineno=533, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=536, col_offset=8), 'assertRaises', Load(), lineno=536, col_offset=8), [Name('AssertionError', Load(), lineno=536, col_offset=26), Name('falseAsBool', Load(), lineno=536, col_offset=42)], [], None, None, lineno=536, col_offset=8), lineno=536, col_offset=8), FunctionDef('failAsBool', arguments([], None, None, []), [With(Call(Name('cm', Load(), lineno=539, col_offset=17), [Lambda(arguments([], None, None, []), BinOp(Num(1, lineno=539, col_offset=28), FloorDiv(), Num(0, lineno=539, col_offset=33), lineno=539, col_offset=28), lineno=539, col_offset=20)], [], None, None, lineno=539, col_offset=17), None, [Expr(Call(Attribute(Name('self', Load(), lineno=540, col_offset=16), 'fail', Load(), lineno=540, col_offset=16), [Str('Should NOT see this', lineno=540, col_offset=26)], [], None, None, lineno=540, col_offset=16), lineno=540, col_offset=16)], lineno=539, col_offset=17)], [], lineno=538, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=541, col_offset=8), 'assertRaises', Load(), lineno=541, col_offset=8), [Name('ZeroDivisionError', Load(), lineno=541, col_offset=26), Name('failAsBool', Load(), lineno=541, col_offset=45)], [], None, None, lineno=541, col_offset=8), lineno=541, col_offset=8)], [], lineno=513, col_offset=4)], [], lineno=352, col_offset=0), ClassDef('NonLocalFlowControlTestCase', [Attribute(Name('unittest', Load(), lineno=544, col_offset=34), 'TestCase', Load(), lineno=544, col_offset=34)], [FunctionDef('testWithBreak', arguments([Name('self', Param(), lineno=546, col_offset=22)], None, None, []), [Assign([Name('counter', Store(), lineno=547, col_offset=8)], Num(0, lineno=547, col_offset=18), lineno=547, col_offset=8), While(Name('True', Load(), lineno=548, col_offset=14), [AugAssign(Name('counter', Store(), lineno=549, col_offset=12), Add(), Num(1, lineno=549, col_offset=23), lineno=549, col_offset=12), With(Call(Name('mock_contextmanager_generator', Load(), lineno=550, col_offset=17), [], [], None, None, lineno=550, col_offset=17), None, [AugAssign(Name('counter', Store(), lineno=551, col_offset=16), Add(), Num(10, lineno=551, col_offset=27), lineno=551, col_offset=16), Break( lineno=552, col_offset=16)], lineno=550, col_offset=17), AugAssign(Name('counter', Store(), lineno=553, col_offset=12), Add(), Num(100, lineno=553, col_offset=23), lineno=553, col_offset=12)], [], lineno=548, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=554, col_offset=8), 'assertEqual', Load(), lineno=554, col_offset=8), [Name('counter', Load(), lineno=554, col_offset=25), Num(11, lineno=554, col_offset=34)], [], None, None, lineno=554, col_offset=8), lineno=554, col_offset=8)], [], lineno=546, col_offset=4), FunctionDef('testWithContinue', arguments([Name('self', Param(), lineno=556, col_offset=25)], None, None, []), [Assign([Name('counter', Store(), lineno=557, col_offset=8)], Num(0, lineno=557, col_offset=18), lineno=557, col_offset=8), While(Name('True', Load(), lineno=558, col_offset=14), [AugAssign(Name('counter', Store(), lineno=559, col_offset=12), Add(), Num(1, lineno=559, col_offset=23), lineno=559, col_offset=12), If(Compare(Name('counter', Load(), lineno=560, col_offset=15), [Gt()], [Num(2, lineno=560, col_offset=25)], lineno=560, col_offset=15), [Break( lineno=561, col_offset=16)], [], lineno=560, col_offset=12), With(Call(Name('mock_contextmanager_generator', Load(), lineno=562, col_offset=17), [], [], None, None, lineno=562, col_offset=17), None, [AugAssign(Name('counter', Store(), lineno=563, col_offset=16), Add(), Num(10, lineno=563, col_offset=27), lineno=563, col_offset=16), Continue( lineno=564, col_offset=16)], lineno=562, col_offset=17), AugAssign(Name('counter', Store(), lineno=565, col_offset=12), Add(), Num(100, lineno=565, col_offset=23), lineno=565, col_offset=12)], [], lineno=558, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=566, col_offset=8), 'assertEqual', Load(), lineno=566, col_offset=8), [Name('counter', Load(), lineno=566, col_offset=25), Num(12, lineno=566, col_offset=34)], [], None, None, lineno=566, col_offset=8), lineno=566, col_offset=8)], [], lineno=556, col_offset=4), FunctionDef('testWithReturn', arguments([Name('self', Param(), lineno=568, col_offset=23)], None, None, []), [FunctionDef('foo', arguments([], None, None, []), [Assign([Name('counter', Store(), lineno=570, col_offset=12)], Num(0, lineno=570, col_offset=22), lineno=570, col_offset=12), While(Name('True', Load(), lineno=571, col_offset=18), [AugAssign(Name('counter', Store(), lineno=572, col_offset=16), Add(), Num(1, lineno=572, col_offset=27), lineno=572, col_offset=16), With(Call(Name('mock_contextmanager_generator', Load(), lineno=573, col_offset=21), [], [], None, None, lineno=573, col_offset=21), None, [AugAssign(Name('counter', Store(), lineno=574, col_offset=20), Add(), Num(10, lineno=574, col_offset=31), lineno=574, col_offset=20), Return(Name('counter', Load(), lineno=575, col_offset=27), lineno=575, col_offset=20)], lineno=573, col_offset=21), AugAssign(Name('counter', Store(), lineno=576, col_offset=16), Add(), Num(100, lineno=576, col_offset=27), lineno=576, col_offset=16)], [], lineno=571, col_offset=12)], [], lineno=569, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=577, col_offset=8), 'assertEqual', Load(), lineno=577, col_offset=8), [Call(Name('foo', Load(), lineno=577, col_offset=25), [], [], None, None, lineno=577, col_offset=25), Num(11, lineno=577, col_offset=32)], [], None, None, lineno=577, col_offset=8), lineno=577, col_offset=8)], [], lineno=568, col_offset=4), FunctionDef('testWithYield', arguments([Name('self', Param(), lineno=579, col_offset=22)], None, None, []), [FunctionDef('gen', arguments([], None, None, []), [With(Call(Name('mock_contextmanager_generator', Load(), lineno=581, col_offset=17), [], [], None, None, lineno=581, col_offset=17), None, [Expr(Yield(Num(12, lineno=582, col_offset=22), lineno=582, col_offset=16), lineno=582, col_offset=16), Expr(Yield(Num(13, lineno=583, col_offset=22), lineno=583, col_offset=16), lineno=583, col_offset=16)], lineno=581, col_offset=17)], [], lineno=580, col_offset=8), Assign([Name('x', Store(), lineno=584, col_offset=8)], Call(Name('list', Load(), lineno=584, col_offset=12), [Call(Name('gen', Load(), lineno=584, col_offset=17), [], [], None, None, lineno=584, col_offset=17)], [], None, None, lineno=584, col_offset=12), lineno=584, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=585, col_offset=8), 'assertEqual', Load(), lineno=585, col_offset=8), [Name('x', Load(), lineno=585, col_offset=25), List([Num(12, lineno=585, col_offset=29), Num(13, lineno=585, col_offset=33)], Load(), lineno=585, col_offset=28)], [], None, None, lineno=585, col_offset=8), lineno=585, col_offset=8)], [], lineno=579, col_offset=4), FunctionDef('testWithRaise', arguments([Name('self', Param(), lineno=587, col_offset=22)], None, None, []), [Assign([Name('counter', Store(), lineno=588, col_offset=8)], Num(0, lineno=588, col_offset=18), lineno=588, col_offset=8), TryExcept([AugAssign(Name('counter', Store(), lineno=590, col_offset=12), Add(), Num(1, lineno=590, col_offset=23), lineno=590, col_offset=12), With(Call(Name('mock_contextmanager_generator', Load(), lineno=591, col_offset=17), [], [], None, None, lineno=591, col_offset=17), None, [AugAssign(Name('counter', Store(), lineno=592, col_offset=16), Add(), Num(10, lineno=592, col_offset=27), lineno=592, col_offset=16), Raise(Name('RuntimeError', Load(), lineno=593, col_offset=22), None, None, lineno=593, col_offset=16)], lineno=591, col_offset=17), AugAssign(Name('counter', Store(), lineno=594, col_offset=12), Add(), Num(100, lineno=594, col_offset=23), lineno=594, col_offset=12)], [ExceptHandler(Name('RuntimeError', Load(), lineno=595, col_offset=15), None, [Expr(Call(Attribute(Name('self', Load(), lineno=596, col_offset=12), 'assertEqual', Load(), lineno=596, col_offset=12), [Name('counter', Load(), lineno=596, col_offset=29), Num(11, lineno=596, col_offset=38)], [], None, None, lineno=596, col_offset=12), lineno=596, col_offset=12)], lineno=595, col_offset=8)], [Expr(Call(Attribute(Name('self', Load(), lineno=598, col_offset=12), 'fail', Load(), lineno=598, col_offset=12), [Str("Didn't raise RuntimeError", lineno=598, col_offset=22)], [], None, None, lineno=598, col_offset=12), lineno=598, col_offset=12)], lineno=589, col_offset=8)], [], lineno=587, col_offset=4)], [], lineno=544, col_offset=0), ClassDef('AssignmentTargetTestCase', [Attribute(Name('unittest', Load(), lineno=601, col_offset=31), 'TestCase', Load(), lineno=601, col_offset=31)], [FunctionDef('testSingleComplexTarget', arguments([Name('self', Param(), lineno=603, col_offset=32)], None, None, []), [Assign([Name('targets', Store(), lineno=604, col_offset=8)], Dict([Num(1, lineno=604, col_offset=19)], [List([Num(0, lineno=604, col_offset=23), Num(1, lineno=604, col_offset=26), Num(2, lineno=604, col_offset=29)], Load(), lineno=604, col_offset=22)], lineno=604, col_offset=18), lineno=604, col_offset=8), With(Call(Name('mock_contextmanager_generator', Load(), lineno=605, col_offset=13), [], [], None, None, lineno=605, col_offset=13), Subscript(Subscript(Name('targets', Load(), lineno=605, col_offset=48), Index(Num(1, lineno=605, col_offset=56)), Load(), lineno=605, col_offset=48), Index(Num(0, lineno=605, col_offset=59)), Store(), lineno=605, col_offset=48), [Expr(Call(Attribute(Name('self', Load(), lineno=606, col_offset=12), 'assertEqual', Load(), lineno=606, col_offset=12), [Call(Attribute(Name('targets', Load(), lineno=606, col_offset=29), 'keys', Load(), lineno=606, col_offset=29), [], [], None, None, lineno=606, col_offset=29), List([Num(1, lineno=606, col_offset=46)], Load(), lineno=606, col_offset=45)], [], None, None, lineno=606, col_offset=12), lineno=606, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=607, col_offset=12), 'assertEqual', Load(), lineno=607, col_offset=12), [Attribute(Subscript(Subscript(Name('targets', Load(), lineno=607, col_offset=29), Index(Num(1, lineno=607, col_offset=37)), Load(), lineno=607, col_offset=29), Index(Num(0, lineno=607, col_offset=40)), Load(), lineno=607, col_offset=29), '__class__', Load(), lineno=607, col_offset=29), Name('MockResource', Load(), lineno=607, col_offset=54)], [], None, None, lineno=607, col_offset=12), lineno=607, col_offset=12)], lineno=605, col_offset=13), With(Call(Name('mock_contextmanager_generator', Load(), lineno=608, col_offset=13), [], [], None, None, lineno=608, col_offset=13), Subscript(Subscript(Call(Attribute(Name('targets', Load(), lineno=608, col_offset=48), 'values', Load(), lineno=608, col_offset=48), [], [], None, None, lineno=608, col_offset=48), Index(Num(0, lineno=608, col_offset=65)), Load(), lineno=608, col_offset=48), Index(Num(1, lineno=608, col_offset=68)), Store(), lineno=608, col_offset=48), [Expr(Call(Attribute(Name('self', Load(), lineno=609, col_offset=12), 'assertEqual', Load(), lineno=609, col_offset=12), [Call(Attribute(Name('targets', Load(), lineno=609, col_offset=29), 'keys', Load(), lineno=609, col_offset=29), [], [], None, None, lineno=609, col_offset=29), List([Num(1, lineno=609, col_offset=46)], Load(), lineno=609, col_offset=45)], [], None, None, lineno=609, col_offset=12), lineno=609, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=610, col_offset=12), 'assertEqual', Load(), lineno=610, col_offset=12), [Attribute(Subscript(Subscript(Name('targets', Load(), lineno=610, col_offset=29), Index(Num(1, lineno=610, col_offset=37)), Load(), lineno=610, col_offset=29), Index(Num(1, lineno=610, col_offset=40)), Load(), lineno=610, col_offset=29), '__class__', Load(), lineno=610, col_offset=29), Name('MockResource', Load(), lineno=610, col_offset=54)], [], None, None, lineno=610, col_offset=12), lineno=610, col_offset=12)], lineno=608, col_offset=13), With(Call(Name('mock_contextmanager_generator', Load(), lineno=611, col_offset=13), [], [], None, None, lineno=611, col_offset=13), Subscript(Name('targets', Load(), lineno=611, col_offset=48), Index(Num(2, lineno=611, col_offset=56)), Store(), lineno=611, col_offset=48), [Assign([Name('keys', Store(), lineno=612, col_offset=12)], Call(Attribute(Name('targets', Load(), lineno=612, col_offset=19), 'keys', Load(), lineno=612, col_offset=19), [], [], None, None, lineno=612, col_offset=19), lineno=612, col_offset=12), Expr(Call(Attribute(Name('keys', Load(), lineno=613, col_offset=12), 'sort', Load(), lineno=613, col_offset=12), [], [], None, None, lineno=613, col_offset=12), lineno=613, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=614, col_offset=12), 'assertEqual', Load(), lineno=614, col_offset=12), [Name('keys', Load(), lineno=614, col_offset=29), List([Num(1, lineno=614, col_offset=36), Num(2, lineno=614, col_offset=39)], Load(), lineno=614, col_offset=35)], [], None, None, lineno=614, col_offset=12), lineno=614, col_offset=12)], lineno=611, col_offset=13), ClassDef('C', [], [Pass( lineno=615, col_offset=17)], [], lineno=615, col_offset=8), Assign([Name('blah', Store(), lineno=616, col_offset=8)], Call(Name('C', Load(), lineno=616, col_offset=15), [], [], None, None, lineno=616, col_offset=15), lineno=616, col_offset=8), With(Call(Name('mock_contextmanager_generator', Load(), lineno=617, col_offset=13), [], [], None, None, lineno=617, col_offset=13), Attribute(Name('blah', Load(), lineno=617, col_offset=48), 'foo', Store(), lineno=617, col_offset=48), [Expr(Call(Attribute(Name('self', Load(), lineno=618, col_offset=12), 'assertEqual', Load(), lineno=618, col_offset=12), [Call(Name('hasattr', Load(), lineno=618, col_offset=29), [Name('blah', Load(), lineno=618, col_offset=37), Str('foo', lineno=618, col_offset=43)], [], None, None, lineno=618, col_offset=29), Name('True', Load(), lineno=618, col_offset=51)], [], None, None, lineno=618, col_offset=12), lineno=618, col_offset=12)], lineno=617, col_offset=13)], [], lineno=603, col_offset=4), FunctionDef('testMultipleComplexTargets', arguments([Name('self', Param(), lineno=620, col_offset=35)], None, None, []), [ClassDef('C', [], [FunctionDef('__enter__', arguments([Name('self', Param(), lineno=622, col_offset=26)], None, None, []), [Return(Tuple([Num(1, lineno=622, col_offset=40), Num(2, lineno=622, col_offset=43), Num(3, lineno=622, col_offset=46)], Load(), lineno=622, col_offset=40), lineno=622, col_offset=33)], [], lineno=622, col_offset=12), FunctionDef('__exit__', arguments([Name('self', Param(), lineno=623, col_offset=25), Name('t', Param(), lineno=623, col_offset=31), Name('v', Param(), lineno=623, col_offset=34), Name('tb', Param(), lineno=623, col_offset=37)], None, None, []), [Pass( lineno=623, col_offset=42)], [], lineno=623, col_offset=12)], [], lineno=621, col_offset=8), Assign([Name('targets', Store(), lineno=624, col_offset=8)], Dict([Num(1, lineno=624, col_offset=19)], [List([Num(0, lineno=624, col_offset=23), Num(1, lineno=624, col_offset=26), Num(2, lineno=624, col_offset=29)], Load(), lineno=624, col_offset=22)], lineno=624, col_offset=18), lineno=624, col_offset=8), With(Call(Name('C', Load(), lineno=625, col_offset=13), [], [], None, None, lineno=625, col_offset=13), Tuple([Subscript(Subscript(Name('targets', Load(), lineno=625, col_offset=21), Index(Num(1, lineno=625, col_offset=29)), Load(), lineno=625, col_offset=21), Index(Num(0, lineno=625, col_offset=32)), Store(), lineno=625, col_offset=21), Subscript(Subscript(Name('targets', Load(), lineno=625, col_offset=36), Index(Num(1, lineno=625, col_offset=44)), Load(), lineno=625, col_offset=36), Index(Num(1, lineno=625, col_offset=47)), Store(), lineno=625, col_offset=36), Subscript(Subscript(Name('targets', Load(), lineno=625, col_offset=51), Index(Num(1, lineno=625, col_offset=59)), Load(), lineno=625, col_offset=51), Index(Num(2, lineno=625, col_offset=62)), Store(), lineno=625, col_offset=51)], Store(), lineno=625, col_offset=21), [Expr(Call(Attribute(Name('self', Load(), lineno=626, col_offset=12), 'assertEqual', Load(), lineno=626, col_offset=12), [Name('targets', Load(), lineno=626, col_offset=29), Dict([Num(1, lineno=626, col_offset=39)], [List([Num(1, lineno=626, col_offset=43), Num(2, lineno=626, col_offset=46), Num(3, lineno=626, col_offset=49)], Load(), lineno=626, col_offset=42)], lineno=626, col_offset=38)], [], None, None, lineno=626, col_offset=12), lineno=626, col_offset=12)], lineno=625, col_offset=13), With(Call(Name('C', Load(), lineno=627, col_offset=13), [], [], None, None, lineno=627, col_offset=13), Tuple([Subscript(Subscript(Call(Attribute(Name('targets', Load(), lineno=627, col_offset=21), 'values', Load(), lineno=627, col_offset=21), [], [], None, None, lineno=627, col_offset=21), Index(Num(0, lineno=627, col_offset=38)), Load(), lineno=627, col_offset=21), Index(Num(2, lineno=627, col_offset=41)), Store(), lineno=627, col_offset=21), Subscript(Subscript(Call(Attribute(Name('targets', Load(), lineno=627, col_offset=45), 'values', Load(), lineno=627, col_offset=45), [], [], None, None, lineno=627, col_offset=45), Index(Num(0, lineno=627, col_offset=62)), Load(), lineno=627, col_offset=45), Index(Num(1, lineno=627, col_offset=65)), Store(), lineno=627, col_offset=45), Subscript(Subscript(Call(Attribute(Name('targets', Load(), lineno=627, col_offset=69), 'values', Load(), lineno=627, col_offset=69), [], [], None, None, lineno=627, col_offset=69), Index(Num(0, lineno=627, col_offset=86)), Load(), lineno=627, col_offset=69), Index(Num(0, lineno=627, col_offset=89)), Store(), lineno=627, col_offset=69)], Store(), lineno=627, col_offset=21), [Expr(Call(Attribute(Name('self', Load(), lineno=628, col_offset=12), 'assertEqual', Load(), lineno=628, col_offset=12), [Name('targets', Load(), lineno=628, col_offset=29), Dict([Num(1, lineno=628, col_offset=39)], [List([Num(3, lineno=628, col_offset=43), Num(2, lineno=628, col_offset=46), Num(1, lineno=628, col_offset=49)], Load(), lineno=628, col_offset=42)], lineno=628, col_offset=38)], [], None, None, lineno=628, col_offset=12), lineno=628, col_offset=12)], lineno=627, col_offset=13), With(Call(Name('C', Load(), lineno=629, col_offset=13), [], [], None, None, lineno=629, col_offset=13), Tuple([Subscript(Name('targets', Load(), lineno=629, col_offset=21), Index(Num(1, lineno=629, col_offset=29)), Store(), lineno=629, col_offset=21), Subscript(Name('targets', Load(), lineno=629, col_offset=33), Index(Num(2, lineno=629, col_offset=41)), Store(), lineno=629, col_offset=33), Subscript(Name('targets', Load(), lineno=629, col_offset=45), Index(Num(3, lineno=629, col_offset=53)), Store(), lineno=629, col_offset=45)], Store(), lineno=629, col_offset=21), [Expr(Call(Attribute(Name('self', Load(), lineno=630, col_offset=12), 'assertEqual', Load(), lineno=630, col_offset=12), [Name('targets', Load(), lineno=630, col_offset=29), Dict([Num(1, lineno=630, col_offset=39), Num(2, lineno=630, col_offset=45), Num(3, lineno=630, col_offset=51)], [Num(1, lineno=630, col_offset=42), Num(2, lineno=630, col_offset=48), Num(3, lineno=630, col_offset=54)], lineno=630, col_offset=38)], [], None, None, lineno=630, col_offset=12), lineno=630, col_offset=12)], lineno=629, col_offset=13), ClassDef('B', [], [Pass( lineno=631, col_offset=17)], [], lineno=631, col_offset=8), Assign([Name('blah', Store(), lineno=632, col_offset=8)], Call(Name('B', Load(), lineno=632, col_offset=15), [], [], None, None, lineno=632, col_offset=15), lineno=632, col_offset=8), With(Call(Name('C', Load(), lineno=633, col_offset=13), [], [], None, None, lineno=633, col_offset=13), Tuple([Attribute(Name('blah', Load(), lineno=633, col_offset=21), 'one', Store(), lineno=633, col_offset=21), Attribute(Name('blah', Load(), lineno=633, col_offset=31), 'two', Store(), lineno=633, col_offset=31), Attribute(Name('blah', Load(), lineno=633, col_offset=41), 'three', Store(), lineno=633, col_offset=41)], Store(), lineno=633, col_offset=21), [Expr(Call(Attribute(Name('self', Load(), lineno=634, col_offset=12), 'assertEqual', Load(), lineno=634, col_offset=12), [Attribute(Name('blah', Load(), lineno=634, col_offset=29), 'one', Load(), lineno=634, col_offset=29), Num(1, lineno=634, col_offset=39)], [], None, None, lineno=634, col_offset=12), lineno=634, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=635, col_offset=12), 'assertEqual', Load(), lineno=635, col_offset=12), [Attribute(Name('blah', Load(), lineno=635, col_offset=29), 'two', Load(), lineno=635, col_offset=29), Num(2, lineno=635, col_offset=39)], [], None, None, lineno=635, col_offset=12), lineno=635, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=636, col_offset=12), 'assertEqual', Load(), lineno=636, col_offset=12), [Attribute(Name('blah', Load(), lineno=636, col_offset=29), 'three', Load(), lineno=636, col_offset=29), Num(3, lineno=636, col_offset=41)], [], None, None, lineno=636, col_offset=12), lineno=636, col_offset=12)], lineno=633, col_offset=13)], [], lineno=620, col_offset=4)], [], lineno=601, col_offset=0), ClassDef('ExitSwallowsExceptionTestCase', [Attribute(Name('unittest', Load(), lineno=639, col_offset=36), 'TestCase', Load(), lineno=639, col_offset=36)], [FunctionDef('testExitTrueSwallowsException', arguments([Name('self', Param(), lineno=641, col_offset=38)], None, None, []), [ClassDef('AfricanSwallow', [], [FunctionDef('__enter__', arguments([Name('self', Param(), lineno=643, col_offset=26)], None, None, []), [Pass( lineno=643, col_offset=33)], [], lineno=643, col_offset=12), FunctionDef('__exit__', arguments([Name('self', Param(), lineno=644, col_offset=25), Name('t', Param(), lineno=644, col_offset=31), Name('v', Param(), lineno=644, col_offset=34), Name('tb', Param(), lineno=644, col_offset=37)], None, None, []), [Return(Name('True', Load(), lineno=644, col_offset=49), lineno=644, col_offset=42)], [], lineno=644, col_offset=12)], [], lineno=642, col_offset=8), TryExcept([With(Call(Name('AfricanSwallow', Load(), lineno=646, col_offset=17), [], [], None, None, lineno=646, col_offset=17), None, [Expr(BinOp(Num(1, lineno=647, col_offset=16), FloorDiv(), Num(0, lineno=647, col_offset=21), lineno=647, col_offset=16), lineno=647, col_offset=16)], lineno=646, col_offset=17)], [ExceptHandler(Name('ZeroDivisionError', Load(), lineno=648, col_offset=15), None, [Expr(Call(Attribute(Name('self', Load(), lineno=649, col_offset=12), 'fail', Load(), lineno=649, col_offset=12), [Str('ZeroDivisionError should have been swallowed', lineno=649, col_offset=22)], [], None, None, lineno=649, col_offset=12), lineno=649, col_offset=12)], lineno=648, col_offset=8)], [], lineno=645, col_offset=8)], [], lineno=641, col_offset=4), FunctionDef('testExitFalseDoesntSwallowException', arguments([Name('self', Param(), lineno=651, col_offset=44)], None, None, []), [ClassDef('EuropeanSwallow', [], [FunctionDef('__enter__', arguments([Name('self', Param(), lineno=653, col_offset=26)], None, None, []), [Pass( lineno=653, col_offset=33)], [], lineno=653, col_offset=12), FunctionDef('__exit__', arguments([Name('self', Param(), lineno=654, col_offset=25), Name('t', Param(), lineno=654, col_offset=31), Name('v', Param(), lineno=654, col_offset=34), Name('tb', Param(), lineno=654, col_offset=37)], None, None, []), [Return(Name('False', Load(), lineno=654, col_offset=49), lineno=654, col_offset=42)], [], lineno=654, col_offset=12)], [], lineno=652, col_offset=8), TryExcept([With(Call(Name('EuropeanSwallow', Load(), lineno=656, col_offset=17), [], [], None, None, lineno=656, col_offset=17), None, [Expr(BinOp(Num(1, lineno=657, col_offset=16), FloorDiv(), Num(0, lineno=657, col_offset=21), lineno=657, col_offset=16), lineno=657, col_offset=16)], lineno=656, col_offset=17)], [ExceptHandler(Name('ZeroDivisionError', Load(), lineno=658, col_offset=15), None, [Pass( lineno=659, col_offset=12)], lineno=658, col_offset=8)], [Expr(Call(Attribute(Name('self', Load(), lineno=661, col_offset=12), 'fail', Load(), lineno=661, col_offset=12), [Str('ZeroDivisionError should have been raised', lineno=661, col_offset=22)], [], None, None, lineno=661, col_offset=12), lineno=661, col_offset=12)], lineno=655, col_offset=8)], [], lineno=651, col_offset=4)], [], lineno=639, col_offset=0), ClassDef('NestedWith', [Attribute(Name('unittest', Load(), lineno=664, col_offset=17), 'TestCase', Load(), lineno=664, col_offset=17)], [ClassDef('Dummy', [Name('object', Load(), lineno=666, col_offset=16)], [FunctionDef('__init__', arguments([Name('self', Param(), lineno=667, col_offset=21), Name('value', Param(), lineno=667, col_offset=27), Name('gobble', Param(), lineno=667, col_offset=39)], None, None, [Name('None', Load(), lineno=667, col_offset=33), Name('False', Load(), lineno=667, col_offset=46)]), [If(Compare(Name('value', Load(), lineno=668, col_offset=15), [Is()], [Name('None', Load(), lineno=668, col_offset=24)], lineno=668, col_offset=15), [Assign([Name('value', Store(), lineno=669, col_offset=16)], Name('self', Load(), lineno=669, col_offset=24), lineno=669, col_offset=16)], [], lineno=668, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=670, col_offset=12), 'value', Store(), lineno=670, col_offset=12)], Name('value', Load(), lineno=670, col_offset=25), lineno=670, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=671, col_offset=12), 'gobble', Store(), lineno=671, col_offset=12)], Name('gobble', Load(), lineno=671, col_offset=26), lineno=671, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=672, col_offset=12), 'enter_called', Store(), lineno=672, col_offset=12)], Name('False', Load(), lineno=672, col_offset=32), lineno=672, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=673, col_offset=12), 'exit_called', Store(), lineno=673, col_offset=12)], Name('False', Load(), lineno=673, col_offset=31), lineno=673, col_offset=12)], [], lineno=667, col_offset=8), FunctionDef('__enter__', arguments([Name('self', Param(), lineno=675, col_offset=22)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=676, col_offset=12), 'enter_called', Store(), lineno=676, col_offset=12)], Name('True', Load(), lineno=676, col_offset=32), lineno=676, col_offset=12), Return(Attribute(Name('self', Load(), lineno=677, col_offset=19), 'value', Load(), lineno=677, col_offset=19), lineno=677, col_offset=12)], [], lineno=675, col_offset=8), FunctionDef('__exit__', arguments([Name('self', Param(), lineno=679, col_offset=21)], 'exc_info', None, []), [Assign([Attribute(Name('self', Load(), lineno=680, col_offset=12), 'exit_called', Store(), lineno=680, col_offset=12)], Name('True', Load(), lineno=680, col_offset=31), lineno=680, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=681, col_offset=12), 'exc_info', Store(), lineno=681, col_offset=12)], Name('exc_info', Load(), lineno=681, col_offset=28), lineno=681, col_offset=12), If(Attribute(Name('self', Load(), lineno=682, col_offset=15), 'gobble', Load(), lineno=682, col_offset=15), [Return(Name('True', Load(), lineno=683, col_offset=23), lineno=683, col_offset=16)], [], lineno=682, col_offset=12)], [], lineno=679, col_offset=8)], [], lineno=666, col_offset=4), ClassDef('InitRaises', [Name('object', Load(), lineno=685, col_offset=21)], [FunctionDef('__init__', arguments([Name('self', Param(), lineno=686, col_offset=21)], None, None, []), [Raise(Call(Name('RuntimeError', Load(), lineno=686, col_offset=34), [], [], None, None, lineno=686, col_offset=34), None, None, lineno=686, col_offset=28)], [], lineno=686, col_offset=8)], [], lineno=685, col_offset=4), ClassDef('EnterRaises', [Name('object', Load(), lineno=688, col_offset=22)], [FunctionDef('__enter__', arguments([Name('self', Param(), lineno=689, col_offset=22)], None, None, []), [Raise(Call(Name('RuntimeError', Load(), lineno=689, col_offset=35), [], [], None, None, lineno=689, col_offset=35), None, None, lineno=689, col_offset=29)], [], lineno=689, col_offset=8), FunctionDef('__exit__', arguments([Name('self', Param(), lineno=690, col_offset=21)], 'exc_info', None, []), [Pass( lineno=690, col_offset=39)], [], lineno=690, col_offset=8)], [], lineno=688, col_offset=4), ClassDef('ExitRaises', [Name('object', Load(), lineno=692, col_offset=21)], [FunctionDef('__enter__', arguments([Name('self', Param(), lineno=693, col_offset=22)], None, None, []), [Pass( lineno=693, col_offset=29)], [], lineno=693, col_offset=8), FunctionDef('__exit__', arguments([Name('self', Param(), lineno=694, col_offset=21)], 'exc_info', None, []), [Raise(Call(Name('RuntimeError', Load(), lineno=694, col_offset=45), [], [], None, None, lineno=694, col_offset=45), None, None, lineno=694, col_offset=39)], [], lineno=694, col_offset=8)], [], lineno=692, col_offset=4), FunctionDef('testNoExceptions', arguments([Name('self', Param(), lineno=696, col_offset=25)], None, None, []), [With(Call(Attribute(Name('self', Load(), lineno=697, col_offset=13), 'Dummy', Load(), lineno=697, col_offset=13), [], [], None, None, lineno=697, col_offset=13), Name('a', Store(), lineno=697, col_offset=29), [With(Call(Attribute(Name('self', Load(), lineno=697, col_offset=32), 'Dummy', Load(), lineno=697, col_offset=32), [], [], None, None, lineno=697, col_offset=32), Name('b', Store(), lineno=697, col_offset=48), [Expr(Call(Attribute(Name('self', Load(), lineno=698, col_offset=12), 'assertTrue', Load(), lineno=698, col_offset=12), [Attribute(Name('a', Load(), lineno=698, col_offset=28), 'enter_called', Load(), lineno=698, col_offset=28)], [], None, None, lineno=698, col_offset=12), lineno=698, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=699, col_offset=12), 'assertTrue', Load(), lineno=699, col_offset=12), [Attribute(Name('b', Load(), lineno=699, col_offset=28), 'enter_called', Load(), lineno=699, col_offset=28)], [], None, None, lineno=699, col_offset=12), lineno=699, col_offset=12)], lineno=697, col_offset=32)], lineno=697, col_offset=13), Expr(Call(Attribute(Name('self', Load(), lineno=700, col_offset=8), 'assertTrue', Load(), lineno=700, col_offset=8), [Attribute(Name('a', Load(), lineno=700, col_offset=24), 'exit_called', Load(), lineno=700, col_offset=24)], [], None, None, lineno=700, col_offset=8), lineno=700, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=701, col_offset=8), 'assertTrue', Load(), lineno=701, col_offset=8), [Attribute(Name('b', Load(), lineno=701, col_offset=24), 'exit_called', Load(), lineno=701, col_offset=24)], [], None, None, lineno=701, col_offset=8), lineno=701, col_offset=8)], [], lineno=696, col_offset=4), FunctionDef('testExceptionInExprList', arguments([Name('self', Param(), lineno=703, col_offset=32)], None, None, []), [TryExcept([With(Call(Attribute(Name('self', Load(), lineno=705, col_offset=17), 'Dummy', Load(), lineno=705, col_offset=17), [], [], None, None, lineno=705, col_offset=17), Name('a', Store(), lineno=705, col_offset=33), [With(Call(Attribute(Name('self', Load(), lineno=705, col_offset=36), 'InitRaises', Load(), lineno=705, col_offset=36), [], [], None, None, lineno=705, col_offset=36), None, [Pass( lineno=706, col_offset=16)], lineno=705, col_offset=36)], lineno=705, col_offset=17)], [ExceptHandler(None, None, [Pass( lineno=708, col_offset=12)], lineno=707, col_offset=8)], [], lineno=704, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=709, col_offset=8), 'assertTrue', Load(), lineno=709, col_offset=8), [Attribute(Name('a', Load(), lineno=709, col_offset=24), 'enter_called', Load(), lineno=709, col_offset=24)], [], None, None, lineno=709, col_offset=8), lineno=709, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=710, col_offset=8), 'assertTrue', Load(), lineno=710, col_offset=8), [Attribute(Name('a', Load(), lineno=710, col_offset=24), 'exit_called', Load(), lineno=710, col_offset=24)], [], None, None, lineno=710, col_offset=8), lineno=710, col_offset=8)], [], lineno=703, col_offset=4), FunctionDef('testExceptionInEnter', arguments([Name('self', Param(), lineno=712, col_offset=29)], None, None, []), [TryExcept([With(Call(Attribute(Name('self', Load(), lineno=714, col_offset=17), 'Dummy', Load(), lineno=714, col_offset=17), [], [], None, None, lineno=714, col_offset=17), Name('a', Store(), lineno=714, col_offset=33), [With(Call(Attribute(Name('self', Load(), lineno=714, col_offset=36), 'EnterRaises', Load(), lineno=714, col_offset=36), [], [], None, None, lineno=714, col_offset=36), None, [Expr(Call(Attribute(Name('self', Load(), lineno=715, col_offset=16), 'fail', Load(), lineno=715, col_offset=16), [Str('body of bad with executed', lineno=715, col_offset=26)], [], None, None, lineno=715, col_offset=16), lineno=715, col_offset=16)], lineno=714, col_offset=36)], lineno=714, col_offset=17)], [ExceptHandler(Name('RuntimeError', Load(), lineno=716, col_offset=15), None, [Pass( lineno=717, col_offset=12)], lineno=716, col_offset=8)], [Expr(Call(Attribute(Name('self', Load(), lineno=719, col_offset=12), 'fail', Load(), lineno=719, col_offset=12), [Str('RuntimeError not reraised', lineno=719, col_offset=22)], [], None, None, lineno=719, col_offset=12), lineno=719, col_offset=12)], lineno=713, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=720, col_offset=8), 'assertTrue', Load(), lineno=720, col_offset=8), [Attribute(Name('a', Load(), lineno=720, col_offset=24), 'enter_called', Load(), lineno=720, col_offset=24)], [], None, None, lineno=720, col_offset=8), lineno=720, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=721, col_offset=8), 'assertTrue', Load(), lineno=721, col_offset=8), [Attribute(Name('a', Load(), lineno=721, col_offset=24), 'exit_called', Load(), lineno=721, col_offset=24)], [], None, None, lineno=721, col_offset=8), lineno=721, col_offset=8)], [], lineno=712, col_offset=4), FunctionDef('testExceptionInExit', arguments([Name('self', Param(), lineno=723, col_offset=28)], None, None, []), [Assign([Name('body_executed', Store(), lineno=724, col_offset=8)], Name('False', Load(), lineno=724, col_offset=24), lineno=724, col_offset=8), With(Call(Attribute(Name('self', Load(), lineno=725, col_offset=13), 'Dummy', Load(), lineno=725, col_offset=13), [], [keyword('gobble', Name('True', Load(), lineno=725, col_offset=31))], None, None, lineno=725, col_offset=13), Name('a', Store(), lineno=725, col_offset=40), [With(Call(Attribute(Name('self', Load(), lineno=725, col_offset=43), 'ExitRaises', Load(), lineno=725, col_offset=43), [], [], None, None, lineno=725, col_offset=43), None, [Assign([Name('body_executed', Store(), lineno=726, col_offset=12)], Name('True', Load(), lineno=726, col_offset=28), lineno=726, col_offset=12)], lineno=725, col_offset=43)], lineno=725, col_offset=13), Expr(Call(Attribute(Name('self', Load(), lineno=727, col_offset=8), 'assertTrue', Load(), lineno=727, col_offset=8), [Attribute(Name('a', Load(), lineno=727, col_offset=24), 'enter_called', Load(), lineno=727, col_offset=24)], [], None, None, lineno=727, col_offset=8), lineno=727, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=728, col_offset=8), 'assertTrue', Load(), lineno=728, col_offset=8), [Attribute(Name('a', Load(), lineno=728, col_offset=24), 'exit_called', Load(), lineno=728, col_offset=24)], [], None, None, lineno=728, col_offset=8), lineno=728, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=729, col_offset=8), 'assertTrue', Load(), lineno=729, col_offset=8), [Name('body_executed', Load(), lineno=729, col_offset=24)], [], None, None, lineno=729, col_offset=8), lineno=729, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=730, col_offset=8), 'assertNotEqual', Load(), lineno=730, col_offset=8), [Subscript(Attribute(Name('a', Load(), lineno=730, col_offset=28), 'exc_info', Load(), lineno=730, col_offset=28), Index(Num(0, lineno=730, col_offset=39)), Load(), lineno=730, col_offset=28), Name('None', Load(), lineno=730, col_offset=43)], [], None, None, lineno=730, col_offset=8), lineno=730, col_offset=8)], [], lineno=723, col_offset=4), FunctionDef('testEnterReturnsTuple', arguments([Name('self', Param(), lineno=732, col_offset=30)], None, None, []), [With(Call(Attribute(Name('self', Load(), lineno=733, col_offset=13), 'Dummy', Load(), lineno=733, col_offset=13), [], [keyword('value', Tuple([Num(1, lineno=733, col_offset=31), Num(2, lineno=733, col_offset=33)], Load(), lineno=733, col_offset=31))], None, None, lineno=733, col_offset=13), Tuple([Name('a1', Store(), lineno=733, col_offset=41), Name('a2', Store(), lineno=733, col_offset=45)], Store(), lineno=733, col_offset=41), [With(Call(Attribute(Name('self', Load(), lineno=734, col_offset=13), 'Dummy', Load(), lineno=734, col_offset=13), [], [keyword('value', Tuple([Num(10, lineno=734, col_offset=31), Num(20, lineno=734, col_offset=35)], Load(), lineno=734, col_offset=31))], None, None, lineno=734, col_offset=13), Tuple([Name('b1', Store(), lineno=734, col_offset=44), Name('b2', Store(), lineno=734, col_offset=48)], Store(), lineno=734, col_offset=44), [Expr(Call(Attribute(Name('self', Load(), lineno=735, col_offset=12), 'assertEqual', Load(), lineno=735, col_offset=12), [Num(1, lineno=735, col_offset=29), Name('a1', Load(), lineno=735, col_offset=32)], [], None, None, lineno=735, col_offset=12), lineno=735, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=736, col_offset=12), 'assertEqual', Load(), lineno=736, col_offset=12), [Num(2, lineno=736, col_offset=29), Name('a2', Load(), lineno=736, col_offset=32)], [], None, None, lineno=736, col_offset=12), lineno=736, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=737, col_offset=12), 'assertEqual', Load(), lineno=737, col_offset=12), [Num(10, lineno=737, col_offset=29), Name('b1', Load(), lineno=737, col_offset=33)], [], None, None, lineno=737, col_offset=12), lineno=737, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=738, col_offset=12), 'assertEqual', Load(), lineno=738, col_offset=12), [Num(20, lineno=738, col_offset=29), Name('b2', Load(), lineno=738, col_offset=33)], [], None, None, lineno=738, col_offset=12), lineno=738, col_offset=12)], lineno=734, col_offset=13)], lineno=733, col_offset=13)], [], lineno=732, col_offset=4)], [], lineno=664, col_offset=0), FunctionDef('test_main', arguments([], None, None, []), [Expr(Call(Name('run_unittest', Load(), lineno=741, col_offset=4), [Name('FailureTestCase', Load(), lineno=741, col_offset=17), Name('NonexceptionalTestCase', Load(), lineno=741, col_offset=34), Name('NestedNonexceptionalTestCase', Load(), lineno=742, col_offset=17), Name('ExceptionalTestCase', Load(), lineno=742, col_offset=47), Name('NonLocalFlowControlTestCase', Load(), lineno=743, col_offset=17), Name('AssignmentTargetTestCase', Load(), lineno=744, col_offset=17), Name('ExitSwallowsExceptionTestCase', Load(), lineno=745, col_offset=17), Name('NestedWith', Load(), lineno=746, col_offset=17)], [], None, None, lineno=741, col_offset=4), lineno=741, col_offset=4)], [], lineno=740, col_offset=0), If(Compare(Name('__name__', Load(), lineno=749, col_offset=3), [Eq()], [Str('__main__', lineno=749, col_offset=15)], lineno=749, col_offset=3), [Expr(Call(Name('test_main', Load(), lineno=750, col_offset=4), [], [], None, None, lineno=750, col_offset=4), lineno=750, col_offset=4)], [], lineno=749, col_offset=0)])
