Module([Import([alias('marshal', None)], lineno=1, col_offset=0), Import([alias('bkfile', None)], lineno=2, col_offset=0), Assign([Name('header', Store(), lineno=7, col_offset=0)], Str('\n#include "Python.h"\n\nstatic struct _frozen _PyImport_FrozenModules[] = {\n', lineno=11, col_offset=-1), lineno=7, col_offset=0), Assign([Name('trailer', Store(), lineno=12, col_offset=0)], Str('    {0, 0, 0} /* sentinel */\n};\n', lineno=15, col_offset=-1), lineno=12, col_offset=0), Assign([Name('default_entry_point', Store(), lineno=18, col_offset=0)], BinOp(BinOp(Str('\nint\nmain(int argc, char **argv)\n{\n        extern int Py_FrozenMain(int, char **);\n', lineno=23, col_offset=-1), Add(), BoolOp(Or(), [BoolOp(And(), [UnaryOp(Not(), Name('__debug__', Load(), lineno=23, col_offset=12), lineno=23, col_offset=8), Str('\n        Py_OptimizeFlag++;\n', lineno=25, col_offset=-1)], lineno=23, col_offset=8), Str('', lineno=25, col_offset=8)], lineno=23, col_offset=7), lineno=23, col_offset=-1), Add(), Str('\n        PyImport_FrozenModules = _PyImport_FrozenModules;\n        return Py_FrozenMain(argc, argv);\n}\n\n', lineno=30, col_offset=-1), lineno=25, col_offset=13), lineno=18, col_offset=0), FunctionDef('makefreeze', arguments([Name('base', Param(), lineno=32, col_offset=15), Name('dict', Param(), lineno=32, col_offset=21), Name('debug', Param(), lineno=32, col_offset=27), Name('entry_point', Param(), lineno=32, col_offset=36), Name('fail_import', Param(), lineno=32, col_offset=54)], None, None, [Num(0, lineno=32, col_offset=33), Name('None', Load(), lineno=32, col_offset=48), Tuple([], Load(), lineno=32, col_offset=66)]), [If(Compare(Name('entry_point', Load(), lineno=33, col_offset=7), [Is()], [Name('None', Load(), lineno=33, col_offset=22)], lineno=33, col_offset=7), [Assign([Name('entry_point', Store(), lineno=33, col_offset=28)], Name('default_entry_point', Load(), lineno=33, col_offset=42), lineno=33, col_offset=28)], [], lineno=33, col_offset=4), Assign([Name('done', Store(), lineno=34, col_offset=4)], List([], Load(), lineno=34, col_offset=11), lineno=34, col_offset=4), Assign([Name('files', Store(), lineno=35, col_offset=4)], List([], Load(), lineno=35, col_offset=12), lineno=35, col_offset=4), Assign([Name('mods', Store(), lineno=36, col_offset=4)], Call(Attribute(Name('dict', Load(), lineno=36, col_offset=11), 'keys', Load(), lineno=36, col_offset=11), [], [], None, None, lineno=36, col_offset=11), lineno=36, col_offset=4), Expr(Call(Attribute(Name('mods', Load(), lineno=37, col_offset=4), 'sort', Load(), lineno=37, col_offset=4), [], [], None, None, lineno=37, col_offset=4), lineno=37, col_offset=4), For(Name('mod', Store(), lineno=38, col_offset=8), Name('mods', Load(), lineno=38, col_offset=15), [Assign([Name('m', Store(), lineno=39, col_offset=8)], Subscript(Name('dict', Load(), lineno=39, col_offset=12), Index(Name('mod', Load(), lineno=39, col_offset=17)), Load(), lineno=39, col_offset=12), lineno=39, col_offset=8), Assign([Name('mangled', Store(), lineno=40, col_offset=8)], Call(Attribute(Str('__', lineno=40, col_offset=18), 'join', Load(), lineno=40, col_offset=18), [Call(Attribute(Name('mod', Load(), lineno=40, col_offset=28), 'split', Load(), lineno=40, col_offset=28), [Str('.', lineno=40, col_offset=38)], [], None, None, lineno=40, col_offset=28)], [], None, None, lineno=40, col_offset=18), lineno=40, col_offset=8), If(Attribute(Name('m', Load(), lineno=41, col_offset=11), '__code__', Load(), lineno=41, col_offset=11), [Assign([Name('file', Store(), lineno=42, col_offset=12)], BinOp(BinOp(Str('M_', lineno=42, col_offset=19), Add(), Name('mangled', Load(), lineno=42, col_offset=26), lineno=42, col_offset=19), Add(), Str('.c', lineno=42, col_offset=36), lineno=42, col_offset=34), lineno=42, col_offset=12), Assign([Name('outfp', Store(), lineno=43, col_offset=12)], Call(Attribute(Name('bkfile', Load(), lineno=43, col_offset=20), 'open', Load(), lineno=43, col_offset=20), [BinOp(Name('base', Load(), lineno=43, col_offset=32), Add(), Name('file', Load(), lineno=43, col_offset=39), lineno=43, col_offset=32), Str('w', lineno=43, col_offset=45)], [], None, None, lineno=43, col_offset=20), lineno=43, col_offset=12), Expr(Call(Attribute(Name('files', Load(), lineno=44, col_offset=12), 'append', Load(), lineno=44, col_offset=12), [Name('file', Load(), lineno=44, col_offset=25)], [], None, None, lineno=44, col_offset=12), lineno=44, col_offset=12), If(Name('debug', Load(), lineno=45, col_offset=15), [Print(None, [Str('freezing', lineno=46, col_offset=22), Name('mod', Load(), lineno=46, col_offset=34), Str('...', lineno=46, col_offset=39)], True, lineno=46, col_offset=16)], [], lineno=45, col_offset=12), Assign([Name('str', Store(), lineno=47, col_offset=12)], Call(Attribute(Name('marshal', Load(), lineno=47, col_offset=18), 'dumps', Load(), lineno=47, col_offset=18), [Attribute(Name('m', Load(), lineno=47, col_offset=32), '__code__', Load(), lineno=47, col_offset=32)], [], None, None, lineno=47, col_offset=18), lineno=47, col_offset=12), Assign([Name('size', Store(), lineno=48, col_offset=12)], Call(Name('len', Load(), lineno=48, col_offset=19), [Name('str', Load(), lineno=48, col_offset=23)], [], None, None, lineno=48, col_offset=19), lineno=48, col_offset=12), If(Attribute(Name('m', Load(), lineno=49, col_offset=15), '__path__', Load(), lineno=49, col_offset=15), [Assign([Name('size', Store(), lineno=51, col_offset=16)], UnaryOp(USub(), Name('size', Load(), lineno=51, col_offset=24), lineno=51, col_offset=23), lineno=51, col_offset=16)], [], lineno=49, col_offset=12), Expr(Call(Attribute(Name('done', Load(), lineno=52, col_offset=12), 'append', Load(), lineno=52, col_offset=12), [Tuple([Name('mod', Load(), lineno=52, col_offset=25), Name('mangled', Load(), lineno=52, col_offset=30), Name('size', Load(), lineno=52, col_offset=39)], Load(), lineno=52, col_offset=25)], [], None, None, lineno=52, col_offset=12), lineno=52, col_offset=12), Expr(Call(Name('writecode', Load(), lineno=53, col_offset=12), [Name('outfp', Load(), lineno=53, col_offset=22), Name('mangled', Load(), lineno=53, col_offset=29), Name('str', Load(), lineno=53, col_offset=38)], [], None, None, lineno=53, col_offset=12), lineno=53, col_offset=12), Expr(Call(Attribute(Name('outfp', Load(), lineno=54, col_offset=12), 'close', Load(), lineno=54, col_offset=12), [], [], None, None, lineno=54, col_offset=12), lineno=54, col_offset=12)], [], lineno=41, col_offset=8)], [], lineno=38, col_offset=4), If(Name('debug', Load(), lineno=55, col_offset=7), [Print(None, [Str('generating table of frozen modules', lineno=56, col_offset=14)], True, lineno=56, col_offset=8)], [], lineno=55, col_offset=4), Assign([Name('outfp', Store(), lineno=57, col_offset=4)], Call(Attribute(Name('bkfile', Load(), lineno=57, col_offset=12), 'open', Load(), lineno=57, col_offset=12), [BinOp(Name('base', Load(), lineno=57, col_offset=24), Add(), Str('frozen.c', lineno=57, col_offset=31), lineno=57, col_offset=24), Str('w', lineno=57, col_offset=43)], [], None, None, lineno=57, col_offset=12), lineno=57, col_offset=4), For(Tuple([Name('mod', Store(), lineno=58, col_offset=8), Name('mangled', Store(), lineno=58, col_offset=13), Name('size', Store(), lineno=58, col_offset=22)], Store(), lineno=58, col_offset=8), Name('done', Load(), lineno=58, col_offset=30), [Expr(Call(Attribute(Name('outfp', Load(), lineno=59, col_offset=8), 'write', Load(), lineno=59, col_offset=8), [BinOp(Str('extern unsigned char M_%s[];\n', lineno=59, col_offset=20), Mod(), Name('mangled', Load(), lineno=59, col_offset=55), lineno=59, col_offset=20)], [], None, None, lineno=59, col_offset=8), lineno=59, col_offset=8)], [], lineno=58, col_offset=4), Expr(Call(Attribute(Name('outfp', Load(), lineno=60, col_offset=4), 'write', Load(), lineno=60, col_offset=4), [Name('header', Load(), lineno=60, col_offset=16)], [], None, None, lineno=60, col_offset=4), lineno=60, col_offset=4), For(Tuple([Name('mod', Store(), lineno=61, col_offset=8), Name('mangled', Store(), lineno=61, col_offset=13), Name('size', Store(), lineno=61, col_offset=22)], Store(), lineno=61, col_offset=8), Name('done', Load(), lineno=61, col_offset=30), [Expr(Call(Attribute(Name('outfp', Load(), lineno=62, col_offset=8), 'write', Load(), lineno=62, col_offset=8), [BinOp(Str('\t{"%s", M_%s, %d},\n', lineno=62, col_offset=20), Mod(), Tuple([Name('mod', Load(), lineno=62, col_offset=47), Name('mangled', Load(), lineno=62, col_offset=52), Name('size', Load(), lineno=62, col_offset=61)], Load(), lineno=62, col_offset=47), lineno=62, col_offset=20)], [], None, None, lineno=62, col_offset=8), lineno=62, col_offset=8)], [], lineno=61, col_offset=4), Expr(Call(Attribute(Name('outfp', Load(), lineno=63, col_offset=4), 'write', Load(), lineno=63, col_offset=4), [Str('\n', lineno=63, col_offset=16)], [], None, None, lineno=63, col_offset=4), lineno=63, col_offset=4), For(Name('mod', Store(), lineno=68, col_offset=8), Name('fail_import', Load(), lineno=68, col_offset=15), [Expr(Call(Attribute(Name('outfp', Load(), lineno=69, col_offset=8), 'write', Load(), lineno=69, col_offset=8), [BinOp(Str('\t{"%s", NULL, 0},\n', lineno=69, col_offset=20), Mod(), Tuple([Name('mod', Load(), lineno=69, col_offset=46)], Load(), lineno=69, col_offset=46), lineno=69, col_offset=20)], [], None, None, lineno=69, col_offset=8), lineno=69, col_offset=8)], [], lineno=68, col_offset=4), Expr(Call(Attribute(Name('outfp', Load(), lineno=70, col_offset=4), 'write', Load(), lineno=70, col_offset=4), [Name('trailer', Load(), lineno=70, col_offset=16)], [], None, None, lineno=70, col_offset=4), lineno=70, col_offset=4), Expr(Call(Attribute(Name('outfp', Load(), lineno=71, col_offset=4), 'write', Load(), lineno=71, col_offset=4), [Name('entry_point', Load(), lineno=71, col_offset=16)], [], None, None, lineno=71, col_offset=4), lineno=71, col_offset=4), Expr(Call(Attribute(Name('outfp', Load(), lineno=72, col_offset=4), 'close', Load(), lineno=72, col_offset=4), [], [], None, None, lineno=72, col_offset=4), lineno=72, col_offset=4), Return(Name('files', Load(), lineno=73, col_offset=11), lineno=73, col_offset=4)], [], lineno=32, col_offset=0), FunctionDef('writecode', arguments([Name('outfp', Param(), lineno=80, col_offset=14), Name('mod', Param(), lineno=80, col_offset=21), Name('str', Param(), lineno=80, col_offset=26)], None, None, []), [Expr(Call(Attribute(Name('outfp', Load(), lineno=81, col_offset=4), 'write', Load(), lineno=81, col_offset=4), [BinOp(Str('unsigned char M_%s[] = {', lineno=81, col_offset=16), Mod(), Name('mod', Load(), lineno=81, col_offset=45), lineno=81, col_offset=16)], [], None, None, lineno=81, col_offset=4), lineno=81, col_offset=4), For(Name('i', Store(), lineno=82, col_offset=8), Call(Name('range', Load(), lineno=82, col_offset=13), [Num(0, lineno=82, col_offset=19), Call(Name('len', Load(), lineno=82, col_offset=22), [Name('str', Load(), lineno=82, col_offset=26)], [], None, None, lineno=82, col_offset=22), Num(16, lineno=82, col_offset=32)], [], None, None, lineno=82, col_offset=13), [Expr(Call(Attribute(Name('outfp', Load(), lineno=83, col_offset=8), 'write', Load(), lineno=83, col_offset=8), [Str('\n\t', lineno=83, col_offset=20)], [], None, None, lineno=83, col_offset=8), lineno=83, col_offset=8), For(Name('c', Store(), lineno=84, col_offset=12), Subscript(Name('str', Load(), lineno=84, col_offset=17), Slice(Name('i', Load(), lineno=84, col_offset=21), BinOp(Name('i', Load(), lineno=84, col_offset=23), Add(), Num(16, lineno=84, col_offset=25), lineno=84, col_offset=23), None), Load(), lineno=84, col_offset=17), [Expr(Call(Attribute(Name('outfp', Load(), lineno=85, col_offset=12), 'write', Load(), lineno=85, col_offset=12), [BinOp(Str('%d,', lineno=85, col_offset=24), Mod(), Call(Name('ord', Load(), lineno=85, col_offset=32), [Name('c', Load(), lineno=85, col_offset=36)], [], None, None, lineno=85, col_offset=32), lineno=85, col_offset=24)], [], None, None, lineno=85, col_offset=12), lineno=85, col_offset=12)], [], lineno=84, col_offset=8)], [], lineno=82, col_offset=4), Expr(Call(Attribute(Name('outfp', Load(), lineno=86, col_offset=4), 'write', Load(), lineno=86, col_offset=4), [Str('\n};\n', lineno=86, col_offset=16)], [], None, None, lineno=86, col_offset=4), lineno=86, col_offset=4)], [], lineno=80, col_offset=0)])
