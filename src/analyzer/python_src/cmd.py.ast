Module([Expr(Str('distutils.cmd\n\nProvides the Command class, the base class for the command classes\nin the distutils.command package.\n', lineno=5, col_offset=-1), lineno=5, col_offset=-1), Assign([Name('__revision__', Store(), lineno=7, col_offset=0)], Str('$Id: cmd.py 75192 2009-10-02 23:49:48Z tarek.ziade $', lineno=7, col_offset=15), lineno=7, col_offset=0), Import([alias('sys', None), alias('os', None), alias('re', None)], lineno=9, col_offset=0), ImportFrom('distutils.errors', [alias('DistutilsOptionError', None)], 0, lineno=10, col_offset=0), ImportFrom('distutils', [alias('util', None), alias('dir_util', None), alias('file_util', None), alias('archive_util', None), alias('dep_util', None)], 0, lineno=11, col_offset=0), ImportFrom('distutils', [alias('log', None)], 0, lineno=12, col_offset=0), ClassDef('Command', [], [Expr(Str('Abstract base class for defining command classes, the "worker bees"\n    of the Distutils.  A useful analogy for command classes is to think of\n    them as subroutines with local variables called "options".  The options\n    are "declared" in \'initialize_options()\' and "defined" (given their\n    final values, aka "finalized") in \'finalize_options()\', both of which\n    must be defined by every command class.  The distinction between the\n    two is necessary because option values might come from the outside\n    world (command line, config file, ...), and any options dependent on\n    other options must be computed *after* these outside influences have\n    been processed -- hence \'finalize_options()\'.  The "body" of the\n    subroutine, where it does all its work based on the values of its\n    options, is the \'run()\' method, which must also be implemented by every\n    command class.\n    ', lineno=28, col_offset=-1), lineno=28, col_offset=-1), Assign([Name('sub_commands', Store(), lineno=44, col_offset=4)], List([], Load(), lineno=44, col_offset=19), lineno=44, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=49, col_offset=17), Name('dist', Param(), lineno=49, col_offset=23)], None, None, []), [Expr(Str("Create and initialize a new Command object.  Most importantly,\n        invokes the 'initialize_options()' method, which is the real\n        initializer and depends on the actual command being\n        instantiated.\n        ", lineno=54, col_offset=-1), lineno=54, col_offset=-1), ImportFrom('distutils.dist', [alias('Distribution', None)], 0, lineno=56, col_offset=8), If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=58, col_offset=15), [Name('dist', Load(), lineno=58, col_offset=26), Name('Distribution', Load(), lineno=58, col_offset=32)], [], None, None, lineno=58, col_offset=15), lineno=58, col_offset=11), [Raise(Name('TypeError', Load(), lineno=59, col_offset=18), Str('dist must be a Distribution instance', lineno=59, col_offset=29), None, lineno=59, col_offset=12)], [], lineno=58, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=60, col_offset=11), '__class__', Load(), lineno=60, col_offset=11), [Is()], [Name('Command', Load(), lineno=60, col_offset=29)], lineno=60, col_offset=11), [Raise(Name('RuntimeError', Load(), lineno=61, col_offset=18), Str('Command is an abstract class', lineno=61, col_offset=32), None, lineno=61, col_offset=12)], [], lineno=60, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=63, col_offset=8), 'distribution', Store(), lineno=63, col_offset=8)], Name('dist', Load(), lineno=63, col_offset=28), lineno=63, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=64, col_offset=8), 'initialize_options', Load(), lineno=64, col_offset=8), [], [], None, None, lineno=64, col_offset=8), lineno=64, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=74, col_offset=8), '_dry_run', Store(), lineno=74, col_offset=8)], Name('None', Load(), lineno=74, col_offset=24), lineno=74, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=78, col_offset=8), 'verbose', Store(), lineno=78, col_offset=8)], Attribute(Name('dist', Load(), lineno=78, col_offset=23), 'verbose', Load(), lineno=78, col_offset=23), lineno=78, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=84, col_offset=8), 'force', Store(), lineno=84, col_offset=8)], Name('None', Load(), lineno=84, col_offset=21), lineno=84, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=88, col_offset=8), 'help', Store(), lineno=88, col_offset=8)], Num(0, lineno=88, col_offset=20), lineno=88, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=94, col_offset=8), 'finalized', Store(), lineno=94, col_offset=8)], Num(0, lineno=94, col_offset=25), lineno=94, col_offset=8)], [], lineno=49, col_offset=4), FunctionDef('__getattr__', arguments([Name('self', Param(), lineno=97, col_offset=20), Name('attr', Param(), lineno=97, col_offset=26)], None, None, []), [If(Compare(Name('attr', Load(), lineno=98, col_offset=11), [Eq()], [Str('dry_run', lineno=98, col_offset=19)], lineno=98, col_offset=11), [Assign([Name('myval', Store(), lineno=99, col_offset=12)], Call(Name('getattr', Load(), lineno=99, col_offset=20), [Name('self', Load(), lineno=99, col_offset=28), BinOp(Str('_', lineno=99, col_offset=34), Add(), Name('attr', Load(), lineno=99, col_offset=40), lineno=99, col_offset=34)], [], None, None, lineno=99, col_offset=20), lineno=99, col_offset=12), If(Compare(Name('myval', Load(), lineno=100, col_offset=15), [Is()], [Name('None', Load(), lineno=100, col_offset=24)], lineno=100, col_offset=15), [Return(Call(Name('getattr', Load(), lineno=101, col_offset=23), [Attribute(Name('self', Load(), lineno=101, col_offset=31), 'distribution', Load(), lineno=101, col_offset=31), Name('attr', Load(), lineno=101, col_offset=50)], [], None, None, lineno=101, col_offset=23), lineno=101, col_offset=16)], [Return(Name('myval', Load(), lineno=103, col_offset=23), lineno=103, col_offset=16)], lineno=100, col_offset=12)], [Raise(Name('AttributeError', Load(), lineno=105, col_offset=18), Name('attr', Load(), lineno=105, col_offset=34), None, lineno=105, col_offset=12)], lineno=98, col_offset=8)], [], lineno=97, col_offset=4), FunctionDef('ensure_finalized', arguments([Name('self', Param(), lineno=107, col_offset=25)], None, None, []), [If(UnaryOp(Not(), Attribute(Name('self', Load(), lineno=108, col_offset=15), 'finalized', Load(), lineno=108, col_offset=15), lineno=108, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=109, col_offset=12), 'finalize_options', Load(), lineno=109, col_offset=12), [], [], None, None, lineno=109, col_offset=12), lineno=109, col_offset=12)], [], lineno=108, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=110, col_offset=8), 'finalized', Store(), lineno=110, col_offset=8)], Num(1, lineno=110, col_offset=25), lineno=110, col_offset=8)], [], lineno=107, col_offset=4), FunctionDef('initialize_options', arguments([Name('self', Param(), lineno=125, col_offset=27)], None, None, []), [Expr(Str('Set default values for all the options that this command\n        supports.  Note that these defaults may be overridden by other\n        commands, by the setup script, by config files, or by the\n        command-line.  Thus, this is not the place to code dependencies\n        between options; generally, \'initialize_options()\' implementations\n        are just a bunch of "self.foo = None" assignments.\n\n        This method must be implemented by all command classes.\n        ', lineno=134, col_offset=-1), lineno=134, col_offset=-1), Raise(Name('RuntimeError', Load(), lineno=135, col_offset=14), BinOp(Str('abstract method -- subclass %s must override', lineno=136, col_offset=14), Mod(), Attribute(Name('self', Load(), lineno=136, col_offset=63), '__class__', Load(), lineno=136, col_offset=63), lineno=136, col_offset=14), None, lineno=135, col_offset=8)], [], lineno=125, col_offset=4), FunctionDef('finalize_options', arguments([Name('self', Param(), lineno=138, col_offset=25)], None, None, []), [Expr(Str("Set final values for all the options that this command supports.\n        This is always called as late as possible, ie.  after any option\n        assignments from the command-line or from other commands have been\n        done.  Thus, this is the place to code option dependencies: if\n        'foo' depends on 'bar', then it is safe to set 'foo' from 'bar' as\n        long as 'foo' still has the same value it was assigned in\n        'initialize_options()'.\n\n        This method must be implemented by all command classes.\n        ", lineno=148, col_offset=-1), lineno=148, col_offset=-1), Raise(Name('RuntimeError', Load(), lineno=149, col_offset=14), BinOp(Str('abstract method -- subclass %s must override', lineno=150, col_offset=14), Mod(), Attribute(Name('self', Load(), lineno=150, col_offset=63), '__class__', Load(), lineno=150, col_offset=63), lineno=150, col_offset=14), None, lineno=149, col_offset=8)], [], lineno=138, col_offset=4), FunctionDef('dump_options', arguments([Name('self', Param(), lineno=153, col_offset=21), Name('header', Param(), lineno=153, col_offset=27), Name('indent', Param(), lineno=153, col_offset=40)], None, None, [Name('None', Load(), lineno=153, col_offset=34), Str('', lineno=153, col_offset=47)]), [ImportFrom('distutils.fancy_getopt', [alias('longopt_xlate', None)], 0, lineno=154, col_offset=8), If(Compare(Name('header', Load(), lineno=155, col_offset=11), [Is()], [Name('None', Load(), lineno=155, col_offset=21)], lineno=155, col_offset=11), [Assign([Name('header', Store(), lineno=156, col_offset=12)], BinOp(Str("command options for '%s':", lineno=156, col_offset=21), Mod(), Call(Attribute(Name('self', Load(), lineno=156, col_offset=51), 'get_command_name', Load(), lineno=156, col_offset=51), [], [], None, None, lineno=156, col_offset=51), lineno=156, col_offset=21), lineno=156, col_offset=12)], [], lineno=155, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=157, col_offset=8), 'announce', Load(), lineno=157, col_offset=8), [BinOp(Name('indent', Load(), lineno=157, col_offset=22), Add(), Name('header', Load(), lineno=157, col_offset=31), lineno=157, col_offset=22)], [keyword('level', Attribute(Name('log', Load(), lineno=157, col_offset=45), 'INFO', Load(), lineno=157, col_offset=45))], None, None, lineno=157, col_offset=8), lineno=157, col_offset=8), Assign([Name('indent', Store(), lineno=158, col_offset=8)], BinOp(Name('indent', Load(), lineno=158, col_offset=17), Add(), Str('  ', lineno=158, col_offset=26), lineno=158, col_offset=17), lineno=158, col_offset=8), For(Tuple([Name('option', Store(), lineno=159, col_offset=13), Name('_', Store(), lineno=159, col_offset=21), Name('_', Store(), lineno=159, col_offset=24)], Store(), lineno=159, col_offset=13), Attribute(Name('self', Load(), lineno=159, col_offset=30), 'user_options', Load(), lineno=159, col_offset=30), [Assign([Name('option', Store(), lineno=160, col_offset=12)], Call(Attribute(Name('option', Load(), lineno=160, col_offset=21), 'translate', Load(), lineno=160, col_offset=21), [Name('longopt_xlate', Load(), lineno=160, col_offset=38)], [], None, None, lineno=160, col_offset=21), lineno=160, col_offset=12), If(Compare(Subscript(Name('option', Load(), lineno=161, col_offset=15), Index(Num(-1, lineno=161, col_offset=23)), Load(), lineno=161, col_offset=15), [Eq()], [Str('=', lineno=161, col_offset=29)], lineno=161, col_offset=15), [Assign([Name('option', Store(), lineno=162, col_offset=16)], Subscript(Name('option', Load(), lineno=162, col_offset=25), Slice(None, Num(-1, lineno=162, col_offset=34), None), Load(), lineno=162, col_offset=25), lineno=162, col_offset=16)], [], lineno=161, col_offset=12), Assign([Name('value', Store(), lineno=163, col_offset=12)], Call(Name('getattr', Load(), lineno=163, col_offset=20), [Name('self', Load(), lineno=163, col_offset=28), Name('option', Load(), lineno=163, col_offset=34)], [], None, None, lineno=163, col_offset=20), lineno=163, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=164, col_offset=12), 'announce', Load(), lineno=164, col_offset=12), [BinOp(Name('indent', Load(), lineno=164, col_offset=26), Add(), BinOp(Str('%s = %s', lineno=164, col_offset=35), Mod(), Tuple([Name('option', Load(), lineno=164, col_offset=48), Name('value', Load(), lineno=164, col_offset=56)], Load(), lineno=164, col_offset=48), lineno=164, col_offset=35), lineno=164, col_offset=26)], [keyword('level', Attribute(Name('log', Load(), lineno=165, col_offset=32), 'INFO', Load(), lineno=165, col_offset=32))], None, None, lineno=164, col_offset=12), lineno=164, col_offset=12)], [], lineno=159, col_offset=8)], [], lineno=153, col_offset=4), FunctionDef('run', arguments([Name('self', Param(), lineno=167, col_offset=12)], None, None, []), [Expr(Str("A command's raison d'etre: carry out the action it exists to\n        perform, controlled by the options initialized in\n        'initialize_options()', customized by other commands, the setup\n        script, the command-line, and config files, and finalized in\n        'finalize_options()'.  All terminal output and filesystem\n        interaction should be done by 'run()'.\n\n        This method must be implemented by all command classes.\n        ", lineno=176, col_offset=-1), lineno=176, col_offset=-1), Raise(Name('RuntimeError', Load(), lineno=177, col_offset=14), BinOp(Str('abstract method -- subclass %s must override', lineno=178, col_offset=14), Mod(), Attribute(Name('self', Load(), lineno=178, col_offset=63), '__class__', Load(), lineno=178, col_offset=63), lineno=178, col_offset=14), None, lineno=177, col_offset=8)], [], lineno=167, col_offset=4), FunctionDef('announce', arguments([Name('self', Param(), lineno=180, col_offset=17), Name('msg', Param(), lineno=180, col_offset=23), Name('level', Param(), lineno=180, col_offset=28)], None, None, [Num(1, lineno=180, col_offset=34)]), [Expr(Str("If the current verbosity level is of greater than or equal to\n        'level' print 'msg' to stdout.\n        ", lineno=183, col_offset=-1), lineno=183, col_offset=-1), Expr(Call(Attribute(Name('log', Load(), lineno=184, col_offset=8), 'log', Load(), lineno=184, col_offset=8), [Name('level', Load(), lineno=184, col_offset=16), Name('msg', Load(), lineno=184, col_offset=23)], [], None, None, lineno=184, col_offset=8), lineno=184, col_offset=8)], [], lineno=180, col_offset=4), FunctionDef('debug_print', arguments([Name('self', Param(), lineno=186, col_offset=20), Name('msg', Param(), lineno=186, col_offset=26)], None, None, []), [Expr(Str("Print 'msg' to stdout if the global DEBUG (taken from the\n        DISTUTILS_DEBUG environment variable) flag is true.\n        ", lineno=189, col_offset=-1), lineno=189, col_offset=-1), ImportFrom('distutils.debug', [alias('DEBUG', None)], 0, lineno=190, col_offset=8), If(Name('DEBUG', Load(), lineno=191, col_offset=11), [Print(None, [Name('msg', Load(), lineno=192, col_offset=18)], True, lineno=192, col_offset=12), Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=193, col_offset=12), 'stdout', Load(), lineno=193, col_offset=12), 'flush', Load(), lineno=193, col_offset=12), [], [], None, None, lineno=193, col_offset=12), lineno=193, col_offset=12)], [], lineno=191, col_offset=8)], [], lineno=186, col_offset=4), FunctionDef('_ensure_stringlike', arguments([Name('self', Param(), lineno=209, col_offset=27), Name('option', Param(), lineno=209, col_offset=33), Name('what', Param(), lineno=209, col_offset=41), Name('default', Param(), lineno=209, col_offset=47)], None, None, [Name('None', Load(), lineno=209, col_offset=55)]), [Assign([Name('val', Store(), lineno=210, col_offset=8)], Call(Name('getattr', Load(), lineno=210, col_offset=14), [Name('self', Load(), lineno=210, col_offset=22), Name('option', Load(), lineno=210, col_offset=28)], [], None, None, lineno=210, col_offset=14), lineno=210, col_offset=8), If(Compare(Name('val', Load(), lineno=211, col_offset=11), [Is()], [Name('None', Load(), lineno=211, col_offset=18)], lineno=211, col_offset=11), [Expr(Call(Name('setattr', Load(), lineno=212, col_offset=12), [Name('self', Load(), lineno=212, col_offset=20), Name('option', Load(), lineno=212, col_offset=26), Name('default', Load(), lineno=212, col_offset=34)], [], None, None, lineno=212, col_offset=12), lineno=212, col_offset=12), Return(Name('default', Load(), lineno=213, col_offset=19), lineno=213, col_offset=12)], [If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=214, col_offset=17), [Name('val', Load(), lineno=214, col_offset=28), Name('str', Load(), lineno=214, col_offset=33)], [], None, None, lineno=214, col_offset=17), lineno=214, col_offset=13), [Raise(Name('DistutilsOptionError', Load(), lineno=215, col_offset=18), BinOp(Str("'%s' must be a %s (got `%s`)", lineno=216, col_offset=18), Mod(), Tuple([Name('option', Load(), lineno=216, col_offset=52), Name('what', Load(), lineno=216, col_offset=60), Name('val', Load(), lineno=216, col_offset=66)], Load(), lineno=216, col_offset=52), lineno=216, col_offset=18), None, lineno=215, col_offset=12)], [], lineno=214, col_offset=13)], lineno=211, col_offset=8), Return(Name('val', Load(), lineno=217, col_offset=15), lineno=217, col_offset=8)], [], lineno=209, col_offset=4), FunctionDef('ensure_string', arguments([Name('self', Param(), lineno=219, col_offset=22), Name('option', Param(), lineno=219, col_offset=28), Name('default', Param(), lineno=219, col_offset=36)], None, None, [Name('None', Load(), lineno=219, col_offset=44)]), [Expr(Str("Ensure that 'option' is a string; if not defined, set it to\n        'default'.\n        ", lineno=222, col_offset=-1), lineno=222, col_offset=-1), Expr(Call(Attribute(Name('self', Load(), lineno=223, col_offset=8), '_ensure_stringlike', Load(), lineno=223, col_offset=8), [Name('option', Load(), lineno=223, col_offset=32), Str('string', lineno=223, col_offset=40), Name('default', Load(), lineno=223, col_offset=50)], [], None, None, lineno=223, col_offset=8), lineno=223, col_offset=8)], [], lineno=219, col_offset=4), FunctionDef('ensure_string_list', arguments([Name('self', Param(), lineno=225, col_offset=27), Name('option', Param(), lineno=225, col_offset=33)], None, None, []), [Expr(Str('Ensure that \'option\' is a list of strings.  If \'option\' is\n        currently a string, we split it either on /,\\s*/ or /\\s+/, so\n        "foo bar baz", "foo,bar,baz", and "foo,   bar baz" all become\n        ["foo", "bar", "baz"].\n        ', lineno=230, col_offset=-1), lineno=230, col_offset=-1), Assign([Name('val', Store(), lineno=231, col_offset=8)], Call(Name('getattr', Load(), lineno=231, col_offset=14), [Name('self', Load(), lineno=231, col_offset=22), Name('option', Load(), lineno=231, col_offset=28)], [], None, None, lineno=231, col_offset=14), lineno=231, col_offset=8), If(Compare(Name('val', Load(), lineno=232, col_offset=11), [Is()], [Name('None', Load(), lineno=232, col_offset=18)], lineno=232, col_offset=11), [Return(None, lineno=233, col_offset=12)], [If(Call(Name('isinstance', Load(), lineno=234, col_offset=13), [Name('val', Load(), lineno=234, col_offset=24), Name('str', Load(), lineno=234, col_offset=29)], [], None, None, lineno=234, col_offset=13), [Expr(Call(Name('setattr', Load(), lineno=235, col_offset=12), [Name('self', Load(), lineno=235, col_offset=20), Name('option', Load(), lineno=235, col_offset=26), Call(Attribute(Name('re', Load(), lineno=235, col_offset=34), 'split', Load(), lineno=235, col_offset=34), [Str(',\\s*|\\s+', lineno=235, col_offset=43), Name('val', Load(), lineno=235, col_offset=56)], [], None, None, lineno=235, col_offset=34)], [], None, None, lineno=235, col_offset=12), lineno=235, col_offset=12)], [If(Call(Name('isinstance', Load(), lineno=237, col_offset=15), [Name('val', Load(), lineno=237, col_offset=26), Name('list', Load(), lineno=237, col_offset=31)], [], None, None, lineno=237, col_offset=15), [Assign([Name('ok', Store(), lineno=239, col_offset=16)], Num(1, lineno=239, col_offset=21), lineno=239, col_offset=16), For(Name('element', Store(), lineno=240, col_offset=20), Name('val', Load(), lineno=240, col_offset=31), [If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=241, col_offset=27), [Name('element', Load(), lineno=241, col_offset=38), Name('str', Load(), lineno=241, col_offset=47)], [], None, None, lineno=241, col_offset=27), lineno=241, col_offset=23), [Assign([Name('ok', Store(), lineno=242, col_offset=24)], Num(0, lineno=242, col_offset=29), lineno=242, col_offset=24), Break( lineno=243, col_offset=24)], [], lineno=241, col_offset=20)], [], lineno=240, col_offset=16)], [Assign([Name('ok', Store(), lineno=245, col_offset=16)], Num(0, lineno=245, col_offset=21), lineno=245, col_offset=16)], lineno=237, col_offset=12), If(UnaryOp(Not(), Name('ok', Load(), lineno=247, col_offset=19), lineno=247, col_offset=15), [Raise(Name('DistutilsOptionError', Load(), lineno=248, col_offset=22), BinOp(Str("'%s' must be a list of strings (got %r)", lineno=249, col_offset=20), Mod(), Tuple([Name('option', Load(), lineno=250, col_offset=25), Name('val', Load(), lineno=250, col_offset=33)], Load(), lineno=250, col_offset=25), lineno=249, col_offset=20), None, lineno=248, col_offset=16)], [], lineno=247, col_offset=12)], lineno=234, col_offset=13)], lineno=232, col_offset=8)], [], lineno=225, col_offset=4), FunctionDef('_ensure_tested_string', arguments([Name('self', Param(), lineno=253, col_offset=30), Name('option', Param(), lineno=253, col_offset=36), Name('tester', Param(), lineno=253, col_offset=44), Name('what', Param(), lineno=254, col_offset=30), Name('error_fmt', Param(), lineno=254, col_offset=36), Name('default', Param(), lineno=254, col_offset=47)], None, None, [Name('None', Load(), lineno=254, col_offset=55)]), [Assign([Name('val', Store(), lineno=255, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=255, col_offset=14), '_ensure_stringlike', Load(), lineno=255, col_offset=14), [Name('option', Load(), lineno=255, col_offset=38), Name('what', Load(), lineno=255, col_offset=46), Name('default', Load(), lineno=255, col_offset=52)], [], None, None, lineno=255, col_offset=14), lineno=255, col_offset=8), If(BoolOp(And(), [Compare(Name('val', Load(), lineno=256, col_offset=11), [IsNot()], [Name('None', Load(), lineno=256, col_offset=22)], lineno=256, col_offset=11), UnaryOp(Not(), Call(Name('tester', Load(), lineno=256, col_offset=35), [Name('val', Load(), lineno=256, col_offset=42)], [], None, None, lineno=256, col_offset=35), lineno=256, col_offset=31)], lineno=256, col_offset=11), [Raise(Name('DistutilsOptionError', Load(), lineno=257, col_offset=18), BinOp(BinOp(Str("error in '%s' option: ", lineno=258, col_offset=19), Add(), Name('error_fmt', Load(), lineno=258, col_offset=46), lineno=258, col_offset=19), Mod(), Tuple([Name('option', Load(), lineno=258, col_offset=60), Name('val', Load(), lineno=258, col_offset=68)], Load(), lineno=258, col_offset=60), lineno=258, col_offset=18), None, lineno=257, col_offset=12)], [], lineno=256, col_offset=8)], [], lineno=253, col_offset=4), FunctionDef('ensure_filename', arguments([Name('self', Param(), lineno=260, col_offset=24), Name('option', Param(), lineno=260, col_offset=30)], None, None, []), [Expr(Str("Ensure that 'option' is the name of an existing file.", lineno=261, col_offset=8), lineno=261, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=262, col_offset=8), '_ensure_tested_string', Load(), lineno=262, col_offset=8), [Name('option', Load(), lineno=262, col_offset=35), Attribute(Attribute(Name('os', Load(), lineno=262, col_offset=43), 'path', Load(), lineno=262, col_offset=43), 'isfile', Load(), lineno=262, col_offset=43), Str('filename', lineno=263, col_offset=35), Str("'%s' does not exist or is not a file", lineno=264, col_offset=35)], [], None, None, lineno=262, col_offset=8), lineno=262, col_offset=8)], [], lineno=260, col_offset=4), FunctionDef('ensure_dirname', arguments([Name('self', Param(), lineno=266, col_offset=23), Name('option', Param(), lineno=266, col_offset=29)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=267, col_offset=8), '_ensure_tested_string', Load(), lineno=267, col_offset=8), [Name('option', Load(), lineno=267, col_offset=35), Attribute(Attribute(Name('os', Load(), lineno=267, col_offset=43), 'path', Load(), lineno=267, col_offset=43), 'isdir', Load(), lineno=267, col_offset=43), Str('directory name', lineno=268, col_offset=35), Str("'%s' does not exist or is not a directory", lineno=269, col_offset=35)], [], None, None, lineno=267, col_offset=8), lineno=267, col_offset=8)], [], lineno=266, col_offset=4), FunctionDef('get_command_name', arguments([Name('self', Param(), lineno=274, col_offset=25)], None, None, []), [If(Call(Name('hasattr', Load(), lineno=275, col_offset=11), [Name('self', Load(), lineno=275, col_offset=19), Str('command_name', lineno=275, col_offset=25)], [], None, None, lineno=275, col_offset=11), [Return(Attribute(Name('self', Load(), lineno=276, col_offset=19), 'command_name', Load(), lineno=276, col_offset=19), lineno=276, col_offset=12)], [Return(Attribute(Attribute(Name('self', Load(), lineno=278, col_offset=19), '__class__', Load(), lineno=278, col_offset=19), '__name__', Load(), lineno=278, col_offset=19), lineno=278, col_offset=12)], lineno=275, col_offset=8)], [], lineno=274, col_offset=4), FunctionDef('set_undefined_options', arguments([Name('self', Param(), lineno=280, col_offset=30), Name('src_cmd', Param(), lineno=280, col_offset=36)], 'option_pairs', None, []), [Expr(Str('Set the values of any "undefined" options from corresponding\n        option values in some other command object.  "Undefined" here means\n        "is None", which is the convention used to indicate that an option\n        has not been changed between \'initialize_options()\' and\n        \'finalize_options()\'.  Usually called from \'finalize_options()\' for\n        options that depend on some other command rather than another\n        option of the same command.  \'src_cmd\' is the other command from\n        which option values will be taken (a command object will be created\n        for it if necessary); the remaining arguments are\n        \'(src_option,dst_option)\' tuples which mean "take the value of\n        \'src_option\' in the \'src_cmd\' command object, and copy it to\n        \'dst_option\' in the current command object".\n        ', lineno=293, col_offset=-1), lineno=293, col_offset=-1), Assign([Name('src_cmd_obj', Store(), lineno=297, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=297, col_offset=22), 'distribution', Load(), lineno=297, col_offset=22), 'get_command_obj', Load(), lineno=297, col_offset=22), [Name('src_cmd', Load(), lineno=297, col_offset=56)], [], None, None, lineno=297, col_offset=22), lineno=297, col_offset=8), Expr(Call(Attribute(Name('src_cmd_obj', Load(), lineno=298, col_offset=8), 'ensure_finalized', Load(), lineno=298, col_offset=8), [], [], None, None, lineno=298, col_offset=8), lineno=298, col_offset=8), For(Tuple([Name('src_option', Store(), lineno=299, col_offset=13), Name('dst_option', Store(), lineno=299, col_offset=25)], Store(), lineno=299, col_offset=13), Name('option_pairs', Load(), lineno=299, col_offset=40), [If(Compare(Call(Name('getattr', Load(), lineno=300, col_offset=15), [Name('self', Load(), lineno=300, col_offset=23), Name('dst_option', Load(), lineno=300, col_offset=29)], [], None, None, lineno=300, col_offset=15), [Is()], [Name('None', Load(), lineno=300, col_offset=44)], lineno=300, col_offset=15), [Expr(Call(Name('setattr', Load(), lineno=301, col_offset=16), [Name('self', Load(), lineno=301, col_offset=24), Name('dst_option', Load(), lineno=301, col_offset=30), Call(Name('getattr', Load(), lineno=302, col_offset=24), [Name('src_cmd_obj', Load(), lineno=302, col_offset=32), Name('src_option', Load(), lineno=302, col_offset=45)], [], None, None, lineno=302, col_offset=24)], [], None, None, lineno=301, col_offset=16), lineno=301, col_offset=16)], [], lineno=300, col_offset=12)], [], lineno=299, col_offset=8)], [], lineno=280, col_offset=4), FunctionDef('get_finalized_command', arguments([Name('self', Param(), lineno=305, col_offset=30), Name('command', Param(), lineno=305, col_offset=36), Name('create', Param(), lineno=305, col_offset=45)], None, None, [Num(1, lineno=305, col_offset=52)]), [Expr(Str("Wrapper around Distribution's 'get_command_obj()' method: find\n        (create if necessary and 'create' is true) the command object for\n        'command', call its 'ensure_finalized()' method, and return the\n        finalized command object.\n        ", lineno=310, col_offset=-1), lineno=310, col_offset=-1), Assign([Name('cmd_obj', Store(), lineno=311, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=311, col_offset=18), 'distribution', Load(), lineno=311, col_offset=18), 'get_command_obj', Load(), lineno=311, col_offset=18), [Name('command', Load(), lineno=311, col_offset=52), Name('create', Load(), lineno=311, col_offset=61)], [], None, None, lineno=311, col_offset=18), lineno=311, col_offset=8), Expr(Call(Attribute(Name('cmd_obj', Load(), lineno=312, col_offset=8), 'ensure_finalized', Load(), lineno=312, col_offset=8), [], [], None, None, lineno=312, col_offset=8), lineno=312, col_offset=8), Return(Name('cmd_obj', Load(), lineno=313, col_offset=15), lineno=313, col_offset=8)], [], lineno=305, col_offset=4), FunctionDef('reinitialize_command', arguments([Name('self', Param(), lineno=317, col_offset=29), Name('command', Param(), lineno=317, col_offset=35), Name('reinit_subcommands', Param(), lineno=317, col_offset=44)], None, None, [Num(0, lineno=317, col_offset=63)]), [Return(Call(Attribute(Attribute(Name('self', Load(), lineno=318, col_offset=15), 'distribution', Load(), lineno=318, col_offset=15), 'reinitialize_command', Load(), lineno=318, col_offset=15), [Name('command', Load(), lineno=319, col_offset=12), Name('reinit_subcommands', Load(), lineno=319, col_offset=21)], [], None, None, lineno=318, col_offset=15), lineno=318, col_offset=8)], [], lineno=317, col_offset=4), FunctionDef('run_command', arguments([Name('self', Param(), lineno=321, col_offset=20), Name('command', Param(), lineno=321, col_offset=26)], None, None, []), [Expr(Str("Run some other command: uses the 'run_command()' method of\n        Distribution, which creates and finalizes the command object if\n        necessary and then invokes its 'run()' method.\n        ", lineno=325, col_offset=-1), lineno=325, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=326, col_offset=8), 'distribution', Load(), lineno=326, col_offset=8), 'run_command', Load(), lineno=326, col_offset=8), [Name('command', Load(), lineno=326, col_offset=38)], [], None, None, lineno=326, col_offset=8), lineno=326, col_offset=8)], [], lineno=321, col_offset=4), FunctionDef('get_sub_commands', arguments([Name('self', Param(), lineno=328, col_offset=25)], None, None, []), [Expr(Str("Determine the sub-commands that are relevant in the current\n        distribution (ie., that need to be run).  This is based on the\n        'sub_commands' class attribute: each tuple in that list may include\n        a method that we call to determine if the subcommand needs to be\n        run for the current distribution.  Return a list of command names.\n        ", lineno=334, col_offset=-1), lineno=334, col_offset=-1), Assign([Name('commands', Store(), lineno=335, col_offset=8)], List([], Load(), lineno=335, col_offset=19), lineno=335, col_offset=8), For(Tuple([Name('cmd_name', Store(), lineno=336, col_offset=13), Name('method', Store(), lineno=336, col_offset=23)], Store(), lineno=336, col_offset=13), Attribute(Name('self', Load(), lineno=336, col_offset=34), 'sub_commands', Load(), lineno=336, col_offset=34), [If(BoolOp(Or(), [Compare(Name('method', Load(), lineno=337, col_offset=15), [Is()], [Name('None', Load(), lineno=337, col_offset=25)], lineno=337, col_offset=15), Call(Name('method', Load(), lineno=337, col_offset=33), [Name('self', Load(), lineno=337, col_offset=40)], [], None, None, lineno=337, col_offset=33)], lineno=337, col_offset=15), [Expr(Call(Attribute(Name('commands', Load(), lineno=338, col_offset=16), 'append', Load(), lineno=338, col_offset=16), [Name('cmd_name', Load(), lineno=338, col_offset=32)], [], None, None, lineno=338, col_offset=16), lineno=338, col_offset=16)], [], lineno=337, col_offset=12)], [], lineno=336, col_offset=8), Return(Name('commands', Load(), lineno=339, col_offset=15), lineno=339, col_offset=8)], [], lineno=328, col_offset=4), FunctionDef('warn', arguments([Name('self', Param(), lineno=344, col_offset=13), Name('msg', Param(), lineno=344, col_offset=19)], None, None, []), [Expr(Call(Attribute(Name('log', Load(), lineno=345, col_offset=8), 'warn', Load(), lineno=345, col_offset=8), [BinOp(Str('warning: %s: %s\n', lineno=345, col_offset=17), Mod(), Tuple([Call(Attribute(Name('self', Load(), lineno=346, col_offset=17), 'get_command_name', Load(), lineno=346, col_offset=17), [], [], None, None, lineno=346, col_offset=17), Name('msg', Load(), lineno=346, col_offset=42)], Load(), lineno=346, col_offset=17), lineno=345, col_offset=17)], [], None, None, lineno=345, col_offset=8), lineno=345, col_offset=8)], [], lineno=344, col_offset=4), FunctionDef('execute', arguments([Name('self', Param(), lineno=348, col_offset=16), Name('func', Param(), lineno=348, col_offset=22), Name('args', Param(), lineno=348, col_offset=28), Name('msg', Param(), lineno=348, col_offset=34), Name('level', Param(), lineno=348, col_offset=44)], None, None, [Name('None', Load(), lineno=348, col_offset=38), Num(1, lineno=348, col_offset=50)]), [Expr(Call(Attribute(Name('util', Load(), lineno=349, col_offset=8), 'execute', Load(), lineno=349, col_offset=8), [Name('func', Load(), lineno=349, col_offset=21), Name('args', Load(), lineno=349, col_offset=27), Name('msg', Load(), lineno=349, col_offset=33)], [keyword('dry_run', Attribute(Name('self', Load(), lineno=349, col_offset=46), 'dry_run', Load(), lineno=349, col_offset=46))], None, None, lineno=349, col_offset=8), lineno=349, col_offset=8)], [], lineno=348, col_offset=4), FunctionDef('mkpath', arguments([Name('self', Param(), lineno=351, col_offset=15), Name('name', Param(), lineno=351, col_offset=21), Name('mode', Param(), lineno=351, col_offset=27)], None, None, [Num(511, lineno=351, col_offset=32)]), [Expr(Call(Attribute(Name('dir_util', Load(), lineno=352, col_offset=8), 'mkpath', Load(), lineno=352, col_offset=8), [Name('name', Load(), lineno=352, col_offset=24), Name('mode', Load(), lineno=352, col_offset=30)], [keyword('dry_run', Attribute(Name('self', Load(), lineno=352, col_offset=44), 'dry_run', Load(), lineno=352, col_offset=44))], None, None, lineno=352, col_offset=8), lineno=352, col_offset=8)], [], lineno=351, col_offset=4), FunctionDef('copy_file', arguments([Name('self', Param(), lineno=354, col_offset=18), Name('infile', Param(), lineno=354, col_offset=24), Name('outfile', Param(), lineno=354, col_offset=32), Name('preserve_mode', Param(), lineno=355, col_offset=19), Name('preserve_times', Param(), lineno=355, col_offset=36), Name('link', Param(), lineno=355, col_offset=54), Name('level', Param(), lineno=355, col_offset=65)], None, None, [Num(1, lineno=355, col_offset=33), Num(1, lineno=355, col_offset=51), Name('None', Load(), lineno=355, col_offset=59), Num(1, lineno=355, col_offset=71)]), [Expr(Str("Copy a file respecting verbose, dry-run and force flags.  (The\n        former two default to whatever is in the Distribution object, and\n        the latter defaults to false for commands that don't define it.)", lineno=358, col_offset=-1), lineno=358, col_offset=-1), Return(Call(Attribute(Name('file_util', Load(), lineno=360, col_offset=15), 'copy_file', Load(), lineno=360, col_offset=15), [Name('infile', Load(), lineno=361, col_offset=12), Name('outfile', Load(), lineno=361, col_offset=20), Name('preserve_mode', Load(), lineno=362, col_offset=12), Name('preserve_times', Load(), lineno=362, col_offset=27), UnaryOp(Not(), Attribute(Name('self', Load(), lineno=363, col_offset=16), 'force', Load(), lineno=363, col_offset=16), lineno=363, col_offset=12), Name('link', Load(), lineno=364, col_offset=12)], [keyword('dry_run', Attribute(Name('self', Load(), lineno=365, col_offset=20), 'dry_run', Load(), lineno=365, col_offset=20))], None, None, lineno=360, col_offset=15), lineno=360, col_offset=8)], [], lineno=354, col_offset=4), FunctionDef('copy_tree', arguments([Name('self', Param(), lineno=367, col_offset=18), Name('infile', Param(), lineno=367, col_offset=24), Name('outfile', Param(), lineno=367, col_offset=32), Name('preserve_mode', Param(), lineno=368, col_offset=19), Name('preserve_times', Param(), lineno=368, col_offset=36), Name('preserve_symlinks', Param(), lineno=368, col_offset=54), Name('level', Param(), lineno=369, col_offset=19)], None, None, [Num(1, lineno=368, col_offset=33), Num(1, lineno=368, col_offset=51), Num(0, lineno=368, col_offset=72), Num(1, lineno=369, col_offset=25)]), [Expr(Str('Copy an entire directory tree respecting verbose, dry-run,\n        and force flags.\n        ', lineno=372, col_offset=-1), lineno=372, col_offset=-1), Return(Call(Attribute(Name('dir_util', Load(), lineno=373, col_offset=15), 'copy_tree', Load(), lineno=373, col_offset=15), [Name('infile', Load(), lineno=374, col_offset=12), Name('outfile', Load(), lineno=374, col_offset=20), Name('preserve_mode', Load(), lineno=375, col_offset=12), Name('preserve_times', Load(), lineno=375, col_offset=26), Name('preserve_symlinks', Load(), lineno=375, col_offset=41), UnaryOp(Not(), Attribute(Name('self', Load(), lineno=376, col_offset=16), 'force', Load(), lineno=376, col_offset=16), lineno=376, col_offset=12)], [keyword('dry_run', Attribute(Name('self', Load(), lineno=377, col_offset=20), 'dry_run', Load(), lineno=377, col_offset=20))], None, None, lineno=373, col_offset=15), lineno=373, col_offset=8)], [], lineno=367, col_offset=4), FunctionDef('move_file', arguments([Name('self', Param(), lineno=379, col_offset=19), Name('src', Param(), lineno=379, col_offset=25), Name('dst', Param(), lineno=379, col_offset=30), Name('level', Param(), lineno=379, col_offset=35)], None, None, [Num(1, lineno=379, col_offset=41)]), [Expr(Str('Move a file respectin dry-run flag.', lineno=380, col_offset=8), lineno=380, col_offset=8), Return(Call(Attribute(Name('file_util', Load(), lineno=381, col_offset=15), 'move_file', Load(), lineno=381, col_offset=15), [Name('src', Load(), lineno=381, col_offset=35), Name('dst', Load(), lineno=381, col_offset=40)], [keyword('dry_run', Attribute(Name('self', Load(), lineno=381, col_offset=55), 'dry_run', Load(), lineno=381, col_offset=55))], None, None, lineno=381, col_offset=15), lineno=381, col_offset=8)], [], lineno=379, col_offset=4), FunctionDef('spawn', arguments([Name('self', Param(), lineno=383, col_offset=15), Name('cmd', Param(), lineno=383, col_offset=21), Name('search_path', Param(), lineno=383, col_offset=26), Name('level', Param(), lineno=383, col_offset=41)], None, None, [Num(1, lineno=383, col_offset=38), Num(1, lineno=383, col_offset=47)]), [Expr(Str('Spawn an external command respecting dry-run flag.', lineno=384, col_offset=8), lineno=384, col_offset=8), ImportFrom('distutils.spawn', [alias('spawn', None)], 0, lineno=385, col_offset=8), Expr(Call(Name('spawn', Load(), lineno=386, col_offset=8), [Name('cmd', Load(), lineno=386, col_offset=14), Name('search_path', Load(), lineno=386, col_offset=19)], [keyword('dry_run', Attribute(Name('self', Load(), lineno=386, col_offset=41), 'dry_run', Load(), lineno=386, col_offset=41))], None, None, lineno=386, col_offset=8), lineno=386, col_offset=8)], [], lineno=383, col_offset=4), FunctionDef('make_archive', arguments([Name('self', Param(), lineno=388, col_offset=21), Name('base_name', Param(), lineno=388, col_offset=27), Name('format', Param(), lineno=388, col_offset=38), Name('root_dir', Param(), lineno=388, col_offset=46), Name('base_dir', Param(), lineno=388, col_offset=61), Name('owner', Param(), lineno=389, col_offset=21), Name('group', Param(), lineno=389, col_offset=33)], None, None, [Name('None', Load(), lineno=388, col_offset=55), Name('None', Load(), lineno=388, col_offset=70), Name('None', Load(), lineno=389, col_offset=27), Name('None', Load(), lineno=389, col_offset=39)]), [Return(Call(Attribute(Name('archive_util', Load(), lineno=390, col_offset=15), 'make_archive', Load(), lineno=390, col_offset=15), [Name('base_name', Load(), lineno=390, col_offset=41), Name('format', Load(), lineno=390, col_offset=52), Name('root_dir', Load(), lineno=390, col_offset=60), Name('base_dir', Load(), lineno=391, col_offset=41)], [keyword('dry_run', Attribute(Name('self', Load(), lineno=391, col_offset=59), 'dry_run', Load(), lineno=391, col_offset=59)), keyword('owner', Name('owner', Load(), lineno=392, col_offset=47)), keyword('group', Name('group', Load(), lineno=392, col_offset=60))], None, None, lineno=390, col_offset=15), lineno=390, col_offset=8)], [], lineno=388, col_offset=4), FunctionDef('make_file', arguments([Name('self', Param(), lineno=394, col_offset=18), Name('infiles', Param(), lineno=394, col_offset=24), Name('outfile', Param(), lineno=394, col_offset=33), Name('func', Param(), lineno=394, col_offset=42), Name('args', Param(), lineno=394, col_offset=48), Name('exec_msg', Param(), lineno=395, col_offset=18), Name('skip_msg', Param(), lineno=395, col_offset=33), Name('level', Param(), lineno=395, col_offset=48)], None, None, [Name('None', Load(), lineno=395, col_offset=27), Name('None', Load(), lineno=395, col_offset=42), Num(1, lineno=395, col_offset=54)]), [Expr(Str("Special case of 'execute()' for operations that process one or\n        more input files and generate one output file.  Works just like\n        'execute()', except the operation is skipped and a different\n        message printed if 'outfile' already exists and is newer than all\n        files listed in 'infiles'.  If the command defined 'self.force',\n        and it is true, then the command is unconditionally run -- does no\n        timestamp checks.\n        ", lineno=403, col_offset=-1), lineno=403, col_offset=-1), If(Compare(Name('skip_msg', Load(), lineno=404, col_offset=11), [Is()], [Name('None', Load(), lineno=404, col_offset=23)], lineno=404, col_offset=11), [Assign([Name('skip_msg', Store(), lineno=405, col_offset=12)], BinOp(Str('skipping %s (inputs unchanged)', lineno=405, col_offset=23), Mod(), Name('outfile', Load(), lineno=405, col_offset=58), lineno=405, col_offset=23), lineno=405, col_offset=12)], [], lineno=404, col_offset=8), If(Call(Name('isinstance', Load(), lineno=408, col_offset=11), [Name('infiles', Load(), lineno=408, col_offset=22), Name('str', Load(), lineno=408, col_offset=31)], [], None, None, lineno=408, col_offset=11), [Assign([Name('infiles', Store(), lineno=409, col_offset=12)], Tuple([Name('infiles', Load(), lineno=409, col_offset=23)], Load(), lineno=409, col_offset=23), lineno=409, col_offset=12)], [If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=410, col_offset=17), [Name('infiles', Load(), lineno=410, col_offset=28), Tuple([Name('list', Load(), lineno=410, col_offset=38), Name('tuple', Load(), lineno=410, col_offset=44)], Load(), lineno=410, col_offset=38)], [], None, None, lineno=410, col_offset=17), lineno=410, col_offset=13), [Raise(Name('TypeError', Load(), lineno=411, col_offset=18), Str("'infiles' must be a string, or a list or tuple of strings", lineno=412, col_offset=18), None, lineno=411, col_offset=12)], [], lineno=410, col_offset=13)], lineno=408, col_offset=8), If(Compare(Name('exec_msg', Load(), lineno=414, col_offset=11), [Is()], [Name('None', Load(), lineno=414, col_offset=23)], lineno=414, col_offset=11), [Assign([Name('exec_msg', Store(), lineno=415, col_offset=12)], BinOp(Str('generating %s from %s', lineno=415, col_offset=23), Mod(), Tuple([Name('outfile', Load(), lineno=416, col_offset=24), Call(Attribute(Str(', ', lineno=416, col_offset=33), 'join', Load(), lineno=416, col_offset=33), [Name('infiles', Load(), lineno=416, col_offset=43)], [], None, None, lineno=416, col_offset=33)], Load(), lineno=416, col_offset=24), lineno=415, col_offset=23), lineno=415, col_offset=12)], [], lineno=414, col_offset=8), If(BoolOp(Or(), [Attribute(Name('self', Load(), lineno=421, col_offset=11), 'force', Load(), lineno=421, col_offset=11), Call(Attribute(Name('dep_util', Load(), lineno=421, col_offset=25), 'newer_group', Load(), lineno=421, col_offset=25), [Name('infiles', Load(), lineno=421, col_offset=46), Name('outfile', Load(), lineno=421, col_offset=55)], [], None, None, lineno=421, col_offset=25)], lineno=421, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=422, col_offset=12), 'execute', Load(), lineno=422, col_offset=12), [Name('func', Load(), lineno=422, col_offset=25), Name('args', Load(), lineno=422, col_offset=31), Name('exec_msg', Load(), lineno=422, col_offset=37), Name('level', Load(), lineno=422, col_offset=47)], [], None, None, lineno=422, col_offset=12), lineno=422, col_offset=12)], [Expr(Call(Attribute(Name('log', Load(), lineno=426, col_offset=12), 'debug', Load(), lineno=426, col_offset=12), [Name('skip_msg', Load(), lineno=426, col_offset=22)], [], None, None, lineno=426, col_offset=12), lineno=426, col_offset=12)], lineno=421, col_offset=8)], [], lineno=394, col_offset=4)], [], lineno=14, col_offset=0), ClassDef('install_misc', [Name('Command', Load(), lineno=433, col_offset=19)], [Expr(Str('Common base class for installing some files in a subdirectory.\n    Currently used by install_data and install_scripts.\n    ', lineno=436, col_offset=-1), lineno=436, col_offset=-1), Assign([Name('user_options', Store(), lineno=438, col_offset=4)], List([Tuple([Str('install-dir=', lineno=438, col_offset=21), Str('d', lineno=438, col_offset=37), Str('directory to install the files to', lineno=438, col_offset=42)], Load(), lineno=438, col_offset=21)], Load(), lineno=438, col_offset=19), lineno=438, col_offset=4), FunctionDef('initialize_options', arguments([Name('self', Param(), lineno=440, col_offset=28)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=441, col_offset=8), 'install_dir', Store(), lineno=441, col_offset=8)], Name('None', Load(), lineno=441, col_offset=27), lineno=441, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=442, col_offset=8), 'outfiles', Store(), lineno=442, col_offset=8)], List([], Load(), lineno=442, col_offset=24), lineno=442, col_offset=8)], [], lineno=440, col_offset=4), FunctionDef('_install_dir_from', arguments([Name('self', Param(), lineno=444, col_offset=26), Name('dirname', Param(), lineno=444, col_offset=32)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=445, col_offset=8), 'set_undefined_options', Load(), lineno=445, col_offset=8), [Str('install', lineno=445, col_offset=35), Tuple([Name('dirname', Load(), lineno=445, col_offset=47), Str('install_dir', lineno=445, col_offset=56)], Load(), lineno=445, col_offset=47)], [], None, None, lineno=445, col_offset=8), lineno=445, col_offset=8)], [], lineno=444, col_offset=4), FunctionDef('_copy_files', arguments([Name('self', Param(), lineno=447, col_offset=20), Name('filelist', Param(), lineno=447, col_offset=26)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=448, col_offset=8), 'outfiles', Store(), lineno=448, col_offset=8)], List([], Load(), lineno=448, col_offset=24), lineno=448, col_offset=8), If(UnaryOp(Not(), Name('filelist', Load(), lineno=449, col_offset=15), lineno=449, col_offset=11), [Return(None, lineno=450, col_offset=12)], [], lineno=449, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=451, col_offset=8), 'mkpath', Load(), lineno=451, col_offset=8), [Attribute(Name('self', Load(), lineno=451, col_offset=20), 'install_dir', Load(), lineno=451, col_offset=20)], [], None, None, lineno=451, col_offset=8), lineno=451, col_offset=8), For(Name('f', Store(), lineno=452, col_offset=12), Name('filelist', Load(), lineno=452, col_offset=17), [Expr(Call(Attribute(Name('self', Load(), lineno=453, col_offset=12), 'copy_file', Load(), lineno=453, col_offset=12), [Name('f', Load(), lineno=453, col_offset=27), Attribute(Name('self', Load(), lineno=453, col_offset=30), 'install_dir', Load(), lineno=453, col_offset=30)], [], None, None, lineno=453, col_offset=12), lineno=453, col_offset=12), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=454, col_offset=12), 'outfiles', Load(), lineno=454, col_offset=12), 'append', Load(), lineno=454, col_offset=12), [Call(Attribute(Attribute(Name('os', Load(), lineno=454, col_offset=33), 'path', Load(), lineno=454, col_offset=33), 'join', Load(), lineno=454, col_offset=33), [Attribute(Name('self', Load(), lineno=454, col_offset=46), 'install_dir', Load(), lineno=454, col_offset=46), Name('f', Load(), lineno=454, col_offset=64)], [], None, None, lineno=454, col_offset=33)], [], None, None, lineno=454, col_offset=12), lineno=454, col_offset=12)], [], lineno=452, col_offset=8)], [], lineno=447, col_offset=4), FunctionDef('get_outputs', arguments([Name('self', Param(), lineno=456, col_offset=20)], None, None, []), [Return(Attribute(Name('self', Load(), lineno=457, col_offset=15), 'outfiles', Load(), lineno=457, col_offset=15), lineno=457, col_offset=8)], [], lineno=456, col_offset=4)], [], lineno=433, col_offset=0)])
