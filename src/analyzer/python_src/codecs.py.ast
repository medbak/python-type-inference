Module([Expr(Str(' codecs -- Python Codec Registry, API and helpers.\n\n\nWritten by Marc-Andre Lemburg (mal@lemburg.com).\n\n(c) Copyright CNRI, All Rights Reserved. NO WARRANTY.\n\n', lineno=8, col_offset=-1), lineno=8, col_offset=-1), Import([alias('__builtin__', None), alias('sys', None)], lineno=10, col_offset=0), TryExcept([ImportFrom('_codecs', [alias('*', None)], 0, lineno=15, col_offset=4)], [ExceptHandler(Name('ImportError', Load(), lineno=16, col_offset=7), Name('why', Store(), lineno=16, col_offset=20), [Raise(Call(Name('SystemError', Load(), lineno=17, col_offset=10), [BinOp(Str('Failed to load the builtin codecs: %s', lineno=17, col_offset=22), Mod(), Name('why', Load(), lineno=17, col_offset=64), lineno=17, col_offset=22)], [], None, None, lineno=17, col_offset=10), None, None, lineno=17, col_offset=4)], lineno=16, col_offset=0)], [], lineno=14, col_offset=0), Assign([Name('__all__', Store(), lineno=19, col_offset=0)], List([Str('register', lineno=19, col_offset=11), Str('lookup', lineno=19, col_offset=23), Str('open', lineno=19, col_offset=33), Str('EncodedFile', lineno=19, col_offset=41), Str('BOM', lineno=19, col_offset=56), Str('BOM_BE', lineno=19, col_offset=63), Str('BOM_LE', lineno=20, col_offset=11), Str('BOM32_BE', lineno=20, col_offset=21), Str('BOM32_LE', lineno=20, col_offset=33), Str('BOM64_BE', lineno=20, col_offset=45), Str('BOM64_LE', lineno=20, col_offset=57), Str('BOM_UTF8', lineno=21, col_offset=11), Str('BOM_UTF16', lineno=21, col_offset=23), Str('BOM_UTF16_LE', lineno=21, col_offset=36), Str('BOM_UTF16_BE', lineno=21, col_offset=52), Str('BOM_UTF32', lineno=22, col_offset=11), Str('BOM_UTF32_LE', lineno=22, col_offset=24), Str('BOM_UTF32_BE', lineno=22, col_offset=40), Str('strict_errors', lineno=23, col_offset=11), Str('ignore_errors', lineno=23, col_offset=28), Str('replace_errors', lineno=23, col_offset=45), Str('xmlcharrefreplace_errors', lineno=24, col_offset=11), Str('register_error', lineno=25, col_offset=11), Str('lookup_error', lineno=25, col_offset=29)], Load(), lineno=19, col_offset=10), lineno=19, col_offset=0), Assign([Name('BOM_UTF8', Store(), lineno=36, col_offset=0)], Str('\xef\xbb\xbf', lineno=36, col_offset=11), lineno=36, col_offset=0), Assign([Name('BOM_LE', Store(), lineno=39, col_offset=0), Name('BOM_UTF16_LE', Store(), lineno=39, col_offset=9)], Str('\xff\xfe', lineno=39, col_offset=24), lineno=39, col_offset=0), Assign([Name('BOM_BE', Store(), lineno=42, col_offset=0), Name('BOM_UTF16_BE', Store(), lineno=42, col_offset=9)], Str('\xfe\xff', lineno=42, col_offset=24), lineno=42, col_offset=0), Assign([Name('BOM_UTF32_LE', Store(), lineno=45, col_offset=0)], Str('\xff\xfe\x00\x00', lineno=45, col_offset=15), lineno=45, col_offset=0), Assign([Name('BOM_UTF32_BE', Store(), lineno=48, col_offset=0)], Str('\x00\x00\xfe\xff', lineno=48, col_offset=15), lineno=48, col_offset=0), If(Compare(Attribute(Name('sys', Load(), lineno=50, col_offset=3), 'byteorder', Load(), lineno=50, col_offset=3), [Eq()], [Str('little', lineno=50, col_offset=20)], lineno=50, col_offset=3), [Assign([Name('BOM', Store(), lineno=53, col_offset=4), Name('BOM_UTF16', Store(), lineno=53, col_offset=10)], Name('BOM_UTF16_LE', Load(), lineno=53, col_offset=22), lineno=53, col_offset=4), Assign([Name('BOM_UTF32', Store(), lineno=56, col_offset=4)], Name('BOM_UTF32_LE', Load(), lineno=56, col_offset=16), lineno=56, col_offset=4)], [Assign([Name('BOM', Store(), lineno=61, col_offset=4), Name('BOM_UTF16', Store(), lineno=61, col_offset=10)], Name('BOM_UTF16_BE', Load(), lineno=61, col_offset=22), lineno=61, col_offset=4), Assign([Name('BOM_UTF32', Store(), lineno=64, col_offset=4)], Name('BOM_UTF32_BE', Load(), lineno=64, col_offset=16), lineno=64, col_offset=4)], lineno=50, col_offset=0), Assign([Name('BOM32_LE', Store(), lineno=67, col_offset=0)], Name('BOM_UTF16_LE', Load(), lineno=67, col_offset=11), lineno=67, col_offset=0), Assign([Name('BOM32_BE', Store(), lineno=68, col_offset=0)], Name('BOM_UTF16_BE', Load(), lineno=68, col_offset=11), lineno=68, col_offset=0), Assign([Name('BOM64_LE', Store(), lineno=69, col_offset=0)], Name('BOM_UTF32_LE', Load(), lineno=69, col_offset=11), lineno=69, col_offset=0), Assign([Name('BOM64_BE', Store(), lineno=70, col_offset=0)], Name('BOM_UTF32_BE', Load(), lineno=70, col_offset=11), lineno=70, col_offset=0), ClassDef('CodecInfo', [Name('tuple', Load(), lineno=75, col_offset=16)], [FunctionDef('__new__', arguments([Name('cls', Param(), lineno=77, col_offset=16), Name('encode', Param(), lineno=77, col_offset=21), Name('decode', Param(), lineno=77, col_offset=29), Name('streamreader', Param(), lineno=77, col_offset=37), Name('streamwriter', Param(), lineno=77, col_offset=56), Name('incrementalencoder', Param(), lineno=78, col_offset=8), Name('incrementaldecoder', Param(), lineno=78, col_offset=33), Name('name', Param(), lineno=78, col_offset=58)], None, None, [Name('None', Load(), lineno=77, col_offset=50), Name('None', Load(), lineno=77, col_offset=69), Name('None', Load(), lineno=78, col_offset=27), Name('None', Load(), lineno=78, col_offset=52), Name('None', Load(), lineno=78, col_offset=63)]), [Assign([Name('self', Store(), lineno=79, col_offset=8)], Call(Attribute(Name('tuple', Load(), lineno=79, col_offset=15), '__new__', Load(), lineno=79, col_offset=15), [Name('cls', Load(), lineno=79, col_offset=29), Tuple([Name('encode', Load(), lineno=79, col_offset=35), Name('decode', Load(), lineno=79, col_offset=43), Name('streamreader', Load(), lineno=79, col_offset=51), Name('streamwriter', Load(), lineno=79, col_offset=65)], Load(), lineno=79, col_offset=35)], [], None, None, lineno=79, col_offset=15), lineno=79, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=80, col_offset=8), 'name', Store(), lineno=80, col_offset=8)], Name('name', Load(), lineno=80, col_offset=20), lineno=80, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=81, col_offset=8), 'encode', Store(), lineno=81, col_offset=8)], Name('encode', Load(), lineno=81, col_offset=22), lineno=81, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=82, col_offset=8), 'decode', Store(), lineno=82, col_offset=8)], Name('decode', Load(), lineno=82, col_offset=22), lineno=82, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=83, col_offset=8), 'incrementalencoder', Store(), lineno=83, col_offset=8)], Name('incrementalencoder', Load(), lineno=83, col_offset=34), lineno=83, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=84, col_offset=8), 'incrementaldecoder', Store(), lineno=84, col_offset=8)], Name('incrementaldecoder', Load(), lineno=84, col_offset=34), lineno=84, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=85, col_offset=8), 'streamwriter', Store(), lineno=85, col_offset=8)], Name('streamwriter', Load(), lineno=85, col_offset=28), lineno=85, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=86, col_offset=8), 'streamreader', Store(), lineno=86, col_offset=8)], Name('streamreader', Load(), lineno=86, col_offset=28), lineno=86, col_offset=8), Return(Name('self', Load(), lineno=87, col_offset=15), lineno=87, col_offset=8)], [], lineno=77, col_offset=4), FunctionDef('__repr__', arguments([Name('self', Param(), lineno=89, col_offset=17)], None, None, []), [Return(BinOp(Str('<%s.%s object for encoding %s at 0x%x>', lineno=90, col_offset=15), Mod(), Tuple([Attribute(Attribute(Name('self', Load(), lineno=90, col_offset=59), '__class__', Load(), lineno=90, col_offset=59), '__module__', Load(), lineno=90, col_offset=59), Attribute(Attribute(Name('self', Load(), lineno=90, col_offset=86), '__class__', Load(), lineno=90, col_offset=86), '__name__', Load(), lineno=90, col_offset=86), Attribute(Name('self', Load(), lineno=90, col_offset=111), 'name', Load(), lineno=90, col_offset=111), Call(Name('id', Load(), lineno=90, col_offset=122), [Name('self', Load(), lineno=90, col_offset=125)], [], None, None, lineno=90, col_offset=122)], Load(), lineno=90, col_offset=59), lineno=90, col_offset=15), lineno=90, col_offset=8)], [], lineno=89, col_offset=4)], [], lineno=75, col_offset=0), ClassDef('Codec', [], [Expr(Str(" Defines the interface for stateless encoders/decoders.\n\n        The .encode()/.decode() methods may use different error\n        handling schemes by providing the errors argument. These\n        string values are predefined:\n\n         'strict' - raise a ValueError error (or a subclass)\n         'ignore' - ignore the character and continue with the next\n         'replace' - replace with a suitable replacement character;\n                    Python will use the official U+FFFD REPLACEMENT\n                    CHARACTER for the builtin Unicode codecs on\n                    decoding and '?' on encoding.\n         'xmlcharrefreplace' - Replace with the appropriate XML\n                               character reference (only for encoding).\n         'backslashreplace'  - Replace with backslashed escape sequences\n                               (only for encoding).\n\n        The set of allowed values can be extended via register_error.\n\n    ", lineno=113, col_offset=-1), lineno=113, col_offset=-1), FunctionDef('encode', arguments([Name('self', Param(), lineno=114, col_offset=15), Name('input', Param(), lineno=114, col_offset=21), Name('errors', Param(), lineno=114, col_offset=28)], None, None, [Str('strict', lineno=114, col_offset=35)]), [Expr(Str(" Encodes the object input and returns a tuple (output\n            object, length consumed).\n\n            errors defines the error handling to apply. It defaults to\n            'strict' handling.\n\n            The method may not store state in the Codec instance. Use\n            StreamCodec for codecs which have to keep state in order to\n            make encoding/decoding efficient.\n\n            The encoder must be able to handle zero length input and\n            return an empty object of the output object type in this\n            situation.\n\n        ", lineno=130, col_offset=-1), lineno=130, col_offset=-1), Raise(Name('NotImplementedError', Load(), lineno=131, col_offset=14), None, None, lineno=131, col_offset=8)], [], lineno=114, col_offset=4), FunctionDef('decode', arguments([Name('self', Param(), lineno=133, col_offset=15), Name('input', Param(), lineno=133, col_offset=21), Name('errors', Param(), lineno=133, col_offset=28)], None, None, [Str('strict', lineno=133, col_offset=35)]), [Expr(Str(" Decodes the object input and returns a tuple (output\n            object, length consumed).\n\n            input must be an object which provides the bf_getreadbuf\n            buffer slot. Python strings, buffer objects and memory\n            mapped files are examples of objects providing this slot.\n\n            errors defines the error handling to apply. It defaults to\n            'strict' handling.\n\n            The method may not store state in the Codec instance. Use\n            StreamCodec for codecs which have to keep state in order to\n            make encoding/decoding efficient.\n\n            The decoder must be able to handle zero length input and\n            return an empty object of the output object type in this\n            situation.\n\n        ", lineno=153, col_offset=-1), lineno=153, col_offset=-1), Raise(Name('NotImplementedError', Load(), lineno=154, col_offset=14), None, None, lineno=154, col_offset=8)], [], lineno=133, col_offset=4)], [], lineno=92, col_offset=0), ClassDef('IncrementalEncoder', [Name('object', Load(), lineno=156, col_offset=25)], [Expr(Str('\n    An IncrementalEncoder encodes an input in multiple steps. The input can be\n    passed piece by piece to the encode() method. The IncrementalEncoder remembers\n    the state of the Encoding process between calls to encode().\n    ', lineno=161, col_offset=-1), lineno=161, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=162, col_offset=17), Name('errors', Param(), lineno=162, col_offset=23)], None, None, [Str('strict', lineno=162, col_offset=30)]), [Expr(Str('\n        Creates an IncrementalEncoder instance.\n\n        The IncrementalEncoder may use different error handling schemes by\n        providing the errors keyword argument. See the module docstring\n        for a list of possible values.\n        ', lineno=169, col_offset=-1), lineno=169, col_offset=-1), Assign([Attribute(Name('self', Load(), lineno=170, col_offset=8), 'errors', Store(), lineno=170, col_offset=8)], Name('errors', Load(), lineno=170, col_offset=22), lineno=170, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=171, col_offset=8), 'buffer', Store(), lineno=171, col_offset=8)], Str('', lineno=171, col_offset=22), lineno=171, col_offset=8)], [], lineno=162, col_offset=4), FunctionDef('encode', arguments([Name('self', Param(), lineno=173, col_offset=15), Name('input', Param(), lineno=173, col_offset=21), Name('final', Param(), lineno=173, col_offset=28)], None, None, [Name('False', Load(), lineno=173, col_offset=34)]), [Expr(Str('\n        Encodes input and returns the resulting object.\n        ', lineno=176, col_offset=-1), lineno=176, col_offset=-1), Raise(Name('NotImplementedError', Load(), lineno=177, col_offset=14), None, None, lineno=177, col_offset=8)], [], lineno=173, col_offset=4), FunctionDef('reset', arguments([Name('self', Param(), lineno=179, col_offset=14)], None, None, []), [Expr(Str('\n        Resets the encoder to the initial state.\n        ', lineno=182, col_offset=-1), lineno=182, col_offset=-1)], [], lineno=179, col_offset=4), FunctionDef('getstate', arguments([Name('self', Param(), lineno=184, col_offset=17)], None, None, []), [Expr(Str('\n        Return the current state of the encoder.\n        ', lineno=187, col_offset=-1), lineno=187, col_offset=-1), Return(Num(0, lineno=188, col_offset=15), lineno=188, col_offset=8)], [], lineno=184, col_offset=4), FunctionDef('setstate', arguments([Name('self', Param(), lineno=190, col_offset=17), Name('state', Param(), lineno=190, col_offset=23)], None, None, []), [Expr(Str('\n        Set the current state of the encoder. state must have been\n        returned by getstate().\n        ', lineno=194, col_offset=-1), lineno=194, col_offset=-1)], [], lineno=190, col_offset=4)], [], lineno=156, col_offset=0), ClassDef('BufferedIncrementalEncoder', [Name('IncrementalEncoder', Load(), lineno=196, col_offset=33)], [Expr(Str('\n    This subclass of IncrementalEncoder can be used as the baseclass for an\n    incremental encoder if the encoder must keep some of the output in a\n    buffer between calls to encode().\n    ', lineno=201, col_offset=-1), lineno=201, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=202, col_offset=17), Name('errors', Param(), lineno=202, col_offset=23)], None, None, [Str('strict', lineno=202, col_offset=30)]), [Expr(Call(Attribute(Name('IncrementalEncoder', Load(), lineno=203, col_offset=8), '__init__', Load(), lineno=203, col_offset=8), [Name('self', Load(), lineno=203, col_offset=36), Name('errors', Load(), lineno=203, col_offset=42)], [], None, None, lineno=203, col_offset=8), lineno=203, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=204, col_offset=8), 'buffer', Store(), lineno=204, col_offset=8)], Str('', lineno=204, col_offset=22), lineno=204, col_offset=8)], [], lineno=202, col_offset=4), FunctionDef('_buffer_encode', arguments([Name('self', Param(), lineno=206, col_offset=23), Name('input', Param(), lineno=206, col_offset=29), Name('errors', Param(), lineno=206, col_offset=36), Name('final', Param(), lineno=206, col_offset=44)], None, None, []), [Raise(Name('NotImplementedError', Load(), lineno=209, col_offset=14), None, None, lineno=209, col_offset=8)], [], lineno=206, col_offset=4), FunctionDef('encode', arguments([Name('self', Param(), lineno=211, col_offset=15), Name('input', Param(), lineno=211, col_offset=21), Name('final', Param(), lineno=211, col_offset=28)], None, None, [Name('False', Load(), lineno=211, col_offset=34)]), [Assign([Name('data', Store(), lineno=213, col_offset=8)], BinOp(Attribute(Name('self', Load(), lineno=213, col_offset=15), 'buffer', Load(), lineno=213, col_offset=15), Add(), Name('input', Load(), lineno=213, col_offset=29), lineno=213, col_offset=15), lineno=213, col_offset=8), Assign([Tuple([Name('result', Store(), lineno=214, col_offset=9), Name('consumed', Store(), lineno=214, col_offset=17)], Store(), lineno=214, col_offset=9)], Call(Attribute(Name('self', Load(), lineno=214, col_offset=29), '_buffer_encode', Load(), lineno=214, col_offset=29), [Name('data', Load(), lineno=214, col_offset=49), Attribute(Name('self', Load(), lineno=214, col_offset=55), 'errors', Load(), lineno=214, col_offset=55), Name('final', Load(), lineno=214, col_offset=68)], [], None, None, lineno=214, col_offset=29), lineno=214, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=216, col_offset=8), 'buffer', Store(), lineno=216, col_offset=8)], Subscript(Name('data', Load(), lineno=216, col_offset=22), Slice(Name('consumed', Load(), lineno=216, col_offset=27), None, None), Load(), lineno=216, col_offset=22), lineno=216, col_offset=8), Return(Name('result', Load(), lineno=217, col_offset=15), lineno=217, col_offset=8)], [], lineno=211, col_offset=4), FunctionDef('reset', arguments([Name('self', Param(), lineno=219, col_offset=14)], None, None, []), [Expr(Call(Attribute(Name('IncrementalEncoder', Load(), lineno=220, col_offset=8), 'reset', Load(), lineno=220, col_offset=8), [Name('self', Load(), lineno=220, col_offset=33)], [], None, None, lineno=220, col_offset=8), lineno=220, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=221, col_offset=8), 'buffer', Store(), lineno=221, col_offset=8)], Str('', lineno=221, col_offset=22), lineno=221, col_offset=8)], [], lineno=219, col_offset=4), FunctionDef('getstate', arguments([Name('self', Param(), lineno=223, col_offset=17)], None, None, []), [Return(BoolOp(Or(), [Attribute(Name('self', Load(), lineno=224, col_offset=15), 'buffer', Load(), lineno=224, col_offset=15), Num(0, lineno=224, col_offset=30)], lineno=224, col_offset=15), lineno=224, col_offset=8)], [], lineno=223, col_offset=4), FunctionDef('setstate', arguments([Name('self', Param(), lineno=226, col_offset=17), Name('state', Param(), lineno=226, col_offset=23)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=227, col_offset=8), 'buffer', Store(), lineno=227, col_offset=8)], BoolOp(Or(), [Name('state', Load(), lineno=227, col_offset=22), Str('', lineno=227, col_offset=31)], lineno=227, col_offset=22), lineno=227, col_offset=8)], [], lineno=226, col_offset=4)], [], lineno=196, col_offset=0), ClassDef('IncrementalDecoder', [Name('object', Load(), lineno=229, col_offset=25)], [Expr(Str('\n    An IncrementalDecoder decodes an input in multiple steps. The input can be\n    passed piece by piece to the decode() method. The IncrementalDecoder\n    remembers the state of the decoding process between calls to decode().\n    ', lineno=234, col_offset=-1), lineno=234, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=235, col_offset=17), Name('errors', Param(), lineno=235, col_offset=23)], None, None, [Str('strict', lineno=235, col_offset=30)]), [Expr(Str('\n        Creates a IncrementalDecoder instance.\n\n        The IncrementalDecoder may use different error handling schemes by\n        providing the errors keyword argument. See the module docstring\n        for a list of possible values.\n        ', lineno=242, col_offset=-1), lineno=242, col_offset=-1), Assign([Attribute(Name('self', Load(), lineno=243, col_offset=8), 'errors', Store(), lineno=243, col_offset=8)], Name('errors', Load(), lineno=243, col_offset=22), lineno=243, col_offset=8)], [], lineno=235, col_offset=4), FunctionDef('decode', arguments([Name('self', Param(), lineno=245, col_offset=15), Name('input', Param(), lineno=245, col_offset=21), Name('final', Param(), lineno=245, col_offset=28)], None, None, [Name('False', Load(), lineno=245, col_offset=34)]), [Expr(Str('\n        Decodes input and returns the resulting object.\n        ', lineno=248, col_offset=-1), lineno=248, col_offset=-1), Raise(Name('NotImplementedError', Load(), lineno=249, col_offset=14), None, None, lineno=249, col_offset=8)], [], lineno=245, col_offset=4), FunctionDef('reset', arguments([Name('self', Param(), lineno=251, col_offset=14)], None, None, []), [Expr(Str('\n        Resets the decoder to the initial state.\n        ', lineno=254, col_offset=-1), lineno=254, col_offset=-1)], [], lineno=251, col_offset=4), FunctionDef('getstate', arguments([Name('self', Param(), lineno=256, col_offset=17)], None, None, []), [Expr(Str('\n        Return the current state of the decoder.\n\n        This must be a (buffered_input, additional_state_info) tuple.\n        buffered_input must be a bytes object containing bytes that\n        were passed to decode() that have not yet been converted.\n        additional_state_info must be a non-negative integer\n        representing the state of the decoder WITHOUT yet having\n        processed the contents of buffered_input.  In the initial state\n        and after reset(), getstate() must return (b"", 0).\n        ', lineno=267, col_offset=-1), lineno=267, col_offset=-1), Return(Tuple([Str('', lineno=268, col_offset=16), Num(0, lineno=268, col_offset=21)], Load(), lineno=268, col_offset=16), lineno=268, col_offset=8)], [], lineno=256, col_offset=4), FunctionDef('setstate', arguments([Name('self', Param(), lineno=270, col_offset=17), Name('state', Param(), lineno=270, col_offset=23)], None, None, []), [Expr(Str('\n        Set the current state of the decoder.\n\n        state must have been returned by getstate().  The effect of\n        setstate((b"", 0)) must be equivalent to reset().\n        ', lineno=276, col_offset=-1), lineno=276, col_offset=-1)], [], lineno=270, col_offset=4)], [], lineno=229, col_offset=0), ClassDef('BufferedIncrementalDecoder', [Name('IncrementalDecoder', Load(), lineno=278, col_offset=33)], [Expr(Str('\n    This subclass of IncrementalDecoder can be used as the baseclass for an\n    incremental decoder if the decoder must be able to handle incomplete byte\n    sequences.\n    ', lineno=283, col_offset=-1), lineno=283, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=284, col_offset=17), Name('errors', Param(), lineno=284, col_offset=23)], None, None, [Str('strict', lineno=284, col_offset=30)]), [Expr(Call(Attribute(Name('IncrementalDecoder', Load(), lineno=285, col_offset=8), '__init__', Load(), lineno=285, col_offset=8), [Name('self', Load(), lineno=285, col_offset=36), Name('errors', Load(), lineno=285, col_offset=42)], [], None, None, lineno=285, col_offset=8), lineno=285, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=286, col_offset=8), 'buffer', Store(), lineno=286, col_offset=8)], Str('', lineno=286, col_offset=22), lineno=286, col_offset=8)], [], lineno=284, col_offset=4), FunctionDef('_buffer_decode', arguments([Name('self', Param(), lineno=288, col_offset=23), Name('input', Param(), lineno=288, col_offset=29), Name('errors', Param(), lineno=288, col_offset=36), Name('final', Param(), lineno=288, col_offset=44)], None, None, []), [Raise(Name('NotImplementedError', Load(), lineno=291, col_offset=14), None, None, lineno=291, col_offset=8)], [], lineno=288, col_offset=4), FunctionDef('decode', arguments([Name('self', Param(), lineno=293, col_offset=15), Name('input', Param(), lineno=293, col_offset=21), Name('final', Param(), lineno=293, col_offset=28)], None, None, [Name('False', Load(), lineno=293, col_offset=34)]), [Assign([Name('data', Store(), lineno=295, col_offset=8)], BinOp(Attribute(Name('self', Load(), lineno=295, col_offset=15), 'buffer', Load(), lineno=295, col_offset=15), Add(), Name('input', Load(), lineno=295, col_offset=29), lineno=295, col_offset=15), lineno=295, col_offset=8), Assign([Tuple([Name('result', Store(), lineno=296, col_offset=9), Name('consumed', Store(), lineno=296, col_offset=17)], Store(), lineno=296, col_offset=9)], Call(Attribute(Name('self', Load(), lineno=296, col_offset=29), '_buffer_decode', Load(), lineno=296, col_offset=29), [Name('data', Load(), lineno=296, col_offset=49), Attribute(Name('self', Load(), lineno=296, col_offset=55), 'errors', Load(), lineno=296, col_offset=55), Name('final', Load(), lineno=296, col_offset=68)], [], None, None, lineno=296, col_offset=29), lineno=296, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=298, col_offset=8), 'buffer', Store(), lineno=298, col_offset=8)], Subscript(Name('data', Load(), lineno=298, col_offset=22), Slice(Name('consumed', Load(), lineno=298, col_offset=27), None, None), Load(), lineno=298, col_offset=22), lineno=298, col_offset=8), Return(Name('result', Load(), lineno=299, col_offset=15), lineno=299, col_offset=8)], [], lineno=293, col_offset=4), FunctionDef('reset', arguments([Name('self', Param(), lineno=301, col_offset=14)], None, None, []), [Expr(Call(Attribute(Name('IncrementalDecoder', Load(), lineno=302, col_offset=8), 'reset', Load(), lineno=302, col_offset=8), [Name('self', Load(), lineno=302, col_offset=33)], [], None, None, lineno=302, col_offset=8), lineno=302, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=303, col_offset=8), 'buffer', Store(), lineno=303, col_offset=8)], Str('', lineno=303, col_offset=22), lineno=303, col_offset=8)], [], lineno=301, col_offset=4), FunctionDef('getstate', arguments([Name('self', Param(), lineno=305, col_offset=17)], None, None, []), [Return(Tuple([Attribute(Name('self', Load(), lineno=307, col_offset=16), 'buffer', Load(), lineno=307, col_offset=16), Num(0, lineno=307, col_offset=29)], Load(), lineno=307, col_offset=16), lineno=307, col_offset=8)], [], lineno=305, col_offset=4), FunctionDef('setstate', arguments([Name('self', Param(), lineno=309, col_offset=17), Name('state', Param(), lineno=309, col_offset=23)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=311, col_offset=8), 'buffer', Store(), lineno=311, col_offset=8)], Subscript(Name('state', Load(), lineno=311, col_offset=22), Index(Num(0, lineno=311, col_offset=28)), Load(), lineno=311, col_offset=22), lineno=311, col_offset=8)], [], lineno=309, col_offset=4)], [], lineno=278, col_offset=0), ClassDef('StreamWriter', [Name('Codec', Load(), lineno=320, col_offset=19)], [FunctionDef('__init__', arguments([Name('self', Param(), lineno=322, col_offset=17), Name('stream', Param(), lineno=322, col_offset=23), Name('errors', Param(), lineno=322, col_offset=31)], None, None, [Str('strict', lineno=322, col_offset=38)]), [Expr(Str(" Creates a StreamWriter instance.\n\n            stream must be a file-like object open for writing\n            (binary) data.\n\n            The StreamWriter may use different error handling\n            schemes by providing the errors keyword argument. These\n            parameters are predefined:\n\n             'strict' - raise a ValueError (or a subclass)\n             'ignore' - ignore the character and continue with the next\n             'replace'- replace with a suitable replacement character\n             'xmlcharrefreplace' - Replace with the appropriate XML\n                                   character reference.\n             'backslashreplace'  - Replace with backslashed escape\n                                   sequences (only for encoding).\n\n            The set of allowed parameter values can be extended via\n            register_error.\n        ", lineno=343, col_offset=-1), lineno=343, col_offset=-1), Assign([Attribute(Name('self', Load(), lineno=344, col_offset=8), 'stream', Store(), lineno=344, col_offset=8)], Name('stream', Load(), lineno=344, col_offset=22), lineno=344, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=345, col_offset=8), 'errors', Store(), lineno=345, col_offset=8)], Name('errors', Load(), lineno=345, col_offset=22), lineno=345, col_offset=8)], [], lineno=322, col_offset=4), FunctionDef('write', arguments([Name('self', Param(), lineno=347, col_offset=14), Name('object', Param(), lineno=347, col_offset=20)], None, None, []), [Expr(Str(" Writes the object's contents encoded to self.stream.\n        ", lineno=350, col_offset=-1), lineno=350, col_offset=-1), Assign([Tuple([Name('data', Store(), lineno=351, col_offset=8), Name('consumed', Store(), lineno=351, col_offset=14)], Store(), lineno=351, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=351, col_offset=25), 'encode', Load(), lineno=351, col_offset=25), [Name('object', Load(), lineno=351, col_offset=37), Attribute(Name('self', Load(), lineno=351, col_offset=45), 'errors', Load(), lineno=351, col_offset=45)], [], None, None, lineno=351, col_offset=25), lineno=351, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=352, col_offset=8), 'stream', Load(), lineno=352, col_offset=8), 'write', Load(), lineno=352, col_offset=8), [Name('data', Load(), lineno=352, col_offset=26)], [], None, None, lineno=352, col_offset=8), lineno=352, col_offset=8)], [], lineno=347, col_offset=4), FunctionDef('writelines', arguments([Name('self', Param(), lineno=354, col_offset=19), Name('list', Param(), lineno=354, col_offset=25)], None, None, []), [Expr(Str(' Writes the concatenated list of strings to the stream\n            using .write().\n        ', lineno=358, col_offset=-1), lineno=358, col_offset=-1), Expr(Call(Attribute(Name('self', Load(), lineno=359, col_offset=8), 'write', Load(), lineno=359, col_offset=8), [Call(Attribute(Str('', lineno=359, col_offset=19), 'join', Load(), lineno=359, col_offset=19), [Name('list', Load(), lineno=359, col_offset=27)], [], None, None, lineno=359, col_offset=19)], [], None, None, lineno=359, col_offset=8), lineno=359, col_offset=8)], [], lineno=354, col_offset=4), FunctionDef('reset', arguments([Name('self', Param(), lineno=361, col_offset=14)], None, None, []), [Expr(Str(' Flushes and resets the codec buffers used for keeping state.\n\n            Calling this method should ensure that the data on the\n            output is put into a clean state, that allows appending\n            of new fresh data without having to rescan the whole\n            stream to recover state.\n\n        ', lineno=370, col_offset=-1), lineno=370, col_offset=-1), Pass( lineno=371, col_offset=8)], [], lineno=361, col_offset=4), FunctionDef('seek', arguments([Name('self', Param(), lineno=373, col_offset=13), Name('offset', Param(), lineno=373, col_offset=19), Name('whence', Param(), lineno=373, col_offset=27)], None, None, [Num(0, lineno=373, col_offset=34)]), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=374, col_offset=8), 'stream', Load(), lineno=374, col_offset=8), 'seek', Load(), lineno=374, col_offset=8), [Name('offset', Load(), lineno=374, col_offset=25), Name('whence', Load(), lineno=374, col_offset=33)], [], None, None, lineno=374, col_offset=8), lineno=374, col_offset=8), If(BoolOp(And(), [Compare(Name('whence', Load(), lineno=375, col_offset=11), [Eq()], [Num(0, lineno=375, col_offset=21)], lineno=375, col_offset=11), Compare(Name('offset', Load(), lineno=375, col_offset=27), [Eq()], [Num(0, lineno=375, col_offset=37)], lineno=375, col_offset=27)], lineno=375, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=376, col_offset=12), 'reset', Load(), lineno=376, col_offset=12), [], [], None, None, lineno=376, col_offset=12), lineno=376, col_offset=12)], [], lineno=375, col_offset=8)], [], lineno=373, col_offset=4), FunctionDef('__getattr__', arguments([Name('self', Param(), lineno=378, col_offset=20), Name('name', Param(), lineno=378, col_offset=26), Name('getattr', Param(), lineno=379, col_offset=20)], None, None, [Name('getattr', Load(), lineno=379, col_offset=28)]), [Expr(Str(' Inherit all other methods from the underlying stream.\n        ', lineno=382, col_offset=-1), lineno=382, col_offset=-1), Return(Call(Name('getattr', Load(), lineno=383, col_offset=15), [Attribute(Name('self', Load(), lineno=383, col_offset=23), 'stream', Load(), lineno=383, col_offset=23), Name('name', Load(), lineno=383, col_offset=36)], [], None, None, lineno=383, col_offset=15), lineno=383, col_offset=8)], [], lineno=378, col_offset=4), FunctionDef('__enter__', arguments([Name('self', Param(), lineno=385, col_offset=18)], None, None, []), [Return(Name('self', Load(), lineno=386, col_offset=15), lineno=386, col_offset=8)], [], lineno=385, col_offset=4), FunctionDef('__exit__', arguments([Name('self', Param(), lineno=388, col_offset=17), Name('type', Param(), lineno=388, col_offset=23), Name('value', Param(), lineno=388, col_offset=29), Name('tb', Param(), lineno=388, col_offset=36)], None, None, []), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=389, col_offset=8), 'stream', Load(), lineno=389, col_offset=8), 'close', Load(), lineno=389, col_offset=8), [], [], None, None, lineno=389, col_offset=8), lineno=389, col_offset=8)], [], lineno=388, col_offset=4)], [], lineno=320, col_offset=0), ClassDef('StreamReader', [Name('Codec', Load(), lineno=393, col_offset=19)], [FunctionDef('__init__', arguments([Name('self', Param(), lineno=395, col_offset=17), Name('stream', Param(), lineno=395, col_offset=23), Name('errors', Param(), lineno=395, col_offset=31)], None, None, [Str('strict', lineno=395, col_offset=38)]), [Expr(Str(" Creates a StreamReader instance.\n\n            stream must be a file-like object open for reading\n            (binary) data.\n\n            The StreamReader may use different error handling\n            schemes by providing the errors keyword argument. These\n            parameters are predefined:\n\n             'strict' - raise a ValueError (or a subclass)\n             'ignore' - ignore the character and continue with the next\n             'replace'- replace with a suitable replacement character;\n\n            The set of allowed parameter values can be extended via\n            register_error.\n        ", lineno=412, col_offset=-1), lineno=412, col_offset=-1), Assign([Attribute(Name('self', Load(), lineno=413, col_offset=8), 'stream', Store(), lineno=413, col_offset=8)], Name('stream', Load(), lineno=413, col_offset=22), lineno=413, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=414, col_offset=8), 'errors', Store(), lineno=414, col_offset=8)], Name('errors', Load(), lineno=414, col_offset=22), lineno=414, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=415, col_offset=8), 'bytebuffer', Store(), lineno=415, col_offset=8)], Str('', lineno=415, col_offset=26), lineno=415, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=418, col_offset=8), 'charbuffer', Store(), lineno=418, col_offset=8)], Str('', lineno=418, col_offset=26), lineno=418, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=419, col_offset=8), 'linebuffer', Store(), lineno=419, col_offset=8)], Name('None', Load(), lineno=419, col_offset=26), lineno=419, col_offset=8)], [], lineno=395, col_offset=4), FunctionDef('decode', arguments([Name('self', Param(), lineno=421, col_offset=15), Name('input', Param(), lineno=421, col_offset=21), Name('errors', Param(), lineno=421, col_offset=28)], None, None, [Str('strict', lineno=421, col_offset=35)]), [Raise(Name('NotImplementedError', Load(), lineno=422, col_offset=14), None, None, lineno=422, col_offset=8)], [], lineno=421, col_offset=4), FunctionDef('read', arguments([Name('self', Param(), lineno=424, col_offset=13), Name('size', Param(), lineno=424, col_offset=19), Name('chars', Param(), lineno=424, col_offset=28), Name('firstline', Param(), lineno=424, col_offset=38)], None, None, [Num(-1, lineno=424, col_offset=25), Num(-1, lineno=424, col_offset=35), Name('False', Load(), lineno=424, col_offset=48)]), [Expr(Str(' Decodes data from the stream self.stream and returns the\n            resulting object.\n\n            chars indicates the number of characters to read from the\n            stream. read() will never return more than chars\n            characters, but it might return less, if there are not enough\n            characters available.\n\n            size indicates the approximate maximum number of bytes to\n            read from the stream for decoding purposes. The decoder\n            can modify this setting as appropriate. The default value\n            -1 indicates to read and decode as much as possible.  size\n            is intended to prevent having to decode huge files in one\n            step.\n\n            If firstline is true, and a UnicodeDecodeError happens\n            after the first line terminator in the input only the first line\n            will be returned, the rest of the input will be kept until the\n            next call to read().\n\n            The method should use a greedy read strategy meaning that\n            it should read as much data as is allowed within the\n            definition of the encoding and the given size, e.g.  if\n            optional encoding endings or state markers are available\n            on the stream, these should be read too.\n        ', lineno=451, col_offset=-1), lineno=451, col_offset=-1), If(Attribute(Name('self', Load(), lineno=453, col_offset=11), 'linebuffer', Load(), lineno=453, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=454, col_offset=12), 'charbuffer', Store(), lineno=454, col_offset=12)], Call(Attribute(Str('', lineno=454, col_offset=30), 'join', Load(), lineno=454, col_offset=30), [Attribute(Name('self', Load(), lineno=454, col_offset=38), 'linebuffer', Load(), lineno=454, col_offset=38)], [], None, None, lineno=454, col_offset=30), lineno=454, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=455, col_offset=12), 'linebuffer', Store(), lineno=455, col_offset=12)], Name('None', Load(), lineno=455, col_offset=30), lineno=455, col_offset=12)], [], lineno=453, col_offset=8), While(Name('True', Load(), lineno=458, col_offset=14), [If(Compare(Name('chars', Load(), lineno=460, col_offset=15), [Lt()], [Num(0, lineno=460, col_offset=23)], lineno=460, col_offset=15), [If(Compare(Name('size', Load(), lineno=461, col_offset=19), [Lt()], [Num(0, lineno=461, col_offset=26)], lineno=461, col_offset=19), [If(Attribute(Name('self', Load(), lineno=462, col_offset=23), 'charbuffer', Load(), lineno=462, col_offset=23), [Break( lineno=463, col_offset=24)], [], lineno=462, col_offset=20)], [If(Compare(Call(Name('len', Load(), lineno=464, col_offset=21), [Attribute(Name('self', Load(), lineno=464, col_offset=25), 'charbuffer', Load(), lineno=464, col_offset=25)], [], None, None, lineno=464, col_offset=21), [GtE()], [Name('size', Load(), lineno=464, col_offset=45)], lineno=464, col_offset=21), [Break( lineno=465, col_offset=20)], [], lineno=464, col_offset=21)], lineno=461, col_offset=16)], [If(Compare(Call(Name('len', Load(), lineno=467, col_offset=19), [Attribute(Name('self', Load(), lineno=467, col_offset=23), 'charbuffer', Load(), lineno=467, col_offset=23)], [], None, None, lineno=467, col_offset=19), [GtE()], [Name('chars', Load(), lineno=467, col_offset=43)], lineno=467, col_offset=19), [Break( lineno=468, col_offset=20)], [], lineno=467, col_offset=16)], lineno=460, col_offset=12), If(Compare(Name('size', Load(), lineno=470, col_offset=15), [Lt()], [Num(0, lineno=470, col_offset=22)], lineno=470, col_offset=15), [Assign([Name('newdata', Store(), lineno=471, col_offset=16)], Call(Attribute(Attribute(Name('self', Load(), lineno=471, col_offset=26), 'stream', Load(), lineno=471, col_offset=26), 'read', Load(), lineno=471, col_offset=26), [], [], None, None, lineno=471, col_offset=26), lineno=471, col_offset=16)], [Assign([Name('newdata', Store(), lineno=473, col_offset=16)], Call(Attribute(Attribute(Name('self', Load(), lineno=473, col_offset=26), 'stream', Load(), lineno=473, col_offset=26), 'read', Load(), lineno=473, col_offset=26), [Name('size', Load(), lineno=473, col_offset=43)], [], None, None, lineno=473, col_offset=26), lineno=473, col_offset=16)], lineno=470, col_offset=12), Assign([Name('data', Store(), lineno=475, col_offset=12)], BinOp(Attribute(Name('self', Load(), lineno=475, col_offset=19), 'bytebuffer', Load(), lineno=475, col_offset=19), Add(), Name('newdata', Load(), lineno=475, col_offset=37), lineno=475, col_offset=19), lineno=475, col_offset=12), TryExcept([Assign([Tuple([Name('newchars', Store(), lineno=477, col_offset=16), Name('decodedbytes', Store(), lineno=477, col_offset=26)], Store(), lineno=477, col_offset=16)], Call(Attribute(Name('self', Load(), lineno=477, col_offset=41), 'decode', Load(), lineno=477, col_offset=41), [Name('data', Load(), lineno=477, col_offset=53), Attribute(Name('self', Load(), lineno=477, col_offset=59), 'errors', Load(), lineno=477, col_offset=59)], [], None, None, lineno=477, col_offset=41), lineno=477, col_offset=16)], [ExceptHandler(Name('UnicodeDecodeError', Load(), lineno=478, col_offset=19), Name('exc', Store(), lineno=478, col_offset=39), [If(Name('firstline', Load(), lineno=479, col_offset=19), [Assign([Tuple([Name('newchars', Store(), lineno=480, col_offset=20), Name('decodedbytes', Store(), lineno=480, col_offset=30)], Store(), lineno=480, col_offset=20)], Call(Attribute(Name('self', Load(), lineno=480, col_offset=45), 'decode', Load(), lineno=480, col_offset=45), [Subscript(Name('data', Load(), lineno=480, col_offset=57), Slice(None, Attribute(Name('exc', Load(), lineno=480, col_offset=63), 'start', Load(), lineno=480, col_offset=63), None), Load(), lineno=480, col_offset=57), Attribute(Name('self', Load(), lineno=480, col_offset=75), 'errors', Load(), lineno=480, col_offset=75)], [], None, None, lineno=480, col_offset=45), lineno=480, col_offset=20), Assign([Name('lines', Store(), lineno=481, col_offset=20)], Call(Attribute(Name('newchars', Load(), lineno=481, col_offset=28), 'splitlines', Load(), lineno=481, col_offset=28), [Name('True', Load(), lineno=481, col_offset=48)], [], None, None, lineno=481, col_offset=28), lineno=481, col_offset=20), If(Compare(Call(Name('len', Load(), lineno=482, col_offset=23), [Name('lines', Load(), lineno=482, col_offset=27)], [], None, None, lineno=482, col_offset=23), [LtE()], [Num(1, lineno=482, col_offset=35)], lineno=482, col_offset=23), [Raise(None, None, None, lineno=483, col_offset=24)], [], lineno=482, col_offset=20)], [Raise(None, None, None, lineno=485, col_offset=20)], lineno=479, col_offset=16)], lineno=478, col_offset=12)], [], lineno=476, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=487, col_offset=12), 'bytebuffer', Store(), lineno=487, col_offset=12)], Subscript(Name('data', Load(), lineno=487, col_offset=30), Slice(Name('decodedbytes', Load(), lineno=487, col_offset=35), None, None), Load(), lineno=487, col_offset=30), lineno=487, col_offset=12), AugAssign(Attribute(Name('self', Load(), lineno=489, col_offset=12), 'charbuffer', Store(), lineno=489, col_offset=12), Add(), Name('newchars', Load(), lineno=489, col_offset=31), lineno=489, col_offset=12), If(UnaryOp(Not(), Name('newdata', Load(), lineno=491, col_offset=19), lineno=491, col_offset=15), [Break( lineno=492, col_offset=16)], [], lineno=491, col_offset=12)], [], lineno=458, col_offset=8), If(Compare(Name('chars', Load(), lineno=493, col_offset=11), [Lt()], [Num(0, lineno=493, col_offset=19)], lineno=493, col_offset=11), [Assign([Name('result', Store(), lineno=495, col_offset=12)], Attribute(Name('self', Load(), lineno=495, col_offset=21), 'charbuffer', Load(), lineno=495, col_offset=21), lineno=495, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=496, col_offset=12), 'charbuffer', Store(), lineno=496, col_offset=12)], Str('', lineno=496, col_offset=30), lineno=496, col_offset=12)], [Assign([Name('result', Store(), lineno=499, col_offset=12)], Subscript(Attribute(Name('self', Load(), lineno=499, col_offset=21), 'charbuffer', Load(), lineno=499, col_offset=21), Slice(None, Name('chars', Load(), lineno=499, col_offset=38), None), Load(), lineno=499, col_offset=21), lineno=499, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=500, col_offset=12), 'charbuffer', Store(), lineno=500, col_offset=12)], Subscript(Attribute(Name('self', Load(), lineno=500, col_offset=30), 'charbuffer', Load(), lineno=500, col_offset=30), Slice(Name('chars', Load(), lineno=500, col_offset=46), None, None), Load(), lineno=500, col_offset=30), lineno=500, col_offset=12)], lineno=493, col_offset=8), Return(Name('result', Load(), lineno=501, col_offset=15), lineno=501, col_offset=8)], [], lineno=424, col_offset=4), FunctionDef('readline', arguments([Name('self', Param(), lineno=503, col_offset=17), Name('size', Param(), lineno=503, col_offset=23), Name('keepends', Param(), lineno=503, col_offset=34)], None, None, [Name('None', Load(), lineno=503, col_offset=28), Name('True', Load(), lineno=503, col_offset=43)]), [Expr(Str(' Read one line from the input stream and return the\n            decoded data.\n\n            size, if given, is passed as size argument to the\n            read() method.\n\n        ', lineno=511, col_offset=-1), lineno=511, col_offset=-1), If(Attribute(Name('self', Load(), lineno=514, col_offset=11), 'linebuffer', Load(), lineno=514, col_offset=11), [Assign([Name('line', Store(), lineno=515, col_offset=12)], Subscript(Attribute(Name('self', Load(), lineno=515, col_offset=19), 'linebuffer', Load(), lineno=515, col_offset=19), Index(Num(0, lineno=515, col_offset=35)), Load(), lineno=515, col_offset=19), lineno=515, col_offset=12), Delete([Subscript(Attribute(Name('self', Load(), lineno=516, col_offset=16), 'linebuffer', Load(), lineno=516, col_offset=16), Index(Num(0, lineno=516, col_offset=32)), Del(), lineno=516, col_offset=16)], lineno=516, col_offset=12), If(Compare(Call(Name('len', Load(), lineno=517, col_offset=15), [Attribute(Name('self', Load(), lineno=517, col_offset=19), 'linebuffer', Load(), lineno=517, col_offset=19)], [], None, None, lineno=517, col_offset=15), [Eq()], [Num(1, lineno=517, col_offset=39)], lineno=517, col_offset=15), [Assign([Attribute(Name('self', Load(), lineno=520, col_offset=16), 'charbuffer', Store(), lineno=520, col_offset=16)], Subscript(Attribute(Name('self', Load(), lineno=520, col_offset=34), 'linebuffer', Load(), lineno=520, col_offset=34), Index(Num(0, lineno=520, col_offset=50)), Load(), lineno=520, col_offset=34), lineno=520, col_offset=16), Assign([Attribute(Name('self', Load(), lineno=521, col_offset=16), 'linebuffer', Store(), lineno=521, col_offset=16)], Name('None', Load(), lineno=521, col_offset=34), lineno=521, col_offset=16)], [], lineno=517, col_offset=12), If(UnaryOp(Not(), Name('keepends', Load(), lineno=522, col_offset=19), lineno=522, col_offset=15), [Assign([Name('line', Store(), lineno=523, col_offset=16)], Subscript(Call(Attribute(Name('line', Load(), lineno=523, col_offset=23), 'splitlines', Load(), lineno=523, col_offset=23), [Name('False', Load(), lineno=523, col_offset=39)], [], None, None, lineno=523, col_offset=23), Index(Num(0, lineno=523, col_offset=46)), Load(), lineno=523, col_offset=23), lineno=523, col_offset=16)], [], lineno=522, col_offset=12), Return(Name('line', Load(), lineno=524, col_offset=19), lineno=524, col_offset=12)], [], lineno=514, col_offset=8), Assign([Name('readsize', Store(), lineno=526, col_offset=8)], BoolOp(Or(), [Name('size', Load(), lineno=526, col_offset=19), Num(72, lineno=526, col_offset=27)], lineno=526, col_offset=19), lineno=526, col_offset=8), Assign([Name('line', Store(), lineno=527, col_offset=8)], Str('', lineno=527, col_offset=15), lineno=527, col_offset=8), While(Name('True', Load(), lineno=529, col_offset=14), [Assign([Name('data', Store(), lineno=530, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=530, col_offset=19), 'read', Load(), lineno=530, col_offset=19), [Name('readsize', Load(), lineno=530, col_offset=29)], [keyword('firstline', Name('True', Load(), lineno=530, col_offset=49))], None, None, lineno=530, col_offset=19), lineno=530, col_offset=12), If(Name('data', Load(), lineno=531, col_offset=15), [If(Call(Attribute(Name('data', Load(), lineno=535, col_offset=19), 'endswith', Load(), lineno=535, col_offset=19), [Str('\r', lineno=535, col_offset=33)], [], None, None, lineno=535, col_offset=19), [AugAssign(Name('data', Store(), lineno=536, col_offset=20), Add(), Call(Attribute(Name('self', Load(), lineno=536, col_offset=28), 'read', Load(), lineno=536, col_offset=28), [], [keyword('size', Num(1, lineno=536, col_offset=43)), keyword('chars', Num(1, lineno=536, col_offset=52))], None, None, lineno=536, col_offset=28), lineno=536, col_offset=20)], [], lineno=535, col_offset=16)], [], lineno=531, col_offset=12), AugAssign(Name('line', Store(), lineno=538, col_offset=12), Add(), Name('data', Load(), lineno=538, col_offset=20), lineno=538, col_offset=12), Assign([Name('lines', Store(), lineno=539, col_offset=12)], Call(Attribute(Name('line', Load(), lineno=539, col_offset=20), 'splitlines', Load(), lineno=539, col_offset=20), [Name('True', Load(), lineno=539, col_offset=36)], [], None, None, lineno=539, col_offset=20), lineno=539, col_offset=12), If(Name('lines', Load(), lineno=540, col_offset=15), [If(Compare(Call(Name('len', Load(), lineno=541, col_offset=19), [Name('lines', Load(), lineno=541, col_offset=23)], [], None, None, lineno=541, col_offset=19), [Gt()], [Num(1, lineno=541, col_offset=32)], lineno=541, col_offset=19), [Assign([Name('line', Store(), lineno=544, col_offset=20)], Subscript(Name('lines', Load(), lineno=544, col_offset=27), Index(Num(0, lineno=544, col_offset=33)), Load(), lineno=544, col_offset=27), lineno=544, col_offset=20), Delete([Subscript(Name('lines', Load(), lineno=545, col_offset=24), Index(Num(0, lineno=545, col_offset=30)), Del(), lineno=545, col_offset=24)], lineno=545, col_offset=20), If(Compare(Call(Name('len', Load(), lineno=546, col_offset=23), [Name('lines', Load(), lineno=546, col_offset=27)], [], None, None, lineno=546, col_offset=23), [Gt()], [Num(1, lineno=546, col_offset=36)], lineno=546, col_offset=23), [AugAssign(Subscript(Name('lines', Load(), lineno=548, col_offset=24), Index(Num(-1, lineno=548, col_offset=31)), Store(), lineno=548, col_offset=24), Add(), Attribute(Name('self', Load(), lineno=548, col_offset=37), 'charbuffer', Load(), lineno=548, col_offset=37), lineno=548, col_offset=24), Assign([Attribute(Name('self', Load(), lineno=549, col_offset=24), 'linebuffer', Store(), lineno=549, col_offset=24)], Name('lines', Load(), lineno=549, col_offset=42), lineno=549, col_offset=24), Assign([Attribute(Name('self', Load(), lineno=550, col_offset=24), 'charbuffer', Store(), lineno=550, col_offset=24)], Name('None', Load(), lineno=550, col_offset=42), lineno=550, col_offset=24)], [Assign([Attribute(Name('self', Load(), lineno=553, col_offset=24), 'charbuffer', Store(), lineno=553, col_offset=24)], BinOp(Subscript(Name('lines', Load(), lineno=553, col_offset=42), Index(Num(0, lineno=553, col_offset=48)), Load(), lineno=553, col_offset=42), Add(), Attribute(Name('self', Load(), lineno=553, col_offset=53), 'charbuffer', Load(), lineno=553, col_offset=53), lineno=553, col_offset=42), lineno=553, col_offset=24)], lineno=546, col_offset=20), If(UnaryOp(Not(), Name('keepends', Load(), lineno=554, col_offset=27), lineno=554, col_offset=23), [Assign([Name('line', Store(), lineno=555, col_offset=24)], Subscript(Call(Attribute(Name('line', Load(), lineno=555, col_offset=31), 'splitlines', Load(), lineno=555, col_offset=31), [Name('False', Load(), lineno=555, col_offset=47)], [], None, None, lineno=555, col_offset=31), Index(Num(0, lineno=555, col_offset=54)), Load(), lineno=555, col_offset=31), lineno=555, col_offset=24)], [], lineno=554, col_offset=20), Break( lineno=556, col_offset=20)], [], lineno=541, col_offset=16), Assign([Name('line0withend', Store(), lineno=557, col_offset=16)], Subscript(Name('lines', Load(), lineno=557, col_offset=31), Index(Num(0, lineno=557, col_offset=37)), Load(), lineno=557, col_offset=31), lineno=557, col_offset=16), Assign([Name('line0withoutend', Store(), lineno=558, col_offset=16)], Subscript(Call(Attribute(Subscript(Name('lines', Load(), lineno=558, col_offset=34), Index(Num(0, lineno=558, col_offset=40)), Load(), lineno=558, col_offset=34), 'splitlines', Load(), lineno=558, col_offset=34), [Name('False', Load(), lineno=558, col_offset=54)], [], None, None, lineno=558, col_offset=34), Index(Num(0, lineno=558, col_offset=61)), Load(), lineno=558, col_offset=34), lineno=558, col_offset=16), If(Compare(Name('line0withend', Load(), lineno=559, col_offset=19), [NotEq()], [Name('line0withoutend', Load(), lineno=559, col_offset=35)], lineno=559, col_offset=19), [Assign([Attribute(Name('self', Load(), lineno=561, col_offset=20), 'charbuffer', Store(), lineno=561, col_offset=20)], BinOp(Call(Attribute(Str('', lineno=561, col_offset=38), 'join', Load(), lineno=561, col_offset=38), [Subscript(Name('lines', Load(), lineno=561, col_offset=46), Slice(Num(1, lineno=561, col_offset=52), None, None), Load(), lineno=561, col_offset=46)], [], None, None, lineno=561, col_offset=38), Add(), Attribute(Name('self', Load(), lineno=561, col_offset=59), 'charbuffer', Load(), lineno=561, col_offset=59), lineno=561, col_offset=38), lineno=561, col_offset=20), If(Name('keepends', Load(), lineno=562, col_offset=23), [Assign([Name('line', Store(), lineno=563, col_offset=24)], Name('line0withend', Load(), lineno=563, col_offset=31), lineno=563, col_offset=24)], [Assign([Name('line', Store(), lineno=565, col_offset=24)], Name('line0withoutend', Load(), lineno=565, col_offset=31), lineno=565, col_offset=24)], lineno=562, col_offset=20), Break( lineno=566, col_offset=20)], [], lineno=559, col_offset=16)], [], lineno=540, col_offset=12), If(BoolOp(Or(), [UnaryOp(Not(), Name('data', Load(), lineno=568, col_offset=19), lineno=568, col_offset=15), Compare(Name('size', Load(), lineno=568, col_offset=27), [IsNot()], [Name('None', Load(), lineno=568, col_offset=39)], lineno=568, col_offset=27)], lineno=568, col_offset=15), [If(BoolOp(And(), [Name('line', Load(), lineno=569, col_offset=19), UnaryOp(Not(), Name('keepends', Load(), lineno=569, col_offset=32), lineno=569, col_offset=28)], lineno=569, col_offset=19), [Assign([Name('line', Store(), lineno=570, col_offset=20)], Subscript(Call(Attribute(Name('line', Load(), lineno=570, col_offset=27), 'splitlines', Load(), lineno=570, col_offset=27), [Name('False', Load(), lineno=570, col_offset=43)], [], None, None, lineno=570, col_offset=27), Index(Num(0, lineno=570, col_offset=50)), Load(), lineno=570, col_offset=27), lineno=570, col_offset=20)], [], lineno=569, col_offset=16), Break( lineno=571, col_offset=16)], [], lineno=568, col_offset=12), If(Compare(Name('readsize', Load(), lineno=572, col_offset=15), [Lt()], [Num(8000, lineno=572, col_offset=24)], lineno=572, col_offset=15), [AugAssign(Name('readsize', Store(), lineno=573, col_offset=16), Mult(), Num(2, lineno=573, col_offset=28), lineno=573, col_offset=16)], [], lineno=572, col_offset=12)], [], lineno=529, col_offset=8), Return(Name('line', Load(), lineno=574, col_offset=15), lineno=574, col_offset=8)], [], lineno=503, col_offset=4), FunctionDef('readlines', arguments([Name('self', Param(), lineno=576, col_offset=18), Name('sizehint', Param(), lineno=576, col_offset=24), Name('keepends', Param(), lineno=576, col_offset=39)], None, None, [Name('None', Load(), lineno=576, col_offset=33), Name('True', Load(), lineno=576, col_offset=48)]), [Expr(Str(" Read all lines available on the input stream\n            and return them as list of lines.\n\n            Line breaks are implemented using the codec's decoder\n            method and are included in the list entries.\n\n            sizehint, if given, is ignored since there is no efficient\n            way to finding the true end-of-line.\n\n        ", lineno=587, col_offset=-1), lineno=587, col_offset=-1), Assign([Name('data', Store(), lineno=588, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=588, col_offset=15), 'read', Load(), lineno=588, col_offset=15), [], [], None, None, lineno=588, col_offset=15), lineno=588, col_offset=8), Return(Call(Attribute(Name('data', Load(), lineno=589, col_offset=15), 'splitlines', Load(), lineno=589, col_offset=15), [Name('keepends', Load(), lineno=589, col_offset=31)], [], None, None, lineno=589, col_offset=15), lineno=589, col_offset=8)], [], lineno=576, col_offset=4), FunctionDef('reset', arguments([Name('self', Param(), lineno=591, col_offset=14)], None, None, []), [Expr(Str(' Resets the codec buffers used for keeping state.\n\n            Note that no stream repositioning should take place.\n            This method is primarily intended to be able to recover\n            from decoding errors.\n\n        ', lineno=599, col_offset=-1), lineno=599, col_offset=-1), Assign([Attribute(Name('self', Load(), lineno=600, col_offset=8), 'bytebuffer', Store(), lineno=600, col_offset=8)], Str('', lineno=600, col_offset=26), lineno=600, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=601, col_offset=8), 'charbuffer', Store(), lineno=601, col_offset=8)], Str(u'', lineno=601, col_offset=26), lineno=601, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=602, col_offset=8), 'linebuffer', Store(), lineno=602, col_offset=8)], Name('None', Load(), lineno=602, col_offset=26), lineno=602, col_offset=8)], [], lineno=591, col_offset=4), FunctionDef('seek', arguments([Name('self', Param(), lineno=604, col_offset=13), Name('offset', Param(), lineno=604, col_offset=19), Name('whence', Param(), lineno=604, col_offset=27)], None, None, [Num(0, lineno=604, col_offset=34)]), [Expr(Str(" Set the input stream's current position.\n\n            Resets the codec buffers used for keeping state.\n        ", lineno=608, col_offset=-1), lineno=608, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=609, col_offset=8), 'stream', Load(), lineno=609, col_offset=8), 'seek', Load(), lineno=609, col_offset=8), [Name('offset', Load(), lineno=609, col_offset=25), Name('whence', Load(), lineno=609, col_offset=33)], [], None, None, lineno=609, col_offset=8), lineno=609, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=610, col_offset=8), 'reset', Load(), lineno=610, col_offset=8), [], [], None, None, lineno=610, col_offset=8), lineno=610, col_offset=8)], [], lineno=604, col_offset=4), FunctionDef('next', arguments([Name('self', Param(), lineno=612, col_offset=13)], None, None, []), [Expr(Str(' Return the next decoded line from the input stream.', lineno=614, col_offset=8), lineno=614, col_offset=8), Assign([Name('line', Store(), lineno=615, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=615, col_offset=15), 'readline', Load(), lineno=615, col_offset=15), [], [], None, None, lineno=615, col_offset=15), lineno=615, col_offset=8), If(Name('line', Load(), lineno=616, col_offset=11), [Return(Name('line', Load(), lineno=617, col_offset=19), lineno=617, col_offset=12)], [], lineno=616, col_offset=8), Raise(Name('StopIteration', Load(), lineno=618, col_offset=14), None, None, lineno=618, col_offset=8)], [], lineno=612, col_offset=4), FunctionDef('__iter__', arguments([Name('self', Param(), lineno=620, col_offset=17)], None, None, []), [Return(Name('self', Load(), lineno=621, col_offset=15), lineno=621, col_offset=8)], [], lineno=620, col_offset=4), FunctionDef('__getattr__', arguments([Name('self', Param(), lineno=623, col_offset=20), Name('name', Param(), lineno=623, col_offset=26), Name('getattr', Param(), lineno=624, col_offset=20)], None, None, [Name('getattr', Load(), lineno=624, col_offset=28)]), [Expr(Str(' Inherit all other methods from the underlying stream.\n        ', lineno=627, col_offset=-1), lineno=627, col_offset=-1), Return(Call(Name('getattr', Load(), lineno=628, col_offset=15), [Attribute(Name('self', Load(), lineno=628, col_offset=23), 'stream', Load(), lineno=628, col_offset=23), Name('name', Load(), lineno=628, col_offset=36)], [], None, None, lineno=628, col_offset=15), lineno=628, col_offset=8)], [], lineno=623, col_offset=4), FunctionDef('__enter__', arguments([Name('self', Param(), lineno=630, col_offset=18)], None, None, []), [Return(Name('self', Load(), lineno=631, col_offset=15), lineno=631, col_offset=8)], [], lineno=630, col_offset=4), FunctionDef('__exit__', arguments([Name('self', Param(), lineno=633, col_offset=17), Name('type', Param(), lineno=633, col_offset=23), Name('value', Param(), lineno=633, col_offset=29), Name('tb', Param(), lineno=633, col_offset=36)], None, None, []), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=634, col_offset=8), 'stream', Load(), lineno=634, col_offset=8), 'close', Load(), lineno=634, col_offset=8), [], [], None, None, lineno=634, col_offset=8), lineno=634, col_offset=8)], [], lineno=633, col_offset=4)], [], lineno=393, col_offset=0), ClassDef('StreamReaderWriter', [], [Expr(Str(' StreamReaderWriter instances allow wrapping streams which\n        work in both read and write modes.\n\n        The design is such that one can use the factory functions\n        returned by the codec.lookup() function to construct the\n        instance.\n\n    ', lineno=647, col_offset=-1), lineno=647, col_offset=-1), Assign([Name('encoding', Store(), lineno=649, col_offset=4)], Str('unknown', lineno=649, col_offset=15), lineno=649, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=651, col_offset=17), Name('stream', Param(), lineno=651, col_offset=23), Name('Reader', Param(), lineno=651, col_offset=31), Name('Writer', Param(), lineno=651, col_offset=39), Name('errors', Param(), lineno=651, col_offset=47)], None, None, [Str('strict', lineno=651, col_offset=54)]), [Expr(Str(' Creates a StreamReaderWriter instance.\n\n            stream must be a Stream-like object.\n\n            Reader, Writer must be factory functions or classes\n            providing the StreamReader, StreamWriter interface resp.\n\n            Error handling is done in the same way as defined for the\n            StreamWriter/Readers.\n\n        ', lineno=663, col_offset=-1), lineno=663, col_offset=-1), Assign([Attribute(Name('self', Load(), lineno=664, col_offset=8), 'stream', Store(), lineno=664, col_offset=8)], Name('stream', Load(), lineno=664, col_offset=22), lineno=664, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=665, col_offset=8), 'reader', Store(), lineno=665, col_offset=8)], Call(Name('Reader', Load(), lineno=665, col_offset=22), [Name('stream', Load(), lineno=665, col_offset=29), Name('errors', Load(), lineno=665, col_offset=37)], [], None, None, lineno=665, col_offset=22), lineno=665, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=666, col_offset=8), 'writer', Store(), lineno=666, col_offset=8)], Call(Name('Writer', Load(), lineno=666, col_offset=22), [Name('stream', Load(), lineno=666, col_offset=29), Name('errors', Load(), lineno=666, col_offset=37)], [], None, None, lineno=666, col_offset=22), lineno=666, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=667, col_offset=8), 'errors', Store(), lineno=667, col_offset=8)], Name('errors', Load(), lineno=667, col_offset=22), lineno=667, col_offset=8)], [], lineno=651, col_offset=4), FunctionDef('read', arguments([Name('self', Param(), lineno=669, col_offset=13), Name('size', Param(), lineno=669, col_offset=19)], None, None, [Num(-1, lineno=669, col_offset=25)]), [Return(Call(Attribute(Attribute(Name('self', Load(), lineno=671, col_offset=15), 'reader', Load(), lineno=671, col_offset=15), 'read', Load(), lineno=671, col_offset=15), [Name('size', Load(), lineno=671, col_offset=32)], [], None, None, lineno=671, col_offset=15), lineno=671, col_offset=8)], [], lineno=669, col_offset=4), FunctionDef('readline', arguments([Name('self', Param(), lineno=673, col_offset=17), Name('size', Param(), lineno=673, col_offset=23)], None, None, [Name('None', Load(), lineno=673, col_offset=28)]), [Return(Call(Attribute(Attribute(Name('self', Load(), lineno=675, col_offset=15), 'reader', Load(), lineno=675, col_offset=15), 'readline', Load(), lineno=675, col_offset=15), [Name('size', Load(), lineno=675, col_offset=36)], [], None, None, lineno=675, col_offset=15), lineno=675, col_offset=8)], [], lineno=673, col_offset=4), FunctionDef('readlines', arguments([Name('self', Param(), lineno=677, col_offset=18), Name('sizehint', Param(), lineno=677, col_offset=24)], None, None, [Name('None', Load(), lineno=677, col_offset=33)]), [Return(Call(Attribute(Attribute(Name('self', Load(), lineno=679, col_offset=15), 'reader', Load(), lineno=679, col_offset=15), 'readlines', Load(), lineno=679, col_offset=15), [Name('sizehint', Load(), lineno=679, col_offset=37)], [], None, None, lineno=679, col_offset=15), lineno=679, col_offset=8)], [], lineno=677, col_offset=4), FunctionDef('next', arguments([Name('self', Param(), lineno=681, col_offset=13)], None, None, []), [Expr(Str(' Return the next decoded line from the input stream.', lineno=683, col_offset=8), lineno=683, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=684, col_offset=15), 'reader', Load(), lineno=684, col_offset=15), 'next', Load(), lineno=684, col_offset=15), [], [], None, None, lineno=684, col_offset=15), lineno=684, col_offset=8)], [], lineno=681, col_offset=4), FunctionDef('__iter__', arguments([Name('self', Param(), lineno=686, col_offset=17)], None, None, []), [Return(Name('self', Load(), lineno=687, col_offset=15), lineno=687, col_offset=8)], [], lineno=686, col_offset=4), FunctionDef('write', arguments([Name('self', Param(), lineno=689, col_offset=14), Name('data', Param(), lineno=689, col_offset=20)], None, None, []), [Return(Call(Attribute(Attribute(Name('self', Load(), lineno=691, col_offset=15), 'writer', Load(), lineno=691, col_offset=15), 'write', Load(), lineno=691, col_offset=15), [Name('data', Load(), lineno=691, col_offset=33)], [], None, None, lineno=691, col_offset=15), lineno=691, col_offset=8)], [], lineno=689, col_offset=4), FunctionDef('writelines', arguments([Name('self', Param(), lineno=693, col_offset=19), Name('list', Param(), lineno=693, col_offset=25)], None, None, []), [Return(Call(Attribute(Attribute(Name('self', Load(), lineno=695, col_offset=15), 'writer', Load(), lineno=695, col_offset=15), 'writelines', Load(), lineno=695, col_offset=15), [Name('list', Load(), lineno=695, col_offset=38)], [], None, None, lineno=695, col_offset=15), lineno=695, col_offset=8)], [], lineno=693, col_offset=4), FunctionDef('reset', arguments([Name('self', Param(), lineno=697, col_offset=14)], None, None, []), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=699, col_offset=8), 'reader', Load(), lineno=699, col_offset=8), 'reset', Load(), lineno=699, col_offset=8), [], [], None, None, lineno=699, col_offset=8), lineno=699, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=700, col_offset=8), 'writer', Load(), lineno=700, col_offset=8), 'reset', Load(), lineno=700, col_offset=8), [], [], None, None, lineno=700, col_offset=8), lineno=700, col_offset=8)], [], lineno=697, col_offset=4), FunctionDef('seek', arguments([Name('self', Param(), lineno=702, col_offset=13), Name('offset', Param(), lineno=702, col_offset=19), Name('whence', Param(), lineno=702, col_offset=27)], None, None, [Num(0, lineno=702, col_offset=34)]), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=703, col_offset=8), 'stream', Load(), lineno=703, col_offset=8), 'seek', Load(), lineno=703, col_offset=8), [Name('offset', Load(), lineno=703, col_offset=25), Name('whence', Load(), lineno=703, col_offset=33)], [], None, None, lineno=703, col_offset=8), lineno=703, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=704, col_offset=8), 'reader', Load(), lineno=704, col_offset=8), 'reset', Load(), lineno=704, col_offset=8), [], [], None, None, lineno=704, col_offset=8), lineno=704, col_offset=8), If(BoolOp(And(), [Compare(Name('whence', Load(), lineno=705, col_offset=11), [Eq()], [Num(0, lineno=705, col_offset=21)], lineno=705, col_offset=11), Compare(Name('offset', Load(), lineno=705, col_offset=27), [Eq()], [Num(0, lineno=705, col_offset=37)], lineno=705, col_offset=27)], lineno=705, col_offset=11), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=706, col_offset=12), 'writer', Load(), lineno=706, col_offset=12), 'reset', Load(), lineno=706, col_offset=12), [], [], None, None, lineno=706, col_offset=12), lineno=706, col_offset=12)], [], lineno=705, col_offset=8)], [], lineno=702, col_offset=4), FunctionDef('__getattr__', arguments([Name('self', Param(), lineno=708, col_offset=20), Name('name', Param(), lineno=708, col_offset=26), Name('getattr', Param(), lineno=709, col_offset=20)], None, None, [Name('getattr', Load(), lineno=709, col_offset=28)]), [Expr(Str(' Inherit all other methods from the underlying stream.\n        ', lineno=712, col_offset=-1), lineno=712, col_offset=-1), Return(Call(Name('getattr', Load(), lineno=713, col_offset=15), [Attribute(Name('self', Load(), lineno=713, col_offset=23), 'stream', Load(), lineno=713, col_offset=23), Name('name', Load(), lineno=713, col_offset=36)], [], None, None, lineno=713, col_offset=15), lineno=713, col_offset=8)], [], lineno=708, col_offset=4), FunctionDef('__enter__', arguments([Name('self', Param(), lineno=717, col_offset=18)], None, None, []), [Return(Name('self', Load(), lineno=718, col_offset=15), lineno=718, col_offset=8)], [], lineno=717, col_offset=4), FunctionDef('__exit__', arguments([Name('self', Param(), lineno=720, col_offset=17), Name('type', Param(), lineno=720, col_offset=23), Name('value', Param(), lineno=720, col_offset=29), Name('tb', Param(), lineno=720, col_offset=36)], None, None, []), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=721, col_offset=8), 'stream', Load(), lineno=721, col_offset=8), 'close', Load(), lineno=721, col_offset=8), [], [], None, None, lineno=721, col_offset=8), lineno=721, col_offset=8)], [], lineno=720, col_offset=4)], [], lineno=638, col_offset=0), ClassDef('StreamRecoder', [], [Expr(Str(' StreamRecoder instances provide a frontend - backend\n        view of encoding data.\n\n        They use the complete set of APIs returned by the\n        codecs.lookup() function to implement their task.\n\n        Data written to the stream is first decoded into an\n        intermediate format (which is dependent on the given codec\n        combination) and then written to the stream using an instance\n        of the provided Writer class.\n\n        In the other direction, data is read from the stream using a\n        Reader instance and then return encoded data to the caller.\n\n    ', lineno=741, col_offset=-1), lineno=741, col_offset=-1), Assign([Name('data_encoding', Store(), lineno=743, col_offset=4)], Str('unknown', lineno=743, col_offset=20), lineno=743, col_offset=4), Assign([Name('file_encoding', Store(), lineno=744, col_offset=4)], Str('unknown', lineno=744, col_offset=20), lineno=744, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=746, col_offset=17), Name('stream', Param(), lineno=746, col_offset=23), Name('encode', Param(), lineno=746, col_offset=31), Name('decode', Param(), lineno=746, col_offset=39), Name('Reader', Param(), lineno=746, col_offset=47), Name('Writer', Param(), lineno=746, col_offset=55), Name('errors', Param(), lineno=747, col_offset=17)], None, None, [Str('strict', lineno=747, col_offset=24)]), [Expr(Str(' Creates a StreamRecoder instance which implements a two-way\n            conversion: encode and decode work on the frontend (the\n            input to .read() and output of .write()) while\n            Reader and Writer work on the backend (reading and\n            writing to the stream).\n\n            You can use these objects to do transparent direct\n            recodings from e.g. latin-1 to utf-8 and back.\n\n            stream must be a file-like object.\n\n            encode, decode must adhere to the Codec interface, Reader,\n            Writer must be factory functions or classes providing the\n            StreamReader, StreamWriter interface resp.\n\n            encode and decode are needed for the frontend translation,\n            Reader and Writer for the backend translation. Unicode is\n            used as intermediate encoding.\n\n            Error handling is done in the same way as defined for the\n            StreamWriter/Readers.\n\n        ', lineno=771, col_offset=-1), lineno=771, col_offset=-1), Assign([Attribute(Name('self', Load(), lineno=772, col_offset=8), 'stream', Store(), lineno=772, col_offset=8)], Name('stream', Load(), lineno=772, col_offset=22), lineno=772, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=773, col_offset=8), 'encode', Store(), lineno=773, col_offset=8)], Name('encode', Load(), lineno=773, col_offset=22), lineno=773, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=774, col_offset=8), 'decode', Store(), lineno=774, col_offset=8)], Name('decode', Load(), lineno=774, col_offset=22), lineno=774, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=775, col_offset=8), 'reader', Store(), lineno=775, col_offset=8)], Call(Name('Reader', Load(), lineno=775, col_offset=22), [Name('stream', Load(), lineno=775, col_offset=29), Name('errors', Load(), lineno=775, col_offset=37)], [], None, None, lineno=775, col_offset=22), lineno=775, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=776, col_offset=8), 'writer', Store(), lineno=776, col_offset=8)], Call(Name('Writer', Load(), lineno=776, col_offset=22), [Name('stream', Load(), lineno=776, col_offset=29), Name('errors', Load(), lineno=776, col_offset=37)], [], None, None, lineno=776, col_offset=22), lineno=776, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=777, col_offset=8), 'errors', Store(), lineno=777, col_offset=8)], Name('errors', Load(), lineno=777, col_offset=22), lineno=777, col_offset=8)], [], lineno=746, col_offset=4), FunctionDef('read', arguments([Name('self', Param(), lineno=779, col_offset=13), Name('size', Param(), lineno=779, col_offset=19)], None, None, [Num(-1, lineno=779, col_offset=25)]), [Assign([Name('data', Store(), lineno=781, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=781, col_offset=15), 'reader', Load(), lineno=781, col_offset=15), 'read', Load(), lineno=781, col_offset=15), [Name('size', Load(), lineno=781, col_offset=32)], [], None, None, lineno=781, col_offset=15), lineno=781, col_offset=8), Assign([Tuple([Name('data', Store(), lineno=782, col_offset=8), Name('bytesencoded', Store(), lineno=782, col_offset=14)], Store(), lineno=782, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=782, col_offset=29), 'encode', Load(), lineno=782, col_offset=29), [Name('data', Load(), lineno=782, col_offset=41), Attribute(Name('self', Load(), lineno=782, col_offset=47), 'errors', Load(), lineno=782, col_offset=47)], [], None, None, lineno=782, col_offset=29), lineno=782, col_offset=8), Return(Name('data', Load(), lineno=783, col_offset=15), lineno=783, col_offset=8)], [], lineno=779, col_offset=4), FunctionDef('readline', arguments([Name('self', Param(), lineno=785, col_offset=17), Name('size', Param(), lineno=785, col_offset=23)], None, None, [Name('None', Load(), lineno=785, col_offset=28)]), [If(Compare(Name('size', Load(), lineno=787, col_offset=11), [Is()], [Name('None', Load(), lineno=787, col_offset=19)], lineno=787, col_offset=11), [Assign([Name('data', Store(), lineno=788, col_offset=12)], Call(Attribute(Attribute(Name('self', Load(), lineno=788, col_offset=19), 'reader', Load(), lineno=788, col_offset=19), 'readline', Load(), lineno=788, col_offset=19), [], [], None, None, lineno=788, col_offset=19), lineno=788, col_offset=12)], [Assign([Name('data', Store(), lineno=790, col_offset=12)], Call(Attribute(Attribute(Name('self', Load(), lineno=790, col_offset=19), 'reader', Load(), lineno=790, col_offset=19), 'readline', Load(), lineno=790, col_offset=19), [Name('size', Load(), lineno=790, col_offset=40)], [], None, None, lineno=790, col_offset=19), lineno=790, col_offset=12)], lineno=787, col_offset=8), Assign([Tuple([Name('data', Store(), lineno=791, col_offset=8), Name('bytesencoded', Store(), lineno=791, col_offset=14)], Store(), lineno=791, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=791, col_offset=29), 'encode', Load(), lineno=791, col_offset=29), [Name('data', Load(), lineno=791, col_offset=41), Attribute(Name('self', Load(), lineno=791, col_offset=47), 'errors', Load(), lineno=791, col_offset=47)], [], None, None, lineno=791, col_offset=29), lineno=791, col_offset=8), Return(Name('data', Load(), lineno=792, col_offset=15), lineno=792, col_offset=8)], [], lineno=785, col_offset=4), FunctionDef('readlines', arguments([Name('self', Param(), lineno=794, col_offset=18), Name('sizehint', Param(), lineno=794, col_offset=24)], None, None, [Name('None', Load(), lineno=794, col_offset=33)]), [Assign([Name('data', Store(), lineno=796, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=796, col_offset=15), 'reader', Load(), lineno=796, col_offset=15), 'read', Load(), lineno=796, col_offset=15), [], [], None, None, lineno=796, col_offset=15), lineno=796, col_offset=8), Assign([Tuple([Name('data', Store(), lineno=797, col_offset=8), Name('bytesencoded', Store(), lineno=797, col_offset=14)], Store(), lineno=797, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=797, col_offset=29), 'encode', Load(), lineno=797, col_offset=29), [Name('data', Load(), lineno=797, col_offset=41), Attribute(Name('self', Load(), lineno=797, col_offset=47), 'errors', Load(), lineno=797, col_offset=47)], [], None, None, lineno=797, col_offset=29), lineno=797, col_offset=8), Return(Call(Attribute(Name('data', Load(), lineno=798, col_offset=15), 'splitlines', Load(), lineno=798, col_offset=15), [Num(1, lineno=798, col_offset=31)], [], None, None, lineno=798, col_offset=15), lineno=798, col_offset=8)], [], lineno=794, col_offset=4), FunctionDef('next', arguments([Name('self', Param(), lineno=800, col_offset=13)], None, None, []), [Expr(Str(' Return the next decoded line from the input stream.', lineno=802, col_offset=8), lineno=802, col_offset=8), Assign([Name('data', Store(), lineno=803, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=803, col_offset=15), 'reader', Load(), lineno=803, col_offset=15), 'next', Load(), lineno=803, col_offset=15), [], [], None, None, lineno=803, col_offset=15), lineno=803, col_offset=8), Assign([Tuple([Name('data', Store(), lineno=804, col_offset=8), Name('bytesencoded', Store(), lineno=804, col_offset=14)], Store(), lineno=804, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=804, col_offset=29), 'encode', Load(), lineno=804, col_offset=29), [Name('data', Load(), lineno=804, col_offset=41), Attribute(Name('self', Load(), lineno=804, col_offset=47), 'errors', Load(), lineno=804, col_offset=47)], [], None, None, lineno=804, col_offset=29), lineno=804, col_offset=8), Return(Name('data', Load(), lineno=805, col_offset=15), lineno=805, col_offset=8)], [], lineno=800, col_offset=4), FunctionDef('__iter__', arguments([Name('self', Param(), lineno=807, col_offset=17)], None, None, []), [Return(Name('self', Load(), lineno=808, col_offset=15), lineno=808, col_offset=8)], [], lineno=807, col_offset=4), FunctionDef('write', arguments([Name('self', Param(), lineno=810, col_offset=14), Name('data', Param(), lineno=810, col_offset=20)], None, None, []), [Assign([Tuple([Name('data', Store(), lineno=812, col_offset=8), Name('bytesdecoded', Store(), lineno=812, col_offset=14)], Store(), lineno=812, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=812, col_offset=29), 'decode', Load(), lineno=812, col_offset=29), [Name('data', Load(), lineno=812, col_offset=41), Attribute(Name('self', Load(), lineno=812, col_offset=47), 'errors', Load(), lineno=812, col_offset=47)], [], None, None, lineno=812, col_offset=29), lineno=812, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=813, col_offset=15), 'writer', Load(), lineno=813, col_offset=15), 'write', Load(), lineno=813, col_offset=15), [Name('data', Load(), lineno=813, col_offset=33)], [], None, None, lineno=813, col_offset=15), lineno=813, col_offset=8)], [], lineno=810, col_offset=4), FunctionDef('writelines', arguments([Name('self', Param(), lineno=815, col_offset=19), Name('list', Param(), lineno=815, col_offset=25)], None, None, []), [Assign([Name('data', Store(), lineno=817, col_offset=8)], Call(Attribute(Str('', lineno=817, col_offset=15), 'join', Load(), lineno=817, col_offset=15), [Name('list', Load(), lineno=817, col_offset=23)], [], None, None, lineno=817, col_offset=15), lineno=817, col_offset=8), Assign([Tuple([Name('data', Store(), lineno=818, col_offset=8), Name('bytesdecoded', Store(), lineno=818, col_offset=14)], Store(), lineno=818, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=818, col_offset=29), 'decode', Load(), lineno=818, col_offset=29), [Name('data', Load(), lineno=818, col_offset=41), Attribute(Name('self', Load(), lineno=818, col_offset=47), 'errors', Load(), lineno=818, col_offset=47)], [], None, None, lineno=818, col_offset=29), lineno=818, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=819, col_offset=15), 'writer', Load(), lineno=819, col_offset=15), 'write', Load(), lineno=819, col_offset=15), [Name('data', Load(), lineno=819, col_offset=33)], [], None, None, lineno=819, col_offset=15), lineno=819, col_offset=8)], [], lineno=815, col_offset=4), FunctionDef('reset', arguments([Name('self', Param(), lineno=821, col_offset=14)], None, None, []), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=823, col_offset=8), 'reader', Load(), lineno=823, col_offset=8), 'reset', Load(), lineno=823, col_offset=8), [], [], None, None, lineno=823, col_offset=8), lineno=823, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=824, col_offset=8), 'writer', Load(), lineno=824, col_offset=8), 'reset', Load(), lineno=824, col_offset=8), [], [], None, None, lineno=824, col_offset=8), lineno=824, col_offset=8)], [], lineno=821, col_offset=4), FunctionDef('__getattr__', arguments([Name('self', Param(), lineno=826, col_offset=20), Name('name', Param(), lineno=826, col_offset=26), Name('getattr', Param(), lineno=827, col_offset=20)], None, None, [Name('getattr', Load(), lineno=827, col_offset=28)]), [Expr(Str(' Inherit all other methods from the underlying stream.\n        ', lineno=830, col_offset=-1), lineno=830, col_offset=-1), Return(Call(Name('getattr', Load(), lineno=831, col_offset=15), [Attribute(Name('self', Load(), lineno=831, col_offset=23), 'stream', Load(), lineno=831, col_offset=23), Name('name', Load(), lineno=831, col_offset=36)], [], None, None, lineno=831, col_offset=15), lineno=831, col_offset=8)], [], lineno=826, col_offset=4), FunctionDef('__enter__', arguments([Name('self', Param(), lineno=833, col_offset=18)], None, None, []), [Return(Name('self', Load(), lineno=834, col_offset=15), lineno=834, col_offset=8)], [], lineno=833, col_offset=4), FunctionDef('__exit__', arguments([Name('self', Param(), lineno=836, col_offset=17), Name('type', Param(), lineno=836, col_offset=23), Name('value', Param(), lineno=836, col_offset=29), Name('tb', Param(), lineno=836, col_offset=36)], None, None, []), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=837, col_offset=8), 'stream', Load(), lineno=837, col_offset=8), 'close', Load(), lineno=837, col_offset=8), [], [], None, None, lineno=837, col_offset=8), lineno=837, col_offset=8)], [], lineno=836, col_offset=4)], [], lineno=725, col_offset=0), FunctionDef('open', arguments([Name('filename', Param(), lineno=841, col_offset=9), Name('mode', Param(), lineno=841, col_offset=19), Name('encoding', Param(), lineno=841, col_offset=30), Name('errors', Param(), lineno=841, col_offset=45), Name('buffering', Param(), lineno=841, col_offset=62)], None, None, [Str('rb', lineno=841, col_offset=24), Name('None', Load(), lineno=841, col_offset=39), Str('strict', lineno=841, col_offset=52), Num(1, lineno=841, col_offset=72)]), [Expr(Str(" Open an encoded file using the given mode and return\n        a wrapped version providing transparent encoding/decoding.\n\n        Note: The wrapped version will only accept the object format\n        defined by the codecs, i.e. Unicode objects for most builtin\n        codecs. Output is also codec dependent and will usually be\n        Unicode as well.\n\n        Files are always opened in binary mode, even if no binary mode\n        was specified. This is done to avoid data loss due to encodings\n        using 8-bit values. The default file mode is 'rb' meaning to\n        open the file in binary read mode.\n\n        encoding specifies the encoding which is to be used for the\n        file.\n\n        errors may be given to define the error handling. It defaults\n        to 'strict' which causes ValueErrors to be raised in case an\n        encoding error occurs.\n\n        buffering has the same meaning as for the builtin open() API.\n        It defaults to line buffered.\n\n        The returned wrapped file object provides an extra attribute\n        .encoding which allows querying the used encoding. This\n        attribute is only available if an encoding was specified as\n        parameter.\n\n    ", lineno=871, col_offset=-1), lineno=871, col_offset=-1), If(Compare(Name('encoding', Load(), lineno=872, col_offset=7), [IsNot()], [Name('None', Load(), lineno=872, col_offset=23)], lineno=872, col_offset=7), [If(Compare(Str('U', lineno=873, col_offset=11), [In()], [Name('mode', Load(), lineno=873, col_offset=18)], lineno=873, col_offset=11), [Assign([Name('mode', Store(), lineno=875, col_offset=12)], Call(Attribute(Call(Attribute(Name('mode', Load(), lineno=875, col_offset=19), 'strip', Load(), lineno=875, col_offset=19), [], [], None, None, lineno=875, col_offset=19), 'replace', Load(), lineno=875, col_offset=19), [Str('U', lineno=875, col_offset=40), Str('', lineno=875, col_offset=45)], [], None, None, lineno=875, col_offset=19), lineno=875, col_offset=12), If(Compare(Subscript(Name('mode', Load(), lineno=876, col_offset=15), Slice(None, Num(1, lineno=876, col_offset=21), None), Load(), lineno=876, col_offset=15), [NotIn()], [Call(Name('set', Load(), lineno=876, col_offset=31), [Str('rwa', lineno=876, col_offset=35)], [], None, None, lineno=876, col_offset=31)], lineno=876, col_offset=15), [Assign([Name('mode', Store(), lineno=877, col_offset=16)], BinOp(Str('r', lineno=877, col_offset=23), Add(), Name('mode', Load(), lineno=877, col_offset=29), lineno=877, col_offset=23), lineno=877, col_offset=16)], [], lineno=876, col_offset=12)], [], lineno=873, col_offset=8), If(Compare(Str('b', lineno=878, col_offset=11), [NotIn()], [Name('mode', Load(), lineno=878, col_offset=22)], lineno=878, col_offset=11), [Assign([Name('mode', Store(), lineno=880, col_offset=12)], BinOp(Name('mode', Load(), lineno=880, col_offset=19), Add(), Str('b', lineno=880, col_offset=26), lineno=880, col_offset=19), lineno=880, col_offset=12)], [], lineno=878, col_offset=8)], [], lineno=872, col_offset=4), Assign([Name('file', Store(), lineno=881, col_offset=4)], Call(Attribute(Name('__builtin__', Load(), lineno=881, col_offset=11), 'open', Load(), lineno=881, col_offset=11), [Name('filename', Load(), lineno=881, col_offset=28), Name('mode', Load(), lineno=881, col_offset=38), Name('buffering', Load(), lineno=881, col_offset=44)], [], None, None, lineno=881, col_offset=11), lineno=881, col_offset=4), If(Compare(Name('encoding', Load(), lineno=882, col_offset=7), [Is()], [Name('None', Load(), lineno=882, col_offset=19)], lineno=882, col_offset=7), [Return(Name('file', Load(), lineno=883, col_offset=15), lineno=883, col_offset=8)], [], lineno=882, col_offset=4), Assign([Name('info', Store(), lineno=884, col_offset=4)], Call(Name('lookup', Load(), lineno=884, col_offset=11), [Name('encoding', Load(), lineno=884, col_offset=18)], [], None, None, lineno=884, col_offset=11), lineno=884, col_offset=4), Assign([Name('srw', Store(), lineno=885, col_offset=4)], Call(Name('StreamReaderWriter', Load(), lineno=885, col_offset=10), [Name('file', Load(), lineno=885, col_offset=29), Attribute(Name('info', Load(), lineno=885, col_offset=35), 'streamreader', Load(), lineno=885, col_offset=35), Attribute(Name('info', Load(), lineno=885, col_offset=54), 'streamwriter', Load(), lineno=885, col_offset=54), Name('errors', Load(), lineno=885, col_offset=73)], [], None, None, lineno=885, col_offset=10), lineno=885, col_offset=4), Assign([Attribute(Name('srw', Load(), lineno=887, col_offset=4), 'encoding', Store(), lineno=887, col_offset=4)], Name('encoding', Load(), lineno=887, col_offset=19), lineno=887, col_offset=4), Return(Name('srw', Load(), lineno=888, col_offset=11), lineno=888, col_offset=4)], [], lineno=841, col_offset=0), FunctionDef('EncodedFile', arguments([Name('file', Param(), lineno=890, col_offset=16), Name('data_encoding', Param(), lineno=890, col_offset=22), Name('file_encoding', Param(), lineno=890, col_offset=37), Name('errors', Param(), lineno=890, col_offset=57)], None, None, [Name('None', Load(), lineno=890, col_offset=51), Str('strict', lineno=890, col_offset=64)]), [Expr(Str(" Return a wrapped version of file which provides transparent\n        encoding translation.\n\n        Strings written to the wrapped file are interpreted according\n        to the given data_encoding and then written to the original\n        file as string using file_encoding. The intermediate encoding\n        will usually be Unicode but depends on the specified codecs.\n\n        Strings are read from the file using file_encoding and then\n        passed back to the caller as string using data_encoding.\n\n        If file_encoding is not given, it defaults to data_encoding.\n\n        errors may be given to define the error handling. It defaults\n        to 'strict' which causes ValueErrors to be raised in case an\n        encoding error occurs.\n\n        The returned wrapped file object provides two extra attributes\n        .data_encoding and .file_encoding which reflect the given\n        parameters of the same name. The attributes can be used for\n        introspection by Python programs.\n\n    ", lineno=914, col_offset=-1), lineno=914, col_offset=-1), If(Compare(Name('file_encoding', Load(), lineno=915, col_offset=7), [Is()], [Name('None', Load(), lineno=915, col_offset=24)], lineno=915, col_offset=7), [Assign([Name('file_encoding', Store(), lineno=916, col_offset=8)], Name('data_encoding', Load(), lineno=916, col_offset=24), lineno=916, col_offset=8)], [], lineno=915, col_offset=4), Assign([Name('data_info', Store(), lineno=917, col_offset=4)], Call(Name('lookup', Load(), lineno=917, col_offset=16), [Name('data_encoding', Load(), lineno=917, col_offset=23)], [], None, None, lineno=917, col_offset=16), lineno=917, col_offset=4), Assign([Name('file_info', Store(), lineno=918, col_offset=4)], Call(Name('lookup', Load(), lineno=918, col_offset=16), [Name('file_encoding', Load(), lineno=918, col_offset=23)], [], None, None, lineno=918, col_offset=16), lineno=918, col_offset=4), Assign([Name('sr', Store(), lineno=919, col_offset=4)], Call(Name('StreamRecoder', Load(), lineno=919, col_offset=9), [Name('file', Load(), lineno=919, col_offset=23), Attribute(Name('data_info', Load(), lineno=919, col_offset=29), 'encode', Load(), lineno=919, col_offset=29), Attribute(Name('data_info', Load(), lineno=919, col_offset=47), 'decode', Load(), lineno=919, col_offset=47), Attribute(Name('file_info', Load(), lineno=920, col_offset=23), 'streamreader', Load(), lineno=920, col_offset=23), Attribute(Name('file_info', Load(), lineno=920, col_offset=47), 'streamwriter', Load(), lineno=920, col_offset=47), Name('errors', Load(), lineno=920, col_offset=71)], [], None, None, lineno=919, col_offset=9), lineno=919, col_offset=4), Assign([Attribute(Name('sr', Load(), lineno=922, col_offset=4), 'data_encoding', Store(), lineno=922, col_offset=4)], Name('data_encoding', Load(), lineno=922, col_offset=23), lineno=922, col_offset=4), Assign([Attribute(Name('sr', Load(), lineno=923, col_offset=4), 'file_encoding', Store(), lineno=923, col_offset=4)], Name('file_encoding', Load(), lineno=923, col_offset=23), lineno=923, col_offset=4), Return(Name('sr', Load(), lineno=924, col_offset=11), lineno=924, col_offset=4)], [], lineno=890, col_offset=0), FunctionDef('getencoder', arguments([Name('encoding', Param(), lineno=928, col_offset=15)], None, None, []), [Expr(Str(' Lookup up the codec for the given encoding and return\n        its encoder function.\n\n        Raises a LookupError in case the encoding cannot be found.\n\n    ', lineno=935, col_offset=-1), lineno=935, col_offset=-1), Return(Attribute(Call(Name('lookup', Load(), lineno=936, col_offset=11), [Name('encoding', Load(), lineno=936, col_offset=18)], [], None, None, lineno=936, col_offset=11), 'encode', Load(), lineno=936, col_offset=11), lineno=936, col_offset=4)], [], lineno=928, col_offset=0), FunctionDef('getdecoder', arguments([Name('encoding', Param(), lineno=938, col_offset=15)], None, None, []), [Expr(Str(' Lookup up the codec for the given encoding and return\n        its decoder function.\n\n        Raises a LookupError in case the encoding cannot be found.\n\n    ', lineno=945, col_offset=-1), lineno=945, col_offset=-1), Return(Attribute(Call(Name('lookup', Load(), lineno=946, col_offset=11), [Name('encoding', Load(), lineno=946, col_offset=18)], [], None, None, lineno=946, col_offset=11), 'decode', Load(), lineno=946, col_offset=11), lineno=946, col_offset=4)], [], lineno=938, col_offset=0), FunctionDef('getincrementalencoder', arguments([Name('encoding', Param(), lineno=948, col_offset=26)], None, None, []), [Expr(Str(" Lookup up the codec for the given encoding and return\n        its IncrementalEncoder class or factory function.\n\n        Raises a LookupError in case the encoding cannot be found\n        or the codecs doesn't provide an incremental encoder.\n\n    ", lineno=956, col_offset=-1), lineno=956, col_offset=-1), Assign([Name('encoder', Store(), lineno=957, col_offset=4)], Attribute(Call(Name('lookup', Load(), lineno=957, col_offset=14), [Name('encoding', Load(), lineno=957, col_offset=21)], [], None, None, lineno=957, col_offset=14), 'incrementalencoder', Load(), lineno=957, col_offset=14), lineno=957, col_offset=4), If(Compare(Name('encoder', Load(), lineno=958, col_offset=7), [Is()], [Name('None', Load(), lineno=958, col_offset=18)], lineno=958, col_offset=7), [Raise(Call(Name('LookupError', Load(), lineno=959, col_offset=14), [Name('encoding', Load(), lineno=959, col_offset=26)], [], None, None, lineno=959, col_offset=14), None, None, lineno=959, col_offset=8)], [], lineno=958, col_offset=4), Return(Name('encoder', Load(), lineno=960, col_offset=11), lineno=960, col_offset=4)], [], lineno=948, col_offset=0), FunctionDef('getincrementaldecoder', arguments([Name('encoding', Param(), lineno=962, col_offset=26)], None, None, []), [Expr(Str(" Lookup up the codec for the given encoding and return\n        its IncrementalDecoder class or factory function.\n\n        Raises a LookupError in case the encoding cannot be found\n        or the codecs doesn't provide an incremental decoder.\n\n    ", lineno=970, col_offset=-1), lineno=970, col_offset=-1), Assign([Name('decoder', Store(), lineno=971, col_offset=4)], Attribute(Call(Name('lookup', Load(), lineno=971, col_offset=14), [Name('encoding', Load(), lineno=971, col_offset=21)], [], None, None, lineno=971, col_offset=14), 'incrementaldecoder', Load(), lineno=971, col_offset=14), lineno=971, col_offset=4), If(Compare(Name('decoder', Load(), lineno=972, col_offset=7), [Is()], [Name('None', Load(), lineno=972, col_offset=18)], lineno=972, col_offset=7), [Raise(Call(Name('LookupError', Load(), lineno=973, col_offset=14), [Name('encoding', Load(), lineno=973, col_offset=26)], [], None, None, lineno=973, col_offset=14), None, None, lineno=973, col_offset=8)], [], lineno=972, col_offset=4), Return(Name('decoder', Load(), lineno=974, col_offset=11), lineno=974, col_offset=4)], [], lineno=962, col_offset=0), FunctionDef('getreader', arguments([Name('encoding', Param(), lineno=976, col_offset=14)], None, None, []), [Expr(Str(' Lookup up the codec for the given encoding and return\n        its StreamReader class or factory function.\n\n        Raises a LookupError in case the encoding cannot be found.\n\n    ', lineno=983, col_offset=-1), lineno=983, col_offset=-1), Return(Attribute(Call(Name('lookup', Load(), lineno=984, col_offset=11), [Name('encoding', Load(), lineno=984, col_offset=18)], [], None, None, lineno=984, col_offset=11), 'streamreader', Load(), lineno=984, col_offset=11), lineno=984, col_offset=4)], [], lineno=976, col_offset=0), FunctionDef('getwriter', arguments([Name('encoding', Param(), lineno=986, col_offset=14)], None, None, []), [Expr(Str(' Lookup up the codec for the given encoding and return\n        its StreamWriter class or factory function.\n\n        Raises a LookupError in case the encoding cannot be found.\n\n    ', lineno=993, col_offset=-1), lineno=993, col_offset=-1), Return(Attribute(Call(Name('lookup', Load(), lineno=994, col_offset=11), [Name('encoding', Load(), lineno=994, col_offset=18)], [], None, None, lineno=994, col_offset=11), 'streamwriter', Load(), lineno=994, col_offset=11), lineno=994, col_offset=4)], [], lineno=986, col_offset=0), FunctionDef('iterencode', arguments([Name('iterator', Param(), lineno=996, col_offset=15), Name('encoding', Param(), lineno=996, col_offset=25), Name('errors', Param(), lineno=996, col_offset=35)], None, 'kwargs', [Str('strict', lineno=996, col_offset=42)]), [Expr(Str('\n    Encoding iterator.\n\n    Encodes the input strings from the iterator using a IncrementalEncoder.\n\n    errors and kwargs are passed through to the IncrementalEncoder\n    constructor.\n    ', lineno=1004, col_offset=-1), lineno=1004, col_offset=-1), Assign([Name('encoder', Store(), lineno=1005, col_offset=4)], Call(Call(Name('getincrementalencoder', Load(), lineno=1005, col_offset=14), [Name('encoding', Load(), lineno=1005, col_offset=36)], [], None, None, lineno=1005, col_offset=14), [Name('errors', Load(), lineno=1005, col_offset=46)], [], None, Name('kwargs', Load(), lineno=1005, col_offset=56), lineno=1005, col_offset=14), lineno=1005, col_offset=4), For(Name('input', Store(), lineno=1006, col_offset=8), Name('iterator', Load(), lineno=1006, col_offset=17), [Assign([Name('output', Store(), lineno=1007, col_offset=8)], Call(Attribute(Name('encoder', Load(), lineno=1007, col_offset=17), 'encode', Load(), lineno=1007, col_offset=17), [Name('input', Load(), lineno=1007, col_offset=32)], [], None, None, lineno=1007, col_offset=17), lineno=1007, col_offset=8), If(Name('output', Load(), lineno=1008, col_offset=11), [Expr(Yield(Name('output', Load(), lineno=1009, col_offset=18), lineno=1009, col_offset=12), lineno=1009, col_offset=12)], [], lineno=1008, col_offset=8)], [], lineno=1006, col_offset=4), Assign([Name('output', Store(), lineno=1010, col_offset=4)], Call(Attribute(Name('encoder', Load(), lineno=1010, col_offset=13), 'encode', Load(), lineno=1010, col_offset=13), [Str('', lineno=1010, col_offset=28), Name('True', Load(), lineno=1010, col_offset=32)], [], None, None, lineno=1010, col_offset=13), lineno=1010, col_offset=4), If(Name('output', Load(), lineno=1011, col_offset=7), [Expr(Yield(Name('output', Load(), lineno=1012, col_offset=14), lineno=1012, col_offset=8), lineno=1012, col_offset=8)], [], lineno=1011, col_offset=4)], [], lineno=996, col_offset=0), FunctionDef('iterdecode', arguments([Name('iterator', Param(), lineno=1014, col_offset=15), Name('encoding', Param(), lineno=1014, col_offset=25), Name('errors', Param(), lineno=1014, col_offset=35)], None, 'kwargs', [Str('strict', lineno=1014, col_offset=42)]), [Expr(Str('\n    Decoding iterator.\n\n    Decodes the input strings from the iterator using a IncrementalDecoder.\n\n    errors and kwargs are passed through to the IncrementalDecoder\n    constructor.\n    ', lineno=1022, col_offset=-1), lineno=1022, col_offset=-1), Assign([Name('decoder', Store(), lineno=1023, col_offset=4)], Call(Call(Name('getincrementaldecoder', Load(), lineno=1023, col_offset=14), [Name('encoding', Load(), lineno=1023, col_offset=36)], [], None, None, lineno=1023, col_offset=14), [Name('errors', Load(), lineno=1023, col_offset=46)], [], None, Name('kwargs', Load(), lineno=1023, col_offset=56), lineno=1023, col_offset=14), lineno=1023, col_offset=4), For(Name('input', Store(), lineno=1024, col_offset=8), Name('iterator', Load(), lineno=1024, col_offset=17), [Assign([Name('output', Store(), lineno=1025, col_offset=8)], Call(Attribute(Name('decoder', Load(), lineno=1025, col_offset=17), 'decode', Load(), lineno=1025, col_offset=17), [Name('input', Load(), lineno=1025, col_offset=32)], [], None, None, lineno=1025, col_offset=17), lineno=1025, col_offset=8), If(Name('output', Load(), lineno=1026, col_offset=11), [Expr(Yield(Name('output', Load(), lineno=1027, col_offset=18), lineno=1027, col_offset=12), lineno=1027, col_offset=12)], [], lineno=1026, col_offset=8)], [], lineno=1024, col_offset=4), Assign([Name('output', Store(), lineno=1028, col_offset=4)], Call(Attribute(Name('decoder', Load(), lineno=1028, col_offset=13), 'decode', Load(), lineno=1028, col_offset=13), [Str('', lineno=1028, col_offset=28), Name('True', Load(), lineno=1028, col_offset=32)], [], None, None, lineno=1028, col_offset=13), lineno=1028, col_offset=4), If(Name('output', Load(), lineno=1029, col_offset=7), [Expr(Yield(Name('output', Load(), lineno=1030, col_offset=14), lineno=1030, col_offset=8), lineno=1030, col_offset=8)], [], lineno=1029, col_offset=4)], [], lineno=1014, col_offset=0), FunctionDef('make_identity_dict', arguments([Name('rng', Param(), lineno=1034, col_offset=23)], None, None, []), [Expr(Str(' make_identity_dict(rng) -> dict\n\n        Return a dictionary where elements of the rng sequence are\n        mapped to themselves.\n\n    ', lineno=1041, col_offset=-1), lineno=1041, col_offset=-1), Assign([Name('res', Store(), lineno=1042, col_offset=4)], Dict([], [], lineno=1042, col_offset=10), lineno=1042, col_offset=4), For(Name('i', Store(), lineno=1043, col_offset=8), Name('rng', Load(), lineno=1043, col_offset=13), [Assign([Subscript(Name('res', Load(), lineno=1044, col_offset=8), Index(Name('i', Load(), lineno=1044, col_offset=12)), Store(), lineno=1044, col_offset=8)], Name('i', Load(), lineno=1044, col_offset=15), lineno=1044, col_offset=8)], [], lineno=1043, col_offset=4), Return(Name('res', Load(), lineno=1045, col_offset=11), lineno=1045, col_offset=4)], [], lineno=1034, col_offset=0), FunctionDef('make_encoding_map', arguments([Name('decoding_map', Param(), lineno=1047, col_offset=22)], None, None, []), [Expr(Str(' Creates an encoding map from a decoding map.\n\n        If a target mapping in the decoding map occurs multiple\n        times, then that target is mapped to None (undefined mapping),\n        causing an exception when encountered by the charmap codec\n        during translation.\n\n        One example where this happens is cp875.py which decodes\n        multiple character to \\u001a.\n\n    ', lineno=1059, col_offset=-1), lineno=1059, col_offset=-1), Assign([Name('m', Store(), lineno=1060, col_offset=4)], Dict([], [], lineno=1060, col_offset=8), lineno=1060, col_offset=4), For(Tuple([Name('k', Store(), lineno=1061, col_offset=8), Name('v', Store(), lineno=1061, col_offset=10)], Store(), lineno=1061, col_offset=8), Call(Attribute(Name('decoding_map', Load(), lineno=1061, col_offset=15), 'items', Load(), lineno=1061, col_offset=15), [], [], None, None, lineno=1061, col_offset=15), [If(UnaryOp(Not(), Compare(Name('v', Load(), lineno=1062, col_offset=15), [In()], [Name('m', Load(), lineno=1062, col_offset=20)], lineno=1062, col_offset=15), lineno=1062, col_offset=11), [Assign([Subscript(Name('m', Load(), lineno=1063, col_offset=12), Index(Name('v', Load(), lineno=1063, col_offset=14)), Store(), lineno=1063, col_offset=12)], Name('k', Load(), lineno=1063, col_offset=19), lineno=1063, col_offset=12)], [Assign([Subscript(Name('m', Load(), lineno=1065, col_offset=12), Index(Name('v', Load(), lineno=1065, col_offset=14)), Store(), lineno=1065, col_offset=12)], Name('None', Load(), lineno=1065, col_offset=19), lineno=1065, col_offset=12)], lineno=1062, col_offset=8)], [], lineno=1061, col_offset=4), Return(Name('m', Load(), lineno=1066, col_offset=11), lineno=1066, col_offset=4)], [], lineno=1047, col_offset=0), TryExcept([Assign([Name('strict_errors', Store(), lineno=1071, col_offset=4)], Call(Name('lookup_error', Load(), lineno=1071, col_offset=20), [Str('strict', lineno=1071, col_offset=33)], [], None, None, lineno=1071, col_offset=20), lineno=1071, col_offset=4), Assign([Name('ignore_errors', Store(), lineno=1072, col_offset=4)], Call(Name('lookup_error', Load(), lineno=1072, col_offset=20), [Str('ignore', lineno=1072, col_offset=33)], [], None, None, lineno=1072, col_offset=20), lineno=1072, col_offset=4), Assign([Name('replace_errors', Store(), lineno=1073, col_offset=4)], Call(Name('lookup_error', Load(), lineno=1073, col_offset=21), [Str('replace', lineno=1073, col_offset=34)], [], None, None, lineno=1073, col_offset=21), lineno=1073, col_offset=4), Assign([Name('xmlcharrefreplace_errors', Store(), lineno=1074, col_offset=4)], Call(Name('lookup_error', Load(), lineno=1074, col_offset=31), [Str('xmlcharrefreplace', lineno=1074, col_offset=44)], [], None, None, lineno=1074, col_offset=31), lineno=1074, col_offset=4), Assign([Name('backslashreplace_errors', Store(), lineno=1075, col_offset=4)], Call(Name('lookup_error', Load(), lineno=1075, col_offset=30), [Str('backslashreplace', lineno=1075, col_offset=43)], [], None, None, lineno=1075, col_offset=30), lineno=1075, col_offset=4)], [ExceptHandler(Name('LookupError', Load(), lineno=1076, col_offset=7), None, [Assign([Name('strict_errors', Store(), lineno=1078, col_offset=4)], Name('None', Load(), lineno=1078, col_offset=20), lineno=1078, col_offset=4), Assign([Name('ignore_errors', Store(), lineno=1079, col_offset=4)], Name('None', Load(), lineno=1079, col_offset=20), lineno=1079, col_offset=4), Assign([Name('replace_errors', Store(), lineno=1080, col_offset=4)], Name('None', Load(), lineno=1080, col_offset=21), lineno=1080, col_offset=4), Assign([Name('xmlcharrefreplace_errors', Store(), lineno=1081, col_offset=4)], Name('None', Load(), lineno=1081, col_offset=31), lineno=1081, col_offset=4), Assign([Name('backslashreplace_errors', Store(), lineno=1082, col_offset=4)], Name('None', Load(), lineno=1082, col_offset=30), lineno=1082, col_offset=4)], lineno=1076, col_offset=0)], [], lineno=1070, col_offset=0), Assign([Name('_false', Store(), lineno=1086, col_offset=0)], Num(0, lineno=1086, col_offset=9), lineno=1086, col_offset=0), If(Name('_false', Load(), lineno=1087, col_offset=3), [Import([alias('encodings', None)], lineno=1088, col_offset=4)], [], lineno=1087, col_offset=0), If(Compare(Name('__name__', Load(), lineno=1092, col_offset=3), [Eq()], [Str('__main__', lineno=1092, col_offset=15)], lineno=1092, col_offset=3), [Assign([Attribute(Name('sys', Load(), lineno=1095, col_offset=4), 'stdout', Store(), lineno=1095, col_offset=4)], Call(Name('EncodedFile', Load(), lineno=1095, col_offset=17), [Attribute(Name('sys', Load(), lineno=1095, col_offset=29), 'stdout', Load(), lineno=1095, col_offset=29), Str('latin-1', lineno=1095, col_offset=41), Str('utf-8', lineno=1095, col_offset=52)], [], None, None, lineno=1095, col_offset=17), lineno=1095, col_offset=4), Assign([Attribute(Name('sys', Load(), lineno=1098, col_offset=4), 'stdin', Store(), lineno=1098, col_offset=4)], Call(Name('EncodedFile', Load(), lineno=1098, col_offset=16), [Attribute(Name('sys', Load(), lineno=1098, col_offset=28), 'stdin', Load(), lineno=1098, col_offset=28), Str('utf-8', lineno=1098, col_offset=39), Str('latin-1', lineno=1098, col_offset=48)], [], None, None, lineno=1098, col_offset=16), lineno=1098, col_offset=4)], [], lineno=1092, col_offset=0)])
