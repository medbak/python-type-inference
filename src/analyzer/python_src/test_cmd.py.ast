Module([Expr(Str("\nTest script for the 'cmd' module\nOriginal by Michael Schneider\n", lineno=5, col_offset=-1), lineno=5, col_offset=-1), Import([alias('cmd', None)], lineno=8, col_offset=0), Import([alias('sys', None)], lineno=9, col_offset=0), ImportFrom('test', [alias('test_support', None)], 0, lineno=10, col_offset=0), Import([alias('re', None)], lineno=11, col_offset=0), Import([alias('unittest', None)], lineno=12, col_offset=0), Import([alias('StringIO', None)], lineno=13, col_offset=0), ClassDef('samplecmdclass', [Attribute(Name('cmd', Load(), lineno=15, col_offset=21), 'Cmd', Load(), lineno=15, col_offset=21)], [Expr(Str('\n    Instance the sampleclass:\n    >>> mycmd = samplecmdclass()\n\n    Test for the function parseline():\n    >>> mycmd.parseline("")\n    (None, None, \'\')\n    >>> mycmd.parseline("?")\n    (\'help\', \'\', \'help \')\n    >>> mycmd.parseline("?help")\n    (\'help\', \'help\', \'help help\')\n    >>> mycmd.parseline("!")\n    (\'shell\', \'\', \'shell \')\n    >>> mycmd.parseline("!command")\n    (\'shell\', \'command\', \'shell command\')\n    >>> mycmd.parseline("func")\n    (\'func\', \'\', \'func\')\n    >>> mycmd.parseline("func arg1")\n    (\'func\', \'arg1\', \'func arg1\')\n\n\n    Test for the function onecmd():\n    >>> mycmd.onecmd("")\n    >>> mycmd.onecmd("add 4 5")\n    9\n    >>> mycmd.onecmd("")\n    9\n    >>> mycmd.onecmd("test")\n    *** Unknown syntax: test\n\n    Test for the function emptyline():\n    >>> mycmd.emptyline()\n    *** Unknown syntax: test\n\n    Test for the function default():\n    >>> mycmd.default("default")\n    *** Unknown syntax: default\n\n    Test for the function completedefault():\n    >>> mycmd.completedefault()\n    This is the completedefault methode\n    >>> mycmd.completenames("a")\n    [\'add\']\n\n    Test for the function completenames():\n    >>> mycmd.completenames("12")\n    []\n    >>> mycmd.completenames("help")\n    [\'help\']\n\n    Test for the function complete_help():\n    >>> mycmd.complete_help("a")\n    [\'add\']\n    >>> mycmd.complete_help("he")\n    [\'help\']\n    >>> mycmd.complete_help("12")\n    []\n    >>> sorted(mycmd.complete_help(""))\n    [\'add\', \'exit\', \'help\', \'shell\']\n\n    Test for the function do_help():\n    >>> mycmd.do_help("testet")\n    *** No help on testet\n    >>> mycmd.do_help("add")\n    help text for add\n    >>> mycmd.onecmd("help add")\n    help text for add\n    >>> mycmd.do_help("")\n    <BLANKLINE>\n    Documented commands (type help <topic>):\n    ========================================\n    add\n    <BLANKLINE>\n    Undocumented commands:\n    ======================\n    exit  help  shell\n    <BLANKLINE>\n\n    Test for the function print_topics():\n    >>> mycmd.print_topics("header", ["command1", "command2"], 2 ,10)\n    header\n    ======\n    command1\n    command2\n    <BLANKLINE>\n\n    Test for the function columnize():\n    >>> mycmd.columnize([str(i) for i in xrange(20)])\n    0  1  2  3  4  5  6  7  8  9  10  11  12  13  14  15  16  17  18  19\n    >>> mycmd.columnize([str(i) for i in xrange(20)], 10)\n    0  7   14\n    1  8   15\n    2  9   16\n    3  10  17\n    4  11  18\n    5  12  19\n    6  13\n\n    This is a interactive test, put some commands in the cmdqueue attribute\n    and let it execute\n    This test includes the preloop(), postloop(), default(), emptyline(),\n    parseline(), do_help() functions\n    >>> mycmd.use_rawinput=0\n    >>> mycmd.cmdqueue=["", "add", "add 4 5", "help", "help add","exit"]\n    >>> mycmd.cmdloop()\n    Hello from preloop\n    help text for add\n    *** invalid number of arguments\n    9\n    <BLANKLINE>\n    Documented commands (type help <topic>):\n    ========================================\n    add\n    <BLANKLINE>\n    Undocumented commands:\n    ======================\n    exit  help  shell\n    <BLANKLINE>\n    help text for add\n    Hello from postloop\n    ', lineno=136, col_offset=-1), lineno=136, col_offset=-1), FunctionDef('preloop', arguments([Name('self', Param(), lineno=138, col_offset=16)], None, None, []), [Print(None, [Str('Hello from preloop', lineno=139, col_offset=14)], True, lineno=139, col_offset=8)], [], lineno=138, col_offset=4), FunctionDef('postloop', arguments([Name('self', Param(), lineno=141, col_offset=17)], None, None, []), [Print(None, [Str('Hello from postloop', lineno=142, col_offset=14)], True, lineno=142, col_offset=8)], [], lineno=141, col_offset=4), FunctionDef('completedefault', arguments([Name('self', Param(), lineno=144, col_offset=24)], 'ignored', None, []), [Print(None, [Str('This is the completedefault methode', lineno=145, col_offset=14)], True, lineno=145, col_offset=8), Return(None, lineno=146, col_offset=8)], [], lineno=144, col_offset=4), FunctionDef('complete_command', arguments([Name('self', Param(), lineno=148, col_offset=25)], None, None, []), [Print(None, [Str('complete command', lineno=149, col_offset=14)], True, lineno=149, col_offset=8), Return(None, lineno=150, col_offset=8)], [], lineno=148, col_offset=4), FunctionDef('do_shell', arguments([Name('self', Param(), lineno=152, col_offset=17), Name('s', Param(), lineno=152, col_offset=23)], None, None, []), [Pass( lineno=153, col_offset=8)], [], lineno=152, col_offset=4), FunctionDef('do_add', arguments([Name('self', Param(), lineno=155, col_offset=15), Name('s', Param(), lineno=155, col_offset=21)], None, None, []), [Assign([Name('l', Store(), lineno=156, col_offset=8)], Call(Attribute(Name('s', Load(), lineno=156, col_offset=12), 'split', Load(), lineno=156, col_offset=12), [], [], None, None, lineno=156, col_offset=12), lineno=156, col_offset=8), If(Compare(Call(Name('len', Load(), lineno=157, col_offset=11), [Name('l', Load(), lineno=157, col_offset=15)], [], None, None, lineno=157, col_offset=11), [NotEq()], [Num(2, lineno=157, col_offset=21)], lineno=157, col_offset=11), [Print(None, [Str('*** invalid number of arguments', lineno=158, col_offset=18)], True, lineno=158, col_offset=12), Return(None, lineno=159, col_offset=12)], [], lineno=157, col_offset=8), TryExcept([Assign([Name('l', Store(), lineno=161, col_offset=12)], ListComp(Call(Name('int', Load(), lineno=161, col_offset=17), [Name('i', Load(), lineno=161, col_offset=21)], [], None, None, lineno=161, col_offset=17), [comprehension(Name('i', Store(), lineno=161, col_offset=28), Name('l', Load(), lineno=161, col_offset=33), [])], lineno=161, col_offset=17), lineno=161, col_offset=12)], [ExceptHandler(Name('ValueError', Load(), lineno=162, col_offset=15), None, [Print(None, [Str('*** arguments should be numbers', lineno=163, col_offset=18)], True, lineno=163, col_offset=12), Return(None, lineno=164, col_offset=12)], lineno=162, col_offset=8)], [], lineno=160, col_offset=8), Print(None, [BinOp(Subscript(Name('l', Load(), lineno=165, col_offset=14), Index(Num(0, lineno=165, col_offset=16)), Load(), lineno=165, col_offset=14), Add(), Subscript(Name('l', Load(), lineno=165, col_offset=19), Index(Num(1, lineno=165, col_offset=21)), Load(), lineno=165, col_offset=19), lineno=165, col_offset=14)], True, lineno=165, col_offset=8)], [], lineno=155, col_offset=4), FunctionDef('help_add', arguments([Name('self', Param(), lineno=167, col_offset=17)], None, None, []), [Print(None, [Str('help text for add', lineno=168, col_offset=14)], True, lineno=168, col_offset=8), Return(None, lineno=169, col_offset=8)], [], lineno=167, col_offset=4), FunctionDef('do_exit', arguments([Name('self', Param(), lineno=171, col_offset=16), Name('arg', Param(), lineno=171, col_offset=22)], None, None, []), [Return(Name('True', Load(), lineno=172, col_offset=15), lineno=172, col_offset=8)], [], lineno=171, col_offset=4)], [], lineno=15, col_offset=0), ClassDef('TestAlternateInput', [Attribute(Name('unittest', Load(), lineno=175, col_offset=25), 'TestCase', Load(), lineno=175, col_offset=25)], [ClassDef('simplecmd', [Attribute(Name('cmd', Load(), lineno=177, col_offset=20), 'Cmd', Load(), lineno=177, col_offset=20)], [FunctionDef('do_print', arguments([Name('self', Param(), lineno=179, col_offset=21), Name('args', Param(), lineno=179, col_offset=27)], None, None, []), [Print(Attribute(Name('self', Load(), lineno=180, col_offset=20), 'stdout', Load(), lineno=180, col_offset=20), [Name('args', Load(), lineno=180, col_offset=33)], True, lineno=180, col_offset=12)], [], lineno=179, col_offset=8), FunctionDef('do_EOF', arguments([Name('self', Param(), lineno=182, col_offset=19), Name('args', Param(), lineno=182, col_offset=25)], None, None, []), [Return(Name('True', Load(), lineno=183, col_offset=19), lineno=183, col_offset=12)], [], lineno=182, col_offset=8)], [], lineno=177, col_offset=4), FunctionDef('test_file_with_missing_final_nl', arguments([Name('self', Param(), lineno=185, col_offset=40)], None, None, []), [Assign([Name('input', Store(), lineno=186, col_offset=8)], Call(Attribute(Name('StringIO', Load(), lineno=186, col_offset=16), 'StringIO', Load(), lineno=186, col_offset=16), [Str('print test\nprint test2', lineno=186, col_offset=34)], [], None, None, lineno=186, col_offset=16), lineno=186, col_offset=8), Assign([Name('output', Store(), lineno=187, col_offset=8)], Call(Attribute(Name('StringIO', Load(), lineno=187, col_offset=17), 'StringIO', Load(), lineno=187, col_offset=17), [], [], None, None, lineno=187, col_offset=17), lineno=187, col_offset=8), Assign([Name('cmd', Store(), lineno=188, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=188, col_offset=14), 'simplecmd', Load(), lineno=188, col_offset=14), [], [keyword('stdin', Name('input', Load(), lineno=188, col_offset=35)), keyword('stdout', Name('output', Load(), lineno=188, col_offset=49))], None, None, lineno=188, col_offset=14), lineno=188, col_offset=8), Assign([Attribute(Name('cmd', Load(), lineno=189, col_offset=8), 'use_rawinput', Store(), lineno=189, col_offset=8)], Name('False', Load(), lineno=189, col_offset=27), lineno=189, col_offset=8), Expr(Call(Attribute(Name('cmd', Load(), lineno=190, col_offset=8), 'cmdloop', Load(), lineno=190, col_offset=8), [], [], None, None, lineno=190, col_offset=8), lineno=190, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=191, col_offset=8), 'assertMultiLineEqual', Load(), lineno=191, col_offset=8), [Call(Attribute(Name('output', Load(), lineno=191, col_offset=34), 'getvalue', Load(), lineno=191, col_offset=34), [], [], None, None, lineno=191, col_offset=34), Str('(Cmd) test\n(Cmd) test2\n(Cmd) ', lineno=192, col_offset=13)], [], None, None, lineno=191, col_offset=8), lineno=191, col_offset=8)], [], lineno=185, col_offset=4)], [], lineno=175, col_offset=0), FunctionDef('test_main', arguments([Name('verbose', Param(), lineno=197, col_offset=14)], None, None, [Name('None', Load(), lineno=197, col_offset=22)]), [ImportFrom('test', [alias('test_cmd', None)], 0, lineno=198, col_offset=4), Expr(Call(Attribute(Name('test_support', Load(), lineno=199, col_offset=4), 'run_doctest', Load(), lineno=199, col_offset=4), [Name('test_cmd', Load(), lineno=199, col_offset=29), Name('verbose', Load(), lineno=199, col_offset=39)], [], None, None, lineno=199, col_offset=4), lineno=199, col_offset=4), Expr(Call(Attribute(Name('test_support', Load(), lineno=200, col_offset=4), 'run_unittest', Load(), lineno=200, col_offset=4), [Name('TestAlternateInput', Load(), lineno=200, col_offset=30)], [], None, None, lineno=200, col_offset=4), lineno=200, col_offset=4)], [], lineno=197, col_offset=0), FunctionDef('test_coverage', arguments([Name('coverdir', Param(), lineno=202, col_offset=18)], None, None, []), [Assign([Name('trace', Store(), lineno=203, col_offset=4)], Call(Attribute(Name('test_support', Load(), lineno=203, col_offset=12), 'import_module', Load(), lineno=203, col_offset=12), [Str('trace', lineno=203, col_offset=39)], [], None, None, lineno=203, col_offset=12), lineno=203, col_offset=4), Assign([Name('tracer', Store(), lineno=204, col_offset=4)], Call(Attribute(Name('trace', Load(), lineno=204, col_offset=11), 'Trace', Load(), lineno=204, col_offset=11), [], [keyword('ignoredirs', List([Attribute(Name('sys', Load(), lineno=204, col_offset=35), 'prefix', Load(), lineno=204, col_offset=35), Attribute(Name('sys', Load(), lineno=204, col_offset=47), 'exec_prefix', Load(), lineno=204, col_offset=47)], Load(), lineno=204, col_offset=34)), keyword('trace', Num(0, lineno=205, col_offset=30)), keyword('count', Num(1, lineno=205, col_offset=39))], None, None, lineno=204, col_offset=11), lineno=204, col_offset=4), Expr(Call(Attribute(Name('tracer', Load(), lineno=206, col_offset=4), 'run', Load(), lineno=206, col_offset=4), [Str('reload(cmd);test_main()', lineno=206, col_offset=15)], [], None, None, lineno=206, col_offset=4), lineno=206, col_offset=4), Assign([Name('r', Store(), lineno=207, col_offset=4)], Call(Attribute(Name('tracer', Load(), lineno=207, col_offset=6), 'results', Load(), lineno=207, col_offset=6), [], [], None, None, lineno=207, col_offset=6), lineno=207, col_offset=4), Print(None, [Str('Writing coverage results...', lineno=208, col_offset=10)], True, lineno=208, col_offset=4), Expr(Call(Attribute(Name('r', Load(), lineno=209, col_offset=4), 'write_results', Load(), lineno=209, col_offset=4), [], [keyword('show_missing', Name('True', Load(), lineno=209, col_offset=33)), keyword('summary', Name('True', Load(), lineno=209, col_offset=47)), keyword('coverdir', Name('coverdir', Load(), lineno=209, col_offset=62))], None, None, lineno=209, col_offset=4), lineno=209, col_offset=4)], [], lineno=202, col_offset=0), If(Compare(Name('__name__', Load(), lineno=211, col_offset=3), [Eq()], [Str('__main__', lineno=211, col_offset=15)], lineno=211, col_offset=3), [If(Compare(Str('-c', lineno=212, col_offset=7), [In()], [Attribute(Name('sys', Load(), lineno=212, col_offset=15), 'argv', Load(), lineno=212, col_offset=15)], lineno=212, col_offset=7), [Expr(Call(Name('test_coverage', Load(), lineno=213, col_offset=8), [Str('/tmp/cmd.cover', lineno=213, col_offset=22)], [], None, None, lineno=213, col_offset=8), lineno=213, col_offset=8)], [If(Compare(Str('-i', lineno=214, col_offset=9), [In()], [Attribute(Name('sys', Load(), lineno=214, col_offset=17), 'argv', Load(), lineno=214, col_offset=17)], lineno=214, col_offset=9), [Expr(Call(Attribute(Call(Name('samplecmdclass', Load(), lineno=215, col_offset=8), [], [], None, None, lineno=215, col_offset=8), 'cmdloop', Load(), lineno=215, col_offset=8), [], [], None, None, lineno=215, col_offset=8), lineno=215, col_offset=8)], [Expr(Call(Name('test_main', Load(), lineno=217, col_offset=8), [], [], None, None, lineno=217, col_offset=8), lineno=217, col_offset=8)], lineno=214, col_offset=9)], lineno=212, col_offset=4)], [], lineno=211, col_offset=0)])
