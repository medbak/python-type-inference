Module([Expr(Str("Mutual exclusion -- for use with module sched\n\nA mutex has two pieces of state -- a 'locked' bit and a queue.\nWhen the mutex is not locked, the queue is empty.\nOtherwise, the queue contains 0 or more (function, argument) pairs\nrepresenting functions (or methods) waiting to acquire the lock.\nWhen the mutex is unlocked while the queue is not empty,\nthe first queue entry is removed and its function(argument) pair called,\nimplying it now has the lock.\n\nOf course, no multi-threading is implied -- hence the funny interface\nfor lock, where a function is called once the lock is aquired.\n", lineno=13, col_offset=-1), lineno=13, col_offset=-1), ImportFrom('warnings', [alias('warnpy3k', None)], 0, lineno=14, col_offset=0), Expr(Call(Name('warnpy3k', Load(), lineno=15, col_offset=0), [Str('the mutex module has been removed in Python 3.0', lineno=15, col_offset=9)], [keyword('stacklevel', Num(2, lineno=15, col_offset=71))], None, None, lineno=15, col_offset=0), lineno=15, col_offset=0), Delete([Name('warnpy3k', Del(), lineno=16, col_offset=4)], lineno=16, col_offset=0), ImportFrom('collections', [alias('deque', None)], 0, lineno=18, col_offset=0), ClassDef('mutex', [], [FunctionDef('__init__', arguments([Name('self', Param(), lineno=21, col_offset=17)], None, None, []), [Expr(Str('Create a new mutex -- initially unlocked.', lineno=22, col_offset=8), lineno=22, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=23, col_offset=8), 'locked', Store(), lineno=23, col_offset=8)], Name('False', Load(), lineno=23, col_offset=22), lineno=23, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=24, col_offset=8), 'queue', Store(), lineno=24, col_offset=8)], Call(Name('deque', Load(), lineno=24, col_offset=21), [], [], None, None, lineno=24, col_offset=21), lineno=24, col_offset=8)], [], lineno=21, col_offset=4), FunctionDef('test', arguments([Name('self', Param(), lineno=26, col_offset=13)], None, None, []), [Expr(Str('Test the locked bit of the mutex.', lineno=27, col_offset=8), lineno=27, col_offset=8), Return(Attribute(Name('self', Load(), lineno=28, col_offset=15), 'locked', Load(), lineno=28, col_offset=15), lineno=28, col_offset=8)], [], lineno=26, col_offset=4), FunctionDef('testandset', arguments([Name('self', Param(), lineno=30, col_offset=19)], None, None, []), [Expr(Str('Atomic test-and-set -- grab the lock if it is not set,\n        return True if it succeeded.', lineno=32, col_offset=-1), lineno=32, col_offset=-1), If(UnaryOp(Not(), Attribute(Name('self', Load(), lineno=33, col_offset=15), 'locked', Load(), lineno=33, col_offset=15), lineno=33, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=34, col_offset=12), 'locked', Store(), lineno=34, col_offset=12)], Name('True', Load(), lineno=34, col_offset=26), lineno=34, col_offset=12), Return(Name('True', Load(), lineno=35, col_offset=19), lineno=35, col_offset=12)], [Return(Name('False', Load(), lineno=37, col_offset=19), lineno=37, col_offset=12)], lineno=33, col_offset=8)], [], lineno=30, col_offset=4), FunctionDef('lock', arguments([Name('self', Param(), lineno=39, col_offset=13), Name('function', Param(), lineno=39, col_offset=19), Name('argument', Param(), lineno=39, col_offset=29)], None, None, []), [Expr(Str('Lock a mutex, call the function with supplied argument\n        when it is acquired.  If the mutex is already locked, place\n        function and argument in the queue.', lineno=42, col_offset=-1), lineno=42, col_offset=-1), If(Call(Attribute(Name('self', Load(), lineno=43, col_offset=11), 'testandset', Load(), lineno=43, col_offset=11), [], [], None, None, lineno=43, col_offset=11), [Expr(Call(Name('function', Load(), lineno=44, col_offset=12), [Name('argument', Load(), lineno=44, col_offset=21)], [], None, None, lineno=44, col_offset=12), lineno=44, col_offset=12)], [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=46, col_offset=12), 'queue', Load(), lineno=46, col_offset=12), 'append', Load(), lineno=46, col_offset=12), [Tuple([Name('function', Load(), lineno=46, col_offset=31), Name('argument', Load(), lineno=46, col_offset=41)], Load(), lineno=46, col_offset=31)], [], None, None, lineno=46, col_offset=12), lineno=46, col_offset=12)], lineno=43, col_offset=8)], [], lineno=39, col_offset=4), FunctionDef('unlock', arguments([Name('self', Param(), lineno=48, col_offset=15)], None, None, []), [Expr(Str('Unlock a mutex.  If the queue is not empty, call the next\n        function with its argument.', lineno=50, col_offset=-1), lineno=50, col_offset=-1), If(Attribute(Name('self', Load(), lineno=51, col_offset=11), 'queue', Load(), lineno=51, col_offset=11), [Assign([Tuple([Name('function', Store(), lineno=52, col_offset=12), Name('argument', Store(), lineno=52, col_offset=22)], Store(), lineno=52, col_offset=12)], Call(Attribute(Attribute(Name('self', Load(), lineno=52, col_offset=33), 'queue', Load(), lineno=52, col_offset=33), 'popleft', Load(), lineno=52, col_offset=33), [], [], None, None, lineno=52, col_offset=33), lineno=52, col_offset=12), Expr(Call(Name('function', Load(), lineno=53, col_offset=12), [Name('argument', Load(), lineno=53, col_offset=21)], [], None, None, lineno=53, col_offset=12), lineno=53, col_offset=12)], [Assign([Attribute(Name('self', Load(), lineno=55, col_offset=12), 'locked', Store(), lineno=55, col_offset=12)], Name('False', Load(), lineno=55, col_offset=26), lineno=55, col_offset=12)], lineno=51, col_offset=8)], [], lineno=48, col_offset=4)], [], lineno=20, col_offset=0)])
