Module([Expr(Str(' Test script for the Unicode implementation.\n\nWritten by Bill Tutt.\nModified for Python 2.0 by Fredrik Lundh (fredrik@pythonware.com)\n\n(c) Copyright CNRI, All Rights Reserved. NO WARRANTY.\n\n', lineno=8, col_offset=-1), lineno=8, col_offset=-1), Import([alias('unittest', None)], lineno=10, col_offset=0), ImportFrom('test', [alias('test_support', None)], 0, lineno=12, col_offset=0), ClassDef('UnicodeNamesTest', [Attribute(Name('unittest', Load(), lineno=14, col_offset=23), 'TestCase', Load(), lineno=14, col_offset=23)], [FunctionDef('checkletter', arguments([Name('self', Param(), lineno=16, col_offset=20), Name('name', Param(), lineno=16, col_offset=26), Name('code', Param(), lineno=16, col_offset=32)], None, None, []), [Assign([Name('res', Store(), lineno=20, col_offset=8)], Call(Name('eval', Load(), lineno=20, col_offset=14), [BinOp(Str(u'u"\\N{%s}"', lineno=20, col_offset=19), Mod(), Name('name', Load(), lineno=20, col_offset=35), lineno=20, col_offset=19)], [], None, None, lineno=20, col_offset=14), lineno=20, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=21, col_offset=8), 'assertEqual', Load(), lineno=21, col_offset=8), [Name('res', Load(), lineno=21, col_offset=25), Name('code', Load(), lineno=21, col_offset=30)], [], None, None, lineno=21, col_offset=8), lineno=21, col_offset=8), Return(Name('res', Load(), lineno=22, col_offset=15), lineno=22, col_offset=8)], [], lineno=16, col_offset=4), FunctionDef('test_general', arguments([Name('self', Param(), lineno=24, col_offset=21)], None, None, []), [Assign([Name('chars', Store(), lineno=26, col_offset=8)], List([Str('LATIN CAPITAL LETTER T', lineno=27, col_offset=12), Str('LATIN SMALL LETTER H', lineno=28, col_offset=12), Str('LATIN SMALL LETTER E', lineno=29, col_offset=12), Str('SPACE', lineno=30, col_offset=12), Str('LATIN SMALL LETTER R', lineno=31, col_offset=12), Str('LATIN CAPITAL LETTER E', lineno=32, col_offset=12), Str('LATIN SMALL LETTER D', lineno=33, col_offset=12), Str('SPACE', lineno=34, col_offset=12), Str('LATIN SMALL LETTER f', lineno=35, col_offset=12), Str('LATIN CAPITAL LeTtEr o', lineno=36, col_offset=12), Str('LATIN SMaLl LETTER x', lineno=37, col_offset=12), Str('SPACE', lineno=38, col_offset=12), Str('LATIN SMALL LETTER A', lineno=39, col_offset=12), Str('LATIN SMALL LETTER T', lineno=40, col_offset=12), Str('LATIN SMALL LETTER E', lineno=41, col_offset=12), Str('SPACE', lineno=42, col_offset=12), Str('LATIN SMALL LETTER T', lineno=43, col_offset=12), Str('LATIN SMALL LETTER H', lineno=44, col_offset=12), Str('LATIN SMALL LETTER E', lineno=45, col_offset=12), Str('SpAcE', lineno=46, col_offset=12), Str('LATIN SMALL LETTER S', lineno=47, col_offset=12), Str('LATIN SMALL LETTER H', lineno=48, col_offset=12), Str('LATIN small LETTER e', lineno=49, col_offset=12), Str('LATIN small LETTER e', lineno=50, col_offset=12), Str('LATIN SMALL LETTER P', lineno=51, col_offset=12), Str('FULL STOP', lineno=52, col_offset=12)], Load(), lineno=26, col_offset=16), lineno=26, col_offset=8), Assign([Name('string', Store(), lineno=54, col_offset=8)], Str(u'The rEd fOx ate the sheep.', lineno=54, col_offset=17), lineno=54, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=56, col_offset=8), 'assertEqual', Load(), lineno=56, col_offset=8), [Call(Attribute(Str(u'', lineno=57, col_offset=12), 'join', Load(), lineno=57, col_offset=12), [ListComp(Call(Attribute(Name('self', Load(), lineno=57, col_offset=22), 'checkletter', Load(), lineno=57, col_offset=22), [], [], Name('args', Load(), lineno=57, col_offset=40), None, lineno=57, col_offset=22), [comprehension(Name('args', Store(), lineno=57, col_offset=50), Call(Name('zip', Load(), lineno=57, col_offset=58), [Name('chars', Load(), lineno=57, col_offset=62), Name('string', Load(), lineno=57, col_offset=69)], [], None, None, lineno=57, col_offset=58), [])], lineno=57, col_offset=22)], [], None, None, lineno=57, col_offset=12), Name('string', Load(), lineno=58, col_offset=12)], [], None, None, lineno=56, col_offset=8), lineno=56, col_offset=8)], [], lineno=24, col_offset=4), FunctionDef('test_ascii_letters', arguments([Name('self', Param(), lineno=61, col_offset=27)], None, None, []), [Import([alias('unicodedata', None)], lineno=62, col_offset=8), For(Name('char', Store(), lineno=64, col_offset=12), Call(Attribute(Str('', lineno=64, col_offset=20), 'join', Load(), lineno=64, col_offset=20), [Call(Name('map', Load(), lineno=64, col_offset=28), [Name('chr', Load(), lineno=64, col_offset=32), Call(Name('xrange', Load(), lineno=64, col_offset=37), [Call(Name('ord', Load(), lineno=64, col_offset=44), [Str('a', lineno=64, col_offset=48)], [], None, None, lineno=64, col_offset=44), Call(Name('ord', Load(), lineno=64, col_offset=54), [Str('z', lineno=64, col_offset=58)], [], None, None, lineno=64, col_offset=54)], [], None, None, lineno=64, col_offset=37)], [], None, None, lineno=64, col_offset=28)], [], None, None, lineno=64, col_offset=20), [Assign([Name('name', Store(), lineno=65, col_offset=12)], BinOp(Str('LATIN SMALL LETTER %s', lineno=65, col_offset=19), Mod(), Call(Attribute(Name('char', Load(), lineno=65, col_offset=45), 'upper', Load(), lineno=65, col_offset=45), [], [], None, None, lineno=65, col_offset=45), lineno=65, col_offset=19), lineno=65, col_offset=12), Assign([Name('code', Store(), lineno=66, col_offset=12)], Call(Attribute(Name('unicodedata', Load(), lineno=66, col_offset=19), 'lookup', Load(), lineno=66, col_offset=19), [Name('name', Load(), lineno=66, col_offset=38)], [], None, None, lineno=66, col_offset=19), lineno=66, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=67, col_offset=12), 'assertEqual', Load(), lineno=67, col_offset=12), [Call(Attribute(Name('unicodedata', Load(), lineno=67, col_offset=29), 'name', Load(), lineno=67, col_offset=29), [Name('code', Load(), lineno=67, col_offset=46)], [], None, None, lineno=67, col_offset=29), Name('name', Load(), lineno=67, col_offset=53)], [], None, None, lineno=67, col_offset=12), lineno=67, col_offset=12)], [], lineno=64, col_offset=8)], [], lineno=61, col_offset=4), FunctionDef('test_hangul_syllables', arguments([Name('self', Param(), lineno=69, col_offset=30)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=70, col_offset=8), 'checkletter', Load(), lineno=70, col_offset=8), [Str('HANGUL SYLLABLE GA', lineno=70, col_offset=25), Str(u'\uac00', lineno=70, col_offset=47)], [], None, None, lineno=70, col_offset=8), lineno=70, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=71, col_offset=8), 'checkletter', Load(), lineno=71, col_offset=8), [Str('HANGUL SYLLABLE GGWEOSS', lineno=71, col_offset=25), Str(u'\uafe8', lineno=71, col_offset=52)], [], None, None, lineno=71, col_offset=8), lineno=71, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=72, col_offset=8), 'checkletter', Load(), lineno=72, col_offset=8), [Str('HANGUL SYLLABLE DOLS', lineno=72, col_offset=25), Str(u'\ub3d0', lineno=72, col_offset=49)], [], None, None, lineno=72, col_offset=8), lineno=72, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=73, col_offset=8), 'checkletter', Load(), lineno=73, col_offset=8), [Str('HANGUL SYLLABLE RYAN', lineno=73, col_offset=25), Str(u'\ub7b8', lineno=73, col_offset=49)], [], None, None, lineno=73, col_offset=8), lineno=73, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=74, col_offset=8), 'checkletter', Load(), lineno=74, col_offset=8), [Str('HANGUL SYLLABLE MWIK', lineno=74, col_offset=25), Str(u'\ubba0', lineno=74, col_offset=49)], [], None, None, lineno=74, col_offset=8), lineno=74, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=75, col_offset=8), 'checkletter', Load(), lineno=75, col_offset=8), [Str('HANGUL SYLLABLE BBWAEM', lineno=75, col_offset=25), Str(u'\ubf88', lineno=75, col_offset=51)], [], None, None, lineno=75, col_offset=8), lineno=75, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=76, col_offset=8), 'checkletter', Load(), lineno=76, col_offset=8), [Str('HANGUL SYLLABLE SSEOL', lineno=76, col_offset=25), Str(u'\uc370', lineno=76, col_offset=50)], [], None, None, lineno=76, col_offset=8), lineno=76, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=77, col_offset=8), 'checkletter', Load(), lineno=77, col_offset=8), [Str('HANGUL SYLLABLE YI', lineno=77, col_offset=25), Str(u'\uc758', lineno=77, col_offset=47)], [], None, None, lineno=77, col_offset=8), lineno=77, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=78, col_offset=8), 'checkletter', Load(), lineno=78, col_offset=8), [Str('HANGUL SYLLABLE JJYOSS', lineno=78, col_offset=25), Str(u'\ucb40', lineno=78, col_offset=51)], [], None, None, lineno=78, col_offset=8), lineno=78, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=79, col_offset=8), 'checkletter', Load(), lineno=79, col_offset=8), [Str('HANGUL SYLLABLE KYEOLS', lineno=79, col_offset=25), Str(u'\ucf28', lineno=79, col_offset=51)], [], None, None, lineno=79, col_offset=8), lineno=79, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=80, col_offset=8), 'checkletter', Load(), lineno=80, col_offset=8), [Str('HANGUL SYLLABLE PAN', lineno=80, col_offset=25), Str(u'\ud310', lineno=80, col_offset=48)], [], None, None, lineno=80, col_offset=8), lineno=80, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=81, col_offset=8), 'checkletter', Load(), lineno=81, col_offset=8), [Str('HANGUL SYLLABLE HWEOK', lineno=81, col_offset=25), Str(u'\ud6f8', lineno=81, col_offset=50)], [], None, None, lineno=81, col_offset=8), lineno=81, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=82, col_offset=8), 'checkletter', Load(), lineno=82, col_offset=8), [Str('HANGUL SYLLABLE HIH', lineno=82, col_offset=25), Str(u'\ud7a3', lineno=82, col_offset=48)], [], None, None, lineno=82, col_offset=8), lineno=82, col_offset=8), Import([alias('unicodedata', None)], lineno=84, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=85, col_offset=8), 'assertRaises', Load(), lineno=85, col_offset=8), [Name('ValueError', Load(), lineno=85, col_offset=26), Attribute(Name('unicodedata', Load(), lineno=85, col_offset=38), 'name', Load(), lineno=85, col_offset=38), Str(u'\ud7a4', lineno=85, col_offset=56)], [], None, None, lineno=85, col_offset=8), lineno=85, col_offset=8)], [], lineno=69, col_offset=4), FunctionDef('test_cjk_unified_ideographs', arguments([Name('self', Param(), lineno=87, col_offset=36)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=88, col_offset=8), 'checkletter', Load(), lineno=88, col_offset=8), [Str('CJK UNIFIED IDEOGRAPH-3400', lineno=88, col_offset=25), Str(u'\u3400', lineno=88, col_offset=55)], [], None, None, lineno=88, col_offset=8), lineno=88, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=89, col_offset=8), 'checkletter', Load(), lineno=89, col_offset=8), [Str('CJK UNIFIED IDEOGRAPH-4DB5', lineno=89, col_offset=25), Str(u'\u4db5', lineno=89, col_offset=55)], [], None, None, lineno=89, col_offset=8), lineno=89, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=90, col_offset=8), 'checkletter', Load(), lineno=90, col_offset=8), [Str('CJK UNIFIED IDEOGRAPH-4E00', lineno=90, col_offset=25), Str(u'\u4e00', lineno=90, col_offset=55)], [], None, None, lineno=90, col_offset=8), lineno=90, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=91, col_offset=8), 'checkletter', Load(), lineno=91, col_offset=8), [Str('CJK UNIFIED IDEOGRAPH-9FA5', lineno=91, col_offset=25), Str(u'\u9fa5', lineno=91, col_offset=55)], [], None, None, lineno=91, col_offset=8), lineno=91, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=92, col_offset=8), 'checkletter', Load(), lineno=92, col_offset=8), [Str('CJK UNIFIED IDEOGRAPH-20000', lineno=92, col_offset=25), Str(u'\U00020000', lineno=92, col_offset=56)], [], None, None, lineno=92, col_offset=8), lineno=92, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=93, col_offset=8), 'checkletter', Load(), lineno=93, col_offset=8), [Str('CJK UNIFIED IDEOGRAPH-2A6D6', lineno=93, col_offset=25), Str(u'\U0002a6d6', lineno=93, col_offset=56)], [], None, None, lineno=93, col_offset=8), lineno=93, col_offset=8)], [], lineno=87, col_offset=4), FunctionDef('test_bmp_characters', arguments([Name('self', Param(), lineno=95, col_offset=28)], None, None, []), [Import([alias('unicodedata', None)], lineno=96, col_offset=8), Assign([Name('count', Store(), lineno=97, col_offset=8)], Num(0, lineno=97, col_offset=16), lineno=97, col_offset=8), For(Name('code', Store(), lineno=98, col_offset=12), Call(Name('xrange', Load(), lineno=98, col_offset=20), [Num(65536, lineno=98, col_offset=27)], [], None, None, lineno=98, col_offset=20), [Assign([Name('char', Store(), lineno=99, col_offset=12)], Call(Name('unichr', Load(), lineno=99, col_offset=19), [Name('code', Load(), lineno=99, col_offset=26)], [], None, None, lineno=99, col_offset=19), lineno=99, col_offset=12), Assign([Name('name', Store(), lineno=100, col_offset=12)], Call(Attribute(Name('unicodedata', Load(), lineno=100, col_offset=19), 'name', Load(), lineno=100, col_offset=19), [Name('char', Load(), lineno=100, col_offset=36), Name('None', Load(), lineno=100, col_offset=42)], [], None, None, lineno=100, col_offset=19), lineno=100, col_offset=12), If(Compare(Name('name', Load(), lineno=101, col_offset=15), [IsNot()], [Name('None', Load(), lineno=101, col_offset=27)], lineno=101, col_offset=15), [Expr(Call(Attribute(Name('self', Load(), lineno=102, col_offset=16), 'assertEqual', Load(), lineno=102, col_offset=16), [Call(Attribute(Name('unicodedata', Load(), lineno=102, col_offset=33), 'lookup', Load(), lineno=102, col_offset=33), [Name('name', Load(), lineno=102, col_offset=52)], [], None, None, lineno=102, col_offset=33), Name('char', Load(), lineno=102, col_offset=59)], [], None, None, lineno=102, col_offset=16), lineno=102, col_offset=16), AugAssign(Name('count', Store(), lineno=103, col_offset=16), Add(), Num(1, lineno=103, col_offset=25), lineno=103, col_offset=16)], [], lineno=101, col_offset=12)], [], lineno=98, col_offset=8)], [], lineno=95, col_offset=4), FunctionDef('test_misc_symbols', arguments([Name('self', Param(), lineno=105, col_offset=26)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=106, col_offset=8), 'checkletter', Load(), lineno=106, col_offset=8), [Str('PILCROW SIGN', lineno=106, col_offset=25), Str(u'\xb6', lineno=106, col_offset=41)], [], None, None, lineno=106, col_offset=8), lineno=106, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=107, col_offset=8), 'checkletter', Load(), lineno=107, col_offset=8), [Str('REPLACEMENT CHARACTER', lineno=107, col_offset=25), Str(u'\ufffd', lineno=107, col_offset=50)], [], None, None, lineno=107, col_offset=8), lineno=107, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=108, col_offset=8), 'checkletter', Load(), lineno=108, col_offset=8), [Str('HALFWIDTH KATAKANA SEMI-VOICED SOUND MARK', lineno=108, col_offset=25), Str(u'\uff9f', lineno=108, col_offset=70)], [], None, None, lineno=108, col_offset=8), lineno=108, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=109, col_offset=8), 'checkletter', Load(), lineno=109, col_offset=8), [Str('FULLWIDTH LATIN SMALL LETTER A', lineno=109, col_offset=25), Str(u'\uff41', lineno=109, col_offset=59)], [], None, None, lineno=109, col_offset=8), lineno=109, col_offset=8)], [], lineno=105, col_offset=4), FunctionDef('test_errors', arguments([Name('self', Param(), lineno=111, col_offset=20)], None, None, []), [Import([alias('unicodedata', None)], lineno=112, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=113, col_offset=8), 'assertRaises', Load(), lineno=113, col_offset=8), [Name('TypeError', Load(), lineno=113, col_offset=26), Attribute(Name('unicodedata', Load(), lineno=113, col_offset=37), 'name', Load(), lineno=113, col_offset=37)], [], None, None, lineno=113, col_offset=8), lineno=113, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=114, col_offset=8), 'assertRaises', Load(), lineno=114, col_offset=8), [Name('TypeError', Load(), lineno=114, col_offset=26), Attribute(Name('unicodedata', Load(), lineno=114, col_offset=37), 'name', Load(), lineno=114, col_offset=37), Str(u'xx', lineno=114, col_offset=55)], [], None, None, lineno=114, col_offset=8), lineno=114, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=115, col_offset=8), 'assertRaises', Load(), lineno=115, col_offset=8), [Name('TypeError', Load(), lineno=115, col_offset=26), Attribute(Name('unicodedata', Load(), lineno=115, col_offset=37), 'lookup', Load(), lineno=115, col_offset=37)], [], None, None, lineno=115, col_offset=8), lineno=115, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=116, col_offset=8), 'assertRaises', Load(), lineno=116, col_offset=8), [Name('KeyError', Load(), lineno=116, col_offset=26), Attribute(Name('unicodedata', Load(), lineno=116, col_offset=36), 'lookup', Load(), lineno=116, col_offset=36), Str(u'unknown', lineno=116, col_offset=56)], [], None, None, lineno=116, col_offset=8), lineno=116, col_offset=8)], [], lineno=111, col_offset=4), FunctionDef('test_strict_eror_handling', arguments([Name('self', Param(), lineno=118, col_offset=34)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=120, col_offset=8), 'assertRaises', Load(), lineno=120, col_offset=8), [Name('UnicodeError', Load(), lineno=121, col_offset=12), Name('unicode', Load(), lineno=122, col_offset=12), Str('\\N{blah}', lineno=122, col_offset=21), Str('unicode-escape', lineno=122, col_offset=34), Str('strict', lineno=122, col_offset=52)], [], None, None, lineno=120, col_offset=8), lineno=120, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=125, col_offset=8), 'assertRaises', Load(), lineno=125, col_offset=8), [Name('UnicodeError', Load(), lineno=126, col_offset=12), Name('unicode', Load(), lineno=127, col_offset=12), BinOp(Str('\\N{%s}', lineno=127, col_offset=21), Mod(), BinOp(Str('x', lineno=127, col_offset=34), Mult(), Num(100000, lineno=127, col_offset=40), lineno=127, col_offset=34), lineno=127, col_offset=21), Str('unicode-escape', lineno=127, col_offset=49), Str('strict', lineno=127, col_offset=67)], [], None, None, lineno=125, col_offset=8), lineno=125, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=130, col_offset=8), 'assertRaises', Load(), lineno=130, col_offset=8), [Name('UnicodeError', Load(), lineno=131, col_offset=12), Name('unicode', Load(), lineno=132, col_offset=12), Str('\\N{SPACE', lineno=132, col_offset=21), Str('unicode-escape', lineno=132, col_offset=34), Str('strict', lineno=132, col_offset=52)], [], None, None, lineno=130, col_offset=8), lineno=130, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=135, col_offset=8), 'assertRaises', Load(), lineno=135, col_offset=8), [Name('UnicodeError', Load(), lineno=136, col_offset=12), Name('unicode', Load(), lineno=137, col_offset=12), Str('\\NSPACE', lineno=137, col_offset=21), Str('unicode-escape', lineno=137, col_offset=33), Str('strict', lineno=137, col_offset=51)], [], None, None, lineno=135, col_offset=8), lineno=135, col_offset=8)], [], lineno=118, col_offset=4)], [], lineno=14, col_offset=0), FunctionDef('test_main', arguments([], None, None, []), [Expr(Call(Attribute(Name('test_support', Load(), lineno=141, col_offset=4), 'run_unittest', Load(), lineno=141, col_offset=4), [Name('UnicodeNamesTest', Load(), lineno=141, col_offset=30)], [], None, None, lineno=141, col_offset=4), lineno=141, col_offset=4)], [], lineno=140, col_offset=0), If(Compare(Name('__name__', Load(), lineno=143, col_offset=3), [Eq()], [Str('__main__', lineno=143, col_offset=15)], lineno=143, col_offset=3), [Expr(Call(Name('test_main', Load(), lineno=144, col_offset=4), [], [], None, None, lineno=144, col_offset=4), lineno=144, col_offset=4)], [], lineno=143, col_offset=0)])
