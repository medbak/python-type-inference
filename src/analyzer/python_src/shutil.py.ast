Module([Expr(Str("Utility functions for copying and archiving files and directory trees.\n\nXXX The functions here don't copy the resource fork or other metadata on Mac.\n\n", lineno=5, col_offset=-1), lineno=5, col_offset=-1), Import([alias('os', None)], lineno=7, col_offset=0), Import([alias('sys', None)], lineno=8, col_offset=0), Import([alias('stat', None)], lineno=9, col_offset=0), ImportFrom('os.path', [alias('abspath', None)], 0, lineno=10, col_offset=0), Import([alias('fnmatch', None)], lineno=11, col_offset=0), Import([alias('collections', None)], lineno=12, col_offset=0), Import([alias('errno', None)], lineno=13, col_offset=0), TryExcept([ImportFrom('pwd', [alias('getpwnam', None)], 0, lineno=16, col_offset=4)], [ExceptHandler(Name('ImportError', Load(), lineno=17, col_offset=7), None, [Assign([Name('getpwnam', Store(), lineno=18, col_offset=4)], Name('None', Load(), lineno=18, col_offset=15), lineno=18, col_offset=4)], lineno=17, col_offset=0)], [], lineno=15, col_offset=0), TryExcept([ImportFrom('grp', [alias('getgrnam', None)], 0, lineno=21, col_offset=4)], [ExceptHandler(Name('ImportError', Load(), lineno=22, col_offset=7), None, [Assign([Name('getgrnam', Store(), lineno=23, col_offset=4)], Name('None', Load(), lineno=23, col_offset=15), lineno=23, col_offset=4)], lineno=22, col_offset=0)], [], lineno=20, col_offset=0), Assign([Name('__all__', Store(), lineno=25, col_offset=0)], List([Str('copyfileobj', lineno=25, col_offset=11), Str('copyfile', lineno=25, col_offset=26), Str('copymode', lineno=25, col_offset=38), Str('copystat', lineno=25, col_offset=50), Str('copy', lineno=25, col_offset=62), Str('copy2', lineno=25, col_offset=70), Str('copytree', lineno=26, col_offset=11), Str('move', lineno=26, col_offset=23), Str('rmtree', lineno=26, col_offset=31), Str('Error', lineno=26, col_offset=41), Str('SpecialFileError', lineno=26, col_offset=50), Str('ExecError', lineno=27, col_offset=11), Str('make_archive', lineno=27, col_offset=24), Str('get_archive_formats', lineno=27, col_offset=40), Str('register_archive_format', lineno=28, col_offset=11), Str('unregister_archive_format', lineno=28, col_offset=38)], Load(), lineno=25, col_offset=10), lineno=25, col_offset=0), ClassDef('Error', [Name('EnvironmentError', Load(), lineno=30, col_offset=12)], [Pass( lineno=31, col_offset=4)], [], lineno=30, col_offset=0), ClassDef('SpecialFileError', [Name('EnvironmentError', Load(), lineno=33, col_offset=23)], [Expr(Str('Raised when trying to do a kind of operation (e.g. copying) which is\n    not supported on a special file (e.g. a named pipe)', lineno=35, col_offset=-1), lineno=35, col_offset=-1)], [], lineno=33, col_offset=0), ClassDef('ExecError', [Name('EnvironmentError', Load(), lineno=37, col_offset=16)], [Expr(Str('Raised when a command could not be executed', lineno=38, col_offset=4), lineno=38, col_offset=4)], [], lineno=37, col_offset=0), TryExcept([Expr(Name('WindowsError', Load(), lineno=41, col_offset=4), lineno=41, col_offset=4)], [ExceptHandler(Name('NameError', Load(), lineno=42, col_offset=7), None, [Assign([Name('WindowsError', Store(), lineno=43, col_offset=4)], Name('None', Load(), lineno=43, col_offset=19), lineno=43, col_offset=4)], lineno=42, col_offset=0)], [], lineno=40, col_offset=0), FunctionDef('copyfileobj', arguments([Name('fsrc', Param(), lineno=45, col_offset=16), Name('fdst', Param(), lineno=45, col_offset=22), Name('length', Param(), lineno=45, col_offset=28)], None, None, [BinOp(Num(16, lineno=45, col_offset=35), Mult(), Num(1024, lineno=45, col_offset=38), lineno=45, col_offset=35)]), [Expr(Str('copy data from file-like object fsrc to file-like object fdst', lineno=46, col_offset=4), lineno=46, col_offset=4), While(Num(1, lineno=47, col_offset=10), [Assign([Name('buf', Store(), lineno=48, col_offset=8)], Call(Attribute(Name('fsrc', Load(), lineno=48, col_offset=14), 'read', Load(), lineno=48, col_offset=14), [Name('length', Load(), lineno=48, col_offset=24)], [], None, None, lineno=48, col_offset=14), lineno=48, col_offset=8), If(UnaryOp(Not(), Name('buf', Load(), lineno=49, col_offset=15), lineno=49, col_offset=11), [Break( lineno=50, col_offset=12)], [], lineno=49, col_offset=8), Expr(Call(Attribute(Name('fdst', Load(), lineno=51, col_offset=8), 'write', Load(), lineno=51, col_offset=8), [Name('buf', Load(), lineno=51, col_offset=19)], [], None, None, lineno=51, col_offset=8), lineno=51, col_offset=8)], [], lineno=47, col_offset=4)], [], lineno=45, col_offset=0), FunctionDef('_samefile', arguments([Name('src', Param(), lineno=53, col_offset=14), Name('dst', Param(), lineno=53, col_offset=19)], None, None, []), [If(Call(Name('hasattr', Load(), lineno=55, col_offset=7), [Attribute(Name('os', Load(), lineno=55, col_offset=15), 'path', Load(), lineno=55, col_offset=15), Str('samefile', lineno=55, col_offset=24)], [], None, None, lineno=55, col_offset=7), [TryExcept([Return(Call(Attribute(Attribute(Name('os', Load(), lineno=57, col_offset=19), 'path', Load(), lineno=57, col_offset=19), 'samefile', Load(), lineno=57, col_offset=19), [Name('src', Load(), lineno=57, col_offset=36), Name('dst', Load(), lineno=57, col_offset=41)], [], None, None, lineno=57, col_offset=19), lineno=57, col_offset=12)], [ExceptHandler(Name('OSError', Load(), lineno=58, col_offset=15), None, [Return(Name('False', Load(), lineno=59, col_offset=19), lineno=59, col_offset=12)], lineno=58, col_offset=8)], [], lineno=56, col_offset=8)], [], lineno=55, col_offset=4), Return(Compare(Call(Attribute(Attribute(Name('os', Load(), lineno=62, col_offset=12), 'path', Load(), lineno=62, col_offset=12), 'normcase', Load(), lineno=62, col_offset=12), [Call(Attribute(Attribute(Name('os', Load(), lineno=62, col_offset=29), 'path', Load(), lineno=62, col_offset=29), 'abspath', Load(), lineno=62, col_offset=29), [Name('src', Load(), lineno=62, col_offset=45)], [], None, None, lineno=62, col_offset=29)], [], None, None, lineno=62, col_offset=12), [Eq()], [Call(Attribute(Attribute(Name('os', Load(), lineno=63, col_offset=12), 'path', Load(), lineno=63, col_offset=12), 'normcase', Load(), lineno=63, col_offset=12), [Call(Attribute(Attribute(Name('os', Load(), lineno=63, col_offset=29), 'path', Load(), lineno=63, col_offset=29), 'abspath', Load(), lineno=63, col_offset=29), [Name('dst', Load(), lineno=63, col_offset=45)], [], None, None, lineno=63, col_offset=29)], [], None, None, lineno=63, col_offset=12)], lineno=62, col_offset=12), lineno=62, col_offset=4)], [], lineno=53, col_offset=0), FunctionDef('copyfile', arguments([Name('src', Param(), lineno=65, col_offset=13), Name('dst', Param(), lineno=65, col_offset=18)], None, None, []), [Expr(Str('Copy data from src to dst', lineno=66, col_offset=4), lineno=66, col_offset=4), If(Call(Name('_samefile', Load(), lineno=67, col_offset=7), [Name('src', Load(), lineno=67, col_offset=17), Name('dst', Load(), lineno=67, col_offset=22)], [], None, None, lineno=67, col_offset=7), [Raise(Call(Name('Error', Load(), lineno=68, col_offset=14), [BinOp(Str('`%s` and `%s` are the same file', lineno=68, col_offset=20), Mod(), Tuple([Name('src', Load(), lineno=68, col_offset=57), Name('dst', Load(), lineno=68, col_offset=62)], Load(), lineno=68, col_offset=57), lineno=68, col_offset=20)], [], None, None, lineno=68, col_offset=14), None, None, lineno=68, col_offset=8)], [], lineno=67, col_offset=4), For(Name('fn', Store(), lineno=70, col_offset=8), List([Name('src', Load(), lineno=70, col_offset=15), Name('dst', Load(), lineno=70, col_offset=20)], Load(), lineno=70, col_offset=14), [TryExcept([Assign([Name('st', Store(), lineno=72, col_offset=12)], Call(Attribute(Name('os', Load(), lineno=72, col_offset=17), 'stat', Load(), lineno=72, col_offset=17), [Name('fn', Load(), lineno=72, col_offset=25)], [], None, None, lineno=72, col_offset=17), lineno=72, col_offset=12)], [ExceptHandler(Name('OSError', Load(), lineno=73, col_offset=15), None, [Pass( lineno=75, col_offset=12)], lineno=73, col_offset=8)], [If(Call(Attribute(Name('stat', Load(), lineno=78, col_offset=15), 'S_ISFIFO', Load(), lineno=78, col_offset=15), [Attribute(Name('st', Load(), lineno=78, col_offset=29), 'st_mode', Load(), lineno=78, col_offset=29)], [], None, None, lineno=78, col_offset=15), [Raise(Call(Name('SpecialFileError', Load(), lineno=79, col_offset=22), [BinOp(Str('`%s` is a named pipe', lineno=79, col_offset=39), Mod(), Name('fn', Load(), lineno=79, col_offset=64), lineno=79, col_offset=39)], [], None, None, lineno=79, col_offset=22), None, None, lineno=79, col_offset=16)], [], lineno=78, col_offset=12)], lineno=71, col_offset=8)], [], lineno=70, col_offset=4), With(Call(Name('open', Load(), lineno=81, col_offset=9), [Name('src', Load(), lineno=81, col_offset=14), Str('rb', lineno=81, col_offset=19)], [], None, None, lineno=81, col_offset=9), Name('fsrc', Store(), lineno=81, col_offset=28), [With(Call(Name('open', Load(), lineno=82, col_offset=13), [Name('dst', Load(), lineno=82, col_offset=18), Str('wb', lineno=82, col_offset=23)], [], None, None, lineno=82, col_offset=13), Name('fdst', Store(), lineno=82, col_offset=32), [Expr(Call(Name('copyfileobj', Load(), lineno=83, col_offset=12), [Name('fsrc', Load(), lineno=83, col_offset=24), Name('fdst', Load(), lineno=83, col_offset=30)], [], None, None, lineno=83, col_offset=12), lineno=83, col_offset=12)], lineno=82, col_offset=13)], lineno=81, col_offset=9)], [], lineno=65, col_offset=0), FunctionDef('copymode', arguments([Name('src', Param(), lineno=85, col_offset=13), Name('dst', Param(), lineno=85, col_offset=18)], None, None, []), [Expr(Str('Copy mode bits from src to dst', lineno=86, col_offset=4), lineno=86, col_offset=4), If(Call(Name('hasattr', Load(), lineno=87, col_offset=7), [Name('os', Load(), lineno=87, col_offset=15), Str('chmod', lineno=87, col_offset=19)], [], None, None, lineno=87, col_offset=7), [Assign([Name('st', Store(), lineno=88, col_offset=8)], Call(Attribute(Name('os', Load(), lineno=88, col_offset=13), 'stat', Load(), lineno=88, col_offset=13), [Name('src', Load(), lineno=88, col_offset=21)], [], None, None, lineno=88, col_offset=13), lineno=88, col_offset=8), Assign([Name('mode', Store(), lineno=89, col_offset=8)], Call(Attribute(Name('stat', Load(), lineno=89, col_offset=15), 'S_IMODE', Load(), lineno=89, col_offset=15), [Attribute(Name('st', Load(), lineno=89, col_offset=28), 'st_mode', Load(), lineno=89, col_offset=28)], [], None, None, lineno=89, col_offset=15), lineno=89, col_offset=8), Expr(Call(Attribute(Name('os', Load(), lineno=90, col_offset=8), 'chmod', Load(), lineno=90, col_offset=8), [Name('dst', Load(), lineno=90, col_offset=17), Name('mode', Load(), lineno=90, col_offset=22)], [], None, None, lineno=90, col_offset=8), lineno=90, col_offset=8)], [], lineno=87, col_offset=4)], [], lineno=85, col_offset=0), FunctionDef('copystat', arguments([Name('src', Param(), lineno=92, col_offset=13), Name('dst', Param(), lineno=92, col_offset=18)], None, None, []), [Expr(Str('Copy all stat info (mode bits, atime, mtime, flags) from src to dst', lineno=93, col_offset=4), lineno=93, col_offset=4), Assign([Name('st', Store(), lineno=94, col_offset=4)], Call(Attribute(Name('os', Load(), lineno=94, col_offset=9), 'stat', Load(), lineno=94, col_offset=9), [Name('src', Load(), lineno=94, col_offset=17)], [], None, None, lineno=94, col_offset=9), lineno=94, col_offset=4), Assign([Name('mode', Store(), lineno=95, col_offset=4)], Call(Attribute(Name('stat', Load(), lineno=95, col_offset=11), 'S_IMODE', Load(), lineno=95, col_offset=11), [Attribute(Name('st', Load(), lineno=95, col_offset=24), 'st_mode', Load(), lineno=95, col_offset=24)], [], None, None, lineno=95, col_offset=11), lineno=95, col_offset=4), If(Call(Name('hasattr', Load(), lineno=96, col_offset=7), [Name('os', Load(), lineno=96, col_offset=15), Str('utime', lineno=96, col_offset=19)], [], None, None, lineno=96, col_offset=7), [Expr(Call(Attribute(Name('os', Load(), lineno=97, col_offset=8), 'utime', Load(), lineno=97, col_offset=8), [Name('dst', Load(), lineno=97, col_offset=17), Tuple([Attribute(Name('st', Load(), lineno=97, col_offset=23), 'st_atime', Load(), lineno=97, col_offset=23), Attribute(Name('st', Load(), lineno=97, col_offset=36), 'st_mtime', Load(), lineno=97, col_offset=36)], Load(), lineno=97, col_offset=23)], [], None, None, lineno=97, col_offset=8), lineno=97, col_offset=8)], [], lineno=96, col_offset=4), If(Call(Name('hasattr', Load(), lineno=98, col_offset=7), [Name('os', Load(), lineno=98, col_offset=15), Str('chmod', lineno=98, col_offset=19)], [], None, None, lineno=98, col_offset=7), [Expr(Call(Attribute(Name('os', Load(), lineno=99, col_offset=8), 'chmod', Load(), lineno=99, col_offset=8), [Name('dst', Load(), lineno=99, col_offset=17), Name('mode', Load(), lineno=99, col_offset=22)], [], None, None, lineno=99, col_offset=8), lineno=99, col_offset=8)], [], lineno=98, col_offset=4), If(BoolOp(And(), [Call(Name('hasattr', Load(), lineno=100, col_offset=7), [Name('os', Load(), lineno=100, col_offset=15), Str('chflags', lineno=100, col_offset=19)], [], None, None, lineno=100, col_offset=7), Call(Name('hasattr', Load(), lineno=100, col_offset=34), [Name('st', Load(), lineno=100, col_offset=42), Str('st_flags', lineno=100, col_offset=46)], [], None, None, lineno=100, col_offset=34)], lineno=100, col_offset=7), [TryExcept([Expr(Call(Attribute(Name('os', Load(), lineno=102, col_offset=12), 'chflags', Load(), lineno=102, col_offset=12), [Name('dst', Load(), lineno=102, col_offset=23), Attribute(Name('st', Load(), lineno=102, col_offset=28), 'st_flags', Load(), lineno=102, col_offset=28)], [], None, None, lineno=102, col_offset=12), lineno=102, col_offset=12)], [ExceptHandler(Name('OSError', Load(), lineno=103, col_offset=15), Name('why', Store(), lineno=103, col_offset=24), [If(BoolOp(Or(), [UnaryOp(Not(), Call(Name('hasattr', Load(), lineno=104, col_offset=20), [Name('errno', Load(), lineno=104, col_offset=28), Str('EOPNOTSUPP', lineno=104, col_offset=35)], [], None, None, lineno=104, col_offset=20), lineno=104, col_offset=16), Compare(Attribute(Name('why', Load(), lineno=105, col_offset=16), 'errno', Load(), lineno=105, col_offset=16), [NotEq()], [Attribute(Name('errno', Load(), lineno=105, col_offset=29), 'EOPNOTSUPP', Load(), lineno=105, col_offset=29)], lineno=105, col_offset=16)], lineno=104, col_offset=16), [Raise(None, None, None, lineno=106, col_offset=16)], [], lineno=104, col_offset=12)], lineno=103, col_offset=8)], [], lineno=101, col_offset=8)], [], lineno=100, col_offset=4)], [], lineno=92, col_offset=0), FunctionDef('copy', arguments([Name('src', Param(), lineno=108, col_offset=9), Name('dst', Param(), lineno=108, col_offset=14)], None, None, []), [Expr(Str('Copy data and mode bits ("cp src dst").\n\n    The destination may be a directory.\n\n    ', lineno=113, col_offset=-1), lineno=113, col_offset=-1), If(Call(Attribute(Attribute(Name('os', Load(), lineno=114, col_offset=7), 'path', Load(), lineno=114, col_offset=7), 'isdir', Load(), lineno=114, col_offset=7), [Name('dst', Load(), lineno=114, col_offset=21)], [], None, None, lineno=114, col_offset=7), [Assign([Name('dst', Store(), lineno=115, col_offset=8)], Call(Attribute(Attribute(Name('os', Load(), lineno=115, col_offset=14), 'path', Load(), lineno=115, col_offset=14), 'join', Load(), lineno=115, col_offset=14), [Name('dst', Load(), lineno=115, col_offset=27), Call(Attribute(Attribute(Name('os', Load(), lineno=115, col_offset=32), 'path', Load(), lineno=115, col_offset=32), 'basename', Load(), lineno=115, col_offset=32), [Name('src', Load(), lineno=115, col_offset=49)], [], None, None, lineno=115, col_offset=32)], [], None, None, lineno=115, col_offset=14), lineno=115, col_offset=8)], [], lineno=114, col_offset=4), Expr(Call(Name('copyfile', Load(), lineno=116, col_offset=4), [Name('src', Load(), lineno=116, col_offset=13), Name('dst', Load(), lineno=116, col_offset=18)], [], None, None, lineno=116, col_offset=4), lineno=116, col_offset=4), Expr(Call(Name('copymode', Load(), lineno=117, col_offset=4), [Name('src', Load(), lineno=117, col_offset=13), Name('dst', Load(), lineno=117, col_offset=18)], [], None, None, lineno=117, col_offset=4), lineno=117, col_offset=4)], [], lineno=108, col_offset=0), FunctionDef('copy2', arguments([Name('src', Param(), lineno=119, col_offset=10), Name('dst', Param(), lineno=119, col_offset=15)], None, None, []), [Expr(Str('Copy data and all stat info ("cp -p src dst").\n\n    The destination may be a directory.\n\n    ', lineno=124, col_offset=-1), lineno=124, col_offset=-1), If(Call(Attribute(Attribute(Name('os', Load(), lineno=125, col_offset=7), 'path', Load(), lineno=125, col_offset=7), 'isdir', Load(), lineno=125, col_offset=7), [Name('dst', Load(), lineno=125, col_offset=21)], [], None, None, lineno=125, col_offset=7), [Assign([Name('dst', Store(), lineno=126, col_offset=8)], Call(Attribute(Attribute(Name('os', Load(), lineno=126, col_offset=14), 'path', Load(), lineno=126, col_offset=14), 'join', Load(), lineno=126, col_offset=14), [Name('dst', Load(), lineno=126, col_offset=27), Call(Attribute(Attribute(Name('os', Load(), lineno=126, col_offset=32), 'path', Load(), lineno=126, col_offset=32), 'basename', Load(), lineno=126, col_offset=32), [Name('src', Load(), lineno=126, col_offset=49)], [], None, None, lineno=126, col_offset=32)], [], None, None, lineno=126, col_offset=14), lineno=126, col_offset=8)], [], lineno=125, col_offset=4), Expr(Call(Name('copyfile', Load(), lineno=127, col_offset=4), [Name('src', Load(), lineno=127, col_offset=13), Name('dst', Load(), lineno=127, col_offset=18)], [], None, None, lineno=127, col_offset=4), lineno=127, col_offset=4), Expr(Call(Name('copystat', Load(), lineno=128, col_offset=4), [Name('src', Load(), lineno=128, col_offset=13), Name('dst', Load(), lineno=128, col_offset=18)], [], None, None, lineno=128, col_offset=4), lineno=128, col_offset=4)], [], lineno=119, col_offset=0), FunctionDef('ignore_patterns', arguments([], 'patterns', None, []), [Expr(Str('Function that can be used as copytree() ignore parameter.\n\n    Patterns is a sequence of glob-style patterns\n    that are used to exclude files', lineno=134, col_offset=-1), lineno=134, col_offset=-1), FunctionDef('_ignore_patterns', arguments([Name('path', Param(), lineno=135, col_offset=25), Name('names', Param(), lineno=135, col_offset=31)], None, None, []), [Assign([Name('ignored_names', Store(), lineno=136, col_offset=8)], List([], Load(), lineno=136, col_offset=24), lineno=136, col_offset=8), For(Name('pattern', Store(), lineno=137, col_offset=12), Name('patterns', Load(), lineno=137, col_offset=23), [Expr(Call(Attribute(Name('ignored_names', Load(), lineno=138, col_offset=12), 'extend', Load(), lineno=138, col_offset=12), [Call(Attribute(Name('fnmatch', Load(), lineno=138, col_offset=33), 'filter', Load(), lineno=138, col_offset=33), [Name('names', Load(), lineno=138, col_offset=48), Name('pattern', Load(), lineno=138, col_offset=55)], [], None, None, lineno=138, col_offset=33)], [], None, None, lineno=138, col_offset=12), lineno=138, col_offset=12)], [], lineno=137, col_offset=8), Return(Call(Name('set', Load(), lineno=139, col_offset=15), [Name('ignored_names', Load(), lineno=139, col_offset=19)], [], None, None, lineno=139, col_offset=15), lineno=139, col_offset=8)], [], lineno=135, col_offset=4), Return(Name('_ignore_patterns', Load(), lineno=140, col_offset=11), lineno=140, col_offset=4)], [], lineno=130, col_offset=0), FunctionDef('copytree', arguments([Name('src', Param(), lineno=142, col_offset=13), Name('dst', Param(), lineno=142, col_offset=18), Name('symlinks', Param(), lineno=142, col_offset=23), Name('ignore', Param(), lineno=142, col_offset=39)], None, None, [Name('False', Load(), lineno=142, col_offset=32), Name('None', Load(), lineno=142, col_offset=46)]), [Expr(Str('Recursively copy a directory tree using copy2().\n\n    The destination directory must not already exist.\n    If exception(s) occur, an Error is raised with a list of reasons.\n\n    If the optional symlinks flag is true, symbolic links in the\n    source tree result in symbolic links in the destination tree; if\n    it is false, the contents of the files pointed to by symbolic\n    links are copied.\n\n    The optional ignore argument is a callable. If given, it\n    is called with the `src` parameter, which is the directory\n    being visited by copytree(), and `names` which is the list of\n    `src` contents, as returned by os.listdir():\n\n        callable(src, names) -> ignored_names\n\n    Since copytree() is called recursively, the callable will be\n    called once for each directory that is copied. It returns a\n    list of names relative to the `src` directory that should\n    not be copied.\n\n    XXX Consider this example code rather than the ultimate tool.\n\n    ', lineno=167, col_offset=-1), lineno=167, col_offset=-1), Assign([Name('names', Store(), lineno=168, col_offset=4)], Call(Attribute(Name('os', Load(), lineno=168, col_offset=12), 'listdir', Load(), lineno=168, col_offset=12), [Name('src', Load(), lineno=168, col_offset=23)], [], None, None, lineno=168, col_offset=12), lineno=168, col_offset=4), If(Compare(Name('ignore', Load(), lineno=169, col_offset=7), [IsNot()], [Name('None', Load(), lineno=169, col_offset=21)], lineno=169, col_offset=7), [Assign([Name('ignored_names', Store(), lineno=170, col_offset=8)], Call(Name('ignore', Load(), lineno=170, col_offset=24), [Name('src', Load(), lineno=170, col_offset=31), Name('names', Load(), lineno=170, col_offset=36)], [], None, None, lineno=170, col_offset=24), lineno=170, col_offset=8)], [Assign([Name('ignored_names', Store(), lineno=172, col_offset=8)], Call(Name('set', Load(), lineno=172, col_offset=24), [], [], None, None, lineno=172, col_offset=24), lineno=172, col_offset=8)], lineno=169, col_offset=4), Expr(Call(Attribute(Name('os', Load(), lineno=174, col_offset=4), 'makedirs', Load(), lineno=174, col_offset=4), [Name('dst', Load(), lineno=174, col_offset=16)], [], None, None, lineno=174, col_offset=4), lineno=174, col_offset=4), Assign([Name('errors', Store(), lineno=175, col_offset=4)], List([], Load(), lineno=175, col_offset=13), lineno=175, col_offset=4), For(Name('name', Store(), lineno=176, col_offset=8), Name('names', Load(), lineno=176, col_offset=16), [If(Compare(Name('name', Load(), lineno=177, col_offset=11), [In()], [Name('ignored_names', Load(), lineno=177, col_offset=19)], lineno=177, col_offset=11), [Continue( lineno=178, col_offset=12)], [], lineno=177, col_offset=8), Assign([Name('srcname', Store(), lineno=179, col_offset=8)], Call(Attribute(Attribute(Name('os', Load(), lineno=179, col_offset=18), 'path', Load(), lineno=179, col_offset=18), 'join', Load(), lineno=179, col_offset=18), [Name('src', Load(), lineno=179, col_offset=31), Name('name', Load(), lineno=179, col_offset=36)], [], None, None, lineno=179, col_offset=18), lineno=179, col_offset=8), Assign([Name('dstname', Store(), lineno=180, col_offset=8)], Call(Attribute(Attribute(Name('os', Load(), lineno=180, col_offset=18), 'path', Load(), lineno=180, col_offset=18), 'join', Load(), lineno=180, col_offset=18), [Name('dst', Load(), lineno=180, col_offset=31), Name('name', Load(), lineno=180, col_offset=36)], [], None, None, lineno=180, col_offset=18), lineno=180, col_offset=8), TryExcept([If(BoolOp(And(), [Name('symlinks', Load(), lineno=182, col_offset=15), Call(Attribute(Attribute(Name('os', Load(), lineno=182, col_offset=28), 'path', Load(), lineno=182, col_offset=28), 'islink', Load(), lineno=182, col_offset=28), [Name('srcname', Load(), lineno=182, col_offset=43)], [], None, None, lineno=182, col_offset=28)], lineno=182, col_offset=15), [Assign([Name('linkto', Store(), lineno=183, col_offset=16)], Call(Attribute(Name('os', Load(), lineno=183, col_offset=25), 'readlink', Load(), lineno=183, col_offset=25), [Name('srcname', Load(), lineno=183, col_offset=37)], [], None, None, lineno=183, col_offset=25), lineno=183, col_offset=16), Expr(Call(Attribute(Name('os', Load(), lineno=184, col_offset=16), 'symlink', Load(), lineno=184, col_offset=16), [Name('linkto', Load(), lineno=184, col_offset=27), Name('dstname', Load(), lineno=184, col_offset=35)], [], None, None, lineno=184, col_offset=16), lineno=184, col_offset=16)], [If(Call(Attribute(Attribute(Name('os', Load(), lineno=185, col_offset=17), 'path', Load(), lineno=185, col_offset=17), 'isdir', Load(), lineno=185, col_offset=17), [Name('srcname', Load(), lineno=185, col_offset=31)], [], None, None, lineno=185, col_offset=17), [Expr(Call(Name('copytree', Load(), lineno=186, col_offset=16), [Name('srcname', Load(), lineno=186, col_offset=25), Name('dstname', Load(), lineno=186, col_offset=34), Name('symlinks', Load(), lineno=186, col_offset=43), Name('ignore', Load(), lineno=186, col_offset=53)], [], None, None, lineno=186, col_offset=16), lineno=186, col_offset=16)], [Expr(Call(Name('copy2', Load(), lineno=189, col_offset=16), [Name('srcname', Load(), lineno=189, col_offset=22), Name('dstname', Load(), lineno=189, col_offset=31)], [], None, None, lineno=189, col_offset=16), lineno=189, col_offset=16)], lineno=185, col_offset=17)], lineno=182, col_offset=12)], [ExceptHandler(Name('Error', Load(), lineno=192, col_offset=15), Name('err', Store(), lineno=192, col_offset=22), [Expr(Call(Attribute(Name('errors', Load(), lineno=193, col_offset=12), 'extend', Load(), lineno=193, col_offset=12), [Subscript(Attribute(Name('err', Load(), lineno=193, col_offset=26), 'args', Load(), lineno=193, col_offset=26), Index(Num(0, lineno=193, col_offset=35)), Load(), lineno=193, col_offset=26)], [], None, None, lineno=193, col_offset=12), lineno=193, col_offset=12)], lineno=192, col_offset=8), ExceptHandler(Name('EnvironmentError', Load(), lineno=194, col_offset=15), Name('why', Store(), lineno=194, col_offset=33), [Expr(Call(Attribute(Name('errors', Load(), lineno=195, col_offset=12), 'append', Load(), lineno=195, col_offset=12), [Tuple([Name('srcname', Load(), lineno=195, col_offset=27), Name('dstname', Load(), lineno=195, col_offset=36), Call(Name('str', Load(), lineno=195, col_offset=45), [Name('why', Load(), lineno=195, col_offset=49)], [], None, None, lineno=195, col_offset=45)], Load(), lineno=195, col_offset=27)], [], None, None, lineno=195, col_offset=12), lineno=195, col_offset=12)], lineno=194, col_offset=8)], [], lineno=181, col_offset=8)], [], lineno=176, col_offset=4), TryExcept([Expr(Call(Name('copystat', Load(), lineno=197, col_offset=8), [Name('src', Load(), lineno=197, col_offset=17), Name('dst', Load(), lineno=197, col_offset=22)], [], None, None, lineno=197, col_offset=8), lineno=197, col_offset=8)], [ExceptHandler(Name('OSError', Load(), lineno=198, col_offset=11), Name('why', Store(), lineno=198, col_offset=20), [If(BoolOp(And(), [Compare(Name('WindowsError', Load(), lineno=199, col_offset=11), [IsNot()], [Name('None', Load(), lineno=199, col_offset=31)], lineno=199, col_offset=11), Call(Name('isinstance', Load(), lineno=199, col_offset=40), [Name('why', Load(), lineno=199, col_offset=51), Name('WindowsError', Load(), lineno=199, col_offset=56)], [], None, None, lineno=199, col_offset=40)], lineno=199, col_offset=11), [Pass( lineno=201, col_offset=12)], [Expr(Call(Attribute(Name('errors', Load(), lineno=203, col_offset=12), 'extend', Load(), lineno=203, col_offset=12), [Tuple([Name('src', Load(), lineno=203, col_offset=27), Name('dst', Load(), lineno=203, col_offset=32), Call(Name('str', Load(), lineno=203, col_offset=37), [Name('why', Load(), lineno=203, col_offset=41)], [], None, None, lineno=203, col_offset=37)], Load(), lineno=203, col_offset=27)], [], None, None, lineno=203, col_offset=12), lineno=203, col_offset=12)], lineno=199, col_offset=8)], lineno=198, col_offset=4)], [], lineno=196, col_offset=4), If(Name('errors', Load(), lineno=204, col_offset=7), [Raise(Name('Error', Load(), lineno=205, col_offset=14), Name('errors', Load(), lineno=205, col_offset=21), None, lineno=205, col_offset=8)], [], lineno=204, col_offset=4)], [], lineno=142, col_offset=0), FunctionDef('rmtree', arguments([Name('path', Param(), lineno=207, col_offset=11), Name('ignore_errors', Param(), lineno=207, col_offset=17), Name('onerror', Param(), lineno=207, col_offset=38)], None, None, [Name('False', Load(), lineno=207, col_offset=31), Name('None', Load(), lineno=207, col_offset=46)]), [Expr(Str('Recursively delete a directory tree.\n\n    If ignore_errors is set, errors are ignored; otherwise, if onerror\n    is set, it is called to handle the error with arguments (func,\n    path, exc_info) where func is os.listdir, os.remove, or os.rmdir;\n    path is the argument to that function that caused it to fail; and\n    exc_info is a tuple returned by sys.exc_info().  If ignore_errors\n    is false and onerror is None, an exception is raised.\n\n    ', lineno=217, col_offset=-1), lineno=217, col_offset=-1), If(Name('ignore_errors', Load(), lineno=218, col_offset=7), [FunctionDef('onerror', arguments([], 'args', None, []), [Pass( lineno=220, col_offset=12)], [], lineno=219, col_offset=8)], [If(Compare(Name('onerror', Load(), lineno=221, col_offset=9), [Is()], [Name('None', Load(), lineno=221, col_offset=20)], lineno=221, col_offset=9), [FunctionDef('onerror', arguments([], 'args', None, []), [Raise(None, None, None, lineno=223, col_offset=12)], [], lineno=222, col_offset=8)], [], lineno=221, col_offset=9)], lineno=218, col_offset=4), TryExcept([If(Call(Attribute(Attribute(Name('os', Load(), lineno=225, col_offset=11), 'path', Load(), lineno=225, col_offset=11), 'islink', Load(), lineno=225, col_offset=11), [Name('path', Load(), lineno=225, col_offset=26)], [], None, None, lineno=225, col_offset=11), [Raise(Call(Name('OSError', Load(), lineno=227, col_offset=18), [Str('Cannot call rmtree on a symbolic link', lineno=227, col_offset=26)], [], None, None, lineno=227, col_offset=18), None, None, lineno=227, col_offset=12)], [], lineno=225, col_offset=8)], [ExceptHandler(Name('OSError', Load(), lineno=228, col_offset=11), None, [Expr(Call(Name('onerror', Load(), lineno=229, col_offset=8), [Attribute(Attribute(Name('os', Load(), lineno=229, col_offset=16), 'path', Load(), lineno=229, col_offset=16), 'islink', Load(), lineno=229, col_offset=16), Name('path', Load(), lineno=229, col_offset=32), Call(Attribute(Name('sys', Load(), lineno=229, col_offset=38), 'exc_info', Load(), lineno=229, col_offset=38), [], [], None, None, lineno=229, col_offset=38)], [], None, None, lineno=229, col_offset=8), lineno=229, col_offset=8), Return(None, lineno=231, col_offset=8)], lineno=228, col_offset=4)], [], lineno=224, col_offset=4), Assign([Name('names', Store(), lineno=232, col_offset=4)], List([], Load(), lineno=232, col_offset=12), lineno=232, col_offset=4), TryExcept([Assign([Name('names', Store(), lineno=234, col_offset=8)], Call(Attribute(Name('os', Load(), lineno=234, col_offset=16), 'listdir', Load(), lineno=234, col_offset=16), [Name('path', Load(), lineno=234, col_offset=27)], [], None, None, lineno=234, col_offset=16), lineno=234, col_offset=8)], [ExceptHandler(Attribute(Name('os', Load(), lineno=235, col_offset=11), 'error', Load(), lineno=235, col_offset=11), Name('err', Store(), lineno=235, col_offset=21), [Expr(Call(Name('onerror', Load(), lineno=236, col_offset=8), [Attribute(Name('os', Load(), lineno=236, col_offset=16), 'listdir', Load(), lineno=236, col_offset=16), Name('path', Load(), lineno=236, col_offset=28), Call(Attribute(Name('sys', Load(), lineno=236, col_offset=34), 'exc_info', Load(), lineno=236, col_offset=34), [], [], None, None, lineno=236, col_offset=34)], [], None, None, lineno=236, col_offset=8), lineno=236, col_offset=8)], lineno=235, col_offset=4)], [], lineno=233, col_offset=4), For(Name('name', Store(), lineno=237, col_offset=8), Name('names', Load(), lineno=237, col_offset=16), [Assign([Name('fullname', Store(), lineno=238, col_offset=8)], Call(Attribute(Attribute(Name('os', Load(), lineno=238, col_offset=19), 'path', Load(), lineno=238, col_offset=19), 'join', Load(), lineno=238, col_offset=19), [Name('path', Load(), lineno=238, col_offset=32), Name('name', Load(), lineno=238, col_offset=38)], [], None, None, lineno=238, col_offset=19), lineno=238, col_offset=8), TryExcept([Assign([Name('mode', Store(), lineno=240, col_offset=12)], Attribute(Call(Attribute(Name('os', Load(), lineno=240, col_offset=19), 'lstat', Load(), lineno=240, col_offset=19), [Name('fullname', Load(), lineno=240, col_offset=28)], [], None, None, lineno=240, col_offset=19), 'st_mode', Load(), lineno=240, col_offset=19), lineno=240, col_offset=12)], [ExceptHandler(Attribute(Name('os', Load(), lineno=241, col_offset=15), 'error', Load(), lineno=241, col_offset=15), None, [Assign([Name('mode', Store(), lineno=242, col_offset=12)], Num(0, lineno=242, col_offset=19), lineno=242, col_offset=12)], lineno=241, col_offset=8)], [], lineno=239, col_offset=8), If(Call(Attribute(Name('stat', Load(), lineno=243, col_offset=11), 'S_ISDIR', Load(), lineno=243, col_offset=11), [Name('mode', Load(), lineno=243, col_offset=24)], [], None, None, lineno=243, col_offset=11), [Expr(Call(Name('rmtree', Load(), lineno=244, col_offset=12), [Name('fullname', Load(), lineno=244, col_offset=19), Name('ignore_errors', Load(), lineno=244, col_offset=29), Name('onerror', Load(), lineno=244, col_offset=44)], [], None, None, lineno=244, col_offset=12), lineno=244, col_offset=12)], [TryExcept([Expr(Call(Attribute(Name('os', Load(), lineno=247, col_offset=16), 'remove', Load(), lineno=247, col_offset=16), [Name('fullname', Load(), lineno=247, col_offset=26)], [], None, None, lineno=247, col_offset=16), lineno=247, col_offset=16)], [ExceptHandler(Attribute(Name('os', Load(), lineno=248, col_offset=19), 'error', Load(), lineno=248, col_offset=19), Name('err', Store(), lineno=248, col_offset=29), [Expr(Call(Name('onerror', Load(), lineno=249, col_offset=16), [Attribute(Name('os', Load(), lineno=249, col_offset=24), 'remove', Load(), lineno=249, col_offset=24), Name('fullname', Load(), lineno=249, col_offset=35), Call(Attribute(Name('sys', Load(), lineno=249, col_offset=45), 'exc_info', Load(), lineno=249, col_offset=45), [], [], None, None, lineno=249, col_offset=45)], [], None, None, lineno=249, col_offset=16), lineno=249, col_offset=16)], lineno=248, col_offset=12)], [], lineno=246, col_offset=12)], lineno=243, col_offset=8)], [], lineno=237, col_offset=4), TryExcept([Expr(Call(Attribute(Name('os', Load(), lineno=251, col_offset=8), 'rmdir', Load(), lineno=251, col_offset=8), [Name('path', Load(), lineno=251, col_offset=17)], [], None, None, lineno=251, col_offset=8), lineno=251, col_offset=8)], [ExceptHandler(Attribute(Name('os', Load(), lineno=252, col_offset=11), 'error', Load(), lineno=252, col_offset=11), None, [Expr(Call(Name('onerror', Load(), lineno=253, col_offset=8), [Attribute(Name('os', Load(), lineno=253, col_offset=16), 'rmdir', Load(), lineno=253, col_offset=16), Name('path', Load(), lineno=253, col_offset=26), Call(Attribute(Name('sys', Load(), lineno=253, col_offset=32), 'exc_info', Load(), lineno=253, col_offset=32), [], [], None, None, lineno=253, col_offset=32)], [], None, None, lineno=253, col_offset=8), lineno=253, col_offset=8)], lineno=252, col_offset=4)], [], lineno=250, col_offset=4)], [], lineno=207, col_offset=0), FunctionDef('_basename', arguments([Name('path', Param(), lineno=256, col_offset=14)], None, None, []), [Return(Call(Attribute(Attribute(Name('os', Load(), lineno=259, col_offset=11), 'path', Load(), lineno=259, col_offset=11), 'basename', Load(), lineno=259, col_offset=11), [Call(Attribute(Name('path', Load(), lineno=259, col_offset=28), 'rstrip', Load(), lineno=259, col_offset=28), [Attribute(Attribute(Name('os', Load(), lineno=259, col_offset=40), 'path', Load(), lineno=259, col_offset=40), 'sep', Load(), lineno=259, col_offset=40)], [], None, None, lineno=259, col_offset=28)], [], None, None, lineno=259, col_offset=11), lineno=259, col_offset=4)], [], lineno=256, col_offset=0), FunctionDef('move', arguments([Name('src', Param(), lineno=261, col_offset=9), Name('dst', Param(), lineno=261, col_offset=14)], None, None, []), [Expr(Str('Recursively move a file or directory to another location. This is\n    similar to the Unix "mv" command.\n\n    If the destination is a directory or a symlink to a directory, the source\n    is moved inside the directory. The destination path must not already\n    exist.\n\n    If the destination already exists but is not a directory, it may be\n    overwritten depending on os.rename() semantics.\n\n    If the destination is on our current filesystem, then rename() is used.\n    Otherwise, src is copied to the destination and then removed.\n    A lot more could be done here...  A look at a mv.c shows a lot of\n    the issues this implementation glosses over.\n\n    ', lineno=277, col_offset=-1), lineno=277, col_offset=-1), Assign([Name('real_dst', Store(), lineno=278, col_offset=4)], Name('dst', Load(), lineno=278, col_offset=15), lineno=278, col_offset=4), If(Call(Attribute(Attribute(Name('os', Load(), lineno=279, col_offset=7), 'path', Load(), lineno=279, col_offset=7), 'isdir', Load(), lineno=279, col_offset=7), [Name('dst', Load(), lineno=279, col_offset=21)], [], None, None, lineno=279, col_offset=7), [Assign([Name('real_dst', Store(), lineno=280, col_offset=8)], Call(Attribute(Attribute(Name('os', Load(), lineno=280, col_offset=19), 'path', Load(), lineno=280, col_offset=19), 'join', Load(), lineno=280, col_offset=19), [Name('dst', Load(), lineno=280, col_offset=32), Call(Name('_basename', Load(), lineno=280, col_offset=37), [Name('src', Load(), lineno=280, col_offset=47)], [], None, None, lineno=280, col_offset=37)], [], None, None, lineno=280, col_offset=19), lineno=280, col_offset=8), If(Call(Attribute(Attribute(Name('os', Load(), lineno=281, col_offset=11), 'path', Load(), lineno=281, col_offset=11), 'exists', Load(), lineno=281, col_offset=11), [Name('real_dst', Load(), lineno=281, col_offset=26)], [], None, None, lineno=281, col_offset=11), [Raise(Name('Error', Load(), lineno=282, col_offset=18), BinOp(Str("Destination path '%s' already exists", lineno=282, col_offset=25), Mod(), Name('real_dst', Load(), lineno=282, col_offset=66), lineno=282, col_offset=25), None, lineno=282, col_offset=12)], [], lineno=281, col_offset=8)], [], lineno=279, col_offset=4), TryExcept([Expr(Call(Attribute(Name('os', Load(), lineno=284, col_offset=8), 'rename', Load(), lineno=284, col_offset=8), [Name('src', Load(), lineno=284, col_offset=18), Name('real_dst', Load(), lineno=284, col_offset=23)], [], None, None, lineno=284, col_offset=8), lineno=284, col_offset=8)], [ExceptHandler(Name('OSError', Load(), lineno=285, col_offset=11), None, [If(Call(Attribute(Attribute(Name('os', Load(), lineno=286, col_offset=11), 'path', Load(), lineno=286, col_offset=11), 'isdir', Load(), lineno=286, col_offset=11), [Name('src', Load(), lineno=286, col_offset=25)], [], None, None, lineno=286, col_offset=11), [If(Call(Name('_destinsrc', Load(), lineno=287, col_offset=15), [Name('src', Load(), lineno=287, col_offset=26), Name('dst', Load(), lineno=287, col_offset=31)], [], None, None, lineno=287, col_offset=15), [Raise(Name('Error', Load(), lineno=288, col_offset=22), BinOp(Str("Cannot move a directory '%s' into itself '%s'.", lineno=288, col_offset=29), Mod(), Tuple([Name('src', Load(), lineno=288, col_offset=81), Name('dst', Load(), lineno=288, col_offset=86)], Load(), lineno=288, col_offset=81), lineno=288, col_offset=29), None, lineno=288, col_offset=16)], [], lineno=287, col_offset=12), Expr(Call(Name('copytree', Load(), lineno=289, col_offset=12), [Name('src', Load(), lineno=289, col_offset=21), Name('real_dst', Load(), lineno=289, col_offset=26)], [keyword('symlinks', Name('True', Load(), lineno=289, col_offset=45))], None, None, lineno=289, col_offset=12), lineno=289, col_offset=12), Expr(Call(Name('rmtree', Load(), lineno=290, col_offset=12), [Name('src', Load(), lineno=290, col_offset=19)], [], None, None, lineno=290, col_offset=12), lineno=290, col_offset=12)], [Expr(Call(Name('copy2', Load(), lineno=292, col_offset=12), [Name('src', Load(), lineno=292, col_offset=18), Name('real_dst', Load(), lineno=292, col_offset=23)], [], None, None, lineno=292, col_offset=12), lineno=292, col_offset=12), Expr(Call(Attribute(Name('os', Load(), lineno=293, col_offset=12), 'unlink', Load(), lineno=293, col_offset=12), [Name('src', Load(), lineno=293, col_offset=22)], [], None, None, lineno=293, col_offset=12), lineno=293, col_offset=12)], lineno=286, col_offset=8)], lineno=285, col_offset=4)], [], lineno=283, col_offset=4)], [], lineno=261, col_offset=0), FunctionDef('_destinsrc', arguments([Name('src', Param(), lineno=295, col_offset=15), Name('dst', Param(), lineno=295, col_offset=20)], None, None, []), [Assign([Name('src', Store(), lineno=296, col_offset=4)], Call(Name('abspath', Load(), lineno=296, col_offset=10), [Name('src', Load(), lineno=296, col_offset=18)], [], None, None, lineno=296, col_offset=10), lineno=296, col_offset=4), Assign([Name('dst', Store(), lineno=297, col_offset=4)], Call(Name('abspath', Load(), lineno=297, col_offset=10), [Name('dst', Load(), lineno=297, col_offset=18)], [], None, None, lineno=297, col_offset=10), lineno=297, col_offset=4), If(UnaryOp(Not(), Call(Attribute(Name('src', Load(), lineno=298, col_offset=11), 'endswith', Load(), lineno=298, col_offset=11), [Attribute(Attribute(Name('os', Load(), lineno=298, col_offset=24), 'path', Load(), lineno=298, col_offset=24), 'sep', Load(), lineno=298, col_offset=24)], [], None, None, lineno=298, col_offset=11), lineno=298, col_offset=7), [AugAssign(Name('src', Store(), lineno=299, col_offset=8), Add(), Attribute(Attribute(Name('os', Load(), lineno=299, col_offset=15), 'path', Load(), lineno=299, col_offset=15), 'sep', Load(), lineno=299, col_offset=15), lineno=299, col_offset=8)], [], lineno=298, col_offset=4), If(UnaryOp(Not(), Call(Attribute(Name('dst', Load(), lineno=300, col_offset=11), 'endswith', Load(), lineno=300, col_offset=11), [Attribute(Attribute(Name('os', Load(), lineno=300, col_offset=24), 'path', Load(), lineno=300, col_offset=24), 'sep', Load(), lineno=300, col_offset=24)], [], None, None, lineno=300, col_offset=11), lineno=300, col_offset=7), [AugAssign(Name('dst', Store(), lineno=301, col_offset=8), Add(), Attribute(Attribute(Name('os', Load(), lineno=301, col_offset=15), 'path', Load(), lineno=301, col_offset=15), 'sep', Load(), lineno=301, col_offset=15), lineno=301, col_offset=8)], [], lineno=300, col_offset=4), Return(Call(Attribute(Name('dst', Load(), lineno=302, col_offset=11), 'startswith', Load(), lineno=302, col_offset=11), [Name('src', Load(), lineno=302, col_offset=26)], [], None, None, lineno=302, col_offset=11), lineno=302, col_offset=4)], [], lineno=295, col_offset=0), FunctionDef('_get_gid', arguments([Name('name', Param(), lineno=304, col_offset=13)], None, None, []), [Expr(Str('Returns a gid, given a group name.', lineno=305, col_offset=4), lineno=305, col_offset=4), If(BoolOp(Or(), [Compare(Name('getgrnam', Load(), lineno=306, col_offset=7), [Is()], [Name('None', Load(), lineno=306, col_offset=19)], lineno=306, col_offset=7), Compare(Name('name', Load(), lineno=306, col_offset=27), [Is()], [Name('None', Load(), lineno=306, col_offset=35)], lineno=306, col_offset=27)], lineno=306, col_offset=7), [Return(Name('None', Load(), lineno=307, col_offset=15), lineno=307, col_offset=8)], [], lineno=306, col_offset=4), TryExcept([Assign([Name('result', Store(), lineno=309, col_offset=8)], Call(Name('getgrnam', Load(), lineno=309, col_offset=17), [Name('name', Load(), lineno=309, col_offset=26)], [], None, None, lineno=309, col_offset=17), lineno=309, col_offset=8)], [ExceptHandler(Name('KeyError', Load(), lineno=310, col_offset=11), None, [Assign([Name('result', Store(), lineno=311, col_offset=8)], Name('None', Load(), lineno=311, col_offset=17), lineno=311, col_offset=8)], lineno=310, col_offset=4)], [], lineno=308, col_offset=4), If(Compare(Name('result', Load(), lineno=312, col_offset=7), [IsNot()], [Name('None', Load(), lineno=312, col_offset=21)], lineno=312, col_offset=7), [Return(Subscript(Name('result', Load(), lineno=313, col_offset=15), Index(Num(2, lineno=313, col_offset=22)), Load(), lineno=313, col_offset=15), lineno=313, col_offset=8)], [], lineno=312, col_offset=4), Return(Name('None', Load(), lineno=314, col_offset=11), lineno=314, col_offset=4)], [], lineno=304, col_offset=0), FunctionDef('_get_uid', arguments([Name('name', Param(), lineno=316, col_offset=13)], None, None, []), [Expr(Str('Returns an uid, given a user name.', lineno=317, col_offset=4), lineno=317, col_offset=4), If(BoolOp(Or(), [Compare(Name('getpwnam', Load(), lineno=318, col_offset=7), [Is()], [Name('None', Load(), lineno=318, col_offset=19)], lineno=318, col_offset=7), Compare(Name('name', Load(), lineno=318, col_offset=27), [Is()], [Name('None', Load(), lineno=318, col_offset=35)], lineno=318, col_offset=27)], lineno=318, col_offset=7), [Return(Name('None', Load(), lineno=319, col_offset=15), lineno=319, col_offset=8)], [], lineno=318, col_offset=4), TryExcept([Assign([Name('result', Store(), lineno=321, col_offset=8)], Call(Name('getpwnam', Load(), lineno=321, col_offset=17), [Name('name', Load(), lineno=321, col_offset=26)], [], None, None, lineno=321, col_offset=17), lineno=321, col_offset=8)], [ExceptHandler(Name('KeyError', Load(), lineno=322, col_offset=11), None, [Assign([Name('result', Store(), lineno=323, col_offset=8)], Name('None', Load(), lineno=323, col_offset=17), lineno=323, col_offset=8)], lineno=322, col_offset=4)], [], lineno=320, col_offset=4), If(Compare(Name('result', Load(), lineno=324, col_offset=7), [IsNot()], [Name('None', Load(), lineno=324, col_offset=21)], lineno=324, col_offset=7), [Return(Subscript(Name('result', Load(), lineno=325, col_offset=15), Index(Num(2, lineno=325, col_offset=22)), Load(), lineno=325, col_offset=15), lineno=325, col_offset=8)], [], lineno=324, col_offset=4), Return(Name('None', Load(), lineno=326, col_offset=11), lineno=326, col_offset=4)], [], lineno=316, col_offset=0), FunctionDef('_make_tarball', arguments([Name('base_name', Param(), lineno=328, col_offset=18), Name('base_dir', Param(), lineno=328, col_offset=29), Name('compress', Param(), lineno=328, col_offset=39), Name('verbose', Param(), lineno=328, col_offset=56), Name('dry_run', Param(), lineno=328, col_offset=67), Name('owner', Param(), lineno=329, col_offset=18), Name('group', Param(), lineno=329, col_offset=30), Name('logger', Param(), lineno=329, col_offset=42)], None, None, [Str('gzip', lineno=328, col_offset=48), Num(0, lineno=328, col_offset=64), Num(0, lineno=328, col_offset=75), Name('None', Load(), lineno=329, col_offset=24), Name('None', Load(), lineno=329, col_offset=36), Name('None', Load(), lineno=329, col_offset=49)]), [Expr(Str('Create a (possibly compressed) tar file from all the files under\n    \'base_dir\'.\n\n    \'compress\' must be "gzip" (the default), "bzip2", or None.\n\n    \'owner\' and \'group\' can be used to define an owner and a group for the\n    archive that is being built. If not provided, the current owner and group\n    will be used.\n\n    The output tar file will be named \'base_dir\' +  ".tar", possibly plus\n    the appropriate compression extension (".gz", or ".bz2").\n\n    Returns the output filename.\n    ', lineno=343, col_offset=-1), lineno=343, col_offset=-1), Assign([Name('tar_compression', Store(), lineno=344, col_offset=4)], Dict([Str('gzip', lineno=344, col_offset=23), Str('bzip2', lineno=344, col_offset=37), Name('None', Load(), lineno=344, col_offset=53)], [Str('gz', lineno=344, col_offset=31), Str('bz2', lineno=344, col_offset=46), Str('', lineno=344, col_offset=59)], lineno=344, col_offset=22), lineno=344, col_offset=4), Assign([Name('compress_ext', Store(), lineno=345, col_offset=4)], Dict([Str('gzip', lineno=345, col_offset=20), Str('bzip2', lineno=345, col_offset=35)], [Str('.gz', lineno=345, col_offset=28), Str('.bz2', lineno=345, col_offset=44)], lineno=345, col_offset=19), lineno=345, col_offset=4), If(BoolOp(And(), [Compare(Name('compress', Load(), lineno=348, col_offset=7), [IsNot()], [Name('None', Load(), lineno=348, col_offset=23)], lineno=348, col_offset=7), Compare(Name('compress', Load(), lineno=348, col_offset=32), [NotIn()], [Call(Attribute(Name('compress_ext', Load(), lineno=348, col_offset=48), 'keys', Load(), lineno=348, col_offset=48), [], [], None, None, lineno=348, col_offset=48)], lineno=348, col_offset=32)], lineno=348, col_offset=7), [Raise(Name('ValueError', Load(), lineno=349, col_offset=14), Str("bad value for 'compress': must be None, 'gzip' or 'bzip2'", lineno=350, col_offset=15), None, lineno=349, col_offset=8)], [], lineno=348, col_offset=4), Assign([Name('archive_name', Store(), lineno=352, col_offset=4)], BinOp(BinOp(Name('base_name', Load(), lineno=352, col_offset=19), Add(), Str('.tar', lineno=352, col_offset=31), lineno=352, col_offset=19), Add(), Call(Attribute(Name('compress_ext', Load(), lineno=352, col_offset=40), 'get', Load(), lineno=352, col_offset=40), [Name('compress', Load(), lineno=352, col_offset=57), Str('', lineno=352, col_offset=67)], [], None, None, lineno=352, col_offset=40), lineno=352, col_offset=38), lineno=352, col_offset=4), Assign([Name('archive_dir', Store(), lineno=353, col_offset=4)], Call(Attribute(Attribute(Name('os', Load(), lineno=353, col_offset=18), 'path', Load(), lineno=353, col_offset=18), 'dirname', Load(), lineno=353, col_offset=18), [Name('archive_name', Load(), lineno=353, col_offset=34)], [], None, None, lineno=353, col_offset=18), lineno=353, col_offset=4), If(UnaryOp(Not(), Call(Attribute(Attribute(Name('os', Load(), lineno=355, col_offset=11), 'path', Load(), lineno=355, col_offset=11), 'exists', Load(), lineno=355, col_offset=11), [Name('archive_dir', Load(), lineno=355, col_offset=26)], [], None, None, lineno=355, col_offset=11), lineno=355, col_offset=7), [Expr(Call(Attribute(Name('logger', Load(), lineno=356, col_offset=8), 'info', Load(), lineno=356, col_offset=8), [BinOp(Str('creating %s', lineno=356, col_offset=20), Mod(), Name('archive_dir', Load(), lineno=356, col_offset=36), lineno=356, col_offset=20)], [], None, None, lineno=356, col_offset=8), lineno=356, col_offset=8), If(UnaryOp(Not(), Name('dry_run', Load(), lineno=357, col_offset=15), lineno=357, col_offset=11), [Expr(Call(Attribute(Name('os', Load(), lineno=358, col_offset=12), 'makedirs', Load(), lineno=358, col_offset=12), [Name('archive_dir', Load(), lineno=358, col_offset=24)], [], None, None, lineno=358, col_offset=12), lineno=358, col_offset=12)], [], lineno=357, col_offset=8)], [], lineno=355, col_offset=4), Import([alias('tarfile', None)], lineno=362, col_offset=4), If(Compare(Name('logger', Load(), lineno=364, col_offset=7), [IsNot()], [Name('None', Load(), lineno=364, col_offset=21)], lineno=364, col_offset=7), [Expr(Call(Attribute(Name('logger', Load(), lineno=365, col_offset=8), 'info', Load(), lineno=365, col_offset=8), [Str('Creating tar archive', lineno=365, col_offset=20)], [], None, None, lineno=365, col_offset=8), lineno=365, col_offset=8)], [], lineno=364, col_offset=4), Assign([Name('uid', Store(), lineno=367, col_offset=4)], Call(Name('_get_uid', Load(), lineno=367, col_offset=10), [Name('owner', Load(), lineno=367, col_offset=19)], [], None, None, lineno=367, col_offset=10), lineno=367, col_offset=4), Assign([Name('gid', Store(), lineno=368, col_offset=4)], Call(Name('_get_gid', Load(), lineno=368, col_offset=10), [Name('group', Load(), lineno=368, col_offset=19)], [], None, None, lineno=368, col_offset=10), lineno=368, col_offset=4), FunctionDef('_set_uid_gid', arguments([Name('tarinfo', Param(), lineno=370, col_offset=21)], None, None, []), [If(Compare(Name('gid', Load(), lineno=371, col_offset=11), [IsNot()], [Name('None', Load(), lineno=371, col_offset=22)], lineno=371, col_offset=11), [Assign([Attribute(Name('tarinfo', Load(), lineno=372, col_offset=12), 'gid', Store(), lineno=372, col_offset=12)], Name('gid', Load(), lineno=372, col_offset=26), lineno=372, col_offset=12), Assign([Attribute(Name('tarinfo', Load(), lineno=373, col_offset=12), 'gname', Store(), lineno=373, col_offset=12)], Name('group', Load(), lineno=373, col_offset=28), lineno=373, col_offset=12)], [], lineno=371, col_offset=8), If(Compare(Name('uid', Load(), lineno=374, col_offset=11), [IsNot()], [Name('None', Load(), lineno=374, col_offset=22)], lineno=374, col_offset=11), [Assign([Attribute(Name('tarinfo', Load(), lineno=375, col_offset=12), 'uid', Store(), lineno=375, col_offset=12)], Name('uid', Load(), lineno=375, col_offset=26), lineno=375, col_offset=12), Assign([Attribute(Name('tarinfo', Load(), lineno=376, col_offset=12), 'uname', Store(), lineno=376, col_offset=12)], Name('owner', Load(), lineno=376, col_offset=28), lineno=376, col_offset=12)], [], lineno=374, col_offset=8), Return(Name('tarinfo', Load(), lineno=377, col_offset=15), lineno=377, col_offset=8)], [], lineno=370, col_offset=4), If(UnaryOp(Not(), Name('dry_run', Load(), lineno=379, col_offset=11), lineno=379, col_offset=7), [Assign([Name('tar', Store(), lineno=380, col_offset=8)], Call(Attribute(Name('tarfile', Load(), lineno=380, col_offset=14), 'open', Load(), lineno=380, col_offset=14), [Name('archive_name', Load(), lineno=380, col_offset=27), BinOp(Str('w|%s', lineno=380, col_offset=41), Mod(), Subscript(Name('tar_compression', Load(), lineno=380, col_offset=50), Index(Name('compress', Load(), lineno=380, col_offset=66)), Load(), lineno=380, col_offset=50), lineno=380, col_offset=41)], [], None, None, lineno=380, col_offset=14), lineno=380, col_offset=8), TryFinally([Expr(Call(Attribute(Name('tar', Load(), lineno=382, col_offset=12), 'add', Load(), lineno=382, col_offset=12), [Name('base_dir', Load(), lineno=382, col_offset=20)], [keyword('filter', Name('_set_uid_gid', Load(), lineno=382, col_offset=37))], None, None, lineno=382, col_offset=12), lineno=382, col_offset=12)], [Expr(Call(Attribute(Name('tar', Load(), lineno=384, col_offset=12), 'close', Load(), lineno=384, col_offset=12), [], [], None, None, lineno=384, col_offset=12), lineno=384, col_offset=12)], lineno=381, col_offset=8)], [], lineno=379, col_offset=4), Return(Name('archive_name', Load(), lineno=386, col_offset=11), lineno=386, col_offset=4)], [], lineno=328, col_offset=0), FunctionDef('_call_external_zip', arguments([Name('base_dir', Param(), lineno=388, col_offset=23), Name('zip_filename', Param(), lineno=388, col_offset=33), Name('verbose', Param(), lineno=388, col_offset=47), Name('dry_run', Param(), lineno=388, col_offset=62)], None, None, [Name('False', Load(), lineno=388, col_offset=55), Name('False', Load(), lineno=388, col_offset=70)]), [If(Name('verbose', Load(), lineno=390, col_offset=7), [Assign([Name('zipoptions', Store(), lineno=391, col_offset=8)], Str('-r', lineno=391, col_offset=21), lineno=391, col_offset=8)], [Assign([Name('zipoptions', Store(), lineno=393, col_offset=8)], Str('-rq', lineno=393, col_offset=21), lineno=393, col_offset=8)], lineno=390, col_offset=4), ImportFrom('distutils.errors', [alias('DistutilsExecError', None)], 0, lineno=394, col_offset=4), ImportFrom('distutils.spawn', [alias('spawn', None)], 0, lineno=395, col_offset=4), TryExcept([Expr(Call(Name('spawn', Load(), lineno=397, col_offset=8), [List([Str('zip', lineno=397, col_offset=15), Name('zipoptions', Load(), lineno=397, col_offset=22), Name('zip_filename', Load(), lineno=397, col_offset=34), Name('base_dir', Load(), lineno=397, col_offset=48)], Load(), lineno=397, col_offset=14)], [keyword('dry_run', Name('dry_run', Load(), lineno=397, col_offset=67))], None, None, lineno=397, col_offset=8), lineno=397, col_offset=8)], [ExceptHandler(Name('DistutilsExecError', Load(), lineno=398, col_offset=11), None, [Raise(Name('ExecError', Load(), lineno=401, col_offset=14), BinOp(Str("unable to create zip file '%s': could neither import the 'zipfile' module nor find a standalone zip utility", lineno=402, col_offset=13), Mod(), Name('zip_filename', Load(), lineno=404, col_offset=47), lineno=402, col_offset=12), None, lineno=401, col_offset=8)], lineno=398, col_offset=4)], [], lineno=396, col_offset=4)], [], lineno=388, col_offset=0), FunctionDef('_make_zipfile', arguments([Name('base_name', Param(), lineno=406, col_offset=18), Name('base_dir', Param(), lineno=406, col_offset=29), Name('verbose', Param(), lineno=406, col_offset=39), Name('dry_run', Param(), lineno=406, col_offset=50), Name('logger', Param(), lineno=406, col_offset=61)], None, None, [Num(0, lineno=406, col_offset=47), Num(0, lineno=406, col_offset=58), Name('None', Load(), lineno=406, col_offset=68)]), [Expr(Str('Create a zip file from all the files under \'base_dir\'.\n\n    The output zip file will be named \'base_dir\' + ".zip".  Uses either the\n    "zipfile" Python module (if available) or the InfoZIP "zip" utility\n    (if installed and found on the default search path).  If neither tool is\n    available, raises ExecError.  Returns the name of the output zip\n    file.\n    ', lineno=414, col_offset=-1), lineno=414, col_offset=-1), Assign([Name('zip_filename', Store(), lineno=415, col_offset=4)], BinOp(Name('base_name', Load(), lineno=415, col_offset=19), Add(), Str('.zip', lineno=415, col_offset=31), lineno=415, col_offset=19), lineno=415, col_offset=4), Assign([Name('archive_dir', Store(), lineno=416, col_offset=4)], Call(Attribute(Attribute(Name('os', Load(), lineno=416, col_offset=18), 'path', Load(), lineno=416, col_offset=18), 'dirname', Load(), lineno=416, col_offset=18), [Name('base_name', Load(), lineno=416, col_offset=34)], [], None, None, lineno=416, col_offset=18), lineno=416, col_offset=4), If(UnaryOp(Not(), Call(Attribute(Attribute(Name('os', Load(), lineno=418, col_offset=11), 'path', Load(), lineno=418, col_offset=11), 'exists', Load(), lineno=418, col_offset=11), [Name('archive_dir', Load(), lineno=418, col_offset=26)], [], None, None, lineno=418, col_offset=11), lineno=418, col_offset=7), [If(Compare(Name('logger', Load(), lineno=419, col_offset=11), [IsNot()], [Name('None', Load(), lineno=419, col_offset=25)], lineno=419, col_offset=11), [Expr(Call(Attribute(Name('logger', Load(), lineno=420, col_offset=12), 'info', Load(), lineno=420, col_offset=12), [Str('creating %s', lineno=420, col_offset=24), Name('archive_dir', Load(), lineno=420, col_offset=39)], [], None, None, lineno=420, col_offset=12), lineno=420, col_offset=12)], [], lineno=419, col_offset=8), If(UnaryOp(Not(), Name('dry_run', Load(), lineno=421, col_offset=15), lineno=421, col_offset=11), [Expr(Call(Attribute(Name('os', Load(), lineno=422, col_offset=12), 'makedirs', Load(), lineno=422, col_offset=12), [Name('archive_dir', Load(), lineno=422, col_offset=24)], [], None, None, lineno=422, col_offset=12), lineno=422, col_offset=12)], [], lineno=421, col_offset=8)], [], lineno=418, col_offset=4), TryExcept([Import([alias('zipfile', None)], lineno=427, col_offset=8)], [ExceptHandler(Name('ImportError', Load(), lineno=428, col_offset=11), None, [Assign([Name('zipfile', Store(), lineno=429, col_offset=8)], Name('None', Load(), lineno=429, col_offset=18), lineno=429, col_offset=8)], lineno=428, col_offset=4)], [], lineno=426, col_offset=4), If(Compare(Name('zipfile', Load(), lineno=431, col_offset=7), [Is()], [Name('None', Load(), lineno=431, col_offset=18)], lineno=431, col_offset=7), [Expr(Call(Name('_call_external_zip', Load(), lineno=432, col_offset=8), [Name('base_dir', Load(), lineno=432, col_offset=27), Name('zip_filename', Load(), lineno=432, col_offset=37), Name('verbose', Load(), lineno=432, col_offset=51), Name('dry_run', Load(), lineno=432, col_offset=60)], [], None, None, lineno=432, col_offset=8), lineno=432, col_offset=8)], [If(Compare(Name('logger', Load(), lineno=434, col_offset=11), [IsNot()], [Name('None', Load(), lineno=434, col_offset=25)], lineno=434, col_offset=11), [Expr(Call(Attribute(Name('logger', Load(), lineno=435, col_offset=12), 'info', Load(), lineno=435, col_offset=12), [Str("creating '%s' and adding '%s' to it", lineno=435, col_offset=24), Name('zip_filename', Load(), lineno=436, col_offset=24), Name('base_dir', Load(), lineno=436, col_offset=38)], [], None, None, lineno=435, col_offset=12), lineno=435, col_offset=12)], [], lineno=434, col_offset=8), If(UnaryOp(Not(), Name('dry_run', Load(), lineno=438, col_offset=15), lineno=438, col_offset=11), [Assign([Name('zip', Store(), lineno=439, col_offset=12)], Call(Attribute(Name('zipfile', Load(), lineno=439, col_offset=18), 'ZipFile', Load(), lineno=439, col_offset=18), [Name('zip_filename', Load(), lineno=439, col_offset=34), Str('w', lineno=439, col_offset=48)], [keyword('compression', Attribute(Name('zipfile', Load(), lineno=440, col_offset=46), 'ZIP_DEFLATED', Load(), lineno=440, col_offset=46))], None, None, lineno=439, col_offset=18), lineno=439, col_offset=12), For(Tuple([Name('dirpath', Store(), lineno=442, col_offset=16), Name('dirnames', Store(), lineno=442, col_offset=25), Name('filenames', Store(), lineno=442, col_offset=35)], Store(), lineno=442, col_offset=16), Call(Attribute(Name('os', Load(), lineno=442, col_offset=48), 'walk', Load(), lineno=442, col_offset=48), [Name('base_dir', Load(), lineno=442, col_offset=56)], [], None, None, lineno=442, col_offset=48), [For(Name('name', Store(), lineno=443, col_offset=20), Name('filenames', Load(), lineno=443, col_offset=28), [Assign([Name('path', Store(), lineno=444, col_offset=20)], Call(Attribute(Attribute(Name('os', Load(), lineno=444, col_offset=27), 'path', Load(), lineno=444, col_offset=27), 'normpath', Load(), lineno=444, col_offset=27), [Call(Attribute(Attribute(Name('os', Load(), lineno=444, col_offset=44), 'path', Load(), lineno=444, col_offset=44), 'join', Load(), lineno=444, col_offset=44), [Name('dirpath', Load(), lineno=444, col_offset=57), Name('name', Load(), lineno=444, col_offset=66)], [], None, None, lineno=444, col_offset=44)], [], None, None, lineno=444, col_offset=27), lineno=444, col_offset=20), If(Call(Attribute(Attribute(Name('os', Load(), lineno=445, col_offset=23), 'path', Load(), lineno=445, col_offset=23), 'isfile', Load(), lineno=445, col_offset=23), [Name('path', Load(), lineno=445, col_offset=38)], [], None, None, lineno=445, col_offset=23), [Expr(Call(Attribute(Name('zip', Load(), lineno=446, col_offset=24), 'write', Load(), lineno=446, col_offset=24), [Name('path', Load(), lineno=446, col_offset=34), Name('path', Load(), lineno=446, col_offset=40)], [], None, None, lineno=446, col_offset=24), lineno=446, col_offset=24), If(Compare(Name('logger', Load(), lineno=447, col_offset=27), [IsNot()], [Name('None', Load(), lineno=447, col_offset=41)], lineno=447, col_offset=27), [Expr(Call(Attribute(Name('logger', Load(), lineno=448, col_offset=28), 'info', Load(), lineno=448, col_offset=28), [Str("adding '%s'", lineno=448, col_offset=40), Name('path', Load(), lineno=448, col_offset=55)], [], None, None, lineno=448, col_offset=28), lineno=448, col_offset=28)], [], lineno=447, col_offset=24)], [], lineno=445, col_offset=20)], [], lineno=443, col_offset=16)], [], lineno=442, col_offset=12), Expr(Call(Attribute(Name('zip', Load(), lineno=449, col_offset=12), 'close', Load(), lineno=449, col_offset=12), [], [], None, None, lineno=449, col_offset=12), lineno=449, col_offset=12)], [], lineno=438, col_offset=8)], lineno=431, col_offset=4), Return(Name('zip_filename', Load(), lineno=451, col_offset=11), lineno=451, col_offset=4)], [], lineno=406, col_offset=0), Assign([Name('_ARCHIVE_FORMATS', Store(), lineno=453, col_offset=0)], Dict([Str('gztar', lineno=454, col_offset=4), Str('bztar', lineno=455, col_offset=4), Str('tar', lineno=456, col_offset=4), Str('zip', lineno=457, col_offset=4)], [Tuple([Name('_make_tarball', Load(), lineno=454, col_offset=14), List([Tuple([Str('compress', lineno=454, col_offset=31), Str('gzip', lineno=454, col_offset=43)], Load(), lineno=454, col_offset=31)], Load(), lineno=454, col_offset=29), Str("gzip'ed tar-file", lineno=454, col_offset=53)], Load(), lineno=454, col_offset=14), Tuple([Name('_make_tarball', Load(), lineno=455, col_offset=14), List([Tuple([Str('compress', lineno=455, col_offset=31), Str('bzip2', lineno=455, col_offset=43)], Load(), lineno=455, col_offset=31)], Load(), lineno=455, col_offset=29), Str("bzip2'ed tar-file", lineno=455, col_offset=54)], Load(), lineno=455, col_offset=14), Tuple([Name('_make_tarball', Load(), lineno=456, col_offset=14), List([Tuple([Str('compress', lineno=456, col_offset=31), Name('None', Load(), lineno=456, col_offset=43)], Load(), lineno=456, col_offset=31)], Load(), lineno=456, col_offset=29), Str('uncompressed tar file', lineno=456, col_offset=51)], Load(), lineno=456, col_offset=14), Tuple([Name('_make_zipfile', Load(), lineno=457, col_offset=14), List([], Load(), lineno=457, col_offset=29), Str('ZIP file', lineno=457, col_offset=32)], Load(), lineno=457, col_offset=14)], lineno=453, col_offset=19), lineno=453, col_offset=0), FunctionDef('get_archive_formats', arguments([], None, None, []), [Expr(Str('Returns a list of supported formats for archiving and unarchiving.\n\n    Each element of the returned sequence is a tuple (name, description)\n    ', lineno=464, col_offset=-1), lineno=464, col_offset=-1), Assign([Name('formats', Store(), lineno=465, col_offset=4)], ListComp(Tuple([Name('name', Load(), lineno=465, col_offset=16), Subscript(Name('registry', Load(), lineno=465, col_offset=22), Index(Num(2, lineno=465, col_offset=31)), Load(), lineno=465, col_offset=22)], Load(), lineno=465, col_offset=16), [comprehension(Tuple([Name('name', Store(), lineno=465, col_offset=39), Name('registry', Store(), lineno=465, col_offset=45)], Store(), lineno=465, col_offset=39), Call(Attribute(Name('_ARCHIVE_FORMATS', Load(), lineno=466, col_offset=15), 'items', Load(), lineno=466, col_offset=15), [], [], None, None, lineno=466, col_offset=15), [])], lineno=465, col_offset=15), lineno=465, col_offset=4), Expr(Call(Attribute(Name('formats', Load(), lineno=467, col_offset=4), 'sort', Load(), lineno=467, col_offset=4), [], [], None, None, lineno=467, col_offset=4), lineno=467, col_offset=4), Return(Name('formats', Load(), lineno=468, col_offset=11), lineno=468, col_offset=4)], [], lineno=460, col_offset=0), FunctionDef('register_archive_format', arguments([Name('name', Param(), lineno=470, col_offset=28), Name('function', Param(), lineno=470, col_offset=34), Name('extra_args', Param(), lineno=470, col_offset=44), Name('description', Param(), lineno=470, col_offset=61)], None, None, [Name('None', Load(), lineno=470, col_offset=55), Str('', lineno=470, col_offset=73)]), [Expr(Str('Registers an archive format.\n\n    name is the name of the format. function is the callable that will be\n    used to create archives. If provided, extra_args is a sequence of\n    (name, value) tuples that will be passed as arguments to the callable.\n    description can be provided to describe the format, and will be returned\n    by the get_archive_formats() function.\n    ', lineno=478, col_offset=-1), lineno=478, col_offset=-1), If(Compare(Name('extra_args', Load(), lineno=479, col_offset=7), [Is()], [Name('None', Load(), lineno=479, col_offset=21)], lineno=479, col_offset=7), [Assign([Name('extra_args', Store(), lineno=480, col_offset=8)], List([], Load(), lineno=480, col_offset=21), lineno=480, col_offset=8)], [], lineno=479, col_offset=4), If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=481, col_offset=11), [Name('function', Load(), lineno=481, col_offset=22), Attribute(Name('collections', Load(), lineno=481, col_offset=32), 'Callable', Load(), lineno=481, col_offset=32)], [], None, None, lineno=481, col_offset=11), lineno=481, col_offset=7), [Raise(Call(Name('TypeError', Load(), lineno=482, col_offset=14), [BinOp(Str('The %s object is not callable', lineno=482, col_offset=24), Mod(), Name('function', Load(), lineno=482, col_offset=58), lineno=482, col_offset=24)], [], None, None, lineno=482, col_offset=14), None, None, lineno=482, col_offset=8)], [], lineno=481, col_offset=4), If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=483, col_offset=11), [Name('extra_args', Load(), lineno=483, col_offset=22), Tuple([Name('tuple', Load(), lineno=483, col_offset=35), Name('list', Load(), lineno=483, col_offset=42)], Load(), lineno=483, col_offset=35)], [], None, None, lineno=483, col_offset=11), lineno=483, col_offset=7), [Raise(Call(Name('TypeError', Load(), lineno=484, col_offset=14), [Str('extra_args needs to be a sequence', lineno=484, col_offset=24)], [], None, None, lineno=484, col_offset=14), None, None, lineno=484, col_offset=8)], [], lineno=483, col_offset=4), For(Name('element', Store(), lineno=485, col_offset=8), Name('extra_args', Load(), lineno=485, col_offset=19), [If(BoolOp(Or(), [UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=486, col_offset=15), [Name('element', Load(), lineno=486, col_offset=26), Tuple([Name('tuple', Load(), lineno=486, col_offset=36), Name('list', Load(), lineno=486, col_offset=43)], Load(), lineno=486, col_offset=36)], [], None, None, lineno=486, col_offset=15), lineno=486, col_offset=11), Compare(Call(Name('len', Load(), lineno=486, col_offset=53), [Name('element', Load(), lineno=486, col_offset=57)], [], None, None, lineno=486, col_offset=53), [NotEq()], [Num(2, lineno=486, col_offset=68)], lineno=486, col_offset=53)], lineno=486, col_offset=11), [Raise(Call(Name('TypeError', Load(), lineno=487, col_offset=18), [Str('extra_args elements are : (arg_name, value)', lineno=487, col_offset=28)], [], None, None, lineno=487, col_offset=18), None, None, lineno=487, col_offset=12)], [], lineno=486, col_offset=8)], [], lineno=485, col_offset=4), Assign([Subscript(Name('_ARCHIVE_FORMATS', Load(), lineno=489, col_offset=4), Index(Name('name', Load(), lineno=489, col_offset=21)), Store(), lineno=489, col_offset=4)], Tuple([Name('function', Load(), lineno=489, col_offset=30), Name('extra_args', Load(), lineno=489, col_offset=40), Name('description', Load(), lineno=489, col_offset=52)], Load(), lineno=489, col_offset=30), lineno=489, col_offset=4)], [], lineno=470, col_offset=0), FunctionDef('unregister_archive_format', arguments([Name('name', Param(), lineno=491, col_offset=30)], None, None, []), [Delete([Subscript(Name('_ARCHIVE_FORMATS', Load(), lineno=492, col_offset=8), Index(Name('name', Load(), lineno=492, col_offset=25)), Del(), lineno=492, col_offset=8)], lineno=492, col_offset=4)], [], lineno=491, col_offset=0), FunctionDef('make_archive', arguments([Name('base_name', Param(), lineno=494, col_offset=17), Name('format', Param(), lineno=494, col_offset=28), Name('root_dir', Param(), lineno=494, col_offset=36), Name('base_dir', Param(), lineno=494, col_offset=51), Name('verbose', Param(), lineno=494, col_offset=66), Name('dry_run', Param(), lineno=495, col_offset=17), Name('owner', Param(), lineno=495, col_offset=28), Name('group', Param(), lineno=495, col_offset=40), Name('logger', Param(), lineno=495, col_offset=52)], None, None, [Name('None', Load(), lineno=494, col_offset=45), Name('None', Load(), lineno=494, col_offset=60), Num(0, lineno=494, col_offset=74), Num(0, lineno=495, col_offset=25), Name('None', Load(), lineno=495, col_offset=34), Name('None', Load(), lineno=495, col_offset=46), Name('None', Load(), lineno=495, col_offset=59)]), [Expr(Str('Create an archive file (eg. zip or tar).\n\n    \'base_name\' is the name of the file to create, minus any format-specific\n    extension; \'format\' is the archive format: one of "zip", "tar", "bztar"\n    or "gztar".\n\n    \'root_dir\' is a directory that will be the root directory of the\n    archive; ie. we typically chdir into \'root_dir\' before creating the\n    archive.  \'base_dir\' is the directory where we start archiving from;\n    ie. \'base_dir\' will be the common prefix of all files and\n    directories in the archive.  \'root_dir\' and \'base_dir\' both default\n    to the current directory.  Returns the name of the archive file.\n\n    \'owner\' and \'group\' are used when creating a tar archive. By default,\n    uses the current owner and group.\n    ', lineno=511, col_offset=-1), lineno=511, col_offset=-1), Assign([Name('save_cwd', Store(), lineno=512, col_offset=4)], Call(Attribute(Name('os', Load(), lineno=512, col_offset=15), 'getcwd', Load(), lineno=512, col_offset=15), [], [], None, None, lineno=512, col_offset=15), lineno=512, col_offset=4), If(Compare(Name('root_dir', Load(), lineno=513, col_offset=7), [IsNot()], [Name('None', Load(), lineno=513, col_offset=23)], lineno=513, col_offset=7), [If(Compare(Name('logger', Load(), lineno=514, col_offset=11), [IsNot()], [Name('None', Load(), lineno=514, col_offset=25)], lineno=514, col_offset=11), [Expr(Call(Attribute(Name('logger', Load(), lineno=515, col_offset=12), 'debug', Load(), lineno=515, col_offset=12), [Str("changing into '%s'", lineno=515, col_offset=25), Name('root_dir', Load(), lineno=515, col_offset=47)], [], None, None, lineno=515, col_offset=12), lineno=515, col_offset=12)], [], lineno=514, col_offset=8), Assign([Name('base_name', Store(), lineno=516, col_offset=8)], Call(Attribute(Attribute(Name('os', Load(), lineno=516, col_offset=20), 'path', Load(), lineno=516, col_offset=20), 'abspath', Load(), lineno=516, col_offset=20), [Name('base_name', Load(), lineno=516, col_offset=36)], [], None, None, lineno=516, col_offset=20), lineno=516, col_offset=8), If(UnaryOp(Not(), Name('dry_run', Load(), lineno=517, col_offset=15), lineno=517, col_offset=11), [Expr(Call(Attribute(Name('os', Load(), lineno=518, col_offset=12), 'chdir', Load(), lineno=518, col_offset=12), [Name('root_dir', Load(), lineno=518, col_offset=21)], [], None, None, lineno=518, col_offset=12), lineno=518, col_offset=12)], [], lineno=517, col_offset=8)], [], lineno=513, col_offset=4), If(Compare(Name('base_dir', Load(), lineno=520, col_offset=7), [Is()], [Name('None', Load(), lineno=520, col_offset=19)], lineno=520, col_offset=7), [Assign([Name('base_dir', Store(), lineno=521, col_offset=8)], Attribute(Name('os', Load(), lineno=521, col_offset=19), 'curdir', Load(), lineno=521, col_offset=19), lineno=521, col_offset=8)], [], lineno=520, col_offset=4), Assign([Name('kwargs', Store(), lineno=523, col_offset=4)], Dict([Str('dry_run', lineno=523, col_offset=14), Str('logger', lineno=523, col_offset=34)], [Name('dry_run', Load(), lineno=523, col_offset=25), Name('logger', Load(), lineno=523, col_offset=44)], lineno=523, col_offset=13), lineno=523, col_offset=4), TryExcept([Assign([Name('format_info', Store(), lineno=526, col_offset=8)], Subscript(Name('_ARCHIVE_FORMATS', Load(), lineno=526, col_offset=22), Index(Name('format', Load(), lineno=526, col_offset=39)), Load(), lineno=526, col_offset=22), lineno=526, col_offset=8)], [ExceptHandler(Name('KeyError', Load(), lineno=527, col_offset=11), None, [Raise(Name('ValueError', Load(), lineno=528, col_offset=14), BinOp(Str("unknown archive format '%s'", lineno=528, col_offset=26), Mod(), Name('format', Load(), lineno=528, col_offset=58), lineno=528, col_offset=26), None, lineno=528, col_offset=8)], lineno=527, col_offset=4)], [], lineno=525, col_offset=4), Assign([Name('func', Store(), lineno=530, col_offset=4)], Subscript(Name('format_info', Load(), lineno=530, col_offset=11), Index(Num(0, lineno=530, col_offset=23)), Load(), lineno=530, col_offset=11), lineno=530, col_offset=4), For(Tuple([Name('arg', Store(), lineno=531, col_offset=8), Name('val', Store(), lineno=531, col_offset=13)], Store(), lineno=531, col_offset=8), Subscript(Name('format_info', Load(), lineno=531, col_offset=20), Index(Num(1, lineno=531, col_offset=32)), Load(), lineno=531, col_offset=20), [Assign([Subscript(Name('kwargs', Load(), lineno=532, col_offset=8), Index(Name('arg', Load(), lineno=532, col_offset=15)), Store(), lineno=532, col_offset=8)], Name('val', Load(), lineno=532, col_offset=22), lineno=532, col_offset=8)], [], lineno=531, col_offset=4), If(Compare(Name('format', Load(), lineno=534, col_offset=7), [NotEq()], [Str('zip', lineno=534, col_offset=17)], lineno=534, col_offset=7), [Assign([Subscript(Name('kwargs', Load(), lineno=535, col_offset=8), Index(Str('owner', lineno=535, col_offset=15)), Store(), lineno=535, col_offset=8)], Name('owner', Load(), lineno=535, col_offset=26), lineno=535, col_offset=8), Assign([Subscript(Name('kwargs', Load(), lineno=536, col_offset=8), Index(Str('group', lineno=536, col_offset=15)), Store(), lineno=536, col_offset=8)], Name('group', Load(), lineno=536, col_offset=26), lineno=536, col_offset=8)], [], lineno=534, col_offset=4), TryFinally([Assign([Name('filename', Store(), lineno=539, col_offset=8)], Call(Name('func', Load(), lineno=539, col_offset=19), [Name('base_name', Load(), lineno=539, col_offset=24), Name('base_dir', Load(), lineno=539, col_offset=35)], [], None, Name('kwargs', Load(), lineno=539, col_offset=47), lineno=539, col_offset=19), lineno=539, col_offset=8)], [If(Compare(Name('root_dir', Load(), lineno=541, col_offset=11), [IsNot()], [Name('None', Load(), lineno=541, col_offset=27)], lineno=541, col_offset=11), [If(Compare(Name('logger', Load(), lineno=542, col_offset=15), [IsNot()], [Name('None', Load(), lineno=542, col_offset=29)], lineno=542, col_offset=15), [Expr(Call(Attribute(Name('logger', Load(), lineno=543, col_offset=16), 'debug', Load(), lineno=543, col_offset=16), [Str("changing back to '%s'", lineno=543, col_offset=29), Name('save_cwd', Load(), lineno=543, col_offset=54)], [], None, None, lineno=543, col_offset=16), lineno=543, col_offset=16)], [], lineno=542, col_offset=12), Expr(Call(Attribute(Name('os', Load(), lineno=544, col_offset=12), 'chdir', Load(), lineno=544, col_offset=12), [Name('save_cwd', Load(), lineno=544, col_offset=21)], [], None, None, lineno=544, col_offset=12), lineno=544, col_offset=12)], [], lineno=541, col_offset=8)], lineno=538, col_offset=4), Return(Name('filename', Load(), lineno=546, col_offset=11), lineno=546, col_offset=4)], [], lineno=494, col_offset=0)])
