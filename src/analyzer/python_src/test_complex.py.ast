Module([Import([alias('unittest', None)], lineno=1, col_offset=0), ImportFrom('test', [alias('test_support', None)], 0, lineno=2, col_offset=0), ImportFrom('random', [alias('random', None)], 0, lineno=4, col_offset=0), ImportFrom('math', [alias('atan2', None), alias('isnan', None), alias('copysign', None)], 0, lineno=5, col_offset=0), Assign([Name('INF', Store(), lineno=7, col_offset=0)], Call(Name('float', Load(), lineno=7, col_offset=6), [Str('inf', lineno=7, col_offset=12)], [], None, None, lineno=7, col_offset=6), lineno=7, col_offset=0), Assign([Name('NAN', Store(), lineno=8, col_offset=0)], Call(Name('float', Load(), lineno=8, col_offset=6), [Str('nan', lineno=8, col_offset=12)], [], None, None, lineno=8, col_offset=6), lineno=8, col_offset=0), ClassDef('ComplexTest', [Attribute(Name('unittest', Load(), lineno=11, col_offset=18), 'TestCase', Load(), lineno=11, col_offset=18)], [FunctionDef('assertAlmostEqual', arguments([Name('self', Param(), lineno=13, col_offset=26), Name('a', Param(), lineno=13, col_offset=32), Name('b', Param(), lineno=13, col_offset=35)], None, None, []), [If(Call(Name('isinstance', Load(), lineno=14, col_offset=11), [Name('a', Load(), lineno=14, col_offset=22), Name('complex', Load(), lineno=14, col_offset=25)], [], None, None, lineno=14, col_offset=11), [If(Call(Name('isinstance', Load(), lineno=15, col_offset=15), [Name('b', Load(), lineno=15, col_offset=26), Name('complex', Load(), lineno=15, col_offset=29)], [], None, None, lineno=15, col_offset=15), [Expr(Call(Attribute(Attribute(Name('unittest', Load(), lineno=16, col_offset=16), 'TestCase', Load(), lineno=16, col_offset=16), 'assertAlmostEqual', Load(), lineno=16, col_offset=16), [Name('self', Load(), lineno=16, col_offset=52), Attribute(Name('a', Load(), lineno=16, col_offset=58), 'real', Load(), lineno=16, col_offset=58), Attribute(Name('b', Load(), lineno=16, col_offset=66), 'real', Load(), lineno=16, col_offset=66)], [], None, None, lineno=16, col_offset=16), lineno=16, col_offset=16), Expr(Call(Attribute(Attribute(Name('unittest', Load(), lineno=17, col_offset=16), 'TestCase', Load(), lineno=17, col_offset=16), 'assertAlmostEqual', Load(), lineno=17, col_offset=16), [Name('self', Load(), lineno=17, col_offset=52), Attribute(Name('a', Load(), lineno=17, col_offset=58), 'imag', Load(), lineno=17, col_offset=58), Attribute(Name('b', Load(), lineno=17, col_offset=66), 'imag', Load(), lineno=17, col_offset=66)], [], None, None, lineno=17, col_offset=16), lineno=17, col_offset=16)], [Expr(Call(Attribute(Attribute(Name('unittest', Load(), lineno=19, col_offset=16), 'TestCase', Load(), lineno=19, col_offset=16), 'assertAlmostEqual', Load(), lineno=19, col_offset=16), [Name('self', Load(), lineno=19, col_offset=52), Attribute(Name('a', Load(), lineno=19, col_offset=58), 'real', Load(), lineno=19, col_offset=58), Name('b', Load(), lineno=19, col_offset=66)], [], None, None, lineno=19, col_offset=16), lineno=19, col_offset=16), Expr(Call(Attribute(Attribute(Name('unittest', Load(), lineno=20, col_offset=16), 'TestCase', Load(), lineno=20, col_offset=16), 'assertAlmostEqual', Load(), lineno=20, col_offset=16), [Name('self', Load(), lineno=20, col_offset=52), Attribute(Name('a', Load(), lineno=20, col_offset=58), 'imag', Load(), lineno=20, col_offset=58), Num(0.0, lineno=20, col_offset=66)], [], None, None, lineno=20, col_offset=16), lineno=20, col_offset=16)], lineno=15, col_offset=12)], [If(Call(Name('isinstance', Load(), lineno=22, col_offset=15), [Name('b', Load(), lineno=22, col_offset=26), Name('complex', Load(), lineno=22, col_offset=29)], [], None, None, lineno=22, col_offset=15), [Expr(Call(Attribute(Attribute(Name('unittest', Load(), lineno=23, col_offset=16), 'TestCase', Load(), lineno=23, col_offset=16), 'assertAlmostEqual', Load(), lineno=23, col_offset=16), [Name('self', Load(), lineno=23, col_offset=52), Name('a', Load(), lineno=23, col_offset=58), Attribute(Name('b', Load(), lineno=23, col_offset=61), 'real', Load(), lineno=23, col_offset=61)], [], None, None, lineno=23, col_offset=16), lineno=23, col_offset=16), Expr(Call(Attribute(Attribute(Name('unittest', Load(), lineno=24, col_offset=16), 'TestCase', Load(), lineno=24, col_offset=16), 'assertAlmostEqual', Load(), lineno=24, col_offset=16), [Name('self', Load(), lineno=24, col_offset=52), Num(0.0, lineno=24, col_offset=58), Attribute(Name('b', Load(), lineno=24, col_offset=62), 'imag', Load(), lineno=24, col_offset=62)], [], None, None, lineno=24, col_offset=16), lineno=24, col_offset=16)], [Expr(Call(Attribute(Attribute(Name('unittest', Load(), lineno=26, col_offset=16), 'TestCase', Load(), lineno=26, col_offset=16), 'assertAlmostEqual', Load(), lineno=26, col_offset=16), [Name('self', Load(), lineno=26, col_offset=52), Name('a', Load(), lineno=26, col_offset=58), Name('b', Load(), lineno=26, col_offset=61)], [], None, None, lineno=26, col_offset=16), lineno=26, col_offset=16)], lineno=22, col_offset=12)], lineno=14, col_offset=8)], [], lineno=13, col_offset=4), FunctionDef('assertCloseAbs', arguments([Name('self', Param(), lineno=28, col_offset=23), Name('x', Param(), lineno=28, col_offset=29), Name('y', Param(), lineno=28, col_offset=32), Name('eps', Param(), lineno=28, col_offset=35)], None, None, [Num(1e-09, lineno=28, col_offset=39)]), [Expr(Str('Return true iff floats x and y "are close"', lineno=29, col_offset=8), lineno=29, col_offset=8), If(Compare(Call(Name('abs', Load(), lineno=31, col_offset=11), [Name('x', Load(), lineno=31, col_offset=15)], [], None, None, lineno=31, col_offset=11), [Gt()], [Call(Name('abs', Load(), lineno=31, col_offset=20), [Name('y', Load(), lineno=31, col_offset=24)], [], None, None, lineno=31, col_offset=20)], lineno=31, col_offset=11), [Assign([Tuple([Name('x', Store(), lineno=32, col_offset=12), Name('y', Store(), lineno=32, col_offset=15)], Store(), lineno=32, col_offset=12)], Tuple([Name('y', Load(), lineno=32, col_offset=19), Name('x', Load(), lineno=32, col_offset=22)], Load(), lineno=32, col_offset=19), lineno=32, col_offset=12)], [], lineno=31, col_offset=8), If(Compare(Name('y', Load(), lineno=33, col_offset=11), [Eq()], [Num(0, lineno=33, col_offset=16)], lineno=33, col_offset=11), [Return(Compare(Call(Name('abs', Load(), lineno=34, col_offset=19), [Name('x', Load(), lineno=34, col_offset=23)], [], None, None, lineno=34, col_offset=19), [Lt()], [Name('eps', Load(), lineno=34, col_offset=28)], lineno=34, col_offset=19), lineno=34, col_offset=12)], [], lineno=33, col_offset=8), If(Compare(Name('x', Load(), lineno=35, col_offset=11), [Eq()], [Num(0, lineno=35, col_offset=16)], lineno=35, col_offset=11), [Return(Compare(Call(Name('abs', Load(), lineno=36, col_offset=19), [Name('y', Load(), lineno=36, col_offset=23)], [], None, None, lineno=36, col_offset=19), [Lt()], [Name('eps', Load(), lineno=36, col_offset=28)], lineno=36, col_offset=19), lineno=36, col_offset=12)], [], lineno=35, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=38, col_offset=8), 'assertTrue', Load(), lineno=38, col_offset=8), [Compare(Call(Name('abs', Load(), lineno=38, col_offset=24), [BinOp(BinOp(Name('x', Load(), lineno=38, col_offset=29), Sub(), Name('y', Load(), lineno=38, col_offset=31), lineno=38, col_offset=29), Div(), Name('y', Load(), lineno=38, col_offset=34), lineno=38, col_offset=28)], [], None, None, lineno=38, col_offset=24), [Lt()], [Name('eps', Load(), lineno=38, col_offset=39)], lineno=38, col_offset=24)], [], None, None, lineno=38, col_offset=8), lineno=38, col_offset=8)], [], lineno=28, col_offset=4), FunctionDef('assertFloatsAreIdentical', arguments([Name('self', Param(), lineno=40, col_offset=33), Name('x', Param(), lineno=40, col_offset=39), Name('y', Param(), lineno=40, col_offset=42)], None, None, []), [Expr(Str('assert that floats x and y are identical, in the sense that:\n        (1) both x and y are nans, or\n        (2) both x and y are infinities, with the same sign, or\n        (3) both x and y are zeros, with the same sign, or\n        (4) x and y are both finite and nonzero, and x == y\n\n        ', lineno=47, col_offset=-1), lineno=47, col_offset=-1), Assign([Name('msg', Store(), lineno=48, col_offset=8)], Str('floats {!r} and {!r} are not identical', lineno=48, col_offset=14), lineno=48, col_offset=8), If(BoolOp(Or(), [Call(Name('isnan', Load(), lineno=50, col_offset=11), [Name('x', Load(), lineno=50, col_offset=17)], [], None, None, lineno=50, col_offset=11), Call(Name('isnan', Load(), lineno=50, col_offset=23), [Name('y', Load(), lineno=50, col_offset=29)], [], None, None, lineno=50, col_offset=23)], lineno=50, col_offset=11), [If(BoolOp(And(), [Call(Name('isnan', Load(), lineno=51, col_offset=15), [Name('x', Load(), lineno=51, col_offset=21)], [], None, None, lineno=51, col_offset=15), Call(Name('isnan', Load(), lineno=51, col_offset=28), [Name('y', Load(), lineno=51, col_offset=34)], [], None, None, lineno=51, col_offset=28)], lineno=51, col_offset=15), [Return(None, lineno=52, col_offset=16)], [], lineno=51, col_offset=12)], [If(Compare(Name('x', Load(), lineno=53, col_offset=13), [Eq()], [Name('y', Load(), lineno=53, col_offset=18)], lineno=53, col_offset=13), [If(Compare(Name('x', Load(), lineno=54, col_offset=15), [NotEq()], [Num(0.0, lineno=54, col_offset=20)], lineno=54, col_offset=15), [Return(None, lineno=55, col_offset=16)], [If(Compare(Call(Name('copysign', Load(), lineno=57, col_offset=17), [Num(1.0, lineno=57, col_offset=26), Name('x', Load(), lineno=57, col_offset=31)], [], None, None, lineno=57, col_offset=17), [Eq()], [Call(Name('copysign', Load(), lineno=57, col_offset=37), [Num(1.0, lineno=57, col_offset=46), Name('y', Load(), lineno=57, col_offset=51)], [], None, None, lineno=57, col_offset=37)], lineno=57, col_offset=17), [Return(None, lineno=58, col_offset=16)], [AugAssign(Name('msg', Store(), lineno=60, col_offset=16), Add(), Str(': zeros have different signs', lineno=60, col_offset=23), lineno=60, col_offset=16)], lineno=57, col_offset=17)], lineno=54, col_offset=12)], [], lineno=53, col_offset=13)], lineno=50, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=61, col_offset=8), 'fail', Load(), lineno=61, col_offset=8), [Call(Attribute(Name('msg', Load(), lineno=61, col_offset=18), 'format', Load(), lineno=61, col_offset=18), [Name('x', Load(), lineno=61, col_offset=29), Name('y', Load(), lineno=61, col_offset=32)], [], None, None, lineno=61, col_offset=18)], [], None, None, lineno=61, col_offset=8), lineno=61, col_offset=8)], [], lineno=40, col_offset=4), FunctionDef('assertClose', arguments([Name('self', Param(), lineno=63, col_offset=20), Name('x', Param(), lineno=63, col_offset=26), Name('y', Param(), lineno=63, col_offset=29), Name('eps', Param(), lineno=63, col_offset=32)], None, None, [Num(1e-09, lineno=63, col_offset=36)]), [Expr(Str('Return true iff complexes x and y "are close"', lineno=64, col_offset=8), lineno=64, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=65, col_offset=8), 'assertCloseAbs', Load(), lineno=65, col_offset=8), [Attribute(Name('x', Load(), lineno=65, col_offset=28), 'real', Load(), lineno=65, col_offset=28), Attribute(Name('y', Load(), lineno=65, col_offset=36), 'real', Load(), lineno=65, col_offset=36), Name('eps', Load(), lineno=65, col_offset=44)], [], None, None, lineno=65, col_offset=8), lineno=65, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=66, col_offset=8), 'assertCloseAbs', Load(), lineno=66, col_offset=8), [Attribute(Name('x', Load(), lineno=66, col_offset=28), 'imag', Load(), lineno=66, col_offset=28), Attribute(Name('y', Load(), lineno=66, col_offset=36), 'imag', Load(), lineno=66, col_offset=36), Name('eps', Load(), lineno=66, col_offset=44)], [], None, None, lineno=66, col_offset=8), lineno=66, col_offset=8)], [], lineno=63, col_offset=4), FunctionDef('check_div', arguments([Name('self', Param(), lineno=68, col_offset=18), Name('x', Param(), lineno=68, col_offset=24), Name('y', Param(), lineno=68, col_offset=27)], None, None, []), [Expr(Str('Compute complex z=x*y, and check that z/x==y and z/y==x.', lineno=69, col_offset=8), lineno=69, col_offset=8), Assign([Name('z', Store(), lineno=70, col_offset=8)], BinOp(Name('x', Load(), lineno=70, col_offset=12), Mult(), Name('y', Load(), lineno=70, col_offset=16), lineno=70, col_offset=12), lineno=70, col_offset=8), If(Compare(Name('x', Load(), lineno=71, col_offset=11), [NotEq()], [Num(0, lineno=71, col_offset=16)], lineno=71, col_offset=11), [Assign([Name('q', Store(), lineno=72, col_offset=12)], BinOp(Name('z', Load(), lineno=72, col_offset=16), Div(), Name('x', Load(), lineno=72, col_offset=20), lineno=72, col_offset=16), lineno=72, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=73, col_offset=12), 'assertClose', Load(), lineno=73, col_offset=12), [Name('q', Load(), lineno=73, col_offset=29), Name('y', Load(), lineno=73, col_offset=32)], [], None, None, lineno=73, col_offset=12), lineno=73, col_offset=12), Assign([Name('q', Store(), lineno=74, col_offset=12)], Call(Attribute(Name('z', Load(), lineno=74, col_offset=16), '__div__', Load(), lineno=74, col_offset=16), [Name('x', Load(), lineno=74, col_offset=26)], [], None, None, lineno=74, col_offset=16), lineno=74, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=75, col_offset=12), 'assertClose', Load(), lineno=75, col_offset=12), [Name('q', Load(), lineno=75, col_offset=29), Name('y', Load(), lineno=75, col_offset=32)], [], None, None, lineno=75, col_offset=12), lineno=75, col_offset=12), Assign([Name('q', Store(), lineno=76, col_offset=12)], Call(Attribute(Name('z', Load(), lineno=76, col_offset=16), '__truediv__', Load(), lineno=76, col_offset=16), [Name('x', Load(), lineno=76, col_offset=30)], [], None, None, lineno=76, col_offset=16), lineno=76, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=77, col_offset=12), 'assertClose', Load(), lineno=77, col_offset=12), [Name('q', Load(), lineno=77, col_offset=29), Name('y', Load(), lineno=77, col_offset=32)], [], None, None, lineno=77, col_offset=12), lineno=77, col_offset=12)], [], lineno=71, col_offset=8), If(Compare(Name('y', Load(), lineno=78, col_offset=11), [NotEq()], [Num(0, lineno=78, col_offset=16)], lineno=78, col_offset=11), [Assign([Name('q', Store(), lineno=79, col_offset=12)], BinOp(Name('z', Load(), lineno=79, col_offset=16), Div(), Name('y', Load(), lineno=79, col_offset=20), lineno=79, col_offset=16), lineno=79, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=80, col_offset=12), 'assertClose', Load(), lineno=80, col_offset=12), [Name('q', Load(), lineno=80, col_offset=29), Name('x', Load(), lineno=80, col_offset=32)], [], None, None, lineno=80, col_offset=12), lineno=80, col_offset=12), Assign([Name('q', Store(), lineno=81, col_offset=12)], Call(Attribute(Name('z', Load(), lineno=81, col_offset=16), '__div__', Load(), lineno=81, col_offset=16), [Name('y', Load(), lineno=81, col_offset=26)], [], None, None, lineno=81, col_offset=16), lineno=81, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=82, col_offset=12), 'assertClose', Load(), lineno=82, col_offset=12), [Name('q', Load(), lineno=82, col_offset=29), Name('x', Load(), lineno=82, col_offset=32)], [], None, None, lineno=82, col_offset=12), lineno=82, col_offset=12), Assign([Name('q', Store(), lineno=83, col_offset=12)], Call(Attribute(Name('z', Load(), lineno=83, col_offset=16), '__truediv__', Load(), lineno=83, col_offset=16), [Name('y', Load(), lineno=83, col_offset=30)], [], None, None, lineno=83, col_offset=16), lineno=83, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=84, col_offset=12), 'assertClose', Load(), lineno=84, col_offset=12), [Name('q', Load(), lineno=84, col_offset=29), Name('x', Load(), lineno=84, col_offset=32)], [], None, None, lineno=84, col_offset=12), lineno=84, col_offset=12)], [], lineno=78, col_offset=8)], [], lineno=68, col_offset=4), FunctionDef('test_div', arguments([Name('self', Param(), lineno=86, col_offset=17)], None, None, []), [Assign([Name('simple_real', Store(), lineno=87, col_offset=8)], ListComp(Call(Name('float', Load(), lineno=87, col_offset=23), [Name('i', Load(), lineno=87, col_offset=29)], [], None, None, lineno=87, col_offset=23), [comprehension(Name('i', Store(), lineno=87, col_offset=36), Call(Name('xrange', Load(), lineno=87, col_offset=41), [Num(-5, lineno=87, col_offset=49), Num(6, lineno=87, col_offset=52)], [], None, None, lineno=87, col_offset=41), [])], lineno=87, col_offset=23), lineno=87, col_offset=8), Assign([Name('simple_complex', Store(), lineno=88, col_offset=8)], ListComp(Call(Name('complex', Load(), lineno=88, col_offset=26), [Name('x', Load(), lineno=88, col_offset=34), Name('y', Load(), lineno=88, col_offset=37)], [], None, None, lineno=88, col_offset=26), [comprehension(Name('x', Store(), lineno=88, col_offset=44), Name('simple_real', Load(), lineno=88, col_offset=49), []), comprehension(Name('y', Store(), lineno=88, col_offset=65), Name('simple_real', Load(), lineno=88, col_offset=70), [])], lineno=88, col_offset=26), lineno=88, col_offset=8), For(Name('x', Store(), lineno=89, col_offset=12), Name('simple_complex', Load(), lineno=89, col_offset=17), [For(Name('y', Store(), lineno=90, col_offset=16), Name('simple_complex', Load(), lineno=90, col_offset=21), [Expr(Call(Attribute(Name('self', Load(), lineno=91, col_offset=16), 'check_div', Load(), lineno=91, col_offset=16), [Name('x', Load(), lineno=91, col_offset=31), Name('y', Load(), lineno=91, col_offset=34)], [], None, None, lineno=91, col_offset=16), lineno=91, col_offset=16)], [], lineno=90, col_offset=12)], [], lineno=89, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=95, col_offset=8), 'check_div', Load(), lineno=95, col_offset=8), [Call(Name('complex', Load(), lineno=95, col_offset=23), [Num(1e+200, lineno=95, col_offset=31), Num(1e+200, lineno=95, col_offset=38)], [], None, None, lineno=95, col_offset=23), BinOp(Num(1, lineno=95, col_offset=46), Add(), Num(0j, lineno=95, col_offset=48), lineno=95, col_offset=46)], [], None, None, lineno=95, col_offset=8), lineno=95, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=96, col_offset=8), 'check_div', Load(), lineno=96, col_offset=8), [Call(Name('complex', Load(), lineno=96, col_offset=23), [Num(1e-200, lineno=96, col_offset=31), Num(1e-200, lineno=96, col_offset=39)], [], None, None, lineno=96, col_offset=23), BinOp(Num(1, lineno=96, col_offset=48), Add(), Num(0j, lineno=96, col_offset=50), lineno=96, col_offset=48)], [], None, None, lineno=96, col_offset=8), lineno=96, col_offset=8), For(Name('i', Store(), lineno=99, col_offset=12), Call(Name('xrange', Load(), lineno=99, col_offset=17), [Num(100, lineno=99, col_offset=24)], [], None, None, lineno=99, col_offset=17), [Expr(Call(Attribute(Name('self', Load(), lineno=100, col_offset=12), 'check_div', Load(), lineno=100, col_offset=12), [Call(Name('complex', Load(), lineno=100, col_offset=27), [Call(Name('random', Load(), lineno=100, col_offset=35), [], [], None, None, lineno=100, col_offset=35), Call(Name('random', Load(), lineno=100, col_offset=45), [], [], None, None, lineno=100, col_offset=45)], [], None, None, lineno=100, col_offset=27), Call(Name('complex', Load(), lineno=101, col_offset=27), [Call(Name('random', Load(), lineno=101, col_offset=35), [], [], None, None, lineno=101, col_offset=35), Call(Name('random', Load(), lineno=101, col_offset=45), [], [], None, None, lineno=101, col_offset=45)], [], None, None, lineno=101, col_offset=27)], [], None, None, lineno=100, col_offset=12), lineno=100, col_offset=12)], [], lineno=99, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=103, col_offset=8), 'assertRaises', Load(), lineno=103, col_offset=8), [Name('ZeroDivisionError', Load(), lineno=103, col_offset=26), Attribute(Name('complex', Load(), lineno=103, col_offset=45), '__div__', Load(), lineno=103, col_offset=45), BinOp(Num(1, lineno=103, col_offset=62), Add(), Num(1j, lineno=103, col_offset=64), lineno=103, col_offset=62), BinOp(Num(0, lineno=103, col_offset=68), Add(), Num(0j, lineno=103, col_offset=70), lineno=103, col_offset=68)], [], None, None, lineno=103, col_offset=8), lineno=103, col_offset=8)], [], lineno=86, col_offset=4), FunctionDef('test_truediv', arguments([Name('self', Param(), lineno=107, col_offset=21)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=108, col_offset=8), 'assertAlmostEqual', Load(), lineno=108, col_offset=8), [Call(Attribute(Name('complex', Load(), lineno=108, col_offset=31), '__truediv__', Load(), lineno=108, col_offset=31), [BinOp(Num(2, lineno=108, col_offset=51), Add(), Num(0j, lineno=108, col_offset=53), lineno=108, col_offset=51), BinOp(Num(1, lineno=108, col_offset=57), Add(), Num(1j, lineno=108, col_offset=59), lineno=108, col_offset=57)], [], None, None, lineno=108, col_offset=31), BinOp(Num(1, lineno=108, col_offset=64), Sub(), Num(1j, lineno=108, col_offset=66), lineno=108, col_offset=64)], [], None, None, lineno=108, col_offset=8), lineno=108, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=109, col_offset=8), 'assertRaises', Load(), lineno=109, col_offset=8), [Name('ZeroDivisionError', Load(), lineno=109, col_offset=26), Attribute(Name('complex', Load(), lineno=109, col_offset=45), '__truediv__', Load(), lineno=109, col_offset=45), BinOp(Num(1, lineno=109, col_offset=66), Add(), Num(1j, lineno=109, col_offset=68), lineno=109, col_offset=66), BinOp(Num(0, lineno=109, col_offset=72), Add(), Num(0j, lineno=109, col_offset=74), lineno=109, col_offset=72)], [], None, None, lineno=109, col_offset=8), lineno=109, col_offset=8)], [], lineno=107, col_offset=4), FunctionDef('test_floordiv', arguments([Name('self', Param(), lineno=111, col_offset=22)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=112, col_offset=8), 'assertAlmostEqual', Load(), lineno=112, col_offset=8), [Call(Attribute(Name('complex', Load(), lineno=112, col_offset=31), '__floordiv__', Load(), lineno=112, col_offset=31), [BinOp(Num(3, lineno=112, col_offset=52), Add(), Num(0j, lineno=112, col_offset=54), lineno=112, col_offset=52), BinOp(Num(1.5, lineno=112, col_offset=58), Add(), Num(0j, lineno=112, col_offset=62), lineno=112, col_offset=58)], [], None, None, lineno=112, col_offset=31), Num(2, lineno=112, col_offset=67)], [], None, None, lineno=112, col_offset=8), lineno=112, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=113, col_offset=8), 'assertRaises', Load(), lineno=113, col_offset=8), [Name('ZeroDivisionError', Load(), lineno=113, col_offset=26), Attribute(Name('complex', Load(), lineno=113, col_offset=45), '__floordiv__', Load(), lineno=113, col_offset=45), BinOp(Num(3, lineno=113, col_offset=67), Add(), Num(0j, lineno=113, col_offset=69), lineno=113, col_offset=67), BinOp(Num(0, lineno=113, col_offset=73), Add(), Num(0j, lineno=113, col_offset=75), lineno=113, col_offset=73)], [], None, None, lineno=113, col_offset=8), lineno=113, col_offset=8)], [], lineno=111, col_offset=4), FunctionDef('test_coerce', arguments([Name('self', Param(), lineno=115, col_offset=20)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=116, col_offset=8), 'assertRaises', Load(), lineno=116, col_offset=8), [Name('OverflowError', Load(), lineno=116, col_offset=26), Attribute(Name('complex', Load(), lineno=116, col_offset=41), '__coerce__', Load(), lineno=116, col_offset=41), BinOp(Num(1, lineno=116, col_offset=61), Add(), Num(1j, lineno=116, col_offset=63), lineno=116, col_offset=61), BinOp(Num(1L, lineno=116, col_offset=67), LShift(), Num(10000, lineno=116, col_offset=71), lineno=116, col_offset=67)], [], None, None, lineno=116, col_offset=8), lineno=116, col_offset=8)], [], lineno=115, col_offset=4), FunctionDef('test_no_implicit_coerce', arguments([Name('self', Param(), lineno=118, col_offset=32)], None, None, []), [ClassDef('A', [Name('object', Load(), lineno=120, col_offset=16)], [FunctionDef('__coerce__', arguments([Name('self', Param(), lineno=121, col_offset=27), Name('other', Param(), lineno=121, col_offset=33)], None, None, []), [Raise(Name('RuntimeError', Load(), lineno=122, col_offset=22), None, None, lineno=122, col_offset=16)], [], lineno=121, col_offset=12), Assign([Name('__hash__', Store(), lineno=123, col_offset=12)], Name('None', Load(), lineno=123, col_offset=23), lineno=123, col_offset=12), FunctionDef('__cmp__', arguments([Name('self', Param(), lineno=124, col_offset=24), Name('other', Param(), lineno=124, col_offset=30)], None, None, []), [Return(Num(-1, lineno=125, col_offset=24), lineno=125, col_offset=16)], [], lineno=124, col_offset=12)], [], lineno=120, col_offset=8), Assign([Name('a', Store(), lineno=127, col_offset=8)], Call(Name('A', Load(), lineno=127, col_offset=12), [], [], None, None, lineno=127, col_offset=12), lineno=127, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=128, col_offset=8), 'assertRaises', Load(), lineno=128, col_offset=8), [Name('TypeError', Load(), lineno=128, col_offset=26), Lambda(arguments([], None, None, []), BinOp(Name('a', Load(), lineno=128, col_offset=45), Add(), Num(2j, lineno=128, col_offset=49), lineno=128, col_offset=45), lineno=128, col_offset=37)], [], None, None, lineno=128, col_offset=8), lineno=128, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=129, col_offset=8), 'assertTrue', Load(), lineno=129, col_offset=8), [Compare(Name('a', Load(), lineno=129, col_offset=24), [Lt()], [Num(2j, lineno=129, col_offset=28)], lineno=129, col_offset=24)], [], None, None, lineno=129, col_offset=8), lineno=129, col_offset=8)], [], lineno=118, col_offset=4), FunctionDef('test_richcompare', arguments([Name('self', Param(), lineno=131, col_offset=25)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=132, col_offset=8), 'assertEqual', Load(), lineno=132, col_offset=8), [Call(Attribute(Name('complex', Load(), lineno=132, col_offset=25), '__eq__', Load(), lineno=132, col_offset=25), [BinOp(Num(1, lineno=132, col_offset=40), Add(), Num(1j, lineno=132, col_offset=42), lineno=132, col_offset=40), BinOp(Num(1L, lineno=132, col_offset=46), LShift(), Num(10000, lineno=132, col_offset=50), lineno=132, col_offset=46)], [], None, None, lineno=132, col_offset=25), Name('False', Load(), lineno=132, col_offset=58)], [], None, None, lineno=132, col_offset=8), lineno=132, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=133, col_offset=8), 'assertEqual', Load(), lineno=133, col_offset=8), [Call(Attribute(Name('complex', Load(), lineno=133, col_offset=25), '__lt__', Load(), lineno=133, col_offset=25), [BinOp(Num(1, lineno=133, col_offset=40), Add(), Num(1j, lineno=133, col_offset=42), lineno=133, col_offset=40), Name('None', Load(), lineno=133, col_offset=46)], [], None, None, lineno=133, col_offset=25), Name('NotImplemented', Load(), lineno=133, col_offset=53)], [], None, None, lineno=133, col_offset=8), lineno=133, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=134, col_offset=8), 'assertIs', Load(), lineno=134, col_offset=8), [Call(Attribute(Name('complex', Load(), lineno=134, col_offset=22), '__eq__', Load(), lineno=134, col_offset=22), [BinOp(Num(1, lineno=134, col_offset=37), Add(), Num(1j, lineno=134, col_offset=39), lineno=134, col_offset=37), BinOp(Num(1, lineno=134, col_offset=43), Add(), Num(1j, lineno=134, col_offset=45), lineno=134, col_offset=43)], [], None, None, lineno=134, col_offset=22), Name('True', Load(), lineno=134, col_offset=50)], [], None, None, lineno=134, col_offset=8), lineno=134, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=135, col_offset=8), 'assertIs', Load(), lineno=135, col_offset=8), [Call(Attribute(Name('complex', Load(), lineno=135, col_offset=22), '__eq__', Load(), lineno=135, col_offset=22), [BinOp(Num(1, lineno=135, col_offset=37), Add(), Num(1j, lineno=135, col_offset=39), lineno=135, col_offset=37), BinOp(Num(2, lineno=135, col_offset=43), Add(), Num(2j, lineno=135, col_offset=45), lineno=135, col_offset=43)], [], None, None, lineno=135, col_offset=22), Name('False', Load(), lineno=135, col_offset=50)], [], None, None, lineno=135, col_offset=8), lineno=135, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=136, col_offset=8), 'assertIs', Load(), lineno=136, col_offset=8), [Call(Attribute(Name('complex', Load(), lineno=136, col_offset=22), '__ne__', Load(), lineno=136, col_offset=22), [BinOp(Num(1, lineno=136, col_offset=37), Add(), Num(1j, lineno=136, col_offset=39), lineno=136, col_offset=37), BinOp(Num(1, lineno=136, col_offset=43), Add(), Num(1j, lineno=136, col_offset=45), lineno=136, col_offset=43)], [], None, None, lineno=136, col_offset=22), Name('False', Load(), lineno=136, col_offset=50)], [], None, None, lineno=136, col_offset=8), lineno=136, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=137, col_offset=8), 'assertIs', Load(), lineno=137, col_offset=8), [Call(Attribute(Name('complex', Load(), lineno=137, col_offset=22), '__ne__', Load(), lineno=137, col_offset=22), [BinOp(Num(1, lineno=137, col_offset=37), Add(), Num(1j, lineno=137, col_offset=39), lineno=137, col_offset=37), BinOp(Num(2, lineno=137, col_offset=43), Add(), Num(2j, lineno=137, col_offset=45), lineno=137, col_offset=43)], [], None, None, lineno=137, col_offset=22), Name('True', Load(), lineno=137, col_offset=50)], [], None, None, lineno=137, col_offset=8), lineno=137, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=138, col_offset=8), 'assertRaises', Load(), lineno=138, col_offset=8), [Name('TypeError', Load(), lineno=138, col_offset=26), Attribute(Name('complex', Load(), lineno=138, col_offset=37), '__lt__', Load(), lineno=138, col_offset=37), BinOp(Num(1, lineno=138, col_offset=53), Add(), Num(1j, lineno=138, col_offset=55), lineno=138, col_offset=53), BinOp(Num(2, lineno=138, col_offset=59), Add(), Num(2j, lineno=138, col_offset=61), lineno=138, col_offset=59)], [], None, None, lineno=138, col_offset=8), lineno=138, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=139, col_offset=8), 'assertRaises', Load(), lineno=139, col_offset=8), [Name('TypeError', Load(), lineno=139, col_offset=26), Attribute(Name('complex', Load(), lineno=139, col_offset=37), '__le__', Load(), lineno=139, col_offset=37), BinOp(Num(1, lineno=139, col_offset=53), Add(), Num(1j, lineno=139, col_offset=55), lineno=139, col_offset=53), BinOp(Num(2, lineno=139, col_offset=59), Add(), Num(2j, lineno=139, col_offset=61), lineno=139, col_offset=59)], [], None, None, lineno=139, col_offset=8), lineno=139, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=140, col_offset=8), 'assertRaises', Load(), lineno=140, col_offset=8), [Name('TypeError', Load(), lineno=140, col_offset=26), Attribute(Name('complex', Load(), lineno=140, col_offset=37), '__gt__', Load(), lineno=140, col_offset=37), BinOp(Num(1, lineno=140, col_offset=53), Add(), Num(1j, lineno=140, col_offset=55), lineno=140, col_offset=53), BinOp(Num(2, lineno=140, col_offset=59), Add(), Num(2j, lineno=140, col_offset=61), lineno=140, col_offset=59)], [], None, None, lineno=140, col_offset=8), lineno=140, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=141, col_offset=8), 'assertRaises', Load(), lineno=141, col_offset=8), [Name('TypeError', Load(), lineno=141, col_offset=26), Attribute(Name('complex', Load(), lineno=141, col_offset=37), '__ge__', Load(), lineno=141, col_offset=37), BinOp(Num(1, lineno=141, col_offset=53), Add(), Num(1j, lineno=141, col_offset=55), lineno=141, col_offset=53), BinOp(Num(2, lineno=141, col_offset=59), Add(), Num(2j, lineno=141, col_offset=61), lineno=141, col_offset=59)], [], None, None, lineno=141, col_offset=8), lineno=141, col_offset=8)], [], lineno=131, col_offset=4), FunctionDef('test_richcompare_boundaries', arguments([Name('self', Param(), lineno=143, col_offset=36)], None, None, []), [FunctionDef('check', arguments([Name('n', Param(), lineno=144, col_offset=18), Name('deltas', Param(), lineno=144, col_offset=21), Name('is_equal', Param(), lineno=144, col_offset=29), Name('imag', Param(), lineno=144, col_offset=39)], None, None, [Num(0.0, lineno=144, col_offset=46)]), [For(Name('delta', Store(), lineno=145, col_offset=16), Name('deltas', Load(), lineno=145, col_offset=25), [Assign([Name('i', Store(), lineno=146, col_offset=16)], BinOp(Name('n', Load(), lineno=146, col_offset=20), Add(), Name('delta', Load(), lineno=146, col_offset=24), lineno=146, col_offset=20), lineno=146, col_offset=16), Assign([Name('z', Store(), lineno=147, col_offset=16)], Call(Name('complex', Load(), lineno=147, col_offset=20), [Name('i', Load(), lineno=147, col_offset=28), Name('imag', Load(), lineno=147, col_offset=31)], [], None, None, lineno=147, col_offset=20), lineno=147, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=148, col_offset=16), 'assertIs', Load(), lineno=148, col_offset=16), [Call(Attribute(Name('complex', Load(), lineno=148, col_offset=30), '__eq__', Load(), lineno=148, col_offset=30), [Name('z', Load(), lineno=148, col_offset=45), Name('i', Load(), lineno=148, col_offset=48)], [], None, None, lineno=148, col_offset=30), Call(Name('is_equal', Load(), lineno=148, col_offset=52), [Name('delta', Load(), lineno=148, col_offset=61)], [], None, None, lineno=148, col_offset=52)], [], None, None, lineno=148, col_offset=16), lineno=148, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=149, col_offset=16), 'assertIs', Load(), lineno=149, col_offset=16), [Call(Attribute(Name('complex', Load(), lineno=149, col_offset=30), '__ne__', Load(), lineno=149, col_offset=30), [Name('z', Load(), lineno=149, col_offset=45), Name('i', Load(), lineno=149, col_offset=48)], [], None, None, lineno=149, col_offset=30), UnaryOp(Not(), Call(Name('is_equal', Load(), lineno=149, col_offset=56), [Name('delta', Load(), lineno=149, col_offset=65)], [], None, None, lineno=149, col_offset=56), lineno=149, col_offset=52)], [], None, None, lineno=149, col_offset=16), lineno=149, col_offset=16)], [], lineno=145, col_offset=12)], [], lineno=144, col_offset=8), For(Name('i', Store(), lineno=153, col_offset=12), Call(Name('range', Load(), lineno=153, col_offset=17), [Num(1, lineno=153, col_offset=23), Num(10, lineno=153, col_offset=26)], [], None, None, lineno=153, col_offset=17), [Assign([Name('pow', Store(), lineno=154, col_offset=12)], BinOp(Num(52, lineno=154, col_offset=18), Add(), Name('i', Load(), lineno=154, col_offset=23), lineno=154, col_offset=18), lineno=154, col_offset=12), Assign([Name('mult', Store(), lineno=155, col_offset=12)], BinOp(Num(2, lineno=155, col_offset=19), Pow(), Name('i', Load(), lineno=155, col_offset=24), lineno=155, col_offset=19), lineno=155, col_offset=12), Expr(Call(Name('check', Load(), lineno=156, col_offset=12), [BinOp(Num(2, lineno=156, col_offset=18), Pow(), Name('pow', Load(), lineno=156, col_offset=23), lineno=156, col_offset=18), Call(Name('range', Load(), lineno=156, col_offset=28), [Num(1, lineno=156, col_offset=34), Num(101, lineno=156, col_offset=37)], [], None, None, lineno=156, col_offset=28), Lambda(arguments([Name('delta', Param(), lineno=156, col_offset=50)], None, None, []), Compare(BinOp(Name('delta', Load(), lineno=156, col_offset=57), Mod(), Name('mult', Load(), lineno=156, col_offset=65), lineno=156, col_offset=57), [Eq()], [Num(0, lineno=156, col_offset=73)], lineno=156, col_offset=57), lineno=156, col_offset=43)], [], None, None, lineno=156, col_offset=12), lineno=156, col_offset=12), Expr(Call(Name('check', Load(), lineno=157, col_offset=12), [BinOp(Num(2, lineno=157, col_offset=18), Pow(), Name('pow', Load(), lineno=157, col_offset=23), lineno=157, col_offset=18), Call(Name('range', Load(), lineno=157, col_offset=28), [Num(1, lineno=157, col_offset=34), Num(101, lineno=157, col_offset=37)], [], None, None, lineno=157, col_offset=28), Lambda(arguments([Name('delta', Param(), lineno=157, col_offset=50)], None, None, []), Name('False', Load(), lineno=157, col_offset=57), lineno=157, col_offset=43), Call(Name('float', Load(), lineno=157, col_offset=64), [Name('i', Load(), lineno=157, col_offset=70)], [], None, None, lineno=157, col_offset=64)], [], None, None, lineno=157, col_offset=12), lineno=157, col_offset=12)], [], lineno=153, col_offset=8), Expr(Call(Name('check', Load(), lineno=158, col_offset=8), [BinOp(Num(2, lineno=158, col_offset=14), Pow(), Num(53, lineno=158, col_offset=19), lineno=158, col_offset=14), Call(Name('range', Load(), lineno=158, col_offset=23), [Num(-100, lineno=158, col_offset=30), Num(0, lineno=158, col_offset=35)], [], None, None, lineno=158, col_offset=23), Lambda(arguments([Name('delta', Param(), lineno=158, col_offset=46)], None, None, []), Name('True', Load(), lineno=158, col_offset=53), lineno=158, col_offset=39)], [], None, None, lineno=158, col_offset=8), lineno=158, col_offset=8)], [], lineno=143, col_offset=4), FunctionDef('test_mod', arguments([Name('self', Param(), lineno=160, col_offset=17)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=161, col_offset=8), 'assertRaises', Load(), lineno=161, col_offset=8), [Name('ZeroDivisionError', Load(), lineno=161, col_offset=26), Attribute(BinOp(Num(1, lineno=161, col_offset=46), Add(), Num(1j, lineno=161, col_offset=48), lineno=161, col_offset=46), '__mod__', Load(), lineno=161, col_offset=46), BinOp(Num(0, lineno=161, col_offset=61), Add(), Num(0j, lineno=161, col_offset=63), lineno=161, col_offset=61)], [], None, None, lineno=161, col_offset=8), lineno=161, col_offset=8), Assign([Name('a', Store(), lineno=163, col_offset=8)], BinOp(Num(3.33, lineno=163, col_offset=12), Add(), Num(4.43j, lineno=163, col_offset=17), lineno=163, col_offset=12), lineno=163, col_offset=8), TryExcept([Expr(BinOp(Name('a', Load(), lineno=165, col_offset=12), Mod(), Num(0, lineno=165, col_offset=16), lineno=165, col_offset=12), lineno=165, col_offset=12)], [ExceptHandler(Name('ZeroDivisionError', Load(), lineno=166, col_offset=15), None, [Pass( lineno=167, col_offset=12)], lineno=166, col_offset=8)], [Expr(Call(Attribute(Name('self', Load(), lineno=169, col_offset=12), 'fail', Load(), lineno=169, col_offset=12), [Str("modulo parama can't be 0", lineno=169, col_offset=22)], [], None, None, lineno=169, col_offset=12), lineno=169, col_offset=12)], lineno=164, col_offset=8)], [], lineno=160, col_offset=4), FunctionDef('test_divmod', arguments([Name('self', Param(), lineno=171, col_offset=20)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=172, col_offset=8), 'assertRaises', Load(), lineno=172, col_offset=8), [Name('ZeroDivisionError', Load(), lineno=172, col_offset=26), Name('divmod', Load(), lineno=172, col_offset=45), BinOp(Num(1, lineno=172, col_offset=53), Add(), Num(1j, lineno=172, col_offset=55), lineno=172, col_offset=53), BinOp(Num(0, lineno=172, col_offset=59), Add(), Num(0j, lineno=172, col_offset=61), lineno=172, col_offset=59)], [], None, None, lineno=172, col_offset=8), lineno=172, col_offset=8)], [], lineno=171, col_offset=4), FunctionDef('test_pow', arguments([Name('self', Param(), lineno=174, col_offset=17)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=175, col_offset=8), 'assertAlmostEqual', Load(), lineno=175, col_offset=8), [Call(Name('pow', Load(), lineno=175, col_offset=31), [BinOp(Num(1, lineno=175, col_offset=35), Add(), Num(1j, lineno=175, col_offset=37), lineno=175, col_offset=35), BinOp(Num(0, lineno=175, col_offset=41), Add(), Num(0j, lineno=175, col_offset=43), lineno=175, col_offset=41)], [], None, None, lineno=175, col_offset=31), Num(1.0, lineno=175, col_offset=48)], [], None, None, lineno=175, col_offset=8), lineno=175, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=176, col_offset=8), 'assertAlmostEqual', Load(), lineno=176, col_offset=8), [Call(Name('pow', Load(), lineno=176, col_offset=31), [BinOp(Num(0, lineno=176, col_offset=35), Add(), Num(0j, lineno=176, col_offset=37), lineno=176, col_offset=35), BinOp(Num(2, lineno=176, col_offset=41), Add(), Num(0j, lineno=176, col_offset=43), lineno=176, col_offset=41)], [], None, None, lineno=176, col_offset=31), Num(0.0, lineno=176, col_offset=48)], [], None, None, lineno=176, col_offset=8), lineno=176, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=177, col_offset=8), 'assertRaises', Load(), lineno=177, col_offset=8), [Name('ZeroDivisionError', Load(), lineno=177, col_offset=26), Name('pow', Load(), lineno=177, col_offset=45), BinOp(Num(0, lineno=177, col_offset=50), Add(), Num(0j, lineno=177, col_offset=52), lineno=177, col_offset=50), Num(1j, lineno=177, col_offset=56)], [], None, None, lineno=177, col_offset=8), lineno=177, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=178, col_offset=8), 'assertAlmostEqual', Load(), lineno=178, col_offset=8), [Call(Name('pow', Load(), lineno=178, col_offset=31), [Num(1j, lineno=178, col_offset=35), Num(-1, lineno=178, col_offset=40)], [], None, None, lineno=178, col_offset=31), BinOp(Num(1, lineno=178, col_offset=44), Div(), Num(1j, lineno=178, col_offset=46), lineno=178, col_offset=44)], [], None, None, lineno=178, col_offset=8), lineno=178, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=179, col_offset=8), 'assertAlmostEqual', Load(), lineno=179, col_offset=8), [Call(Name('pow', Load(), lineno=179, col_offset=31), [Num(1j, lineno=179, col_offset=35), Num(200, lineno=179, col_offset=39)], [], None, None, lineno=179, col_offset=31), Num(1, lineno=179, col_offset=45)], [], None, None, lineno=179, col_offset=8), lineno=179, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=180, col_offset=8), 'assertRaises', Load(), lineno=180, col_offset=8), [Name('ValueError', Load(), lineno=180, col_offset=26), Name('pow', Load(), lineno=180, col_offset=38), BinOp(Num(1, lineno=180, col_offset=43), Add(), Num(1j, lineno=180, col_offset=45), lineno=180, col_offset=43), BinOp(Num(1, lineno=180, col_offset=49), Add(), Num(1j, lineno=180, col_offset=51), lineno=180, col_offset=49), BinOp(Num(1, lineno=180, col_offset=55), Add(), Num(1j, lineno=180, col_offset=57), lineno=180, col_offset=55)], [], None, None, lineno=180, col_offset=8), lineno=180, col_offset=8), Assign([Name('a', Store(), lineno=182, col_offset=8)], BinOp(Num(3.33, lineno=182, col_offset=12), Add(), Num(4.43j, lineno=182, col_offset=17), lineno=182, col_offset=12), lineno=182, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=183, col_offset=8), 'assertEqual', Load(), lineno=183, col_offset=8), [BinOp(Name('a', Load(), lineno=183, col_offset=25), Pow(), Num(0j, lineno=183, col_offset=30), lineno=183, col_offset=25), Num(1, lineno=183, col_offset=34)], [], None, None, lineno=183, col_offset=8), lineno=183, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=184, col_offset=8), 'assertEqual', Load(), lineno=184, col_offset=8), [BinOp(BinOp(Name('a', Load(), lineno=184, col_offset=25), Pow(), Num(0.0, lineno=184, col_offset=30), lineno=184, col_offset=25), Add(), Num(0j, lineno=184, col_offset=33), lineno=184, col_offset=25), Num(1, lineno=184, col_offset=38)], [], None, None, lineno=184, col_offset=8), lineno=184, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=186, col_offset=8), 'assertEqual', Load(), lineno=186, col_offset=8), [BinOp(Num(3j, lineno=186, col_offset=25), Pow(), Num(0j, lineno=186, col_offset=31), lineno=186, col_offset=25), Num(1, lineno=186, col_offset=35)], [], None, None, lineno=186, col_offset=8), lineno=186, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=187, col_offset=8), 'assertEqual', Load(), lineno=187, col_offset=8), [BinOp(Num(3j, lineno=187, col_offset=25), Pow(), Num(0, lineno=187, col_offset=31), lineno=187, col_offset=25), Num(1, lineno=187, col_offset=34)], [], None, None, lineno=187, col_offset=8), lineno=187, col_offset=8), TryExcept([Expr(BinOp(Num(0j, lineno=190, col_offset=12), Pow(), Name('a', Load(), lineno=190, col_offset=18), lineno=190, col_offset=12), lineno=190, col_offset=12)], [ExceptHandler(Name('ZeroDivisionError', Load(), lineno=191, col_offset=15), None, [Pass( lineno=192, col_offset=12)], lineno=191, col_offset=8)], [Expr(Call(Attribute(Name('self', Load(), lineno=194, col_offset=12), 'fail', Load(), lineno=194, col_offset=12), [Str('should fail 0.0 to negative or complex power', lineno=194, col_offset=22)], [], None, None, lineno=194, col_offset=12), lineno=194, col_offset=12)], lineno=189, col_offset=8), TryExcept([Expr(BinOp(Num(0j, lineno=197, col_offset=12), Pow(), BinOp(Num(3, lineno=197, col_offset=19), Sub(), Num(2j, lineno=197, col_offset=21), lineno=197, col_offset=19), lineno=197, col_offset=12), lineno=197, col_offset=12)], [ExceptHandler(Name('ZeroDivisionError', Load(), lineno=198, col_offset=15), None, [Pass( lineno=199, col_offset=12)], lineno=198, col_offset=8)], [Expr(Call(Attribute(Name('self', Load(), lineno=201, col_offset=12), 'fail', Load(), lineno=201, col_offset=12), [Str('should fail 0.0 to negative or complex power', lineno=201, col_offset=22)], [], None, None, lineno=201, col_offset=12), lineno=201, col_offset=12)], lineno=196, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=204, col_offset=8), 'assertEqual', Load(), lineno=204, col_offset=8), [BinOp(Name('a', Load(), lineno=204, col_offset=25), Pow(), Num(105, lineno=204, col_offset=30), lineno=204, col_offset=25), BinOp(Name('a', Load(), lineno=204, col_offset=35), Pow(), Num(105, lineno=204, col_offset=40), lineno=204, col_offset=35)], [], None, None, lineno=204, col_offset=8), lineno=204, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=205, col_offset=8), 'assertEqual', Load(), lineno=205, col_offset=8), [BinOp(Name('a', Load(), lineno=205, col_offset=25), Pow(), Num(-105, lineno=205, col_offset=31), lineno=205, col_offset=25), BinOp(Name('a', Load(), lineno=205, col_offset=36), Pow(), Num(-105, lineno=205, col_offset=42), lineno=205, col_offset=36)], [], None, None, lineno=205, col_offset=8), lineno=205, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=206, col_offset=8), 'assertEqual', Load(), lineno=206, col_offset=8), [BinOp(Name('a', Load(), lineno=206, col_offset=25), Pow(), Num(-30, lineno=206, col_offset=31), lineno=206, col_offset=25), BinOp(Name('a', Load(), lineno=206, col_offset=35), Pow(), Num(-30, lineno=206, col_offset=41), lineno=206, col_offset=35)], [], None, None, lineno=206, col_offset=8), lineno=206, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=208, col_offset=8), 'assertEqual', Load(), lineno=208, col_offset=8), [BinOp(Num(0j, lineno=208, col_offset=25), Pow(), Num(0, lineno=208, col_offset=33), lineno=208, col_offset=25), Num(1, lineno=208, col_offset=36)], [], None, None, lineno=208, col_offset=8), lineno=208, col_offset=8), Assign([Name('b', Store(), lineno=210, col_offset=8)], BinOp(Num(5.1, lineno=210, col_offset=12), Add(), Num(2.3j, lineno=210, col_offset=16), lineno=210, col_offset=12), lineno=210, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=211, col_offset=8), 'assertRaises', Load(), lineno=211, col_offset=8), [Name('ValueError', Load(), lineno=211, col_offset=26), Name('pow', Load(), lineno=211, col_offset=38), Name('a', Load(), lineno=211, col_offset=43), Name('b', Load(), lineno=211, col_offset=46), Num(0, lineno=211, col_offset=49)], [], None, None, lineno=211, col_offset=8), lineno=211, col_offset=8)], [], lineno=174, col_offset=4), FunctionDef('test_boolcontext', arguments([Name('self', Param(), lineno=213, col_offset=25)], None, None, []), [For(Name('i', Store(), lineno=214, col_offset=12), Call(Name('xrange', Load(), lineno=214, col_offset=17), [Num(100, lineno=214, col_offset=24)], [], None, None, lineno=214, col_offset=17), [Expr(Call(Attribute(Name('self', Load(), lineno=215, col_offset=12), 'assertTrue', Load(), lineno=215, col_offset=12), [Call(Name('complex', Load(), lineno=215, col_offset=28), [BinOp(Call(Name('random', Load(), lineno=215, col_offset=36), [], [], None, None, lineno=215, col_offset=36), Add(), Num(1e-06, lineno=215, col_offset=47), lineno=215, col_offset=36), BinOp(Call(Name('random', Load(), lineno=215, col_offset=53), [], [], None, None, lineno=215, col_offset=53), Add(), Num(1e-06, lineno=215, col_offset=64), lineno=215, col_offset=53)], [], None, None, lineno=215, col_offset=28)], [], None, None, lineno=215, col_offset=12), lineno=215, col_offset=12)], [], lineno=214, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=216, col_offset=8), 'assertTrue', Load(), lineno=216, col_offset=8), [UnaryOp(Not(), Call(Name('complex', Load(), lineno=216, col_offset=28), [Num(0.0, lineno=216, col_offset=36), Num(0.0, lineno=216, col_offset=41)], [], None, None, lineno=216, col_offset=28), lineno=216, col_offset=24)], [], None, None, lineno=216, col_offset=8), lineno=216, col_offset=8)], [], lineno=213, col_offset=4), FunctionDef('test_conjugate', arguments([Name('self', Param(), lineno=218, col_offset=23)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=219, col_offset=8), 'assertClose', Load(), lineno=219, col_offset=8), [Call(Attribute(Call(Name('complex', Load(), lineno=219, col_offset=25), [Num(5.3, lineno=219, col_offset=33), Num(9.8, lineno=219, col_offset=38)], [], None, None, lineno=219, col_offset=25), 'conjugate', Load(), lineno=219, col_offset=25), [], [], None, None, lineno=219, col_offset=25), BinOp(Num(5.3, lineno=219, col_offset=56), Sub(), Num(9.8j, lineno=219, col_offset=60), lineno=219, col_offset=56)], [], None, None, lineno=219, col_offset=8), lineno=219, col_offset=8)], [], lineno=218, col_offset=4), FunctionDef('test_constructor', arguments([Name('self', Param(), lineno=221, col_offset=25)], None, None, []), [ClassDef('OS', [], [FunctionDef('__init__', arguments([Name('self', Param(), lineno=223, col_offset=25), Name('value', Param(), lineno=223, col_offset=31)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=223, col_offset=39), 'value', Store(), lineno=223, col_offset=39)], Name('value', Load(), lineno=223, col_offset=52), lineno=223, col_offset=39)], [], lineno=223, col_offset=12), FunctionDef('__complex__', arguments([Name('self', Param(), lineno=224, col_offset=28)], None, None, []), [Return(Attribute(Name('self', Load(), lineno=224, col_offset=42), 'value', Load(), lineno=224, col_offset=42), lineno=224, col_offset=35)], [], lineno=224, col_offset=12)], [], lineno=222, col_offset=8), ClassDef('NS', [Name('object', Load(), lineno=225, col_offset=17)], [FunctionDef('__init__', arguments([Name('self', Param(), lineno=226, col_offset=25), Name('value', Param(), lineno=226, col_offset=31)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=226, col_offset=39), 'value', Store(), lineno=226, col_offset=39)], Name('value', Load(), lineno=226, col_offset=52), lineno=226, col_offset=39)], [], lineno=226, col_offset=12), FunctionDef('__complex__', arguments([Name('self', Param(), lineno=227, col_offset=28)], None, None, []), [Return(Attribute(Name('self', Load(), lineno=227, col_offset=42), 'value', Load(), lineno=227, col_offset=42), lineno=227, col_offset=35)], [], lineno=227, col_offset=12)], [], lineno=225, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=228, col_offset=8), 'assertEqual', Load(), lineno=228, col_offset=8), [Call(Name('complex', Load(), lineno=228, col_offset=25), [Call(Name('OS', Load(), lineno=228, col_offset=33), [BinOp(Num(1, lineno=228, col_offset=36), Add(), Num(10j, lineno=228, col_offset=38), lineno=228, col_offset=36)], [], None, None, lineno=228, col_offset=33)], [], None, None, lineno=228, col_offset=25), BinOp(Num(1, lineno=228, col_offset=45), Add(), Num(10j, lineno=228, col_offset=47), lineno=228, col_offset=45)], [], None, None, lineno=228, col_offset=8), lineno=228, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=229, col_offset=8), 'assertEqual', Load(), lineno=229, col_offset=8), [Call(Name('complex', Load(), lineno=229, col_offset=25), [Call(Name('NS', Load(), lineno=229, col_offset=33), [BinOp(Num(1, lineno=229, col_offset=36), Add(), Num(10j, lineno=229, col_offset=38), lineno=229, col_offset=36)], [], None, None, lineno=229, col_offset=33)], [], None, None, lineno=229, col_offset=25), BinOp(Num(1, lineno=229, col_offset=45), Add(), Num(10j, lineno=229, col_offset=47), lineno=229, col_offset=45)], [], None, None, lineno=229, col_offset=8), lineno=229, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=230, col_offset=8), 'assertRaises', Load(), lineno=230, col_offset=8), [Name('TypeError', Load(), lineno=230, col_offset=26), Name('complex', Load(), lineno=230, col_offset=37), Call(Name('OS', Load(), lineno=230, col_offset=46), [Name('None', Load(), lineno=230, col_offset=49)], [], None, None, lineno=230, col_offset=46)], [], None, None, lineno=230, col_offset=8), lineno=230, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=231, col_offset=8), 'assertRaises', Load(), lineno=231, col_offset=8), [Name('TypeError', Load(), lineno=231, col_offset=26), Name('complex', Load(), lineno=231, col_offset=37), Call(Name('NS', Load(), lineno=231, col_offset=46), [Name('None', Load(), lineno=231, col_offset=49)], [], None, None, lineno=231, col_offset=46)], [], None, None, lineno=231, col_offset=8), lineno=231, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=233, col_offset=8), 'assertAlmostEqual', Load(), lineno=233, col_offset=8), [Call(Name('complex', Load(), lineno=233, col_offset=31), [Str('1+10j', lineno=233, col_offset=39)], [], None, None, lineno=233, col_offset=31), BinOp(Num(1, lineno=233, col_offset=49), Add(), Num(10j, lineno=233, col_offset=51), lineno=233, col_offset=49)], [], None, None, lineno=233, col_offset=8), lineno=233, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=234, col_offset=8), 'assertAlmostEqual', Load(), lineno=234, col_offset=8), [Call(Name('complex', Load(), lineno=234, col_offset=31), [Num(10, lineno=234, col_offset=39)], [], None, None, lineno=234, col_offset=31), BinOp(Num(10, lineno=234, col_offset=44), Add(), Num(0j, lineno=234, col_offset=47), lineno=234, col_offset=44)], [], None, None, lineno=234, col_offset=8), lineno=234, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=235, col_offset=8), 'assertAlmostEqual', Load(), lineno=235, col_offset=8), [Call(Name('complex', Load(), lineno=235, col_offset=31), [Num(10.0, lineno=235, col_offset=39)], [], None, None, lineno=235, col_offset=31), BinOp(Num(10, lineno=235, col_offset=46), Add(), Num(0j, lineno=235, col_offset=49), lineno=235, col_offset=46)], [], None, None, lineno=235, col_offset=8), lineno=235, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=236, col_offset=8), 'assertAlmostEqual', Load(), lineno=236, col_offset=8), [Call(Name('complex', Load(), lineno=236, col_offset=31), [Num(10L, lineno=236, col_offset=39)], [], None, None, lineno=236, col_offset=31), BinOp(Num(10, lineno=236, col_offset=45), Add(), Num(0j, lineno=236, col_offset=48), lineno=236, col_offset=45)], [], None, None, lineno=236, col_offset=8), lineno=236, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=237, col_offset=8), 'assertAlmostEqual', Load(), lineno=237, col_offset=8), [Call(Name('complex', Load(), lineno=237, col_offset=31), [BinOp(Num(10, lineno=237, col_offset=39), Add(), Num(0j, lineno=237, col_offset=42), lineno=237, col_offset=39)], [], None, None, lineno=237, col_offset=31), BinOp(Num(10, lineno=237, col_offset=47), Add(), Num(0j, lineno=237, col_offset=50), lineno=237, col_offset=47)], [], None, None, lineno=237, col_offset=8), lineno=237, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=238, col_offset=8), 'assertAlmostEqual', Load(), lineno=238, col_offset=8), [Call(Name('complex', Load(), lineno=238, col_offset=31), [Num(1, lineno=238, col_offset=39), Num(10, lineno=238, col_offset=41)], [], None, None, lineno=238, col_offset=31), BinOp(Num(1, lineno=238, col_offset=46), Add(), Num(10j, lineno=238, col_offset=48), lineno=238, col_offset=46)], [], None, None, lineno=238, col_offset=8), lineno=238, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=239, col_offset=8), 'assertAlmostEqual', Load(), lineno=239, col_offset=8), [Call(Name('complex', Load(), lineno=239, col_offset=31), [Num(1, lineno=239, col_offset=39), Num(10L, lineno=239, col_offset=41)], [], None, None, lineno=239, col_offset=31), BinOp(Num(1, lineno=239, col_offset=47), Add(), Num(10j, lineno=239, col_offset=49), lineno=239, col_offset=47)], [], None, None, lineno=239, col_offset=8), lineno=239, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=240, col_offset=8), 'assertAlmostEqual', Load(), lineno=240, col_offset=8), [Call(Name('complex', Load(), lineno=240, col_offset=31), [Num(1, lineno=240, col_offset=39), Num(10.0, lineno=240, col_offset=41)], [], None, None, lineno=240, col_offset=31), BinOp(Num(1, lineno=240, col_offset=48), Add(), Num(10j, lineno=240, col_offset=50), lineno=240, col_offset=48)], [], None, None, lineno=240, col_offset=8), lineno=240, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=241, col_offset=8), 'assertAlmostEqual', Load(), lineno=241, col_offset=8), [Call(Name('complex', Load(), lineno=241, col_offset=31), [Num(1L, lineno=241, col_offset=39), Num(10, lineno=241, col_offset=42)], [], None, None, lineno=241, col_offset=31), BinOp(Num(1, lineno=241, col_offset=47), Add(), Num(10j, lineno=241, col_offset=49), lineno=241, col_offset=47)], [], None, None, lineno=241, col_offset=8), lineno=241, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=242, col_offset=8), 'assertAlmostEqual', Load(), lineno=242, col_offset=8), [Call(Name('complex', Load(), lineno=242, col_offset=31), [Num(1L, lineno=242, col_offset=39), Num(10L, lineno=242, col_offset=42)], [], None, None, lineno=242, col_offset=31), BinOp(Num(1, lineno=242, col_offset=48), Add(), Num(10j, lineno=242, col_offset=50), lineno=242, col_offset=48)], [], None, None, lineno=242, col_offset=8), lineno=242, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=243, col_offset=8), 'assertAlmostEqual', Load(), lineno=243, col_offset=8), [Call(Name('complex', Load(), lineno=243, col_offset=31), [Num(1L, lineno=243, col_offset=39), Num(10.0, lineno=243, col_offset=42)], [], None, None, lineno=243, col_offset=31), BinOp(Num(1, lineno=243, col_offset=49), Add(), Num(10j, lineno=243, col_offset=51), lineno=243, col_offset=49)], [], None, None, lineno=243, col_offset=8), lineno=243, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=244, col_offset=8), 'assertAlmostEqual', Load(), lineno=244, col_offset=8), [Call(Name('complex', Load(), lineno=244, col_offset=31), [Num(1.0, lineno=244, col_offset=39), Num(10, lineno=244, col_offset=43)], [], None, None, lineno=244, col_offset=31), BinOp(Num(1, lineno=244, col_offset=48), Add(), Num(10j, lineno=244, col_offset=50), lineno=244, col_offset=48)], [], None, None, lineno=244, col_offset=8), lineno=244, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=245, col_offset=8), 'assertAlmostEqual', Load(), lineno=245, col_offset=8), [Call(Name('complex', Load(), lineno=245, col_offset=31), [Num(1.0, lineno=245, col_offset=39), Num(10L, lineno=245, col_offset=43)], [], None, None, lineno=245, col_offset=31), BinOp(Num(1, lineno=245, col_offset=49), Add(), Num(10j, lineno=245, col_offset=51), lineno=245, col_offset=49)], [], None, None, lineno=245, col_offset=8), lineno=245, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=246, col_offset=8), 'assertAlmostEqual', Load(), lineno=246, col_offset=8), [Call(Name('complex', Load(), lineno=246, col_offset=31), [Num(1.0, lineno=246, col_offset=39), Num(10.0, lineno=246, col_offset=43)], [], None, None, lineno=246, col_offset=31), BinOp(Num(1, lineno=246, col_offset=50), Add(), Num(10j, lineno=246, col_offset=52), lineno=246, col_offset=50)], [], None, None, lineno=246, col_offset=8), lineno=246, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=247, col_offset=8), 'assertAlmostEqual', Load(), lineno=247, col_offset=8), [Call(Name('complex', Load(), lineno=247, col_offset=31), [BinOp(Num(3.14, lineno=247, col_offset=39), Add(), Num(0j, lineno=247, col_offset=44), lineno=247, col_offset=39)], [], None, None, lineno=247, col_offset=31), BinOp(Num(3.14, lineno=247, col_offset=49), Add(), Num(0j, lineno=247, col_offset=54), lineno=247, col_offset=49)], [], None, None, lineno=247, col_offset=8), lineno=247, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=248, col_offset=8), 'assertAlmostEqual', Load(), lineno=248, col_offset=8), [Call(Name('complex', Load(), lineno=248, col_offset=31), [Num(3.14, lineno=248, col_offset=39)], [], None, None, lineno=248, col_offset=31), BinOp(Num(3.14, lineno=248, col_offset=46), Add(), Num(0j, lineno=248, col_offset=51), lineno=248, col_offset=46)], [], None, None, lineno=248, col_offset=8), lineno=248, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=249, col_offset=8), 'assertAlmostEqual', Load(), lineno=249, col_offset=8), [Call(Name('complex', Load(), lineno=249, col_offset=31), [Num(314, lineno=249, col_offset=39)], [], None, None, lineno=249, col_offset=31), BinOp(Num(314.0, lineno=249, col_offset=45), Add(), Num(0j, lineno=249, col_offset=51), lineno=249, col_offset=45)], [], None, None, lineno=249, col_offset=8), lineno=249, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=250, col_offset=8), 'assertAlmostEqual', Load(), lineno=250, col_offset=8), [Call(Name('complex', Load(), lineno=250, col_offset=31), [Num(314L, lineno=250, col_offset=39)], [], None, None, lineno=250, col_offset=31), BinOp(Num(314.0, lineno=250, col_offset=46), Add(), Num(0j, lineno=250, col_offset=52), lineno=250, col_offset=46)], [], None, None, lineno=250, col_offset=8), lineno=250, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=251, col_offset=8), 'assertAlmostEqual', Load(), lineno=251, col_offset=8), [Call(Name('complex', Load(), lineno=251, col_offset=31), [BinOp(Num(3.14, lineno=251, col_offset=39), Add(), Num(0j, lineno=251, col_offset=44), lineno=251, col_offset=39), Num(0j, lineno=251, col_offset=48)], [], None, None, lineno=251, col_offset=31), BinOp(Num(3.14, lineno=251, col_offset=53), Add(), Num(0j, lineno=251, col_offset=58), lineno=251, col_offset=53)], [], None, None, lineno=251, col_offset=8), lineno=251, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=252, col_offset=8), 'assertAlmostEqual', Load(), lineno=252, col_offset=8), [Call(Name('complex', Load(), lineno=252, col_offset=31), [Num(3.14, lineno=252, col_offset=39), Num(0.0, lineno=252, col_offset=45)], [], None, None, lineno=252, col_offset=31), BinOp(Num(3.14, lineno=252, col_offset=51), Add(), Num(0j, lineno=252, col_offset=56), lineno=252, col_offset=51)], [], None, None, lineno=252, col_offset=8), lineno=252, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=253, col_offset=8), 'assertAlmostEqual', Load(), lineno=253, col_offset=8), [Call(Name('complex', Load(), lineno=253, col_offset=31), [Num(314, lineno=253, col_offset=39), Num(0, lineno=253, col_offset=44)], [], None, None, lineno=253, col_offset=31), BinOp(Num(314.0, lineno=253, col_offset=48), Add(), Num(0j, lineno=253, col_offset=54), lineno=253, col_offset=48)], [], None, None, lineno=253, col_offset=8), lineno=253, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=254, col_offset=8), 'assertAlmostEqual', Load(), lineno=254, col_offset=8), [Call(Name('complex', Load(), lineno=254, col_offset=31), [Num(314L, lineno=254, col_offset=39), Num(0L, lineno=254, col_offset=45)], [], None, None, lineno=254, col_offset=31), BinOp(Num(314.0, lineno=254, col_offset=50), Add(), Num(0j, lineno=254, col_offset=56), lineno=254, col_offset=50)], [], None, None, lineno=254, col_offset=8), lineno=254, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=255, col_offset=8), 'assertAlmostEqual', Load(), lineno=255, col_offset=8), [Call(Name('complex', Load(), lineno=255, col_offset=31), [Num(0j, lineno=255, col_offset=39), Num(3.14j, lineno=255, col_offset=43)], [], None, None, lineno=255, col_offset=31), BinOp(Num(-3.14, lineno=255, col_offset=52), Add(), Num(0j, lineno=255, col_offset=57), lineno=255, col_offset=51)], [], None, None, lineno=255, col_offset=8), lineno=255, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=256, col_offset=8), 'assertAlmostEqual', Load(), lineno=256, col_offset=8), [Call(Name('complex', Load(), lineno=256, col_offset=31), [Num(0.0, lineno=256, col_offset=39), Num(3.14j, lineno=256, col_offset=44)], [], None, None, lineno=256, col_offset=31), BinOp(Num(-3.14, lineno=256, col_offset=53), Add(), Num(0j, lineno=256, col_offset=58), lineno=256, col_offset=52)], [], None, None, lineno=256, col_offset=8), lineno=256, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=257, col_offset=8), 'assertAlmostEqual', Load(), lineno=257, col_offset=8), [Call(Name('complex', Load(), lineno=257, col_offset=31), [Num(0j, lineno=257, col_offset=39), Num(3.14, lineno=257, col_offset=43)], [], None, None, lineno=257, col_offset=31), Num(3.14j, lineno=257, col_offset=50)], [], None, None, lineno=257, col_offset=8), lineno=257, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=258, col_offset=8), 'assertAlmostEqual', Load(), lineno=258, col_offset=8), [Call(Name('complex', Load(), lineno=258, col_offset=31), [Num(0.0, lineno=258, col_offset=39), Num(3.14, lineno=258, col_offset=44)], [], None, None, lineno=258, col_offset=31), Num(3.14j, lineno=258, col_offset=51)], [], None, None, lineno=258, col_offset=8), lineno=258, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=259, col_offset=8), 'assertAlmostEqual', Load(), lineno=259, col_offset=8), [Call(Name('complex', Load(), lineno=259, col_offset=31), [Str('1', lineno=259, col_offset=39)], [], None, None, lineno=259, col_offset=31), BinOp(Num(1, lineno=259, col_offset=45), Add(), Num(0j, lineno=259, col_offset=47), lineno=259, col_offset=45)], [], None, None, lineno=259, col_offset=8), lineno=259, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=260, col_offset=8), 'assertAlmostEqual', Load(), lineno=260, col_offset=8), [Call(Name('complex', Load(), lineno=260, col_offset=31), [Str('1j', lineno=260, col_offset=39)], [], None, None, lineno=260, col_offset=31), Num(1j, lineno=260, col_offset=46)], [], None, None, lineno=260, col_offset=8), lineno=260, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=261, col_offset=8), 'assertAlmostEqual', Load(), lineno=261, col_offset=8), [Call(Name('complex', Load(), lineno=261, col_offset=31), [], [], None, None, lineno=261, col_offset=31), Num(0, lineno=261, col_offset=43)], [], None, None, lineno=261, col_offset=8), lineno=261, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=262, col_offset=8), 'assertAlmostEqual', Load(), lineno=262, col_offset=8), [Call(Name('complex', Load(), lineno=262, col_offset=31), [Str('-1', lineno=262, col_offset=39)], [], None, None, lineno=262, col_offset=31), Num(-1, lineno=262, col_offset=47)], [], None, None, lineno=262, col_offset=8), lineno=262, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=263, col_offset=8), 'assertAlmostEqual', Load(), lineno=263, col_offset=8), [Call(Name('complex', Load(), lineno=263, col_offset=31), [Str('+1', lineno=263, col_offset=39)], [], None, None, lineno=263, col_offset=31), UnaryOp(UAdd(), Num(1, lineno=263, col_offset=47), lineno=263, col_offset=46)], [], None, None, lineno=263, col_offset=8), lineno=263, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=264, col_offset=8), 'assertAlmostEqual', Load(), lineno=264, col_offset=8), [Call(Name('complex', Load(), lineno=264, col_offset=31), [Str('(1+2j)', lineno=264, col_offset=39)], [], None, None, lineno=264, col_offset=31), BinOp(Num(1, lineno=264, col_offset=50), Add(), Num(2j, lineno=264, col_offset=52), lineno=264, col_offset=50)], [], None, None, lineno=264, col_offset=8), lineno=264, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=265, col_offset=8), 'assertAlmostEqual', Load(), lineno=265, col_offset=8), [Call(Name('complex', Load(), lineno=265, col_offset=31), [Str('(1.3+2.2j)', lineno=265, col_offset=39)], [], None, None, lineno=265, col_offset=31), BinOp(Num(1.3, lineno=265, col_offset=54), Add(), Num(2.2j, lineno=265, col_offset=58), lineno=265, col_offset=54)], [], None, None, lineno=265, col_offset=8), lineno=265, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=266, col_offset=8), 'assertAlmostEqual', Load(), lineno=266, col_offset=8), [Call(Name('complex', Load(), lineno=266, col_offset=31), [Str('3.14+1J', lineno=266, col_offset=39)], [], None, None, lineno=266, col_offset=31), BinOp(Num(3.14, lineno=266, col_offset=51), Add(), Num(1j, lineno=266, col_offset=56), lineno=266, col_offset=51)], [], None, None, lineno=266, col_offset=8), lineno=266, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=267, col_offset=8), 'assertAlmostEqual', Load(), lineno=267, col_offset=8), [Call(Name('complex', Load(), lineno=267, col_offset=31), [Str(' ( +3.14-6J )', lineno=267, col_offset=39)], [], None, None, lineno=267, col_offset=31), BinOp(Num(3.14, lineno=267, col_offset=57), Sub(), Num(6j, lineno=267, col_offset=62), lineno=267, col_offset=57)], [], None, None, lineno=267, col_offset=8), lineno=267, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=268, col_offset=8), 'assertAlmostEqual', Load(), lineno=268, col_offset=8), [Call(Name('complex', Load(), lineno=268, col_offset=31), [Str(' ( +3.14-J )', lineno=268, col_offset=39)], [], None, None, lineno=268, col_offset=31), BinOp(Num(3.14, lineno=268, col_offset=56), Sub(), Num(1j, lineno=268, col_offset=61), lineno=268, col_offset=56)], [], None, None, lineno=268, col_offset=8), lineno=268, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=269, col_offset=8), 'assertAlmostEqual', Load(), lineno=269, col_offset=8), [Call(Name('complex', Load(), lineno=269, col_offset=31), [Str(' ( +3.14+j )', lineno=269, col_offset=39)], [], None, None, lineno=269, col_offset=31), BinOp(Num(3.14, lineno=269, col_offset=56), Add(), Num(1j, lineno=269, col_offset=61), lineno=269, col_offset=56)], [], None, None, lineno=269, col_offset=8), lineno=269, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=270, col_offset=8), 'assertAlmostEqual', Load(), lineno=270, col_offset=8), [Call(Name('complex', Load(), lineno=270, col_offset=31), [Str('J', lineno=270, col_offset=39)], [], None, None, lineno=270, col_offset=31), Num(1j, lineno=270, col_offset=45)], [], None, None, lineno=270, col_offset=8), lineno=270, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=271, col_offset=8), 'assertAlmostEqual', Load(), lineno=271, col_offset=8), [Call(Name('complex', Load(), lineno=271, col_offset=31), [Str('( j )', lineno=271, col_offset=39)], [], None, None, lineno=271, col_offset=31), Num(1j, lineno=271, col_offset=49)], [], None, None, lineno=271, col_offset=8), lineno=271, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=272, col_offset=8), 'assertAlmostEqual', Load(), lineno=272, col_offset=8), [Call(Name('complex', Load(), lineno=272, col_offset=31), [Str('+J', lineno=272, col_offset=39)], [], None, None, lineno=272, col_offset=31), Num(1j, lineno=272, col_offset=46)], [], None, None, lineno=272, col_offset=8), lineno=272, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=273, col_offset=8), 'assertAlmostEqual', Load(), lineno=273, col_offset=8), [Call(Name('complex', Load(), lineno=273, col_offset=31), [Str('( -j)', lineno=273, col_offset=39)], [], None, None, lineno=273, col_offset=31), Num(-1j, lineno=273, col_offset=50)], [], None, None, lineno=273, col_offset=8), lineno=273, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=274, col_offset=8), 'assertAlmostEqual', Load(), lineno=274, col_offset=8), [Call(Name('complex', Load(), lineno=274, col_offset=31), [Str('1e-500', lineno=274, col_offset=39)], [], None, None, lineno=274, col_offset=31), BinOp(Num(0.0, lineno=274, col_offset=50), Add(), Num(0j, lineno=274, col_offset=56), lineno=274, col_offset=50)], [], None, None, lineno=274, col_offset=8), lineno=274, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=275, col_offset=8), 'assertAlmostEqual', Load(), lineno=275, col_offset=8), [Call(Name('complex', Load(), lineno=275, col_offset=31), [Str('-1e-500j', lineno=275, col_offset=39)], [], None, None, lineno=275, col_offset=31), BinOp(Num(0.0, lineno=275, col_offset=52), Sub(), Num(0j, lineno=275, col_offset=58), lineno=275, col_offset=52)], [], None, None, lineno=275, col_offset=8), lineno=275, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=276, col_offset=8), 'assertAlmostEqual', Load(), lineno=276, col_offset=8), [Call(Name('complex', Load(), lineno=276, col_offset=31), [Str('-1e-500+1e-500j', lineno=276, col_offset=39)], [], None, None, lineno=276, col_offset=31), BinOp(Num(-0.0, lineno=276, col_offset=60), Add(), Num(0j, lineno=276, col_offset=66), lineno=276, col_offset=59)], [], None, None, lineno=276, col_offset=8), lineno=276, col_offset=8), ClassDef('complex2', [Name('complex', Load(), lineno=278, col_offset=23)], [Pass( lineno=278, col_offset=33)], [], lineno=278, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=279, col_offset=8), 'assertAlmostEqual', Load(), lineno=279, col_offset=8), [Call(Name('complex', Load(), lineno=279, col_offset=31), [Call(Name('complex2', Load(), lineno=279, col_offset=39), [BinOp(Num(1, lineno=279, col_offset=48), Add(), Num(1j, lineno=279, col_offset=50), lineno=279, col_offset=48)], [], None, None, lineno=279, col_offset=39)], [], None, None, lineno=279, col_offset=31), BinOp(Num(1, lineno=279, col_offset=56), Add(), Num(1j, lineno=279, col_offset=58), lineno=279, col_offset=56)], [], None, None, lineno=279, col_offset=8), lineno=279, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=280, col_offset=8), 'assertAlmostEqual', Load(), lineno=280, col_offset=8), [Call(Name('complex', Load(), lineno=280, col_offset=31), [], [keyword('real', Num(17, lineno=280, col_offset=44)), keyword('imag', Num(23, lineno=280, col_offset=53))], None, None, lineno=280, col_offset=31), BinOp(Num(17, lineno=280, col_offset=58), Add(), Num(23j, lineno=280, col_offset=61), lineno=280, col_offset=58)], [], None, None, lineno=280, col_offset=8), lineno=280, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=281, col_offset=8), 'assertAlmostEqual', Load(), lineno=281, col_offset=8), [Call(Name('complex', Load(), lineno=281, col_offset=31), [], [keyword('real', BinOp(Num(17, lineno=281, col_offset=44), Add(), Num(23j, lineno=281, col_offset=47), lineno=281, col_offset=44))], None, None, lineno=281, col_offset=31), BinOp(Num(17, lineno=281, col_offset=53), Add(), Num(23j, lineno=281, col_offset=56), lineno=281, col_offset=53)], [], None, None, lineno=281, col_offset=8), lineno=281, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=282, col_offset=8), 'assertAlmostEqual', Load(), lineno=282, col_offset=8), [Call(Name('complex', Load(), lineno=282, col_offset=31), [], [keyword('real', BinOp(Num(17, lineno=282, col_offset=44), Add(), Num(23j, lineno=282, col_offset=47), lineno=282, col_offset=44)), keyword('imag', Num(23, lineno=282, col_offset=57))], None, None, lineno=282, col_offset=31), BinOp(Num(17, lineno=282, col_offset=62), Add(), Num(46j, lineno=282, col_offset=65), lineno=282, col_offset=62)], [], None, None, lineno=282, col_offset=8), lineno=282, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=283, col_offset=8), 'assertAlmostEqual', Load(), lineno=283, col_offset=8), [Call(Name('complex', Load(), lineno=283, col_offset=31), [], [keyword('real', BinOp(Num(1, lineno=283, col_offset=44), Add(), Num(2j, lineno=283, col_offset=46), lineno=283, col_offset=44)), keyword('imag', BinOp(Num(3, lineno=283, col_offset=55), Add(), Num(4j, lineno=283, col_offset=57), lineno=283, col_offset=55))], None, None, lineno=283, col_offset=31), BinOp(Num(-3, lineno=283, col_offset=63), Add(), Num(5j, lineno=283, col_offset=65), lineno=283, col_offset=62)], [], None, None, lineno=283, col_offset=8), lineno=283, col_offset=8), FunctionDef('split_zeros', arguments([Name('x', Param(), lineno=288, col_offset=24)], None, None, []), [Expr(Str('Function that produces different results for 0. and -0.', lineno=289, col_offset=12), lineno=289, col_offset=12), Return(Call(Name('atan2', Load(), lineno=290, col_offset=19), [Name('x', Load(), lineno=290, col_offset=25), Num(-1.0, lineno=290, col_offset=29)], [], None, None, lineno=290, col_offset=19), lineno=290, col_offset=12)], [], lineno=288, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=292, col_offset=8), 'assertEqual', Load(), lineno=292, col_offset=8), [Call(Name('split_zeros', Load(), lineno=292, col_offset=25), [Attribute(Call(Name('complex', Load(), lineno=292, col_offset=37), [Num(1.0, lineno=292, col_offset=45), Num(0.0, lineno=292, col_offset=49)], [], None, None, lineno=292, col_offset=37), 'imag', Load(), lineno=292, col_offset=37)], [], None, None, lineno=292, col_offset=25), Call(Name('split_zeros', Load(), lineno=292, col_offset=60), [Num(0.0, lineno=292, col_offset=72)], [], None, None, lineno=292, col_offset=60)], [], None, None, lineno=292, col_offset=8), lineno=292, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=293, col_offset=8), 'assertEqual', Load(), lineno=293, col_offset=8), [Call(Name('split_zeros', Load(), lineno=293, col_offset=25), [Attribute(Call(Name('complex', Load(), lineno=293, col_offset=37), [Num(1.0, lineno=293, col_offset=45), Num(-0.0, lineno=293, col_offset=50)], [], None, None, lineno=293, col_offset=37), 'imag', Load(), lineno=293, col_offset=37)], [], None, None, lineno=293, col_offset=25), Call(Name('split_zeros', Load(), lineno=293, col_offset=61), [Num(-0.0, lineno=293, col_offset=74)], [], None, None, lineno=293, col_offset=61)], [], None, None, lineno=293, col_offset=8), lineno=293, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=294, col_offset=8), 'assertEqual', Load(), lineno=294, col_offset=8), [Call(Name('split_zeros', Load(), lineno=294, col_offset=25), [Attribute(Call(Name('complex', Load(), lineno=294, col_offset=37), [Num(0.0, lineno=294, col_offset=45), Num(1.0, lineno=294, col_offset=49)], [], None, None, lineno=294, col_offset=37), 'real', Load(), lineno=294, col_offset=37)], [], None, None, lineno=294, col_offset=25), Call(Name('split_zeros', Load(), lineno=294, col_offset=60), [Num(0.0, lineno=294, col_offset=72)], [], None, None, lineno=294, col_offset=60)], [], None, None, lineno=294, col_offset=8), lineno=294, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=295, col_offset=8), 'assertEqual', Load(), lineno=295, col_offset=8), [Call(Name('split_zeros', Load(), lineno=295, col_offset=25), [Attribute(Call(Name('complex', Load(), lineno=295, col_offset=37), [Num(-0.0, lineno=295, col_offset=46), Num(1.0, lineno=295, col_offset=50)], [], None, None, lineno=295, col_offset=37), 'real', Load(), lineno=295, col_offset=37)], [], None, None, lineno=295, col_offset=25), Call(Name('split_zeros', Load(), lineno=295, col_offset=61), [Num(-0.0, lineno=295, col_offset=74)], [], None, None, lineno=295, col_offset=61)], [], None, None, lineno=295, col_offset=8), lineno=295, col_offset=8), Assign([Name('c', Store(), lineno=297, col_offset=8)], BinOp(Num(3.14, lineno=297, col_offset=12), Add(), Num(1j, lineno=297, col_offset=19), lineno=297, col_offset=12), lineno=297, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=298, col_offset=8), 'assertTrue', Load(), lineno=298, col_offset=8), [Compare(Call(Name('complex', Load(), lineno=298, col_offset=24), [Name('c', Load(), lineno=298, col_offset=32)], [], None, None, lineno=298, col_offset=24), [Is()], [Name('c', Load(), lineno=298, col_offset=38)], lineno=298, col_offset=24)], [], None, None, lineno=298, col_offset=8), lineno=298, col_offset=8), Delete([Name('c', Del(), lineno=299, col_offset=12)], lineno=299, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=301, col_offset=8), 'assertRaises', Load(), lineno=301, col_offset=8), [Name('TypeError', Load(), lineno=301, col_offset=26), Name('complex', Load(), lineno=301, col_offset=37), Str('1', lineno=301, col_offset=46), Str('1', lineno=301, col_offset=51)], [], None, None, lineno=301, col_offset=8), lineno=301, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=302, col_offset=8), 'assertRaises', Load(), lineno=302, col_offset=8), [Name('TypeError', Load(), lineno=302, col_offset=26), Name('complex', Load(), lineno=302, col_offset=37), Num(1, lineno=302, col_offset=46), Str('1', lineno=302, col_offset=49)], [], None, None, lineno=302, col_offset=8), lineno=302, col_offset=8), If(Attribute(Name('test_support', Load(), lineno=304, col_offset=11), 'have_unicode', Load(), lineno=304, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=305, col_offset=12), 'assertEqual', Load(), lineno=305, col_offset=12), [Call(Name('complex', Load(), lineno=305, col_offset=29), [Call(Name('unicode', Load(), lineno=305, col_offset=37), [Str('  3.14+J  ', lineno=305, col_offset=45)], [], None, None, lineno=305, col_offset=37)], [], None, None, lineno=305, col_offset=29), BinOp(Num(3.14, lineno=305, col_offset=61), Add(), Num(1j, lineno=305, col_offset=66), lineno=305, col_offset=61)], [], None, None, lineno=305, col_offset=12), lineno=305, col_offset=12)], [], lineno=304, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=309, col_offset=8), 'assertRaises', Load(), lineno=309, col_offset=8), [Name('ValueError', Load(), lineno=309, col_offset=26), Name('complex', Load(), lineno=309, col_offset=38), Str('1+1j\x00j', lineno=309, col_offset=47)], [], None, None, lineno=309, col_offset=8), lineno=309, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=311, col_offset=8), 'assertRaises', Load(), lineno=311, col_offset=8), [Name('TypeError', Load(), lineno=311, col_offset=26), Name('int', Load(), lineno=311, col_offset=37), BinOp(Num(5, lineno=311, col_offset=42), Add(), Num(3j, lineno=311, col_offset=44), lineno=311, col_offset=42)], [], None, None, lineno=311, col_offset=8), lineno=311, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=312, col_offset=8), 'assertRaises', Load(), lineno=312, col_offset=8), [Name('TypeError', Load(), lineno=312, col_offset=26), Name('long', Load(), lineno=312, col_offset=37), BinOp(Num(5, lineno=312, col_offset=43), Add(), Num(3j, lineno=312, col_offset=45), lineno=312, col_offset=43)], [], None, None, lineno=312, col_offset=8), lineno=312, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=313, col_offset=8), 'assertRaises', Load(), lineno=313, col_offset=8), [Name('TypeError', Load(), lineno=313, col_offset=26), Name('float', Load(), lineno=313, col_offset=37), BinOp(Num(5, lineno=313, col_offset=44), Add(), Num(3j, lineno=313, col_offset=46), lineno=313, col_offset=44)], [], None, None, lineno=313, col_offset=8), lineno=313, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=314, col_offset=8), 'assertRaises', Load(), lineno=314, col_offset=8), [Name('ValueError', Load(), lineno=314, col_offset=26), Name('complex', Load(), lineno=314, col_offset=38), Str('', lineno=314, col_offset=47)], [], None, None, lineno=314, col_offset=8), lineno=314, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=315, col_offset=8), 'assertRaises', Load(), lineno=315, col_offset=8), [Name('TypeError', Load(), lineno=315, col_offset=26), Name('complex', Load(), lineno=315, col_offset=37), Name('None', Load(), lineno=315, col_offset=46)], [], None, None, lineno=315, col_offset=8), lineno=315, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=316, col_offset=8), 'assertRaises', Load(), lineno=316, col_offset=8), [Name('ValueError', Load(), lineno=316, col_offset=26), Name('complex', Load(), lineno=316, col_offset=38), Str('\x00', lineno=316, col_offset=47)], [], None, None, lineno=316, col_offset=8), lineno=316, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=317, col_offset=8), 'assertRaises', Load(), lineno=317, col_offset=8), [Name('ValueError', Load(), lineno=317, col_offset=26), Name('complex', Load(), lineno=317, col_offset=38), Str('3\x009', lineno=317, col_offset=47)], [], None, None, lineno=317, col_offset=8), lineno=317, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=318, col_offset=8), 'assertRaises', Load(), lineno=318, col_offset=8), [Name('TypeError', Load(), lineno=318, col_offset=26), Name('complex', Load(), lineno=318, col_offset=37), Str('1', lineno=318, col_offset=46), Str('2', lineno=318, col_offset=51)], [], None, None, lineno=318, col_offset=8), lineno=318, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=319, col_offset=8), 'assertRaises', Load(), lineno=319, col_offset=8), [Name('TypeError', Load(), lineno=319, col_offset=26), Name('complex', Load(), lineno=319, col_offset=37), Str('1', lineno=319, col_offset=46), Num(42, lineno=319, col_offset=51)], [], None, None, lineno=319, col_offset=8), lineno=319, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=320, col_offset=8), 'assertRaises', Load(), lineno=320, col_offset=8), [Name('TypeError', Load(), lineno=320, col_offset=26), Name('complex', Load(), lineno=320, col_offset=37), Num(1, lineno=320, col_offset=46), Str('2', lineno=320, col_offset=49)], [], None, None, lineno=320, col_offset=8), lineno=320, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=321, col_offset=8), 'assertRaises', Load(), lineno=321, col_offset=8), [Name('ValueError', Load(), lineno=321, col_offset=26), Name('complex', Load(), lineno=321, col_offset=38), Str('1+', lineno=321, col_offset=47)], [], None, None, lineno=321, col_offset=8), lineno=321, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=322, col_offset=8), 'assertRaises', Load(), lineno=322, col_offset=8), [Name('ValueError', Load(), lineno=322, col_offset=26), Name('complex', Load(), lineno=322, col_offset=38), Str('1+1j+1j', lineno=322, col_offset=47)], [], None, None, lineno=322, col_offset=8), lineno=322, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=323, col_offset=8), 'assertRaises', Load(), lineno=323, col_offset=8), [Name('ValueError', Load(), lineno=323, col_offset=26), Name('complex', Load(), lineno=323, col_offset=38), Str('--', lineno=323, col_offset=47)], [], None, None, lineno=323, col_offset=8), lineno=323, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=324, col_offset=8), 'assertRaises', Load(), lineno=324, col_offset=8), [Name('ValueError', Load(), lineno=324, col_offset=26), Name('complex', Load(), lineno=324, col_offset=38), Str('(1+2j', lineno=324, col_offset=47)], [], None, None, lineno=324, col_offset=8), lineno=324, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=325, col_offset=8), 'assertRaises', Load(), lineno=325, col_offset=8), [Name('ValueError', Load(), lineno=325, col_offset=26), Name('complex', Load(), lineno=325, col_offset=38), Str('1+2j)', lineno=325, col_offset=47)], [], None, None, lineno=325, col_offset=8), lineno=325, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=326, col_offset=8), 'assertRaises', Load(), lineno=326, col_offset=8), [Name('ValueError', Load(), lineno=326, col_offset=26), Name('complex', Load(), lineno=326, col_offset=38), Str('1+(2j)', lineno=326, col_offset=47)], [], None, None, lineno=326, col_offset=8), lineno=326, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=327, col_offset=8), 'assertRaises', Load(), lineno=327, col_offset=8), [Name('ValueError', Load(), lineno=327, col_offset=26), Name('complex', Load(), lineno=327, col_offset=38), Str('(1+2j)123', lineno=327, col_offset=47)], [], None, None, lineno=327, col_offset=8), lineno=327, col_offset=8), If(Attribute(Name('test_support', Load(), lineno=328, col_offset=11), 'have_unicode', Load(), lineno=328, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=329, col_offset=12), 'assertRaises', Load(), lineno=329, col_offset=12), [Name('ValueError', Load(), lineno=329, col_offset=30), Name('complex', Load(), lineno=329, col_offset=42), Call(Name('unicode', Load(), lineno=329, col_offset=51), [Str('x', lineno=329, col_offset=59)], [], None, None, lineno=329, col_offset=51)], [], None, None, lineno=329, col_offset=12), lineno=329, col_offset=12)], [], lineno=328, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=330, col_offset=8), 'assertRaises', Load(), lineno=330, col_offset=8), [Name('ValueError', Load(), lineno=330, col_offset=26), Name('complex', Load(), lineno=330, col_offset=38), Str('1j+2', lineno=330, col_offset=47)], [], None, None, lineno=330, col_offset=8), lineno=330, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=331, col_offset=8), 'assertRaises', Load(), lineno=331, col_offset=8), [Name('ValueError', Load(), lineno=331, col_offset=26), Name('complex', Load(), lineno=331, col_offset=38), Str('1e1ej', lineno=331, col_offset=47)], [], None, None, lineno=331, col_offset=8), lineno=331, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=332, col_offset=8), 'assertRaises', Load(), lineno=332, col_offset=8), [Name('ValueError', Load(), lineno=332, col_offset=26), Name('complex', Load(), lineno=332, col_offset=38), Str('1e++1ej', lineno=332, col_offset=47)], [], None, None, lineno=332, col_offset=8), lineno=332, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=333, col_offset=8), 'assertRaises', Load(), lineno=333, col_offset=8), [Name('ValueError', Load(), lineno=333, col_offset=26), Name('complex', Load(), lineno=333, col_offset=38), Str(')1+2j(', lineno=333, col_offset=47)], [], None, None, lineno=333, col_offset=8), lineno=333, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=335, col_offset=8), 'assertRaises', Load(), lineno=335, col_offset=8), [Name('ValueError', Load(), lineno=335, col_offset=26), Name('complex', Load(), lineno=335, col_offset=38), Str('1..1j', lineno=335, col_offset=47)], [], None, None, lineno=335, col_offset=8), lineno=335, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=336, col_offset=8), 'assertRaises', Load(), lineno=336, col_offset=8), [Name('ValueError', Load(), lineno=336, col_offset=26), Name('complex', Load(), lineno=336, col_offset=38), Str('1.11.1j', lineno=336, col_offset=47)], [], None, None, lineno=336, col_offset=8), lineno=336, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=337, col_offset=8), 'assertRaises', Load(), lineno=337, col_offset=8), [Name('ValueError', Load(), lineno=337, col_offset=26), Name('complex', Load(), lineno=337, col_offset=38), Str('1e1.1j', lineno=337, col_offset=47)], [], None, None, lineno=337, col_offset=8), lineno=337, col_offset=8), If(Attribute(Name('test_support', Load(), lineno=339, col_offset=11), 'have_unicode', Load(), lineno=339, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=341, col_offset=12), 'assertEqual', Load(), lineno=341, col_offset=12), [Call(Name('type', Load(), lineno=341, col_offset=29), [Call(Name('complex', Load(), lineno=341, col_offset=34), [Call(Name('unicode', Load(), lineno=341, col_offset=42), [BinOp(Str('1', lineno=341, col_offset=50), Mult(), Num(500, lineno=341, col_offset=54), lineno=341, col_offset=50)], [], None, None, lineno=341, col_offset=42)], [], None, None, lineno=341, col_offset=34)], [], None, None, lineno=341, col_offset=29), Name('complex', Load(), lineno=341, col_offset=62)], [], None, None, lineno=341, col_offset=12), lineno=341, col_offset=12)], [], lineno=339, col_offset=8), ClassDef('EvilExc', [Name('Exception', Load(), lineno=343, col_offset=22)], [Pass( lineno=344, col_offset=12)], [], lineno=343, col_offset=8), ClassDef('evilcomplex', [], [FunctionDef('__complex__', arguments([Name('self', Param(), lineno=347, col_offset=28)], None, None, []), [Raise(Name('EvilExc', Load(), lineno=348, col_offset=22), None, None, lineno=348, col_offset=16)], [], lineno=347, col_offset=12)], [], lineno=346, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=350, col_offset=8), 'assertRaises', Load(), lineno=350, col_offset=8), [Name('EvilExc', Load(), lineno=350, col_offset=26), Name('complex', Load(), lineno=350, col_offset=35), Call(Name('evilcomplex', Load(), lineno=350, col_offset=44), [], [], None, None, lineno=350, col_offset=44)], [], None, None, lineno=350, col_offset=8), lineno=350, col_offset=8), ClassDef('float2', [], [FunctionDef('__init__', arguments([Name('self', Param(), lineno=353, col_offset=25), Name('value', Param(), lineno=353, col_offset=31)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=354, col_offset=16), 'value', Store(), lineno=354, col_offset=16)], Name('value', Load(), lineno=354, col_offset=29), lineno=354, col_offset=16)], [], lineno=353, col_offset=12), FunctionDef('__float__', arguments([Name('self', Param(), lineno=355, col_offset=26)], None, None, []), [Return(Attribute(Name('self', Load(), lineno=356, col_offset=23), 'value', Load(), lineno=356, col_offset=23), lineno=356, col_offset=16)], [], lineno=355, col_offset=12)], [], lineno=352, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=358, col_offset=8), 'assertAlmostEqual', Load(), lineno=358, col_offset=8), [Call(Name('complex', Load(), lineno=358, col_offset=31), [Call(Name('float2', Load(), lineno=358, col_offset=39), [Num(42.0, lineno=358, col_offset=46)], [], None, None, lineno=358, col_offset=39)], [], None, None, lineno=358, col_offset=31), Num(42, lineno=358, col_offset=53)], [], None, None, lineno=358, col_offset=8), lineno=358, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=359, col_offset=8), 'assertAlmostEqual', Load(), lineno=359, col_offset=8), [Call(Name('complex', Load(), lineno=359, col_offset=31), [], [keyword('real', Call(Name('float2', Load(), lineno=359, col_offset=44), [Num(17.0, lineno=359, col_offset=51)], [], None, None, lineno=359, col_offset=44)), keyword('imag', Call(Name('float2', Load(), lineno=359, col_offset=62), [Num(23.0, lineno=359, col_offset=69)], [], None, None, lineno=359, col_offset=62))], None, None, lineno=359, col_offset=31), BinOp(Num(17, lineno=359, col_offset=76), Add(), Num(23j, lineno=359, col_offset=79), lineno=359, col_offset=76)], [], None, None, lineno=359, col_offset=8), lineno=359, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=360, col_offset=8), 'assertRaises', Load(), lineno=360, col_offset=8), [Name('TypeError', Load(), lineno=360, col_offset=26), Name('complex', Load(), lineno=360, col_offset=37), Call(Name('float2', Load(), lineno=360, col_offset=46), [Name('None', Load(), lineno=360, col_offset=53)], [], None, None, lineno=360, col_offset=46)], [], None, None, lineno=360, col_offset=8), lineno=360, col_offset=8), ClassDef('complex0', [Name('complex', Load(), lineno=362, col_offset=23)], [Expr(Str("Test usage of __complex__() when inheriting from 'complex'", lineno=363, col_offset=12), lineno=363, col_offset=12), FunctionDef('__complex__', arguments([Name('self', Param(), lineno=364, col_offset=28)], None, None, []), [Return(Num(42j, lineno=365, col_offset=23), lineno=365, col_offset=16)], [], lineno=364, col_offset=12)], [], lineno=362, col_offset=8), ClassDef('complex1', [Name('complex', Load(), lineno=367, col_offset=23)], [Expr(Str('Test usage of __complex__() with a __new__() method', lineno=368, col_offset=12), lineno=368, col_offset=12), FunctionDef('__new__', arguments([Name('self', Param(), lineno=369, col_offset=24), Name('value', Param(), lineno=369, col_offset=30)], None, None, [Num(0j, lineno=369, col_offset=36)]), [Return(Call(Attribute(Name('complex', Load(), lineno=370, col_offset=23), '__new__', Load(), lineno=370, col_offset=23), [Name('self', Load(), lineno=370, col_offset=39), BinOp(Num(2, lineno=370, col_offset=45), Mult(), Name('value', Load(), lineno=370, col_offset=47), lineno=370, col_offset=45)], [], None, None, lineno=370, col_offset=23), lineno=370, col_offset=16)], [], lineno=369, col_offset=12), FunctionDef('__complex__', arguments([Name('self', Param(), lineno=371, col_offset=28)], None, None, []), [Return(Name('self', Load(), lineno=372, col_offset=23), lineno=372, col_offset=16)], [], lineno=371, col_offset=12)], [], lineno=367, col_offset=8), ClassDef('complex2', [Name('complex', Load(), lineno=374, col_offset=23)], [Expr(Str('Make sure that __complex__() calls fail if anything other than a\n            complex is returned', lineno=376, col_offset=-1), lineno=376, col_offset=-1), FunctionDef('__complex__', arguments([Name('self', Param(), lineno=377, col_offset=28)], None, None, []), [Return(Name('None', Load(), lineno=378, col_offset=23), lineno=378, col_offset=16)], [], lineno=377, col_offset=12)], [], lineno=374, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=380, col_offset=8), 'assertAlmostEqual', Load(), lineno=380, col_offset=8), [Call(Name('complex', Load(), lineno=380, col_offset=31), [Call(Name('complex0', Load(), lineno=380, col_offset=39), [Num(1j, lineno=380, col_offset=48)], [], None, None, lineno=380, col_offset=39)], [], None, None, lineno=380, col_offset=31), Num(42j, lineno=380, col_offset=54)], [], None, None, lineno=380, col_offset=8), lineno=380, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=381, col_offset=8), 'assertAlmostEqual', Load(), lineno=381, col_offset=8), [Call(Name('complex', Load(), lineno=381, col_offset=31), [Call(Name('complex1', Load(), lineno=381, col_offset=39), [Num(1j, lineno=381, col_offset=48)], [], None, None, lineno=381, col_offset=39)], [], None, None, lineno=381, col_offset=31), Num(2j, lineno=381, col_offset=54)], [], None, None, lineno=381, col_offset=8), lineno=381, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=382, col_offset=8), 'assertRaises', Load(), lineno=382, col_offset=8), [Name('TypeError', Load(), lineno=382, col_offset=26), Name('complex', Load(), lineno=382, col_offset=37), Call(Name('complex2', Load(), lineno=382, col_offset=46), [Num(1j, lineno=382, col_offset=55)], [], None, None, lineno=382, col_offset=46)], [], None, None, lineno=382, col_offset=8), lineno=382, col_offset=8)], [], lineno=221, col_offset=4), FunctionDef('test_subclass', arguments([Name('self', Param(), lineno=384, col_offset=22)], None, None, []), [ClassDef('xcomplex', [Name('complex', Load(), lineno=385, col_offset=23)], [FunctionDef('__add__', arguments([Name('self', Param(), lineno=386, col_offset=24), Name('other', Param(), lineno=386, col_offset=29)], None, None, []), [Return(Call(Name('xcomplex', Load(), lineno=387, col_offset=23), [BinOp(Call(Name('complex', Load(), lineno=387, col_offset=32), [Name('self', Load(), lineno=387, col_offset=40)], [], None, None, lineno=387, col_offset=32), Add(), Name('other', Load(), lineno=387, col_offset=48), lineno=387, col_offset=32)], [], None, None, lineno=387, col_offset=23), lineno=387, col_offset=16)], [], lineno=386, col_offset=12), Assign([Name('__radd__', Store(), lineno=388, col_offset=12)], Name('__add__', Load(), lineno=388, col_offset=23), lineno=388, col_offset=12), FunctionDef('__sub__', arguments([Name('self', Param(), lineno=390, col_offset=24), Name('other', Param(), lineno=390, col_offset=29)], None, None, []), [Return(Call(Name('xcomplex', Load(), lineno=391, col_offset=23), [BinOp(Call(Name('complex', Load(), lineno=391, col_offset=32), [Name('self', Load(), lineno=391, col_offset=40)], [], None, None, lineno=391, col_offset=32), Add(), Name('other', Load(), lineno=391, col_offset=48), lineno=391, col_offset=32)], [], None, None, lineno=391, col_offset=23), lineno=391, col_offset=16)], [], lineno=390, col_offset=12), Assign([Name('__rsub__', Store(), lineno=392, col_offset=12)], Name('__sub__', Load(), lineno=392, col_offset=23), lineno=392, col_offset=12), FunctionDef('__mul__', arguments([Name('self', Param(), lineno=394, col_offset=24), Name('other', Param(), lineno=394, col_offset=29)], None, None, []), [Return(Call(Name('xcomplex', Load(), lineno=395, col_offset=23), [BinOp(Call(Name('complex', Load(), lineno=395, col_offset=32), [Name('self', Load(), lineno=395, col_offset=40)], [], None, None, lineno=395, col_offset=32), Mult(), Name('other', Load(), lineno=395, col_offset=48), lineno=395, col_offset=32)], [], None, None, lineno=395, col_offset=23), lineno=395, col_offset=16)], [], lineno=394, col_offset=12), Assign([Name('__rmul__', Store(), lineno=396, col_offset=12)], Name('__mul__', Load(), lineno=396, col_offset=23), lineno=396, col_offset=12), FunctionDef('__div__', arguments([Name('self', Param(), lineno=398, col_offset=24), Name('other', Param(), lineno=398, col_offset=29)], None, None, []), [Return(Call(Name('xcomplex', Load(), lineno=399, col_offset=23), [BinOp(Call(Name('complex', Load(), lineno=399, col_offset=32), [Name('self', Load(), lineno=399, col_offset=40)], [], None, None, lineno=399, col_offset=32), Div(), Name('other', Load(), lineno=399, col_offset=48), lineno=399, col_offset=32)], [], None, None, lineno=399, col_offset=23), lineno=399, col_offset=16)], [], lineno=398, col_offset=12), FunctionDef('__rdiv__', arguments([Name('self', Param(), lineno=401, col_offset=25), Name('other', Param(), lineno=401, col_offset=30)], None, None, []), [Return(Call(Name('xcomplex', Load(), lineno=402, col_offset=23), [BinOp(Name('other', Load(), lineno=402, col_offset=32), Div(), Call(Name('complex', Load(), lineno=402, col_offset=40), [Name('self', Load(), lineno=402, col_offset=48)], [], None, None, lineno=402, col_offset=40), lineno=402, col_offset=32)], [], None, None, lineno=402, col_offset=23), lineno=402, col_offset=16)], [], lineno=401, col_offset=12), Assign([Name('__truediv__', Store(), lineno=404, col_offset=12)], Name('__div__', Load(), lineno=404, col_offset=26), lineno=404, col_offset=12), Assign([Name('__rtruediv__', Store(), lineno=405, col_offset=12)], Name('__rdiv__', Load(), lineno=405, col_offset=27), lineno=405, col_offset=12), FunctionDef('__floordiv__', arguments([Name('self', Param(), lineno=407, col_offset=29), Name('other', Param(), lineno=407, col_offset=34)], None, None, []), [Return(Call(Name('xcomplex', Load(), lineno=408, col_offset=23), [BinOp(Call(Name('complex', Load(), lineno=408, col_offset=32), [Name('self', Load(), lineno=408, col_offset=40)], [], None, None, lineno=408, col_offset=32), FloorDiv(), Name('other', Load(), lineno=408, col_offset=49), lineno=408, col_offset=32)], [], None, None, lineno=408, col_offset=23), lineno=408, col_offset=16)], [], lineno=407, col_offset=12), FunctionDef('__rfloordiv__', arguments([Name('self', Param(), lineno=410, col_offset=30), Name('other', Param(), lineno=410, col_offset=35)], None, None, []), [Return(Call(Name('xcomplex', Load(), lineno=411, col_offset=23), [BinOp(Name('other', Load(), lineno=411, col_offset=32), FloorDiv(), Call(Name('complex', Load(), lineno=411, col_offset=41), [Name('self', Load(), lineno=411, col_offset=49)], [], None, None, lineno=411, col_offset=41), lineno=411, col_offset=32)], [], None, None, lineno=411, col_offset=23), lineno=411, col_offset=16)], [], lineno=410, col_offset=12), FunctionDef('__pow__', arguments([Name('self', Param(), lineno=413, col_offset=24), Name('other', Param(), lineno=413, col_offset=29)], None, None, []), [Return(Call(Name('xcomplex', Load(), lineno=414, col_offset=23), [BinOp(Call(Name('complex', Load(), lineno=414, col_offset=32), [Name('self', Load(), lineno=414, col_offset=40)], [], None, None, lineno=414, col_offset=32), Pow(), Name('other', Load(), lineno=414, col_offset=49), lineno=414, col_offset=32)], [], None, None, lineno=414, col_offset=23), lineno=414, col_offset=16)], [], lineno=413, col_offset=12), FunctionDef('__rpow__', arguments([Name('self', Param(), lineno=416, col_offset=25), Name('other', Param(), lineno=416, col_offset=30)], None, None, []), [Return(Call(Name('xcomplex', Load(), lineno=417, col_offset=23), [BinOp(Name('other', Load(), lineno=417, col_offset=32), Pow(), Call(Name('complex', Load(), lineno=417, col_offset=41), [Name('self', Load(), lineno=417, col_offset=49)], [], None, None, lineno=417, col_offset=41), lineno=417, col_offset=32)], [], None, None, lineno=417, col_offset=23), lineno=417, col_offset=16)], [], lineno=416, col_offset=12), FunctionDef('__mod__', arguments([Name('self', Param(), lineno=419, col_offset=24), Name('other', Param(), lineno=419, col_offset=29)], None, None, []), [Return(Call(Name('xcomplex', Load(), lineno=420, col_offset=23), [BinOp(Call(Name('complex', Load(), lineno=420, col_offset=32), [Name('self', Load(), lineno=420, col_offset=40)], [], None, None, lineno=420, col_offset=32), Mod(), Name('other', Load(), lineno=420, col_offset=48), lineno=420, col_offset=32)], [], None, None, lineno=420, col_offset=23), lineno=420, col_offset=16)], [], lineno=419, col_offset=12), FunctionDef('__rmod__', arguments([Name('self', Param(), lineno=422, col_offset=25), Name('other', Param(), lineno=422, col_offset=30)], None, None, []), [Return(Call(Name('xcomplex', Load(), lineno=423, col_offset=23), [BinOp(Name('other', Load(), lineno=423, col_offset=32), Mod(), Call(Name('complex', Load(), lineno=423, col_offset=40), [Name('self', Load(), lineno=423, col_offset=48)], [], None, None, lineno=423, col_offset=40), lineno=423, col_offset=32)], [], None, None, lineno=423, col_offset=23), lineno=423, col_offset=16)], [], lineno=422, col_offset=12)], [], lineno=385, col_offset=8), Assign([Name('infix_binops', Store(), lineno=425, col_offset=8)], Tuple([Str('+', lineno=425, col_offset=24), Str('-', lineno=425, col_offset=29), Str('*', lineno=425, col_offset=34), Str('**', lineno=425, col_offset=39), Str('%', lineno=425, col_offset=45), Str('//', lineno=425, col_offset=50), Str('/', lineno=425, col_offset=56)], Load(), lineno=425, col_offset=24), lineno=425, col_offset=8), Assign([Name('xcomplex_values', Store(), lineno=426, col_offset=8)], Tuple([Call(Name('xcomplex', Load(), lineno=426, col_offset=27), [Num(1, lineno=426, col_offset=36)], [], None, None, lineno=426, col_offset=27), Call(Name('xcomplex', Load(), lineno=426, col_offset=40), [Num(123.0, lineno=426, col_offset=49)], [], None, None, lineno=426, col_offset=40), Call(Name('xcomplex', Load(), lineno=427, col_offset=27), [BinOp(Num(-10, lineno=427, col_offset=37), Add(), Num(2j, lineno=427, col_offset=40), lineno=427, col_offset=36)], [], None, None, lineno=427, col_offset=27), Call(Name('xcomplex', Load(), lineno=427, col_offset=45), [BinOp(Num(3, lineno=427, col_offset=54), Add(), Num(187j, lineno=427, col_offset=56), lineno=427, col_offset=54)], [], None, None, lineno=427, col_offset=45), Call(Name('xcomplex', Load(), lineno=428, col_offset=27), [BinOp(Num(3, lineno=428, col_offset=36), Sub(), Num(78j, lineno=428, col_offset=38), lineno=428, col_offset=36)], [], None, None, lineno=428, col_offset=27)], Load(), lineno=426, col_offset=27), lineno=426, col_offset=8), Assign([Name('test_values', Store(), lineno=429, col_offset=8)], Tuple([Num(1, lineno=429, col_offset=23), Num(123.0, lineno=429, col_offset=26), BinOp(Num(10, lineno=429, col_offset=33), Sub(), Num(19j, lineno=429, col_offset=36), lineno=429, col_offset=33), Call(Name('xcomplex', Load(), lineno=429, col_offset=41), [BinOp(Num(1, lineno=429, col_offset=50), Add(), Num(2j, lineno=429, col_offset=52), lineno=429, col_offset=50)], [], None, None, lineno=429, col_offset=41), Call(Name('xcomplex', Load(), lineno=430, col_offset=23), [BinOp(Num(1, lineno=430, col_offset=32), Add(), Num(87j, lineno=430, col_offset=34), lineno=430, col_offset=32)], [], None, None, lineno=430, col_offset=23), Call(Name('xcomplex', Load(), lineno=430, col_offset=40), [BinOp(Num(10, lineno=430, col_offset=49), Add(), Num(90j, lineno=430, col_offset=52), lineno=430, col_offset=49)], [], None, None, lineno=430, col_offset=40)], Load(), lineno=429, col_offset=23), lineno=429, col_offset=8), For(Name('op', Store(), lineno=432, col_offset=12), Name('infix_binops', Load(), lineno=432, col_offset=18), [For(Name('x', Store(), lineno=433, col_offset=16), Name('xcomplex_values', Load(), lineno=433, col_offset=21), [For(Name('y', Store(), lineno=434, col_offset=20), Name('test_values', Load(), lineno=434, col_offset=25), [Assign([Name('a', Store(), lineno=435, col_offset=20)], BinOp(Str('x %s y', lineno=435, col_offset=24), Mod(), Name('op', Load(), lineno=435, col_offset=35), lineno=435, col_offset=24), lineno=435, col_offset=20), Assign([Name('b', Store(), lineno=436, col_offset=20)], BinOp(Str('y %s x', lineno=436, col_offset=24), Mod(), Name('op', Load(), lineno=436, col_offset=35), lineno=436, col_offset=24), lineno=436, col_offset=20), Expr(Call(Attribute(Name('self', Load(), lineno=437, col_offset=20), 'assertTrue', Load(), lineno=437, col_offset=20), [Compare(Call(Name('type', Load(), lineno=437, col_offset=36), [Call(Name('eval', Load(), lineno=437, col_offset=41), [Name('a', Load(), lineno=437, col_offset=46)], [], None, None, lineno=437, col_offset=41)], [], None, None, lineno=437, col_offset=36), [Is(), Is()], [Call(Name('type', Load(), lineno=437, col_offset=53), [Call(Name('eval', Load(), lineno=437, col_offset=58), [Name('b', Load(), lineno=437, col_offset=63)], [], None, None, lineno=437, col_offset=58)], [], None, None, lineno=437, col_offset=53), Name('xcomplex', Load(), lineno=437, col_offset=70)], lineno=437, col_offset=36)], [], None, None, lineno=437, col_offset=20), lineno=437, col_offset=20)], [], lineno=434, col_offset=16)], [], lineno=433, col_offset=12)], [], lineno=432, col_offset=8)], [], lineno=384, col_offset=4), FunctionDef('test_hash', arguments([Name('self', Param(), lineno=439, col_offset=18)], None, None, []), [For(Name('x', Store(), lineno=440, col_offset=12), Call(Name('xrange', Load(), lineno=440, col_offset=17), [Num(-30, lineno=440, col_offset=25), Num(30, lineno=440, col_offset=29)], [], None, None, lineno=440, col_offset=17), [Expr(Call(Attribute(Name('self', Load(), lineno=441, col_offset=12), 'assertEqual', Load(), lineno=441, col_offset=12), [Call(Name('hash', Load(), lineno=441, col_offset=29), [Name('x', Load(), lineno=441, col_offset=34)], [], None, None, lineno=441, col_offset=29), Call(Name('hash', Load(), lineno=441, col_offset=38), [Call(Name('complex', Load(), lineno=441, col_offset=43), [Name('x', Load(), lineno=441, col_offset=51), Num(0, lineno=441, col_offset=54)], [], None, None, lineno=441, col_offset=43)], [], None, None, lineno=441, col_offset=38)], [], None, None, lineno=441, col_offset=12), lineno=441, col_offset=12), AugAssign(Name('x', Store(), lineno=442, col_offset=12), Div(), Num(3.0, lineno=442, col_offset=17), lineno=442, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=443, col_offset=12), 'assertEqual', Load(), lineno=443, col_offset=12), [Call(Name('hash', Load(), lineno=443, col_offset=29), [Name('x', Load(), lineno=443, col_offset=34)], [], None, None, lineno=443, col_offset=29), Call(Name('hash', Load(), lineno=443, col_offset=38), [Call(Name('complex', Load(), lineno=443, col_offset=43), [Name('x', Load(), lineno=443, col_offset=51), Num(0.0, lineno=443, col_offset=54)], [], None, None, lineno=443, col_offset=43)], [], None, None, lineno=443, col_offset=38)], [], None, None, lineno=443, col_offset=12), lineno=443, col_offset=12)], [], lineno=440, col_offset=8)], [], lineno=439, col_offset=4), FunctionDef('test_abs', arguments([Name('self', Param(), lineno=445, col_offset=17)], None, None, []), [Assign([Name('nums', Store(), lineno=446, col_offset=8)], ListComp(Call(Name('complex', Load(), lineno=446, col_offset=16), [BinOp(Name('x', Load(), lineno=446, col_offset=24), Div(), Num(3.0, lineno=446, col_offset=26), lineno=446, col_offset=24), BinOp(Name('y', Load(), lineno=446, col_offset=30), Div(), Num(7.0, lineno=446, col_offset=32), lineno=446, col_offset=30)], [], None, None, lineno=446, col_offset=16), [comprehension(Name('x', Store(), lineno=446, col_offset=40), Call(Name('xrange', Load(), lineno=446, col_offset=45), [Num(-9, lineno=446, col_offset=53), Num(9, lineno=446, col_offset=55)], [], None, None, lineno=446, col_offset=45), []), comprehension(Name('y', Store(), lineno=446, col_offset=62), Call(Name('xrange', Load(), lineno=446, col_offset=67), [Num(-9, lineno=446, col_offset=75), Num(9, lineno=446, col_offset=77)], [], None, None, lineno=446, col_offset=67), [])], lineno=446, col_offset=16), lineno=446, col_offset=8), For(Name('num', Store(), lineno=447, col_offset=12), Name('nums', Load(), lineno=447, col_offset=19), [Expr(Call(Attribute(Name('self', Load(), lineno=448, col_offset=12), 'assertAlmostEqual', Load(), lineno=448, col_offset=12), [BinOp(BinOp(BinOp(Attribute(Name('num', Load(), lineno=448, col_offset=36), 'real', Load(), lineno=448, col_offset=36), Pow(), Num(2, lineno=448, col_offset=46), lineno=448, col_offset=36), Add(), BinOp(Attribute(Name('num', Load(), lineno=448, col_offset=50), 'imag', Load(), lineno=448, col_offset=50), Pow(), Num(2, lineno=448, col_offset=60), lineno=448, col_offset=50), lineno=448, col_offset=36), Pow(), Num(0.5, lineno=448, col_offset=67), lineno=448, col_offset=35), Call(Name('abs', Load(), lineno=448, col_offset=72), [Name('num', Load(), lineno=448, col_offset=76)], [], None, None, lineno=448, col_offset=72)], [], None, None, lineno=448, col_offset=12), lineno=448, col_offset=12)], [], lineno=447, col_offset=8)], [], lineno=445, col_offset=4), FunctionDef('test_repr', arguments([Name('self', Param(), lineno=450, col_offset=18)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=451, col_offset=8), 'assertEqual', Load(), lineno=451, col_offset=8), [Call(Name('repr', Load(), lineno=451, col_offset=25), [BinOp(Num(1, lineno=451, col_offset=30), Add(), Num(6j, lineno=451, col_offset=32), lineno=451, col_offset=30)], [], None, None, lineno=451, col_offset=25), Str('(1+6j)', lineno=451, col_offset=37)], [], None, None, lineno=451, col_offset=8), lineno=451, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=452, col_offset=8), 'assertEqual', Load(), lineno=452, col_offset=8), [Call(Name('repr', Load(), lineno=452, col_offset=25), [BinOp(Num(1, lineno=452, col_offset=30), Sub(), Num(6j, lineno=452, col_offset=32), lineno=452, col_offset=30)], [], None, None, lineno=452, col_offset=25), Str('(1-6j)', lineno=452, col_offset=37)], [], None, None, lineno=452, col_offset=8), lineno=452, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=454, col_offset=8), 'assertNotEqual', Load(), lineno=454, col_offset=8), [Call(Name('repr', Load(), lineno=454, col_offset=28), [UnaryOp(USub(), BinOp(Num(1, lineno=454, col_offset=35), Add(), Num(0j, lineno=454, col_offset=37), lineno=454, col_offset=35), lineno=454, col_offset=33)], [], None, None, lineno=454, col_offset=28), Str('(-1+-0j)', lineno=454, col_offset=43)], [], None, None, lineno=454, col_offset=8), lineno=454, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=456, col_offset=8), 'assertEqual', Load(), lineno=456, col_offset=8), [BinOp(Num(1, lineno=456, col_offset=25), Sub(), Num(6j, lineno=456, col_offset=27), lineno=456, col_offset=25), Call(Name('complex', Load(), lineno=456, col_offset=30), [Call(Name('repr', Load(), lineno=456, col_offset=38), [BinOp(Num(1, lineno=456, col_offset=43), Sub(), Num(6j, lineno=456, col_offset=45), lineno=456, col_offset=43)], [], None, None, lineno=456, col_offset=38)], [], None, None, lineno=456, col_offset=30)], [], None, None, lineno=456, col_offset=8), lineno=456, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=457, col_offset=8), 'assertEqual', Load(), lineno=457, col_offset=8), [BinOp(Num(1, lineno=457, col_offset=25), Add(), Num(6j, lineno=457, col_offset=27), lineno=457, col_offset=25), Call(Name('complex', Load(), lineno=457, col_offset=30), [Call(Name('repr', Load(), lineno=457, col_offset=38), [BinOp(Num(1, lineno=457, col_offset=43), Add(), Num(6j, lineno=457, col_offset=45), lineno=457, col_offset=43)], [], None, None, lineno=457, col_offset=38)], [], None, None, lineno=457, col_offset=30)], [], None, None, lineno=457, col_offset=8), lineno=457, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=458, col_offset=8), 'assertEqual', Load(), lineno=458, col_offset=8), [Num(-6j, lineno=458, col_offset=26), Call(Name('complex', Load(), lineno=458, col_offset=29), [Call(Name('repr', Load(), lineno=458, col_offset=37), [Num(-6j, lineno=458, col_offset=43)], [], None, None, lineno=458, col_offset=37)], [], None, None, lineno=458, col_offset=29)], [], None, None, lineno=458, col_offset=8), lineno=458, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=459, col_offset=8), 'assertEqual', Load(), lineno=459, col_offset=8), [Num(6j, lineno=459, col_offset=25), Call(Name('complex', Load(), lineno=459, col_offset=28), [Call(Name('repr', Load(), lineno=459, col_offset=36), [Num(6j, lineno=459, col_offset=41)], [], None, None, lineno=459, col_offset=36)], [], None, None, lineno=459, col_offset=28)], [], None, None, lineno=459, col_offset=8), lineno=459, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=461, col_offset=8), 'assertEqual', Load(), lineno=461, col_offset=8), [Call(Name('repr', Load(), lineno=461, col_offset=25), [Call(Name('complex', Load(), lineno=461, col_offset=30), [Num(1.0, lineno=461, col_offset=38), Name('INF', Load(), lineno=461, col_offset=42)], [], None, None, lineno=461, col_offset=30)], [], None, None, lineno=461, col_offset=25), Str('(1+infj)', lineno=461, col_offset=49)], [], None, None, lineno=461, col_offset=8), lineno=461, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=462, col_offset=8), 'assertEqual', Load(), lineno=462, col_offset=8), [Call(Name('repr', Load(), lineno=462, col_offset=25), [Call(Name('complex', Load(), lineno=462, col_offset=30), [Num(1.0, lineno=462, col_offset=38), UnaryOp(USub(), Name('INF', Load(), lineno=462, col_offset=43), lineno=462, col_offset=42)], [], None, None, lineno=462, col_offset=30)], [], None, None, lineno=462, col_offset=25), Str('(1-infj)', lineno=462, col_offset=50)], [], None, None, lineno=462, col_offset=8), lineno=462, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=463, col_offset=8), 'assertEqual', Load(), lineno=463, col_offset=8), [Call(Name('repr', Load(), lineno=463, col_offset=25), [Call(Name('complex', Load(), lineno=463, col_offset=30), [Name('INF', Load(), lineno=463, col_offset=38), Num(1, lineno=463, col_offset=43)], [], None, None, lineno=463, col_offset=30)], [], None, None, lineno=463, col_offset=25), Str('(inf+1j)', lineno=463, col_offset=48)], [], None, None, lineno=463, col_offset=8), lineno=463, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=464, col_offset=8), 'assertEqual', Load(), lineno=464, col_offset=8), [Call(Name('repr', Load(), lineno=464, col_offset=25), [Call(Name('complex', Load(), lineno=464, col_offset=30), [UnaryOp(USub(), Name('INF', Load(), lineno=464, col_offset=39), lineno=464, col_offset=38), Name('INF', Load(), lineno=464, col_offset=44)], [], None, None, lineno=464, col_offset=30)], [], None, None, lineno=464, col_offset=25), Str('(-inf+infj)', lineno=464, col_offset=51)], [], None, None, lineno=464, col_offset=8), lineno=464, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=465, col_offset=8), 'assertEqual', Load(), lineno=465, col_offset=8), [Call(Name('repr', Load(), lineno=465, col_offset=25), [Call(Name('complex', Load(), lineno=465, col_offset=30), [Name('NAN', Load(), lineno=465, col_offset=38), Num(1, lineno=465, col_offset=43)], [], None, None, lineno=465, col_offset=30)], [], None, None, lineno=465, col_offset=25), Str('(nan+1j)', lineno=465, col_offset=48)], [], None, None, lineno=465, col_offset=8), lineno=465, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=466, col_offset=8), 'assertEqual', Load(), lineno=466, col_offset=8), [Call(Name('repr', Load(), lineno=466, col_offset=25), [Call(Name('complex', Load(), lineno=466, col_offset=30), [Num(1, lineno=466, col_offset=38), Name('NAN', Load(), lineno=466, col_offset=41)], [], None, None, lineno=466, col_offset=30)], [], None, None, lineno=466, col_offset=25), Str('(1+nanj)', lineno=466, col_offset=48)], [], None, None, lineno=466, col_offset=8), lineno=466, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=467, col_offset=8), 'assertEqual', Load(), lineno=467, col_offset=8), [Call(Name('repr', Load(), lineno=467, col_offset=25), [Call(Name('complex', Load(), lineno=467, col_offset=30), [Name('NAN', Load(), lineno=467, col_offset=38), Name('NAN', Load(), lineno=467, col_offset=43)], [], None, None, lineno=467, col_offset=30)], [], None, None, lineno=467, col_offset=25), Str('(nan+nanj)', lineno=467, col_offset=50)], [], None, None, lineno=467, col_offset=8), lineno=467, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=469, col_offset=8), 'assertEqual', Load(), lineno=469, col_offset=8), [Call(Name('repr', Load(), lineno=469, col_offset=25), [Call(Name('complex', Load(), lineno=469, col_offset=30), [Num(0, lineno=469, col_offset=38), Name('INF', Load(), lineno=469, col_offset=41)], [], None, None, lineno=469, col_offset=30)], [], None, None, lineno=469, col_offset=25), Str('infj', lineno=469, col_offset=48)], [], None, None, lineno=469, col_offset=8), lineno=469, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=470, col_offset=8), 'assertEqual', Load(), lineno=470, col_offset=8), [Call(Name('repr', Load(), lineno=470, col_offset=25), [Call(Name('complex', Load(), lineno=470, col_offset=30), [Num(0, lineno=470, col_offset=38), UnaryOp(USub(), Name('INF', Load(), lineno=470, col_offset=42), lineno=470, col_offset=41)], [], None, None, lineno=470, col_offset=30)], [], None, None, lineno=470, col_offset=25), Str('-infj', lineno=470, col_offset=49)], [], None, None, lineno=470, col_offset=8), lineno=470, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=471, col_offset=8), 'assertEqual', Load(), lineno=471, col_offset=8), [Call(Name('repr', Load(), lineno=471, col_offset=25), [Call(Name('complex', Load(), lineno=471, col_offset=30), [Num(0, lineno=471, col_offset=38), Name('NAN', Load(), lineno=471, col_offset=41)], [], None, None, lineno=471, col_offset=30)], [], None, None, lineno=471, col_offset=25), Str('nanj', lineno=471, col_offset=48)], [], None, None, lineno=471, col_offset=8), lineno=471, col_offset=8)], [], lineno=450, col_offset=4), FunctionDef('test_neg', arguments([Name('self', Param(), lineno=473, col_offset=17)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=474, col_offset=8), 'assertEqual', Load(), lineno=474, col_offset=8), [UnaryOp(USub(), BinOp(Num(1, lineno=474, col_offset=27), Add(), Num(6j, lineno=474, col_offset=29), lineno=474, col_offset=27), lineno=474, col_offset=25), BinOp(Num(-1, lineno=474, col_offset=35), Sub(), Num(6j, lineno=474, col_offset=37), lineno=474, col_offset=34)], [], None, None, lineno=474, col_offset=8), lineno=474, col_offset=8)], [], lineno=473, col_offset=4), FunctionDef('test_file', arguments([Name('self', Param(), lineno=476, col_offset=18)], None, None, []), [Assign([Name('a', Store(), lineno=477, col_offset=8)], BinOp(Num(3.33, lineno=477, col_offset=12), Add(), Num(4.43j, lineno=477, col_offset=17), lineno=477, col_offset=12), lineno=477, col_offset=8), Assign([Name('b', Store(), lineno=478, col_offset=8)], BinOp(Num(5.1, lineno=478, col_offset=12), Add(), Num(2.3j, lineno=478, col_offset=16), lineno=478, col_offset=12), lineno=478, col_offset=8), Assign([Name('fo', Store(), lineno=480, col_offset=8)], Name('None', Load(), lineno=480, col_offset=13), lineno=480, col_offset=8), TryFinally([Assign([Name('fo', Store(), lineno=482, col_offset=12)], Call(Name('open', Load(), lineno=482, col_offset=17), [Attribute(Name('test_support', Load(), lineno=482, col_offset=22), 'TESTFN', Load(), lineno=482, col_offset=22), Str('wb', lineno=482, col_offset=43)], [], None, None, lineno=482, col_offset=17), lineno=482, col_offset=12), Print(Name('fo', Load(), lineno=483, col_offset=20), [Name('a', Load(), lineno=483, col_offset=24), Name('b', Load(), lineno=483, col_offset=27)], True, lineno=483, col_offset=12), Expr(Call(Attribute(Name('fo', Load(), lineno=484, col_offset=12), 'close', Load(), lineno=484, col_offset=12), [], [], None, None, lineno=484, col_offset=12), lineno=484, col_offset=12), Assign([Name('fo', Store(), lineno=485, col_offset=12)], Call(Name('open', Load(), lineno=485, col_offset=17), [Attribute(Name('test_support', Load(), lineno=485, col_offset=22), 'TESTFN', Load(), lineno=485, col_offset=22), Str('rb', lineno=485, col_offset=43)], [], None, None, lineno=485, col_offset=17), lineno=485, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=486, col_offset=12), 'assertEqual', Load(), lineno=486, col_offset=12), [Call(Attribute(Name('fo', Load(), lineno=486, col_offset=29), 'read', Load(), lineno=486, col_offset=29), [], [], None, None, lineno=486, col_offset=29), BinOp(Str('%s %s\n', lineno=486, col_offset=40), Mod(), Tuple([Name('a', Load(), lineno=486, col_offset=53), Name('b', Load(), lineno=486, col_offset=56)], Load(), lineno=486, col_offset=53), lineno=486, col_offset=40)], [], None, None, lineno=486, col_offset=12), lineno=486, col_offset=12)], [If(BoolOp(And(), [Compare(Name('fo', Load(), lineno=488, col_offset=16), [IsNot()], [Name('None', Load(), lineno=488, col_offset=26)], lineno=488, col_offset=16), UnaryOp(Not(), Attribute(Name('fo', Load(), lineno=488, col_offset=41), 'closed', Load(), lineno=488, col_offset=41), lineno=488, col_offset=37)], lineno=488, col_offset=15), [Expr(Call(Attribute(Name('fo', Load(), lineno=489, col_offset=16), 'close', Load(), lineno=489, col_offset=16), [], [], None, None, lineno=489, col_offset=16), lineno=489, col_offset=16)], [], lineno=488, col_offset=12), Expr(Call(Attribute(Name('test_support', Load(), lineno=490, col_offset=12), 'unlink', Load(), lineno=490, col_offset=12), [Attribute(Name('test_support', Load(), lineno=490, col_offset=32), 'TESTFN', Load(), lineno=490, col_offset=32)], [], None, None, lineno=490, col_offset=12), lineno=490, col_offset=12)], lineno=481, col_offset=8)], [], lineno=476, col_offset=4), FunctionDef('test_getnewargs', arguments([Name('self', Param(), lineno=492, col_offset=24)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=493, col_offset=8), 'assertEqual', Load(), lineno=493, col_offset=8), [Call(Attribute(BinOp(Num(1, lineno=493, col_offset=26), Add(), Num(2j, lineno=493, col_offset=28), lineno=493, col_offset=26), '__getnewargs__', Load(), lineno=493, col_offset=26), [], [], None, None, lineno=493, col_offset=26), Tuple([Num(1.0, lineno=493, col_offset=51), Num(2.0, lineno=493, col_offset=56)], Load(), lineno=493, col_offset=51)], [], None, None, lineno=493, col_offset=8), lineno=493, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=494, col_offset=8), 'assertEqual', Load(), lineno=494, col_offset=8), [Call(Attribute(BinOp(Num(1, lineno=494, col_offset=26), Sub(), Num(2j, lineno=494, col_offset=28), lineno=494, col_offset=26), '__getnewargs__', Load(), lineno=494, col_offset=26), [], [], None, None, lineno=494, col_offset=26), Tuple([Num(1.0, lineno=494, col_offset=51), Num(-2.0, lineno=494, col_offset=57)], Load(), lineno=494, col_offset=51)], [], None, None, lineno=494, col_offset=8), lineno=494, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=495, col_offset=8), 'assertEqual', Load(), lineno=495, col_offset=8), [Call(Attribute(Num(2j, lineno=495, col_offset=26), '__getnewargs__', Load(), lineno=495, col_offset=26), [], [], None, None, lineno=495, col_offset=26), Tuple([Num(0.0, lineno=495, col_offset=49), Num(2.0, lineno=495, col_offset=54)], Load(), lineno=495, col_offset=49)], [], None, None, lineno=495, col_offset=8), lineno=495, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=496, col_offset=8), 'assertEqual', Load(), lineno=496, col_offset=8), [Call(Attribute(Num(-0j, lineno=496, col_offset=27), '__getnewargs__', Load(), lineno=496, col_offset=27), [], [], None, None, lineno=496, col_offset=27), Tuple([Num(0.0, lineno=496, col_offset=50), Num(-0.0, lineno=496, col_offset=56)], Load(), lineno=496, col_offset=50)], [], None, None, lineno=496, col_offset=8), lineno=496, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=497, col_offset=8), 'assertEqual', Load(), lineno=497, col_offset=8), [Call(Attribute(Call(Name('complex', Load(), lineno=497, col_offset=25), [Num(0, lineno=497, col_offset=33), Name('INF', Load(), lineno=497, col_offset=36)], [], None, None, lineno=497, col_offset=25), '__getnewargs__', Load(), lineno=497, col_offset=25), [], [], None, None, lineno=497, col_offset=25), Tuple([Num(0.0, lineno=497, col_offset=60), Name('INF', Load(), lineno=497, col_offset=65)], Load(), lineno=497, col_offset=60)], [], None, None, lineno=497, col_offset=8), lineno=497, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=498, col_offset=8), 'assertEqual', Load(), lineno=498, col_offset=8), [Call(Attribute(Call(Name('complex', Load(), lineno=498, col_offset=25), [Name('INF', Load(), lineno=498, col_offset=33), Num(0, lineno=498, col_offset=38)], [], None, None, lineno=498, col_offset=25), '__getnewargs__', Load(), lineno=498, col_offset=25), [], [], None, None, lineno=498, col_offset=25), Tuple([Name('INF', Load(), lineno=498, col_offset=60), Num(0.0, lineno=498, col_offset=65)], Load(), lineno=498, col_offset=60)], [], None, None, lineno=498, col_offset=8), lineno=498, col_offset=8)], [], lineno=492, col_offset=4), If(Call(Attribute(Call(Attribute(Name('float', Load(), lineno=500, col_offset=7), '__getformat__', Load(), lineno=500, col_offset=7), [Str('double', lineno=500, col_offset=27)], [], None, None, lineno=500, col_offset=7), 'startswith', Load(), lineno=500, col_offset=7), [Str('IEEE', lineno=500, col_offset=48)], [], None, None, lineno=500, col_offset=7), [FunctionDef('test_plus_minus_0j', arguments([Name('self', Param(), lineno=501, col_offset=31)], None, None, []), [Assign([Tuple([Name('z1', Store(), lineno=503, col_offset=12), Name('z2', Store(), lineno=503, col_offset=16)], Store(), lineno=503, col_offset=12)], Tuple([Num(0j, lineno=503, col_offset=21), Num(-0j, lineno=503, col_offset=26)], Load(), lineno=503, col_offset=21), lineno=503, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=504, col_offset=12), 'assertEqual', Load(), lineno=504, col_offset=12), [Call(Name('atan2', Load(), lineno=504, col_offset=29), [Attribute(Name('z1', Load(), lineno=504, col_offset=35), 'imag', Load(), lineno=504, col_offset=35), Num(-1.0, lineno=504, col_offset=45)], [], None, None, lineno=504, col_offset=29), Call(Name('atan2', Load(), lineno=504, col_offset=50), [Num(0.0, lineno=504, col_offset=56), Num(-1.0, lineno=504, col_offset=61)], [], None, None, lineno=504, col_offset=50)], [], None, None, lineno=504, col_offset=12), lineno=504, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=505, col_offset=12), 'assertEqual', Load(), lineno=505, col_offset=12), [Call(Name('atan2', Load(), lineno=505, col_offset=29), [Attribute(Name('z2', Load(), lineno=505, col_offset=35), 'imag', Load(), lineno=505, col_offset=35), Num(-1.0, lineno=505, col_offset=45)], [], None, None, lineno=505, col_offset=29), Call(Name('atan2', Load(), lineno=505, col_offset=50), [Num(-0.0, lineno=505, col_offset=57), Num(-1.0, lineno=505, col_offset=62)], [], None, None, lineno=505, col_offset=50)], [], None, None, lineno=505, col_offset=12), lineno=505, col_offset=12)], [], lineno=501, col_offset=8)], [], lineno=500, col_offset=4), FunctionDef('test_overflow', arguments([Name('self', Param(), lineno=509, col_offset=22)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=510, col_offset=8), 'assertEqual', Load(), lineno=510, col_offset=8), [Call(Name('complex', Load(), lineno=510, col_offset=25), [Str('1e500', lineno=510, col_offset=33)], [], None, None, lineno=510, col_offset=25), Call(Name('complex', Load(), lineno=510, col_offset=43), [Name('INF', Load(), lineno=510, col_offset=51), Num(0.0, lineno=510, col_offset=56)], [], None, None, lineno=510, col_offset=43)], [], None, None, lineno=510, col_offset=8), lineno=510, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=511, col_offset=8), 'assertEqual', Load(), lineno=511, col_offset=8), [Call(Name('complex', Load(), lineno=511, col_offset=25), [Str('-1e500j', lineno=511, col_offset=33)], [], None, None, lineno=511, col_offset=25), Call(Name('complex', Load(), lineno=511, col_offset=45), [Num(0.0, lineno=511, col_offset=53), UnaryOp(USub(), Name('INF', Load(), lineno=511, col_offset=59), lineno=511, col_offset=58)], [], None, None, lineno=511, col_offset=45)], [], None, None, lineno=511, col_offset=8), lineno=511, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=512, col_offset=8), 'assertEqual', Load(), lineno=512, col_offset=8), [Call(Name('complex', Load(), lineno=512, col_offset=25), [Str('-1e500+1.8e308j', lineno=512, col_offset=33)], [], None, None, lineno=512, col_offset=25), Call(Name('complex', Load(), lineno=512, col_offset=53), [UnaryOp(USub(), Name('INF', Load(), lineno=512, col_offset=62), lineno=512, col_offset=61), Name('INF', Load(), lineno=512, col_offset=67)], [], None, None, lineno=512, col_offset=53)], [], None, None, lineno=512, col_offset=8), lineno=512, col_offset=8)], [Call(Attribute(Name('unittest', Load(), lineno=507, col_offset=5), 'skipUnless', Load(), lineno=507, col_offset=5), [Call(Attribute(Call(Attribute(Name('float', Load(), lineno=507, col_offset=25), '__getformat__', Load(), lineno=507, col_offset=25), [Str('double', lineno=507, col_offset=45)], [], None, None, lineno=507, col_offset=25), 'startswith', Load(), lineno=507, col_offset=25), [Str('IEEE', lineno=507, col_offset=66)], [], None, None, lineno=507, col_offset=25), Str('test requires IEEE 754 doubles', lineno=508, col_offset=25)], [], None, None, lineno=507, col_offset=5)], lineno=507, col_offset=4), FunctionDef('test_repr_roundtrip', arguments([Name('self', Param(), lineno=516, col_offset=28)], None, None, []), [Assign([Name('vals', Store(), lineno=517, col_offset=8)], List([Num(0.0, lineno=517, col_offset=16), Num(0.0, lineno=517, col_offset=21), Num(1e-315, lineno=517, col_offset=29), Num(1e-200, lineno=517, col_offset=37), Num(0.0123, lineno=517, col_offset=45), Num(3.1415, lineno=517, col_offset=53), Num(1e+50, lineno=517, col_offset=61), Name('INF', Load(), lineno=517, col_offset=67), Name('NAN', Load(), lineno=517, col_offset=72)], Load(), lineno=517, col_offset=15), lineno=517, col_offset=8), AugAssign(Name('vals', Store(), lineno=518, col_offset=8), Add(), ListComp(UnaryOp(USub(), Name('v', Load(), lineno=518, col_offset=18), lineno=518, col_offset=17), [comprehension(Name('v', Store(), lineno=518, col_offset=24), Name('vals', Load(), lineno=518, col_offset=29), [])], lineno=518, col_offset=17), lineno=518, col_offset=8), For(Name('x', Store(), lineno=522, col_offset=12), Name('vals', Load(), lineno=522, col_offset=17), [For(Name('y', Store(), lineno=523, col_offset=16), Name('vals', Load(), lineno=523, col_offset=21), [Assign([Name('z', Store(), lineno=524, col_offset=16)], Call(Name('complex', Load(), lineno=524, col_offset=20), [Name('x', Load(), lineno=524, col_offset=28), Name('y', Load(), lineno=524, col_offset=31)], [], None, None, lineno=524, col_offset=20), lineno=524, col_offset=16), Assign([Name('roundtrip', Store(), lineno=525, col_offset=16)], Call(Name('complex', Load(), lineno=525, col_offset=28), [Call(Name('repr', Load(), lineno=525, col_offset=36), [Name('z', Load(), lineno=525, col_offset=41)], [], None, None, lineno=525, col_offset=36)], [], None, None, lineno=525, col_offset=28), lineno=525, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=526, col_offset=16), 'assertFloatsAreIdentical', Load(), lineno=526, col_offset=16), [Attribute(Name('z', Load(), lineno=526, col_offset=46), 'real', Load(), lineno=526, col_offset=46), Attribute(Name('roundtrip', Load(), lineno=526, col_offset=54), 'real', Load(), lineno=526, col_offset=54)], [], None, None, lineno=526, col_offset=16), lineno=526, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=527, col_offset=16), 'assertFloatsAreIdentical', Load(), lineno=527, col_offset=16), [Attribute(Name('z', Load(), lineno=527, col_offset=46), 'imag', Load(), lineno=527, col_offset=46), Attribute(Name('roundtrip', Load(), lineno=527, col_offset=54), 'imag', Load(), lineno=527, col_offset=54)], [], None, None, lineno=527, col_offset=16), lineno=527, col_offset=16)], [], lineno=523, col_offset=12)], [], lineno=522, col_offset=8), Assign([Tuple([Name('inf', Store(), lineno=531, col_offset=8), Name('nan', Store(), lineno=531, col_offset=13)], Store(), lineno=531, col_offset=8)], Tuple([Call(Name('float', Load(), lineno=531, col_offset=19), [Str('inf', lineno=531, col_offset=25)], [], None, None, lineno=531, col_offset=19), Call(Name('float', Load(), lineno=531, col_offset=33), [Str('nan', lineno=531, col_offset=39)], [], None, None, lineno=531, col_offset=33)], Load(), lineno=531, col_offset=19), lineno=531, col_offset=8), Assign([Tuple([Name('infj', Store(), lineno=532, col_offset=8), Name('nanj', Store(), lineno=532, col_offset=14)], Store(), lineno=532, col_offset=8)], Tuple([Call(Name('complex', Load(), lineno=532, col_offset=21), [Num(0.0, lineno=532, col_offset=29), Name('inf', Load(), lineno=532, col_offset=34)], [], None, None, lineno=532, col_offset=21), Call(Name('complex', Load(), lineno=532, col_offset=40), [Num(0.0, lineno=532, col_offset=48), Name('nan', Load(), lineno=532, col_offset=53)], [], None, None, lineno=532, col_offset=40)], Load(), lineno=532, col_offset=21), lineno=532, col_offset=8), For(Name('x', Store(), lineno=533, col_offset=12), Name('vals', Load(), lineno=533, col_offset=17), [For(Name('y', Store(), lineno=534, col_offset=16), Name('vals', Load(), lineno=534, col_offset=21), [Assign([Name('z', Store(), lineno=535, col_offset=16)], Call(Name('complex', Load(), lineno=535, col_offset=20), [Name('x', Load(), lineno=535, col_offset=28), Name('y', Load(), lineno=535, col_offset=31)], [], None, None, lineno=535, col_offset=20), lineno=535, col_offset=16), Assign([Name('roundtrip', Store(), lineno=536, col_offset=16)], Call(Name('eval', Load(), lineno=536, col_offset=28), [Call(Name('repr', Load(), lineno=536, col_offset=33), [Name('z', Load(), lineno=536, col_offset=38)], [], None, None, lineno=536, col_offset=33)], [], None, None, lineno=536, col_offset=28), lineno=536, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=538, col_offset=16), 'assertFloatsAreIdentical', Load(), lineno=538, col_offset=16), [BinOp(Num(0.0, lineno=538, col_offset=46), Add(), Attribute(Name('z', Load(), lineno=538, col_offset=52), 'real', Load(), lineno=538, col_offset=52), lineno=538, col_offset=46), BinOp(Num(0.0, lineno=539, col_offset=46), Add(), Attribute(Name('roundtrip', Load(), lineno=539, col_offset=52), 'real', Load(), lineno=539, col_offset=52), lineno=539, col_offset=46)], [], None, None, lineno=538, col_offset=16), lineno=538, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=540, col_offset=16), 'assertFloatsAreIdentical', Load(), lineno=540, col_offset=16), [BinOp(Num(0.0, lineno=540, col_offset=46), Add(), Attribute(Name('z', Load(), lineno=540, col_offset=52), 'imag', Load(), lineno=540, col_offset=52), lineno=540, col_offset=46), BinOp(Num(0.0, lineno=541, col_offset=46), Add(), Attribute(Name('roundtrip', Load(), lineno=541, col_offset=52), 'imag', Load(), lineno=541, col_offset=52), lineno=541, col_offset=46)], [], None, None, lineno=540, col_offset=16), lineno=540, col_offset=16)], [], lineno=534, col_offset=12)], [], lineno=533, col_offset=8)], [Call(Attribute(Name('unittest', Load(), lineno=514, col_offset=5), 'skipUnless', Load(), lineno=514, col_offset=5), [Call(Attribute(Call(Attribute(Name('float', Load(), lineno=514, col_offset=25), '__getformat__', Load(), lineno=514, col_offset=25), [Str('double', lineno=514, col_offset=45)], [], None, None, lineno=514, col_offset=25), 'startswith', Load(), lineno=514, col_offset=25), [Str('IEEE', lineno=514, col_offset=66)], [], None, None, lineno=514, col_offset=25), Str('test requires IEEE 754 doubles', lineno=515, col_offset=25)], [], None, None, lineno=514, col_offset=5)], lineno=514, col_offset=4), FunctionDef('test_format', arguments([Name('self', Param(), lineno=543, col_offset=20)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=545, col_offset=8), 'assertEqual', Load(), lineno=545, col_offset=8), [Call(Name('format', Load(), lineno=545, col_offset=25), [BinOp(Num(1, lineno=545, col_offset=32), Add(), Num(3j, lineno=545, col_offset=34), lineno=545, col_offset=32), Str('', lineno=545, col_offset=38)], [], None, None, lineno=545, col_offset=25), Call(Name('str', Load(), lineno=545, col_offset=43), [BinOp(Num(1, lineno=545, col_offset=47), Add(), Num(3j, lineno=545, col_offset=49), lineno=545, col_offset=47)], [], None, None, lineno=545, col_offset=43)], [], None, None, lineno=545, col_offset=8), lineno=545, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=546, col_offset=8), 'assertEqual', Load(), lineno=546, col_offset=8), [Call(Name('format', Load(), lineno=546, col_offset=25), [BinOp(Num(1.5, lineno=546, col_offset=32), Add(), Num(3.5j, lineno=546, col_offset=36), lineno=546, col_offset=32), Str('', lineno=546, col_offset=42)], [], None, None, lineno=546, col_offset=25), Call(Name('str', Load(), lineno=546, col_offset=47), [BinOp(Num(1.5, lineno=546, col_offset=51), Add(), Num(3.5j, lineno=546, col_offset=55), lineno=546, col_offset=51)], [], None, None, lineno=546, col_offset=47)], [], None, None, lineno=546, col_offset=8), lineno=546, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=547, col_offset=8), 'assertEqual', Load(), lineno=547, col_offset=8), [Call(Name('format', Load(), lineno=547, col_offset=25), [Num(3j, lineno=547, col_offset=32), Str('', lineno=547, col_offset=36)], [], None, None, lineno=547, col_offset=25), Call(Name('str', Load(), lineno=547, col_offset=41), [Num(3j, lineno=547, col_offset=45)], [], None, None, lineno=547, col_offset=41)], [], None, None, lineno=547, col_offset=8), lineno=547, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=548, col_offset=8), 'assertEqual', Load(), lineno=548, col_offset=8), [Call(Name('format', Load(), lineno=548, col_offset=25), [Num(3.2j, lineno=548, col_offset=32), Str('', lineno=548, col_offset=38)], [], None, None, lineno=548, col_offset=25), Call(Name('str', Load(), lineno=548, col_offset=43), [Num(3.2j, lineno=548, col_offset=47)], [], None, None, lineno=548, col_offset=43)], [], None, None, lineno=548, col_offset=8), lineno=548, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=549, col_offset=8), 'assertEqual', Load(), lineno=549, col_offset=8), [Call(Name('format', Load(), lineno=549, col_offset=25), [BinOp(Num(3, lineno=549, col_offset=32), Add(), Num(0j, lineno=549, col_offset=34), lineno=549, col_offset=32), Str('', lineno=549, col_offset=38)], [], None, None, lineno=549, col_offset=25), Call(Name('str', Load(), lineno=549, col_offset=43), [BinOp(Num(3, lineno=549, col_offset=47), Add(), Num(0j, lineno=549, col_offset=49), lineno=549, col_offset=47)], [], None, None, lineno=549, col_offset=43)], [], None, None, lineno=549, col_offset=8), lineno=549, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=550, col_offset=8), 'assertEqual', Load(), lineno=550, col_offset=8), [Call(Name('format', Load(), lineno=550, col_offset=25), [BinOp(Num(3.2, lineno=550, col_offset=32), Add(), Num(0j, lineno=550, col_offset=36), lineno=550, col_offset=32), Str('', lineno=550, col_offset=40)], [], None, None, lineno=550, col_offset=25), Call(Name('str', Load(), lineno=550, col_offset=45), [BinOp(Num(3.2, lineno=550, col_offset=49), Add(), Num(0j, lineno=550, col_offset=53), lineno=550, col_offset=49)], [], None, None, lineno=550, col_offset=45)], [], None, None, lineno=550, col_offset=8), lineno=550, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=554, col_offset=8), 'assertEqual', Load(), lineno=554, col_offset=8), [Call(Name('format', Load(), lineno=554, col_offset=25), [BinOp(Num(3.2, lineno=554, col_offset=32), Add(), Num(0j, lineno=554, col_offset=36), lineno=554, col_offset=32), Str('-', lineno=554, col_offset=40)], [], None, None, lineno=554, col_offset=25), Call(Name('str', Load(), lineno=554, col_offset=46), [BinOp(Num(3.2, lineno=554, col_offset=50), Add(), Num(0j, lineno=554, col_offset=54), lineno=554, col_offset=50)], [], None, None, lineno=554, col_offset=46)], [], None, None, lineno=554, col_offset=8), lineno=554, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=555, col_offset=8), 'assertEqual', Load(), lineno=555, col_offset=8), [Call(Name('format', Load(), lineno=555, col_offset=25), [BinOp(Num(3.2, lineno=555, col_offset=32), Add(), Num(0j, lineno=555, col_offset=36), lineno=555, col_offset=32), Str('<', lineno=555, col_offset=40)], [], None, None, lineno=555, col_offset=25), Call(Name('str', Load(), lineno=555, col_offset=46), [BinOp(Num(3.2, lineno=555, col_offset=50), Add(), Num(0j, lineno=555, col_offset=54), lineno=555, col_offset=50)], [], None, None, lineno=555, col_offset=46)], [], None, None, lineno=555, col_offset=8), lineno=555, col_offset=8), Assign([Name('z', Store(), lineno=556, col_offset=8)], BinOp(BinOp(Num(4, lineno=556, col_offset=12), Div(), Num(7.0, lineno=556, col_offset=14), lineno=556, col_offset=12), Sub(), BinOp(Num(100j, lineno=556, col_offset=19), Div(), Num(7.0, lineno=556, col_offset=24), lineno=556, col_offset=19), lineno=556, col_offset=12), lineno=556, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=557, col_offset=8), 'assertEqual', Load(), lineno=557, col_offset=8), [Call(Name('format', Load(), lineno=557, col_offset=25), [Name('z', Load(), lineno=557, col_offset=32), Str('', lineno=557, col_offset=35)], [], None, None, lineno=557, col_offset=25), Call(Name('str', Load(), lineno=557, col_offset=40), [Name('z', Load(), lineno=557, col_offset=44)], [], None, None, lineno=557, col_offset=40)], [], None, None, lineno=557, col_offset=8), lineno=557, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=558, col_offset=8), 'assertEqual', Load(), lineno=558, col_offset=8), [Call(Name('format', Load(), lineno=558, col_offset=25), [Name('z', Load(), lineno=558, col_offset=32), Str('-', lineno=558, col_offset=35)], [], None, None, lineno=558, col_offset=25), Call(Name('str', Load(), lineno=558, col_offset=41), [Name('z', Load(), lineno=558, col_offset=45)], [], None, None, lineno=558, col_offset=41)], [], None, None, lineno=558, col_offset=8), lineno=558, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=559, col_offset=8), 'assertEqual', Load(), lineno=559, col_offset=8), [Call(Name('format', Load(), lineno=559, col_offset=25), [Name('z', Load(), lineno=559, col_offset=32), Str('<', lineno=559, col_offset=35)], [], None, None, lineno=559, col_offset=25), Call(Name('str', Load(), lineno=559, col_offset=41), [Name('z', Load(), lineno=559, col_offset=45)], [], None, None, lineno=559, col_offset=41)], [], None, None, lineno=559, col_offset=8), lineno=559, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=560, col_offset=8), 'assertEqual', Load(), lineno=560, col_offset=8), [Call(Name('format', Load(), lineno=560, col_offset=25), [Name('z', Load(), lineno=560, col_offset=32), Str('10', lineno=560, col_offset=35)], [], None, None, lineno=560, col_offset=25), Call(Name('str', Load(), lineno=560, col_offset=42), [Name('z', Load(), lineno=560, col_offset=46)], [], None, None, lineno=560, col_offset=42)], [], None, None, lineno=560, col_offset=8), lineno=560, col_offset=8), Assign([Name('z', Store(), lineno=561, col_offset=8)], Call(Name('complex', Load(), lineno=561, col_offset=12), [Num(0.0, lineno=561, col_offset=20), Num(3.0, lineno=561, col_offset=25)], [], None, None, lineno=561, col_offset=12), lineno=561, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=562, col_offset=8), 'assertEqual', Load(), lineno=562, col_offset=8), [Call(Name('format', Load(), lineno=562, col_offset=25), [Name('z', Load(), lineno=562, col_offset=32), Str('', lineno=562, col_offset=35)], [], None, None, lineno=562, col_offset=25), Call(Name('str', Load(), lineno=562, col_offset=40), [Name('z', Load(), lineno=562, col_offset=44)], [], None, None, lineno=562, col_offset=40)], [], None, None, lineno=562, col_offset=8), lineno=562, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=563, col_offset=8), 'assertEqual', Load(), lineno=563, col_offset=8), [Call(Name('format', Load(), lineno=563, col_offset=25), [Name('z', Load(), lineno=563, col_offset=32), Str('-', lineno=563, col_offset=35)], [], None, None, lineno=563, col_offset=25), Call(Name('str', Load(), lineno=563, col_offset=41), [Name('z', Load(), lineno=563, col_offset=45)], [], None, None, lineno=563, col_offset=41)], [], None, None, lineno=563, col_offset=8), lineno=563, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=564, col_offset=8), 'assertEqual', Load(), lineno=564, col_offset=8), [Call(Name('format', Load(), lineno=564, col_offset=25), [Name('z', Load(), lineno=564, col_offset=32), Str('<', lineno=564, col_offset=35)], [], None, None, lineno=564, col_offset=25), Call(Name('str', Load(), lineno=564, col_offset=41), [Name('z', Load(), lineno=564, col_offset=45)], [], None, None, lineno=564, col_offset=41)], [], None, None, lineno=564, col_offset=8), lineno=564, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=565, col_offset=8), 'assertEqual', Load(), lineno=565, col_offset=8), [Call(Name('format', Load(), lineno=565, col_offset=25), [Name('z', Load(), lineno=565, col_offset=32), Str('2', lineno=565, col_offset=35)], [], None, None, lineno=565, col_offset=25), Call(Name('str', Load(), lineno=565, col_offset=41), [Name('z', Load(), lineno=565, col_offset=45)], [], None, None, lineno=565, col_offset=41)], [], None, None, lineno=565, col_offset=8), lineno=565, col_offset=8), Assign([Name('z', Store(), lineno=566, col_offset=8)], Call(Name('complex', Load(), lineno=566, col_offset=12), [Num(-0.0, lineno=566, col_offset=21), Num(2.0, lineno=566, col_offset=26)], [], None, None, lineno=566, col_offset=12), lineno=566, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=567, col_offset=8), 'assertEqual', Load(), lineno=567, col_offset=8), [Call(Name('format', Load(), lineno=567, col_offset=25), [Name('z', Load(), lineno=567, col_offset=32), Str('', lineno=567, col_offset=35)], [], None, None, lineno=567, col_offset=25), Call(Name('str', Load(), lineno=567, col_offset=40), [Name('z', Load(), lineno=567, col_offset=44)], [], None, None, lineno=567, col_offset=40)], [], None, None, lineno=567, col_offset=8), lineno=567, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=568, col_offset=8), 'assertEqual', Load(), lineno=568, col_offset=8), [Call(Name('format', Load(), lineno=568, col_offset=25), [Name('z', Load(), lineno=568, col_offset=32), Str('-', lineno=568, col_offset=35)], [], None, None, lineno=568, col_offset=25), Call(Name('str', Load(), lineno=568, col_offset=41), [Name('z', Load(), lineno=568, col_offset=45)], [], None, None, lineno=568, col_offset=41)], [], None, None, lineno=568, col_offset=8), lineno=568, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=569, col_offset=8), 'assertEqual', Load(), lineno=569, col_offset=8), [Call(Name('format', Load(), lineno=569, col_offset=25), [Name('z', Load(), lineno=569, col_offset=32), Str('<', lineno=569, col_offset=35)], [], None, None, lineno=569, col_offset=25), Call(Name('str', Load(), lineno=569, col_offset=41), [Name('z', Load(), lineno=569, col_offset=45)], [], None, None, lineno=569, col_offset=41)], [], None, None, lineno=569, col_offset=8), lineno=569, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=570, col_offset=8), 'assertEqual', Load(), lineno=570, col_offset=8), [Call(Name('format', Load(), lineno=570, col_offset=25), [Name('z', Load(), lineno=570, col_offset=32), Str('3', lineno=570, col_offset=35)], [], None, None, lineno=570, col_offset=25), Call(Name('str', Load(), lineno=570, col_offset=41), [Name('z', Load(), lineno=570, col_offset=45)], [], None, None, lineno=570, col_offset=41)], [], None, None, lineno=570, col_offset=8), lineno=570, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=572, col_offset=8), 'assertEqual', Load(), lineno=572, col_offset=8), [Call(Name('format', Load(), lineno=572, col_offset=25), [BinOp(Num(1, lineno=572, col_offset=32), Add(), Num(3j, lineno=572, col_offset=34), lineno=572, col_offset=32), Str('g', lineno=572, col_offset=38)], [], None, None, lineno=572, col_offset=25), Str('1+3j', lineno=572, col_offset=44)], [], None, None, lineno=572, col_offset=8), lineno=572, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=573, col_offset=8), 'assertEqual', Load(), lineno=573, col_offset=8), [Call(Name('format', Load(), lineno=573, col_offset=25), [Num(3j, lineno=573, col_offset=32), Str('g', lineno=573, col_offset=36)], [], None, None, lineno=573, col_offset=25), Str('0+3j', lineno=573, col_offset=42)], [], None, None, lineno=573, col_offset=8), lineno=573, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=574, col_offset=8), 'assertEqual', Load(), lineno=574, col_offset=8), [Call(Name('format', Load(), lineno=574, col_offset=25), [BinOp(Num(1.5, lineno=574, col_offset=32), Add(), Num(3.5j, lineno=574, col_offset=36), lineno=574, col_offset=32), Str('g', lineno=574, col_offset=42)], [], None, None, lineno=574, col_offset=25), Str('1.5+3.5j', lineno=574, col_offset=48)], [], None, None, lineno=574, col_offset=8), lineno=574, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=576, col_offset=8), 'assertEqual', Load(), lineno=576, col_offset=8), [Call(Name('format', Load(), lineno=576, col_offset=25), [BinOp(Num(1.5, lineno=576, col_offset=32), Add(), Num(3.5j, lineno=576, col_offset=36), lineno=576, col_offset=32), Str('+g', lineno=576, col_offset=42)], [], None, None, lineno=576, col_offset=25), Str('+1.5+3.5j', lineno=576, col_offset=49)], [], None, None, lineno=576, col_offset=8), lineno=576, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=577, col_offset=8), 'assertEqual', Load(), lineno=577, col_offset=8), [Call(Name('format', Load(), lineno=577, col_offset=25), [BinOp(Num(1.5, lineno=577, col_offset=32), Sub(), Num(3.5j, lineno=577, col_offset=36), lineno=577, col_offset=32), Str('+g', lineno=577, col_offset=42)], [], None, None, lineno=577, col_offset=25), Str('+1.5-3.5j', lineno=577, col_offset=49)], [], None, None, lineno=577, col_offset=8), lineno=577, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=578, col_offset=8), 'assertEqual', Load(), lineno=578, col_offset=8), [Call(Name('format', Load(), lineno=578, col_offset=25), [BinOp(Num(1.5, lineno=578, col_offset=32), Sub(), Num(3.5j, lineno=578, col_offset=36), lineno=578, col_offset=32), Str('-g', lineno=578, col_offset=42)], [], None, None, lineno=578, col_offset=25), Str('1.5-3.5j', lineno=578, col_offset=49)], [], None, None, lineno=578, col_offset=8), lineno=578, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=579, col_offset=8), 'assertEqual', Load(), lineno=579, col_offset=8), [Call(Name('format', Load(), lineno=579, col_offset=25), [BinOp(Num(1.5, lineno=579, col_offset=32), Add(), Num(3.5j, lineno=579, col_offset=36), lineno=579, col_offset=32), Str(' g', lineno=579, col_offset=42)], [], None, None, lineno=579, col_offset=25), Str(' 1.5+3.5j', lineno=579, col_offset=49)], [], None, None, lineno=579, col_offset=8), lineno=579, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=580, col_offset=8), 'assertEqual', Load(), lineno=580, col_offset=8), [Call(Name('format', Load(), lineno=580, col_offset=25), [BinOp(Num(1.5, lineno=580, col_offset=32), Sub(), Num(3.5j, lineno=580, col_offset=36), lineno=580, col_offset=32), Str(' g', lineno=580, col_offset=42)], [], None, None, lineno=580, col_offset=25), Str(' 1.5-3.5j', lineno=580, col_offset=49)], [], None, None, lineno=580, col_offset=8), lineno=580, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=581, col_offset=8), 'assertEqual', Load(), lineno=581, col_offset=8), [Call(Name('format', Load(), lineno=581, col_offset=25), [BinOp(Num(-1.5, lineno=581, col_offset=33), Add(), Num(3.5j, lineno=581, col_offset=37), lineno=581, col_offset=32), Str(' g', lineno=581, col_offset=43)], [], None, None, lineno=581, col_offset=25), Str('-1.5+3.5j', lineno=581, col_offset=50)], [], None, None, lineno=581, col_offset=8), lineno=581, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=582, col_offset=8), 'assertEqual', Load(), lineno=582, col_offset=8), [Call(Name('format', Load(), lineno=582, col_offset=25), [BinOp(Num(-1.5, lineno=582, col_offset=33), Sub(), Num(3.5j, lineno=582, col_offset=37), lineno=582, col_offset=32), Str(' g', lineno=582, col_offset=43)], [], None, None, lineno=582, col_offset=25), Str('-1.5-3.5j', lineno=582, col_offset=50)], [], None, None, lineno=582, col_offset=8), lineno=582, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=584, col_offset=8), 'assertEqual', Load(), lineno=584, col_offset=8), [Call(Name('format', Load(), lineno=584, col_offset=25), [BinOp(Num(-1.5, lineno=584, col_offset=33), Sub(), Num(3.5e-20j, lineno=584, col_offset=37), lineno=584, col_offset=32), Str('g', lineno=584, col_offset=47)], [], None, None, lineno=584, col_offset=25), Str('-1.5-3.5e-20j', lineno=584, col_offset=53)], [], None, None, lineno=584, col_offset=8), lineno=584, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=585, col_offset=8), 'assertEqual', Load(), lineno=585, col_offset=8), [Call(Name('format', Load(), lineno=585, col_offset=25), [BinOp(Num(-1.5, lineno=585, col_offset=33), Sub(), Num(3.5j, lineno=585, col_offset=37), lineno=585, col_offset=32), Str('f', lineno=585, col_offset=43)], [], None, None, lineno=585, col_offset=25), Str('-1.500000-3.500000j', lineno=585, col_offset=49)], [], None, None, lineno=585, col_offset=8), lineno=585, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=586, col_offset=8), 'assertEqual', Load(), lineno=586, col_offset=8), [Call(Name('format', Load(), lineno=586, col_offset=25), [BinOp(Num(-1.5, lineno=586, col_offset=33), Sub(), Num(3.5j, lineno=586, col_offset=37), lineno=586, col_offset=32), Str('F', lineno=586, col_offset=43)], [], None, None, lineno=586, col_offset=25), Str('-1.500000-3.500000j', lineno=586, col_offset=49)], [], None, None, lineno=586, col_offset=8), lineno=586, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=587, col_offset=8), 'assertEqual', Load(), lineno=587, col_offset=8), [Call(Name('format', Load(), lineno=587, col_offset=25), [BinOp(Num(-1.5, lineno=587, col_offset=33), Sub(), Num(3.5j, lineno=587, col_offset=37), lineno=587, col_offset=32), Str('e', lineno=587, col_offset=43)], [], None, None, lineno=587, col_offset=25), Str('-1.500000e+00-3.500000e+00j', lineno=587, col_offset=49)], [], None, None, lineno=587, col_offset=8), lineno=587, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=588, col_offset=8), 'assertEqual', Load(), lineno=588, col_offset=8), [Call(Name('format', Load(), lineno=588, col_offset=25), [BinOp(Num(-1.5, lineno=588, col_offset=33), Sub(), Num(3.5j, lineno=588, col_offset=37), lineno=588, col_offset=32), Str('.2e', lineno=588, col_offset=43)], [], None, None, lineno=588, col_offset=25), Str('-1.50e+00-3.50e+00j', lineno=588, col_offset=51)], [], None, None, lineno=588, col_offset=8), lineno=588, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=589, col_offset=8), 'assertEqual', Load(), lineno=589, col_offset=8), [Call(Name('format', Load(), lineno=589, col_offset=25), [BinOp(Num(-1.5, lineno=589, col_offset=33), Sub(), Num(3.5j, lineno=589, col_offset=37), lineno=589, col_offset=32), Str('.2E', lineno=589, col_offset=43)], [], None, None, lineno=589, col_offset=25), Str('-1.50E+00-3.50E+00j', lineno=589, col_offset=51)], [], None, None, lineno=589, col_offset=8), lineno=589, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=590, col_offset=8), 'assertEqual', Load(), lineno=590, col_offset=8), [Call(Name('format', Load(), lineno=590, col_offset=25), [BinOp(Num(-15000000000.0, lineno=590, col_offset=33), Sub(), Num(350000j, lineno=590, col_offset=40), lineno=590, col_offset=32), Str('.2G', lineno=590, col_offset=48)], [], None, None, lineno=590, col_offset=25), Str('-1.5E+10-3.5E+05j', lineno=590, col_offset=56)], [], None, None, lineno=590, col_offset=8), lineno=590, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=592, col_offset=8), 'assertEqual', Load(), lineno=592, col_offset=8), [Call(Name('format', Load(), lineno=592, col_offset=25), [BinOp(Num(1.5, lineno=592, col_offset=32), Add(), Num(3j, lineno=592, col_offset=36), lineno=592, col_offset=32), Str('<20g', lineno=592, col_offset=40)], [], None, None, lineno=592, col_offset=25), Str('1.5+3j              ', lineno=592, col_offset=50)], [], None, None, lineno=592, col_offset=8), lineno=592, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=593, col_offset=8), 'assertEqual', Load(), lineno=593, col_offset=8), [Call(Name('format', Load(), lineno=593, col_offset=25), [BinOp(Num(1.5, lineno=593, col_offset=32), Add(), Num(3j, lineno=593, col_offset=36), lineno=593, col_offset=32), Str('*<20g', lineno=593, col_offset=40)], [], None, None, lineno=593, col_offset=25), Str('1.5+3j**************', lineno=593, col_offset=50)], [], None, None, lineno=593, col_offset=8), lineno=593, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=594, col_offset=8), 'assertEqual', Load(), lineno=594, col_offset=8), [Call(Name('format', Load(), lineno=594, col_offset=25), [BinOp(Num(1.5, lineno=594, col_offset=32), Add(), Num(3j, lineno=594, col_offset=36), lineno=594, col_offset=32), Str('>20g', lineno=594, col_offset=40)], [], None, None, lineno=594, col_offset=25), Str('              1.5+3j', lineno=594, col_offset=50)], [], None, None, lineno=594, col_offset=8), lineno=594, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=595, col_offset=8), 'assertEqual', Load(), lineno=595, col_offset=8), [Call(Name('format', Load(), lineno=595, col_offset=25), [BinOp(Num(1.5, lineno=595, col_offset=32), Add(), Num(3j, lineno=595, col_offset=36), lineno=595, col_offset=32), Str('^20g', lineno=595, col_offset=40)], [], None, None, lineno=595, col_offset=25), Str('       1.5+3j       ', lineno=595, col_offset=50)], [], None, None, lineno=595, col_offset=8), lineno=595, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=596, col_offset=8), 'assertEqual', Load(), lineno=596, col_offset=8), [Call(Name('format', Load(), lineno=596, col_offset=25), [BinOp(Num(1.5, lineno=596, col_offset=32), Add(), Num(3j, lineno=596, col_offset=36), lineno=596, col_offset=32), Str('<20', lineno=596, col_offset=40)], [], None, None, lineno=596, col_offset=25), Str('(1.5+3j)            ', lineno=596, col_offset=50)], [], None, None, lineno=596, col_offset=8), lineno=596, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=597, col_offset=8), 'assertEqual', Load(), lineno=597, col_offset=8), [Call(Name('format', Load(), lineno=597, col_offset=25), [BinOp(Num(1.5, lineno=597, col_offset=32), Add(), Num(3j, lineno=597, col_offset=36), lineno=597, col_offset=32), Str('>20', lineno=597, col_offset=40)], [], None, None, lineno=597, col_offset=25), Str('            (1.5+3j)', lineno=597, col_offset=50)], [], None, None, lineno=597, col_offset=8), lineno=597, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=598, col_offset=8), 'assertEqual', Load(), lineno=598, col_offset=8), [Call(Name('format', Load(), lineno=598, col_offset=25), [BinOp(Num(1.5, lineno=598, col_offset=32), Add(), Num(3j, lineno=598, col_offset=36), lineno=598, col_offset=32), Str('^20', lineno=598, col_offset=40)], [], None, None, lineno=598, col_offset=25), Str('      (1.5+3j)      ', lineno=598, col_offset=50)], [], None, None, lineno=598, col_offset=8), lineno=598, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=599, col_offset=8), 'assertEqual', Load(), lineno=599, col_offset=8), [Call(Name('format', Load(), lineno=599, col_offset=25), [BinOp(Num(1.123, lineno=599, col_offset=32), Sub(), Num(3.123j, lineno=599, col_offset=38), lineno=599, col_offset=32), Str('^20.2', lineno=599, col_offset=46)], [], None, None, lineno=599, col_offset=25), Str('     (1.1-3.1j)     ', lineno=599, col_offset=56)], [], None, None, lineno=599, col_offset=8), lineno=599, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=601, col_offset=8), 'assertEqual', Load(), lineno=601, col_offset=8), [Call(Name('format', Load(), lineno=601, col_offset=25), [BinOp(Num(1.5, lineno=601, col_offset=32), Add(), Num(3j, lineno=601, col_offset=36), lineno=601, col_offset=32), Str('20.2f', lineno=601, col_offset=40)], [], None, None, lineno=601, col_offset=25), Str('          1.50+3.00j', lineno=601, col_offset=50)], [], None, None, lineno=601, col_offset=8), lineno=601, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=602, col_offset=8), 'assertEqual', Load(), lineno=602, col_offset=8), [Call(Name('format', Load(), lineno=602, col_offset=25), [BinOp(Num(1.5, lineno=602, col_offset=32), Add(), Num(3j, lineno=602, col_offset=36), lineno=602, col_offset=32), Str('>20.2f', lineno=602, col_offset=40)], [], None, None, lineno=602, col_offset=25), Str('          1.50+3.00j', lineno=602, col_offset=51)], [], None, None, lineno=602, col_offset=8), lineno=602, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=603, col_offset=8), 'assertEqual', Load(), lineno=603, col_offset=8), [Call(Name('format', Load(), lineno=603, col_offset=25), [BinOp(Num(1.5, lineno=603, col_offset=32), Add(), Num(3j, lineno=603, col_offset=36), lineno=603, col_offset=32), Str('<20.2f', lineno=603, col_offset=40)], [], None, None, lineno=603, col_offset=25), Str('1.50+3.00j          ', lineno=603, col_offset=51)], [], None, None, lineno=603, col_offset=8), lineno=603, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=604, col_offset=8), 'assertEqual', Load(), lineno=604, col_offset=8), [Call(Name('format', Load(), lineno=604, col_offset=25), [BinOp(Num(1.5e+20, lineno=604, col_offset=32), Add(), Num(3j, lineno=604, col_offset=39), lineno=604, col_offset=32), Str('<20.2f', lineno=604, col_offset=43)], [], None, None, lineno=604, col_offset=25), Str('150000000000000000000.00+3.00j', lineno=604, col_offset=54)], [], None, None, lineno=604, col_offset=8), lineno=604, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=605, col_offset=8), 'assertEqual', Load(), lineno=605, col_offset=8), [Call(Name('format', Load(), lineno=605, col_offset=25), [BinOp(Num(1.5e+20, lineno=605, col_offset=32), Add(), Num(3j, lineno=605, col_offset=39), lineno=605, col_offset=32), Str('>40.2f', lineno=605, col_offset=43)], [], None, None, lineno=605, col_offset=25), Str('          150000000000000000000.00+3.00j', lineno=605, col_offset=54)], [], None, None, lineno=605, col_offset=8), lineno=605, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=606, col_offset=8), 'assertEqual', Load(), lineno=606, col_offset=8), [Call(Name('format', Load(), lineno=606, col_offset=25), [BinOp(Num(1.5e+20, lineno=606, col_offset=32), Add(), Num(3j, lineno=606, col_offset=39), lineno=606, col_offset=32), Str('^40,.2f', lineno=606, col_offset=43)], [], None, None, lineno=606, col_offset=25), Str('  150,000,000,000,000,000,000.00+3.00j  ', lineno=606, col_offset=55)], [], None, None, lineno=606, col_offset=8), lineno=606, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=607, col_offset=8), 'assertEqual', Load(), lineno=607, col_offset=8), [Call(Name('format', Load(), lineno=607, col_offset=25), [BinOp(Num(1.5e+21, lineno=607, col_offset=32), Add(), Num(3j, lineno=607, col_offset=39), lineno=607, col_offset=32), Str('^40,.2f', lineno=607, col_offset=43)], [], None, None, lineno=607, col_offset=25), Str(' 1,500,000,000,000,000,000,000.00+3.00j ', lineno=607, col_offset=55)], [], None, None, lineno=607, col_offset=8), lineno=607, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=608, col_offset=8), 'assertEqual', Load(), lineno=608, col_offset=8), [Call(Name('format', Load(), lineno=608, col_offset=25), [BinOp(Num(1.5e+21, lineno=608, col_offset=32), Add(), Num(3000j, lineno=608, col_offset=39), lineno=608, col_offset=32), Str(',.2f', lineno=608, col_offset=46)], [], None, None, lineno=608, col_offset=25), Str('1,500,000,000,000,000,000,000.00+3,000.00j', lineno=608, col_offset=55)], [], None, None, lineno=608, col_offset=8), lineno=608, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=611, col_offset=8), 'assertRaises', Load(), lineno=611, col_offset=8), [Name('ValueError', Load(), lineno=611, col_offset=26), Attribute(BinOp(Num(1.5, lineno=611, col_offset=39), Add(), Num(0.5j, lineno=611, col_offset=43), lineno=611, col_offset=39), '__format__', Load(), lineno=611, col_offset=39), Str('#f', lineno=611, col_offset=61)], [], None, None, lineno=611, col_offset=8), lineno=611, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=614, col_offset=8), 'assertRaises', Load(), lineno=614, col_offset=8), [Name('ValueError', Load(), lineno=614, col_offset=26), Attribute(BinOp(Num(1.5, lineno=614, col_offset=39), Add(), Num(0.5j, lineno=614, col_offset=43), lineno=614, col_offset=39), '__format__', Load(), lineno=614, col_offset=39), Str('010f', lineno=614, col_offset=61)], [], None, None, lineno=614, col_offset=8), lineno=614, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=617, col_offset=8), 'assertRaises', Load(), lineno=617, col_offset=8), [Name('ValueError', Load(), lineno=617, col_offset=26), Attribute(BinOp(Num(1.5, lineno=617, col_offset=39), Add(), Num(3j, lineno=617, col_offset=43), lineno=617, col_offset=39), '__format__', Load(), lineno=617, col_offset=39), Str('=20', lineno=617, col_offset=59)], [], None, None, lineno=617, col_offset=8), lineno=617, col_offset=8), For(Name('t', Store(), lineno=620, col_offset=12), Str('bcdoxX', lineno=620, col_offset=17), [Expr(Call(Attribute(Name('self', Load(), lineno=621, col_offset=12), 'assertRaises', Load(), lineno=621, col_offset=12), [Name('ValueError', Load(), lineno=621, col_offset=30), Attribute(BinOp(Num(1.5, lineno=621, col_offset=43), Add(), Num(0.5j, lineno=621, col_offset=47), lineno=621, col_offset=43), '__format__', Load(), lineno=621, col_offset=43), Name('t', Load(), lineno=621, col_offset=65)], [], None, None, lineno=621, col_offset=12), lineno=621, col_offset=12)], [], lineno=620, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=624, col_offset=8), 'assertEqual', Load(), lineno=624, col_offset=8), [Call(Attribute(Str('*{0:.3f}*', lineno=624, col_offset=25), 'format', Load(), lineno=624, col_offset=25), [BinOp(Num(3.14159, lineno=624, col_offset=44), Add(), Num(2.71828j, lineno=624, col_offset=52), lineno=624, col_offset=44)], [], None, None, lineno=624, col_offset=25), Str('*3.142+2.718j*', lineno=624, col_offset=63)], [], None, None, lineno=624, col_offset=8), lineno=624, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=627, col_offset=8), 'assertEqual', Load(), lineno=627, col_offset=8), [Call(Attribute(Str('{0:f}', lineno=627, col_offset=25), 'format', Load(), lineno=627, col_offset=25), [BinOp(Name('INF', Load(), lineno=627, col_offset=40), Add(), Num(0j, lineno=627, col_offset=44), lineno=627, col_offset=40)], [], None, None, lineno=627, col_offset=25), Str('inf+0.000000j', lineno=627, col_offset=49)], [], None, None, lineno=627, col_offset=8), lineno=627, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=628, col_offset=8), 'assertEqual', Load(), lineno=628, col_offset=8), [Call(Attribute(Str('{0:F}', lineno=628, col_offset=25), 'format', Load(), lineno=628, col_offset=25), [BinOp(Name('INF', Load(), lineno=628, col_offset=40), Add(), Num(0j, lineno=628, col_offset=44), lineno=628, col_offset=40)], [], None, None, lineno=628, col_offset=25), Str('INF+0.000000j', lineno=628, col_offset=49)], [], None, None, lineno=628, col_offset=8), lineno=628, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=629, col_offset=8), 'assertEqual', Load(), lineno=629, col_offset=8), [Call(Attribute(Str('{0:f}', lineno=629, col_offset=25), 'format', Load(), lineno=629, col_offset=25), [BinOp(UnaryOp(USub(), Name('INF', Load(), lineno=629, col_offset=41), lineno=629, col_offset=40), Add(), Num(0j, lineno=629, col_offset=45), lineno=629, col_offset=40)], [], None, None, lineno=629, col_offset=25), Str('-inf+0.000000j', lineno=629, col_offset=50)], [], None, None, lineno=629, col_offset=8), lineno=629, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=630, col_offset=8), 'assertEqual', Load(), lineno=630, col_offset=8), [Call(Attribute(Str('{0:F}', lineno=630, col_offset=25), 'format', Load(), lineno=630, col_offset=25), [BinOp(UnaryOp(USub(), Name('INF', Load(), lineno=630, col_offset=41), lineno=630, col_offset=40), Add(), Num(0j, lineno=630, col_offset=45), lineno=630, col_offset=40)], [], None, None, lineno=630, col_offset=25), Str('-INF+0.000000j', lineno=630, col_offset=50)], [], None, None, lineno=630, col_offset=8), lineno=630, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=631, col_offset=8), 'assertEqual', Load(), lineno=631, col_offset=8), [Call(Attribute(Str('{0:f}', lineno=631, col_offset=25), 'format', Load(), lineno=631, col_offset=25), [Call(Name('complex', Load(), lineno=631, col_offset=40), [Name('INF', Load(), lineno=631, col_offset=48), Name('INF', Load(), lineno=631, col_offset=53)], [], None, None, lineno=631, col_offset=40)], [], None, None, lineno=631, col_offset=25), Str('inf+infj', lineno=631, col_offset=60)], [], None, None, lineno=631, col_offset=8), lineno=631, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=632, col_offset=8), 'assertEqual', Load(), lineno=632, col_offset=8), [Call(Attribute(Str('{0:F}', lineno=632, col_offset=25), 'format', Load(), lineno=632, col_offset=25), [Call(Name('complex', Load(), lineno=632, col_offset=40), [Name('INF', Load(), lineno=632, col_offset=48), Name('INF', Load(), lineno=632, col_offset=53)], [], None, None, lineno=632, col_offset=40)], [], None, None, lineno=632, col_offset=25), Str('INF+INFj', lineno=632, col_offset=60)], [], None, None, lineno=632, col_offset=8), lineno=632, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=633, col_offset=8), 'assertEqual', Load(), lineno=633, col_offset=8), [Call(Attribute(Str('{0:f}', lineno=633, col_offset=25), 'format', Load(), lineno=633, col_offset=25), [Call(Name('complex', Load(), lineno=633, col_offset=40), [Name('INF', Load(), lineno=633, col_offset=48), UnaryOp(USub(), Name('INF', Load(), lineno=633, col_offset=54), lineno=633, col_offset=53)], [], None, None, lineno=633, col_offset=40)], [], None, None, lineno=633, col_offset=25), Str('inf-infj', lineno=633, col_offset=61)], [], None, None, lineno=633, col_offset=8), lineno=633, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=634, col_offset=8), 'assertEqual', Load(), lineno=634, col_offset=8), [Call(Attribute(Str('{0:F}', lineno=634, col_offset=25), 'format', Load(), lineno=634, col_offset=25), [Call(Name('complex', Load(), lineno=634, col_offset=40), [Name('INF', Load(), lineno=634, col_offset=48), UnaryOp(USub(), Name('INF', Load(), lineno=634, col_offset=54), lineno=634, col_offset=53)], [], None, None, lineno=634, col_offset=40)], [], None, None, lineno=634, col_offset=25), Str('INF-INFj', lineno=634, col_offset=61)], [], None, None, lineno=634, col_offset=8), lineno=634, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=635, col_offset=8), 'assertEqual', Load(), lineno=635, col_offset=8), [Call(Attribute(Str('{0:f}', lineno=635, col_offset=25), 'format', Load(), lineno=635, col_offset=25), [Call(Name('complex', Load(), lineno=635, col_offset=40), [UnaryOp(USub(), Name('INF', Load(), lineno=635, col_offset=49), lineno=635, col_offset=48), Name('INF', Load(), lineno=635, col_offset=54)], [], None, None, lineno=635, col_offset=40)], [], None, None, lineno=635, col_offset=25), Str('-inf+infj', lineno=635, col_offset=61)], [], None, None, lineno=635, col_offset=8), lineno=635, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=636, col_offset=8), 'assertEqual', Load(), lineno=636, col_offset=8), [Call(Attribute(Str('{0:F}', lineno=636, col_offset=25), 'format', Load(), lineno=636, col_offset=25), [Call(Name('complex', Load(), lineno=636, col_offset=40), [UnaryOp(USub(), Name('INF', Load(), lineno=636, col_offset=49), lineno=636, col_offset=48), Name('INF', Load(), lineno=636, col_offset=54)], [], None, None, lineno=636, col_offset=40)], [], None, None, lineno=636, col_offset=25), Str('-INF+INFj', lineno=636, col_offset=61)], [], None, None, lineno=636, col_offset=8), lineno=636, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=637, col_offset=8), 'assertEqual', Load(), lineno=637, col_offset=8), [Call(Attribute(Str('{0:f}', lineno=637, col_offset=25), 'format', Load(), lineno=637, col_offset=25), [Call(Name('complex', Load(), lineno=637, col_offset=40), [UnaryOp(USub(), Name('INF', Load(), lineno=637, col_offset=49), lineno=637, col_offset=48), UnaryOp(USub(), Name('INF', Load(), lineno=637, col_offset=55), lineno=637, col_offset=54)], [], None, None, lineno=637, col_offset=40)], [], None, None, lineno=637, col_offset=25), Str('-inf-infj', lineno=637, col_offset=62)], [], None, None, lineno=637, col_offset=8), lineno=637, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=638, col_offset=8), 'assertEqual', Load(), lineno=638, col_offset=8), [Call(Attribute(Str('{0:F}', lineno=638, col_offset=25), 'format', Load(), lineno=638, col_offset=25), [Call(Name('complex', Load(), lineno=638, col_offset=40), [UnaryOp(USub(), Name('INF', Load(), lineno=638, col_offset=49), lineno=638, col_offset=48), UnaryOp(USub(), Name('INF', Load(), lineno=638, col_offset=55), lineno=638, col_offset=54)], [], None, None, lineno=638, col_offset=40)], [], None, None, lineno=638, col_offset=25), Str('-INF-INFj', lineno=638, col_offset=62)], [], None, None, lineno=638, col_offset=8), lineno=638, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=640, col_offset=8), 'assertEqual', Load(), lineno=640, col_offset=8), [Call(Attribute(Str('{0:f}', lineno=640, col_offset=25), 'format', Load(), lineno=640, col_offset=25), [Call(Name('complex', Load(), lineno=640, col_offset=40), [Name('NAN', Load(), lineno=640, col_offset=48), Num(0, lineno=640, col_offset=53)], [], None, None, lineno=640, col_offset=40)], [], None, None, lineno=640, col_offset=25), Str('nan+0.000000j', lineno=640, col_offset=58)], [], None, None, lineno=640, col_offset=8), lineno=640, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=641, col_offset=8), 'assertEqual', Load(), lineno=641, col_offset=8), [Call(Attribute(Str('{0:F}', lineno=641, col_offset=25), 'format', Load(), lineno=641, col_offset=25), [Call(Name('complex', Load(), lineno=641, col_offset=40), [Name('NAN', Load(), lineno=641, col_offset=48), Num(0, lineno=641, col_offset=53)], [], None, None, lineno=641, col_offset=40)], [], None, None, lineno=641, col_offset=25), Str('NAN+0.000000j', lineno=641, col_offset=58)], [], None, None, lineno=641, col_offset=8), lineno=641, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=642, col_offset=8), 'assertEqual', Load(), lineno=642, col_offset=8), [Call(Attribute(Str('{0:f}', lineno=642, col_offset=25), 'format', Load(), lineno=642, col_offset=25), [Call(Name('complex', Load(), lineno=642, col_offset=40), [Name('NAN', Load(), lineno=642, col_offset=48), Name('NAN', Load(), lineno=642, col_offset=53)], [], None, None, lineno=642, col_offset=40)], [], None, None, lineno=642, col_offset=25), Str('nan+nanj', lineno=642, col_offset=60)], [], None, None, lineno=642, col_offset=8), lineno=642, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=643, col_offset=8), 'assertEqual', Load(), lineno=643, col_offset=8), [Call(Attribute(Str('{0:F}', lineno=643, col_offset=25), 'format', Load(), lineno=643, col_offset=25), [Call(Name('complex', Load(), lineno=643, col_offset=40), [Name('NAN', Load(), lineno=643, col_offset=48), Name('NAN', Load(), lineno=643, col_offset=53)], [], None, None, lineno=643, col_offset=40)], [], None, None, lineno=643, col_offset=25), Str('NAN+NANj', lineno=643, col_offset=60)], [], None, None, lineno=643, col_offset=8), lineno=643, col_offset=8)], [], lineno=543, col_offset=4)], [], lineno=11, col_offset=0), FunctionDef('test_main', arguments([], None, None, []), [With(Call(Attribute(Name('test_support', Load(), lineno=646, col_offset=9), 'check_warnings', Load(), lineno=646, col_offset=9), [Tuple([Str('complex divmod.., // and % are deprecated', lineno=646, col_offset=38), Name('DeprecationWarning', Load(), lineno=647, col_offset=52)], Load(), lineno=646, col_offset=38)], [], None, None, lineno=646, col_offset=9), None, [Expr(Call(Attribute(Name('test_support', Load(), lineno=648, col_offset=8), 'run_unittest', Load(), lineno=648, col_offset=8), [Name('ComplexTest', Load(), lineno=648, col_offset=34)], [], None, None, lineno=648, col_offset=8), lineno=648, col_offset=8)], lineno=646, col_offset=9)], [], lineno=645, col_offset=0), If(Compare(Name('__name__', Load(), lineno=650, col_offset=3), [Eq()], [Str('__main__', lineno=650, col_offset=15)], lineno=650, col_offset=3), [Expr(Call(Name('test_main', Load(), lineno=651, col_offset=4), [], [], None, None, lineno=651, col_offset=4), lineno=651, col_offset=4)], [], lineno=650, col_offset=0)])
