Module([Expr(Str("Spawn a command with pipes to its stdin, stdout, and optionally stderr.\n\nThe normal os.popen(cmd, mode) call spawns a shell command and provides a\nfile interface to just the input or output of the process depending on\nwhether mode is 'r' or 'w'.  This module provides the functions popen2(cmd)\nand popen3(cmd) which return two or three pipes to the spawned command.\n", lineno=7, col_offset=-1), lineno=7, col_offset=-1), Import([alias('os', None)], lineno=9, col_offset=0), Import([alias('sys', None)], lineno=10, col_offset=0), Import([alias('warnings', None)], lineno=11, col_offset=0), Expr(Call(Attribute(Name('warnings', Load(), lineno=12, col_offset=0), 'warn', Load(), lineno=12, col_offset=0), [Str('The popen2 module is deprecated.  Use the subprocess module.', lineno=12, col_offset=14), Name('DeprecationWarning', Load(), lineno=13, col_offset=14)], [keyword('stacklevel', Num(2, lineno=13, col_offset=45))], None, None, lineno=12, col_offset=0), lineno=12, col_offset=0), Assign([Name('__all__', Store(), lineno=15, col_offset=0)], List([Str('popen2', lineno=15, col_offset=11), Str('popen3', lineno=15, col_offset=21), Str('popen4', lineno=15, col_offset=31)], Load(), lineno=15, col_offset=10), lineno=15, col_offset=0), TryExcept([Assign([Name('MAXFD', Store(), lineno=18, col_offset=4)], Call(Attribute(Name('os', Load(), lineno=18, col_offset=12), 'sysconf', Load(), lineno=18, col_offset=12), [Str('SC_OPEN_MAX', lineno=18, col_offset=23)], [], None, None, lineno=18, col_offset=12), lineno=18, col_offset=4)], [ExceptHandler(Tuple([Name('AttributeError', Load(), lineno=19, col_offset=8), Name('ValueError', Load(), lineno=19, col_offset=24)], Load(), lineno=19, col_offset=8), None, [Assign([Name('MAXFD', Store(), lineno=20, col_offset=4)], Num(256, lineno=20, col_offset=12), lineno=20, col_offset=4)], lineno=19, col_offset=0)], [], lineno=17, col_offset=0), Assign([Name('_active', Store(), lineno=22, col_offset=0)], List([], Load(), lineno=22, col_offset=10), lineno=22, col_offset=0), FunctionDef('_cleanup', arguments([], None, None, []), [For(Name('inst', Store(), lineno=25, col_offset=8), Subscript(Name('_active', Load(), lineno=25, col_offset=16), Slice(None, None, None), Load(), lineno=25, col_offset=16), [If(Compare(Call(Attribute(Name('inst', Load(), lineno=26, col_offset=11), 'poll', Load(), lineno=26, col_offset=11), [], [keyword('_deadstate', Attribute(Name('sys', Load(), lineno=26, col_offset=32), 'maxint', Load(), lineno=26, col_offset=32))], None, None, lineno=26, col_offset=11), [GtE()], [Num(0, lineno=26, col_offset=47)], lineno=26, col_offset=11), [TryExcept([Expr(Call(Attribute(Name('_active', Load(), lineno=28, col_offset=16), 'remove', Load(), lineno=28, col_offset=16), [Name('inst', Load(), lineno=28, col_offset=31)], [], None, None, lineno=28, col_offset=16), lineno=28, col_offset=16)], [ExceptHandler(Name('ValueError', Load(), lineno=29, col_offset=19), None, [Pass( lineno=32, col_offset=16)], lineno=29, col_offset=12)], [], lineno=27, col_offset=12)], [], lineno=26, col_offset=8)], [], lineno=25, col_offset=4)], [], lineno=24, col_offset=0), ClassDef('Popen3', [], [Expr(Str('Class representing a child process.  Normally, instances are created\n    internally by the functions popen2() and popen3().', lineno=36, col_offset=-1), lineno=36, col_offset=-1), Assign([Name('sts', Store(), lineno=38, col_offset=4)], Num(-1, lineno=38, col_offset=11), lineno=38, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=40, col_offset=17), Name('cmd', Param(), lineno=40, col_offset=23), Name('capturestderr', Param(), lineno=40, col_offset=28), Name('bufsize', Param(), lineno=40, col_offset=49)], None, None, [Name('False', Load(), lineno=40, col_offset=42), Num(-1, lineno=40, col_offset=58)]), [Expr(Str("The parameter 'cmd' is the shell command to execute in a\n        sub-process.  On UNIX, 'cmd' may be a sequence, in which case arguments\n        will be passed directly to the program without shell intervention (as\n        with os.spawnv()).  If 'cmd' is a string it will be passed to the shell\n        (as with os.system()).   The 'capturestderr' flag, if true, specifies\n        that the object should capture standard error output of the child\n        process.  The default is false.  If the 'bufsize' parameter is\n        specified, it specifies the size of the I/O buffers to/from the child\n        process.", lineno=49, col_offset=-1), lineno=49, col_offset=-1), Expr(Call(Name('_cleanup', Load(), lineno=50, col_offset=8), [], [], None, None, lineno=50, col_offset=8), lineno=50, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=51, col_offset=8), 'cmd', Store(), lineno=51, col_offset=8)], Name('cmd', Load(), lineno=51, col_offset=19), lineno=51, col_offset=8), Assign([Tuple([Name('p2cread', Store(), lineno=52, col_offset=8), Name('p2cwrite', Store(), lineno=52, col_offset=17)], Store(), lineno=52, col_offset=8)], Call(Attribute(Name('os', Load(), lineno=52, col_offset=28), 'pipe', Load(), lineno=52, col_offset=28), [], [], None, None, lineno=52, col_offset=28), lineno=52, col_offset=8), Assign([Tuple([Name('c2pread', Store(), lineno=53, col_offset=8), Name('c2pwrite', Store(), lineno=53, col_offset=17)], Store(), lineno=53, col_offset=8)], Call(Attribute(Name('os', Load(), lineno=53, col_offset=28), 'pipe', Load(), lineno=53, col_offset=28), [], [], None, None, lineno=53, col_offset=28), lineno=53, col_offset=8), If(Name('capturestderr', Load(), lineno=54, col_offset=11), [Assign([Tuple([Name('errout', Store(), lineno=55, col_offset=12), Name('errin', Store(), lineno=55, col_offset=20)], Store(), lineno=55, col_offset=12)], Call(Attribute(Name('os', Load(), lineno=55, col_offset=28), 'pipe', Load(), lineno=55, col_offset=28), [], [], None, None, lineno=55, col_offset=28), lineno=55, col_offset=12)], [], lineno=54, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=56, col_offset=8), 'pid', Store(), lineno=56, col_offset=8)], Call(Attribute(Name('os', Load(), lineno=56, col_offset=19), 'fork', Load(), lineno=56, col_offset=19), [], [], None, None, lineno=56, col_offset=19), lineno=56, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=57, col_offset=11), 'pid', Load(), lineno=57, col_offset=11), [Eq()], [Num(0, lineno=57, col_offset=23)], lineno=57, col_offset=11), [Expr(Call(Attribute(Name('os', Load(), lineno=59, col_offset=12), 'dup2', Load(), lineno=59, col_offset=12), [Name('p2cread', Load(), lineno=59, col_offset=20), Num(0, lineno=59, col_offset=29)], [], None, None, lineno=59, col_offset=12), lineno=59, col_offset=12), Expr(Call(Attribute(Name('os', Load(), lineno=60, col_offset=12), 'dup2', Load(), lineno=60, col_offset=12), [Name('c2pwrite', Load(), lineno=60, col_offset=20), Num(1, lineno=60, col_offset=30)], [], None, None, lineno=60, col_offset=12), lineno=60, col_offset=12), If(Name('capturestderr', Load(), lineno=61, col_offset=15), [Expr(Call(Attribute(Name('os', Load(), lineno=62, col_offset=16), 'dup2', Load(), lineno=62, col_offset=16), [Name('errin', Load(), lineno=62, col_offset=24), Num(2, lineno=62, col_offset=31)], [], None, None, lineno=62, col_offset=16), lineno=62, col_offset=16)], [], lineno=61, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=63, col_offset=12), '_run_child', Load(), lineno=63, col_offset=12), [Name('cmd', Load(), lineno=63, col_offset=28)], [], None, None, lineno=63, col_offset=12), lineno=63, col_offset=12)], [], lineno=57, col_offset=8), Expr(Call(Attribute(Name('os', Load(), lineno=64, col_offset=8), 'close', Load(), lineno=64, col_offset=8), [Name('p2cread', Load(), lineno=64, col_offset=17)], [], None, None, lineno=64, col_offset=8), lineno=64, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=65, col_offset=8), 'tochild', Store(), lineno=65, col_offset=8)], Call(Attribute(Name('os', Load(), lineno=65, col_offset=23), 'fdopen', Load(), lineno=65, col_offset=23), [Name('p2cwrite', Load(), lineno=65, col_offset=33), Str('w', lineno=65, col_offset=43), Name('bufsize', Load(), lineno=65, col_offset=48)], [], None, None, lineno=65, col_offset=23), lineno=65, col_offset=8), Expr(Call(Attribute(Name('os', Load(), lineno=66, col_offset=8), 'close', Load(), lineno=66, col_offset=8), [Name('c2pwrite', Load(), lineno=66, col_offset=17)], [], None, None, lineno=66, col_offset=8), lineno=66, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=67, col_offset=8), 'fromchild', Store(), lineno=67, col_offset=8)], Call(Attribute(Name('os', Load(), lineno=67, col_offset=25), 'fdopen', Load(), lineno=67, col_offset=25), [Name('c2pread', Load(), lineno=67, col_offset=35), Str('r', lineno=67, col_offset=44), Name('bufsize', Load(), lineno=67, col_offset=49)], [], None, None, lineno=67, col_offset=25), lineno=67, col_offset=8), If(Name('capturestderr', Load(), lineno=68, col_offset=11), [Expr(Call(Attribute(Name('os', Load(), lineno=69, col_offset=12), 'close', Load(), lineno=69, col_offset=12), [Name('errin', Load(), lineno=69, col_offset=21)], [], None, None, lineno=69, col_offset=12), lineno=69, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=70, col_offset=12), 'childerr', Store(), lineno=70, col_offset=12)], Call(Attribute(Name('os', Load(), lineno=70, col_offset=28), 'fdopen', Load(), lineno=70, col_offset=28), [Name('errout', Load(), lineno=70, col_offset=38), Str('r', lineno=70, col_offset=46), Name('bufsize', Load(), lineno=70, col_offset=51)], [], None, None, lineno=70, col_offset=28), lineno=70, col_offset=12)], [Assign([Attribute(Name('self', Load(), lineno=72, col_offset=12), 'childerr', Store(), lineno=72, col_offset=12)], Name('None', Load(), lineno=72, col_offset=28), lineno=72, col_offset=12)], lineno=68, col_offset=8)], [], lineno=40, col_offset=4), FunctionDef('__del__', arguments([Name('self', Param(), lineno=74, col_offset=16)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=76, col_offset=8), 'poll', Load(), lineno=76, col_offset=8), [], [keyword('_deadstate', Attribute(Name('sys', Load(), lineno=76, col_offset=29), 'maxint', Load(), lineno=76, col_offset=29))], None, None, lineno=76, col_offset=8), lineno=76, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=77, col_offset=11), 'sts', Load(), lineno=77, col_offset=11), [Lt()], [Num(0, lineno=77, col_offset=22)], lineno=77, col_offset=11), [If(Compare(Name('_active', Load(), lineno=78, col_offset=15), [IsNot()], [Name('None', Load(), lineno=78, col_offset=30)], lineno=78, col_offset=15), [Expr(Call(Attribute(Name('_active', Load(), lineno=80, col_offset=16), 'append', Load(), lineno=80, col_offset=16), [Name('self', Load(), lineno=80, col_offset=31)], [], None, None, lineno=80, col_offset=16), lineno=80, col_offset=16)], [], lineno=78, col_offset=12)], [], lineno=77, col_offset=8)], [], lineno=74, col_offset=4), FunctionDef('_run_child', arguments([Name('self', Param(), lineno=82, col_offset=19), Name('cmd', Param(), lineno=82, col_offset=25)], None, None, []), [If(Call(Name('isinstance', Load(), lineno=83, col_offset=11), [Name('cmd', Load(), lineno=83, col_offset=22), Name('basestring', Load(), lineno=83, col_offset=27)], [], None, None, lineno=83, col_offset=11), [Assign([Name('cmd', Store(), lineno=84, col_offset=12)], List([Str('/bin/sh', lineno=84, col_offset=19), Str('-c', lineno=84, col_offset=30), Name('cmd', Load(), lineno=84, col_offset=36)], Load(), lineno=84, col_offset=18), lineno=84, col_offset=12)], [], lineno=83, col_offset=8), Expr(Call(Attribute(Name('os', Load(), lineno=85, col_offset=8), 'closerange', Load(), lineno=85, col_offset=8), [Num(3, lineno=85, col_offset=22), Name('MAXFD', Load(), lineno=85, col_offset=25)], [], None, None, lineno=85, col_offset=8), lineno=85, col_offset=8), TryFinally([Expr(Call(Attribute(Name('os', Load(), lineno=87, col_offset=12), 'execvp', Load(), lineno=87, col_offset=12), [Subscript(Name('cmd', Load(), lineno=87, col_offset=22), Index(Num(0, lineno=87, col_offset=26)), Load(), lineno=87, col_offset=22), Name('cmd', Load(), lineno=87, col_offset=30)], [], None, None, lineno=87, col_offset=12), lineno=87, col_offset=12)], [Expr(Call(Attribute(Name('os', Load(), lineno=89, col_offset=12), '_exit', Load(), lineno=89, col_offset=12), [Num(1, lineno=89, col_offset=21)], [], None, None, lineno=89, col_offset=12), lineno=89, col_offset=12)], lineno=86, col_offset=8)], [], lineno=82, col_offset=4), FunctionDef('poll', arguments([Name('self', Param(), lineno=91, col_offset=13), Name('_deadstate', Param(), lineno=91, col_offset=19)], None, None, [Name('None', Load(), lineno=91, col_offset=30)]), [Expr(Str("Return the exit status of the child process if it has finished,\n        or -1 if it hasn't finished yet.", lineno=93, col_offset=-1), lineno=93, col_offset=-1), If(Compare(Attribute(Name('self', Load(), lineno=94, col_offset=11), 'sts', Load(), lineno=94, col_offset=11), [Lt()], [Num(0, lineno=94, col_offset=22)], lineno=94, col_offset=11), [TryExcept([Assign([Tuple([Name('pid', Store(), lineno=96, col_offset=16), Name('sts', Store(), lineno=96, col_offset=21)], Store(), lineno=96, col_offset=16)], Call(Attribute(Name('os', Load(), lineno=96, col_offset=27), 'waitpid', Load(), lineno=96, col_offset=27), [Attribute(Name('self', Load(), lineno=96, col_offset=38), 'pid', Load(), lineno=96, col_offset=38), Attribute(Name('os', Load(), lineno=96, col_offset=48), 'WNOHANG', Load(), lineno=96, col_offset=48)], [], None, None, lineno=96, col_offset=27), lineno=96, col_offset=16), If(Compare(Name('pid', Load(), lineno=98, col_offset=19), [Eq()], [Attribute(Name('self', Load(), lineno=98, col_offset=26), 'pid', Load(), lineno=98, col_offset=26)], lineno=98, col_offset=19), [Assign([Attribute(Name('self', Load(), lineno=99, col_offset=20), 'sts', Store(), lineno=99, col_offset=20)], Name('sts', Load(), lineno=99, col_offset=31), lineno=99, col_offset=20)], [], lineno=98, col_offset=16)], [ExceptHandler(Attribute(Name('os', Load(), lineno=100, col_offset=19), 'error', Load(), lineno=100, col_offset=19), None, [If(Compare(Name('_deadstate', Load(), lineno=101, col_offset=19), [IsNot()], [Name('None', Load(), lineno=101, col_offset=37)], lineno=101, col_offset=19), [Assign([Attribute(Name('self', Load(), lineno=102, col_offset=20), 'sts', Store(), lineno=102, col_offset=20)], Name('_deadstate', Load(), lineno=102, col_offset=31), lineno=102, col_offset=20)], [], lineno=101, col_offset=16)], lineno=100, col_offset=12)], [], lineno=95, col_offset=12)], [], lineno=94, col_offset=8), Return(Attribute(Name('self', Load(), lineno=103, col_offset=15), 'sts', Load(), lineno=103, col_offset=15), lineno=103, col_offset=8)], [], lineno=91, col_offset=4), FunctionDef('wait', arguments([Name('self', Param(), lineno=105, col_offset=13)], None, None, []), [Expr(Str('Wait for and return the exit status of the child process.', lineno=106, col_offset=8), lineno=106, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=107, col_offset=11), 'sts', Load(), lineno=107, col_offset=11), [Lt()], [Num(0, lineno=107, col_offset=22)], lineno=107, col_offset=11), [Assign([Tuple([Name('pid', Store(), lineno=108, col_offset=12), Name('sts', Store(), lineno=108, col_offset=17)], Store(), lineno=108, col_offset=12)], Call(Attribute(Name('os', Load(), lineno=108, col_offset=23), 'waitpid', Load(), lineno=108, col_offset=23), [Attribute(Name('self', Load(), lineno=108, col_offset=34), 'pid', Load(), lineno=108, col_offset=34), Num(0, lineno=108, col_offset=44)], [], None, None, lineno=108, col_offset=23), lineno=108, col_offset=12), Assert(Compare(Name('pid', Load(), lineno=111, col_offset=19), [Eq()], [Attribute(Name('self', Load(), lineno=111, col_offset=26), 'pid', Load(), lineno=111, col_offset=26)], lineno=111, col_offset=19), None, lineno=111, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=112, col_offset=12), 'sts', Store(), lineno=112, col_offset=12)], Name('sts', Load(), lineno=112, col_offset=23), lineno=112, col_offset=12)], [], lineno=107, col_offset=8), Return(Attribute(Name('self', Load(), lineno=113, col_offset=15), 'sts', Load(), lineno=113, col_offset=15), lineno=113, col_offset=8)], [], lineno=105, col_offset=4)], [], lineno=34, col_offset=0), ClassDef('Popen4', [Name('Popen3', Load(), lineno=116, col_offset=13)], [Assign([Name('childerr', Store(), lineno=117, col_offset=4)], Name('None', Load(), lineno=117, col_offset=15), lineno=117, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=119, col_offset=17), Name('cmd', Param(), lineno=119, col_offset=23), Name('bufsize', Param(), lineno=119, col_offset=28)], None, None, [Num(-1, lineno=119, col_offset=37)]), [Expr(Call(Name('_cleanup', Load(), lineno=120, col_offset=8), [], [], None, None, lineno=120, col_offset=8), lineno=120, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=121, col_offset=8), 'cmd', Store(), lineno=121, col_offset=8)], Name('cmd', Load(), lineno=121, col_offset=19), lineno=121, col_offset=8), Assign([Tuple([Name('p2cread', Store(), lineno=122, col_offset=8), Name('p2cwrite', Store(), lineno=122, col_offset=17)], Store(), lineno=122, col_offset=8)], Call(Attribute(Name('os', Load(), lineno=122, col_offset=28), 'pipe', Load(), lineno=122, col_offset=28), [], [], None, None, lineno=122, col_offset=28), lineno=122, col_offset=8), Assign([Tuple([Name('c2pread', Store(), lineno=123, col_offset=8), Name('c2pwrite', Store(), lineno=123, col_offset=17)], Store(), lineno=123, col_offset=8)], Call(Attribute(Name('os', Load(), lineno=123, col_offset=28), 'pipe', Load(), lineno=123, col_offset=28), [], [], None, None, lineno=123, col_offset=28), lineno=123, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=124, col_offset=8), 'pid', Store(), lineno=124, col_offset=8)], Call(Attribute(Name('os', Load(), lineno=124, col_offset=19), 'fork', Load(), lineno=124, col_offset=19), [], [], None, None, lineno=124, col_offset=19), lineno=124, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=125, col_offset=11), 'pid', Load(), lineno=125, col_offset=11), [Eq()], [Num(0, lineno=125, col_offset=23)], lineno=125, col_offset=11), [Expr(Call(Attribute(Name('os', Load(), lineno=127, col_offset=12), 'dup2', Load(), lineno=127, col_offset=12), [Name('p2cread', Load(), lineno=127, col_offset=20), Num(0, lineno=127, col_offset=29)], [], None, None, lineno=127, col_offset=12), lineno=127, col_offset=12), Expr(Call(Attribute(Name('os', Load(), lineno=128, col_offset=12), 'dup2', Load(), lineno=128, col_offset=12), [Name('c2pwrite', Load(), lineno=128, col_offset=20), Num(1, lineno=128, col_offset=30)], [], None, None, lineno=128, col_offset=12), lineno=128, col_offset=12), Expr(Call(Attribute(Name('os', Load(), lineno=129, col_offset=12), 'dup2', Load(), lineno=129, col_offset=12), [Name('c2pwrite', Load(), lineno=129, col_offset=20), Num(2, lineno=129, col_offset=30)], [], None, None, lineno=129, col_offset=12), lineno=129, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=130, col_offset=12), '_run_child', Load(), lineno=130, col_offset=12), [Name('cmd', Load(), lineno=130, col_offset=28)], [], None, None, lineno=130, col_offset=12), lineno=130, col_offset=12)], [], lineno=125, col_offset=8), Expr(Call(Attribute(Name('os', Load(), lineno=131, col_offset=8), 'close', Load(), lineno=131, col_offset=8), [Name('p2cread', Load(), lineno=131, col_offset=17)], [], None, None, lineno=131, col_offset=8), lineno=131, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=132, col_offset=8), 'tochild', Store(), lineno=132, col_offset=8)], Call(Attribute(Name('os', Load(), lineno=132, col_offset=23), 'fdopen', Load(), lineno=132, col_offset=23), [Name('p2cwrite', Load(), lineno=132, col_offset=33), Str('w', lineno=132, col_offset=43), Name('bufsize', Load(), lineno=132, col_offset=48)], [], None, None, lineno=132, col_offset=23), lineno=132, col_offset=8), Expr(Call(Attribute(Name('os', Load(), lineno=133, col_offset=8), 'close', Load(), lineno=133, col_offset=8), [Name('c2pwrite', Load(), lineno=133, col_offset=17)], [], None, None, lineno=133, col_offset=8), lineno=133, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=134, col_offset=8), 'fromchild', Store(), lineno=134, col_offset=8)], Call(Attribute(Name('os', Load(), lineno=134, col_offset=25), 'fdopen', Load(), lineno=134, col_offset=25), [Name('c2pread', Load(), lineno=134, col_offset=35), Str('r', lineno=134, col_offset=44), Name('bufsize', Load(), lineno=134, col_offset=49)], [], None, None, lineno=134, col_offset=25), lineno=134, col_offset=8)], [], lineno=119, col_offset=4)], [], lineno=116, col_offset=0), If(BoolOp(Or(), [Compare(Subscript(Attribute(Name('sys', Load(), lineno=137, col_offset=3), 'platform', Load(), lineno=137, col_offset=3), Slice(None, Num(3, lineno=137, col_offset=17), None), Load(), lineno=137, col_offset=3), [Eq()], [Str('win', lineno=137, col_offset=23)], lineno=137, col_offset=3), Compare(Attribute(Name('sys', Load(), lineno=137, col_offset=32), 'platform', Load(), lineno=137, col_offset=32), [Eq()], [Str('os2emx', lineno=137, col_offset=48)], lineno=137, col_offset=32)], lineno=137, col_offset=3), [Delete([Name('Popen3', Del(), lineno=139, col_offset=8), Name('Popen4', Del(), lineno=139, col_offset=16)], lineno=139, col_offset=4), FunctionDef('popen2', arguments([Name('cmd', Param(), lineno=141, col_offset=15), Name('bufsize', Param(), lineno=141, col_offset=20), Name('mode', Param(), lineno=141, col_offset=32)], None, None, [Num(-1, lineno=141, col_offset=29), Str('t', lineno=141, col_offset=37)]), [Expr(Str("Execute the shell command 'cmd' in a sub-process. On UNIX, 'cmd' may\n        be a sequence, in which case arguments will be passed directly to the\n        program without shell intervention (as with os.spawnv()). If 'cmd' is a\n        string it will be passed to the shell (as with os.system()). If\n        'bufsize' is specified, it sets the buffer size for the I/O pipes. The\n        file objects (child_stdout, child_stdin) are returned.", lineno=147, col_offset=-1), lineno=147, col_offset=-1), Assign([Tuple([Name('w', Store(), lineno=148, col_offset=8), Name('r', Store(), lineno=148, col_offset=11)], Store(), lineno=148, col_offset=8)], Call(Attribute(Name('os', Load(), lineno=148, col_offset=15), 'popen2', Load(), lineno=148, col_offset=15), [Name('cmd', Load(), lineno=148, col_offset=25), Name('mode', Load(), lineno=148, col_offset=30), Name('bufsize', Load(), lineno=148, col_offset=36)], [], None, None, lineno=148, col_offset=15), lineno=148, col_offset=8), Return(Tuple([Name('r', Load(), lineno=149, col_offset=15), Name('w', Load(), lineno=149, col_offset=18)], Load(), lineno=149, col_offset=15), lineno=149, col_offset=8)], [], lineno=141, col_offset=4), FunctionDef('popen3', arguments([Name('cmd', Param(), lineno=151, col_offset=15), Name('bufsize', Param(), lineno=151, col_offset=20), Name('mode', Param(), lineno=151, col_offset=32)], None, None, [Num(-1, lineno=151, col_offset=29), Str('t', lineno=151, col_offset=37)]), [Expr(Str("Execute the shell command 'cmd' in a sub-process. On UNIX, 'cmd' may\n        be a sequence, in which case arguments will be passed directly to the\n        program without shell intervention (as with os.spawnv()). If 'cmd' is a\n        string it will be passed to the shell (as with os.system()). If\n        'bufsize' is specified, it sets the buffer size for the I/O pipes. The\n        file objects (child_stdout, child_stdin, child_stderr) are returned.", lineno=157, col_offset=-1), lineno=157, col_offset=-1), Assign([Tuple([Name('w', Store(), lineno=158, col_offset=8), Name('r', Store(), lineno=158, col_offset=11), Name('e', Store(), lineno=158, col_offset=14)], Store(), lineno=158, col_offset=8)], Call(Attribute(Name('os', Load(), lineno=158, col_offset=18), 'popen3', Load(), lineno=158, col_offset=18), [Name('cmd', Load(), lineno=158, col_offset=28), Name('mode', Load(), lineno=158, col_offset=33), Name('bufsize', Load(), lineno=158, col_offset=39)], [], None, None, lineno=158, col_offset=18), lineno=158, col_offset=8), Return(Tuple([Name('r', Load(), lineno=159, col_offset=15), Name('w', Load(), lineno=159, col_offset=18), Name('e', Load(), lineno=159, col_offset=21)], Load(), lineno=159, col_offset=15), lineno=159, col_offset=8)], [], lineno=151, col_offset=4), FunctionDef('popen4', arguments([Name('cmd', Param(), lineno=161, col_offset=15), Name('bufsize', Param(), lineno=161, col_offset=20), Name('mode', Param(), lineno=161, col_offset=32)], None, None, [Num(-1, lineno=161, col_offset=29), Str('t', lineno=161, col_offset=37)]), [Expr(Str("Execute the shell command 'cmd' in a sub-process. On UNIX, 'cmd' may\n        be a sequence, in which case arguments will be passed directly to the\n        program without shell intervention (as with os.spawnv()). If 'cmd' is a\n        string it will be passed to the shell (as with os.system()). If\n        'bufsize' is specified, it sets the buffer size for the I/O pipes. The\n        file objects (child_stdout_stderr, child_stdin) are returned.", lineno=167, col_offset=-1), lineno=167, col_offset=-1), Assign([Tuple([Name('w', Store(), lineno=168, col_offset=8), Name('r', Store(), lineno=168, col_offset=11)], Store(), lineno=168, col_offset=8)], Call(Attribute(Name('os', Load(), lineno=168, col_offset=15), 'popen4', Load(), lineno=168, col_offset=15), [Name('cmd', Load(), lineno=168, col_offset=25), Name('mode', Load(), lineno=168, col_offset=30), Name('bufsize', Load(), lineno=168, col_offset=36)], [], None, None, lineno=168, col_offset=15), lineno=168, col_offset=8), Return(Tuple([Name('r', Load(), lineno=169, col_offset=15), Name('w', Load(), lineno=169, col_offset=18)], Load(), lineno=169, col_offset=15), lineno=169, col_offset=8)], [], lineno=161, col_offset=4)], [FunctionDef('popen2', arguments([Name('cmd', Param(), lineno=171, col_offset=15), Name('bufsize', Param(), lineno=171, col_offset=20), Name('mode', Param(), lineno=171, col_offset=32)], None, None, [Num(-1, lineno=171, col_offset=29), Str('t', lineno=171, col_offset=37)]), [Expr(Str("Execute the shell command 'cmd' in a sub-process. On UNIX, 'cmd' may\n        be a sequence, in which case arguments will be passed directly to the\n        program without shell intervention (as with os.spawnv()). If 'cmd' is a\n        string it will be passed to the shell (as with os.system()). If\n        'bufsize' is specified, it sets the buffer size for the I/O pipes. The\n        file objects (child_stdout, child_stdin) are returned.", lineno=177, col_offset=-1), lineno=177, col_offset=-1), Assign([Name('inst', Store(), lineno=178, col_offset=8)], Call(Name('Popen3', Load(), lineno=178, col_offset=15), [Name('cmd', Load(), lineno=178, col_offset=22), Name('False', Load(), lineno=178, col_offset=27), Name('bufsize', Load(), lineno=178, col_offset=34)], [], None, None, lineno=178, col_offset=15), lineno=178, col_offset=8), Return(Tuple([Attribute(Name('inst', Load(), lineno=179, col_offset=15), 'fromchild', Load(), lineno=179, col_offset=15), Attribute(Name('inst', Load(), lineno=179, col_offset=31), 'tochild', Load(), lineno=179, col_offset=31)], Load(), lineno=179, col_offset=15), lineno=179, col_offset=8)], [], lineno=171, col_offset=4), FunctionDef('popen3', arguments([Name('cmd', Param(), lineno=181, col_offset=15), Name('bufsize', Param(), lineno=181, col_offset=20), Name('mode', Param(), lineno=181, col_offset=32)], None, None, [Num(-1, lineno=181, col_offset=29), Str('t', lineno=181, col_offset=37)]), [Expr(Str("Execute the shell command 'cmd' in a sub-process. On UNIX, 'cmd' may\n        be a sequence, in which case arguments will be passed directly to the\n        program without shell intervention (as with os.spawnv()). If 'cmd' is a\n        string it will be passed to the shell (as with os.system()). If\n        'bufsize' is specified, it sets the buffer size for the I/O pipes. The\n        file objects (child_stdout, child_stdin, child_stderr) are returned.", lineno=187, col_offset=-1), lineno=187, col_offset=-1), Assign([Name('inst', Store(), lineno=188, col_offset=8)], Call(Name('Popen3', Load(), lineno=188, col_offset=15), [Name('cmd', Load(), lineno=188, col_offset=22), Name('True', Load(), lineno=188, col_offset=27), Name('bufsize', Load(), lineno=188, col_offset=33)], [], None, None, lineno=188, col_offset=15), lineno=188, col_offset=8), Return(Tuple([Attribute(Name('inst', Load(), lineno=189, col_offset=15), 'fromchild', Load(), lineno=189, col_offset=15), Attribute(Name('inst', Load(), lineno=189, col_offset=31), 'tochild', Load(), lineno=189, col_offset=31), Attribute(Name('inst', Load(), lineno=189, col_offset=45), 'childerr', Load(), lineno=189, col_offset=45)], Load(), lineno=189, col_offset=15), lineno=189, col_offset=8)], [], lineno=181, col_offset=4), FunctionDef('popen4', arguments([Name('cmd', Param(), lineno=191, col_offset=15), Name('bufsize', Param(), lineno=191, col_offset=20), Name('mode', Param(), lineno=191, col_offset=32)], None, None, [Num(-1, lineno=191, col_offset=29), Str('t', lineno=191, col_offset=37)]), [Expr(Str("Execute the shell command 'cmd' in a sub-process. On UNIX, 'cmd' may\n        be a sequence, in which case arguments will be passed directly to the\n        program without shell intervention (as with os.spawnv()). If 'cmd' is a\n        string it will be passed to the shell (as with os.system()). If\n        'bufsize' is specified, it sets the buffer size for the I/O pipes. The\n        file objects (child_stdout_stderr, child_stdin) are returned.", lineno=197, col_offset=-1), lineno=197, col_offset=-1), Assign([Name('inst', Store(), lineno=198, col_offset=8)], Call(Name('Popen4', Load(), lineno=198, col_offset=15), [Name('cmd', Load(), lineno=198, col_offset=22), Name('bufsize', Load(), lineno=198, col_offset=27)], [], None, None, lineno=198, col_offset=15), lineno=198, col_offset=8), Return(Tuple([Attribute(Name('inst', Load(), lineno=199, col_offset=15), 'fromchild', Load(), lineno=199, col_offset=15), Attribute(Name('inst', Load(), lineno=199, col_offset=31), 'tochild', Load(), lineno=199, col_offset=31)], Load(), lineno=199, col_offset=15), lineno=199, col_offset=8)], [], lineno=191, col_offset=4), Expr(Call(Attribute(Name('__all__', Load(), lineno=201, col_offset=4), 'extend', Load(), lineno=201, col_offset=4), [List([Str('Popen3', lineno=201, col_offset=20), Str('Popen4', lineno=201, col_offset=30)], Load(), lineno=201, col_offset=19)], [], None, None, lineno=201, col_offset=4), lineno=201, col_offset=4)], lineno=137, col_offset=0)])
