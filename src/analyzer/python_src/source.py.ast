Module([Expr(Str("Exmaple file to be parsed for the parsermodule example.\n\nThe classes and functions in this module exist only to exhibit the ability\nof the handling information extraction from nested definitions using parse\ntrees.  They shouldn't interest you otherwise!\n", lineno=6, col_offset=-1), lineno=6, col_offset=-1), ClassDef('Simple', [], [Expr(Str('This class does very little.', lineno=9, col_offset=4), lineno=9, col_offset=4), FunctionDef('method', arguments([Name('self', Param(), lineno=11, col_offset=15)], None, None, []), [Expr(Str('This method does almost nothing.', lineno=12, col_offset=8), lineno=12, col_offset=8), Return(Num(1, lineno=13, col_offset=15), lineno=13, col_offset=8)], [], lineno=11, col_offset=4), ClassDef('Nested', [], [Expr(Str('This is a nested class.', lineno=16, col_offset=8), lineno=16, col_offset=8), FunctionDef('nested_method', arguments([Name('self', Param(), lineno=18, col_offset=26)], None, None, []), [Expr(Str('Method of Nested class.', lineno=19, col_offset=12), lineno=19, col_offset=12), FunctionDef('nested_function', arguments([], None, None, []), [Expr(Str('Function in method of Nested class.', lineno=21, col_offset=16), lineno=21, col_offset=16), Pass( lineno=22, col_offset=16)], [], lineno=20, col_offset=12), Return(Name('nested_function', Load(), lineno=23, col_offset=19), lineno=23, col_offset=12)], [], lineno=18, col_offset=8)], [], lineno=15, col_offset=4)], [], lineno=8, col_offset=0), FunctionDef('function', arguments([], None, None, []), [Expr(Str('This function lives at the module level.', lineno=26, col_offset=4), lineno=26, col_offset=4), Return(Num(0, lineno=27, col_offset=11), lineno=27, col_offset=4)], [], lineno=25, col_offset=0)])
