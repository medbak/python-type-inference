Module([Expr(Str("fixdiv - tool to fix division operators.\n\nTo use this tool, first run `python -Qwarnall yourscript.py 2>warnings'.\nThis runs the script `yourscript.py' while writing warning messages\nabout all uses of the classic division operator to the file\n`warnings'.  The warnings look like this:\n\n  <file>:<line>: DeprecationWarning: classic <type> division\n\nThe warnings are written to stderr, so you must use `2>' for the I/O\nredirect.  I know of no way to redirect stderr on Windows in a DOS\nbox, so you will have to modify the script to set sys.stderr to some\nkind of log file if you want to do this on Windows.\n\nThe warnings are not limited to the script; modules imported by the\nscript may also trigger warnings.  In fact a useful technique is to\nwrite a test script specifically intended to exercise all code in a\nparticular module or set of modules.\n\nThen run `python fixdiv.py warnings'.  This first reads the warnings,\nlooking for classic division warnings, and sorts them by file name and\nline number.  Then, for each file that received at least one warning,\nit parses the file and tries to match the warnings up to the division\noperators found in the source code.  If it is successful, it writes\nits findings to stdout, preceded by a line of dashes and a line of the\nform:\n\n  Index: <file>\n\nIf the only findings found are suggestions to change a / operator into\na // operator, the output is acceptable input for the Unix 'patch'\nprogram.\n\nHere are the possible messages on stdout (N stands for a line number):\n\n- A plain-diff-style change ('NcN', a line marked by '<', a line\n  containing '---', and a line marked by '>'):\n\n  A / operator was found that should be changed to //.  This is the\n  recommendation when only int and/or long arguments were seen.\n\n- 'True division / operator at line N' and a line marked by '=':\n\n  A / operator was found that can remain unchanged.  This is the\n  recommendation when only float and/or complex arguments were seen.\n\n- 'Ambiguous / operator (..., ...) at line N', line marked by '?':\n\n  A / operator was found for which int or long as well as float or\n  complex arguments were seen.  This is highly unlikely; if it occurs,\n  you may have to restructure the code to keep the classic semantics,\n  or maybe you don't care about the classic semantics.\n\n- 'No conclusive evidence on line N', line marked by '*':\n\n  A / operator was found for which no warnings were seen.  This could\n  be code that was never executed, or code that was only executed\n  with user-defined objects as arguments.  You will have to\n  investigate further.  Note that // can be overloaded separately from\n  /, using __floordiv__.  True division can also be separately\n  overloaded, using __truediv__.  Classic division should be the same\n  as either of those.  (XXX should I add a warning for division on\n  user-defined objects, to disambiguate this case from code that was\n  never executed?)\n\n- 'Phantom ... warnings for line N', line marked by '*':\n\n  A warning was seen for a line not containing a / operator.  The most\n  likely cause is a warning about code executed by 'exec' or eval()\n  (see note below), or an indirect invocation of the / operator, for\n  example via the div() function in the operator module.  It could\n  also be caused by a change to the file between the time the test\n  script was run to collect warnings and the time fixdiv was run.\n\n- 'More than one / operator in line N'; or\n  'More than one / operator per statement in lines N-N':\n\n  The scanner found more than one / operator on a single line, or in a\n  statement split across multiple lines.  Because the warnings\n  framework doesn't (and can't) show the offset within the line, and\n  the code generator doesn't always give the correct line number for\n  operations in a multi-line statement, we can't be sure whether all\n  operators in the statement were executed.  To be on the safe side,\n  by default a warning is issued about this case.  In practice, these\n  cases are usually safe, and the -m option suppresses these warning.\n\n- 'Can't find the / operator in line N', line marked by '*':\n\n  This really shouldn't happen.  It means that the tokenize module\n  reported a '/' operator but the line it returns didn't contain a '/'\n  character at the indicated position.\n\n- 'Bad warning for line N: XYZ', line marked by '*':\n\n  This really shouldn't happen.  It means that a 'classic XYZ\n  division' warning was read with XYZ being something other than\n  'int', 'long', 'float', or 'complex'.\n\nNotes:\n\n- The augmented assignment operator /= is handled the same way as the\n  / operator.\n\n- This tool never looks at the // operator; no warnings are ever\n  generated for use of this operator.\n\n- This tool never looks at the / operator when a future division\n  statement is in effect; no warnings are generated in this case, and\n  because the tool only looks at files for which at least one classic\n  division warning was seen, it will never look at files containing a\n  future division statement.\n\n- Warnings may be issued for code not read from a file, but executed\n  using an exec statement or the eval() function.  These may have\n  <string> in the filename position, in which case the fixdiv script\n  will attempt and fail to open a file named '<string>' and issue a\n  warning about this failure; or these may be reported as 'Phantom'\n  warnings (see above).  You're on your own to deal with these.  You\n  could make all recommended changes and add a future division\n  statement to all affected files, and then re-run the test script; it\n  should not issue any warnings.  If there are any, and you have a\n  hard time tracking down where they are generated, you can use the\n  -Werror option to force an error instead of a first warning,\n  generating a traceback.\n\n- The tool should be run from the same directory as that from which\n  the original script was run, otherwise it won't be able to open\n  files given by relative pathnames.\n", lineno=131, col_offset=-1), lineno=131, col_offset=-1), Import([alias('sys', None)], lineno=133, col_offset=0), Import([alias('getopt', None)], lineno=134, col_offset=0), Import([alias('re', None)], lineno=135, col_offset=0), Import([alias('tokenize', None)], lineno=136, col_offset=0), Assign([Name('multi_ok', Store(), lineno=138, col_offset=0)], Num(0, lineno=138, col_offset=11), lineno=138, col_offset=0), FunctionDef('main', arguments([], None, None, []), [TryExcept([Assign([Tuple([Name('opts', Store(), lineno=142, col_offset=8), Name('args', Store(), lineno=142, col_offset=14)], Store(), lineno=142, col_offset=8)], Call(Attribute(Name('getopt', Load(), lineno=142, col_offset=21), 'getopt', Load(), lineno=142, col_offset=21), [Subscript(Attribute(Name('sys', Load(), lineno=142, col_offset=35), 'argv', Load(), lineno=142, col_offset=35), Slice(Num(1, lineno=142, col_offset=44), None, None), Load(), lineno=142, col_offset=35), Str('hm', lineno=142, col_offset=49)], [], None, None, lineno=142, col_offset=21), lineno=142, col_offset=8)], [ExceptHandler(Attribute(Name('getopt', Load(), lineno=143, col_offset=11), 'error', Load(), lineno=143, col_offset=11), Name('msg', Store(), lineno=143, col_offset=25), [Expr(Call(Name('usage', Load(), lineno=144, col_offset=8), [Name('msg', Load(), lineno=144, col_offset=14)], [], None, None, lineno=144, col_offset=8), lineno=144, col_offset=8), Return(Num(2, lineno=145, col_offset=15), lineno=145, col_offset=8)], lineno=143, col_offset=4)], [], lineno=141, col_offset=4), For(Tuple([Name('o', Store(), lineno=146, col_offset=8), Name('a', Store(), lineno=146, col_offset=11)], Store(), lineno=146, col_offset=8), Name('opts', Load(), lineno=146, col_offset=16), [If(Compare(Name('o', Load(), lineno=147, col_offset=11), [Eq()], [Str('-h', lineno=147, col_offset=16)], lineno=147, col_offset=11), [Print(None, [Name('__doc__', Load(), lineno=148, col_offset=18)], True, lineno=148, col_offset=12), Return(None, lineno=149, col_offset=12)], [], lineno=147, col_offset=8), If(Compare(Name('o', Load(), lineno=150, col_offset=11), [Eq()], [Str('-m', lineno=150, col_offset=16)], lineno=150, col_offset=11), [Global(['multi_ok'], lineno=151, col_offset=12), Assign([Name('multi_ok', Store(), lineno=152, col_offset=12)], Num(1, lineno=152, col_offset=23), lineno=152, col_offset=12)], [], lineno=150, col_offset=8)], [], lineno=146, col_offset=4), If(UnaryOp(Not(), Name('args', Load(), lineno=153, col_offset=11), lineno=153, col_offset=7), [Expr(Call(Name('usage', Load(), lineno=154, col_offset=8), [Str('at least one file argument is required', lineno=154, col_offset=14)], [], None, None, lineno=154, col_offset=8), lineno=154, col_offset=8), Return(Num(2, lineno=155, col_offset=15), lineno=155, col_offset=8)], [], lineno=153, col_offset=4), If(Subscript(Name('args', Load(), lineno=156, col_offset=7), Slice(Num(1, lineno=156, col_offset=12), None, None), Load(), lineno=156, col_offset=7), [Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=157, col_offset=8), 'stderr', Load(), lineno=157, col_offset=8), 'write', Load(), lineno=157, col_offset=8), [Str('%s: extra file arguments ignored\n', lineno=157, col_offset=25), Subscript(Attribute(Name('sys', Load(), lineno=157, col_offset=63), 'argv', Load(), lineno=157, col_offset=63), Index(Num(0, lineno=157, col_offset=72)), Load(), lineno=157, col_offset=63)], [], None, None, lineno=157, col_offset=8), lineno=157, col_offset=8)], [], lineno=156, col_offset=4), Assign([Name('warnings', Store(), lineno=158, col_offset=4)], Call(Name('readwarnings', Load(), lineno=158, col_offset=15), [Subscript(Name('args', Load(), lineno=158, col_offset=28), Index(Num(0, lineno=158, col_offset=33)), Load(), lineno=158, col_offset=28)], [], None, None, lineno=158, col_offset=15), lineno=158, col_offset=4), If(Compare(Name('warnings', Load(), lineno=159, col_offset=7), [Is()], [Name('None', Load(), lineno=159, col_offset=19)], lineno=159, col_offset=7), [Return(Num(1, lineno=160, col_offset=15), lineno=160, col_offset=8)], [], lineno=159, col_offset=4), Assign([Name('files', Store(), lineno=161, col_offset=4)], Call(Attribute(Name('warnings', Load(), lineno=161, col_offset=12), 'keys', Load(), lineno=161, col_offset=12), [], [], None, None, lineno=161, col_offset=12), lineno=161, col_offset=4), If(UnaryOp(Not(), Name('files', Load(), lineno=162, col_offset=11), lineno=162, col_offset=7), [Print(None, [Str('No classic division warnings read from', lineno=163, col_offset=14), Subscript(Name('args', Load(), lineno=163, col_offset=56), Index(Num(0, lineno=163, col_offset=61)), Load(), lineno=163, col_offset=56)], True, lineno=163, col_offset=8), Return(None, lineno=164, col_offset=8)], [], lineno=162, col_offset=4), Expr(Call(Attribute(Name('files', Load(), lineno=165, col_offset=4), 'sort', Load(), lineno=165, col_offset=4), [], [], None, None, lineno=165, col_offset=4), lineno=165, col_offset=4), Assign([Name('exit', Store(), lineno=166, col_offset=4)], Name('None', Load(), lineno=166, col_offset=11), lineno=166, col_offset=4), For(Name('filename', Store(), lineno=167, col_offset=8), Name('files', Load(), lineno=167, col_offset=20), [Assign([Name('x', Store(), lineno=168, col_offset=8)], Call(Name('process', Load(), lineno=168, col_offset=12), [Name('filename', Load(), lineno=168, col_offset=20), Subscript(Name('warnings', Load(), lineno=168, col_offset=30), Index(Name('filename', Load(), lineno=168, col_offset=39)), Load(), lineno=168, col_offset=30)], [], None, None, lineno=168, col_offset=12), lineno=168, col_offset=8), Assign([Name('exit', Store(), lineno=169, col_offset=8)], BoolOp(Or(), [Name('exit', Load(), lineno=169, col_offset=15), Name('x', Load(), lineno=169, col_offset=23)], lineno=169, col_offset=15), lineno=169, col_offset=8)], [], lineno=167, col_offset=4), Return(Name('exit', Load(), lineno=170, col_offset=11), lineno=170, col_offset=4)], [], lineno=140, col_offset=0), FunctionDef('usage', arguments([Name('msg', Param(), lineno=172, col_offset=10)], None, None, []), [Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=173, col_offset=4), 'stderr', Load(), lineno=173, col_offset=4), 'write', Load(), lineno=173, col_offset=4), [BinOp(Str('%s: %s\n', lineno=173, col_offset=21), Mod(), Tuple([Subscript(Attribute(Name('sys', Load(), lineno=173, col_offset=35), 'argv', Load(), lineno=173, col_offset=35), Index(Num(0, lineno=173, col_offset=44)), Load(), lineno=173, col_offset=35), Name('msg', Load(), lineno=173, col_offset=48)], Load(), lineno=173, col_offset=35), lineno=173, col_offset=21)], [], None, None, lineno=173, col_offset=4), lineno=173, col_offset=4), Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=174, col_offset=4), 'stderr', Load(), lineno=174, col_offset=4), 'write', Load(), lineno=174, col_offset=4), [BinOp(Str('Usage: %s [-m] warnings\n', lineno=174, col_offset=21), Mod(), Subscript(Attribute(Name('sys', Load(), lineno=174, col_offset=51), 'argv', Load(), lineno=174, col_offset=51), Index(Num(0, lineno=174, col_offset=60)), Load(), lineno=174, col_offset=51), lineno=174, col_offset=21)], [], None, None, lineno=174, col_offset=4), lineno=174, col_offset=4), Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=175, col_offset=4), 'stderr', Load(), lineno=175, col_offset=4), 'write', Load(), lineno=175, col_offset=4), [BinOp(Str("Try `%s -h' for more information.\n", lineno=175, col_offset=21), Mod(), Subscript(Attribute(Name('sys', Load(), lineno=175, col_offset=61), 'argv', Load(), lineno=175, col_offset=61), Index(Num(0, lineno=175, col_offset=70)), Load(), lineno=175, col_offset=61), lineno=175, col_offset=21)], [], None, None, lineno=175, col_offset=4), lineno=175, col_offset=4)], [], lineno=172, col_offset=0), Assign([Name('PATTERN', Store(), lineno=177, col_offset=0)], Str('^(.+?):(\\d+): DeprecationWarning: classic (int|long|float|complex) division$', lineno=177, col_offset=11), lineno=177, col_offset=0), FunctionDef('readwarnings', arguments([Name('warningsfile', Param(), lineno=180, col_offset=17)], None, None, []), [Assign([Name('prog', Store(), lineno=181, col_offset=4)], Call(Attribute(Name('re', Load(), lineno=181, col_offset=11), 'compile', Load(), lineno=181, col_offset=11), [Name('PATTERN', Load(), lineno=181, col_offset=22)], [], None, None, lineno=181, col_offset=11), lineno=181, col_offset=4), TryExcept([Assign([Name('f', Store(), lineno=183, col_offset=8)], Call(Name('open', Load(), lineno=183, col_offset=12), [Name('warningsfile', Load(), lineno=183, col_offset=17)], [], None, None, lineno=183, col_offset=12), lineno=183, col_offset=8)], [ExceptHandler(Name('IOError', Load(), lineno=184, col_offset=11), Name('msg', Store(), lineno=184, col_offset=20), [Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=185, col_offset=8), 'stderr', Load(), lineno=185, col_offset=8), 'write', Load(), lineno=185, col_offset=8), [BinOp(Str("can't open: %s\n", lineno=185, col_offset=25), Mod(), Name('msg', Load(), lineno=185, col_offset=46), lineno=185, col_offset=25)], [], None, None, lineno=185, col_offset=8), lineno=185, col_offset=8), Return(None, lineno=186, col_offset=8)], lineno=184, col_offset=4)], [], lineno=182, col_offset=4), Assign([Name('warnings', Store(), lineno=187, col_offset=4)], Dict([], [], lineno=187, col_offset=15), lineno=187, col_offset=4), While(Num(1, lineno=188, col_offset=10), [Assign([Name('line', Store(), lineno=189, col_offset=8)], Call(Attribute(Name('f', Load(), lineno=189, col_offset=15), 'readline', Load(), lineno=189, col_offset=15), [], [], None, None, lineno=189, col_offset=15), lineno=189, col_offset=8), If(UnaryOp(Not(), Name('line', Load(), lineno=190, col_offset=15), lineno=190, col_offset=11), [Break( lineno=191, col_offset=12)], [], lineno=190, col_offset=8), Assign([Name('m', Store(), lineno=192, col_offset=8)], Call(Attribute(Name('prog', Load(), lineno=192, col_offset=12), 'match', Load(), lineno=192, col_offset=12), [Name('line', Load(), lineno=192, col_offset=23)], [], None, None, lineno=192, col_offset=12), lineno=192, col_offset=8), If(UnaryOp(Not(), Name('m', Load(), lineno=193, col_offset=15), lineno=193, col_offset=11), [If(Compare(Call(Attribute(Name('line', Load(), lineno=194, col_offset=15), 'find', Load(), lineno=194, col_offset=15), [Str('division', lineno=194, col_offset=25)], [], None, None, lineno=194, col_offset=15), [GtE()], [Num(0, lineno=194, col_offset=40)], lineno=194, col_offset=15), [Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=195, col_offset=16), 'stderr', Load(), lineno=195, col_offset=16), 'write', Load(), lineno=195, col_offset=16), [BinOp(Str('Warning: ignored input ', lineno=195, col_offset=33), Add(), Name('line', Load(), lineno=195, col_offset=61), lineno=195, col_offset=33)], [], None, None, lineno=195, col_offset=16), lineno=195, col_offset=16)], [], lineno=194, col_offset=12), Continue( lineno=196, col_offset=12)], [], lineno=193, col_offset=8), Assign([Tuple([Name('filename', Store(), lineno=197, col_offset=8), Name('lineno', Store(), lineno=197, col_offset=18), Name('what', Store(), lineno=197, col_offset=26)], Store(), lineno=197, col_offset=8)], Call(Attribute(Name('m', Load(), lineno=197, col_offset=33), 'groups', Load(), lineno=197, col_offset=33), [], [], None, None, lineno=197, col_offset=33), lineno=197, col_offset=8), Assign([Name('list', Store(), lineno=198, col_offset=8)], Call(Attribute(Name('warnings', Load(), lineno=198, col_offset=15), 'get', Load(), lineno=198, col_offset=15), [Name('filename', Load(), lineno=198, col_offset=28)], [], None, None, lineno=198, col_offset=15), lineno=198, col_offset=8), If(Compare(Name('list', Load(), lineno=199, col_offset=11), [Is()], [Name('None', Load(), lineno=199, col_offset=19)], lineno=199, col_offset=11), [Assign([Subscript(Name('warnings', Load(), lineno=200, col_offset=12), Index(Name('filename', Load(), lineno=200, col_offset=21)), Store(), lineno=200, col_offset=12), Name('list', Store(), lineno=200, col_offset=33)], List([], Load(), lineno=200, col_offset=40), lineno=200, col_offset=12)], [], lineno=199, col_offset=8), Expr(Call(Attribute(Name('list', Load(), lineno=201, col_offset=8), 'append', Load(), lineno=201, col_offset=8), [Tuple([Call(Name('int', Load(), lineno=201, col_offset=21), [Name('lineno', Load(), lineno=201, col_offset=25)], [], None, None, lineno=201, col_offset=21), Call(Name('intern', Load(), lineno=201, col_offset=34), [Name('what', Load(), lineno=201, col_offset=41)], [], None, None, lineno=201, col_offset=34)], Load(), lineno=201, col_offset=21)], [], None, None, lineno=201, col_offset=8), lineno=201, col_offset=8)], [], lineno=188, col_offset=4), Expr(Call(Attribute(Name('f', Load(), lineno=202, col_offset=4), 'close', Load(), lineno=202, col_offset=4), [], [], None, None, lineno=202, col_offset=4), lineno=202, col_offset=4), Return(Name('warnings', Load(), lineno=203, col_offset=11), lineno=203, col_offset=4)], [], lineno=180, col_offset=0), FunctionDef('process', arguments([Name('filename', Param(), lineno=205, col_offset=12), Name('list', Param(), lineno=205, col_offset=22)], None, None, []), [Print(None, [BinOp(Str('-', lineno=206, col_offset=10), Mult(), Num(70, lineno=206, col_offset=14), lineno=206, col_offset=10)], True, lineno=206, col_offset=4), Assert(Name('list', Load(), lineno=207, col_offset=11), None, lineno=207, col_offset=4), TryExcept([Assign([Name('fp', Store(), lineno=209, col_offset=8)], Call(Name('open', Load(), lineno=209, col_offset=13), [Name('filename', Load(), lineno=209, col_offset=18)], [], None, None, lineno=209, col_offset=13), lineno=209, col_offset=8)], [ExceptHandler(Name('IOError', Load(), lineno=210, col_offset=11), Name('msg', Store(), lineno=210, col_offset=20), [Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=211, col_offset=8), 'stderr', Load(), lineno=211, col_offset=8), 'write', Load(), lineno=211, col_offset=8), [BinOp(Str("can't open: %s\n", lineno=211, col_offset=25), Mod(), Name('msg', Load(), lineno=211, col_offset=46), lineno=211, col_offset=25)], [], None, None, lineno=211, col_offset=8), lineno=211, col_offset=8), Return(Num(1, lineno=212, col_offset=15), lineno=212, col_offset=8)], lineno=210, col_offset=4)], [], lineno=208, col_offset=4), Print(None, [Str('Index:', lineno=213, col_offset=10), Name('filename', Load(), lineno=213, col_offset=20)], True, lineno=213, col_offset=4), Assign([Name('f', Store(), lineno=214, col_offset=4)], Call(Name('FileContext', Load(), lineno=214, col_offset=8), [Name('fp', Load(), lineno=214, col_offset=20)], [], None, None, lineno=214, col_offset=8), lineno=214, col_offset=4), Expr(Call(Attribute(Name('list', Load(), lineno=215, col_offset=4), 'sort', Load(), lineno=215, col_offset=4), [], [], None, None, lineno=215, col_offset=4), lineno=215, col_offset=4), Assign([Name('index', Store(), lineno=216, col_offset=4)], Num(0, lineno=216, col_offset=12), lineno=216, col_offset=4), Assign([Name('g', Store(), lineno=217, col_offset=4)], Call(Attribute(Name('tokenize', Load(), lineno=217, col_offset=8), 'generate_tokens', Load(), lineno=217, col_offset=8), [Attribute(Name('f', Load(), lineno=217, col_offset=33), 'readline', Load(), lineno=217, col_offset=33)], [], None, None, lineno=217, col_offset=8), lineno=217, col_offset=4), While(Num(1, lineno=218, col_offset=10), [Assign([Tuple([Name('startlineno', Store(), lineno=219, col_offset=8), Name('endlineno', Store(), lineno=219, col_offset=21), Name('slashes', Store(), lineno=219, col_offset=32)], Store(), lineno=219, col_offset=8), Name('lineinfo', Store(), lineno=219, col_offset=42)], Call(Name('scanline', Load(), lineno=219, col_offset=53), [Name('g', Load(), lineno=219, col_offset=62)], [], None, None, lineno=219, col_offset=53), lineno=219, col_offset=8), If(Compare(Name('startlineno', Load(), lineno=220, col_offset=11), [Is()], [Name('None', Load(), lineno=220, col_offset=26)], lineno=220, col_offset=11), [Break( lineno=221, col_offset=12)], [], lineno=220, col_offset=8), Assert(Compare(Name('startlineno', Load(), lineno=222, col_offset=15), [LtE(), IsNot()], [Name('endlineno', Load(), lineno=222, col_offset=30), Name('None', Load(), lineno=222, col_offset=47)], lineno=222, col_offset=15), None, lineno=222, col_offset=8), Assign([Name('orphans', Store(), lineno=223, col_offset=8)], List([], Load(), lineno=223, col_offset=18), lineno=223, col_offset=8), While(BoolOp(And(), [Compare(Name('index', Load(), lineno=224, col_offset=14), [Lt()], [Call(Name('len', Load(), lineno=224, col_offset=22), [Name('list', Load(), lineno=224, col_offset=26)], [], None, None, lineno=224, col_offset=22)], lineno=224, col_offset=14), Compare(Subscript(Subscript(Name('list', Load(), lineno=224, col_offset=36), Index(Name('index', Load(), lineno=224, col_offset=41)), Load(), lineno=224, col_offset=36), Index(Num(0, lineno=224, col_offset=48)), Load(), lineno=224, col_offset=36), [Lt()], [Name('startlineno', Load(), lineno=224, col_offset=53)], lineno=224, col_offset=36)], lineno=224, col_offset=14), [Expr(Call(Attribute(Name('orphans', Load(), lineno=225, col_offset=12), 'append', Load(), lineno=225, col_offset=12), [Subscript(Name('list', Load(), lineno=225, col_offset=27), Index(Name('index', Load(), lineno=225, col_offset=32)), Load(), lineno=225, col_offset=27)], [], None, None, lineno=225, col_offset=12), lineno=225, col_offset=12), AugAssign(Name('index', Store(), lineno=226, col_offset=12), Add(), Num(1, lineno=226, col_offset=21), lineno=226, col_offset=12)], [], lineno=224, col_offset=8), If(Name('orphans', Load(), lineno=227, col_offset=11), [Expr(Call(Name('reportphantomwarnings', Load(), lineno=228, col_offset=12), [Name('orphans', Load(), lineno=228, col_offset=34), Name('f', Load(), lineno=228, col_offset=43)], [], None, None, lineno=228, col_offset=12), lineno=228, col_offset=12)], [], lineno=227, col_offset=8), Assign([Name('warnings', Store(), lineno=229, col_offset=8)], List([], Load(), lineno=229, col_offset=19), lineno=229, col_offset=8), While(BoolOp(And(), [Compare(Name('index', Load(), lineno=230, col_offset=14), [Lt()], [Call(Name('len', Load(), lineno=230, col_offset=22), [Name('list', Load(), lineno=230, col_offset=26)], [], None, None, lineno=230, col_offset=22)], lineno=230, col_offset=14), Compare(Subscript(Subscript(Name('list', Load(), lineno=230, col_offset=36), Index(Name('index', Load(), lineno=230, col_offset=41)), Load(), lineno=230, col_offset=36), Index(Num(0, lineno=230, col_offset=48)), Load(), lineno=230, col_offset=36), [LtE()], [Name('endlineno', Load(), lineno=230, col_offset=54)], lineno=230, col_offset=36)], lineno=230, col_offset=14), [Expr(Call(Attribute(Name('warnings', Load(), lineno=231, col_offset=12), 'append', Load(), lineno=231, col_offset=12), [Subscript(Name('list', Load(), lineno=231, col_offset=28), Index(Name('index', Load(), lineno=231, col_offset=33)), Load(), lineno=231, col_offset=28)], [], None, None, lineno=231, col_offset=12), lineno=231, col_offset=12), AugAssign(Name('index', Store(), lineno=232, col_offset=12), Add(), Num(1, lineno=232, col_offset=21), lineno=232, col_offset=12)], [], lineno=230, col_offset=8), If(BoolOp(And(), [UnaryOp(Not(), Name('slashes', Load(), lineno=233, col_offset=15), lineno=233, col_offset=11), UnaryOp(Not(), Name('warnings', Load(), lineno=233, col_offset=31), lineno=233, col_offset=27)], lineno=233, col_offset=11), [Pass( lineno=234, col_offset=12)], [If(BoolOp(And(), [Name('slashes', Load(), lineno=235, col_offset=13), UnaryOp(Not(), Name('warnings', Load(), lineno=235, col_offset=29), lineno=235, col_offset=25)], lineno=235, col_offset=13), [Expr(Call(Name('report', Load(), lineno=236, col_offset=12), [Name('slashes', Load(), lineno=236, col_offset=19), Str('No conclusive evidence', lineno=236, col_offset=28)], [], None, None, lineno=236, col_offset=12), lineno=236, col_offset=12)], [If(BoolOp(And(), [Name('warnings', Load(), lineno=237, col_offset=13), UnaryOp(Not(), Name('slashes', Load(), lineno=237, col_offset=30), lineno=237, col_offset=26)], lineno=237, col_offset=13), [Expr(Call(Name('reportphantomwarnings', Load(), lineno=238, col_offset=12), [Name('warnings', Load(), lineno=238, col_offset=34), Name('f', Load(), lineno=238, col_offset=44)], [], None, None, lineno=238, col_offset=12), lineno=238, col_offset=12)], [If(Compare(Call(Name('len', Load(), lineno=240, col_offset=15), [Name('slashes', Load(), lineno=240, col_offset=19)], [], None, None, lineno=240, col_offset=15), [Gt()], [Num(1, lineno=240, col_offset=30)], lineno=240, col_offset=15), [If(UnaryOp(Not(), Name('multi_ok', Load(), lineno=241, col_offset=23), lineno=241, col_offset=19), [Assign([Name('rows', Store(), lineno=242, col_offset=20)], List([], Load(), lineno=242, col_offset=27), lineno=242, col_offset=20), Assign([Name('lastrow', Store(), lineno=243, col_offset=20)], Name('None', Load(), lineno=243, col_offset=30), lineno=243, col_offset=20), For(Tuple([Tuple([Name('row', Store(), lineno=244, col_offset=25), Name('col', Store(), lineno=244, col_offset=30)], Store(), lineno=244, col_offset=25), Name('line', Store(), lineno=244, col_offset=36)], Store(), lineno=244, col_offset=25), Name('slashes', Load(), lineno=244, col_offset=44), [If(Compare(Name('row', Load(), lineno=245, col_offset=27), [Eq()], [Name('lastrow', Load(), lineno=245, col_offset=34)], lineno=245, col_offset=27), [Continue( lineno=246, col_offset=28)], [], lineno=245, col_offset=24), Expr(Call(Attribute(Name('rows', Load(), lineno=247, col_offset=24), 'append', Load(), lineno=247, col_offset=24), [Name('row', Load(), lineno=247, col_offset=36)], [], None, None, lineno=247, col_offset=24), lineno=247, col_offset=24), Assign([Name('lastrow', Store(), lineno=248, col_offset=24)], Name('row', Load(), lineno=248, col_offset=34), lineno=248, col_offset=24)], [], lineno=244, col_offset=20), Assert(Name('rows', Load(), lineno=249, col_offset=27), None, lineno=249, col_offset=20), If(Compare(Call(Name('len', Load(), lineno=250, col_offset=23), [Name('rows', Load(), lineno=250, col_offset=27)], [], None, None, lineno=250, col_offset=23), [Eq()], [Num(1, lineno=250, col_offset=36)], lineno=250, col_offset=23), [Print(None, [Str('*** More than one / operator in line', lineno=251, col_offset=30), Subscript(Name('rows', Load(), lineno=251, col_offset=70), Index(Num(0, lineno=251, col_offset=75)), Load(), lineno=251, col_offset=70)], True, lineno=251, col_offset=24)], [Print(None, [Str('*** More than one / operator per statement', lineno=253, col_offset=30)], False, lineno=253, col_offset=24), Print(None, [BinOp(Str('in lines %d-%d', lineno=254, col_offset=30), Mod(), Tuple([Subscript(Name('rows', Load(), lineno=254, col_offset=50), Index(Num(0, lineno=254, col_offset=55)), Load(), lineno=254, col_offset=50), Subscript(Name('rows', Load(), lineno=254, col_offset=59), Index(Num(-1, lineno=254, col_offset=65)), Load(), lineno=254, col_offset=59)], Load(), lineno=254, col_offset=50), lineno=254, col_offset=30)], True, lineno=254, col_offset=24)], lineno=250, col_offset=20)], [], lineno=241, col_offset=16)], [], lineno=240, col_offset=12), Assign([Name('intlong', Store(), lineno=255, col_offset=12)], List([], Load(), lineno=255, col_offset=22), lineno=255, col_offset=12), Assign([Name('floatcomplex', Store(), lineno=256, col_offset=12)], List([], Load(), lineno=256, col_offset=27), lineno=256, col_offset=12), Assign([Name('bad', Store(), lineno=257, col_offset=12)], List([], Load(), lineno=257, col_offset=18), lineno=257, col_offset=12), For(Tuple([Name('lineno', Store(), lineno=258, col_offset=16), Name('what', Store(), lineno=258, col_offset=24)], Store(), lineno=258, col_offset=16), Name('warnings', Load(), lineno=258, col_offset=32), [If(Compare(Name('what', Load(), lineno=259, col_offset=19), [In()], [Tuple([Str('int', lineno=259, col_offset=28), Str('long', lineno=259, col_offset=35)], Load(), lineno=259, col_offset=28)], lineno=259, col_offset=19), [Expr(Call(Attribute(Name('intlong', Load(), lineno=260, col_offset=20), 'append', Load(), lineno=260, col_offset=20), [Name('what', Load(), lineno=260, col_offset=35)], [], None, None, lineno=260, col_offset=20), lineno=260, col_offset=20)], [If(Compare(Name('what', Load(), lineno=261, col_offset=21), [In()], [Tuple([Str('float', lineno=261, col_offset=30), Str('complex', lineno=261, col_offset=39)], Load(), lineno=261, col_offset=30)], lineno=261, col_offset=21), [Expr(Call(Attribute(Name('floatcomplex', Load(), lineno=262, col_offset=20), 'append', Load(), lineno=262, col_offset=20), [Name('what', Load(), lineno=262, col_offset=40)], [], None, None, lineno=262, col_offset=20), lineno=262, col_offset=20)], [Expr(Call(Attribute(Name('bad', Load(), lineno=264, col_offset=20), 'append', Load(), lineno=264, col_offset=20), [Name('what', Load(), lineno=264, col_offset=31)], [], None, None, lineno=264, col_offset=20), lineno=264, col_offset=20)], lineno=261, col_offset=21)], lineno=259, col_offset=16)], [], lineno=258, col_offset=12), Assign([Name('lastrow', Store(), lineno=265, col_offset=12)], Name('None', Load(), lineno=265, col_offset=22), lineno=265, col_offset=12), For(Tuple([Tuple([Name('row', Store(), lineno=266, col_offset=17), Name('col', Store(), lineno=266, col_offset=22)], Store(), lineno=266, col_offset=17), Name('line', Store(), lineno=266, col_offset=28)], Store(), lineno=266, col_offset=17), Name('slashes', Load(), lineno=266, col_offset=36), [If(Compare(Name('row', Load(), lineno=267, col_offset=19), [Eq()], [Name('lastrow', Load(), lineno=267, col_offset=26)], lineno=267, col_offset=19), [Continue( lineno=268, col_offset=20)], [], lineno=267, col_offset=16), Assign([Name('lastrow', Store(), lineno=269, col_offset=16)], Name('row', Load(), lineno=269, col_offset=26), lineno=269, col_offset=16), Assign([Name('line', Store(), lineno=270, col_offset=16)], Call(Name('chop', Load(), lineno=270, col_offset=23), [Name('line', Load(), lineno=270, col_offset=28)], [], None, None, lineno=270, col_offset=23), lineno=270, col_offset=16), If(Compare(Subscript(Name('line', Load(), lineno=271, col_offset=19), Slice(Name('col', Load(), lineno=271, col_offset=24), BinOp(Name('col', Load(), lineno=271, col_offset=28), Add(), Num(1, lineno=271, col_offset=32), lineno=271, col_offset=28), None), Load(), lineno=271, col_offset=19), [NotEq()], [Str('/', lineno=271, col_offset=38)], lineno=271, col_offset=19), [Print(None, [BinOp(Str("*** Can't find the / operator in line %d:", lineno=272, col_offset=26), Mod(), Name('row', Load(), lineno=272, col_offset=72), lineno=272, col_offset=26)], True, lineno=272, col_offset=20), Print(None, [Str('*', lineno=273, col_offset=26), Name('line', Load(), lineno=273, col_offset=31)], True, lineno=273, col_offset=20), Continue( lineno=274, col_offset=20)], [], lineno=271, col_offset=16), If(Name('bad', Load(), lineno=275, col_offset=19), [Print(None, [BinOp(Str('*** Bad warning for line %d:', lineno=276, col_offset=26), Mod(), Name('row', Load(), lineno=276, col_offset=59), lineno=276, col_offset=26), Name('bad', Load(), lineno=276, col_offset=64)], True, lineno=276, col_offset=20), Print(None, [Str('*', lineno=277, col_offset=26), Name('line', Load(), lineno=277, col_offset=31)], True, lineno=277, col_offset=20)], [If(BoolOp(And(), [Name('intlong', Load(), lineno=278, col_offset=21), UnaryOp(Not(), Name('floatcomplex', Load(), lineno=278, col_offset=37), lineno=278, col_offset=33)], lineno=278, col_offset=21), [Print(None, [BinOp(Str('%dc%d', lineno=279, col_offset=26), Mod(), Tuple([Name('row', Load(), lineno=279, col_offset=37), Name('row', Load(), lineno=279, col_offset=42)], Load(), lineno=279, col_offset=37), lineno=279, col_offset=26)], True, lineno=279, col_offset=20), Print(None, [Str('<', lineno=280, col_offset=26), Name('line', Load(), lineno=280, col_offset=31)], True, lineno=280, col_offset=20), Print(None, [Str('---', lineno=281, col_offset=26)], True, lineno=281, col_offset=20), Print(None, [Str('>', lineno=282, col_offset=26), BinOp(BinOp(Subscript(Name('line', Load(), lineno=282, col_offset=31), Slice(None, Name('col', Load(), lineno=282, col_offset=37), None), Load(), lineno=282, col_offset=31), Add(), Str('/', lineno=282, col_offset=44), lineno=282, col_offset=31), Add(), Subscript(Name('line', Load(), lineno=282, col_offset=50), Slice(Name('col', Load(), lineno=282, col_offset=55), None, None), Load(), lineno=282, col_offset=50), lineno=282, col_offset=48)], True, lineno=282, col_offset=20)], [If(BoolOp(And(), [Name('floatcomplex', Load(), lineno=283, col_offset=21), UnaryOp(Not(), Name('intlong', Load(), lineno=283, col_offset=42), lineno=283, col_offset=38)], lineno=283, col_offset=21), [Print(None, [BinOp(Str('True division / operator at line %d:', lineno=284, col_offset=26), Mod(), Name('row', Load(), lineno=284, col_offset=67), lineno=284, col_offset=26)], True, lineno=284, col_offset=20), Print(None, [Str('=', lineno=285, col_offset=26), Name('line', Load(), lineno=285, col_offset=31)], True, lineno=285, col_offset=20)], [If(BoolOp(And(), [Name('intlong', Load(), lineno=286, col_offset=21), Name('floatcomplex', Load(), lineno=286, col_offset=33)], lineno=286, col_offset=21), [Print(None, [BinOp(Str('*** Ambiguous / operator (%s, %s) at line %d:', lineno=287, col_offset=26), Mod(), Tuple([Call(Attribute(Str('|', lineno=288, col_offset=24), 'join', Load(), lineno=288, col_offset=24), [Name('intlong', Load(), lineno=288, col_offset=33)], [], None, None, lineno=288, col_offset=24), Call(Attribute(Str('|', lineno=288, col_offset=43), 'join', Load(), lineno=288, col_offset=43), [Name('floatcomplex', Load(), lineno=288, col_offset=52)], [], None, None, lineno=288, col_offset=43), Name('row', Load(), lineno=288, col_offset=67)], Load(), lineno=288, col_offset=24), lineno=287, col_offset=26)], True, lineno=287, col_offset=20), Print(None, [Str('?', lineno=289, col_offset=26), Name('line', Load(), lineno=289, col_offset=31)], True, lineno=289, col_offset=20)], [], lineno=286, col_offset=21)], lineno=283, col_offset=21)], lineno=278, col_offset=21)], lineno=275, col_offset=16)], [], lineno=266, col_offset=12)], lineno=237, col_offset=13)], lineno=235, col_offset=13)], lineno=233, col_offset=8)], [], lineno=218, col_offset=4), Expr(Call(Attribute(Name('fp', Load(), lineno=290, col_offset=4), 'close', Load(), lineno=290, col_offset=4), [], [], None, None, lineno=290, col_offset=4), lineno=290, col_offset=4)], [], lineno=205, col_offset=0), FunctionDef('reportphantomwarnings', arguments([Name('warnings', Param(), lineno=292, col_offset=26), Name('f', Param(), lineno=292, col_offset=36)], None, None, []), [Assign([Name('blocks', Store(), lineno=293, col_offset=4)], List([], Load(), lineno=293, col_offset=13), lineno=293, col_offset=4), Assign([Name('lastrow', Store(), lineno=294, col_offset=4)], Name('None', Load(), lineno=294, col_offset=14), lineno=294, col_offset=4), Assign([Name('lastblock', Store(), lineno=295, col_offset=4)], Name('None', Load(), lineno=295, col_offset=16), lineno=295, col_offset=4), For(Tuple([Name('row', Store(), lineno=296, col_offset=8), Name('what', Store(), lineno=296, col_offset=13)], Store(), lineno=296, col_offset=8), Name('warnings', Load(), lineno=296, col_offset=21), [If(Compare(Name('row', Load(), lineno=297, col_offset=11), [NotEq()], [Name('lastrow', Load(), lineno=297, col_offset=18)], lineno=297, col_offset=11), [Assign([Name('lastblock', Store(), lineno=298, col_offset=12)], List([Name('row', Load(), lineno=298, col_offset=25)], Load(), lineno=298, col_offset=24), lineno=298, col_offset=12), Expr(Call(Attribute(Name('blocks', Load(), lineno=299, col_offset=12), 'append', Load(), lineno=299, col_offset=12), [Name('lastblock', Load(), lineno=299, col_offset=26)], [], None, None, lineno=299, col_offset=12), lineno=299, col_offset=12)], [], lineno=297, col_offset=8), Expr(Call(Attribute(Name('lastblock', Load(), lineno=300, col_offset=8), 'append', Load(), lineno=300, col_offset=8), [Name('what', Load(), lineno=300, col_offset=25)], [], None, None, lineno=300, col_offset=8), lineno=300, col_offset=8)], [], lineno=296, col_offset=4), For(Name('block', Store(), lineno=301, col_offset=8), Name('blocks', Load(), lineno=301, col_offset=17), [Assign([Name('row', Store(), lineno=302, col_offset=8)], Subscript(Name('block', Load(), lineno=302, col_offset=14), Index(Num(0, lineno=302, col_offset=20)), Load(), lineno=302, col_offset=14), lineno=302, col_offset=8), Assign([Name('whats', Store(), lineno=303, col_offset=8)], Call(Attribute(Str('/', lineno=303, col_offset=16), 'join', Load(), lineno=303, col_offset=16), [Subscript(Name('block', Load(), lineno=303, col_offset=25), Slice(Num(1, lineno=303, col_offset=31), None, None), Load(), lineno=303, col_offset=25)], [], None, None, lineno=303, col_offset=16), lineno=303, col_offset=8), Print(None, [BinOp(Str('*** Phantom %s warnings for line %d:', lineno=304, col_offset=14), Mod(), Tuple([Name('whats', Load(), lineno=304, col_offset=56), Name('row', Load(), lineno=304, col_offset=63)], Load(), lineno=304, col_offset=56), lineno=304, col_offset=14)], True, lineno=304, col_offset=8), Expr(Call(Attribute(Name('f', Load(), lineno=305, col_offset=8), 'report', Load(), lineno=305, col_offset=8), [Name('row', Load(), lineno=305, col_offset=17)], [keyword('mark', Str('*', lineno=305, col_offset=27))], None, None, lineno=305, col_offset=8), lineno=305, col_offset=8)], [], lineno=301, col_offset=4)], [], lineno=292, col_offset=0), FunctionDef('report', arguments([Name('slashes', Param(), lineno=307, col_offset=11), Name('message', Param(), lineno=307, col_offset=20)], None, None, []), [Assign([Name('lastrow', Store(), lineno=308, col_offset=4)], Name('None', Load(), lineno=308, col_offset=14), lineno=308, col_offset=4), For(Tuple([Tuple([Name('row', Store(), lineno=309, col_offset=9), Name('col', Store(), lineno=309, col_offset=14)], Store(), lineno=309, col_offset=9), Name('line', Store(), lineno=309, col_offset=20)], Store(), lineno=309, col_offset=9), Name('slashes', Load(), lineno=309, col_offset=28), [If(Compare(Name('row', Load(), lineno=310, col_offset=11), [NotEq()], [Name('lastrow', Load(), lineno=310, col_offset=18)], lineno=310, col_offset=11), [Print(None, [BinOp(Str('*** %s on line %d:', lineno=311, col_offset=18), Mod(), Tuple([Name('message', Load(), lineno=311, col_offset=42), Name('row', Load(), lineno=311, col_offset=51)], Load(), lineno=311, col_offset=42), lineno=311, col_offset=18)], True, lineno=311, col_offset=12), Print(None, [Str('*', lineno=312, col_offset=18), Call(Name('chop', Load(), lineno=312, col_offset=23), [Name('line', Load(), lineno=312, col_offset=28)], [], None, None, lineno=312, col_offset=23)], True, lineno=312, col_offset=12), Assign([Name('lastrow', Store(), lineno=313, col_offset=12)], Name('row', Load(), lineno=313, col_offset=22), lineno=313, col_offset=12)], [], lineno=310, col_offset=8)], [], lineno=309, col_offset=4)], [], lineno=307, col_offset=0), ClassDef('FileContext', [], [FunctionDef('__init__', arguments([Name('self', Param(), lineno=316, col_offset=17), Name('fp', Param(), lineno=316, col_offset=23), Name('window', Param(), lineno=316, col_offset=27), Name('lineno', Param(), lineno=316, col_offset=37)], None, None, [Num(5, lineno=316, col_offset=34), Num(1, lineno=316, col_offset=44)]), [Assign([Attribute(Name('self', Load(), lineno=317, col_offset=8), 'fp', Store(), lineno=317, col_offset=8)], Name('fp', Load(), lineno=317, col_offset=18), lineno=317, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=318, col_offset=8), 'window', Store(), lineno=318, col_offset=8)], Num(5, lineno=318, col_offset=22), lineno=318, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=319, col_offset=8), 'lineno', Store(), lineno=319, col_offset=8)], Num(1, lineno=319, col_offset=22), lineno=319, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=320, col_offset=8), 'eoflookahead', Store(), lineno=320, col_offset=8)], Num(0, lineno=320, col_offset=28), lineno=320, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=321, col_offset=8), 'lookahead', Store(), lineno=321, col_offset=8)], List([], Load(), lineno=321, col_offset=25), lineno=321, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=322, col_offset=8), 'buffer', Store(), lineno=322, col_offset=8)], List([], Load(), lineno=322, col_offset=22), lineno=322, col_offset=8)], [], lineno=316, col_offset=4), FunctionDef('fill', arguments([Name('self', Param(), lineno=323, col_offset=13)], None, None, []), [While(BoolOp(And(), [Compare(Call(Name('len', Load(), lineno=324, col_offset=14), [Attribute(Name('self', Load(), lineno=324, col_offset=18), 'lookahead', Load(), lineno=324, col_offset=18)], [], None, None, lineno=324, col_offset=14), [Lt()], [Attribute(Name('self', Load(), lineno=324, col_offset=36), 'window', Load(), lineno=324, col_offset=36)], lineno=324, col_offset=14), UnaryOp(Not(), Attribute(Name('self', Load(), lineno=324, col_offset=56), 'eoflookahead', Load(), lineno=324, col_offset=56), lineno=324, col_offset=52)], lineno=324, col_offset=14), [Assign([Name('line', Store(), lineno=325, col_offset=12)], Call(Attribute(Attribute(Name('self', Load(), lineno=325, col_offset=19), 'fp', Load(), lineno=325, col_offset=19), 'readline', Load(), lineno=325, col_offset=19), [], [], None, None, lineno=325, col_offset=19), lineno=325, col_offset=12), If(UnaryOp(Not(), Name('line', Load(), lineno=326, col_offset=19), lineno=326, col_offset=15), [Assign([Attribute(Name('self', Load(), lineno=327, col_offset=16), 'eoflookahead', Store(), lineno=327, col_offset=16)], Num(1, lineno=327, col_offset=36), lineno=327, col_offset=16), Break( lineno=328, col_offset=16)], [], lineno=326, col_offset=12), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=329, col_offset=12), 'lookahead', Load(), lineno=329, col_offset=12), 'append', Load(), lineno=329, col_offset=12), [Name('line', Load(), lineno=329, col_offset=34)], [], None, None, lineno=329, col_offset=12), lineno=329, col_offset=12)], [], lineno=324, col_offset=8)], [], lineno=323, col_offset=4), FunctionDef('readline', arguments([Name('self', Param(), lineno=330, col_offset=17)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=331, col_offset=8), 'fill', Load(), lineno=331, col_offset=8), [], [], None, None, lineno=331, col_offset=8), lineno=331, col_offset=8), If(UnaryOp(Not(), Attribute(Name('self', Load(), lineno=332, col_offset=15), 'lookahead', Load(), lineno=332, col_offset=15), lineno=332, col_offset=11), [Return(Str('', lineno=333, col_offset=19), lineno=333, col_offset=12)], [], lineno=332, col_offset=8), Assign([Name('line', Store(), lineno=334, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=334, col_offset=15), 'lookahead', Load(), lineno=334, col_offset=15), 'pop', Load(), lineno=334, col_offset=15), [Num(0, lineno=334, col_offset=34)], [], None, None, lineno=334, col_offset=15), lineno=334, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=335, col_offset=8), 'buffer', Load(), lineno=335, col_offset=8), 'append', Load(), lineno=335, col_offset=8), [Name('line', Load(), lineno=335, col_offset=27)], [], None, None, lineno=335, col_offset=8), lineno=335, col_offset=8), AugAssign(Attribute(Name('self', Load(), lineno=336, col_offset=8), 'lineno', Store(), lineno=336, col_offset=8), Add(), Num(1, lineno=336, col_offset=23), lineno=336, col_offset=8), Return(Name('line', Load(), lineno=337, col_offset=15), lineno=337, col_offset=8)], [], lineno=330, col_offset=4), FunctionDef('truncate', arguments([Name('self', Param(), lineno=338, col_offset=17)], None, None, []), [Delete([Subscript(Attribute(Name('self', Load(), lineno=339, col_offset=12), 'buffer', Load(), lineno=339, col_offset=12), Slice(UnaryOp(USub(), Name('window', Load(), lineno=339, col_offset=25), lineno=339, col_offset=24), None, None), Del(), lineno=339, col_offset=12)], lineno=339, col_offset=8)], [], lineno=338, col_offset=4), FunctionDef('__getitem__', arguments([Name('self', Param(), lineno=340, col_offset=20), Name('index', Param(), lineno=340, col_offset=26)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=341, col_offset=8), 'fill', Load(), lineno=341, col_offset=8), [], [], None, None, lineno=341, col_offset=8), lineno=341, col_offset=8), Assign([Name('bufstart', Store(), lineno=342, col_offset=8)], BinOp(Attribute(Name('self', Load(), lineno=342, col_offset=19), 'lineno', Load(), lineno=342, col_offset=19), Sub(), Call(Name('len', Load(), lineno=342, col_offset=33), [Attribute(Name('self', Load(), lineno=342, col_offset=37), 'buffer', Load(), lineno=342, col_offset=37)], [], None, None, lineno=342, col_offset=33), lineno=342, col_offset=19), lineno=342, col_offset=8), Assign([Name('lookend', Store(), lineno=343, col_offset=8)], BinOp(Attribute(Name('self', Load(), lineno=343, col_offset=18), 'lineno', Load(), lineno=343, col_offset=18), Add(), Call(Name('len', Load(), lineno=343, col_offset=32), [Attribute(Name('self', Load(), lineno=343, col_offset=36), 'lookahead', Load(), lineno=343, col_offset=36)], [], None, None, lineno=343, col_offset=32), lineno=343, col_offset=18), lineno=343, col_offset=8), If(Compare(Name('bufstart', Load(), lineno=344, col_offset=11), [LtE(), Lt()], [Name('index', Load(), lineno=344, col_offset=23), Attribute(Name('self', Load(), lineno=344, col_offset=31), 'lineno', Load(), lineno=344, col_offset=31)], lineno=344, col_offset=11), [Return(Subscript(Attribute(Name('self', Load(), lineno=345, col_offset=19), 'buffer', Load(), lineno=345, col_offset=19), Index(BinOp(Name('index', Load(), lineno=345, col_offset=31), Sub(), Name('bufstart', Load(), lineno=345, col_offset=39), lineno=345, col_offset=31)), Load(), lineno=345, col_offset=19), lineno=345, col_offset=12)], [], lineno=344, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=346, col_offset=11), 'lineno', Load(), lineno=346, col_offset=11), [LtE(), Lt()], [Name('index', Load(), lineno=346, col_offset=26), Name('lookend', Load(), lineno=346, col_offset=34)], lineno=346, col_offset=11), [Return(Subscript(Attribute(Name('self', Load(), lineno=347, col_offset=19), 'lookahead', Load(), lineno=347, col_offset=19), Index(BinOp(Name('index', Load(), lineno=347, col_offset=34), Sub(), Attribute(Name('self', Load(), lineno=347, col_offset=42), 'lineno', Load(), lineno=347, col_offset=42), lineno=347, col_offset=34)), Load(), lineno=347, col_offset=19), lineno=347, col_offset=12)], [], lineno=346, col_offset=8), Raise(Name('KeyError', Load(), lineno=348, col_offset=14), None, None, lineno=348, col_offset=8)], [], lineno=340, col_offset=4), FunctionDef('report', arguments([Name('self', Param(), lineno=349, col_offset=15), Name('first', Param(), lineno=349, col_offset=21), Name('last', Param(), lineno=349, col_offset=28), Name('mark', Param(), lineno=349, col_offset=39)], None, None, [Name('None', Load(), lineno=349, col_offset=33), Str('*', lineno=349, col_offset=44)]), [If(Compare(Name('last', Load(), lineno=350, col_offset=11), [Is()], [Name('None', Load(), lineno=350, col_offset=19)], lineno=350, col_offset=11), [Assign([Name('last', Store(), lineno=351, col_offset=12)], Name('first', Load(), lineno=351, col_offset=19), lineno=351, col_offset=12)], [], lineno=350, col_offset=8), For(Name('i', Store(), lineno=352, col_offset=12), Call(Name('range', Load(), lineno=352, col_offset=17), [Name('first', Load(), lineno=352, col_offset=23), BinOp(Name('last', Load(), lineno=352, col_offset=30), Add(), Num(1, lineno=352, col_offset=35), lineno=352, col_offset=30)], [], None, None, lineno=352, col_offset=17), [TryExcept([Assign([Name('line', Store(), lineno=354, col_offset=16)], Subscript(Name('self', Load(), lineno=354, col_offset=23), Index(Name('first', Load(), lineno=354, col_offset=28)), Load(), lineno=354, col_offset=23), lineno=354, col_offset=16)], [ExceptHandler(Name('KeyError', Load(), lineno=355, col_offset=19), None, [Assign([Name('line', Store(), lineno=356, col_offset=16)], Str('<missing line>', lineno=356, col_offset=23), lineno=356, col_offset=16)], lineno=355, col_offset=12)], [], lineno=353, col_offset=12), Print(None, [Name('mark', Load(), lineno=357, col_offset=18), Call(Name('chop', Load(), lineno=357, col_offset=24), [Name('line', Load(), lineno=357, col_offset=29)], [], None, None, lineno=357, col_offset=24)], True, lineno=357, col_offset=12)], [], lineno=352, col_offset=8)], [], lineno=349, col_offset=4)], [], lineno=315, col_offset=0), FunctionDef('scanline', arguments([Name('g', Param(), lineno=359, col_offset=13)], None, None, []), [Assign([Name('slashes', Store(), lineno=360, col_offset=4)], List([], Load(), lineno=360, col_offset=14), lineno=360, col_offset=4), Assign([Name('startlineno', Store(), lineno=361, col_offset=4)], Name('None', Load(), lineno=361, col_offset=18), lineno=361, col_offset=4), Assign([Name('endlineno', Store(), lineno=362, col_offset=4)], Name('None', Load(), lineno=362, col_offset=16), lineno=362, col_offset=4), For(Tuple([Name('type', Store(), lineno=363, col_offset=8), Name('token', Store(), lineno=363, col_offset=14), Name('start', Store(), lineno=363, col_offset=21), Name('end', Store(), lineno=363, col_offset=28), Name('line', Store(), lineno=363, col_offset=33)], Store(), lineno=363, col_offset=8), Name('g', Load(), lineno=363, col_offset=41), [Assign([Name('endlineno', Store(), lineno=364, col_offset=8)], Subscript(Name('end', Load(), lineno=364, col_offset=20), Index(Num(0, lineno=364, col_offset=24)), Load(), lineno=364, col_offset=20), lineno=364, col_offset=8), If(Compare(Name('startlineno', Load(), lineno=365, col_offset=11), [Is()], [Name('None', Load(), lineno=365, col_offset=26)], lineno=365, col_offset=11), [Assign([Name('startlineno', Store(), lineno=366, col_offset=12)], Name('endlineno', Load(), lineno=366, col_offset=26), lineno=366, col_offset=12)], [], lineno=365, col_offset=8), If(Compare(Name('token', Load(), lineno=367, col_offset=11), [In()], [Tuple([Str('/', lineno=367, col_offset=21), Str('/=', lineno=367, col_offset=26)], Load(), lineno=367, col_offset=21)], lineno=367, col_offset=11), [Expr(Call(Attribute(Name('slashes', Load(), lineno=368, col_offset=12), 'append', Load(), lineno=368, col_offset=12), [Tuple([Name('start', Load(), lineno=368, col_offset=28), Name('line', Load(), lineno=368, col_offset=35)], Load(), lineno=368, col_offset=28)], [], None, None, lineno=368, col_offset=12), lineno=368, col_offset=12)], [], lineno=367, col_offset=8), If(Compare(Name('type', Load(), lineno=369, col_offset=11), [Eq()], [Attribute(Name('tokenize', Load(), lineno=369, col_offset=19), 'NEWLINE', Load(), lineno=369, col_offset=19)], lineno=369, col_offset=11), [Break( lineno=370, col_offset=12)], [], lineno=369, col_offset=8)], [], lineno=363, col_offset=4), Return(Tuple([Name('startlineno', Load(), lineno=371, col_offset=11), Name('endlineno', Load(), lineno=371, col_offset=24), Name('slashes', Load(), lineno=371, col_offset=35)], Load(), lineno=371, col_offset=11), lineno=371, col_offset=4)], [], lineno=359, col_offset=0), FunctionDef('chop', arguments([Name('line', Param(), lineno=373, col_offset=9)], None, None, []), [If(Call(Attribute(Name('line', Load(), lineno=374, col_offset=7), 'endswith', Load(), lineno=374, col_offset=7), [Str('\n', lineno=374, col_offset=21)], [], None, None, lineno=374, col_offset=7), [Return(Subscript(Name('line', Load(), lineno=375, col_offset=15), Slice(None, Num(-1, lineno=375, col_offset=22), None), Load(), lineno=375, col_offset=15), lineno=375, col_offset=8)], [Return(Name('line', Load(), lineno=377, col_offset=15), lineno=377, col_offset=8)], lineno=374, col_offset=4)], [], lineno=373, col_offset=0), If(Compare(Name('__name__', Load(), lineno=379, col_offset=3), [Eq()], [Str('__main__', lineno=379, col_offset=15)], lineno=379, col_offset=3), [Expr(Call(Attribute(Name('sys', Load(), lineno=380, col_offset=4), 'exit', Load(), lineno=380, col_offset=4), [Call(Name('main', Load(), lineno=380, col_offset=13), [], [], None, None, lineno=380, col_offset=13)], [], None, None, lineno=380, col_offset=4), lineno=380, col_offset=4)], [], lineno=379, col_offset=0)])
