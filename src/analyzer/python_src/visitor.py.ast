Module([ImportFrom('compiler', [alias('ast', None)], 0, lineno=1, col_offset=0), ClassDef('ASTVisitor', [], [Expr(Str("Performs a depth-first walk of the AST\n\n    The ASTVisitor will walk the AST, performing either a preorder or\n    postorder traversal depending on which method is called.\n\n    methods:\n    preorder(tree, visitor)\n    postorder(tree, visitor)\n        tree: an instance of ast.Node\n        visitor: an instance with visitXXX methods\n\n    The ASTVisitor is responsible for walking over the tree in the\n    correct order.  For each node, it checks the visitor argument for\n    a method named 'visitNodeType' where NodeType is the name of the\n    node's class, e.g. Class.  If the method exists, it is called\n    with the node as its sole argument.\n\n    The visitor method for a particular node type can control how\n    child nodes are visited during a preorder walk.  (It can't control\n    the order during a postorder walk, because it is called _after_\n    the walk has occurred.)  The ASTVisitor modifies the visitor\n    argument by adding a visit method to the visitor; this method can\n    be used to visit a child node of arbitrary type.\n    ", lineno=30, col_offset=-1), lineno=30, col_offset=-1), Assign([Name('VERBOSE', Store(), lineno=32, col_offset=4)], Num(0, lineno=32, col_offset=14), lineno=32, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=34, col_offset=17)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=35, col_offset=8), 'node', Store(), lineno=35, col_offset=8)], Name('None', Load(), lineno=35, col_offset=20), lineno=35, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=36, col_offset=8), '_cache', Store(), lineno=36, col_offset=8)], Dict([], [], lineno=36, col_offset=22), lineno=36, col_offset=8)], [], lineno=34, col_offset=4), FunctionDef('default', arguments([Name('self', Param(), lineno=38, col_offset=16), Name('node', Param(), lineno=38, col_offset=22)], 'args', None, []), [For(Name('child', Store(), lineno=39, col_offset=12), Call(Attribute(Name('node', Load(), lineno=39, col_offset=21), 'getChildNodes', Load(), lineno=39, col_offset=21), [], [], None, None, lineno=39, col_offset=21), [Expr(Call(Attribute(Name('self', Load(), lineno=40, col_offset=12), 'dispatch', Load(), lineno=40, col_offset=12), [Name('child', Load(), lineno=40, col_offset=26)], [], Name('args', Load(), lineno=40, col_offset=34), None, lineno=40, col_offset=12), lineno=40, col_offset=12)], [], lineno=39, col_offset=8)], [], lineno=38, col_offset=4), FunctionDef('dispatch', arguments([Name('self', Param(), lineno=42, col_offset=17), Name('node', Param(), lineno=42, col_offset=23)], 'args', None, []), [Assign([Attribute(Name('self', Load(), lineno=43, col_offset=8), 'node', Store(), lineno=43, col_offset=8)], Name('node', Load(), lineno=43, col_offset=20), lineno=43, col_offset=8), Assign([Name('klass', Store(), lineno=44, col_offset=8)], Attribute(Name('node', Load(), lineno=44, col_offset=16), '__class__', Load(), lineno=44, col_offset=16), lineno=44, col_offset=8), Assign([Name('meth', Store(), lineno=45, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=45, col_offset=15), '_cache', Load(), lineno=45, col_offset=15), 'get', Load(), lineno=45, col_offset=15), [Name('klass', Load(), lineno=45, col_offset=31), Name('None', Load(), lineno=45, col_offset=38)], [], None, None, lineno=45, col_offset=15), lineno=45, col_offset=8), If(Compare(Name('meth', Load(), lineno=46, col_offset=11), [Is()], [Name('None', Load(), lineno=46, col_offset=19)], lineno=46, col_offset=11), [Assign([Name('className', Store(), lineno=47, col_offset=12)], Attribute(Name('klass', Load(), lineno=47, col_offset=24), '__name__', Load(), lineno=47, col_offset=24), lineno=47, col_offset=12), Assign([Name('meth', Store(), lineno=48, col_offset=12)], Call(Name('getattr', Load(), lineno=48, col_offset=19), [Attribute(Name('self', Load(), lineno=48, col_offset=27), 'visitor', Load(), lineno=48, col_offset=27), BinOp(Str('visit', lineno=48, col_offset=41), Add(), Name('className', Load(), lineno=48, col_offset=51), lineno=48, col_offset=41), Attribute(Name('self', Load(), lineno=48, col_offset=62), 'default', Load(), lineno=48, col_offset=62)], [], None, None, lineno=48, col_offset=19), lineno=48, col_offset=12), Assign([Subscript(Attribute(Name('self', Load(), lineno=49, col_offset=12), '_cache', Load(), lineno=49, col_offset=12), Index(Name('klass', Load(), lineno=49, col_offset=24)), Store(), lineno=49, col_offset=12)], Name('meth', Load(), lineno=49, col_offset=33), lineno=49, col_offset=12)], [], lineno=46, col_offset=8), Return(Call(Name('meth', Load(), lineno=57, col_offset=15), [Name('node', Load(), lineno=57, col_offset=20)], [], Name('args', Load(), lineno=57, col_offset=27), None, lineno=57, col_offset=15), lineno=57, col_offset=8)], [], lineno=42, col_offset=4), FunctionDef('preorder', arguments([Name('self', Param(), lineno=59, col_offset=17), Name('tree', Param(), lineno=59, col_offset=23), Name('visitor', Param(), lineno=59, col_offset=29)], 'args', None, []), [Expr(Str('Do preorder walk of tree using visitor', lineno=60, col_offset=8), lineno=60, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=61, col_offset=8), 'visitor', Store(), lineno=61, col_offset=8)], Name('visitor', Load(), lineno=61, col_offset=23), lineno=61, col_offset=8), Assign([Attribute(Name('visitor', Load(), lineno=62, col_offset=8), 'visit', Store(), lineno=62, col_offset=8)], Attribute(Name('self', Load(), lineno=62, col_offset=24), 'dispatch', Load(), lineno=62, col_offset=24), lineno=62, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=63, col_offset=8), 'dispatch', Load(), lineno=63, col_offset=8), [Name('tree', Load(), lineno=63, col_offset=22)], [], Name('args', Load(), lineno=63, col_offset=29), None, lineno=63, col_offset=8), lineno=63, col_offset=8)], [], lineno=59, col_offset=4)], [], lineno=6, col_offset=0), ClassDef('ExampleASTVisitor', [Name('ASTVisitor', Load(), lineno=65, col_offset=24)], [Expr(Str("Prints examples of the nodes that aren't visited\n\n    This visitor-driver is only useful for development, when it's\n    helpful to develop a visitor incrementally, and get feedback on what\n    you still have to do.\n    ", lineno=71, col_offset=-1), lineno=71, col_offset=-1), Assign([Name('examples', Store(), lineno=72, col_offset=4)], Dict([], [], lineno=72, col_offset=15), lineno=72, col_offset=4), FunctionDef('dispatch', arguments([Name('self', Param(), lineno=74, col_offset=17), Name('node', Param(), lineno=74, col_offset=23)], 'args', None, []), [Assign([Attribute(Name('self', Load(), lineno=75, col_offset=8), 'node', Store(), lineno=75, col_offset=8)], Name('node', Load(), lineno=75, col_offset=20), lineno=75, col_offset=8), Assign([Name('meth', Store(), lineno=76, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=76, col_offset=15), '_cache', Load(), lineno=76, col_offset=15), 'get', Load(), lineno=76, col_offset=15), [Attribute(Name('node', Load(), lineno=76, col_offset=31), '__class__', Load(), lineno=76, col_offset=31), Name('None', Load(), lineno=76, col_offset=47)], [], None, None, lineno=76, col_offset=15), lineno=76, col_offset=8), Assign([Name('className', Store(), lineno=77, col_offset=8)], Attribute(Attribute(Name('node', Load(), lineno=77, col_offset=20), '__class__', Load(), lineno=77, col_offset=20), '__name__', Load(), lineno=77, col_offset=20), lineno=77, col_offset=8), If(Compare(Name('meth', Load(), lineno=78, col_offset=11), [Is()], [Name('None', Load(), lineno=78, col_offset=19)], lineno=78, col_offset=11), [Assign([Name('meth', Store(), lineno=79, col_offset=12)], Call(Name('getattr', Load(), lineno=79, col_offset=19), [Attribute(Name('self', Load(), lineno=79, col_offset=27), 'visitor', Load(), lineno=79, col_offset=27), BinOp(Str('visit', lineno=79, col_offset=41), Add(), Name('className', Load(), lineno=79, col_offset=51), lineno=79, col_offset=41), Num(0, lineno=79, col_offset=62)], [], None, None, lineno=79, col_offset=19), lineno=79, col_offset=12), Assign([Subscript(Attribute(Name('self', Load(), lineno=80, col_offset=12), '_cache', Load(), lineno=80, col_offset=12), Index(Attribute(Name('node', Load(), lineno=80, col_offset=24), '__class__', Load(), lineno=80, col_offset=24)), Store(), lineno=80, col_offset=12)], Name('meth', Load(), lineno=80, col_offset=42), lineno=80, col_offset=12)], [], lineno=78, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=81, col_offset=11), 'VERBOSE', Load(), lineno=81, col_offset=11), [Gt()], [Num(1, lineno=81, col_offset=26)], lineno=81, col_offset=11), [Print(None, [Str('dispatch', lineno=82, col_offset=18), Name('className', Load(), lineno=82, col_offset=30), BoolOp(Or(), [BoolOp(And(), [Name('meth', Load(), lineno=82, col_offset=42), Attribute(Name('meth', Load(), lineno=82, col_offset=51), '__name__', Load(), lineno=82, col_offset=51)], lineno=82, col_offset=42), Str('', lineno=82, col_offset=68)], lineno=82, col_offset=42)], True, lineno=82, col_offset=12)], [], lineno=81, col_offset=8), If(Name('meth', Load(), lineno=83, col_offset=11), [Expr(Call(Name('meth', Load(), lineno=84, col_offset=12), [Name('node', Load(), lineno=84, col_offset=17)], [], Name('args', Load(), lineno=84, col_offset=24), None, lineno=84, col_offset=12), lineno=84, col_offset=12)], [If(Compare(Attribute(Name('self', Load(), lineno=85, col_offset=13), 'VERBOSE', Load(), lineno=85, col_offset=13), [Gt()], [Num(0, lineno=85, col_offset=28)], lineno=85, col_offset=13), [Assign([Name('klass', Store(), lineno=86, col_offset=12)], Attribute(Name('node', Load(), lineno=86, col_offset=20), '__class__', Load(), lineno=86, col_offset=20), lineno=86, col_offset=12), If(Compare(Name('klass', Load(), lineno=87, col_offset=15), [NotIn()], [Attribute(Name('self', Load(), lineno=87, col_offset=28), 'examples', Load(), lineno=87, col_offset=28)], lineno=87, col_offset=15), [Assign([Subscript(Attribute(Name('self', Load(), lineno=88, col_offset=16), 'examples', Load(), lineno=88, col_offset=16), Index(Name('klass', Load(), lineno=88, col_offset=30)), Store(), lineno=88, col_offset=16)], Name('klass', Load(), lineno=88, col_offset=39), lineno=88, col_offset=16), Print(None, [], True, lineno=89, col_offset=16), Print(None, [Attribute(Name('self', Load(), lineno=90, col_offset=22), 'visitor', Load(), lineno=90, col_offset=22)], True, lineno=90, col_offset=16), Print(None, [Name('klass', Load(), lineno=91, col_offset=22)], True, lineno=91, col_offset=16), For(Name('attr', Store(), lineno=92, col_offset=20), Call(Name('dir', Load(), lineno=92, col_offset=28), [Name('node', Load(), lineno=92, col_offset=32)], [], None, None, lineno=92, col_offset=28), [If(Compare(Subscript(Name('attr', Load(), lineno=93, col_offset=23), Index(Num(0, lineno=93, col_offset=28)), Load(), lineno=93, col_offset=23), [NotEq()], [Str('_', lineno=93, col_offset=34)], lineno=93, col_offset=23), [Print(None, [Str('\t', lineno=94, col_offset=30), BinOp(Str('%-12.12s', lineno=94, col_offset=36), Mod(), Name('attr', Load(), lineno=94, col_offset=49), lineno=94, col_offset=36), Call(Name('getattr', Load(), lineno=94, col_offset=55), [Name('node', Load(), lineno=94, col_offset=63), Name('attr', Load(), lineno=94, col_offset=69)], [], None, None, lineno=94, col_offset=55)], True, lineno=94, col_offset=24)], [], lineno=93, col_offset=20)], [], lineno=92, col_offset=16), Print(None, [], True, lineno=95, col_offset=16)], [], lineno=87, col_offset=12), Return(Call(Attribute(Name('self', Load(), lineno=96, col_offset=19), 'default', Load(), lineno=96, col_offset=19), [Name('node', Load(), lineno=96, col_offset=32)], [], Name('args', Load(), lineno=96, col_offset=39), None, lineno=96, col_offset=19), lineno=96, col_offset=12)], [], lineno=85, col_offset=13)], lineno=83, col_offset=8)], [], lineno=74, col_offset=4)], [], lineno=65, col_offset=0), Assign([Name('_walker', Store(), lineno=100, col_offset=0)], Name('ASTVisitor', Load(), lineno=100, col_offset=10), lineno=100, col_offset=0), FunctionDef('walk', arguments([Name('tree', Param(), lineno=101, col_offset=9), Name('visitor', Param(), lineno=101, col_offset=15), Name('walker', Param(), lineno=101, col_offset=24), Name('verbose', Param(), lineno=101, col_offset=37)], None, None, [Name('None', Load(), lineno=101, col_offset=31), Name('None', Load(), lineno=101, col_offset=45)]), [If(Compare(Name('walker', Load(), lineno=102, col_offset=7), [Is()], [Name('None', Load(), lineno=102, col_offset=17)], lineno=102, col_offset=7), [Assign([Name('walker', Store(), lineno=103, col_offset=8)], Call(Name('_walker', Load(), lineno=103, col_offset=17), [], [], None, None, lineno=103, col_offset=17), lineno=103, col_offset=8)], [], lineno=102, col_offset=4), If(Compare(Name('verbose', Load(), lineno=104, col_offset=7), [IsNot()], [Name('None', Load(), lineno=104, col_offset=22)], lineno=104, col_offset=7), [Assign([Attribute(Name('walker', Load(), lineno=105, col_offset=8), 'VERBOSE', Store(), lineno=105, col_offset=8)], Name('verbose', Load(), lineno=105, col_offset=25), lineno=105, col_offset=8)], [], lineno=104, col_offset=4), Expr(Call(Attribute(Name('walker', Load(), lineno=106, col_offset=4), 'preorder', Load(), lineno=106, col_offset=4), [Name('tree', Load(), lineno=106, col_offset=20), Name('visitor', Load(), lineno=106, col_offset=26)], [], None, None, lineno=106, col_offset=4), lineno=106, col_offset=4), Return(Attribute(Name('walker', Load(), lineno=107, col_offset=11), 'visitor', Load(), lineno=107, col_offset=11), lineno=107, col_offset=4)], [], lineno=101, col_offset=0), FunctionDef('dumpNode', arguments([Name('node', Param(), lineno=109, col_offset=13)], None, None, []), [Print(None, [Attribute(Name('node', Load(), lineno=110, col_offset=10), '__class__', Load(), lineno=110, col_offset=10)], True, lineno=110, col_offset=4), For(Name('attr', Store(), lineno=111, col_offset=8), Call(Name('dir', Load(), lineno=111, col_offset=16), [Name('node', Load(), lineno=111, col_offset=20)], [], None, None, lineno=111, col_offset=16), [If(Compare(Subscript(Name('attr', Load(), lineno=112, col_offset=11), Index(Num(0, lineno=112, col_offset=16)), Load(), lineno=112, col_offset=11), [NotEq()], [Str('_', lineno=112, col_offset=22)], lineno=112, col_offset=11), [Print(None, [Str('\t', lineno=113, col_offset=18), BinOp(Str('%-10.10s', lineno=113, col_offset=24), Mod(), Name('attr', Load(), lineno=113, col_offset=37), lineno=113, col_offset=24), Call(Name('getattr', Load(), lineno=113, col_offset=43), [Name('node', Load(), lineno=113, col_offset=51), Name('attr', Load(), lineno=113, col_offset=57)], [], None, None, lineno=113, col_offset=43)], True, lineno=113, col_offset=12)], [], lineno=112, col_offset=8)], [], lineno=111, col_offset=4)], [], lineno=109, col_offset=0)])
