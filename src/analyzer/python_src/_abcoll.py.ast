Module([Expr(Str("Abstract Base Classes (ABCs) for collections, according to PEP 3119.\n\nDON'T USE THIS MODULE DIRECTLY!  The classes here should be imported\nvia collections; they are defined here only to alleviate certain\nbootstrapping issues.  Unit tests are in test_collections.\n", lineno=9, col_offset=-1), lineno=9, col_offset=-1), ImportFrom('abc', [alias('ABCMeta', None), alias('abstractmethod', None)], 0, lineno=11, col_offset=0), Import([alias('sys', None)], lineno=12, col_offset=0), Assign([Name('__all__', Store(), lineno=14, col_offset=0)], List([Str('Hashable', lineno=14, col_offset=11), Str('Iterable', lineno=14, col_offset=23), Str('Iterator', lineno=14, col_offset=35), Str('Sized', lineno=15, col_offset=11), Str('Container', lineno=15, col_offset=20), Str('Callable', lineno=15, col_offset=33), Str('Set', lineno=16, col_offset=11), Str('MutableSet', lineno=16, col_offset=18), Str('Mapping', lineno=17, col_offset=11), Str('MutableMapping', lineno=17, col_offset=22), Str('MappingView', lineno=18, col_offset=11), Str('KeysView', lineno=18, col_offset=26), Str('ItemsView', lineno=18, col_offset=38), Str('ValuesView', lineno=18, col_offset=51), Str('Sequence', lineno=19, col_offset=11), Str('MutableSequence', lineno=19, col_offset=23)], Load(), lineno=14, col_offset=10), lineno=14, col_offset=0), FunctionDef('_hasattr', arguments([Name('C', Param(), lineno=24, col_offset=13), Name('attr', Param(), lineno=24, col_offset=16)], None, None, []), [TryExcept([Return(Call(Name('any', Load(), lineno=26, col_offset=15), [GeneratorExp(Compare(Name('attr', Load(), lineno=26, col_offset=19), [In()], [Attribute(Name('B', Load(), lineno=26, col_offset=27), '__dict__', Load(), lineno=26, col_offset=27)], lineno=26, col_offset=19), [comprehension(Name('B', Store(), lineno=26, col_offset=42), Attribute(Name('C', Load(), lineno=26, col_offset=47), '__mro__', Load(), lineno=26, col_offset=47), [])], lineno=26, col_offset=19)], [], None, None, lineno=26, col_offset=15), lineno=26, col_offset=8)], [ExceptHandler(Name('AttributeError', Load(), lineno=27, col_offset=11), None, [Return(Call(Name('hasattr', Load(), lineno=29, col_offset=15), [Name('C', Load(), lineno=29, col_offset=23), Name('attr', Load(), lineno=29, col_offset=26)], [], None, None, lineno=29, col_offset=15), lineno=29, col_offset=8)], lineno=27, col_offset=4)], [], lineno=25, col_offset=4)], [], lineno=24, col_offset=0), ClassDef('Hashable', [], [Assign([Name('__metaclass__', Store(), lineno=33, col_offset=4)], Name('ABCMeta', Load(), lineno=33, col_offset=20), lineno=33, col_offset=4), FunctionDef('__hash__', arguments([Name('self', Param(), lineno=36, col_offset=17)], None, None, []), [Return(Num(0, lineno=37, col_offset=15), lineno=37, col_offset=8)], [Name('abstractmethod', Load(), lineno=35, col_offset=5)], lineno=35, col_offset=4), FunctionDef('__subclasshook__', arguments([Name('cls', Param(), lineno=40, col_offset=25), Name('C', Param(), lineno=40, col_offset=30)], None, None, []), [If(Compare(Name('cls', Load(), lineno=41, col_offset=11), [Is()], [Name('Hashable', Load(), lineno=41, col_offset=18)], lineno=41, col_offset=11), [TryExcept([For(Name('B', Store(), lineno=43, col_offset=20), Attribute(Name('C', Load(), lineno=43, col_offset=25), '__mro__', Load(), lineno=43, col_offset=25), [If(Compare(Str('__hash__', lineno=44, col_offset=23), [In()], [Attribute(Name('B', Load(), lineno=44, col_offset=37), '__dict__', Load(), lineno=44, col_offset=37)], lineno=44, col_offset=23), [If(Subscript(Attribute(Name('B', Load(), lineno=45, col_offset=27), '__dict__', Load(), lineno=45, col_offset=27), Index(Str('__hash__', lineno=45, col_offset=38)), Load(), lineno=45, col_offset=27), [Return(Name('True', Load(), lineno=46, col_offset=35), lineno=46, col_offset=28)], [], lineno=45, col_offset=24), Break( lineno=47, col_offset=24)], [], lineno=44, col_offset=20)], [], lineno=43, col_offset=16)], [ExceptHandler(Name('AttributeError', Load(), lineno=48, col_offset=19), None, [If(Call(Name('getattr', Load(), lineno=50, col_offset=19), [Name('C', Load(), lineno=50, col_offset=27), Str('__hash__', lineno=50, col_offset=30), Name('None', Load(), lineno=50, col_offset=42)], [], None, None, lineno=50, col_offset=19), [Return(Name('True', Load(), lineno=51, col_offset=27), lineno=51, col_offset=20)], [], lineno=50, col_offset=16)], lineno=48, col_offset=12)], [], lineno=42, col_offset=12)], [], lineno=41, col_offset=8), Return(Name('NotImplemented', Load(), lineno=52, col_offset=15), lineno=52, col_offset=8)], [Name('classmethod', Load(), lineno=39, col_offset=5)], lineno=39, col_offset=4)], [], lineno=32, col_offset=0), ClassDef('Iterable', [], [Assign([Name('__metaclass__', Store(), lineno=56, col_offset=4)], Name('ABCMeta', Load(), lineno=56, col_offset=20), lineno=56, col_offset=4), FunctionDef('__iter__', arguments([Name('self', Param(), lineno=59, col_offset=17)], None, None, []), [While(Name('False', Load(), lineno=60, col_offset=14), [Expr(Yield(Name('None', Load(), lineno=61, col_offset=18), lineno=61, col_offset=12), lineno=61, col_offset=12)], [], lineno=60, col_offset=8)], [Name('abstractmethod', Load(), lineno=58, col_offset=5)], lineno=58, col_offset=4), FunctionDef('__subclasshook__', arguments([Name('cls', Param(), lineno=64, col_offset=25), Name('C', Param(), lineno=64, col_offset=30)], None, None, []), [If(Compare(Name('cls', Load(), lineno=65, col_offset=11), [Is()], [Name('Iterable', Load(), lineno=65, col_offset=18)], lineno=65, col_offset=11), [If(Call(Name('_hasattr', Load(), lineno=66, col_offset=15), [Name('C', Load(), lineno=66, col_offset=24), Str('__iter__', lineno=66, col_offset=27)], [], None, None, lineno=66, col_offset=15), [Return(Name('True', Load(), lineno=67, col_offset=23), lineno=67, col_offset=16)], [], lineno=66, col_offset=12)], [], lineno=65, col_offset=8), Return(Name('NotImplemented', Load(), lineno=68, col_offset=15), lineno=68, col_offset=8)], [Name('classmethod', Load(), lineno=63, col_offset=5)], lineno=63, col_offset=4)], [], lineno=55, col_offset=0), Expr(Call(Attribute(Name('Iterable', Load(), lineno=70, col_offset=0), 'register', Load(), lineno=70, col_offset=0), [Name('str', Load(), lineno=70, col_offset=18)], [], None, None, lineno=70, col_offset=0), lineno=70, col_offset=0), ClassDef('Iterator', [Name('Iterable', Load(), lineno=73, col_offset=15)], [FunctionDef('next', arguments([Name('self', Param(), lineno=76, col_offset=13)], None, None, []), [Raise(Name('StopIteration', Load(), lineno=77, col_offset=14), None, None, lineno=77, col_offset=8)], [Name('abstractmethod', Load(), lineno=75, col_offset=5)], lineno=75, col_offset=4), FunctionDef('__iter__', arguments([Name('self', Param(), lineno=79, col_offset=17)], None, None, []), [Return(Name('self', Load(), lineno=80, col_offset=15), lineno=80, col_offset=8)], [], lineno=79, col_offset=4), FunctionDef('__subclasshook__', arguments([Name('cls', Param(), lineno=83, col_offset=25), Name('C', Param(), lineno=83, col_offset=30)], None, None, []), [If(Compare(Name('cls', Load(), lineno=84, col_offset=11), [Is()], [Name('Iterator', Load(), lineno=84, col_offset=18)], lineno=84, col_offset=11), [If(Call(Name('_hasattr', Load(), lineno=85, col_offset=15), [Name('C', Load(), lineno=85, col_offset=24), Str('next', lineno=85, col_offset=27)], [], None, None, lineno=85, col_offset=15), [Return(Name('True', Load(), lineno=86, col_offset=23), lineno=86, col_offset=16)], [], lineno=85, col_offset=12)], [], lineno=84, col_offset=8), Return(Name('NotImplemented', Load(), lineno=87, col_offset=15), lineno=87, col_offset=8)], [Name('classmethod', Load(), lineno=82, col_offset=5)], lineno=82, col_offset=4)], [], lineno=73, col_offset=0), ClassDef('Sized', [], [Assign([Name('__metaclass__', Store(), lineno=91, col_offset=4)], Name('ABCMeta', Load(), lineno=91, col_offset=20), lineno=91, col_offset=4), FunctionDef('__len__', arguments([Name('self', Param(), lineno=94, col_offset=16)], None, None, []), [Return(Num(0, lineno=95, col_offset=15), lineno=95, col_offset=8)], [Name('abstractmethod', Load(), lineno=93, col_offset=5)], lineno=93, col_offset=4), FunctionDef('__subclasshook__', arguments([Name('cls', Param(), lineno=98, col_offset=25), Name('C', Param(), lineno=98, col_offset=30)], None, None, []), [If(Compare(Name('cls', Load(), lineno=99, col_offset=11), [Is()], [Name('Sized', Load(), lineno=99, col_offset=18)], lineno=99, col_offset=11), [If(Call(Name('_hasattr', Load(), lineno=100, col_offset=15), [Name('C', Load(), lineno=100, col_offset=24), Str('__len__', lineno=100, col_offset=27)], [], None, None, lineno=100, col_offset=15), [Return(Name('True', Load(), lineno=101, col_offset=23), lineno=101, col_offset=16)], [], lineno=100, col_offset=12)], [], lineno=99, col_offset=8), Return(Name('NotImplemented', Load(), lineno=102, col_offset=15), lineno=102, col_offset=8)], [Name('classmethod', Load(), lineno=97, col_offset=5)], lineno=97, col_offset=4)], [], lineno=90, col_offset=0), ClassDef('Container', [], [Assign([Name('__metaclass__', Store(), lineno=106, col_offset=4)], Name('ABCMeta', Load(), lineno=106, col_offset=20), lineno=106, col_offset=4), FunctionDef('__contains__', arguments([Name('self', Param(), lineno=109, col_offset=21), Name('x', Param(), lineno=109, col_offset=27)], None, None, []), [Return(Name('False', Load(), lineno=110, col_offset=15), lineno=110, col_offset=8)], [Name('abstractmethod', Load(), lineno=108, col_offset=5)], lineno=108, col_offset=4), FunctionDef('__subclasshook__', arguments([Name('cls', Param(), lineno=113, col_offset=25), Name('C', Param(), lineno=113, col_offset=30)], None, None, []), [If(Compare(Name('cls', Load(), lineno=114, col_offset=11), [Is()], [Name('Container', Load(), lineno=114, col_offset=18)], lineno=114, col_offset=11), [If(Call(Name('_hasattr', Load(), lineno=115, col_offset=15), [Name('C', Load(), lineno=115, col_offset=24), Str('__contains__', lineno=115, col_offset=27)], [], None, None, lineno=115, col_offset=15), [Return(Name('True', Load(), lineno=116, col_offset=23), lineno=116, col_offset=16)], [], lineno=115, col_offset=12)], [], lineno=114, col_offset=8), Return(Name('NotImplemented', Load(), lineno=117, col_offset=15), lineno=117, col_offset=8)], [Name('classmethod', Load(), lineno=112, col_offset=5)], lineno=112, col_offset=4)], [], lineno=105, col_offset=0), ClassDef('Callable', [], [Assign([Name('__metaclass__', Store(), lineno=121, col_offset=4)], Name('ABCMeta', Load(), lineno=121, col_offset=20), lineno=121, col_offset=4), FunctionDef('__call__', arguments([Name('self', Param(), lineno=124, col_offset=17)], 'args', 'kwds', []), [Return(Name('False', Load(), lineno=125, col_offset=15), lineno=125, col_offset=8)], [Name('abstractmethod', Load(), lineno=123, col_offset=5)], lineno=123, col_offset=4), FunctionDef('__subclasshook__', arguments([Name('cls', Param(), lineno=128, col_offset=25), Name('C', Param(), lineno=128, col_offset=30)], None, None, []), [If(Compare(Name('cls', Load(), lineno=129, col_offset=11), [Is()], [Name('Callable', Load(), lineno=129, col_offset=18)], lineno=129, col_offset=11), [If(Call(Name('_hasattr', Load(), lineno=130, col_offset=15), [Name('C', Load(), lineno=130, col_offset=24), Str('__call__', lineno=130, col_offset=27)], [], None, None, lineno=130, col_offset=15), [Return(Name('True', Load(), lineno=131, col_offset=23), lineno=131, col_offset=16)], [], lineno=130, col_offset=12)], [], lineno=129, col_offset=8), Return(Name('NotImplemented', Load(), lineno=132, col_offset=15), lineno=132, col_offset=8)], [Name('classmethod', Load(), lineno=127, col_offset=5)], lineno=127, col_offset=4)], [], lineno=120, col_offset=0), ClassDef('Set', [Name('Sized', Load(), lineno=138, col_offset=10), Name('Iterable', Load(), lineno=138, col_offset=17), Name('Container', Load(), lineno=138, col_offset=27)], [Expr(Str('A set is a finite, iterable container.\n\n    This class provides concrete generic implementations of all\n    methods except for __contains__, __iter__ and __len__.\n\n    To override the comparisons (presumably for speed, as the\n    semantics are fixed), all you have to do is redefine __le__ and\n    then the other operations will automatically follow suit.\n    ', lineno=147, col_offset=-1), lineno=147, col_offset=-1), FunctionDef('__le__', arguments([Name('self', Param(), lineno=149, col_offset=15), Name('other', Param(), lineno=149, col_offset=21)], None, None, []), [If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=150, col_offset=15), [Name('other', Load(), lineno=150, col_offset=26), Name('Set', Load(), lineno=150, col_offset=33)], [], None, None, lineno=150, col_offset=15), lineno=150, col_offset=11), [Return(Name('NotImplemented', Load(), lineno=151, col_offset=19), lineno=151, col_offset=12)], [], lineno=150, col_offset=8), If(Compare(Call(Name('len', Load(), lineno=152, col_offset=11), [Name('self', Load(), lineno=152, col_offset=15)], [], None, None, lineno=152, col_offset=11), [Gt()], [Call(Name('len', Load(), lineno=152, col_offset=23), [Name('other', Load(), lineno=152, col_offset=27)], [], None, None, lineno=152, col_offset=23)], lineno=152, col_offset=11), [Return(Name('False', Load(), lineno=153, col_offset=19), lineno=153, col_offset=12)], [], lineno=152, col_offset=8), For(Name('elem', Store(), lineno=154, col_offset=12), Name('self', Load(), lineno=154, col_offset=20), [If(Compare(Name('elem', Load(), lineno=155, col_offset=15), [NotIn()], [Name('other', Load(), lineno=155, col_offset=27)], lineno=155, col_offset=15), [Return(Name('False', Load(), lineno=156, col_offset=23), lineno=156, col_offset=16)], [], lineno=155, col_offset=12)], [], lineno=154, col_offset=8), Return(Name('True', Load(), lineno=157, col_offset=15), lineno=157, col_offset=8)], [], lineno=149, col_offset=4), FunctionDef('__lt__', arguments([Name('self', Param(), lineno=159, col_offset=15), Name('other', Param(), lineno=159, col_offset=21)], None, None, []), [If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=160, col_offset=15), [Name('other', Load(), lineno=160, col_offset=26), Name('Set', Load(), lineno=160, col_offset=33)], [], None, None, lineno=160, col_offset=15), lineno=160, col_offset=11), [Return(Name('NotImplemented', Load(), lineno=161, col_offset=19), lineno=161, col_offset=12)], [], lineno=160, col_offset=8), Return(BoolOp(And(), [Compare(Call(Name('len', Load(), lineno=162, col_offset=15), [Name('self', Load(), lineno=162, col_offset=19)], [], None, None, lineno=162, col_offset=15), [Lt()], [Call(Name('len', Load(), lineno=162, col_offset=27), [Name('other', Load(), lineno=162, col_offset=31)], [], None, None, lineno=162, col_offset=27)], lineno=162, col_offset=15), Call(Attribute(Name('self', Load(), lineno=162, col_offset=42), '__le__', Load(), lineno=162, col_offset=42), [Name('other', Load(), lineno=162, col_offset=54)], [], None, None, lineno=162, col_offset=42)], lineno=162, col_offset=15), lineno=162, col_offset=8)], [], lineno=159, col_offset=4), FunctionDef('__gt__', arguments([Name('self', Param(), lineno=164, col_offset=15), Name('other', Param(), lineno=164, col_offset=21)], None, None, []), [If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=165, col_offset=15), [Name('other', Load(), lineno=165, col_offset=26), Name('Set', Load(), lineno=165, col_offset=33)], [], None, None, lineno=165, col_offset=15), lineno=165, col_offset=11), [Return(Name('NotImplemented', Load(), lineno=166, col_offset=19), lineno=166, col_offset=12)], [], lineno=165, col_offset=8), Return(Compare(Name('other', Load(), lineno=167, col_offset=15), [Lt()], [Name('self', Load(), lineno=167, col_offset=23)], lineno=167, col_offset=15), lineno=167, col_offset=8)], [], lineno=164, col_offset=4), FunctionDef('__ge__', arguments([Name('self', Param(), lineno=169, col_offset=15), Name('other', Param(), lineno=169, col_offset=21)], None, None, []), [If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=170, col_offset=15), [Name('other', Load(), lineno=170, col_offset=26), Name('Set', Load(), lineno=170, col_offset=33)], [], None, None, lineno=170, col_offset=15), lineno=170, col_offset=11), [Return(Name('NotImplemented', Load(), lineno=171, col_offset=19), lineno=171, col_offset=12)], [], lineno=170, col_offset=8), Return(Compare(Name('other', Load(), lineno=172, col_offset=15), [LtE()], [Name('self', Load(), lineno=172, col_offset=24)], lineno=172, col_offset=15), lineno=172, col_offset=8)], [], lineno=169, col_offset=4), FunctionDef('__eq__', arguments([Name('self', Param(), lineno=174, col_offset=15), Name('other', Param(), lineno=174, col_offset=21)], None, None, []), [If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=175, col_offset=15), [Name('other', Load(), lineno=175, col_offset=26), Name('Set', Load(), lineno=175, col_offset=33)], [], None, None, lineno=175, col_offset=15), lineno=175, col_offset=11), [Return(Name('NotImplemented', Load(), lineno=176, col_offset=19), lineno=176, col_offset=12)], [], lineno=175, col_offset=8), Return(BoolOp(And(), [Compare(Call(Name('len', Load(), lineno=177, col_offset=15), [Name('self', Load(), lineno=177, col_offset=19)], [], None, None, lineno=177, col_offset=15), [Eq()], [Call(Name('len', Load(), lineno=177, col_offset=28), [Name('other', Load(), lineno=177, col_offset=32)], [], None, None, lineno=177, col_offset=28)], lineno=177, col_offset=15), Call(Attribute(Name('self', Load(), lineno=177, col_offset=43), '__le__', Load(), lineno=177, col_offset=43), [Name('other', Load(), lineno=177, col_offset=55)], [], None, None, lineno=177, col_offset=43)], lineno=177, col_offset=15), lineno=177, col_offset=8)], [], lineno=174, col_offset=4), FunctionDef('__ne__', arguments([Name('self', Param(), lineno=179, col_offset=15), Name('other', Param(), lineno=179, col_offset=21)], None, None, []), [Return(UnaryOp(Not(), Compare(Name('self', Load(), lineno=180, col_offset=20), [Eq()], [Name('other', Load(), lineno=180, col_offset=28)], lineno=180, col_offset=20), lineno=180, col_offset=15), lineno=180, col_offset=8)], [], lineno=179, col_offset=4), FunctionDef('_from_iterable', arguments([Name('cls', Param(), lineno=183, col_offset=23), Name('it', Param(), lineno=183, col_offset=28)], None, None, []), [Expr(Str('Construct an instance of the class from any iterable input.\n\n        Must override this method if the class constructor signature\n        does not accept an iterable for an input.\n        ', lineno=188, col_offset=-1), lineno=188, col_offset=-1), Return(Call(Name('cls', Load(), lineno=189, col_offset=15), [Name('it', Load(), lineno=189, col_offset=19)], [], None, None, lineno=189, col_offset=15), lineno=189, col_offset=8)], [Name('classmethod', Load(), lineno=182, col_offset=5)], lineno=182, col_offset=4), FunctionDef('__and__', arguments([Name('self', Param(), lineno=191, col_offset=16), Name('other', Param(), lineno=191, col_offset=22)], None, None, []), [If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=192, col_offset=15), [Name('other', Load(), lineno=192, col_offset=26), Name('Iterable', Load(), lineno=192, col_offset=33)], [], None, None, lineno=192, col_offset=15), lineno=192, col_offset=11), [Return(Name('NotImplemented', Load(), lineno=193, col_offset=19), lineno=193, col_offset=12)], [], lineno=192, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=194, col_offset=15), '_from_iterable', Load(), lineno=194, col_offset=15), [GeneratorExp(Name('value', Load(), lineno=194, col_offset=35), [comprehension(Name('value', Store(), lineno=194, col_offset=45), Name('other', Load(), lineno=194, col_offset=54), [Compare(Name('value', Load(), lineno=194, col_offset=63), [In()], [Name('self', Load(), lineno=194, col_offset=72)], lineno=194, col_offset=63)])], lineno=194, col_offset=35)], [], None, None, lineno=194, col_offset=15), lineno=194, col_offset=8)], [], lineno=191, col_offset=4), FunctionDef('isdisjoint', arguments([Name('self', Param(), lineno=196, col_offset=19), Name('other', Param(), lineno=196, col_offset=25)], None, None, []), [For(Name('value', Store(), lineno=197, col_offset=12), Name('other', Load(), lineno=197, col_offset=21), [If(Compare(Name('value', Load(), lineno=198, col_offset=15), [In()], [Name('self', Load(), lineno=198, col_offset=24)], lineno=198, col_offset=15), [Return(Name('False', Load(), lineno=199, col_offset=23), lineno=199, col_offset=16)], [], lineno=198, col_offset=12)], [], lineno=197, col_offset=8), Return(Name('True', Load(), lineno=200, col_offset=15), lineno=200, col_offset=8)], [], lineno=196, col_offset=4), FunctionDef('__or__', arguments([Name('self', Param(), lineno=202, col_offset=15), Name('other', Param(), lineno=202, col_offset=21)], None, None, []), [If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=203, col_offset=15), [Name('other', Load(), lineno=203, col_offset=26), Name('Iterable', Load(), lineno=203, col_offset=33)], [], None, None, lineno=203, col_offset=15), lineno=203, col_offset=11), [Return(Name('NotImplemented', Load(), lineno=204, col_offset=19), lineno=204, col_offset=12)], [], lineno=203, col_offset=8), Assign([Name('chain', Store(), lineno=205, col_offset=8)], GeneratorExp(Name('e', Load(), lineno=205, col_offset=17), [comprehension(Name('s', Store(), lineno=205, col_offset=23), Tuple([Name('self', Load(), lineno=205, col_offset=29), Name('other', Load(), lineno=205, col_offset=35)], Load(), lineno=205, col_offset=29), []), comprehension(Name('e', Store(), lineno=205, col_offset=46), Name('s', Load(), lineno=205, col_offset=51), [])], lineno=205, col_offset=17), lineno=205, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=206, col_offset=15), '_from_iterable', Load(), lineno=206, col_offset=15), [Name('chain', Load(), lineno=206, col_offset=35)], [], None, None, lineno=206, col_offset=15), lineno=206, col_offset=8)], [], lineno=202, col_offset=4), FunctionDef('__sub__', arguments([Name('self', Param(), lineno=208, col_offset=16), Name('other', Param(), lineno=208, col_offset=22)], None, None, []), [If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=209, col_offset=15), [Name('other', Load(), lineno=209, col_offset=26), Name('Set', Load(), lineno=209, col_offset=33)], [], None, None, lineno=209, col_offset=15), lineno=209, col_offset=11), [If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=210, col_offset=19), [Name('other', Load(), lineno=210, col_offset=30), Name('Iterable', Load(), lineno=210, col_offset=37)], [], None, None, lineno=210, col_offset=19), lineno=210, col_offset=15), [Return(Name('NotImplemented', Load(), lineno=211, col_offset=23), lineno=211, col_offset=16)], [], lineno=210, col_offset=12), Assign([Name('other', Store(), lineno=212, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=212, col_offset=20), '_from_iterable', Load(), lineno=212, col_offset=20), [Name('other', Load(), lineno=212, col_offset=40)], [], None, None, lineno=212, col_offset=20), lineno=212, col_offset=12)], [], lineno=209, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=213, col_offset=15), '_from_iterable', Load(), lineno=213, col_offset=15), [GeneratorExp(Name('value', Load(), lineno=213, col_offset=35), [comprehension(Name('value', Store(), lineno=213, col_offset=45), Name('self', Load(), lineno=213, col_offset=54), [Compare(Name('value', Load(), lineno=214, col_offset=38), [NotIn()], [Name('other', Load(), lineno=214, col_offset=51)], lineno=214, col_offset=38)])], lineno=213, col_offset=35)], [], None, None, lineno=213, col_offset=15), lineno=213, col_offset=8)], [], lineno=208, col_offset=4), FunctionDef('__xor__', arguments([Name('self', Param(), lineno=216, col_offset=16), Name('other', Param(), lineno=216, col_offset=22)], None, None, []), [If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=217, col_offset=15), [Name('other', Load(), lineno=217, col_offset=26), Name('Set', Load(), lineno=217, col_offset=33)], [], None, None, lineno=217, col_offset=15), lineno=217, col_offset=11), [If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=218, col_offset=19), [Name('other', Load(), lineno=218, col_offset=30), Name('Iterable', Load(), lineno=218, col_offset=37)], [], None, None, lineno=218, col_offset=19), lineno=218, col_offset=15), [Return(Name('NotImplemented', Load(), lineno=219, col_offset=23), lineno=219, col_offset=16)], [], lineno=218, col_offset=12), Assign([Name('other', Store(), lineno=220, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=220, col_offset=20), '_from_iterable', Load(), lineno=220, col_offset=20), [Name('other', Load(), lineno=220, col_offset=40)], [], None, None, lineno=220, col_offset=20), lineno=220, col_offset=12)], [], lineno=217, col_offset=8), Return(BinOp(BinOp(Name('self', Load(), lineno=221, col_offset=16), Sub(), Name('other', Load(), lineno=221, col_offset=23), lineno=221, col_offset=16), BitOr(), BinOp(Name('other', Load(), lineno=221, col_offset=33), Sub(), Name('self', Load(), lineno=221, col_offset=41), lineno=221, col_offset=33), lineno=221, col_offset=15), lineno=221, col_offset=8)], [], lineno=216, col_offset=4), Assign([Name('__hash__', Store(), lineno=224, col_offset=4)], Name('None', Load(), lineno=224, col_offset=15), lineno=224, col_offset=4), FunctionDef('_hash', arguments([Name('self', Param(), lineno=226, col_offset=14)], None, None, []), [Expr(Str("Compute the hash value of a set.\n\n        Note that we don't define __hash__: not all sets are hashable.\n        But if you define a hashable set type, its __hash__ should\n        call this function.\n\n        This must be compatible __eq__.\n\n        All sets ought to compare equal if they contain the same\n        elements, regardless of how they are implemented, and\n        regardless of the order of the elements; so there's not much\n        freedom for __eq__ or __hash__.  We match the algorithm used\n        by the built-in frozenset type.\n        ", lineno=240, col_offset=-1), lineno=240, col_offset=-1), Assign([Name('MAX', Store(), lineno=241, col_offset=8)], Attribute(Name('sys', Load(), lineno=241, col_offset=14), 'maxint', Load(), lineno=241, col_offset=14), lineno=241, col_offset=8), Assign([Name('MASK', Store(), lineno=242, col_offset=8)], BinOp(BinOp(Num(2, lineno=242, col_offset=15), Mult(), Name('MAX', Load(), lineno=242, col_offset=19), lineno=242, col_offset=15), Add(), Num(1, lineno=242, col_offset=25), lineno=242, col_offset=15), lineno=242, col_offset=8), Assign([Name('n', Store(), lineno=243, col_offset=8)], Call(Name('len', Load(), lineno=243, col_offset=12), [Name('self', Load(), lineno=243, col_offset=16)], [], None, None, lineno=243, col_offset=12), lineno=243, col_offset=8), Assign([Name('h', Store(), lineno=244, col_offset=8)], BinOp(Num(1927868237, lineno=244, col_offset=12), Mult(), BinOp(Name('n', Load(), lineno=244, col_offset=26), Add(), Num(1, lineno=244, col_offset=30), lineno=244, col_offset=26), lineno=244, col_offset=12), lineno=244, col_offset=8), AugAssign(Name('h', Store(), lineno=245, col_offset=8), BitAnd(), Name('MASK', Load(), lineno=245, col_offset=13), lineno=245, col_offset=8), For(Name('x', Store(), lineno=246, col_offset=12), Name('self', Load(), lineno=246, col_offset=17), [Assign([Name('hx', Store(), lineno=247, col_offset=12)], Call(Name('hash', Load(), lineno=247, col_offset=17), [Name('x', Load(), lineno=247, col_offset=22)], [], None, None, lineno=247, col_offset=17), lineno=247, col_offset=12), AugAssign(Name('h', Store(), lineno=248, col_offset=12), BitXor(), BinOp(BinOp(BinOp(Name('hx', Load(), lineno=248, col_offset=18), BitXor(), BinOp(Name('hx', Load(), lineno=248, col_offset=24), LShift(), Num(16, lineno=248, col_offset=30), lineno=248, col_offset=24), lineno=248, col_offset=18), BitXor(), Num(89869747, lineno=248, col_offset=36), lineno=248, col_offset=34), Mult(), Num(3644798167, lineno=248, col_offset=49), lineno=248, col_offset=17), lineno=248, col_offset=12), AugAssign(Name('h', Store(), lineno=249, col_offset=12), BitAnd(), Name('MASK', Load(), lineno=249, col_offset=17), lineno=249, col_offset=12)], [], lineno=246, col_offset=8), Assign([Name('h', Store(), lineno=250, col_offset=8)], BinOp(BinOp(Name('h', Load(), lineno=250, col_offset=12), Mult(), Num(69069, lineno=250, col_offset=16), lineno=250, col_offset=12), Add(), Num(907133923, lineno=250, col_offset=24), lineno=250, col_offset=12), lineno=250, col_offset=8), AugAssign(Name('h', Store(), lineno=251, col_offset=8), BitAnd(), Name('MASK', Load(), lineno=251, col_offset=13), lineno=251, col_offset=8), If(Compare(Name('h', Load(), lineno=252, col_offset=11), [Gt()], [Name('MAX', Load(), lineno=252, col_offset=15)], lineno=252, col_offset=11), [AugAssign(Name('h', Store(), lineno=253, col_offset=12), Sub(), BinOp(Name('MASK', Load(), lineno=253, col_offset=17), Add(), Num(1, lineno=253, col_offset=24), lineno=253, col_offset=17), lineno=253, col_offset=12)], [], lineno=252, col_offset=8), If(Compare(Name('h', Load(), lineno=254, col_offset=11), [Eq()], [Num(-1, lineno=254, col_offset=17)], lineno=254, col_offset=11), [Assign([Name('h', Store(), lineno=255, col_offset=12)], Num(590923713, lineno=255, col_offset=16), lineno=255, col_offset=12)], [], lineno=254, col_offset=8), Return(Name('h', Load(), lineno=256, col_offset=15), lineno=256, col_offset=8)], [], lineno=226, col_offset=4)], [], lineno=138, col_offset=0), Expr(Call(Attribute(Name('Set', Load(), lineno=258, col_offset=0), 'register', Load(), lineno=258, col_offset=0), [Name('frozenset', Load(), lineno=258, col_offset=13)], [], None, None, lineno=258, col_offset=0), lineno=258, col_offset=0), ClassDef('MutableSet', [Name('Set', Load(), lineno=261, col_offset=17)], [FunctionDef('add', arguments([Name('self', Param(), lineno=264, col_offset=12), Name('value', Param(), lineno=264, col_offset=18)], None, None, []), [Expr(Str('Add an element.', lineno=265, col_offset=8), lineno=265, col_offset=8), Raise(Name('NotImplementedError', Load(), lineno=266, col_offset=14), None, None, lineno=266, col_offset=8)], [Name('abstractmethod', Load(), lineno=263, col_offset=5)], lineno=263, col_offset=4), FunctionDef('discard', arguments([Name('self', Param(), lineno=269, col_offset=16), Name('value', Param(), lineno=269, col_offset=22)], None, None, []), [Expr(Str('Remove an element.  Do not raise an exception if absent.', lineno=270, col_offset=8), lineno=270, col_offset=8), Raise(Name('NotImplementedError', Load(), lineno=271, col_offset=14), None, None, lineno=271, col_offset=8)], [Name('abstractmethod', Load(), lineno=268, col_offset=5)], lineno=268, col_offset=4), FunctionDef('remove', arguments([Name('self', Param(), lineno=273, col_offset=15), Name('value', Param(), lineno=273, col_offset=21)], None, None, []), [Expr(Str('Remove an element. If not a member, raise a KeyError.', lineno=274, col_offset=8), lineno=274, col_offset=8), If(Compare(Name('value', Load(), lineno=275, col_offset=11), [NotIn()], [Name('self', Load(), lineno=275, col_offset=24)], lineno=275, col_offset=11), [Raise(Call(Name('KeyError', Load(), lineno=276, col_offset=18), [Name('value', Load(), lineno=276, col_offset=27)], [], None, None, lineno=276, col_offset=18), None, None, lineno=276, col_offset=12)], [], lineno=275, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=277, col_offset=8), 'discard', Load(), lineno=277, col_offset=8), [Name('value', Load(), lineno=277, col_offset=21)], [], None, None, lineno=277, col_offset=8), lineno=277, col_offset=8)], [], lineno=273, col_offset=4), FunctionDef('pop', arguments([Name('self', Param(), lineno=279, col_offset=12)], None, None, []), [Expr(Str('Return the popped value.  Raise KeyError if empty.', lineno=280, col_offset=8), lineno=280, col_offset=8), Assign([Name('it', Store(), lineno=281, col_offset=8)], Call(Name('iter', Load(), lineno=281, col_offset=13), [Name('self', Load(), lineno=281, col_offset=18)], [], None, None, lineno=281, col_offset=13), lineno=281, col_offset=8), TryExcept([Assign([Name('value', Store(), lineno=283, col_offset=12)], Call(Name('next', Load(), lineno=283, col_offset=20), [Name('it', Load(), lineno=283, col_offset=25)], [], None, None, lineno=283, col_offset=20), lineno=283, col_offset=12)], [ExceptHandler(Name('StopIteration', Load(), lineno=284, col_offset=15), None, [Raise(Name('KeyError', Load(), lineno=285, col_offset=18), None, None, lineno=285, col_offset=12)], lineno=284, col_offset=8)], [], lineno=282, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=286, col_offset=8), 'discard', Load(), lineno=286, col_offset=8), [Name('value', Load(), lineno=286, col_offset=21)], [], None, None, lineno=286, col_offset=8), lineno=286, col_offset=8), Return(Name('value', Load(), lineno=287, col_offset=15), lineno=287, col_offset=8)], [], lineno=279, col_offset=4), FunctionDef('clear', arguments([Name('self', Param(), lineno=289, col_offset=14)], None, None, []), [Expr(Str('This is slow (creates N new iterators!) but effective.', lineno=290, col_offset=8), lineno=290, col_offset=8), TryExcept([While(Name('True', Load(), lineno=292, col_offset=18), [Expr(Call(Attribute(Name('self', Load(), lineno=293, col_offset=16), 'pop', Load(), lineno=293, col_offset=16), [], [], None, None, lineno=293, col_offset=16), lineno=293, col_offset=16)], [], lineno=292, col_offset=12)], [ExceptHandler(Name('KeyError', Load(), lineno=294, col_offset=15), None, [Pass( lineno=295, col_offset=12)], lineno=294, col_offset=8)], [], lineno=291, col_offset=8)], [], lineno=289, col_offset=4), FunctionDef('__ior__', arguments([Name('self', Param(), lineno=297, col_offset=16), Name('it', Param(), lineno=297, col_offset=22)], None, None, []), [For(Name('value', Store(), lineno=298, col_offset=12), Name('it', Load(), lineno=298, col_offset=21), [Expr(Call(Attribute(Name('self', Load(), lineno=299, col_offset=12), 'add', Load(), lineno=299, col_offset=12), [Name('value', Load(), lineno=299, col_offset=21)], [], None, None, lineno=299, col_offset=12), lineno=299, col_offset=12)], [], lineno=298, col_offset=8), Return(Name('self', Load(), lineno=300, col_offset=15), lineno=300, col_offset=8)], [], lineno=297, col_offset=4), FunctionDef('__iand__', arguments([Name('self', Param(), lineno=302, col_offset=17), Name('it', Param(), lineno=302, col_offset=23)], None, None, []), [For(Name('value', Store(), lineno=303, col_offset=12), BinOp(Name('self', Load(), lineno=303, col_offset=22), Sub(), Name('it', Load(), lineno=303, col_offset=29), lineno=303, col_offset=22), [Expr(Call(Attribute(Name('self', Load(), lineno=304, col_offset=12), 'discard', Load(), lineno=304, col_offset=12), [Name('value', Load(), lineno=304, col_offset=25)], [], None, None, lineno=304, col_offset=12), lineno=304, col_offset=12)], [], lineno=303, col_offset=8), Return(Name('self', Load(), lineno=305, col_offset=15), lineno=305, col_offset=8)], [], lineno=302, col_offset=4), FunctionDef('__ixor__', arguments([Name('self', Param(), lineno=307, col_offset=17), Name('it', Param(), lineno=307, col_offset=23)], None, None, []), [If(Compare(Name('it', Load(), lineno=308, col_offset=11), [Is()], [Name('self', Load(), lineno=308, col_offset=17)], lineno=308, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=309, col_offset=12), 'clear', Load(), lineno=309, col_offset=12), [], [], None, None, lineno=309, col_offset=12), lineno=309, col_offset=12)], [If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=311, col_offset=19), [Name('it', Load(), lineno=311, col_offset=30), Name('Set', Load(), lineno=311, col_offset=34)], [], None, None, lineno=311, col_offset=19), lineno=311, col_offset=15), [Assign([Name('it', Store(), lineno=312, col_offset=16)], Call(Attribute(Name('self', Load(), lineno=312, col_offset=21), '_from_iterable', Load(), lineno=312, col_offset=21), [Name('it', Load(), lineno=312, col_offset=41)], [], None, None, lineno=312, col_offset=21), lineno=312, col_offset=16)], [], lineno=311, col_offset=12), For(Name('value', Store(), lineno=313, col_offset=16), Name('it', Load(), lineno=313, col_offset=25), [If(Compare(Name('value', Load(), lineno=314, col_offset=19), [In()], [Name('self', Load(), lineno=314, col_offset=28)], lineno=314, col_offset=19), [Expr(Call(Attribute(Name('self', Load(), lineno=315, col_offset=20), 'discard', Load(), lineno=315, col_offset=20), [Name('value', Load(), lineno=315, col_offset=33)], [], None, None, lineno=315, col_offset=20), lineno=315, col_offset=20)], [Expr(Call(Attribute(Name('self', Load(), lineno=317, col_offset=20), 'add', Load(), lineno=317, col_offset=20), [Name('value', Load(), lineno=317, col_offset=29)], [], None, None, lineno=317, col_offset=20), lineno=317, col_offset=20)], lineno=314, col_offset=16)], [], lineno=313, col_offset=12)], lineno=308, col_offset=8), Return(Name('self', Load(), lineno=318, col_offset=15), lineno=318, col_offset=8)], [], lineno=307, col_offset=4), FunctionDef('__isub__', arguments([Name('self', Param(), lineno=320, col_offset=17), Name('it', Param(), lineno=320, col_offset=23)], None, None, []), [If(Compare(Name('it', Load(), lineno=321, col_offset=11), [Is()], [Name('self', Load(), lineno=321, col_offset=17)], lineno=321, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=322, col_offset=12), 'clear', Load(), lineno=322, col_offset=12), [], [], None, None, lineno=322, col_offset=12), lineno=322, col_offset=12)], [For(Name('value', Store(), lineno=324, col_offset=16), Name('it', Load(), lineno=324, col_offset=25), [Expr(Call(Attribute(Name('self', Load(), lineno=325, col_offset=16), 'discard', Load(), lineno=325, col_offset=16), [Name('value', Load(), lineno=325, col_offset=29)], [], None, None, lineno=325, col_offset=16), lineno=325, col_offset=16)], [], lineno=324, col_offset=12)], lineno=321, col_offset=8), Return(Name('self', Load(), lineno=326, col_offset=15), lineno=326, col_offset=8)], [], lineno=320, col_offset=4)], [], lineno=261, col_offset=0), Expr(Call(Attribute(Name('MutableSet', Load(), lineno=328, col_offset=0), 'register', Load(), lineno=328, col_offset=0), [Name('set', Load(), lineno=328, col_offset=20)], [], None, None, lineno=328, col_offset=0), lineno=328, col_offset=0), ClassDef('Mapping', [Name('Sized', Load(), lineno=334, col_offset=14), Name('Iterable', Load(), lineno=334, col_offset=21), Name('Container', Load(), lineno=334, col_offset=31)], [FunctionDef('__getitem__', arguments([Name('self', Param(), lineno=337, col_offset=20), Name('key', Param(), lineno=337, col_offset=26)], None, None, []), [Raise(Name('KeyError', Load(), lineno=338, col_offset=14), None, None, lineno=338, col_offset=8)], [Name('abstractmethod', Load(), lineno=336, col_offset=5)], lineno=336, col_offset=4), FunctionDef('get', arguments([Name('self', Param(), lineno=340, col_offset=12), Name('key', Param(), lineno=340, col_offset=18), Name('default', Param(), lineno=340, col_offset=23)], None, None, [Name('None', Load(), lineno=340, col_offset=31)]), [TryExcept([Return(Subscript(Name('self', Load(), lineno=342, col_offset=19), Index(Name('key', Load(), lineno=342, col_offset=24)), Load(), lineno=342, col_offset=19), lineno=342, col_offset=12)], [ExceptHandler(Name('KeyError', Load(), lineno=343, col_offset=15), None, [Return(Name('default', Load(), lineno=344, col_offset=19), lineno=344, col_offset=12)], lineno=343, col_offset=8)], [], lineno=341, col_offset=8)], [], lineno=340, col_offset=4), FunctionDef('__contains__', arguments([Name('self', Param(), lineno=346, col_offset=21), Name('key', Param(), lineno=346, col_offset=27)], None, None, []), [TryExcept([Expr(Subscript(Name('self', Load(), lineno=348, col_offset=12), Index(Name('key', Load(), lineno=348, col_offset=17)), Load(), lineno=348, col_offset=12), lineno=348, col_offset=12)], [ExceptHandler(Name('KeyError', Load(), lineno=349, col_offset=15), None, [Return(Name('False', Load(), lineno=350, col_offset=19), lineno=350, col_offset=12)], lineno=349, col_offset=8)], [Return(Name('True', Load(), lineno=352, col_offset=19), lineno=352, col_offset=12)], lineno=347, col_offset=8)], [], lineno=346, col_offset=4), FunctionDef('iterkeys', arguments([Name('self', Param(), lineno=354, col_offset=17)], None, None, []), [Return(Call(Name('iter', Load(), lineno=355, col_offset=15), [Name('self', Load(), lineno=355, col_offset=20)], [], None, None, lineno=355, col_offset=15), lineno=355, col_offset=8)], [], lineno=354, col_offset=4), FunctionDef('itervalues', arguments([Name('self', Param(), lineno=357, col_offset=19)], None, None, []), [For(Name('key', Store(), lineno=358, col_offset=12), Name('self', Load(), lineno=358, col_offset=19), [Expr(Yield(Subscript(Name('self', Load(), lineno=359, col_offset=18), Index(Name('key', Load(), lineno=359, col_offset=23)), Load(), lineno=359, col_offset=18), lineno=359, col_offset=12), lineno=359, col_offset=12)], [], lineno=358, col_offset=8)], [], lineno=357, col_offset=4), FunctionDef('iteritems', arguments([Name('self', Param(), lineno=361, col_offset=18)], None, None, []), [For(Name('key', Store(), lineno=362, col_offset=12), Name('self', Load(), lineno=362, col_offset=19), [Expr(Yield(Tuple([Name('key', Load(), lineno=363, col_offset=19), Subscript(Name('self', Load(), lineno=363, col_offset=24), Index(Name('key', Load(), lineno=363, col_offset=29)), Load(), lineno=363, col_offset=24)], Load(), lineno=363, col_offset=19), lineno=363, col_offset=12), lineno=363, col_offset=12)], [], lineno=362, col_offset=8)], [], lineno=361, col_offset=4), FunctionDef('keys', arguments([Name('self', Param(), lineno=365, col_offset=13)], None, None, []), [Return(Call(Name('list', Load(), lineno=366, col_offset=15), [Name('self', Load(), lineno=366, col_offset=20)], [], None, None, lineno=366, col_offset=15), lineno=366, col_offset=8)], [], lineno=365, col_offset=4), FunctionDef('items', arguments([Name('self', Param(), lineno=368, col_offset=14)], None, None, []), [Return(ListComp(Tuple([Name('key', Load(), lineno=369, col_offset=17), Subscript(Name('self', Load(), lineno=369, col_offset=22), Index(Name('key', Load(), lineno=369, col_offset=27)), Load(), lineno=369, col_offset=22)], Load(), lineno=369, col_offset=17), [comprehension(Name('key', Store(), lineno=369, col_offset=37), Name('self', Load(), lineno=369, col_offset=44), [])], lineno=369, col_offset=16), lineno=369, col_offset=8)], [], lineno=368, col_offset=4), FunctionDef('values', arguments([Name('self', Param(), lineno=371, col_offset=15)], None, None, []), [Return(ListComp(Subscript(Name('self', Load(), lineno=372, col_offset=16), Index(Name('key', Load(), lineno=372, col_offset=21)), Load(), lineno=372, col_offset=16), [comprehension(Name('key', Store(), lineno=372, col_offset=30), Name('self', Load(), lineno=372, col_offset=37), [])], lineno=372, col_offset=16), lineno=372, col_offset=8)], [], lineno=371, col_offset=4), Assign([Name('__hash__', Store(), lineno=375, col_offset=4)], Name('None', Load(), lineno=375, col_offset=15), lineno=375, col_offset=4), FunctionDef('__eq__', arguments([Name('self', Param(), lineno=377, col_offset=15), Name('other', Param(), lineno=377, col_offset=21)], None, None, []), [If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=378, col_offset=15), [Name('other', Load(), lineno=378, col_offset=26), Name('Mapping', Load(), lineno=378, col_offset=33)], [], None, None, lineno=378, col_offset=15), lineno=378, col_offset=11), [Return(Name('NotImplemented', Load(), lineno=379, col_offset=19), lineno=379, col_offset=12)], [], lineno=378, col_offset=8), Return(Compare(Call(Name('dict', Load(), lineno=380, col_offset=15), [Call(Attribute(Name('self', Load(), lineno=380, col_offset=20), 'items', Load(), lineno=380, col_offset=20), [], [], None, None, lineno=380, col_offset=20)], [], None, None, lineno=380, col_offset=15), [Eq()], [Call(Name('dict', Load(), lineno=380, col_offset=37), [Call(Attribute(Name('other', Load(), lineno=380, col_offset=42), 'items', Load(), lineno=380, col_offset=42), [], [], None, None, lineno=380, col_offset=42)], [], None, None, lineno=380, col_offset=37)], lineno=380, col_offset=15), lineno=380, col_offset=8)], [], lineno=377, col_offset=4), FunctionDef('__ne__', arguments([Name('self', Param(), lineno=382, col_offset=15), Name('other', Param(), lineno=382, col_offset=21)], None, None, []), [Return(UnaryOp(Not(), Compare(Name('self', Load(), lineno=383, col_offset=20), [Eq()], [Name('other', Load(), lineno=383, col_offset=28)], lineno=383, col_offset=20), lineno=383, col_offset=15), lineno=383, col_offset=8)], [], lineno=382, col_offset=4)], [], lineno=334, col_offset=0), ClassDef('MappingView', [Name('Sized', Load(), lineno=385, col_offset=18)], [FunctionDef('__init__', arguments([Name('self', Param(), lineno=387, col_offset=17), Name('mapping', Param(), lineno=387, col_offset=23)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=388, col_offset=8), '_mapping', Store(), lineno=388, col_offset=8)], Name('mapping', Load(), lineno=388, col_offset=24), lineno=388, col_offset=8)], [], lineno=387, col_offset=4), FunctionDef('__len__', arguments([Name('self', Param(), lineno=390, col_offset=16)], None, None, []), [Return(Call(Name('len', Load(), lineno=391, col_offset=15), [Attribute(Name('self', Load(), lineno=391, col_offset=19), '_mapping', Load(), lineno=391, col_offset=19)], [], None, None, lineno=391, col_offset=15), lineno=391, col_offset=8)], [], lineno=390, col_offset=4), FunctionDef('__repr__', arguments([Name('self', Param(), lineno=393, col_offset=17)], None, None, []), [Return(Call(Attribute(Str('{0.__class__.__name__}({0._mapping!r})', lineno=394, col_offset=15), 'format', Load(), lineno=394, col_offset=15), [Name('self', Load(), lineno=394, col_offset=63)], [], None, None, lineno=394, col_offset=15), lineno=394, col_offset=8)], [], lineno=393, col_offset=4)], [], lineno=385, col_offset=0), ClassDef('KeysView', [Name('MappingView', Load(), lineno=397, col_offset=15), Name('Set', Load(), lineno=397, col_offset=28)], [FunctionDef('_from_iterable', arguments([Name('self', Param(), lineno=400, col_offset=23), Name('it', Param(), lineno=400, col_offset=29)], None, None, []), [Return(Call(Name('set', Load(), lineno=401, col_offset=15), [Name('it', Load(), lineno=401, col_offset=19)], [], None, None, lineno=401, col_offset=15), lineno=401, col_offset=8)], [Name('classmethod', Load(), lineno=399, col_offset=5)], lineno=399, col_offset=4), FunctionDef('__contains__', arguments([Name('self', Param(), lineno=403, col_offset=21), Name('key', Param(), lineno=403, col_offset=27)], None, None, []), [Return(Compare(Name('key', Load(), lineno=404, col_offset=15), [In()], [Attribute(Name('self', Load(), lineno=404, col_offset=22), '_mapping', Load(), lineno=404, col_offset=22)], lineno=404, col_offset=15), lineno=404, col_offset=8)], [], lineno=403, col_offset=4), FunctionDef('__iter__', arguments([Name('self', Param(), lineno=406, col_offset=17)], None, None, []), [For(Name('key', Store(), lineno=407, col_offset=12), Attribute(Name('self', Load(), lineno=407, col_offset=19), '_mapping', Load(), lineno=407, col_offset=19), [Expr(Yield(Name('key', Load(), lineno=408, col_offset=18), lineno=408, col_offset=12), lineno=408, col_offset=12)], [], lineno=407, col_offset=8)], [], lineno=406, col_offset=4)], [], lineno=397, col_offset=0), ClassDef('ItemsView', [Name('MappingView', Load(), lineno=411, col_offset=16), Name('Set', Load(), lineno=411, col_offset=29)], [FunctionDef('_from_iterable', arguments([Name('self', Param(), lineno=414, col_offset=23), Name('it', Param(), lineno=414, col_offset=29)], None, None, []), [Return(Call(Name('set', Load(), lineno=415, col_offset=15), [Name('it', Load(), lineno=415, col_offset=19)], [], None, None, lineno=415, col_offset=15), lineno=415, col_offset=8)], [Name('classmethod', Load(), lineno=413, col_offset=5)], lineno=413, col_offset=4), FunctionDef('__contains__', arguments([Name('self', Param(), lineno=417, col_offset=21), Name('item', Param(), lineno=417, col_offset=27)], None, None, []), [Assign([Tuple([Name('key', Store(), lineno=418, col_offset=8), Name('value', Store(), lineno=418, col_offset=13)], Store(), lineno=418, col_offset=8)], Name('item', Load(), lineno=418, col_offset=21), lineno=418, col_offset=8), TryExcept([Assign([Name('v', Store(), lineno=420, col_offset=12)], Subscript(Attribute(Name('self', Load(), lineno=420, col_offset=16), '_mapping', Load(), lineno=420, col_offset=16), Index(Name('key', Load(), lineno=420, col_offset=30)), Load(), lineno=420, col_offset=16), lineno=420, col_offset=12)], [ExceptHandler(Name('KeyError', Load(), lineno=421, col_offset=15), None, [Return(Name('False', Load(), lineno=422, col_offset=19), lineno=422, col_offset=12)], lineno=421, col_offset=8)], [Return(Compare(Name('v', Load(), lineno=424, col_offset=19), [Eq()], [Name('value', Load(), lineno=424, col_offset=24)], lineno=424, col_offset=19), lineno=424, col_offset=12)], lineno=419, col_offset=8)], [], lineno=417, col_offset=4), FunctionDef('__iter__', arguments([Name('self', Param(), lineno=426, col_offset=17)], None, None, []), [For(Name('key', Store(), lineno=427, col_offset=12), Attribute(Name('self', Load(), lineno=427, col_offset=19), '_mapping', Load(), lineno=427, col_offset=19), [Expr(Yield(Tuple([Name('key', Load(), lineno=428, col_offset=19), Subscript(Attribute(Name('self', Load(), lineno=428, col_offset=24), '_mapping', Load(), lineno=428, col_offset=24), Index(Name('key', Load(), lineno=428, col_offset=38)), Load(), lineno=428, col_offset=24)], Load(), lineno=428, col_offset=19), lineno=428, col_offset=12), lineno=428, col_offset=12)], [], lineno=427, col_offset=8)], [], lineno=426, col_offset=4)], [], lineno=411, col_offset=0), ClassDef('ValuesView', [Name('MappingView', Load(), lineno=431, col_offset=17)], [FunctionDef('__contains__', arguments([Name('self', Param(), lineno=433, col_offset=21), Name('value', Param(), lineno=433, col_offset=27)], None, None, []), [For(Name('key', Store(), lineno=434, col_offset=12), Attribute(Name('self', Load(), lineno=434, col_offset=19), '_mapping', Load(), lineno=434, col_offset=19), [If(Compare(Name('value', Load(), lineno=435, col_offset=15), [Eq()], [Subscript(Attribute(Name('self', Load(), lineno=435, col_offset=24), '_mapping', Load(), lineno=435, col_offset=24), Index(Name('key', Load(), lineno=435, col_offset=38)), Load(), lineno=435, col_offset=24)], lineno=435, col_offset=15), [Return(Name('True', Load(), lineno=436, col_offset=23), lineno=436, col_offset=16)], [], lineno=435, col_offset=12)], [], lineno=434, col_offset=8), Return(Name('False', Load(), lineno=437, col_offset=15), lineno=437, col_offset=8)], [], lineno=433, col_offset=4), FunctionDef('__iter__', arguments([Name('self', Param(), lineno=439, col_offset=17)], None, None, []), [For(Name('key', Store(), lineno=440, col_offset=12), Attribute(Name('self', Load(), lineno=440, col_offset=19), '_mapping', Load(), lineno=440, col_offset=19), [Expr(Yield(Subscript(Attribute(Name('self', Load(), lineno=441, col_offset=18), '_mapping', Load(), lineno=441, col_offset=18), Index(Name('key', Load(), lineno=441, col_offset=32)), Load(), lineno=441, col_offset=18), lineno=441, col_offset=12), lineno=441, col_offset=12)], [], lineno=440, col_offset=8)], [], lineno=439, col_offset=4)], [], lineno=431, col_offset=0), ClassDef('MutableMapping', [Name('Mapping', Load(), lineno=444, col_offset=21)], [FunctionDef('__setitem__', arguments([Name('self', Param(), lineno=447, col_offset=20), Name('key', Param(), lineno=447, col_offset=26), Name('value', Param(), lineno=447, col_offset=31)], None, None, []), [Raise(Name('KeyError', Load(), lineno=448, col_offset=14), None, None, lineno=448, col_offset=8)], [Name('abstractmethod', Load(), lineno=446, col_offset=5)], lineno=446, col_offset=4), FunctionDef('__delitem__', arguments([Name('self', Param(), lineno=451, col_offset=20), Name('key', Param(), lineno=451, col_offset=26)], None, None, []), [Raise(Name('KeyError', Load(), lineno=452, col_offset=14), None, None, lineno=452, col_offset=8)], [Name('abstractmethod', Load(), lineno=450, col_offset=5)], lineno=450, col_offset=4), Assign([Name('__marker', Store(), lineno=454, col_offset=4)], Call(Name('object', Load(), lineno=454, col_offset=15), [], [], None, None, lineno=454, col_offset=15), lineno=454, col_offset=4), FunctionDef('pop', arguments([Name('self', Param(), lineno=456, col_offset=12), Name('key', Param(), lineno=456, col_offset=18), Name('default', Param(), lineno=456, col_offset=23)], None, None, [Name('__marker', Load(), lineno=456, col_offset=31)]), [TryExcept([Assign([Name('value', Store(), lineno=458, col_offset=12)], Subscript(Name('self', Load(), lineno=458, col_offset=20), Index(Name('key', Load(), lineno=458, col_offset=25)), Load(), lineno=458, col_offset=20), lineno=458, col_offset=12)], [ExceptHandler(Name('KeyError', Load(), lineno=459, col_offset=15), None, [If(Compare(Name('default', Load(), lineno=460, col_offset=15), [Is()], [Attribute(Name('self', Load(), lineno=460, col_offset=26), '__marker', Load(), lineno=460, col_offset=26)], lineno=460, col_offset=15), [Raise(None, None, None, lineno=461, col_offset=16)], [], lineno=460, col_offset=12), Return(Name('default', Load(), lineno=462, col_offset=19), lineno=462, col_offset=12)], lineno=459, col_offset=8)], [Delete([Subscript(Name('self', Load(), lineno=464, col_offset=16), Index(Name('key', Load(), lineno=464, col_offset=21)), Del(), lineno=464, col_offset=16)], lineno=464, col_offset=12), Return(Name('value', Load(), lineno=465, col_offset=19), lineno=465, col_offset=12)], lineno=457, col_offset=8)], [], lineno=456, col_offset=4), FunctionDef('popitem', arguments([Name('self', Param(), lineno=467, col_offset=16)], None, None, []), [TryExcept([Assign([Name('key', Store(), lineno=469, col_offset=12)], Call(Name('next', Load(), lineno=469, col_offset=18), [Call(Name('iter', Load(), lineno=469, col_offset=23), [Name('self', Load(), lineno=469, col_offset=28)], [], None, None, lineno=469, col_offset=23)], [], None, None, lineno=469, col_offset=18), lineno=469, col_offset=12)], [ExceptHandler(Name('StopIteration', Load(), lineno=470, col_offset=15), None, [Raise(Name('KeyError', Load(), lineno=471, col_offset=18), None, None, lineno=471, col_offset=12)], lineno=470, col_offset=8)], [], lineno=468, col_offset=8), Assign([Name('value', Store(), lineno=472, col_offset=8)], Subscript(Name('self', Load(), lineno=472, col_offset=16), Index(Name('key', Load(), lineno=472, col_offset=21)), Load(), lineno=472, col_offset=16), lineno=472, col_offset=8), Delete([Subscript(Name('self', Load(), lineno=473, col_offset=12), Index(Name('key', Load(), lineno=473, col_offset=17)), Del(), lineno=473, col_offset=12)], lineno=473, col_offset=8), Return(Tuple([Name('key', Load(), lineno=474, col_offset=15), Name('value', Load(), lineno=474, col_offset=20)], Load(), lineno=474, col_offset=15), lineno=474, col_offset=8)], [], lineno=467, col_offset=4), FunctionDef('clear', arguments([Name('self', Param(), lineno=476, col_offset=14)], None, None, []), [TryExcept([While(Name('True', Load(), lineno=478, col_offset=18), [Expr(Call(Attribute(Name('self', Load(), lineno=479, col_offset=16), 'popitem', Load(), lineno=479, col_offset=16), [], [], None, None, lineno=479, col_offset=16), lineno=479, col_offset=16)], [], lineno=478, col_offset=12)], [ExceptHandler(Name('KeyError', Load(), lineno=480, col_offset=15), None, [Pass( lineno=481, col_offset=12)], lineno=480, col_offset=8)], [], lineno=477, col_offset=8)], [], lineno=476, col_offset=4), FunctionDef('update', arguments([], 'args', 'kwds', []), [If(Compare(Call(Name('len', Load(), lineno=484, col_offset=11), [Name('args', Load(), lineno=484, col_offset=15)], [], None, None, lineno=484, col_offset=11), [Gt()], [Num(2, lineno=484, col_offset=23)], lineno=484, col_offset=11), [Raise(Call(Name('TypeError', Load(), lineno=485, col_offset=18), [Call(Attribute(Str('update() takes at most 2 positional arguments ({} given)', lineno=485, col_offset=28), 'format', Load(), lineno=485, col_offset=28), [Call(Name('len', Load(), lineno=486, col_offset=58), [Name('args', Load(), lineno=486, col_offset=62)], [], None, None, lineno=486, col_offset=58)], [], None, None, lineno=485, col_offset=28)], [], None, None, lineno=485, col_offset=18), None, None, lineno=485, col_offset=12)], [If(UnaryOp(Not(), Name('args', Load(), lineno=487, col_offset=17), lineno=487, col_offset=13), [Raise(Call(Name('TypeError', Load(), lineno=488, col_offset=18), [Str('update() takes at least 1 argument (0 given)', lineno=488, col_offset=28)], [], None, None, lineno=488, col_offset=18), None, None, lineno=488, col_offset=12)], [], lineno=487, col_offset=13)], lineno=484, col_offset=8), Assign([Name('self', Store(), lineno=489, col_offset=8)], Subscript(Name('args', Load(), lineno=489, col_offset=15), Index(Num(0, lineno=489, col_offset=20)), Load(), lineno=489, col_offset=15), lineno=489, col_offset=8), Assign([Name('other', Store(), lineno=490, col_offset=8)], IfExp(Compare(Call(Name('len', Load(), lineno=490, col_offset=27), [Name('args', Load(), lineno=490, col_offset=31)], [], None, None, lineno=490, col_offset=27), [GtE()], [Num(2, lineno=490, col_offset=40)], lineno=490, col_offset=27), Subscript(Name('args', Load(), lineno=490, col_offset=16), Index(Num(1, lineno=490, col_offset=21)), Load(), lineno=490, col_offset=16), Tuple([], Load(), lineno=490, col_offset=47), lineno=490, col_offset=16), lineno=490, col_offset=8), If(Call(Name('isinstance', Load(), lineno=492, col_offset=11), [Name('other', Load(), lineno=492, col_offset=22), Name('Mapping', Load(), lineno=492, col_offset=29)], [], None, None, lineno=492, col_offset=11), [For(Name('key', Store(), lineno=493, col_offset=16), Name('other', Load(), lineno=493, col_offset=23), [Assign([Subscript(Name('self', Load(), lineno=494, col_offset=16), Index(Name('key', Load(), lineno=494, col_offset=21)), Store(), lineno=494, col_offset=16)], Subscript(Name('other', Load(), lineno=494, col_offset=28), Index(Name('key', Load(), lineno=494, col_offset=34)), Load(), lineno=494, col_offset=28), lineno=494, col_offset=16)], [], lineno=493, col_offset=12)], [If(Call(Name('hasattr', Load(), lineno=495, col_offset=13), [Name('other', Load(), lineno=495, col_offset=21), Str('keys', lineno=495, col_offset=28)], [], None, None, lineno=495, col_offset=13), [For(Name('key', Store(), lineno=496, col_offset=16), Call(Attribute(Name('other', Load(), lineno=496, col_offset=23), 'keys', Load(), lineno=496, col_offset=23), [], [], None, None, lineno=496, col_offset=23), [Assign([Subscript(Name('self', Load(), lineno=497, col_offset=16), Index(Name('key', Load(), lineno=497, col_offset=21)), Store(), lineno=497, col_offset=16)], Subscript(Name('other', Load(), lineno=497, col_offset=28), Index(Name('key', Load(), lineno=497, col_offset=34)), Load(), lineno=497, col_offset=28), lineno=497, col_offset=16)], [], lineno=496, col_offset=12)], [For(Tuple([Name('key', Store(), lineno=499, col_offset=16), Name('value', Store(), lineno=499, col_offset=21)], Store(), lineno=499, col_offset=16), Name('other', Load(), lineno=499, col_offset=30), [Assign([Subscript(Name('self', Load(), lineno=500, col_offset=16), Index(Name('key', Load(), lineno=500, col_offset=21)), Store(), lineno=500, col_offset=16)], Name('value', Load(), lineno=500, col_offset=28), lineno=500, col_offset=16)], [], lineno=499, col_offset=12)], lineno=495, col_offset=13)], lineno=492, col_offset=8), For(Tuple([Name('key', Store(), lineno=501, col_offset=12), Name('value', Store(), lineno=501, col_offset=17)], Store(), lineno=501, col_offset=12), Call(Attribute(Name('kwds', Load(), lineno=501, col_offset=26), 'items', Load(), lineno=501, col_offset=26), [], [], None, None, lineno=501, col_offset=26), [Assign([Subscript(Name('self', Load(), lineno=502, col_offset=12), Index(Name('key', Load(), lineno=502, col_offset=17)), Store(), lineno=502, col_offset=12)], Name('value', Load(), lineno=502, col_offset=24), lineno=502, col_offset=12)], [], lineno=501, col_offset=8)], [], lineno=483, col_offset=4), FunctionDef('setdefault', arguments([Name('self', Param(), lineno=504, col_offset=19), Name('key', Param(), lineno=504, col_offset=25), Name('default', Param(), lineno=504, col_offset=30)], None, None, [Name('None', Load(), lineno=504, col_offset=38)]), [TryExcept([Return(Subscript(Name('self', Load(), lineno=506, col_offset=19), Index(Name('key', Load(), lineno=506, col_offset=24)), Load(), lineno=506, col_offset=19), lineno=506, col_offset=12)], [ExceptHandler(Name('KeyError', Load(), lineno=507, col_offset=15), None, [Assign([Subscript(Name('self', Load(), lineno=508, col_offset=12), Index(Name('key', Load(), lineno=508, col_offset=17)), Store(), lineno=508, col_offset=12)], Name('default', Load(), lineno=508, col_offset=24), lineno=508, col_offset=12)], lineno=507, col_offset=8)], [], lineno=505, col_offset=8), Return(Name('default', Load(), lineno=509, col_offset=15), lineno=509, col_offset=8)], [], lineno=504, col_offset=4)], [], lineno=444, col_offset=0), Expr(Call(Attribute(Name('MutableMapping', Load(), lineno=511, col_offset=0), 'register', Load(), lineno=511, col_offset=0), [Name('dict', Load(), lineno=511, col_offset=24)], [], None, None, lineno=511, col_offset=0), lineno=511, col_offset=0), ClassDef('Sequence', [Name('Sized', Load(), lineno=517, col_offset=15), Name('Iterable', Load(), lineno=517, col_offset=22), Name('Container', Load(), lineno=517, col_offset=32)], [Expr(Str('All the operations on a read-only sequence.\n\n    Concrete subclasses must override __new__ or __init__,\n    __getitem__, and __len__.\n    ', lineno=522, col_offset=-1), lineno=522, col_offset=-1), FunctionDef('__getitem__', arguments([Name('self', Param(), lineno=525, col_offset=20), Name('index', Param(), lineno=525, col_offset=26)], None, None, []), [Raise(Name('IndexError', Load(), lineno=526, col_offset=14), None, None, lineno=526, col_offset=8)], [Name('abstractmethod', Load(), lineno=524, col_offset=5)], lineno=524, col_offset=4), FunctionDef('__iter__', arguments([Name('self', Param(), lineno=528, col_offset=17)], None, None, []), [Assign([Name('i', Store(), lineno=529, col_offset=8)], Num(0, lineno=529, col_offset=12), lineno=529, col_offset=8), TryExcept([While(Name('True', Load(), lineno=531, col_offset=18), [Assign([Name('v', Store(), lineno=532, col_offset=16)], Subscript(Name('self', Load(), lineno=532, col_offset=20), Index(Name('i', Load(), lineno=532, col_offset=25)), Load(), lineno=532, col_offset=20), lineno=532, col_offset=16), Expr(Yield(Name('v', Load(), lineno=533, col_offset=22), lineno=533, col_offset=16), lineno=533, col_offset=16), AugAssign(Name('i', Store(), lineno=534, col_offset=16), Add(), Num(1, lineno=534, col_offset=21), lineno=534, col_offset=16)], [], lineno=531, col_offset=12)], [ExceptHandler(Name('IndexError', Load(), lineno=535, col_offset=15), None, [Return(None, lineno=536, col_offset=12)], lineno=535, col_offset=8)], [], lineno=530, col_offset=8)], [], lineno=528, col_offset=4), FunctionDef('__contains__', arguments([Name('self', Param(), lineno=538, col_offset=21), Name('value', Param(), lineno=538, col_offset=27)], None, None, []), [For(Name('v', Store(), lineno=539, col_offset=12), Name('self', Load(), lineno=539, col_offset=17), [If(Compare(Name('v', Load(), lineno=540, col_offset=15), [Eq()], [Name('value', Load(), lineno=540, col_offset=20)], lineno=540, col_offset=15), [Return(Name('True', Load(), lineno=541, col_offset=23), lineno=541, col_offset=16)], [], lineno=540, col_offset=12)], [], lineno=539, col_offset=8), Return(Name('False', Load(), lineno=542, col_offset=15), lineno=542, col_offset=8)], [], lineno=538, col_offset=4), FunctionDef('__reversed__', arguments([Name('self', Param(), lineno=544, col_offset=21)], None, None, []), [For(Name('i', Store(), lineno=545, col_offset=12), Call(Name('reversed', Load(), lineno=545, col_offset=17), [Call(Name('range', Load(), lineno=545, col_offset=26), [Call(Name('len', Load(), lineno=545, col_offset=32), [Name('self', Load(), lineno=545, col_offset=36)], [], None, None, lineno=545, col_offset=32)], [], None, None, lineno=545, col_offset=26)], [], None, None, lineno=545, col_offset=17), [Expr(Yield(Subscript(Name('self', Load(), lineno=546, col_offset=18), Index(Name('i', Load(), lineno=546, col_offset=23)), Load(), lineno=546, col_offset=18), lineno=546, col_offset=12), lineno=546, col_offset=12)], [], lineno=545, col_offset=8)], [], lineno=544, col_offset=4), FunctionDef('index', arguments([Name('self', Param(), lineno=548, col_offset=14), Name('value', Param(), lineno=548, col_offset=20)], None, None, []), [For(Tuple([Name('i', Store(), lineno=549, col_offset=12), Name('v', Store(), lineno=549, col_offset=15)], Store(), lineno=549, col_offset=12), Call(Name('enumerate', Load(), lineno=549, col_offset=20), [Name('self', Load(), lineno=549, col_offset=30)], [], None, None, lineno=549, col_offset=20), [If(Compare(Name('v', Load(), lineno=550, col_offset=15), [Eq()], [Name('value', Load(), lineno=550, col_offset=20)], lineno=550, col_offset=15), [Return(Name('i', Load(), lineno=551, col_offset=23), lineno=551, col_offset=16)], [], lineno=550, col_offset=12)], [], lineno=549, col_offset=8), Raise(Name('ValueError', Load(), lineno=552, col_offset=14), None, None, lineno=552, col_offset=8)], [], lineno=548, col_offset=4), FunctionDef('count', arguments([Name('self', Param(), lineno=554, col_offset=14), Name('value', Param(), lineno=554, col_offset=20)], None, None, []), [Return(Call(Name('sum', Load(), lineno=555, col_offset=15), [GeneratorExp(Num(1, lineno=555, col_offset=19), [comprehension(Name('v', Store(), lineno=555, col_offset=25), Name('self', Load(), lineno=555, col_offset=30), [Compare(Name('v', Load(), lineno=555, col_offset=38), [Eq()], [Name('value', Load(), lineno=555, col_offset=43)], lineno=555, col_offset=38)])], lineno=555, col_offset=19)], [], None, None, lineno=555, col_offset=15), lineno=555, col_offset=8)], [], lineno=554, col_offset=4)], [], lineno=517, col_offset=0), Expr(Call(Attribute(Name('Sequence', Load(), lineno=557, col_offset=0), 'register', Load(), lineno=557, col_offset=0), [Name('tuple', Load(), lineno=557, col_offset=18)], [], None, None, lineno=557, col_offset=0), lineno=557, col_offset=0), Expr(Call(Attribute(Name('Sequence', Load(), lineno=558, col_offset=0), 'register', Load(), lineno=558, col_offset=0), [Name('basestring', Load(), lineno=558, col_offset=18)], [], None, None, lineno=558, col_offset=0), lineno=558, col_offset=0), Expr(Call(Attribute(Name('Sequence', Load(), lineno=559, col_offset=0), 'register', Load(), lineno=559, col_offset=0), [Name('buffer', Load(), lineno=559, col_offset=18)], [], None, None, lineno=559, col_offset=0), lineno=559, col_offset=0), Expr(Call(Attribute(Name('Sequence', Load(), lineno=560, col_offset=0), 'register', Load(), lineno=560, col_offset=0), [Name('xrange', Load(), lineno=560, col_offset=18)], [], None, None, lineno=560, col_offset=0), lineno=560, col_offset=0), ClassDef('MutableSequence', [Name('Sequence', Load(), lineno=563, col_offset=22)], [FunctionDef('__setitem__', arguments([Name('self', Param(), lineno=566, col_offset=20), Name('index', Param(), lineno=566, col_offset=26), Name('value', Param(), lineno=566, col_offset=33)], None, None, []), [Raise(Name('IndexError', Load(), lineno=567, col_offset=14), None, None, lineno=567, col_offset=8)], [Name('abstractmethod', Load(), lineno=565, col_offset=5)], lineno=565, col_offset=4), FunctionDef('__delitem__', arguments([Name('self', Param(), lineno=570, col_offset=20), Name('index', Param(), lineno=570, col_offset=26)], None, None, []), [Raise(Name('IndexError', Load(), lineno=571, col_offset=14), None, None, lineno=571, col_offset=8)], [Name('abstractmethod', Load(), lineno=569, col_offset=5)], lineno=569, col_offset=4), FunctionDef('insert', arguments([Name('self', Param(), lineno=574, col_offset=15), Name('index', Param(), lineno=574, col_offset=21), Name('value', Param(), lineno=574, col_offset=28)], None, None, []), [Raise(Name('IndexError', Load(), lineno=575, col_offset=14), None, None, lineno=575, col_offset=8)], [Name('abstractmethod', Load(), lineno=573, col_offset=5)], lineno=573, col_offset=4), FunctionDef('append', arguments([Name('self', Param(), lineno=577, col_offset=15), Name('value', Param(), lineno=577, col_offset=21)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=578, col_offset=8), 'insert', Load(), lineno=578, col_offset=8), [Call(Name('len', Load(), lineno=578, col_offset=20), [Name('self', Load(), lineno=578, col_offset=24)], [], None, None, lineno=578, col_offset=20), Name('value', Load(), lineno=578, col_offset=31)], [], None, None, lineno=578, col_offset=8), lineno=578, col_offset=8)], [], lineno=577, col_offset=4), FunctionDef('reverse', arguments([Name('self', Param(), lineno=580, col_offset=16)], None, None, []), [Assign([Name('n', Store(), lineno=581, col_offset=8)], Call(Name('len', Load(), lineno=581, col_offset=12), [Name('self', Load(), lineno=581, col_offset=16)], [], None, None, lineno=581, col_offset=12), lineno=581, col_offset=8), For(Name('i', Store(), lineno=582, col_offset=12), Call(Name('range', Load(), lineno=582, col_offset=17), [BinOp(Name('n', Load(), lineno=582, col_offset=23), FloorDiv(), Num(2, lineno=582, col_offset=26), lineno=582, col_offset=23)], [], None, None, lineno=582, col_offset=17), [Assign([Tuple([Subscript(Name('self', Load(), lineno=583, col_offset=12), Index(Name('i', Load(), lineno=583, col_offset=17)), Store(), lineno=583, col_offset=12), Subscript(Name('self', Load(), lineno=583, col_offset=21), Index(BinOp(BinOp(Name('n', Load(), lineno=583, col_offset=26), Sub(), Name('i', Load(), lineno=583, col_offset=28), lineno=583, col_offset=26), Sub(), Num(1, lineno=583, col_offset=30), lineno=583, col_offset=29)), Store(), lineno=583, col_offset=21)], Store(), lineno=583, col_offset=12)], Tuple([Subscript(Name('self', Load(), lineno=583, col_offset=35), Index(BinOp(BinOp(Name('n', Load(), lineno=583, col_offset=40), Sub(), Name('i', Load(), lineno=583, col_offset=42), lineno=583, col_offset=40), Sub(), Num(1, lineno=583, col_offset=44), lineno=583, col_offset=43)), Load(), lineno=583, col_offset=35), Subscript(Name('self', Load(), lineno=583, col_offset=48), Index(Name('i', Load(), lineno=583, col_offset=53)), Load(), lineno=583, col_offset=48)], Load(), lineno=583, col_offset=35), lineno=583, col_offset=12)], [], lineno=582, col_offset=8)], [], lineno=580, col_offset=4), FunctionDef('extend', arguments([Name('self', Param(), lineno=585, col_offset=15), Name('values', Param(), lineno=585, col_offset=21)], None, None, []), [For(Name('v', Store(), lineno=586, col_offset=12), Name('values', Load(), lineno=586, col_offset=17), [Expr(Call(Attribute(Name('self', Load(), lineno=587, col_offset=12), 'append', Load(), lineno=587, col_offset=12), [Name('v', Load(), lineno=587, col_offset=24)], [], None, None, lineno=587, col_offset=12), lineno=587, col_offset=12)], [], lineno=586, col_offset=8)], [], lineno=585, col_offset=4), FunctionDef('pop', arguments([Name('self', Param(), lineno=589, col_offset=12), Name('index', Param(), lineno=589, col_offset=18)], None, None, [Num(-1, lineno=589, col_offset=25)]), [Assign([Name('v', Store(), lineno=590, col_offset=8)], Subscript(Name('self', Load(), lineno=590, col_offset=12), Index(Name('index', Load(), lineno=590, col_offset=17)), Load(), lineno=590, col_offset=12), lineno=590, col_offset=8), Delete([Subscript(Name('self', Load(), lineno=591, col_offset=12), Index(Name('index', Load(), lineno=591, col_offset=17)), Del(), lineno=591, col_offset=12)], lineno=591, col_offset=8), Return(Name('v', Load(), lineno=592, col_offset=15), lineno=592, col_offset=8)], [], lineno=589, col_offset=4), FunctionDef('remove', arguments([Name('self', Param(), lineno=594, col_offset=15), Name('value', Param(), lineno=594, col_offset=21)], None, None, []), [Delete([Subscript(Name('self', Load(), lineno=595, col_offset=12), Index(Call(Attribute(Name('self', Load(), lineno=595, col_offset=17), 'index', Load(), lineno=595, col_offset=17), [Name('value', Load(), lineno=595, col_offset=28)], [], None, None, lineno=595, col_offset=17)), Del(), lineno=595, col_offset=12)], lineno=595, col_offset=8)], [], lineno=594, col_offset=4), FunctionDef('__iadd__', arguments([Name('self', Param(), lineno=597, col_offset=17), Name('values', Param(), lineno=597, col_offset=23)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=598, col_offset=8), 'extend', Load(), lineno=598, col_offset=8), [Name('values', Load(), lineno=598, col_offset=20)], [], None, None, lineno=598, col_offset=8), lineno=598, col_offset=8), Return(Name('self', Load(), lineno=599, col_offset=15), lineno=599, col_offset=8)], [], lineno=597, col_offset=4)], [], lineno=563, col_offset=0), Expr(Call(Attribute(Name('MutableSequence', Load(), lineno=601, col_offset=0), 'register', Load(), lineno=601, col_offset=0), [Name('list', Load(), lineno=601, col_offset=25)], [], None, None, lineno=601, col_offset=0), lineno=601, col_offset=0)])
