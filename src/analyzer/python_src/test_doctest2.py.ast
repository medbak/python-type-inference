Module([Expr(Str(u"A module to test whether doctest recognizes some 2.2 features,\nlike static and class methods.\n\n>>> print 'yup'  # 1\nyup\n\nWe include some (random) encoded (utf-8) text in the text surrounding\nthe example.  It should be ignored:\n\n\u0409\u040a\u0408\u0401\u0402\n\n", lineno=13, col_offset=-1), lineno=13, col_offset=-1), Import([alias('sys', None)], lineno=15, col_offset=0), Import([alias('unittest', None)], lineno=16, col_offset=0), ImportFrom('test', [alias('test_support', None)], 0, lineno=17, col_offset=0), If(Compare(Attribute(Attribute(Name('sys', Load(), lineno=18, col_offset=3), 'flags', Load(), lineno=18, col_offset=3), 'optimize', Load(), lineno=18, col_offset=3), [GtE()], [Num(2, lineno=18, col_offset=25)], lineno=18, col_offset=3), [Raise(Call(Attribute(Name('unittest', Load(), lineno=19, col_offset=10), 'SkipTest', Load(), lineno=19, col_offset=10), [Str('Cannot test docstrings with -O2', lineno=19, col_offset=28)], [], None, None, lineno=19, col_offset=10), None, None, lineno=19, col_offset=4)], [], lineno=18, col_offset=0), ClassDef('C', [Name('object', Load(), lineno=21, col_offset=8)], [Expr(Str(u'Class C.\n\n    >>> print C()  # 2\n    42\n\n\n    We include some (random) encoded (utf-8) text in the text surrounding\n    the example.  It should be ignored:\n\n        \u0409\u040a\u0408\u0401\u0402\n\n    ', lineno=33, col_offset=-1), lineno=33, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=35, col_offset=17)], None, None, []), [Expr(Str('C.__init__.\n\n        >>> print C() # 3\n        42\n        ', lineno=40, col_offset=-1), lineno=40, col_offset=-1)], [], lineno=35, col_offset=4), FunctionDef('__str__', arguments([Name('self', Param(), lineno=42, col_offset=16)], None, None, []), [Expr(Str('\n        >>> print C() # 4\n        42\n        ', lineno=46, col_offset=-1), lineno=46, col_offset=-1), Return(Str('42', lineno=47, col_offset=15), lineno=47, col_offset=8)], [], lineno=42, col_offset=4), ClassDef('D', [Name('object', Load(), lineno=49, col_offset=12)], [Expr(Str('A nested D class.\n\n        >>> print "In D!"   # 5\n        In D!\n        ', lineno=54, col_offset=-1), lineno=54, col_offset=-1), FunctionDef('nested', arguments([Name('self', Param(), lineno=56, col_offset=19)], None, None, []), [Expr(Str('\n            >>> print 3 # 6\n            3\n            ', lineno=60, col_offset=-1), lineno=60, col_offset=-1)], [], lineno=56, col_offset=8)], [], lineno=49, col_offset=4), FunctionDef('getx', arguments([Name('self', Param(), lineno=62, col_offset=13)], None, None, []), [Expr(Str('\n        >>> c = C()    # 7\n        >>> c.x = 12   # 8\n        >>> print c.x  # 9\n        -12\n        ', lineno=68, col_offset=-1), lineno=68, col_offset=-1), Return(UnaryOp(USub(), Attribute(Name('self', Load(), lineno=69, col_offset=16), '_x', Load(), lineno=69, col_offset=16), lineno=69, col_offset=15), lineno=69, col_offset=8)], [], lineno=62, col_offset=4), FunctionDef('setx', arguments([Name('self', Param(), lineno=71, col_offset=13), Name('value', Param(), lineno=71, col_offset=19)], None, None, []), [Expr(Str('\n        >>> c = C()     # 10\n        >>> c.x = 12    # 11\n        >>> print c.x   # 12\n        -12\n        ', lineno=77, col_offset=-1), lineno=77, col_offset=-1), Assign([Attribute(Name('self', Load(), lineno=78, col_offset=8), '_x', Store(), lineno=78, col_offset=8)], Name('value', Load(), lineno=78, col_offset=18), lineno=78, col_offset=8)], [], lineno=71, col_offset=4), Assign([Name('x', Store(), lineno=80, col_offset=4)], Call(Name('property', Load(), lineno=80, col_offset=8), [Name('getx', Load(), lineno=80, col_offset=17), Name('setx', Load(), lineno=80, col_offset=23)], [keyword('doc', Str('        >>> c = C()    # 13\n        >>> c.x = 12   # 14\n        >>> print c.x  # 15\n        -12\n        ', lineno=85, col_offset=-1))], None, None, lineno=80, col_offset=8), lineno=80, col_offset=4), FunctionDef('statm', arguments([], None, None, []), [Expr(Str('\n        A static method.\n\n        >>> print C.statm()    # 16\n        666\n        >>> print C().statm()  # 17\n        666\n        ', lineno=96, col_offset=-1), lineno=96, col_offset=-1), Return(Num(666, lineno=97, col_offset=15), lineno=97, col_offset=8)], [Name('staticmethod', Load(), lineno=87, col_offset=5)], lineno=87, col_offset=4), FunctionDef('clsm', arguments([Name('cls', Param(), lineno=100, col_offset=13), Name('val', Param(), lineno=100, col_offset=18)], None, None, []), [Expr(Str('\n        A class method.\n\n        >>> print C.clsm(22)    # 18\n        22\n        >>> print C().clsm(23)  # 19\n        23\n        ', lineno=108, col_offset=-1), lineno=108, col_offset=-1), Return(Name('val', Load(), lineno=109, col_offset=15), lineno=109, col_offset=8)], [Name('classmethod', Load(), lineno=99, col_offset=5)], lineno=99, col_offset=4)], [], lineno=21, col_offset=0), FunctionDef('test_main', arguments([], None, None, []), [ImportFrom('test', [alias('test_doctest2', None)], 0, lineno=112, col_offset=4), Assign([Name('EXPECTED', Store(), lineno=113, col_offset=4)], Num(19, lineno=113, col_offset=15), lineno=113, col_offset=4), Assign([Tuple([Name('f', Store(), lineno=114, col_offset=4), Name('t', Store(), lineno=114, col_offset=7)], Store(), lineno=114, col_offset=4)], Call(Attribute(Name('test_support', Load(), lineno=114, col_offset=11), 'run_doctest', Load(), lineno=114, col_offset=11), [Name('test_doctest2', Load(), lineno=114, col_offset=36)], [], None, None, lineno=114, col_offset=11), lineno=114, col_offset=4), If(Compare(Name('t', Load(), lineno=115, col_offset=7), [NotEq()], [Name('EXPECTED', Load(), lineno=115, col_offset=12)], lineno=115, col_offset=7), [Raise(Call(Attribute(Name('test_support', Load(), lineno=116, col_offset=14), 'TestFailed', Load(), lineno=116, col_offset=14), [BinOp(Str('expected %d tests to run, not %d', lineno=116, col_offset=38), Mod(), Tuple([Name('EXPECTED', Load(), lineno=117, col_offset=39), Name('t', Load(), lineno=117, col_offset=49)], Load(), lineno=117, col_offset=39), lineno=116, col_offset=38)], [], None, None, lineno=116, col_offset=14), None, None, lineno=116, col_offset=8)], [], lineno=115, col_offset=4)], [], lineno=111, col_offset=0), ImportFrom('doctest', [alias('*', None)], 0, lineno=121, col_offset=0), If(Compare(Name('__name__', Load(), lineno=123, col_offset=3), [Eq()], [Str('__main__', lineno=123, col_offset=15)], lineno=123, col_offset=3), [Expr(Call(Name('test_main', Load(), lineno=124, col_offset=4), [], [], None, None, lineno=124, col_offset=4), lineno=124, col_offset=4)], [], lineno=123, col_offset=0)])
