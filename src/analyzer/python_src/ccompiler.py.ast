Module([Expr(Str('distutils.ccompiler\n\nContains CCompiler, an abstract base class that defines the interface\nfor the Distutils compiler abstraction model.', lineno=4, col_offset=-1), lineno=4, col_offset=-1), Assign([Name('__revision__', Store(), lineno=6, col_offset=0)], Str('$Id: ccompiler.py 86238 2010-11-06 04:06:18Z eric.araujo $', lineno=6, col_offset=15), lineno=6, col_offset=0), Import([alias('sys', None)], lineno=8, col_offset=0), Import([alias('os', None)], lineno=9, col_offset=0), Import([alias('re', None)], lineno=10, col_offset=0), ImportFrom('distutils.errors', [alias('CompileError', None), alias('LinkError', None), alias('UnknownFileError', None), alias('DistutilsPlatformError', None), alias('DistutilsModuleError', None)], 0, lineno=12, col_offset=0), ImportFrom('distutils.spawn', [alias('spawn', None)], 0, lineno=14, col_offset=0), ImportFrom('distutils.file_util', [alias('move_file', None)], 0, lineno=15, col_offset=0), ImportFrom('distutils.dir_util', [alias('mkpath', None)], 0, lineno=16, col_offset=0), ImportFrom('distutils.dep_util', [alias('newer_group', None)], 0, lineno=17, col_offset=0), ImportFrom('distutils.util', [alias('split_quoted', None), alias('execute', None)], 0, lineno=18, col_offset=0), ImportFrom('distutils', [alias('log', None)], 0, lineno=19, col_offset=0), Assign([Name('_sysconfig', Store(), lineno=21, col_offset=0)], Call(Name('__import__', Load(), lineno=21, col_offset=13), [Str('sysconfig', lineno=21, col_offset=24)], [], None, None, lineno=21, col_offset=13), lineno=21, col_offset=0), FunctionDef('customize_compiler', arguments([Name('compiler', Param(), lineno=23, col_offset=23)], None, None, []), [Expr(Str("Do any platform-specific customization of a CCompiler instance.\n\n    Mainly needed on Unix, so we can plug in the information that\n    varies across Unices and is stored in Python's Makefile.\n    ", lineno=28, col_offset=-1), lineno=28, col_offset=-1), If(Compare(Attribute(Name('compiler', Load(), lineno=29, col_offset=7), 'compiler_type', Load(), lineno=29, col_offset=7), [Eq()], [Str('unix', lineno=29, col_offset=33)], lineno=29, col_offset=7), [Assign([Tuple([Name('cc', Store(), lineno=30, col_offset=9), Name('cxx', Store(), lineno=30, col_offset=13), Name('opt', Store(), lineno=30, col_offset=18), Name('cflags', Store(), lineno=30, col_offset=23), Name('ccshared', Store(), lineno=30, col_offset=31), Name('ldshared', Store(), lineno=30, col_offset=41), Name('so_ext', Store(), lineno=30, col_offset=51), Name('ar', Store(), lineno=30, col_offset=59), Name('ar_flags', Store(), lineno=30, col_offset=63)], Store(), lineno=30, col_offset=9)], Call(Attribute(Name('_sysconfig', Load(), lineno=31, col_offset=12), 'get_config_vars', Load(), lineno=31, col_offset=12), [Str('CC', lineno=31, col_offset=39), Str('CXX', lineno=31, col_offset=45), Str('OPT', lineno=31, col_offset=52), Str('CFLAGS', lineno=31, col_offset=59), Str('CCSHARED', lineno=32, col_offset=39), Str('LDSHARED', lineno=32, col_offset=51), Str('SO', lineno=32, col_offset=63), Str('AR', lineno=32, col_offset=69), Str('ARFLAGS', lineno=33, col_offset=39)], [], None, None, lineno=31, col_offset=12), lineno=30, col_offset=8), If(Compare(Str('CC', lineno=35, col_offset=11), [In()], [Attribute(Name('os', Load(), lineno=35, col_offset=19), 'environ', Load(), lineno=35, col_offset=19)], lineno=35, col_offset=11), [Assign([Name('cc', Store(), lineno=36, col_offset=12)], Subscript(Attribute(Name('os', Load(), lineno=36, col_offset=17), 'environ', Load(), lineno=36, col_offset=17), Index(Str('CC', lineno=36, col_offset=28)), Load(), lineno=36, col_offset=17), lineno=36, col_offset=12)], [], lineno=35, col_offset=8), If(Compare(Str('CXX', lineno=37, col_offset=11), [In()], [Attribute(Name('os', Load(), lineno=37, col_offset=20), 'environ', Load(), lineno=37, col_offset=20)], lineno=37, col_offset=11), [Assign([Name('cxx', Store(), lineno=38, col_offset=12)], Subscript(Attribute(Name('os', Load(), lineno=38, col_offset=18), 'environ', Load(), lineno=38, col_offset=18), Index(Str('CXX', lineno=38, col_offset=29)), Load(), lineno=38, col_offset=18), lineno=38, col_offset=12)], [], lineno=37, col_offset=8), If(Compare(Str('LDSHARED', lineno=39, col_offset=11), [In()], [Attribute(Name('os', Load(), lineno=39, col_offset=25), 'environ', Load(), lineno=39, col_offset=25)], lineno=39, col_offset=11), [Assign([Name('ldshared', Store(), lineno=40, col_offset=12)], Subscript(Attribute(Name('os', Load(), lineno=40, col_offset=23), 'environ', Load(), lineno=40, col_offset=23), Index(Str('LDSHARED', lineno=40, col_offset=34)), Load(), lineno=40, col_offset=23), lineno=40, col_offset=12)], [], lineno=39, col_offset=8), If(Compare(Str('CPP', lineno=41, col_offset=11), [In()], [Attribute(Name('os', Load(), lineno=41, col_offset=20), 'environ', Load(), lineno=41, col_offset=20)], lineno=41, col_offset=11), [Assign([Name('cpp', Store(), lineno=42, col_offset=12)], Subscript(Attribute(Name('os', Load(), lineno=42, col_offset=18), 'environ', Load(), lineno=42, col_offset=18), Index(Str('CPP', lineno=42, col_offset=29)), Load(), lineno=42, col_offset=18), lineno=42, col_offset=12)], [Assign([Name('cpp', Store(), lineno=44, col_offset=12)], BinOp(Name('cc', Load(), lineno=44, col_offset=18), Add(), Str(' -E', lineno=44, col_offset=23), lineno=44, col_offset=18), lineno=44, col_offset=12)], lineno=41, col_offset=8), If(Compare(Str('LDFLAGS', lineno=45, col_offset=11), [In()], [Attribute(Name('os', Load(), lineno=45, col_offset=24), 'environ', Load(), lineno=45, col_offset=24)], lineno=45, col_offset=11), [Assign([Name('ldshared', Store(), lineno=46, col_offset=12)], BinOp(BinOp(Name('ldshared', Load(), lineno=46, col_offset=23), Add(), Str(' ', lineno=46, col_offset=34), lineno=46, col_offset=23), Add(), Subscript(Attribute(Name('os', Load(), lineno=46, col_offset=40), 'environ', Load(), lineno=46, col_offset=40), Index(Str('LDFLAGS', lineno=46, col_offset=51)), Load(), lineno=46, col_offset=40), lineno=46, col_offset=38), lineno=46, col_offset=12)], [], lineno=45, col_offset=8), If(Compare(Str('CFLAGS', lineno=47, col_offset=11), [In()], [Attribute(Name('os', Load(), lineno=47, col_offset=23), 'environ', Load(), lineno=47, col_offset=23)], lineno=47, col_offset=11), [Assign([Name('cflags', Store(), lineno=48, col_offset=12)], BinOp(BinOp(Name('opt', Load(), lineno=48, col_offset=21), Add(), Str(' ', lineno=48, col_offset=27), lineno=48, col_offset=21), Add(), Subscript(Attribute(Name('os', Load(), lineno=48, col_offset=33), 'environ', Load(), lineno=48, col_offset=33), Index(Str('CFLAGS', lineno=48, col_offset=44)), Load(), lineno=48, col_offset=33), lineno=48, col_offset=31), lineno=48, col_offset=12), Assign([Name('ldshared', Store(), lineno=49, col_offset=12)], BinOp(BinOp(Name('ldshared', Load(), lineno=49, col_offset=23), Add(), Str(' ', lineno=49, col_offset=34), lineno=49, col_offset=23), Add(), Subscript(Attribute(Name('os', Load(), lineno=49, col_offset=40), 'environ', Load(), lineno=49, col_offset=40), Index(Str('CFLAGS', lineno=49, col_offset=51)), Load(), lineno=49, col_offset=40), lineno=49, col_offset=38), lineno=49, col_offset=12)], [], lineno=47, col_offset=8), If(Compare(Str('CPPFLAGS', lineno=50, col_offset=11), [In()], [Attribute(Name('os', Load(), lineno=50, col_offset=25), 'environ', Load(), lineno=50, col_offset=25)], lineno=50, col_offset=11), [Assign([Name('cpp', Store(), lineno=51, col_offset=12)], BinOp(BinOp(Name('cpp', Load(), lineno=51, col_offset=18), Add(), Str(' ', lineno=51, col_offset=24), lineno=51, col_offset=18), Add(), Subscript(Attribute(Name('os', Load(), lineno=51, col_offset=30), 'environ', Load(), lineno=51, col_offset=30), Index(Str('CPPFLAGS', lineno=51, col_offset=41)), Load(), lineno=51, col_offset=30), lineno=51, col_offset=28), lineno=51, col_offset=12), Assign([Name('cflags', Store(), lineno=52, col_offset=12)], BinOp(BinOp(Name('cflags', Load(), lineno=52, col_offset=21), Add(), Str(' ', lineno=52, col_offset=30), lineno=52, col_offset=21), Add(), Subscript(Attribute(Name('os', Load(), lineno=52, col_offset=36), 'environ', Load(), lineno=52, col_offset=36), Index(Str('CPPFLAGS', lineno=52, col_offset=47)), Load(), lineno=52, col_offset=36), lineno=52, col_offset=34), lineno=52, col_offset=12), Assign([Name('ldshared', Store(), lineno=53, col_offset=12)], BinOp(BinOp(Name('ldshared', Load(), lineno=53, col_offset=23), Add(), Str(' ', lineno=53, col_offset=34), lineno=53, col_offset=23), Add(), Subscript(Attribute(Name('os', Load(), lineno=53, col_offset=40), 'environ', Load(), lineno=53, col_offset=40), Index(Str('CPPFLAGS', lineno=53, col_offset=51)), Load(), lineno=53, col_offset=40), lineno=53, col_offset=38), lineno=53, col_offset=12)], [], lineno=50, col_offset=8), If(Compare(Str('AR', lineno=54, col_offset=11), [In()], [Attribute(Name('os', Load(), lineno=54, col_offset=19), 'environ', Load(), lineno=54, col_offset=19)], lineno=54, col_offset=11), [Assign([Name('ar', Store(), lineno=55, col_offset=12)], Subscript(Attribute(Name('os', Load(), lineno=55, col_offset=17), 'environ', Load(), lineno=55, col_offset=17), Index(Str('AR', lineno=55, col_offset=28)), Load(), lineno=55, col_offset=17), lineno=55, col_offset=12)], [], lineno=54, col_offset=8), If(Compare(Str('ARFLAGS', lineno=56, col_offset=11), [In()], [Attribute(Name('os', Load(), lineno=56, col_offset=24), 'environ', Load(), lineno=56, col_offset=24)], lineno=56, col_offset=11), [Assign([Name('archiver', Store(), lineno=57, col_offset=12)], BinOp(BinOp(Name('ar', Load(), lineno=57, col_offset=23), Add(), Str(' ', lineno=57, col_offset=28), lineno=57, col_offset=23), Add(), Subscript(Attribute(Name('os', Load(), lineno=57, col_offset=34), 'environ', Load(), lineno=57, col_offset=34), Index(Str('ARFLAGS', lineno=57, col_offset=45)), Load(), lineno=57, col_offset=34), lineno=57, col_offset=32), lineno=57, col_offset=12)], [Assign([Name('archiver', Store(), lineno=59, col_offset=12)], BinOp(BinOp(Name('ar', Load(), lineno=59, col_offset=23), Add(), Str(' ', lineno=59, col_offset=28), lineno=59, col_offset=23), Add(), Name('ar_flags', Load(), lineno=59, col_offset=34), lineno=59, col_offset=32), lineno=59, col_offset=12)], lineno=56, col_offset=8), Assign([Name('cc_cmd', Store(), lineno=61, col_offset=8)], BinOp(BinOp(Name('cc', Load(), lineno=61, col_offset=17), Add(), Str(' ', lineno=61, col_offset=22), lineno=61, col_offset=17), Add(), Name('cflags', Load(), lineno=61, col_offset=28), lineno=61, col_offset=26), lineno=61, col_offset=8), Expr(Call(Attribute(Name('compiler', Load(), lineno=62, col_offset=8), 'set_executables', Load(), lineno=62, col_offset=8), [], [keyword('preprocessor', Name('cpp', Load(), lineno=63, col_offset=25)), keyword('compiler', Name('cc_cmd', Load(), lineno=64, col_offset=21)), keyword('compiler_so', BinOp(BinOp(Name('cc_cmd', Load(), lineno=65, col_offset=24), Add(), Str(' ', lineno=65, col_offset=33), lineno=65, col_offset=24), Add(), Name('ccshared', Load(), lineno=65, col_offset=39), lineno=65, col_offset=37)), keyword('compiler_cxx', Name('cxx', Load(), lineno=66, col_offset=25)), keyword('linker_so', Name('ldshared', Load(), lineno=67, col_offset=22)), keyword('linker_exe', Name('cc', Load(), lineno=68, col_offset=23)), keyword('archiver', Name('archiver', Load(), lineno=69, col_offset=21))], None, None, lineno=62, col_offset=8), lineno=62, col_offset=8), Assign([Attribute(Name('compiler', Load(), lineno=71, col_offset=8), 'shared_lib_extension', Store(), lineno=71, col_offset=8)], Name('so_ext', Load(), lineno=71, col_offset=40), lineno=71, col_offset=8)], [], lineno=29, col_offset=4)], [], lineno=23, col_offset=0), ClassDef('CCompiler', [], [Expr(Str('Abstract base class to define the interface that must be implemented\n    by real compiler classes.  Also has some utility methods used by\n    several compiler classes.\n\n    The basic idea behind a compiler abstraction class is that each\n    instance can be used for all the compile/link steps in building a\n    single project.  Thus, attributes common to all of those compile and\n    link steps -- include directories, macros to define, libraries to link\n    against, etc. -- are attributes of the compiler instance.  To allow for\n    variability in how individual files are treated, most of those\n    attributes may be varied on a per-compilation or per-link basis.\n    ', lineno=85, col_offset=-1), lineno=85, col_offset=-1), Assign([Name('compiler_type', Store(), lineno=95, col_offset=4)], Name('None', Load(), lineno=95, col_offset=20), lineno=95, col_offset=4), Assign([Name('src_extensions', Store(), lineno=121, col_offset=4)], Name('None', Load(), lineno=121, col_offset=21), lineno=121, col_offset=4), Assign([Name('obj_extension', Store(), lineno=122, col_offset=4)], Name('None', Load(), lineno=122, col_offset=20), lineno=122, col_offset=4), Assign([Name('static_lib_extension', Store(), lineno=123, col_offset=4)], Name('None', Load(), lineno=123, col_offset=27), lineno=123, col_offset=4), Assign([Name('shared_lib_extension', Store(), lineno=124, col_offset=4)], Name('None', Load(), lineno=124, col_offset=27), lineno=124, col_offset=4), Assign([Name('static_lib_format', Store(), lineno=125, col_offset=4)], Name('None', Load(), lineno=125, col_offset=24), lineno=125, col_offset=4), Assign([Name('shared_lib_format', Store(), lineno=126, col_offset=4)], Name('None', Load(), lineno=126, col_offset=24), lineno=126, col_offset=4), Assign([Name('exe_extension', Store(), lineno=127, col_offset=4)], Name('None', Load(), lineno=127, col_offset=20), lineno=127, col_offset=4), Assign([Name('language_map', Store(), lineno=135, col_offset=4)], Dict([Str('.c', lineno=135, col_offset=20), Str('.cc', lineno=136, col_offset=20), Str('.cpp', lineno=137, col_offset=20), Str('.cxx', lineno=138, col_offset=20), Str('.m', lineno=139, col_offset=20)], [Str('c', lineno=135, col_offset=29), Str('c++', lineno=136, col_offset=29), Str('c++', lineno=137, col_offset=29), Str('c++', lineno=138, col_offset=29), Str('objc', lineno=139, col_offset=29)], lineno=135, col_offset=19), lineno=135, col_offset=4), Assign([Name('language_order', Store(), lineno=141, col_offset=4)], List([Str('c++', lineno=141, col_offset=22), Str('objc', lineno=141, col_offset=29), Str('c', lineno=141, col_offset=37)], Load(), lineno=141, col_offset=21), lineno=141, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=143, col_offset=18), Name('verbose', Param(), lineno=143, col_offset=24), Name('dry_run', Param(), lineno=143, col_offset=35), Name('force', Param(), lineno=143, col_offset=46)], None, None, [Num(0, lineno=143, col_offset=32), Num(0, lineno=143, col_offset=43), Num(0, lineno=143, col_offset=52)]), [Assign([Attribute(Name('self', Load(), lineno=144, col_offset=8), 'dry_run', Store(), lineno=144, col_offset=8)], Name('dry_run', Load(), lineno=144, col_offset=23), lineno=144, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=145, col_offset=8), 'force', Store(), lineno=145, col_offset=8)], Name('force', Load(), lineno=145, col_offset=21), lineno=145, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=146, col_offset=8), 'verbose', Store(), lineno=146, col_offset=8)], Name('verbose', Load(), lineno=146, col_offset=23), lineno=146, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=150, col_offset=8), 'output_dir', Store(), lineno=150, col_offset=8)], Name('None', Load(), lineno=150, col_offset=26), lineno=150, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=156, col_offset=8), 'macros', Store(), lineno=156, col_offset=8)], List([], Load(), lineno=156, col_offset=22), lineno=156, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=159, col_offset=8), 'include_dirs', Store(), lineno=159, col_offset=8)], List([], Load(), lineno=159, col_offset=28), lineno=159, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=163, col_offset=8), 'libraries', Store(), lineno=163, col_offset=8)], List([], Load(), lineno=163, col_offset=25), lineno=163, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=166, col_offset=8), 'library_dirs', Store(), lineno=166, col_offset=8)], List([], Load(), lineno=166, col_offset=28), lineno=166, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=170, col_offset=8), 'runtime_library_dirs', Store(), lineno=170, col_offset=8)], List([], Load(), lineno=170, col_offset=36), lineno=170, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=174, col_offset=8), 'objects', Store(), lineno=174, col_offset=8)], List([], Load(), lineno=174, col_offset=23), lineno=174, col_offset=8), For(Name('key', Store(), lineno=176, col_offset=12), Call(Attribute(Attribute(Name('self', Load(), lineno=176, col_offset=19), 'executables', Load(), lineno=176, col_offset=19), 'keys', Load(), lineno=176, col_offset=19), [], [], None, None, lineno=176, col_offset=19), [Expr(Call(Attribute(Name('self', Load(), lineno=177, col_offset=12), 'set_executable', Load(), lineno=177, col_offset=12), [Name('key', Load(), lineno=177, col_offset=32), Subscript(Attribute(Name('self', Load(), lineno=177, col_offset=37), 'executables', Load(), lineno=177, col_offset=37), Index(Name('key', Load(), lineno=177, col_offset=54)), Load(), lineno=177, col_offset=37)], [], None, None, lineno=177, col_offset=12), lineno=177, col_offset=12)], [], lineno=176, col_offset=8)], [], lineno=143, col_offset=4), FunctionDef('set_executables', arguments([Name('self', Param(), lineno=179, col_offset=24)], None, 'args', []), [Expr(Str("Define the executables (and options for them) that will be run\n        to perform the various stages of compilation.  The exact set of\n        executables that may be specified here depends on the compiler\n        class (via the 'executables' class attribute), but most will have:\n          compiler      the C/C++ compiler\n          linker_so     linker used to create shared objects and libraries\n          linker_exe    linker used to create binary executables\n          archiver      static library creator\n\n        On platforms with a command-line (Unix, DOS/Windows), each of these\n        is a string that will be split into executable name and (optional)\n        list of arguments.  (Splitting the string is done similarly to how\n        Unix shells operate: words are delimited by spaces, but quotes and\n        backslashes can override this.  See\n        'distutils.util.split_quoted()'.)\n        ", lineno=195, col_offset=-1), lineno=195, col_offset=-1), For(Name('key', Store(), lineno=205, col_offset=12), Call(Attribute(Name('args', Load(), lineno=205, col_offset=19), 'keys', Load(), lineno=205, col_offset=19), [], [], None, None, lineno=205, col_offset=19), [If(Compare(Name('key', Load(), lineno=206, col_offset=15), [NotIn()], [Attribute(Name('self', Load(), lineno=206, col_offset=26), 'executables', Load(), lineno=206, col_offset=26)], lineno=206, col_offset=15), [Raise(Name('ValueError', Load(), lineno=207, col_offset=22), BinOp(Str("unknown executable '%s' for class %s", lineno=208, col_offset=22), Mod(), Tuple([Name('key', Load(), lineno=209, col_offset=23), Attribute(Attribute(Name('self', Load(), lineno=209, col_offset=28), '__class__', Load(), lineno=209, col_offset=28), '__name__', Load(), lineno=209, col_offset=28)], Load(), lineno=209, col_offset=23), lineno=208, col_offset=22), None, lineno=207, col_offset=16)], [], lineno=206, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=210, col_offset=12), 'set_executable', Load(), lineno=210, col_offset=12), [Name('key', Load(), lineno=210, col_offset=32), Subscript(Name('args', Load(), lineno=210, col_offset=37), Index(Name('key', Load(), lineno=210, col_offset=42)), Load(), lineno=210, col_offset=37)], [], None, None, lineno=210, col_offset=12), lineno=210, col_offset=12)], [], lineno=205, col_offset=8)], [], lineno=179, col_offset=4), FunctionDef('set_executable', arguments([Name('self', Param(), lineno=212, col_offset=23), Name('key', Param(), lineno=212, col_offset=29), Name('value', Param(), lineno=212, col_offset=34)], None, None, []), [If(Call(Name('isinstance', Load(), lineno=213, col_offset=11), [Name('value', Load(), lineno=213, col_offset=22), Name('str', Load(), lineno=213, col_offset=29)], [], None, None, lineno=213, col_offset=11), [Expr(Call(Name('setattr', Load(), lineno=214, col_offset=12), [Name('self', Load(), lineno=214, col_offset=20), Name('key', Load(), lineno=214, col_offset=26), Call(Name('split_quoted', Load(), lineno=214, col_offset=31), [Name('value', Load(), lineno=214, col_offset=44)], [], None, None, lineno=214, col_offset=31)], [], None, None, lineno=214, col_offset=12), lineno=214, col_offset=12)], [Expr(Call(Name('setattr', Load(), lineno=216, col_offset=12), [Name('self', Load(), lineno=216, col_offset=20), Name('key', Load(), lineno=216, col_offset=26), Name('value', Load(), lineno=216, col_offset=31)], [], None, None, lineno=216, col_offset=12), lineno=216, col_offset=12)], lineno=213, col_offset=8)], [], lineno=212, col_offset=4), FunctionDef('_find_macro', arguments([Name('self', Param(), lineno=218, col_offset=20), Name('name', Param(), lineno=218, col_offset=26)], None, None, []), [Assign([Name('i', Store(), lineno=219, col_offset=8)], Num(0, lineno=219, col_offset=12), lineno=219, col_offset=8), For(Name('defn', Store(), lineno=220, col_offset=12), Attribute(Name('self', Load(), lineno=220, col_offset=20), 'macros', Load(), lineno=220, col_offset=20), [If(Compare(Subscript(Name('defn', Load(), lineno=221, col_offset=15), Index(Num(0, lineno=221, col_offset=20)), Load(), lineno=221, col_offset=15), [Eq()], [Name('name', Load(), lineno=221, col_offset=26)], lineno=221, col_offset=15), [Return(Name('i', Load(), lineno=222, col_offset=23), lineno=222, col_offset=16)], [], lineno=221, col_offset=12), Assign([Name('i', Store(), lineno=223, col_offset=12)], BinOp(Name('i', Load(), lineno=223, col_offset=16), Add(), Num(1, lineno=223, col_offset=20), lineno=223, col_offset=16), lineno=223, col_offset=12)], [], lineno=220, col_offset=8), Return(Name('None', Load(), lineno=224, col_offset=15), lineno=224, col_offset=8)], [], lineno=218, col_offset=4), FunctionDef('_check_macro_definitions', arguments([Name('self', Param(), lineno=226, col_offset=33), Name('definitions', Param(), lineno=226, col_offset=39)], None, None, []), [Expr(Str("Ensures that every element of 'definitions' is a valid macro\n        definition, ie. either (name,value) 2-tuple or a (name,) tuple.  Do\n        nothing if all definitions are OK, raise TypeError otherwise.\n        ", lineno=230, col_offset=-1), lineno=230, col_offset=-1), For(Name('defn', Store(), lineno=231, col_offset=12), Name('definitions', Load(), lineno=231, col_offset=20), [If(UnaryOp(Not(), BoolOp(And(), [Call(Name('isinstance', Load(), lineno=232, col_offset=20), [Name('defn', Load(), lineno=232, col_offset=31), Name('tuple', Load(), lineno=232, col_offset=37)], [], None, None, lineno=232, col_offset=20), BoolOp(Or(), [Compare(Call(Name('len', Load(), lineno=233, col_offset=21), [Name('defn', Load(), lineno=233, col_offset=26)], [], None, None, lineno=233, col_offset=21), [Eq()], [Num(1, lineno=233, col_offset=35)], lineno=233, col_offset=21), BoolOp(And(), [Compare(Call(Name('len', Load(), lineno=234, col_offset=22), [Name('defn', Load(), lineno=234, col_offset=27)], [], None, None, lineno=234, col_offset=22), [Eq()], [Num(2, lineno=234, col_offset=36)], lineno=234, col_offset=22), BoolOp(Or(), [Call(Name('isinstance', Load(), lineno=235, col_offset=23), [Subscript(Name('defn', Load(), lineno=235, col_offset=34), Index(Num(1, lineno=235, col_offset=39)), Load(), lineno=235, col_offset=34), Name('str', Load(), lineno=235, col_offset=43)], [], None, None, lineno=235, col_offset=23), Compare(Subscript(Name('defn', Load(), lineno=235, col_offset=51), Index(Num(1, lineno=235, col_offset=56)), Load(), lineno=235, col_offset=51), [Is()], [Name('None', Load(), lineno=235, col_offset=62)], lineno=235, col_offset=51)], lineno=235, col_offset=23)], lineno=234, col_offset=22)], lineno=233, col_offset=21), Call(Name('isinstance', Load(), lineno=236, col_offset=20), [Subscript(Name('defn', Load(), lineno=236, col_offset=31), Index(Num(0, lineno=236, col_offset=36)), Load(), lineno=236, col_offset=31), Name('str', Load(), lineno=236, col_offset=40)], [], None, None, lineno=236, col_offset=20)], lineno=232, col_offset=20), lineno=232, col_offset=15), [Raise(Name('TypeError', Load(), lineno=237, col_offset=22), BinOp(BinOp(BinOp(Str("invalid macro definition '%s': ", lineno=238, col_offset=23), Mod(), Name('defn', Load(), lineno=238, col_offset=59), lineno=238, col_offset=23), Add(), Str('must be tuple (string,), (string, string), or ', lineno=239, col_offset=22), lineno=238, col_offset=22), Add(), Str('(string, None)', lineno=240, col_offset=22), lineno=239, col_offset=71), None, lineno=237, col_offset=16)], [], lineno=232, col_offset=12)], [], lineno=231, col_offset=8)], [], lineno=226, col_offset=4), FunctionDef('define_macro', arguments([Name('self', Param(), lineno=245, col_offset=21), Name('name', Param(), lineno=245, col_offset=27), Name('value', Param(), lineno=245, col_offset=33)], None, None, [Name('None', Load(), lineno=245, col_offset=39)]), [Expr(Str("Define a preprocessor macro for all compilations driven by this\n        compiler object.  The optional parameter 'value' should be a\n        string; if it is not supplied, then the macro will be defined\n        without an explicit value and the exact outcome depends on the\n        compiler used (XXX true? does ANSI say anything about this?)\n        ", lineno=251, col_offset=-1), lineno=251, col_offset=-1), Assign([Name('i', Store(), lineno=254, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=254, col_offset=12), '_find_macro', Load(), lineno=254, col_offset=12), [Name('name', Load(), lineno=254, col_offset=30)], [], None, None, lineno=254, col_offset=12), lineno=254, col_offset=8), If(Compare(Name('i', Load(), lineno=255, col_offset=11), [IsNot()], [Name('None', Load(), lineno=255, col_offset=20)], lineno=255, col_offset=11), [Delete([Subscript(Attribute(Name('self', Load(), lineno=256, col_offset=16), 'macros', Load(), lineno=256, col_offset=16), Index(Name('i', Load(), lineno=256, col_offset=28)), Del(), lineno=256, col_offset=16)], lineno=256, col_offset=12)], [], lineno=255, col_offset=8), Assign([Name('defn', Store(), lineno=258, col_offset=8)], Tuple([Name('name', Load(), lineno=258, col_offset=16), Name('value', Load(), lineno=258, col_offset=22)], Load(), lineno=258, col_offset=16), lineno=258, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=259, col_offset=8), 'macros', Load(), lineno=259, col_offset=8), 'append', Load(), lineno=259, col_offset=8), [Name('defn', Load(), lineno=259, col_offset=28)], [], None, None, lineno=259, col_offset=8), lineno=259, col_offset=8)], [], lineno=245, col_offset=4), FunctionDef('undefine_macro', arguments([Name('self', Param(), lineno=261, col_offset=23), Name('name', Param(), lineno=261, col_offset=29)], None, None, []), [Expr(Str("Undefine a preprocessor macro for all compilations driven by\n        this compiler object.  If the same macro is defined by\n        'define_macro()' and undefined by 'undefine_macro()' the last call\n        takes precedence (including multiple redefinitions or\n        undefinitions).  If the macro is redefined/undefined on a\n        per-compilation basis (ie. in the call to 'compile()'), then that\n        takes precedence.\n        ", lineno=269, col_offset=-1), lineno=269, col_offset=-1), Assign([Name('i', Store(), lineno=272, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=272, col_offset=12), '_find_macro', Load(), lineno=272, col_offset=12), [Name('name', Load(), lineno=272, col_offset=30)], [], None, None, lineno=272, col_offset=12), lineno=272, col_offset=8), If(Compare(Name('i', Load(), lineno=273, col_offset=11), [IsNot()], [Name('None', Load(), lineno=273, col_offset=20)], lineno=273, col_offset=11), [Delete([Subscript(Attribute(Name('self', Load(), lineno=274, col_offset=16), 'macros', Load(), lineno=274, col_offset=16), Index(Name('i', Load(), lineno=274, col_offset=28)), Del(), lineno=274, col_offset=16)], lineno=274, col_offset=12)], [], lineno=273, col_offset=8), Assign([Name('undefn', Store(), lineno=276, col_offset=8)], Tuple([Name('name', Load(), lineno=276, col_offset=18)], Load(), lineno=276, col_offset=18), lineno=276, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=277, col_offset=8), 'macros', Load(), lineno=277, col_offset=8), 'append', Load(), lineno=277, col_offset=8), [Name('undefn', Load(), lineno=277, col_offset=28)], [], None, None, lineno=277, col_offset=8), lineno=277, col_offset=8)], [], lineno=261, col_offset=4), FunctionDef('add_include_dir', arguments([Name('self', Param(), lineno=279, col_offset=24), Name('dir', Param(), lineno=279, col_offset=30)], None, None, []), [Expr(Str("Add 'dir' to the list of directories that will be searched for\n        header files.  The compiler is instructed to search directories in\n        the order in which they are supplied by successive calls to\n        'add_include_dir()'.\n        ", lineno=284, col_offset=-1), lineno=284, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=285, col_offset=8), 'include_dirs', Load(), lineno=285, col_offset=8), 'append', Load(), lineno=285, col_offset=8), [Name('dir', Load(), lineno=285, col_offset=34)], [], None, None, lineno=285, col_offset=8), lineno=285, col_offset=8)], [], lineno=279, col_offset=4), FunctionDef('set_include_dirs', arguments([Name('self', Param(), lineno=287, col_offset=25), Name('dirs', Param(), lineno=287, col_offset=31)], None, None, []), [Expr(Str("Set the list of directories that will be searched to 'dirs' (a\n        list of strings).  Overrides any preceding calls to\n        'add_include_dir()'; subsequence calls to 'add_include_dir()' add\n        to the list passed to 'set_include_dirs()'.  This does not affect\n        any list of standard include directories that the compiler may\n        search by default.\n        ", lineno=294, col_offset=-1), lineno=294, col_offset=-1), Assign([Attribute(Name('self', Load(), lineno=295, col_offset=8), 'include_dirs', Store(), lineno=295, col_offset=8)], Subscript(Name('dirs', Load(), lineno=295, col_offset=28), Slice(None, None, None), Load(), lineno=295, col_offset=28), lineno=295, col_offset=8)], [], lineno=287, col_offset=4), FunctionDef('add_library', arguments([Name('self', Param(), lineno=297, col_offset=20), Name('libname', Param(), lineno=297, col_offset=26)], None, None, []), [Expr(Str("Add 'libname' to the list of libraries that will be included in\n        all links driven by this compiler object.  Note that 'libname'\n        should *not* be the name of a file containing a library, but the\n        name of the library itself: the actual filename will be inferred by\n        the linker, the compiler, or the compiler class (depending on the\n        platform).\n\n        The linker will be instructed to link against libraries in the\n        order they were supplied to 'add_library()' and/or\n        'set_libraries()'.  It is perfectly valid to duplicate library\n        names; the linker will be instructed to link against libraries as\n        many times as they are mentioned.\n        ", lineno=310, col_offset=-1), lineno=310, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=311, col_offset=8), 'libraries', Load(), lineno=311, col_offset=8), 'append', Load(), lineno=311, col_offset=8), [Name('libname', Load(), lineno=311, col_offset=31)], [], None, None, lineno=311, col_offset=8), lineno=311, col_offset=8)], [], lineno=297, col_offset=4), FunctionDef('set_libraries', arguments([Name('self', Param(), lineno=313, col_offset=22), Name('libnames', Param(), lineno=313, col_offset=28)], None, None, []), [Expr(Str("Set the list of libraries to be included in all links driven by\n        this compiler object to 'libnames' (a list of strings).  This does\n        not affect any standard system libraries that the linker may\n        include by default.\n        ", lineno=318, col_offset=-1), lineno=318, col_offset=-1), Assign([Attribute(Name('self', Load(), lineno=319, col_offset=8), 'libraries', Store(), lineno=319, col_offset=8)], Subscript(Name('libnames', Load(), lineno=319, col_offset=25), Slice(None, None, None), Load(), lineno=319, col_offset=25), lineno=319, col_offset=8)], [], lineno=313, col_offset=4), FunctionDef('add_library_dir', arguments([Name('self', Param(), lineno=322, col_offset=24), Name('dir', Param(), lineno=322, col_offset=30)], None, None, []), [Expr(Str("Add 'dir' to the list of directories that will be searched for\n        libraries specified to 'add_library()' and 'set_libraries()'.  The\n        linker will be instructed to search for libraries in the order they\n        are supplied to 'add_library_dir()' and/or 'set_library_dirs()'.\n        ", lineno=327, col_offset=-1), lineno=327, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=328, col_offset=8), 'library_dirs', Load(), lineno=328, col_offset=8), 'append', Load(), lineno=328, col_offset=8), [Name('dir', Load(), lineno=328, col_offset=33)], [], None, None, lineno=328, col_offset=8), lineno=328, col_offset=8)], [], lineno=322, col_offset=4), FunctionDef('set_library_dirs', arguments([Name('self', Param(), lineno=330, col_offset=25), Name('dirs', Param(), lineno=330, col_offset=31)], None, None, []), [Expr(Str("Set the list of library search directories to 'dirs' (a list of\n        strings).  This does not affect any standard library search path\n        that the linker may search by default.\n        ", lineno=334, col_offset=-1), lineno=334, col_offset=-1), Assign([Attribute(Name('self', Load(), lineno=335, col_offset=8), 'library_dirs', Store(), lineno=335, col_offset=8)], Subscript(Name('dirs', Load(), lineno=335, col_offset=28), Slice(None, None, None), Load(), lineno=335, col_offset=28), lineno=335, col_offset=8)], [], lineno=330, col_offset=4), FunctionDef('add_runtime_library_dir', arguments([Name('self', Param(), lineno=337, col_offset=32), Name('dir', Param(), lineno=337, col_offset=38)], None, None, []), [Expr(Str("Add 'dir' to the list of directories that will be searched for\n        shared libraries at runtime.\n        ", lineno=340, col_offset=-1), lineno=340, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=341, col_offset=8), 'runtime_library_dirs', Load(), lineno=341, col_offset=8), 'append', Load(), lineno=341, col_offset=8), [Name('dir', Load(), lineno=341, col_offset=41)], [], None, None, lineno=341, col_offset=8), lineno=341, col_offset=8)], [], lineno=337, col_offset=4), FunctionDef('set_runtime_library_dirs', arguments([Name('self', Param(), lineno=343, col_offset=33), Name('dirs', Param(), lineno=343, col_offset=39)], None, None, []), [Expr(Str("Set the list of directories to search for shared libraries at\n        runtime to 'dirs' (a list of strings).  This does not affect any\n        standard search path that the runtime linker may search by\n        default.\n        ", lineno=348, col_offset=-1), lineno=348, col_offset=-1), Assign([Attribute(Name('self', Load(), lineno=349, col_offset=8), 'runtime_library_dirs', Store(), lineno=349, col_offset=8)], Subscript(Name('dirs', Load(), lineno=349, col_offset=36), Slice(None, None, None), Load(), lineno=349, col_offset=36), lineno=349, col_offset=8)], [], lineno=343, col_offset=4), FunctionDef('add_link_object', arguments([Name('self', Param(), lineno=351, col_offset=24), Name('object', Param(), lineno=351, col_offset=30)], None, None, []), [Expr(Str('Add \'object\' to the list of object files (or analogues, such as\n        explicitly named library files or the output of "resource\n        compilers") to be included in every link driven by this compiler\n        object.\n        ', lineno=356, col_offset=-1), lineno=356, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=357, col_offset=8), 'objects', Load(), lineno=357, col_offset=8), 'append', Load(), lineno=357, col_offset=8), [Name('object', Load(), lineno=357, col_offset=28)], [], None, None, lineno=357, col_offset=8), lineno=357, col_offset=8)], [], lineno=351, col_offset=4), FunctionDef('set_link_objects', arguments([Name('self', Param(), lineno=359, col_offset=25), Name('objects', Param(), lineno=359, col_offset=31)], None, None, []), [Expr(Str("Set the list of object files (or analogues) to be included in\n        every link to 'objects'.  This does not affect any standard object\n        files that the linker may include by default (such as system\n        libraries).\n        ", lineno=364, col_offset=-1), lineno=364, col_offset=-1), Assign([Attribute(Name('self', Load(), lineno=365, col_offset=8), 'objects', Store(), lineno=365, col_offset=8)], Subscript(Name('objects', Load(), lineno=365, col_offset=23), Slice(None, None, None), Load(), lineno=365, col_offset=23), lineno=365, col_offset=8)], [], lineno=359, col_offset=4), FunctionDef('_setup_compile', arguments([Name('self', Param(), lineno=373, col_offset=23), Name('outdir', Param(), lineno=373, col_offset=29), Name('macros', Param(), lineno=373, col_offset=37), Name('incdirs', Param(), lineno=373, col_offset=45), Name('sources', Param(), lineno=373, col_offset=54), Name('depends', Param(), lineno=373, col_offset=63), Name('extra', Param(), lineno=374, col_offset=23)], None, None, []), [Expr(Str('Process arguments and decide which source files to compile.', lineno=375, col_offset=8), lineno=375, col_offset=8), If(Compare(Name('outdir', Load(), lineno=376, col_offset=11), [Is()], [Name('None', Load(), lineno=376, col_offset=21)], lineno=376, col_offset=11), [Assign([Name('outdir', Store(), lineno=377, col_offset=12)], Attribute(Name('self', Load(), lineno=377, col_offset=21), 'output_dir', Load(), lineno=377, col_offset=21), lineno=377, col_offset=12)], [If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=378, col_offset=17), [Name('outdir', Load(), lineno=378, col_offset=28), Name('str', Load(), lineno=378, col_offset=36)], [], None, None, lineno=378, col_offset=17), lineno=378, col_offset=13), [Raise(Name('TypeError', Load(), lineno=379, col_offset=18), Str("'output_dir' must be a string or None", lineno=379, col_offset=29), None, lineno=379, col_offset=12)], [], lineno=378, col_offset=13)], lineno=376, col_offset=8), If(Compare(Name('macros', Load(), lineno=381, col_offset=11), [Is()], [Name('None', Load(), lineno=381, col_offset=21)], lineno=381, col_offset=11), [Assign([Name('macros', Store(), lineno=382, col_offset=12)], Attribute(Name('self', Load(), lineno=382, col_offset=21), 'macros', Load(), lineno=382, col_offset=21), lineno=382, col_offset=12)], [If(Call(Name('isinstance', Load(), lineno=383, col_offset=13), [Name('macros', Load(), lineno=383, col_offset=24), Name('list', Load(), lineno=383, col_offset=32)], [], None, None, lineno=383, col_offset=13), [Assign([Name('macros', Store(), lineno=384, col_offset=12)], BinOp(Name('macros', Load(), lineno=384, col_offset=21), Add(), BoolOp(Or(), [Attribute(Name('self', Load(), lineno=384, col_offset=31), 'macros', Load(), lineno=384, col_offset=31), List([], Load(), lineno=384, col_offset=46)], lineno=384, col_offset=31), lineno=384, col_offset=21), lineno=384, col_offset=12)], [Raise(Name('TypeError', Load(), lineno=386, col_offset=18), Str("'macros' (if supplied) must be a list of tuples", lineno=386, col_offset=29), None, lineno=386, col_offset=12)], lineno=383, col_offset=13)], lineno=381, col_offset=8), If(Compare(Name('incdirs', Load(), lineno=388, col_offset=11), [Is()], [Name('None', Load(), lineno=388, col_offset=22)], lineno=388, col_offset=11), [Assign([Name('incdirs', Store(), lineno=389, col_offset=12)], Attribute(Name('self', Load(), lineno=389, col_offset=22), 'include_dirs', Load(), lineno=389, col_offset=22), lineno=389, col_offset=12)], [If(Call(Name('isinstance', Load(), lineno=390, col_offset=13), [Name('incdirs', Load(), lineno=390, col_offset=24), Tuple([Name('list', Load(), lineno=390, col_offset=34), Name('tuple', Load(), lineno=390, col_offset=40)], Load(), lineno=390, col_offset=34)], [], None, None, lineno=390, col_offset=13), [Assign([Name('incdirs', Store(), lineno=391, col_offset=12)], BinOp(Call(Name('list', Load(), lineno=391, col_offset=22), [Name('incdirs', Load(), lineno=391, col_offset=27)], [], None, None, lineno=391, col_offset=22), Add(), BoolOp(Or(), [Attribute(Name('self', Load(), lineno=391, col_offset=39), 'include_dirs', Load(), lineno=391, col_offset=39), List([], Load(), lineno=391, col_offset=60)], lineno=391, col_offset=39), lineno=391, col_offset=22), lineno=391, col_offset=12)], [Raise(Name('TypeError', Load(), lineno=393, col_offset=18), Str("'include_dirs' (if supplied) must be a list of strings", lineno=394, col_offset=18), None, lineno=393, col_offset=12)], lineno=390, col_offset=13)], lineno=388, col_offset=8), If(Compare(Name('extra', Load(), lineno=396, col_offset=11), [Is()], [Name('None', Load(), lineno=396, col_offset=20)], lineno=396, col_offset=11), [Assign([Name('extra', Store(), lineno=397, col_offset=12)], List([], Load(), lineno=397, col_offset=20), lineno=397, col_offset=12)], [], lineno=396, col_offset=8), Assign([Name('objects', Store(), lineno=400, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=400, col_offset=18), 'object_filenames', Load(), lineno=400, col_offset=18), [Name('sources', Load(), lineno=400, col_offset=40)], [keyword('strip_dir', Num(0, lineno=401, col_offset=50)), keyword('output_dir', Name('outdir', Load(), lineno=402, col_offset=51))], None, None, lineno=400, col_offset=18), lineno=400, col_offset=8), Assert(Compare(Call(Name('len', Load(), lineno=403, col_offset=15), [Name('objects', Load(), lineno=403, col_offset=19)], [], None, None, lineno=403, col_offset=15), [Eq()], [Call(Name('len', Load(), lineno=403, col_offset=31), [Name('sources', Load(), lineno=403, col_offset=35)], [], None, None, lineno=403, col_offset=31)], lineno=403, col_offset=15), None, lineno=403, col_offset=8), Assign([Name('pp_opts', Store(), lineno=405, col_offset=8)], Call(Name('gen_preprocess_options', Load(), lineno=405, col_offset=18), [Name('macros', Load(), lineno=405, col_offset=41), Name('incdirs', Load(), lineno=405, col_offset=49)], [], None, None, lineno=405, col_offset=18), lineno=405, col_offset=8), Assign([Name('build', Store(), lineno=407, col_offset=8)], Dict([], [], lineno=407, col_offset=16), lineno=407, col_offset=8), For(Name('i', Store(), lineno=408, col_offset=12), Call(Name('range', Load(), lineno=408, col_offset=17), [Call(Name('len', Load(), lineno=408, col_offset=23), [Name('sources', Load(), lineno=408, col_offset=27)], [], None, None, lineno=408, col_offset=23)], [], None, None, lineno=408, col_offset=17), [Assign([Name('src', Store(), lineno=409, col_offset=12)], Subscript(Name('sources', Load(), lineno=409, col_offset=18), Index(Name('i', Load(), lineno=409, col_offset=26)), Load(), lineno=409, col_offset=18), lineno=409, col_offset=12), Assign([Name('obj', Store(), lineno=410, col_offset=12)], Subscript(Name('objects', Load(), lineno=410, col_offset=18), Index(Name('i', Load(), lineno=410, col_offset=26)), Load(), lineno=410, col_offset=18), lineno=410, col_offset=12), Assign([Name('ext', Store(), lineno=411, col_offset=12)], Subscript(Call(Attribute(Attribute(Name('os', Load(), lineno=411, col_offset=18), 'path', Load(), lineno=411, col_offset=18), 'splitext', Load(), lineno=411, col_offset=18), [Name('src', Load(), lineno=411, col_offset=35)], [], None, None, lineno=411, col_offset=18), Index(Num(1, lineno=411, col_offset=40)), Load(), lineno=411, col_offset=18), lineno=411, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=412, col_offset=12), 'mkpath', Load(), lineno=412, col_offset=12), [Call(Attribute(Attribute(Name('os', Load(), lineno=412, col_offset=24), 'path', Load(), lineno=412, col_offset=24), 'dirname', Load(), lineno=412, col_offset=24), [Name('obj', Load(), lineno=412, col_offset=40)], [], None, None, lineno=412, col_offset=24)], [], None, None, lineno=412, col_offset=12), lineno=412, col_offset=12), Assign([Subscript(Name('build', Load(), lineno=413, col_offset=12), Index(Name('obj', Load(), lineno=413, col_offset=18)), Store(), lineno=413, col_offset=12)], Tuple([Name('src', Load(), lineno=413, col_offset=26), Name('ext', Load(), lineno=413, col_offset=31)], Load(), lineno=413, col_offset=26), lineno=413, col_offset=12)], [], lineno=408, col_offset=8), Return(Tuple([Name('macros', Load(), lineno=415, col_offset=15), Name('objects', Load(), lineno=415, col_offset=23), Name('extra', Load(), lineno=415, col_offset=32), Name('pp_opts', Load(), lineno=415, col_offset=39), Name('build', Load(), lineno=415, col_offset=48)], Load(), lineno=415, col_offset=15), lineno=415, col_offset=8)], [], lineno=373, col_offset=4), FunctionDef('_get_cc_args', arguments([Name('self', Param(), lineno=417, col_offset=21), Name('pp_opts', Param(), lineno=417, col_offset=27), Name('debug', Param(), lineno=417, col_offset=36), Name('before', Param(), lineno=417, col_offset=43)], None, None, []), [Assign([Name('cc_args', Store(), lineno=419, col_offset=8)], BinOp(Name('pp_opts', Load(), lineno=419, col_offset=18), Add(), List([Str('-c', lineno=419, col_offset=29)], Load(), lineno=419, col_offset=28), lineno=419, col_offset=18), lineno=419, col_offset=8), If(Name('debug', Load(), lineno=420, col_offset=11), [Assign([Subscript(Name('cc_args', Load(), lineno=421, col_offset=12), Slice(None, Num(0, lineno=421, col_offset=21), None), Store(), lineno=421, col_offset=12)], List([Str('-g', lineno=421, col_offset=27)], Load(), lineno=421, col_offset=26), lineno=421, col_offset=12)], [], lineno=420, col_offset=8), If(Name('before', Load(), lineno=422, col_offset=11), [Assign([Subscript(Name('cc_args', Load(), lineno=423, col_offset=12), Slice(None, Num(0, lineno=423, col_offset=21), None), Store(), lineno=423, col_offset=12)], Name('before', Load(), lineno=423, col_offset=26), lineno=423, col_offset=12)], [], lineno=422, col_offset=8), Return(Name('cc_args', Load(), lineno=424, col_offset=15), lineno=424, col_offset=8)], [], lineno=417, col_offset=4), FunctionDef('_fix_compile_args', arguments([Name('self', Param(), lineno=426, col_offset=26), Name('output_dir', Param(), lineno=426, col_offset=32), Name('macros', Param(), lineno=426, col_offset=44), Name('include_dirs', Param(), lineno=426, col_offset=52)], None, None, []), [Expr(Str("Typecheck and fix-up some of the arguments to the 'compile()'\n        method, and return fixed-up values.  Specifically: if 'output_dir'\n        is None, replaces it with 'self.output_dir'; ensures that 'macros'\n        is a list, and augments it with 'self.macros'; ensures that\n        'include_dirs' is a list, and augments it with 'self.include_dirs'.\n        Guarantees that the returned values are of the correct type,\n        i.e. for 'output_dir' either string or None, and for 'macros' and\n        'include_dirs' either list or None.\n        ", lineno=435, col_offset=-1), lineno=435, col_offset=-1), If(Compare(Name('output_dir', Load(), lineno=436, col_offset=11), [Is()], [Name('None', Load(), lineno=436, col_offset=25)], lineno=436, col_offset=11), [Assign([Name('output_dir', Store(), lineno=437, col_offset=12)], Attribute(Name('self', Load(), lineno=437, col_offset=25), 'output_dir', Load(), lineno=437, col_offset=25), lineno=437, col_offset=12)], [If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=438, col_offset=17), [Name('output_dir', Load(), lineno=438, col_offset=28), Name('str', Load(), lineno=438, col_offset=40)], [], None, None, lineno=438, col_offset=17), lineno=438, col_offset=13), [Raise(Name('TypeError', Load(), lineno=439, col_offset=18), Str("'output_dir' must be a string or None", lineno=439, col_offset=29), None, lineno=439, col_offset=12)], [], lineno=438, col_offset=13)], lineno=436, col_offset=8), If(Compare(Name('macros', Load(), lineno=441, col_offset=11), [Is()], [Name('None', Load(), lineno=441, col_offset=21)], lineno=441, col_offset=11), [Assign([Name('macros', Store(), lineno=442, col_offset=12)], Attribute(Name('self', Load(), lineno=442, col_offset=21), 'macros', Load(), lineno=442, col_offset=21), lineno=442, col_offset=12)], [If(Call(Name('isinstance', Load(), lineno=443, col_offset=13), [Name('macros', Load(), lineno=443, col_offset=24), Name('list', Load(), lineno=443, col_offset=32)], [], None, None, lineno=443, col_offset=13), [Assign([Name('macros', Store(), lineno=444, col_offset=12)], BinOp(Name('macros', Load(), lineno=444, col_offset=21), Add(), BoolOp(Or(), [Attribute(Name('self', Load(), lineno=444, col_offset=31), 'macros', Load(), lineno=444, col_offset=31), List([], Load(), lineno=444, col_offset=46)], lineno=444, col_offset=31), lineno=444, col_offset=21), lineno=444, col_offset=12)], [Raise(Name('TypeError', Load(), lineno=446, col_offset=18), Str("'macros' (if supplied) must be a list of tuples", lineno=446, col_offset=29), None, lineno=446, col_offset=12)], lineno=443, col_offset=13)], lineno=441, col_offset=8), If(Compare(Name('include_dirs', Load(), lineno=448, col_offset=11), [Is()], [Name('None', Load(), lineno=448, col_offset=27)], lineno=448, col_offset=11), [Assign([Name('include_dirs', Store(), lineno=449, col_offset=12)], Attribute(Name('self', Load(), lineno=449, col_offset=27), 'include_dirs', Load(), lineno=449, col_offset=27), lineno=449, col_offset=12)], [If(Call(Name('isinstance', Load(), lineno=450, col_offset=13), [Name('include_dirs', Load(), lineno=450, col_offset=24), Tuple([Name('list', Load(), lineno=450, col_offset=39), Name('tuple', Load(), lineno=450, col_offset=45)], Load(), lineno=450, col_offset=39)], [], None, None, lineno=450, col_offset=13), [Assign([Name('include_dirs', Store(), lineno=451, col_offset=12)], BinOp(Call(Name('list', Load(), lineno=451, col_offset=27), [Name('include_dirs', Load(), lineno=451, col_offset=33)], [], None, None, lineno=451, col_offset=27), Add(), BoolOp(Or(), [Attribute(Name('self', Load(), lineno=451, col_offset=50), 'include_dirs', Load(), lineno=451, col_offset=50), List([], Load(), lineno=451, col_offset=71)], lineno=451, col_offset=50), lineno=451, col_offset=27), lineno=451, col_offset=12)], [Raise(Name('TypeError', Load(), lineno=453, col_offset=18), Str("'include_dirs' (if supplied) must be a list of strings", lineno=454, col_offset=18), None, lineno=453, col_offset=12)], lineno=450, col_offset=13)], lineno=448, col_offset=8), Return(Tuple([Name('output_dir', Load(), lineno=456, col_offset=15), Name('macros', Load(), lineno=456, col_offset=27), Name('include_dirs', Load(), lineno=456, col_offset=35)], Load(), lineno=456, col_offset=15), lineno=456, col_offset=8)], [], lineno=426, col_offset=4), FunctionDef('_fix_object_args', arguments([Name('self', Param(), lineno=458, col_offset=25), Name('objects', Param(), lineno=458, col_offset=31), Name('output_dir', Param(), lineno=458, col_offset=40)], None, None, []), [Expr(Str("Typecheck and fix up some arguments supplied to various methods.\n        Specifically: ensure that 'objects' is a list; if output_dir is\n        None, replace with self.output_dir.  Return fixed versions of\n        'objects' and 'output_dir'.\n        ", lineno=463, col_offset=-1), lineno=463, col_offset=-1), If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=464, col_offset=15), [Name('objects', Load(), lineno=464, col_offset=26), Tuple([Name('list', Load(), lineno=464, col_offset=36), Name('tuple', Load(), lineno=464, col_offset=42)], Load(), lineno=464, col_offset=36)], [], None, None, lineno=464, col_offset=15), lineno=464, col_offset=11), [Raise(Name('TypeError', Load(), lineno=465, col_offset=18), Str("'objects' must be a list or tuple of strings", lineno=466, col_offset=18), None, lineno=465, col_offset=12)], [], lineno=464, col_offset=8), Assign([Name('objects', Store(), lineno=467, col_offset=8)], Call(Name('list', Load(), lineno=467, col_offset=18), [Name('objects', Load(), lineno=467, col_offset=24)], [], None, None, lineno=467, col_offset=18), lineno=467, col_offset=8), If(Compare(Name('output_dir', Load(), lineno=469, col_offset=11), [Is()], [Name('None', Load(), lineno=469, col_offset=25)], lineno=469, col_offset=11), [Assign([Name('output_dir', Store(), lineno=470, col_offset=12)], Attribute(Name('self', Load(), lineno=470, col_offset=25), 'output_dir', Load(), lineno=470, col_offset=25), lineno=470, col_offset=12)], [If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=471, col_offset=17), [Name('output_dir', Load(), lineno=471, col_offset=28), Name('str', Load(), lineno=471, col_offset=40)], [], None, None, lineno=471, col_offset=17), lineno=471, col_offset=13), [Raise(Name('TypeError', Load(), lineno=472, col_offset=18), Str("'output_dir' must be a string or None", lineno=472, col_offset=29), None, lineno=472, col_offset=12)], [], lineno=471, col_offset=13)], lineno=469, col_offset=8), Return(Tuple([Name('objects', Load(), lineno=474, col_offset=16), Name('output_dir', Load(), lineno=474, col_offset=25)], Load(), lineno=474, col_offset=16), lineno=474, col_offset=8)], [], lineno=458, col_offset=4), FunctionDef('_fix_lib_args', arguments([Name('self', Param(), lineno=476, col_offset=22), Name('libraries', Param(), lineno=476, col_offset=28), Name('library_dirs', Param(), lineno=476, col_offset=39), Name('runtime_library_dirs', Param(), lineno=476, col_offset=53)], None, None, []), [Expr(Str("Typecheck and fix up some of the arguments supplied to the\n        'link_*' methods.  Specifically: ensure that all arguments are\n        lists, and augment them with their permanent versions\n        (eg. 'self.libraries' augments 'libraries').  Return a tuple with\n        fixed versions of all arguments.\n        ", lineno=482, col_offset=-1), lineno=482, col_offset=-1), If(Compare(Name('libraries', Load(), lineno=483, col_offset=11), [Is()], [Name('None', Load(), lineno=483, col_offset=24)], lineno=483, col_offset=11), [Assign([Name('libraries', Store(), lineno=484, col_offset=12)], Attribute(Name('self', Load(), lineno=484, col_offset=24), 'libraries', Load(), lineno=484, col_offset=24), lineno=484, col_offset=12)], [If(Call(Name('isinstance', Load(), lineno=485, col_offset=13), [Name('libraries', Load(), lineno=485, col_offset=24), Tuple([Name('list', Load(), lineno=485, col_offset=36), Name('tuple', Load(), lineno=485, col_offset=42)], Load(), lineno=485, col_offset=36)], [], None, None, lineno=485, col_offset=13), [Assign([Name('libraries', Store(), lineno=486, col_offset=12)], BinOp(Call(Name('list', Load(), lineno=486, col_offset=24), [Name('libraries', Load(), lineno=486, col_offset=30)], [], None, None, lineno=486, col_offset=24), Add(), BoolOp(Or(), [Attribute(Name('self', Load(), lineno=486, col_offset=44), 'libraries', Load(), lineno=486, col_offset=44), List([], Load(), lineno=486, col_offset=62)], lineno=486, col_offset=44), lineno=486, col_offset=24), lineno=486, col_offset=12)], [Raise(Name('TypeError', Load(), lineno=488, col_offset=18), Str("'libraries' (if supplied) must be a list of strings", lineno=489, col_offset=18), None, lineno=488, col_offset=12)], lineno=485, col_offset=13)], lineno=483, col_offset=8), If(Compare(Name('library_dirs', Load(), lineno=491, col_offset=11), [Is()], [Name('None', Load(), lineno=491, col_offset=27)], lineno=491, col_offset=11), [Assign([Name('library_dirs', Store(), lineno=492, col_offset=12)], Attribute(Name('self', Load(), lineno=492, col_offset=27), 'library_dirs', Load(), lineno=492, col_offset=27), lineno=492, col_offset=12)], [If(Call(Name('isinstance', Load(), lineno=493, col_offset=13), [Name('library_dirs', Load(), lineno=493, col_offset=24), Tuple([Name('list', Load(), lineno=493, col_offset=39), Name('tuple', Load(), lineno=493, col_offset=45)], Load(), lineno=493, col_offset=39)], [], None, None, lineno=493, col_offset=13), [Assign([Name('library_dirs', Store(), lineno=494, col_offset=12)], BinOp(Call(Name('list', Load(), lineno=494, col_offset=27), [Name('library_dirs', Load(), lineno=494, col_offset=33)], [], None, None, lineno=494, col_offset=27), Add(), BoolOp(Or(), [Attribute(Name('self', Load(), lineno=494, col_offset=50), 'library_dirs', Load(), lineno=494, col_offset=50), List([], Load(), lineno=494, col_offset=71)], lineno=494, col_offset=50), lineno=494, col_offset=27), lineno=494, col_offset=12)], [Raise(Name('TypeError', Load(), lineno=496, col_offset=18), Str("'library_dirs' (if supplied) must be a list of strings", lineno=497, col_offset=18), None, lineno=496, col_offset=12)], lineno=493, col_offset=13)], lineno=491, col_offset=8), If(Compare(Name('runtime_library_dirs', Load(), lineno=499, col_offset=11), [Is()], [Name('None', Load(), lineno=499, col_offset=35)], lineno=499, col_offset=11), [Assign([Name('runtime_library_dirs', Store(), lineno=500, col_offset=12)], Attribute(Name('self', Load(), lineno=500, col_offset=35), 'runtime_library_dirs', Load(), lineno=500, col_offset=35), lineno=500, col_offset=12)], [If(Call(Name('isinstance', Load(), lineno=501, col_offset=13), [Name('runtime_library_dirs', Load(), lineno=501, col_offset=24), Tuple([Name('list', Load(), lineno=501, col_offset=47), Name('tuple', Load(), lineno=501, col_offset=53)], Load(), lineno=501, col_offset=47)], [], None, None, lineno=501, col_offset=13), [Assign([Name('runtime_library_dirs', Store(), lineno=502, col_offset=12)], BinOp(Call(Name('list', Load(), lineno=502, col_offset=36), [Name('runtime_library_dirs', Load(), lineno=502, col_offset=42)], [], None, None, lineno=502, col_offset=36), Add(), BoolOp(Or(), [Attribute(Name('self', Load(), lineno=503, col_offset=37), 'runtime_library_dirs', Load(), lineno=503, col_offset=37), List([], Load(), lineno=503, col_offset=66)], lineno=503, col_offset=37), lineno=502, col_offset=36), lineno=502, col_offset=12)], [Raise(Name('TypeError', Load(), lineno=505, col_offset=18), BinOp(Str("'runtime_library_dirs' (if supplied) ", lineno=506, col_offset=18), Add(), Str('must be a list of strings', lineno=507, col_offset=18), lineno=506, col_offset=18), None, lineno=505, col_offset=12)], lineno=501, col_offset=13)], lineno=499, col_offset=8), Return(Tuple([Name('libraries', Load(), lineno=509, col_offset=16), Name('library_dirs', Load(), lineno=509, col_offset=27), Name('runtime_library_dirs', Load(), lineno=509, col_offset=41)], Load(), lineno=509, col_offset=16), lineno=509, col_offset=8)], [], lineno=476, col_offset=4), FunctionDef('_need_link', arguments([Name('self', Param(), lineno=511, col_offset=19), Name('objects', Param(), lineno=511, col_offset=25), Name('output_file', Param(), lineno=511, col_offset=34)], None, None, []), [Expr(Str("Return true if we need to relink the files listed in 'objects'\n        to recreate 'output_file'.\n        ", lineno=514, col_offset=-1), lineno=514, col_offset=-1), If(Attribute(Name('self', Load(), lineno=515, col_offset=11), 'force', Load(), lineno=515, col_offset=11), [Return(Num(1, lineno=516, col_offset=19), lineno=516, col_offset=12)], [If(Attribute(Name('self', Load(), lineno=518, col_offset=15), 'dry_run', Load(), lineno=518, col_offset=15), [Assign([Name('newer', Store(), lineno=519, col_offset=16)], Call(Name('newer_group', Load(), lineno=519, col_offset=24), [Name('objects', Load(), lineno=519, col_offset=37), Name('output_file', Load(), lineno=519, col_offset=46)], [keyword('missing', Str('newer', lineno=519, col_offset=67))], None, None, lineno=519, col_offset=24), lineno=519, col_offset=16)], [Assign([Name('newer', Store(), lineno=521, col_offset=16)], Call(Name('newer_group', Load(), lineno=521, col_offset=24), [Name('objects', Load(), lineno=521, col_offset=37), Name('output_file', Load(), lineno=521, col_offset=46)], [], None, None, lineno=521, col_offset=24), lineno=521, col_offset=16)], lineno=518, col_offset=12), Return(Name('newer', Load(), lineno=522, col_offset=19), lineno=522, col_offset=12)], lineno=515, col_offset=8)], [], lineno=511, col_offset=4), FunctionDef('detect_language', arguments([Name('self', Param(), lineno=524, col_offset=24), Name('sources', Param(), lineno=524, col_offset=30)], None, None, []), [Expr(Str('Detect the language of a given file, or list of files. Uses\n        language_map, and language_order to do the job.\n        ', lineno=527, col_offset=-1), lineno=527, col_offset=-1), If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=528, col_offset=15), [Name('sources', Load(), lineno=528, col_offset=26), Name('list', Load(), lineno=528, col_offset=35)], [], None, None, lineno=528, col_offset=15), lineno=528, col_offset=11), [Assign([Name('sources', Store(), lineno=529, col_offset=12)], List([Name('sources', Load(), lineno=529, col_offset=23)], Load(), lineno=529, col_offset=22), lineno=529, col_offset=12)], [], lineno=528, col_offset=8), Assign([Name('lang', Store(), lineno=530, col_offset=8)], Name('None', Load(), lineno=530, col_offset=15), lineno=530, col_offset=8), Assign([Name('index', Store(), lineno=531, col_offset=8)], Call(Name('len', Load(), lineno=531, col_offset=16), [Attribute(Name('self', Load(), lineno=531, col_offset=20), 'language_order', Load(), lineno=531, col_offset=20)], [], None, None, lineno=531, col_offset=16), lineno=531, col_offset=8), For(Name('source', Store(), lineno=532, col_offset=12), Name('sources', Load(), lineno=532, col_offset=22), [Assign([Tuple([Name('base', Store(), lineno=533, col_offset=12), Name('ext', Store(), lineno=533, col_offset=18)], Store(), lineno=533, col_offset=12)], Call(Attribute(Attribute(Name('os', Load(), lineno=533, col_offset=24), 'path', Load(), lineno=533, col_offset=24), 'splitext', Load(), lineno=533, col_offset=24), [Name('source', Load(), lineno=533, col_offset=41)], [], None, None, lineno=533, col_offset=24), lineno=533, col_offset=12), Assign([Name('extlang', Store(), lineno=534, col_offset=12)], Call(Attribute(Attribute(Name('self', Load(), lineno=534, col_offset=22), 'language_map', Load(), lineno=534, col_offset=22), 'get', Load(), lineno=534, col_offset=22), [Name('ext', Load(), lineno=534, col_offset=44)], [], None, None, lineno=534, col_offset=22), lineno=534, col_offset=12), TryExcept([Assign([Name('extindex', Store(), lineno=536, col_offset=16)], Call(Attribute(Attribute(Name('self', Load(), lineno=536, col_offset=27), 'language_order', Load(), lineno=536, col_offset=27), 'index', Load(), lineno=536, col_offset=27), [Name('extlang', Load(), lineno=536, col_offset=53)], [], None, None, lineno=536, col_offset=27), lineno=536, col_offset=16), If(Compare(Name('extindex', Load(), lineno=537, col_offset=19), [Lt()], [Name('index', Load(), lineno=537, col_offset=30)], lineno=537, col_offset=19), [Assign([Name('lang', Store(), lineno=538, col_offset=20)], Name('extlang', Load(), lineno=538, col_offset=27), lineno=538, col_offset=20), Assign([Name('index', Store(), lineno=539, col_offset=20)], Name('extindex', Load(), lineno=539, col_offset=28), lineno=539, col_offset=20)], [], lineno=537, col_offset=16)], [ExceptHandler(Name('ValueError', Load(), lineno=540, col_offset=19), None, [Pass( lineno=541, col_offset=16)], lineno=540, col_offset=12)], [], lineno=535, col_offset=12)], [], lineno=532, col_offset=8), Return(Name('lang', Load(), lineno=542, col_offset=15), lineno=542, col_offset=8)], [], lineno=524, col_offset=4), FunctionDef('preprocess', arguments([Name('self', Param(), lineno=547, col_offset=19), Name('source', Param(), lineno=547, col_offset=25), Name('output_file', Param(), lineno=547, col_offset=33), Name('macros', Param(), lineno=547, col_offset=51), Name('include_dirs', Param(), lineno=548, col_offset=19), Name('extra_preargs', Param(), lineno=548, col_offset=38), Name('extra_postargs', Param(), lineno=548, col_offset=58)], None, None, [Name('None', Load(), lineno=547, col_offset=45), Name('None', Load(), lineno=547, col_offset=58), Name('None', Load(), lineno=548, col_offset=32), Name('None', Load(), lineno=548, col_offset=52), Name('None', Load(), lineno=548, col_offset=73)]), [Expr(Str("Preprocess a single C/C++ source file, named in 'source'.\n        Output will be written to file named 'output_file', or stdout if\n        'output_file' not supplied.  'macros' is a list of macro\n        definitions as for 'compile()', which will augment the macros set\n        with 'define_macro()' and 'undefine_macro()'.  'include_dirs' is a\n        list of directory names that will be added to the default list.\n\n        Raises PreprocessError on failure.\n        ", lineno=557, col_offset=-1), lineno=557, col_offset=-1), Pass( lineno=558, col_offset=8)], [], lineno=547, col_offset=4), FunctionDef('compile', arguments([Name('self', Param(), lineno=560, col_offset=16), Name('sources', Param(), lineno=560, col_offset=22), Name('output_dir', Param(), lineno=560, col_offset=31), Name('macros', Param(), lineno=560, col_offset=48), Name('include_dirs', Param(), lineno=561, col_offset=16), Name('debug', Param(), lineno=561, col_offset=35), Name('extra_preargs', Param(), lineno=561, col_offset=44), Name('extra_postargs', Param(), lineno=562, col_offset=16), Name('depends', Param(), lineno=562, col_offset=37)], None, None, [Name('None', Load(), lineno=560, col_offset=42), Name('None', Load(), lineno=560, col_offset=55), Name('None', Load(), lineno=561, col_offset=29), Num(0, lineno=561, col_offset=41), Name('None', Load(), lineno=561, col_offset=58), Name('None', Load(), lineno=562, col_offset=31), Name('None', Load(), lineno=562, col_offset=45)]), [Expr(Str('Compile one or more source files.\n\n        \'sources\' must be a list of filenames, most likely C/C++\n        files, but in reality anything that can be handled by a\n        particular compiler and compiler class (eg. MSVCCompiler can\n        handle resource files in \'sources\').  Return a list of object\n        filenames, one per source filename in \'sources\'.  Depending on\n        the implementation, not all source files will necessarily be\n        compiled, but all corresponding object filenames will be\n        returned.\n\n        If \'output_dir\' is given, object files will be put under it, while\n        retaining their original path component.  That is, "foo/bar.c"\n        normally compiles to "foo/bar.o" (for a Unix implementation); if\n        \'output_dir\' is "build", then it would compile to\n        "build/foo/bar.o".\n\n        \'macros\', if given, must be a list of macro definitions.  A macro\n        definition is either a (name, value) 2-tuple or a (name,) 1-tuple.\n        The former defines a macro; if the value is None, the macro is\n        defined without an explicit value.  The 1-tuple case undefines a\n        macro.  Later definitions/redefinitions/ undefinitions take\n        precedence.\n\n        \'include_dirs\', if given, must be a list of strings, the\n        directories to add to the default include file search path for this\n        compilation only.\n\n        \'debug\' is a boolean; if true, the compiler will be instructed to\n        output debug symbols in (or alongside) the object file(s).\n\n        \'extra_preargs\' and \'extra_postargs\' are implementation- dependent.\n        On platforms that have the notion of a command-line (e.g. Unix,\n        DOS/Windows), they are most likely lists of strings: extra\n        command-line arguments to prepand/append to the compiler command\n        line.  On other platforms, consult the implementation class\n        documentation.  In any event, they are intended as an escape hatch\n        for those occasions when the abstract compiler framework doesn\'t\n        cut the mustard.\n\n        \'depends\', if given, is a list of filenames that all targets\n        depend on.  If a source file is older than any file in\n        depends, then the source file will be recompiled.  This\n        supports dependency tracking, but only at a coarse\n        granularity.\n\n        Raises CompileError on failure.\n        ', lineno=610, col_offset=-1), lineno=610, col_offset=-1), Assign([Tuple([Name('macros', Store(), lineno=614, col_offset=8), Name('objects', Store(), lineno=614, col_offset=16), Name('extra_postargs', Store(), lineno=614, col_offset=25), Name('pp_opts', Store(), lineno=614, col_offset=41), Name('build', Store(), lineno=614, col_offset=50)], Store(), lineno=614, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=615, col_offset=16), '_setup_compile', Load(), lineno=615, col_offset=16), [Name('output_dir', Load(), lineno=615, col_offset=36), Name('macros', Load(), lineno=615, col_offset=48), Name('include_dirs', Load(), lineno=615, col_offset=56), Name('sources', Load(), lineno=615, col_offset=70), Name('depends', Load(), lineno=616, col_offset=36), Name('extra_postargs', Load(), lineno=616, col_offset=45)], [], None, None, lineno=615, col_offset=16), lineno=614, col_offset=8), Assign([Name('cc_args', Store(), lineno=617, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=617, col_offset=18), '_get_cc_args', Load(), lineno=617, col_offset=18), [Name('pp_opts', Load(), lineno=617, col_offset=36), Name('debug', Load(), lineno=617, col_offset=45), Name('extra_preargs', Load(), lineno=617, col_offset=52)], [], None, None, lineno=617, col_offset=18), lineno=617, col_offset=8), For(Name('obj', Store(), lineno=619, col_offset=12), Name('objects', Load(), lineno=619, col_offset=19), [TryExcept([Assign([Tuple([Name('src', Store(), lineno=621, col_offset=16), Name('ext', Store(), lineno=621, col_offset=21)], Store(), lineno=621, col_offset=16)], Subscript(Name('build', Load(), lineno=621, col_offset=27), Index(Name('obj', Load(), lineno=621, col_offset=33)), Load(), lineno=621, col_offset=27), lineno=621, col_offset=16)], [ExceptHandler(Name('KeyError', Load(), lineno=622, col_offset=19), None, [Continue( lineno=623, col_offset=16)], lineno=622, col_offset=12)], [], lineno=620, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=624, col_offset=12), '_compile', Load(), lineno=624, col_offset=12), [Name('obj', Load(), lineno=624, col_offset=26), Name('src', Load(), lineno=624, col_offset=31), Name('ext', Load(), lineno=624, col_offset=36), Name('cc_args', Load(), lineno=624, col_offset=41), Name('extra_postargs', Load(), lineno=624, col_offset=50), Name('pp_opts', Load(), lineno=624, col_offset=66)], [], None, None, lineno=624, col_offset=12), lineno=624, col_offset=12)], [], lineno=619, col_offset=8), Return(Name('objects', Load(), lineno=627, col_offset=15), lineno=627, col_offset=8)], [], lineno=560, col_offset=4), FunctionDef('_compile', arguments([Name('self', Param(), lineno=629, col_offset=17), Name('obj', Param(), lineno=629, col_offset=23), Name('src', Param(), lineno=629, col_offset=28), Name('ext', Param(), lineno=629, col_offset=33), Name('cc_args', Param(), lineno=629, col_offset=38), Name('extra_postargs', Param(), lineno=629, col_offset=47), Name('pp_opts', Param(), lineno=629, col_offset=63)], None, None, []), [Expr(Str("Compile 'src' to product 'obj'.", lineno=630, col_offset=8), lineno=630, col_offset=8), Pass( lineno=634, col_offset=8)], [], lineno=629, col_offset=4), FunctionDef('create_static_lib', arguments([Name('self', Param(), lineno=636, col_offset=26), Name('objects', Param(), lineno=636, col_offset=32), Name('output_libname', Param(), lineno=636, col_offset=41), Name('output_dir', Param(), lineno=636, col_offset=57), Name('debug', Param(), lineno=637, col_offset=26), Name('target_lang', Param(), lineno=637, col_offset=35)], None, None, [Name('None', Load(), lineno=636, col_offset=68), Num(0, lineno=637, col_offset=32), Name('None', Load(), lineno=637, col_offset=47)]), [Expr(Str('Link a bunch of stuff together to create a static library file.\n        The "bunch of stuff" consists of the list of object files supplied\n        as \'objects\', the extra object files supplied to\n        \'add_link_object()\' and/or \'set_link_objects()\', the libraries\n        supplied to \'add_library()\' and/or \'set_libraries()\', and the\n        libraries supplied as \'libraries\' (if any).\n\n        \'output_libname\' should be a library name, not a filename; the\n        filename will be inferred from the library name.  \'output_dir\' is\n        the directory where the library file will be put.\n\n        \'debug\' is a boolean; if true, debugging information will be\n        included in the library (note that on most platforms, it is the\n        compile step where this matters: the \'debug\' flag is included here\n        just for consistency).\n\n        \'target_lang\' is the target language for which the given objects\n        are being compiled. This allows specific linkage time treatment of\n        certain languages.\n\n        Raises LibError on failure.\n        ', lineno=659, col_offset=-1), lineno=659, col_offset=-1), Pass( lineno=660, col_offset=8)], [], lineno=636, col_offset=4), Assign([Name('SHARED_OBJECT', Store(), lineno=663, col_offset=4)], Str('shared_object', lineno=663, col_offset=20), lineno=663, col_offset=4), Assign([Name('SHARED_LIBRARY', Store(), lineno=664, col_offset=4)], Str('shared_library', lineno=664, col_offset=21), lineno=664, col_offset=4), Assign([Name('EXECUTABLE', Store(), lineno=665, col_offset=4)], Str('executable', lineno=665, col_offset=17), lineno=665, col_offset=4), FunctionDef('link', arguments([Name('self', Param(), lineno=667, col_offset=13), Name('target_desc', Param(), lineno=667, col_offset=19), Name('objects', Param(), lineno=667, col_offset=32), Name('output_filename', Param(), lineno=667, col_offset=41), Name('output_dir', Param(), lineno=667, col_offset=58), Name('libraries', Param(), lineno=668, col_offset=13), Name('library_dirs', Param(), lineno=668, col_offset=29), Name('runtime_library_dirs', Param(), lineno=668, col_offset=48), Name('export_symbols', Param(), lineno=669, col_offset=13), Name('debug', Param(), lineno=669, col_offset=34), Name('extra_preargs', Param(), lineno=669, col_offset=43), Name('extra_postargs', Param(), lineno=670, col_offset=13), Name('build_temp', Param(), lineno=670, col_offset=34), Name('target_lang', Param(), lineno=670, col_offset=51)], None, None, [Name('None', Load(), lineno=667, col_offset=69), Name('None', Load(), lineno=668, col_offset=23), Name('None', Load(), lineno=668, col_offset=42), Name('None', Load(), lineno=668, col_offset=69), Name('None', Load(), lineno=669, col_offset=28), Num(0, lineno=669, col_offset=40), Name('None', Load(), lineno=669, col_offset=57), Name('None', Load(), lineno=670, col_offset=28), Name('None', Load(), lineno=670, col_offset=45), Name('None', Load(), lineno=670, col_offset=63)]), [Expr(Str('Link a bunch of stuff together to create an executable or\n        shared library file.\n\n        The "bunch of stuff" consists of the list of object files supplied\n        as \'objects\'.  \'output_filename\' should be a filename.  If\n        \'output_dir\' is supplied, \'output_filename\' is relative to it\n        (i.e. \'output_filename\' can provide directory components if\n        needed).\n\n        \'libraries\' is a list of libraries to link against.  These are\n        library names, not filenames, since they\'re translated into\n        filenames in a platform-specific way (eg. "foo" becomes "libfoo.a"\n        on Unix and "foo.lib" on DOS/Windows).  However, they can include a\n        directory component, which means the linker will look in that\n        specific directory rather than searching all the normal locations.\n\n        \'library_dirs\', if supplied, should be a list of directories to\n        search for libraries that were specified as bare library names\n        (ie. no directory component).  These are on top of the system\n        default and those supplied to \'add_library_dir()\' and/or\n        \'set_library_dirs()\'.  \'runtime_library_dirs\' is a list of\n        directories that will be embedded into the shared library and used\n        to search for other shared libraries that *it* depends on at\n        run-time.  (This may only be relevant on Unix.)\n\n        \'export_symbols\' is a list of symbols that the shared library will\n        export.  (This appears to be relevant only on Windows.)\n\n        \'debug\' is as for \'compile()\' and \'create_static_lib()\', with the\n        slight distinction that it actually matters on most platforms (as\n        opposed to \'create_static_lib()\', which includes a \'debug\' flag\n        mostly for form\'s sake).\n\n        \'extra_preargs\' and \'extra_postargs\' are as for \'compile()\' (except\n        of course that they supply command-line arguments for the\n        particular linker being used).\n\n        \'target_lang\' is the target language for which the given objects\n        are being compiled. This allows specific linkage time treatment of\n        certain languages.\n\n        Raises LinkError on failure.\n        ', lineno=713, col_offset=-1), lineno=713, col_offset=-1), Raise(Name('NotImplementedError', Load(), lineno=714, col_offset=14), None, None, lineno=714, col_offset=8)], [], lineno=667, col_offset=4), FunctionDef('link_shared_lib', arguments([Name('self', Param(), lineno=719, col_offset=24), Name('objects', Param(), lineno=719, col_offset=30), Name('output_libname', Param(), lineno=719, col_offset=39), Name('output_dir', Param(), lineno=719, col_offset=55), Name('libraries', Param(), lineno=720, col_offset=24), Name('library_dirs', Param(), lineno=720, col_offset=40), Name('runtime_library_dirs', Param(), lineno=721, col_offset=24), Name('export_symbols', Param(), lineno=721, col_offset=51), Name('debug', Param(), lineno=722, col_offset=24), Name('extra_preargs', Param(), lineno=722, col_offset=33), Name('extra_postargs', Param(), lineno=722, col_offset=53), Name('build_temp', Param(), lineno=723, col_offset=24), Name('target_lang', Param(), lineno=723, col_offset=41)], None, None, [Name('None', Load(), lineno=719, col_offset=66), Name('None', Load(), lineno=720, col_offset=34), Name('None', Load(), lineno=720, col_offset=53), Name('None', Load(), lineno=721, col_offset=45), Name('None', Load(), lineno=721, col_offset=66), Num(0, lineno=722, col_offset=30), Name('None', Load(), lineno=722, col_offset=47), Name('None', Load(), lineno=722, col_offset=68), Name('None', Load(), lineno=723, col_offset=35), Name('None', Load(), lineno=723, col_offset=53)]), [Expr(Call(Attribute(Name('self', Load(), lineno=724, col_offset=8), 'link', Load(), lineno=724, col_offset=8), [Attribute(Name('CCompiler', Load(), lineno=724, col_offset=18), 'SHARED_LIBRARY', Load(), lineno=724, col_offset=18), Name('objects', Load(), lineno=724, col_offset=44), Call(Attribute(Name('self', Load(), lineno=725, col_offset=18), 'library_filename', Load(), lineno=725, col_offset=18), [Name('output_libname', Load(), lineno=725, col_offset=40)], [keyword('lib_type', Str('shared', lineno=725, col_offset=65))], None, None, lineno=725, col_offset=18), Name('output_dir', Load(), lineno=726, col_offset=18), Name('libraries', Load(), lineno=727, col_offset=18), Name('library_dirs', Load(), lineno=727, col_offset=29), Name('runtime_library_dirs', Load(), lineno=727, col_offset=43), Name('export_symbols', Load(), lineno=728, col_offset=18), Name('debug', Load(), lineno=728, col_offset=34), Name('extra_preargs', Load(), lineno=729, col_offset=18), Name('extra_postargs', Load(), lineno=729, col_offset=33), Name('build_temp', Load(), lineno=729, col_offset=49), Name('target_lang', Load(), lineno=729, col_offset=61)], [], None, None, lineno=724, col_offset=8), lineno=724, col_offset=8)], [], lineno=719, col_offset=4), FunctionDef('link_shared_object', arguments([Name('self', Param(), lineno=732, col_offset=27), Name('objects', Param(), lineno=732, col_offset=33), Name('output_filename', Param(), lineno=732, col_offset=42), Name('output_dir', Param(), lineno=732, col_offset=59), Name('libraries', Param(), lineno=733, col_offset=27), Name('library_dirs', Param(), lineno=733, col_offset=43), Name('runtime_library_dirs', Param(), lineno=734, col_offset=27), Name('export_symbols', Param(), lineno=734, col_offset=54), Name('debug', Param(), lineno=735, col_offset=27), Name('extra_preargs', Param(), lineno=735, col_offset=36), Name('extra_postargs', Param(), lineno=735, col_offset=56), Name('build_temp', Param(), lineno=736, col_offset=27), Name('target_lang', Param(), lineno=736, col_offset=44)], None, None, [Name('None', Load(), lineno=732, col_offset=70), Name('None', Load(), lineno=733, col_offset=37), Name('None', Load(), lineno=733, col_offset=56), Name('None', Load(), lineno=734, col_offset=48), Name('None', Load(), lineno=734, col_offset=69), Num(0, lineno=735, col_offset=33), Name('None', Load(), lineno=735, col_offset=50), Name('None', Load(), lineno=735, col_offset=71), Name('None', Load(), lineno=736, col_offset=38), Name('None', Load(), lineno=736, col_offset=56)]), [Expr(Call(Attribute(Name('self', Load(), lineno=737, col_offset=8), 'link', Load(), lineno=737, col_offset=8), [Attribute(Name('CCompiler', Load(), lineno=737, col_offset=18), 'SHARED_OBJECT', Load(), lineno=737, col_offset=18), Name('objects', Load(), lineno=737, col_offset=43), Name('output_filename', Load(), lineno=738, col_offset=18), Name('output_dir', Load(), lineno=738, col_offset=35), Name('libraries', Load(), lineno=739, col_offset=18), Name('library_dirs', Load(), lineno=739, col_offset=29), Name('runtime_library_dirs', Load(), lineno=739, col_offset=43), Name('export_symbols', Load(), lineno=740, col_offset=18), Name('debug', Load(), lineno=740, col_offset=34), Name('extra_preargs', Load(), lineno=741, col_offset=18), Name('extra_postargs', Load(), lineno=741, col_offset=33), Name('build_temp', Load(), lineno=741, col_offset=49), Name('target_lang', Load(), lineno=741, col_offset=61)], [], None, None, lineno=737, col_offset=8), lineno=737, col_offset=8)], [], lineno=732, col_offset=4), FunctionDef('link_executable', arguments([Name('self', Param(), lineno=743, col_offset=24), Name('objects', Param(), lineno=743, col_offset=30), Name('output_progname', Param(), lineno=743, col_offset=39), Name('output_dir', Param(), lineno=743, col_offset=56), Name('libraries', Param(), lineno=744, col_offset=24), Name('library_dirs', Param(), lineno=744, col_offset=40), Name('runtime_library_dirs', Param(), lineno=745, col_offset=24), Name('debug', Param(), lineno=745, col_offset=51), Name('extra_preargs', Param(), lineno=745, col_offset=60), Name('extra_postargs', Param(), lineno=746, col_offset=24), Name('target_lang', Param(), lineno=746, col_offset=45)], None, None, [Name('None', Load(), lineno=743, col_offset=67), Name('None', Load(), lineno=744, col_offset=34), Name('None', Load(), lineno=744, col_offset=53), Name('None', Load(), lineno=745, col_offset=45), Num(0, lineno=745, col_offset=57), Name('None', Load(), lineno=745, col_offset=74), Name('None', Load(), lineno=746, col_offset=39), Name('None', Load(), lineno=746, col_offset=57)]), [Expr(Call(Attribute(Name('self', Load(), lineno=747, col_offset=8), 'link', Load(), lineno=747, col_offset=8), [Attribute(Name('CCompiler', Load(), lineno=747, col_offset=18), 'EXECUTABLE', Load(), lineno=747, col_offset=18), Name('objects', Load(), lineno=747, col_offset=40), Call(Attribute(Name('self', Load(), lineno=748, col_offset=18), 'executable_filename', Load(), lineno=748, col_offset=18), [Name('output_progname', Load(), lineno=748, col_offset=43)], [], None, None, lineno=748, col_offset=18), Name('output_dir', Load(), lineno=748, col_offset=61), Name('libraries', Load(), lineno=749, col_offset=18), Name('library_dirs', Load(), lineno=749, col_offset=29), Name('runtime_library_dirs', Load(), lineno=749, col_offset=43), Name('None', Load(), lineno=749, col_offset=65), Name('debug', Load(), lineno=750, col_offset=18), Name('extra_preargs', Load(), lineno=750, col_offset=25), Name('extra_postargs', Load(), lineno=750, col_offset=40), Name('None', Load(), lineno=750, col_offset=56), Name('target_lang', Load(), lineno=750, col_offset=62)], [], None, None, lineno=747, col_offset=8), lineno=747, col_offset=8)], [], lineno=743, col_offset=4), FunctionDef('library_dir_option', arguments([Name('self', Param(), lineno=758, col_offset=27), Name('dir', Param(), lineno=758, col_offset=33)], None, None, []), [Expr(Str("Return the compiler option to add 'dir' to the list of\n        directories searched for libraries.\n        ", lineno=761, col_offset=-1), lineno=761, col_offset=-1), Raise(Name('NotImplementedError', Load(), lineno=762, col_offset=14), None, None, lineno=762, col_offset=8)], [], lineno=758, col_offset=4), FunctionDef('runtime_library_dir_option', arguments([Name('self', Param(), lineno=764, col_offset=35), Name('dir', Param(), lineno=764, col_offset=41)], None, None, []), [Expr(Str("Return the compiler option to add 'dir' to the list of\n        directories searched for runtime libraries.\n        ", lineno=767, col_offset=-1), lineno=767, col_offset=-1), Raise(Name('NotImplementedError', Load(), lineno=768, col_offset=14), None, None, lineno=768, col_offset=8)], [], lineno=764, col_offset=4), FunctionDef('library_option', arguments([Name('self', Param(), lineno=770, col_offset=23), Name('lib', Param(), lineno=770, col_offset=29)], None, None, []), [Expr(Str("Return the compiler option to add 'dir' to the list of libraries\n        linked into the shared library or executable.\n        ", lineno=773, col_offset=-1), lineno=773, col_offset=-1), Raise(Name('NotImplementedError', Load(), lineno=774, col_offset=14), None, None, lineno=774, col_offset=8)], [], lineno=770, col_offset=4), FunctionDef('has_function', arguments([Name('self', Param(), lineno=776, col_offset=21), Name('funcname', Param(), lineno=776, col_offset=27), Name('includes', Param(), lineno=776, col_offset=37), Name('include_dirs', Param(), lineno=776, col_offset=52), Name('libraries', Param(), lineno=777, col_offset=21), Name('library_dirs', Param(), lineno=777, col_offset=37)], None, None, [Name('None', Load(), lineno=776, col_offset=46), Name('None', Load(), lineno=776, col_offset=65), Name('None', Load(), lineno=777, col_offset=31), Name('None', Load(), lineno=777, col_offset=50)]), [Expr(Str('Return a boolean indicating whether funcname is supported on\n        the current platform.  The optional arguments can be used to\n        augment the compilation environment.\n        ', lineno=781, col_offset=-1), lineno=781, col_offset=-1), Import([alias('tempfile', None)], lineno=786, col_offset=8), If(Compare(Name('includes', Load(), lineno=787, col_offset=11), [Is()], [Name('None', Load(), lineno=787, col_offset=23)], lineno=787, col_offset=11), [Assign([Name('includes', Store(), lineno=788, col_offset=12)], List([], Load(), lineno=788, col_offset=23), lineno=788, col_offset=12)], [], lineno=787, col_offset=8), If(Compare(Name('include_dirs', Load(), lineno=789, col_offset=11), [Is()], [Name('None', Load(), lineno=789, col_offset=27)], lineno=789, col_offset=11), [Assign([Name('include_dirs', Store(), lineno=790, col_offset=12)], List([], Load(), lineno=790, col_offset=27), lineno=790, col_offset=12)], [], lineno=789, col_offset=8), If(Compare(Name('libraries', Load(), lineno=791, col_offset=11), [Is()], [Name('None', Load(), lineno=791, col_offset=24)], lineno=791, col_offset=11), [Assign([Name('libraries', Store(), lineno=792, col_offset=12)], List([], Load(), lineno=792, col_offset=24), lineno=792, col_offset=12)], [], lineno=791, col_offset=8), If(Compare(Name('library_dirs', Load(), lineno=793, col_offset=11), [Is()], [Name('None', Load(), lineno=793, col_offset=27)], lineno=793, col_offset=11), [Assign([Name('library_dirs', Store(), lineno=794, col_offset=12)], List([], Load(), lineno=794, col_offset=27), lineno=794, col_offset=12)], [], lineno=793, col_offset=8), Assign([Tuple([Name('fd', Store(), lineno=795, col_offset=8), Name('fname', Store(), lineno=795, col_offset=12)], Store(), lineno=795, col_offset=8)], Call(Attribute(Name('tempfile', Load(), lineno=795, col_offset=20), 'mkstemp', Load(), lineno=795, col_offset=20), [Str('.c', lineno=795, col_offset=37), Name('funcname', Load(), lineno=795, col_offset=43)], [keyword('text', Name('True', Load(), lineno=795, col_offset=58))], None, None, lineno=795, col_offset=20), lineno=795, col_offset=8), Assign([Name('f', Store(), lineno=796, col_offset=8)], Call(Attribute(Name('os', Load(), lineno=796, col_offset=12), 'fdopen', Load(), lineno=796, col_offset=12), [Name('fd', Load(), lineno=796, col_offset=22), Str('w', lineno=796, col_offset=26)], [], None, None, lineno=796, col_offset=12), lineno=796, col_offset=8), TryFinally([For(Name('incl', Store(), lineno=798, col_offset=16), Name('includes', Load(), lineno=798, col_offset=24), [Expr(Call(Attribute(Name('f', Load(), lineno=799, col_offset=16), 'write', Load(), lineno=799, col_offset=16), [BinOp(Str('#include "%s"\n', lineno=799, col_offset=24), Mod(), Name('incl', Load(), lineno=799, col_offset=48), lineno=799, col_offset=24)], [], None, None, lineno=799, col_offset=16), lineno=799, col_offset=16)], [], lineno=798, col_offset=12), Expr(Call(Attribute(Name('f', Load(), lineno=800, col_offset=12), 'write', Load(), lineno=800, col_offset=12), [BinOp(Str('main (int argc, char **argv) {\n    %s();\n}\n', lineno=804, col_offset=-1), Mod(), Name('funcname', Load(), lineno=804, col_offset=6), lineno=804, col_offset=-1)], [], None, None, lineno=800, col_offset=12), lineno=800, col_offset=12)], [Expr(Call(Attribute(Name('f', Load(), lineno=806, col_offset=12), 'close', Load(), lineno=806, col_offset=12), [], [], None, None, lineno=806, col_offset=12), lineno=806, col_offset=12)], lineno=797, col_offset=8), TryExcept([Assign([Name('objects', Store(), lineno=808, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=808, col_offset=22), 'compile', Load(), lineno=808, col_offset=22), [List([Name('fname', Load(), lineno=808, col_offset=36)], Load(), lineno=808, col_offset=35)], [keyword('include_dirs', Name('include_dirs', Load(), lineno=808, col_offset=57))], None, None, lineno=808, col_offset=22), lineno=808, col_offset=12)], [ExceptHandler(Name('CompileError', Load(), lineno=809, col_offset=15), None, [Return(Name('False', Load(), lineno=810, col_offset=19), lineno=810, col_offset=12)], lineno=809, col_offset=8)], [], lineno=807, col_offset=8), TryExcept([Expr(Call(Attribute(Name('self', Load(), lineno=813, col_offset=12), 'link_executable', Load(), lineno=813, col_offset=12), [Name('objects', Load(), lineno=813, col_offset=33), Str('a.out', lineno=813, col_offset=42)], [keyword('libraries', Name('libraries', Load(), lineno=814, col_offset=43)), keyword('library_dirs', Name('library_dirs', Load(), lineno=815, col_offset=46))], None, None, lineno=813, col_offset=12), lineno=813, col_offset=12)], [ExceptHandler(Tuple([Name('LinkError', Load(), lineno=816, col_offset=16), Name('TypeError', Load(), lineno=816, col_offset=27)], Load(), lineno=816, col_offset=16), None, [Return(Name('False', Load(), lineno=817, col_offset=19), lineno=817, col_offset=12)], lineno=816, col_offset=8)], [], lineno=812, col_offset=8), Return(Name('True', Load(), lineno=818, col_offset=15), lineno=818, col_offset=8)], [], lineno=776, col_offset=4), FunctionDef('find_library_file', arguments([Name('self', Param(), lineno=820, col_offset=27), Name('dirs', Param(), lineno=820, col_offset=33), Name('lib', Param(), lineno=820, col_offset=39), Name('debug', Param(), lineno=820, col_offset=44)], None, None, [Num(0, lineno=820, col_offset=50)]), [Expr(Str("Search the specified list of directories for a static or shared\n        library file 'lib' and return the full path to that file.  If\n        'debug' true, look for a debugging version (if that makes sense on\n        the current platform).  Return None if 'lib' wasn't found in any of\n        the specified directories.\n        ", lineno=826, col_offset=-1), lineno=826, col_offset=-1), Raise(Name('NotImplementedError', Load(), lineno=827, col_offset=14), None, None, lineno=827, col_offset=8)], [], lineno=820, col_offset=4), FunctionDef('object_filenames', arguments([Name('self', Param(), lineno=863, col_offset=25), Name('source_filenames', Param(), lineno=863, col_offset=31), Name('strip_dir', Param(), lineno=863, col_offset=49), Name('output_dir', Param(), lineno=863, col_offset=62)], None, None, [Num(0, lineno=863, col_offset=59), Str('', lineno=863, col_offset=73)]), [If(Compare(Name('output_dir', Load(), lineno=864, col_offset=11), [Is()], [Name('None', Load(), lineno=864, col_offset=25)], lineno=864, col_offset=11), [Assign([Name('output_dir', Store(), lineno=865, col_offset=12)], Str('', lineno=865, col_offset=25), lineno=865, col_offset=12)], [], lineno=864, col_offset=8), Assign([Name('obj_names', Store(), lineno=866, col_offset=8)], List([], Load(), lineno=866, col_offset=20), lineno=866, col_offset=8), For(Name('src_name', Store(), lineno=867, col_offset=12), Name('source_filenames', Load(), lineno=867, col_offset=24), [Assign([Tuple([Name('base', Store(), lineno=868, col_offset=12), Name('ext', Store(), lineno=868, col_offset=18)], Store(), lineno=868, col_offset=12)], Call(Attribute(Attribute(Name('os', Load(), lineno=868, col_offset=24), 'path', Load(), lineno=868, col_offset=24), 'splitext', Load(), lineno=868, col_offset=24), [Name('src_name', Load(), lineno=868, col_offset=41)], [], None, None, lineno=868, col_offset=24), lineno=868, col_offset=12), Assign([Name('base', Store(), lineno=869, col_offset=12)], Subscript(Call(Attribute(Attribute(Name('os', Load(), lineno=869, col_offset=19), 'path', Load(), lineno=869, col_offset=19), 'splitdrive', Load(), lineno=869, col_offset=19), [Name('base', Load(), lineno=869, col_offset=38)], [], None, None, lineno=869, col_offset=19), Index(Num(1, lineno=869, col_offset=44)), Load(), lineno=869, col_offset=19), lineno=869, col_offset=12), Assign([Name('base', Store(), lineno=870, col_offset=12)], Subscript(Name('base', Load(), lineno=870, col_offset=19), Slice(Call(Attribute(Attribute(Name('os', Load(), lineno=870, col_offset=24), 'path', Load(), lineno=870, col_offset=24), 'isabs', Load(), lineno=870, col_offset=24), [Name('base', Load(), lineno=870, col_offset=38)], [], None, None, lineno=870, col_offset=24), None, None), Load(), lineno=870, col_offset=19), lineno=870, col_offset=12), If(Compare(Name('ext', Load(), lineno=871, col_offset=15), [NotIn()], [Attribute(Name('self', Load(), lineno=871, col_offset=26), 'src_extensions', Load(), lineno=871, col_offset=26)], lineno=871, col_offset=15), [Raise(Name('UnknownFileError', Load(), lineno=872, col_offset=22), BinOp(Str("unknown file type '%s' (from '%s')", lineno=873, col_offset=22), Mod(), Tuple([Name('ext', Load(), lineno=873, col_offset=62), Name('src_name', Load(), lineno=873, col_offset=67)], Load(), lineno=873, col_offset=62), lineno=873, col_offset=22), None, lineno=872, col_offset=16)], [], lineno=871, col_offset=12), If(Name('strip_dir', Load(), lineno=874, col_offset=15), [Assign([Name('base', Store(), lineno=875, col_offset=16)], Call(Attribute(Attribute(Name('os', Load(), lineno=875, col_offset=23), 'path', Load(), lineno=875, col_offset=23), 'basename', Load(), lineno=875, col_offset=23), [Name('base', Load(), lineno=875, col_offset=40)], [], None, None, lineno=875, col_offset=23), lineno=875, col_offset=16)], [], lineno=874, col_offset=12), Expr(Call(Attribute(Name('obj_names', Load(), lineno=876, col_offset=12), 'append', Load(), lineno=876, col_offset=12), [Call(Attribute(Attribute(Name('os', Load(), lineno=876, col_offset=29), 'path', Load(), lineno=876, col_offset=29), 'join', Load(), lineno=876, col_offset=29), [Name('output_dir', Load(), lineno=876, col_offset=42), BinOp(Name('base', Load(), lineno=877, col_offset=42), Add(), Attribute(Name('self', Load(), lineno=877, col_offset=49), 'obj_extension', Load(), lineno=877, col_offset=49), lineno=877, col_offset=42)], [], None, None, lineno=876, col_offset=29)], [], None, None, lineno=876, col_offset=12), lineno=876, col_offset=12)], [], lineno=867, col_offset=8), Return(Name('obj_names', Load(), lineno=878, col_offset=15), lineno=878, col_offset=8)], [], lineno=863, col_offset=4), FunctionDef('shared_object_filename', arguments([Name('self', Param(), lineno=880, col_offset=31), Name('basename', Param(), lineno=880, col_offset=37), Name('strip_dir', Param(), lineno=880, col_offset=47), Name('output_dir', Param(), lineno=880, col_offset=60)], None, None, [Num(0, lineno=880, col_offset=57), Str('', lineno=880, col_offset=71)]), [Assert(Compare(Name('output_dir', Load(), lineno=881, col_offset=15), [IsNot()], [Name('None', Load(), lineno=881, col_offset=33)], lineno=881, col_offset=15), None, lineno=881, col_offset=8), If(Name('strip_dir', Load(), lineno=882, col_offset=11), [Assign([Name('basename', Store(), lineno=883, col_offset=12)], Call(Attribute(Attribute(Name('os', Load(), lineno=883, col_offset=23), 'path', Load(), lineno=883, col_offset=23), 'basename', Load(), lineno=883, col_offset=23), [Name('basename', Load(), lineno=883, col_offset=41)], [], None, None, lineno=883, col_offset=23), lineno=883, col_offset=12)], [], lineno=882, col_offset=8), Return(Call(Attribute(Attribute(Name('os', Load(), lineno=884, col_offset=15), 'path', Load(), lineno=884, col_offset=15), 'join', Load(), lineno=884, col_offset=15), [Name('output_dir', Load(), lineno=884, col_offset=28), BinOp(Name('basename', Load(), lineno=884, col_offset=40), Add(), Attribute(Name('self', Load(), lineno=884, col_offset=51), 'shared_lib_extension', Load(), lineno=884, col_offset=51), lineno=884, col_offset=40)], [], None, None, lineno=884, col_offset=15), lineno=884, col_offset=8)], [], lineno=880, col_offset=4), FunctionDef('executable_filename', arguments([Name('self', Param(), lineno=886, col_offset=28), Name('basename', Param(), lineno=886, col_offset=34), Name('strip_dir', Param(), lineno=886, col_offset=44), Name('output_dir', Param(), lineno=886, col_offset=57)], None, None, [Num(0, lineno=886, col_offset=54), Str('', lineno=886, col_offset=68)]), [Assert(Compare(Name('output_dir', Load(), lineno=887, col_offset=15), [IsNot()], [Name('None', Load(), lineno=887, col_offset=33)], lineno=887, col_offset=15), None, lineno=887, col_offset=8), If(Name('strip_dir', Load(), lineno=888, col_offset=11), [Assign([Name('basename', Store(), lineno=889, col_offset=12)], Call(Attribute(Attribute(Name('os', Load(), lineno=889, col_offset=23), 'path', Load(), lineno=889, col_offset=23), 'basename', Load(), lineno=889, col_offset=23), [Name('basename', Load(), lineno=889, col_offset=41)], [], None, None, lineno=889, col_offset=23), lineno=889, col_offset=12)], [], lineno=888, col_offset=8), Return(Call(Attribute(Attribute(Name('os', Load(), lineno=890, col_offset=15), 'path', Load(), lineno=890, col_offset=15), 'join', Load(), lineno=890, col_offset=15), [Name('output_dir', Load(), lineno=890, col_offset=28), BinOp(Name('basename', Load(), lineno=890, col_offset=40), Add(), BoolOp(Or(), [Attribute(Name('self', Load(), lineno=890, col_offset=52), 'exe_extension', Load(), lineno=890, col_offset=52), Str('', lineno=890, col_offset=74)], lineno=890, col_offset=52), lineno=890, col_offset=40)], [], None, None, lineno=890, col_offset=15), lineno=890, col_offset=8)], [], lineno=886, col_offset=4), FunctionDef('library_filename', arguments([Name('self', Param(), lineno=892, col_offset=25), Name('libname', Param(), lineno=892, col_offset=31), Name('lib_type', Param(), lineno=892, col_offset=40), Name('strip_dir', Param(), lineno=893, col_offset=25), Name('output_dir', Param(), lineno=893, col_offset=38)], None, None, [Str('static', lineno=892, col_offset=49), Num(0, lineno=893, col_offset=35), Str('', lineno=893, col_offset=49)]), [Assert(Compare(Name('output_dir', Load(), lineno=894, col_offset=15), [IsNot()], [Name('None', Load(), lineno=894, col_offset=33)], lineno=894, col_offset=15), None, lineno=894, col_offset=8), If(Compare(Name('lib_type', Load(), lineno=895, col_offset=11), [NotIn()], [Tuple([Str('static', lineno=895, col_offset=28), Str('shared', lineno=895, col_offset=38), Str('dylib', lineno=895, col_offset=48)], Load(), lineno=895, col_offset=28)], lineno=895, col_offset=11), [Raise(Name('ValueError', Load(), lineno=896, col_offset=18), Str('\'lib_type\' must be "static", "shared" or "dylib"', lineno=896, col_offset=30), None, lineno=896, col_offset=12)], [], lineno=895, col_offset=8), Assign([Name('fmt', Store(), lineno=897, col_offset=8)], Call(Name('getattr', Load(), lineno=897, col_offset=14), [Name('self', Load(), lineno=897, col_offset=22), BinOp(Name('lib_type', Load(), lineno=897, col_offset=28), Add(), Str('_lib_format', lineno=897, col_offset=39), lineno=897, col_offset=28)], [], None, None, lineno=897, col_offset=14), lineno=897, col_offset=8), Assign([Name('ext', Store(), lineno=898, col_offset=8)], Call(Name('getattr', Load(), lineno=898, col_offset=14), [Name('self', Load(), lineno=898, col_offset=22), BinOp(Name('lib_type', Load(), lineno=898, col_offset=28), Add(), Str('_lib_extension', lineno=898, col_offset=39), lineno=898, col_offset=28)], [], None, None, lineno=898, col_offset=14), lineno=898, col_offset=8), Assign([Tuple([Name('dir', Store(), lineno=900, col_offset=8), Name('base', Store(), lineno=900, col_offset=13)], Store(), lineno=900, col_offset=8)], Call(Attribute(Attribute(Name('os', Load(), lineno=900, col_offset=20), 'path', Load(), lineno=900, col_offset=20), 'split', Load(), lineno=900, col_offset=20), [Name('libname', Load(), lineno=900, col_offset=35)], [], None, None, lineno=900, col_offset=20), lineno=900, col_offset=8), Assign([Name('filename', Store(), lineno=901, col_offset=8)], BinOp(Name('fmt', Load(), lineno=901, col_offset=19), Mod(), Tuple([Name('base', Load(), lineno=901, col_offset=26), Name('ext', Load(), lineno=901, col_offset=32)], Load(), lineno=901, col_offset=26), lineno=901, col_offset=19), lineno=901, col_offset=8), If(Name('strip_dir', Load(), lineno=902, col_offset=11), [Assign([Name('dir', Store(), lineno=903, col_offset=12)], Str('', lineno=903, col_offset=18), lineno=903, col_offset=12)], [], lineno=902, col_offset=8), Return(Call(Attribute(Attribute(Name('os', Load(), lineno=905, col_offset=15), 'path', Load(), lineno=905, col_offset=15), 'join', Load(), lineno=905, col_offset=15), [Name('output_dir', Load(), lineno=905, col_offset=28), Name('dir', Load(), lineno=905, col_offset=40), Name('filename', Load(), lineno=905, col_offset=45)], [], None, None, lineno=905, col_offset=15), lineno=905, col_offset=8)], [], lineno=892, col_offset=4), FunctionDef('announce', arguments([Name('self', Param(), lineno=910, col_offset=17), Name('msg', Param(), lineno=910, col_offset=23), Name('level', Param(), lineno=910, col_offset=28)], None, None, [Num(1, lineno=910, col_offset=34)]), [Expr(Call(Attribute(Name('log', Load(), lineno=911, col_offset=8), 'debug', Load(), lineno=911, col_offset=8), [Name('msg', Load(), lineno=911, col_offset=18)], [], None, None, lineno=911, col_offset=8), lineno=911, col_offset=8)], [], lineno=910, col_offset=4), FunctionDef('debug_print', arguments([Name('self', Param(), lineno=913, col_offset=20), Name('msg', Param(), lineno=913, col_offset=26)], None, None, []), [ImportFrom('distutils.debug', [alias('DEBUG', None)], 0, lineno=914, col_offset=8), If(Name('DEBUG', Load(), lineno=915, col_offset=11), [Print(None, [Name('msg', Load(), lineno=916, col_offset=18)], True, lineno=916, col_offset=12)], [], lineno=915, col_offset=8)], [], lineno=913, col_offset=4), FunctionDef('warn', arguments([Name('self', Param(), lineno=918, col_offset=13), Name('msg', Param(), lineno=918, col_offset=19)], None, None, []), [Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=919, col_offset=8), 'stderr', Load(), lineno=919, col_offset=8), 'write', Load(), lineno=919, col_offset=8), [BinOp(Str('warning: %s\n', lineno=919, col_offset=25), Mod(), Name('msg', Load(), lineno=919, col_offset=43), lineno=919, col_offset=25)], [], None, None, lineno=919, col_offset=8), lineno=919, col_offset=8)], [], lineno=918, col_offset=4), FunctionDef('execute', arguments([Name('self', Param(), lineno=921, col_offset=16), Name('func', Param(), lineno=921, col_offset=22), Name('args', Param(), lineno=921, col_offset=28), Name('msg', Param(), lineno=921, col_offset=34), Name('level', Param(), lineno=921, col_offset=44)], None, None, [Name('None', Load(), lineno=921, col_offset=38), Num(1, lineno=921, col_offset=50)]), [Expr(Call(Name('execute', Load(), lineno=922, col_offset=8), [Name('func', Load(), lineno=922, col_offset=16), Name('args', Load(), lineno=922, col_offset=22), Name('msg', Load(), lineno=922, col_offset=28), Attribute(Name('self', Load(), lineno=922, col_offset=33), 'dry_run', Load(), lineno=922, col_offset=33)], [], None, None, lineno=922, col_offset=8), lineno=922, col_offset=8)], [], lineno=921, col_offset=4), FunctionDef('spawn', arguments([Name('self', Param(), lineno=924, col_offset=14), Name('cmd', Param(), lineno=924, col_offset=20)], None, None, []), [Expr(Call(Name('spawn', Load(), lineno=925, col_offset=8), [Name('cmd', Load(), lineno=925, col_offset=14)], [keyword('dry_run', Attribute(Name('self', Load(), lineno=925, col_offset=27), 'dry_run', Load(), lineno=925, col_offset=27))], None, None, lineno=925, col_offset=8), lineno=925, col_offset=8)], [], lineno=924, col_offset=4), FunctionDef('move_file', arguments([Name('self', Param(), lineno=927, col_offset=18), Name('src', Param(), lineno=927, col_offset=24), Name('dst', Param(), lineno=927, col_offset=29)], None, None, []), [Return(Call(Name('move_file', Load(), lineno=928, col_offset=15), [Name('src', Load(), lineno=928, col_offset=25), Name('dst', Load(), lineno=928, col_offset=30)], [keyword('dry_run', Attribute(Name('self', Load(), lineno=928, col_offset=43), 'dry_run', Load(), lineno=928, col_offset=43))], None, None, lineno=928, col_offset=15), lineno=928, col_offset=8)], [], lineno=927, col_offset=4), FunctionDef('mkpath', arguments([Name('self', Param(), lineno=930, col_offset=15), Name('name', Param(), lineno=930, col_offset=21), Name('mode', Param(), lineno=930, col_offset=27)], None, None, [Num(511, lineno=930, col_offset=32)]), [Expr(Call(Name('mkpath', Load(), lineno=931, col_offset=8), [Name('name', Load(), lineno=931, col_offset=15), Name('mode', Load(), lineno=931, col_offset=21)], [keyword('dry_run', Attribute(Name('self', Load(), lineno=931, col_offset=35), 'dry_run', Load(), lineno=931, col_offset=35))], None, None, lineno=931, col_offset=8), lineno=931, col_offset=8)], [], lineno=930, col_offset=4)], [], lineno=73, col_offset=0), Assign([Name('_default_compilers', Store(), lineno=941, col_offset=0)], Tuple([Tuple([Str('cygwin.*', lineno=947, col_offset=5), Str('unix', lineno=947, col_offset=17)], Load(), lineno=947, col_offset=5), Tuple([Str('os2emx', lineno=948, col_offset=5), Str('emx', lineno=948, col_offset=15)], Load(), lineno=948, col_offset=5), Tuple([Str('posix', lineno=951, col_offset=5), Str('unix', lineno=951, col_offset=14)], Load(), lineno=951, col_offset=5), Tuple([Str('nt', lineno=952, col_offset=5), Str('msvc', lineno=952, col_offset=11)], Load(), lineno=952, col_offset=5)], Load(), lineno=947, col_offset=4), lineno=941, col_offset=0), FunctionDef('get_default_compiler', arguments([Name('osname', Param(), lineno=956, col_offset=25), Name('platform', Param(), lineno=956, col_offset=38)], None, None, [Name('None', Load(), lineno=956, col_offset=32), Name('None', Load(), lineno=956, col_offset=47)]), [Expr(Str(' Determine the default compiler to use for the given platform.\n\n        osname should be one of the standard Python OS names (i.e. the\n        ones returned by os.name) and platform the common value\n        returned by sys.platform for the platform in question.\n\n        The default values are os.name and sys.platform in case the\n        parameters are not given.\n\n    ', lineno=966, col_offset=-1), lineno=966, col_offset=-1), If(Compare(Name('osname', Load(), lineno=967, col_offset=7), [Is()], [Name('None', Load(), lineno=967, col_offset=17)], lineno=967, col_offset=7), [Assign([Name('osname', Store(), lineno=968, col_offset=8)], Attribute(Name('os', Load(), lineno=968, col_offset=17), 'name', Load(), lineno=968, col_offset=17), lineno=968, col_offset=8)], [], lineno=967, col_offset=4), If(Compare(Name('platform', Load(), lineno=969, col_offset=7), [Is()], [Name('None', Load(), lineno=969, col_offset=19)], lineno=969, col_offset=7), [Assign([Name('platform', Store(), lineno=970, col_offset=8)], Attribute(Name('sys', Load(), lineno=970, col_offset=19), 'platform', Load(), lineno=970, col_offset=19), lineno=970, col_offset=8)], [], lineno=969, col_offset=4), For(Tuple([Name('pattern', Store(), lineno=971, col_offset=8), Name('compiler', Store(), lineno=971, col_offset=17)], Store(), lineno=971, col_offset=8), Name('_default_compilers', Load(), lineno=971, col_offset=29), [If(BoolOp(Or(), [Compare(Call(Attribute(Name('re', Load(), lineno=972, col_offset=11), 'match', Load(), lineno=972, col_offset=11), [Name('pattern', Load(), lineno=972, col_offset=20), Name('platform', Load(), lineno=972, col_offset=29)], [], None, None, lineno=972, col_offset=11), [IsNot()], [Name('None', Load(), lineno=972, col_offset=46)], lineno=972, col_offset=11), Compare(Call(Attribute(Name('re', Load(), lineno=973, col_offset=11), 'match', Load(), lineno=973, col_offset=11), [Name('pattern', Load(), lineno=973, col_offset=20), Name('osname', Load(), lineno=973, col_offset=29)], [], None, None, lineno=973, col_offset=11), [IsNot()], [Name('None', Load(), lineno=973, col_offset=44)], lineno=973, col_offset=11)], lineno=972, col_offset=11), [Return(Name('compiler', Load(), lineno=974, col_offset=19), lineno=974, col_offset=12)], [], lineno=972, col_offset=8)], [], lineno=971, col_offset=4), Return(Str('unix', lineno=976, col_offset=11), lineno=976, col_offset=4)], [], lineno=956, col_offset=0), Assign([Name('compiler_class', Store(), lineno=981, col_offset=0)], Dict([Str('unix', lineno=981, col_offset=19), Str('msvc', lineno=983, col_offset=19), Str('cygwin', lineno=985, col_offset=19), Str('mingw32', lineno=987, col_offset=19), Str('bcpp', lineno=989, col_offset=19), Str('emx', lineno=991, col_offset=19)], [Tuple([Str('unixccompiler', lineno=981, col_offset=31), Str('UnixCCompiler', lineno=981, col_offset=48), Str('standard UNIX-style compiler', lineno=982, col_offset=31)], Load(), lineno=981, col_offset=31), Tuple([Str('msvccompiler', lineno=983, col_offset=31), Str('MSVCCompiler', lineno=983, col_offset=47), Str('Microsoft Visual C++', lineno=984, col_offset=31)], Load(), lineno=983, col_offset=31), Tuple([Str('cygwinccompiler', lineno=985, col_offset=31), Str('CygwinCCompiler', lineno=985, col_offset=50), Str('Cygwin port of GNU C Compiler for Win32', lineno=986, col_offset=31)], Load(), lineno=985, col_offset=31), Tuple([Str('cygwinccompiler', lineno=987, col_offset=31), Str('Mingw32CCompiler', lineno=987, col_offset=50), Str('Mingw32 port of GNU C Compiler for Win32', lineno=988, col_offset=31)], Load(), lineno=987, col_offset=31), Tuple([Str('bcppcompiler', lineno=989, col_offset=31), Str('BCPPCompiler', lineno=989, col_offset=47), Str('Borland C++ Compiler', lineno=990, col_offset=31)], Load(), lineno=989, col_offset=31), Tuple([Str('emxccompiler', lineno=991, col_offset=31), Str('EMXCCompiler', lineno=991, col_offset=47), Str('EMX port of GNU C Compiler for OS/2', lineno=992, col_offset=31)], Load(), lineno=991, col_offset=31)], lineno=981, col_offset=17), lineno=981, col_offset=0), FunctionDef('show_compilers', arguments([], None, None, []), [Expr(Str('Print list of available compilers (used by the "--help-compiler"\n    options to "build", "build_ext", "build_clib").\n    ', lineno=998, col_offset=-1), lineno=998, col_offset=-1), ImportFrom('distutils.fancy_getopt', [alias('FancyGetopt', None)], 0, lineno=1002, col_offset=4), Assign([Name('compilers', Store(), lineno=1003, col_offset=4)], List([], Load(), lineno=1003, col_offset=16), lineno=1003, col_offset=4), For(Name('compiler', Store(), lineno=1004, col_offset=8), Call(Attribute(Name('compiler_class', Load(), lineno=1004, col_offset=20), 'keys', Load(), lineno=1004, col_offset=20), [], [], None, None, lineno=1004, col_offset=20), [Expr(Call(Attribute(Name('compilers', Load(), lineno=1005, col_offset=8), 'append', Load(), lineno=1005, col_offset=8), [Tuple([BinOp(Str('compiler=', lineno=1005, col_offset=26), Add(), Name('compiler', Load(), lineno=1005, col_offset=38), lineno=1005, col_offset=26), Name('None', Load(), lineno=1005, col_offset=48), Subscript(Subscript(Name('compiler_class', Load(), lineno=1006, col_offset=26), Index(Name('compiler', Load(), lineno=1006, col_offset=41)), Load(), lineno=1006, col_offset=26), Index(Num(2, lineno=1006, col_offset=51)), Load(), lineno=1006, col_offset=26)], Load(), lineno=1005, col_offset=26)], [], None, None, lineno=1005, col_offset=8), lineno=1005, col_offset=8)], [], lineno=1004, col_offset=4), Expr(Call(Attribute(Name('compilers', Load(), lineno=1007, col_offset=4), 'sort', Load(), lineno=1007, col_offset=4), [], [], None, None, lineno=1007, col_offset=4), lineno=1007, col_offset=4), Assign([Name('pretty_printer', Store(), lineno=1008, col_offset=4)], Call(Name('FancyGetopt', Load(), lineno=1008, col_offset=21), [Name('compilers', Load(), lineno=1008, col_offset=33)], [], None, None, lineno=1008, col_offset=21), lineno=1008, col_offset=4), Expr(Call(Attribute(Name('pretty_printer', Load(), lineno=1009, col_offset=4), 'print_help', Load(), lineno=1009, col_offset=4), [Str('List of available compilers:', lineno=1009, col_offset=30)], [], None, None, lineno=1009, col_offset=4), lineno=1009, col_offset=4)], [], lineno=995, col_offset=0), FunctionDef('new_compiler', arguments([Name('plat', Param(), lineno=1012, col_offset=17), Name('compiler', Param(), lineno=1012, col_offset=28), Name('verbose', Param(), lineno=1012, col_offset=43), Name('dry_run', Param(), lineno=1012, col_offset=54), Name('force', Param(), lineno=1012, col_offset=65)], None, None, [Name('None', Load(), lineno=1012, col_offset=22), Name('None', Load(), lineno=1012, col_offset=37), Num(0, lineno=1012, col_offset=51), Num(0, lineno=1012, col_offset=62), Num(0, lineno=1012, col_offset=71)]), [Expr(Str('Generate an instance of some CCompiler subclass for the supplied\n    platform/compiler combination.  \'plat\' defaults to \'os.name\'\n    (eg. \'posix\', \'nt\'), and \'compiler\' defaults to the default compiler\n    for that platform.  Currently only \'posix\' and \'nt\' are supported, and\n    the default compilers are "traditional Unix interface" (UnixCCompiler\n    class) and Visual C++ (MSVCCompiler class).  Note that it\'s perfectly\n    possible to ask for a Unix compiler object under Windows, and a\n    Microsoft compiler object under Unix -- if you supply a value for\n    \'compiler\', \'plat\' is ignored.\n    ', lineno=1022, col_offset=-1), lineno=1022, col_offset=-1), If(Compare(Name('plat', Load(), lineno=1023, col_offset=7), [Is()], [Name('None', Load(), lineno=1023, col_offset=15)], lineno=1023, col_offset=7), [Assign([Name('plat', Store(), lineno=1024, col_offset=8)], Attribute(Name('os', Load(), lineno=1024, col_offset=15), 'name', Load(), lineno=1024, col_offset=15), lineno=1024, col_offset=8)], [], lineno=1023, col_offset=4), TryExcept([If(Compare(Name('compiler', Load(), lineno=1027, col_offset=11), [Is()], [Name('None', Load(), lineno=1027, col_offset=23)], lineno=1027, col_offset=11), [Assign([Name('compiler', Store(), lineno=1028, col_offset=12)], Call(Name('get_default_compiler', Load(), lineno=1028, col_offset=23), [Name('plat', Load(), lineno=1028, col_offset=44)], [], None, None, lineno=1028, col_offset=23), lineno=1028, col_offset=12)], [], lineno=1027, col_offset=8), Assign([Tuple([Name('module_name', Store(), lineno=1030, col_offset=9), Name('class_name', Store(), lineno=1030, col_offset=22), Name('long_description', Store(), lineno=1030, col_offset=34)], Store(), lineno=1030, col_offset=9)], Subscript(Name('compiler_class', Load(), lineno=1030, col_offset=54), Index(Name('compiler', Load(), lineno=1030, col_offset=69)), Load(), lineno=1030, col_offset=54), lineno=1030, col_offset=8)], [ExceptHandler(Name('KeyError', Load(), lineno=1031, col_offset=11), None, [Assign([Name('msg', Store(), lineno=1032, col_offset=8)], BinOp(Str("don't know how to compile C/C++ code on platform '%s'", lineno=1032, col_offset=14), Mod(), Name('plat', Load(), lineno=1032, col_offset=72), lineno=1032, col_offset=14), lineno=1032, col_offset=8), If(Compare(Name('compiler', Load(), lineno=1033, col_offset=11), [IsNot()], [Name('None', Load(), lineno=1033, col_offset=27)], lineno=1033, col_offset=11), [Assign([Name('msg', Store(), lineno=1034, col_offset=12)], BinOp(Name('msg', Load(), lineno=1034, col_offset=18), Add(), BinOp(Str(" with '%s' compiler", lineno=1034, col_offset=24), Mod(), Name('compiler', Load(), lineno=1034, col_offset=48), lineno=1034, col_offset=24), lineno=1034, col_offset=18), lineno=1034, col_offset=12)], [], lineno=1033, col_offset=8), Raise(Name('DistutilsPlatformError', Load(), lineno=1035, col_offset=14), Name('msg', Load(), lineno=1035, col_offset=38), None, lineno=1035, col_offset=8)], lineno=1031, col_offset=4)], [], lineno=1026, col_offset=4), TryExcept([Assign([Name('module_name', Store(), lineno=1038, col_offset=8)], BinOp(Str('distutils.', lineno=1038, col_offset=22), Add(), Name('module_name', Load(), lineno=1038, col_offset=37), lineno=1038, col_offset=22), lineno=1038, col_offset=8), Expr(Call(Name('__import__', Load(), lineno=1039, col_offset=8), [Name('module_name', Load(), lineno=1039, col_offset=20)], [], None, None, lineno=1039, col_offset=8), lineno=1039, col_offset=8), Assign([Name('module', Store(), lineno=1040, col_offset=8)], Subscript(Attribute(Name('sys', Load(), lineno=1040, col_offset=17), 'modules', Load(), lineno=1040, col_offset=17), Index(Name('module_name', Load(), lineno=1040, col_offset=29)), Load(), lineno=1040, col_offset=17), lineno=1040, col_offset=8), Assign([Name('klass', Store(), lineno=1041, col_offset=8)], Subscript(Call(Name('vars', Load(), lineno=1041, col_offset=16), [Name('module', Load(), lineno=1041, col_offset=21)], [], None, None, lineno=1041, col_offset=16), Index(Name('class_name', Load(), lineno=1041, col_offset=29)), Load(), lineno=1041, col_offset=16), lineno=1041, col_offset=8)], [ExceptHandler(Name('ImportError', Load(), lineno=1042, col_offset=11), None, [Raise(Name('DistutilsModuleError', Load(), lineno=1043, col_offset=14), BinOp(Str("can't compile C/C++ code: unable to load module '%s'", lineno=1044, col_offset=14), Mod(), Name('module_name', Load(), lineno=1045, col_offset=14), lineno=1044, col_offset=14), None, lineno=1043, col_offset=8)], lineno=1042, col_offset=4), ExceptHandler(Name('KeyError', Load(), lineno=1046, col_offset=11), None, [Raise(Name('DistutilsModuleError', Load(), lineno=1047, col_offset=14), BinOp(BinOp(Str("can't compile C/C++ code: unable to find class '%s' ", lineno=1048, col_offset=15), Add(), Str("in module '%s'", lineno=1049, col_offset=15), lineno=1048, col_offset=15), Mod(), Tuple([Name('class_name', Load(), lineno=1049, col_offset=36), Name('module_name', Load(), lineno=1049, col_offset=48)], Load(), lineno=1049, col_offset=36), lineno=1048, col_offset=14), None, lineno=1047, col_offset=8)], lineno=1046, col_offset=4)], [], lineno=1037, col_offset=4), Return(Call(Name('klass', Load(), lineno=1054, col_offset=11), [Name('None', Load(), lineno=1054, col_offset=17), Name('dry_run', Load(), lineno=1054, col_offset=23), Name('force', Load(), lineno=1054, col_offset=32)], [], None, None, lineno=1054, col_offset=11), lineno=1054, col_offset=4)], [], lineno=1012, col_offset=0), FunctionDef('gen_preprocess_options', arguments([Name('macros', Param(), lineno=1057, col_offset=27), Name('include_dirs', Param(), lineno=1057, col_offset=35)], None, None, []), [Expr(Str("Generate C pre-processor options (-D, -U, -I) as used by at least\n    two types of compilers: the typical Unix compiler and Visual C++.\n    'macros' is the usual thing, a list of 1- or 2-tuples, where (name,)\n    means undefine (-U) macro 'name', and (name,value) means define (-D)\n    macro 'name' to 'value'.  'include_dirs' is just a list of directory\n    names to be added to the header file search path (-I).  Returns a list\n    of command-line options suitable for either Unix compilers or Visual\n    C++.\n    ", lineno=1066, col_offset=-1), lineno=1066, col_offset=-1), Assign([Name('pp_opts', Store(), lineno=1079, col_offset=4)], List([], Load(), lineno=1079, col_offset=14), lineno=1079, col_offset=4), For(Name('macro', Store(), lineno=1080, col_offset=8), Name('macros', Load(), lineno=1080, col_offset=17), [If(UnaryOp(Not(), BoolOp(And(), [Call(Name('isinstance', Load(), lineno=1082, col_offset=16), [Name('macro', Load(), lineno=1082, col_offset=27), Name('tuple', Load(), lineno=1082, col_offset=34)], [], None, None, lineno=1082, col_offset=16), Compare(Num(1, lineno=1083, col_offset=16), [LtE(), LtE()], [Call(Name('len', Load(), lineno=1083, col_offset=21), [Name('macro', Load(), lineno=1083, col_offset=26)], [], None, None, lineno=1083, col_offset=21), Num(2, lineno=1083, col_offset=36)], lineno=1083, col_offset=16)], lineno=1082, col_offset=16), lineno=1082, col_offset=11), [Raise(Name('TypeError', Load(), lineno=1084, col_offset=18), BinOp(BinOp(Str("bad macro definition '%s': ", lineno=1085, col_offset=19), Add(), Str("each element of 'macros' list must be a 1- or 2-tuple", lineno=1086, col_offset=19), lineno=1085, col_offset=19), Mod(), Name('macro', Load(), lineno=1087, col_offset=18), lineno=1085, col_offset=18), None, lineno=1084, col_offset=12)], [], lineno=1082, col_offset=8), If(Compare(Call(Name('len', Load(), lineno=1089, col_offset=11), [Name('macro', Load(), lineno=1089, col_offset=16)], [], None, None, lineno=1089, col_offset=11), [Eq()], [Num(1, lineno=1089, col_offset=26)], lineno=1089, col_offset=11), [Expr(Call(Attribute(Name('pp_opts', Load(), lineno=1090, col_offset=12), 'append', Load(), lineno=1090, col_offset=12), [BinOp(Str('-U%s', lineno=1090, col_offset=28), Mod(), Subscript(Name('macro', Load(), lineno=1090, col_offset=37), Index(Num(0, lineno=1090, col_offset=43)), Load(), lineno=1090, col_offset=37), lineno=1090, col_offset=28)], [], None, None, lineno=1090, col_offset=12), lineno=1090, col_offset=12)], [If(Compare(Call(Name('len', Load(), lineno=1091, col_offset=13), [Name('macro', Load(), lineno=1091, col_offset=18)], [], None, None, lineno=1091, col_offset=13), [Eq()], [Num(2, lineno=1091, col_offset=28)], lineno=1091, col_offset=13), [If(Compare(Subscript(Name('macro', Load(), lineno=1092, col_offset=15), Index(Num(1, lineno=1092, col_offset=21)), Load(), lineno=1092, col_offset=15), [Is()], [Name('None', Load(), lineno=1092, col_offset=27)], lineno=1092, col_offset=15), [Expr(Call(Attribute(Name('pp_opts', Load(), lineno=1093, col_offset=16), 'append', Load(), lineno=1093, col_offset=16), [BinOp(Str('-D%s', lineno=1093, col_offset=32), Mod(), Subscript(Name('macro', Load(), lineno=1093, col_offset=41), Index(Num(0, lineno=1093, col_offset=47)), Load(), lineno=1093, col_offset=41), lineno=1093, col_offset=32)], [], None, None, lineno=1093, col_offset=16), lineno=1093, col_offset=16)], [Expr(Call(Attribute(Name('pp_opts', Load(), lineno=1098, col_offset=16), 'append', Load(), lineno=1098, col_offset=16), [BinOp(Str('-D%s=%s', lineno=1098, col_offset=32), Mod(), Name('macro', Load(), lineno=1098, col_offset=44), lineno=1098, col_offset=32)], [], None, None, lineno=1098, col_offset=16), lineno=1098, col_offset=16)], lineno=1092, col_offset=12)], [], lineno=1091, col_offset=13)], lineno=1089, col_offset=8)], [], lineno=1080, col_offset=4), For(Name('dir', Store(), lineno=1100, col_offset=8), Name('include_dirs', Load(), lineno=1100, col_offset=15), [Expr(Call(Attribute(Name('pp_opts', Load(), lineno=1101, col_offset=8), 'append', Load(), lineno=1101, col_offset=8), [BinOp(Str('-I%s', lineno=1101, col_offset=24), Mod(), Name('dir', Load(), lineno=1101, col_offset=33), lineno=1101, col_offset=24)], [], None, None, lineno=1101, col_offset=8), lineno=1101, col_offset=8)], [], lineno=1100, col_offset=4), Return(Name('pp_opts', Load(), lineno=1103, col_offset=11), lineno=1103, col_offset=4)], [], lineno=1057, col_offset=0), FunctionDef('gen_lib_options', arguments([Name('compiler', Param(), lineno=1106, col_offset=20), Name('library_dirs', Param(), lineno=1106, col_offset=30), Name('runtime_library_dirs', Param(), lineno=1106, col_offset=44), Name('libraries', Param(), lineno=1106, col_offset=66)], None, None, []), [Expr(Str("Generate linker options for searching library directories and\n    linking with specific libraries.\n\n    'libraries' and 'library_dirs' are, respectively, lists of library names\n    (not filenames!) and search directories.  Returns a list of command-line\n    options suitable for use with some compiler (depending on the two format\n    strings passed in).\n    ", lineno=1114, col_offset=-1), lineno=1114, col_offset=-1), Assign([Name('lib_opts', Store(), lineno=1115, col_offset=4)], List([], Load(), lineno=1115, col_offset=15), lineno=1115, col_offset=4), For(Name('dir', Store(), lineno=1117, col_offset=8), Name('library_dirs', Load(), lineno=1117, col_offset=15), [Expr(Call(Attribute(Name('lib_opts', Load(), lineno=1118, col_offset=8), 'append', Load(), lineno=1118, col_offset=8), [Call(Attribute(Name('compiler', Load(), lineno=1118, col_offset=24), 'library_dir_option', Load(), lineno=1118, col_offset=24), [Name('dir', Load(), lineno=1118, col_offset=52)], [], None, None, lineno=1118, col_offset=24)], [], None, None, lineno=1118, col_offset=8), lineno=1118, col_offset=8)], [], lineno=1117, col_offset=4), For(Name('dir', Store(), lineno=1120, col_offset=8), Name('runtime_library_dirs', Load(), lineno=1120, col_offset=15), [Assign([Name('opt', Store(), lineno=1121, col_offset=8)], Call(Attribute(Name('compiler', Load(), lineno=1121, col_offset=14), 'runtime_library_dir_option', Load(), lineno=1121, col_offset=14), [Name('dir', Load(), lineno=1121, col_offset=50)], [], None, None, lineno=1121, col_offset=14), lineno=1121, col_offset=8), If(Call(Name('isinstance', Load(), lineno=1122, col_offset=11), [Name('opt', Load(), lineno=1122, col_offset=22), Name('list', Load(), lineno=1122, col_offset=27)], [], None, None, lineno=1122, col_offset=11), [Expr(Call(Attribute(Name('lib_opts', Load(), lineno=1123, col_offset=12), 'extend', Load(), lineno=1123, col_offset=12), [Name('opt', Load(), lineno=1123, col_offset=28)], [], None, None, lineno=1123, col_offset=12), lineno=1123, col_offset=12)], [Expr(Call(Attribute(Name('lib_opts', Load(), lineno=1125, col_offset=12), 'append', Load(), lineno=1125, col_offset=12), [Name('opt', Load(), lineno=1125, col_offset=28)], [], None, None, lineno=1125, col_offset=12), lineno=1125, col_offset=12)], lineno=1122, col_offset=8)], [], lineno=1120, col_offset=4), For(Name('lib', Store(), lineno=1133, col_offset=8), Name('libraries', Load(), lineno=1133, col_offset=15), [Assign([Tuple([Name('lib_dir', Store(), lineno=1134, col_offset=8), Name('lib_name', Store(), lineno=1134, col_offset=17)], Store(), lineno=1134, col_offset=8)], Call(Attribute(Attribute(Name('os', Load(), lineno=1134, col_offset=28), 'path', Load(), lineno=1134, col_offset=28), 'split', Load(), lineno=1134, col_offset=28), [Name('lib', Load(), lineno=1134, col_offset=42)], [], None, None, lineno=1134, col_offset=28), lineno=1134, col_offset=8), If(Compare(Name('lib_dir', Load(), lineno=1135, col_offset=11), [NotEq()], [Str('', lineno=1135, col_offset=22)], lineno=1135, col_offset=11), [Assign([Name('lib_file', Store(), lineno=1136, col_offset=12)], Call(Attribute(Name('compiler', Load(), lineno=1136, col_offset=23), 'find_library_file', Load(), lineno=1136, col_offset=23), [List([Name('lib_dir', Load(), lineno=1136, col_offset=51)], Load(), lineno=1136, col_offset=50), Name('lib_name', Load(), lineno=1136, col_offset=61)], [], None, None, lineno=1136, col_offset=23), lineno=1136, col_offset=12), If(Compare(Name('lib_file', Load(), lineno=1137, col_offset=15), [IsNot()], [Name('None', Load(), lineno=1137, col_offset=31)], lineno=1137, col_offset=15), [Expr(Call(Attribute(Name('lib_opts', Load(), lineno=1138, col_offset=16), 'append', Load(), lineno=1138, col_offset=16), [Name('lib_file', Load(), lineno=1138, col_offset=32)], [], None, None, lineno=1138, col_offset=16), lineno=1138, col_offset=16)], [Expr(Call(Attribute(Name('compiler', Load(), lineno=1140, col_offset=16), 'warn', Load(), lineno=1140, col_offset=16), [BinOp(Str("no library file corresponding to '%s' found (skipping)", lineno=1140, col_offset=30), Mod(), Name('lib', Load(), lineno=1141, col_offset=56), lineno=1140, col_offset=30)], [], None, None, lineno=1140, col_offset=16), lineno=1140, col_offset=16)], lineno=1137, col_offset=12)], [Expr(Call(Attribute(Name('lib_opts', Load(), lineno=1143, col_offset=12), 'append', Load(), lineno=1143, col_offset=12), [Call(Attribute(Name('compiler', Load(), lineno=1143, col_offset=28), 'library_option', Load(), lineno=1143, col_offset=28), [Name('lib', Load(), lineno=1143, col_offset=52)], [], None, None, lineno=1143, col_offset=28)], [], None, None, lineno=1143, col_offset=12), lineno=1143, col_offset=12)], lineno=1135, col_offset=8)], [], lineno=1133, col_offset=4), Return(Name('lib_opts', Load(), lineno=1145, col_offset=11), lineno=1145, col_offset=4)], [], lineno=1106, col_offset=0)])
