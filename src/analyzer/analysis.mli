(** Analysis Module
    @author Soonho Kong (soonhok at cs.cmu.edu)
*)
    
(** {6 Types} *)

(** Type [ctl] is introduced to annotate the origin of generated
    environments. For example, [(env, CtlReturn)] denotes that [env]
    is created as a result of Return statement.  *)
type ctl = CtlBreak         (** Break Statement *)
           | CtlContinue    (** Continue Statement *)
           | CtlReturn      (** Return Statement *)
type size = INT of int | UNKNOWN

(** {6 Values} *)

(** [analysis env modu] analyzes the module [modu] with the given
    environment [env] and returns the result.

    See also Python Documentation:
    {{:http://docs.python.org/reference/toplevel_components.html}Top
    Level Components} *)
val analysis : Env.t -> Ast.modu -> Env.t option
  
(** [aexp env exp] process the expression [exp] with the given
    environment [exp] and returns the inferred type [ty] of the
    expression [exp] and modified environment [env'].

    See also Python Documentation:
    {{:http://docs.python.org/reference/expressions.html}Expressions}. *)
val aexp : Env.t -> Ast.expr -> Type.ty * Env.t

(** [aexp_list env exp_list] process the expression list [exp_list]
    with the given environment [exp] and returns the list of inferred
    types [ty_list] of the expression list [exp_list] and modified
    environment [env']. Expressions are inferred from the left to the
    right. *)
val aexp_list : Env.t -> Ast.expr list -> Type.ty list * Env.t

(** [astat env env_ctl_list stat] processes the statement [stat] with
    the current environment [env] and returns a pair [(env_op,
    env_ctl_list')] :
    - [env_op] : modified environment as a result of processing
    [stat]. It could be [None] if [stat] is Return/Break/Continue
    statement.
    - [env_ctl_list'] : If [stat] contains Return/Break/Continue
    statements, then we collect the environments generated by those
    statemes and add them to [env_ctl_list] and have
    [env_ctl_list'].

    See also Python Documentations:
    {{:http://docs.python.org/reference/simple_stmts.html}Simple
    Statement} and
    {{:http://docs.python.org/reference/compound_stmts.html}Compound
    Statement}. *)
val astat : Env.t -> (Env.t * ctl) list -> Ast.stmt -> Env.t option * (Env.t * ctl) list
  
(** [astat_list env env_ctl_list stats] processes the statement list
    [stats] with the current environment [env] and returns a pair
    [(env_op, env_ctl_list')]. Each statment in the [stats] are
    processed by [astat] in sequence. Once we have [(None, _)] as a
    result of [astat], we stop processing the rest of the list. This
    is to simulate the semantics of Return/Break/Continue
    statements. *)
val astat_list : Env.t -> (Env.t * ctl) list -> Ast.stmt list -> Env.t option * (Env.t * ctl) list
  

val aslice : Env.t -> Ast.slice -> Env.t


  
val aexp_op : Env.t -> Ast.expr option -> Type.ty * Env.t

val atarget : Env.t -> Ast.expr -> Type.ty -> Env.t
  
val atarget_list : Env.t -> Ast.expr list -> Type.ty -> Env.t

val aarguments : Env.t -> Ast.arguments -> string -> Ast.loc -> Env.t * Type.ty list


val mul_size : size -> size -> size

val acomp : Env.t -> Ast.comprehension -> Env.t * size

val acomps : Env.t -> Ast.comprehension list -> Env.t * size
  
